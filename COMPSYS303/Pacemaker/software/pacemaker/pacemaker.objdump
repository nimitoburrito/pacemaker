
pacemaker.elf:     file format elf32-littlenios2
pacemaker.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800244

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x0001870c memsz 0x0001870c flags r-x
    LOAD off    0x0001972c vaddr 0x0081872c paddr 0x0081a404 align 2**12
         filesz 0x00001cd8 memsz 0x00001cd8 flags rw-
    LOAD off    0x0001c0dc vaddr 0x0081c0dc paddr 0x0081c0dc align 2**12
         filesz 0x00000000 memsz 0x00000170 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00017f3c  00800244  00800244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000005ac  00818180  00818180  00019180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001cd8  0081872c  0081a404  0001972c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000170  0081c0dc  0081c0dc  0001c0dc  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  0081c24c  0081c24c  0001b404  2**0
                  CONTENTS
  7 .onchip_mem   00000000  01008000  01008000  0001b404  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0001b404  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000fe8  00000000  00000000  0001b428  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00026a4b  00000000  00000000  0001c410  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00009956  00000000  00000000  00042e5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000deb3  00000000  00000000  0004c7b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002528  00000000  00000000  0005a664  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000477e  00000000  00000000  0005cb8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00017791  00000000  00000000  0006130a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  00078a9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000018a8  00000000  00000000  00078b00  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0007daba  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  0007dabd  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0007dac0  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0007dac1  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0007dac2  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0007dac6  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0007daca  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  0007dace  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  0007dad7  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  0007dae0  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000c  00000000  00000000  0007dae9  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000026  00000000  00000000  0007daf5  2**0
                  CONTENTS, READONLY
 30 .jdi          000051b9  00000000  00000000  0007db1b  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0006bc51  00000000  00000000  00082cd4  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800244 l    d  .text	00000000 .text
00818180 l    d  .rodata	00000000 .rodata
0081872c l    d  .rwdata	00000000 .rwdata
0081c0dc l    d  .bss	00000000 .bss
0081c24c l    d  .sdram	00000000 .sdram
01008000 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/Nimit/Desktop/COMPSYS303/Pacemaker/software/pacemaker_bsp//obj/HAL/src/crt0.o
0080028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 sccharts.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
008182e2 l     O .rodata	00000010 zeroes.4404
0080b708 l     F .text	000000bc __sbprintf
008182f2 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0080b918 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0080d448 l     F .text	00000008 __fp_unlock
0080d45c l     F .text	0000019c __sinit.part.1
0080d5f8 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0081872c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
00818b70 l     O .rwdata	00000020 lc_ctype_charset
00818b50 l     O .rwdata	00000020 lc_message_charset
00818b90 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00818324 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0080ff10 l     F .text	000000fc __sprint_r.part.0
00818458 l     O .rodata	00000010 blanks.4348
00818448 l     O .rodata	00000010 zeroes.4349
0081149c l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 alt_close.c
0081405c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00814168 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00814194 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00814280 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00814360 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0081444c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00814620 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0081a3ec l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0081486c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
008149a0 l     F .text	00000034 alt_dev_reg
00819178 l     O .rwdata	00001060 jtag_uart
0081a1d8 l     O .rwdata	00000120 lcd
0081a2f8 l     O .rwdata	000000c4 uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00814ccc l     F .text	0000020c altera_avalon_jtag_uart_irq
00814ed8 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
0081a3f0 l     O .rwdata	00000004 colstart
00815510 l     F .text	000000b8 lcd_write_command
008155c8 l     F .text	000000d8 lcd_write_data
008156a0 l     F .text	000000d0 lcd_clear_screen
00815770 l     F .text	000001ec lcd_repaint_screen
0081595c l     F .text	000000cc lcd_scroll_up
00815a28 l     F .text	000002ac lcd_handle_escape
008161ac l     F .text	000000ac alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
008163ec l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0081669c l     F .text	0000009c altera_avalon_uart_irq
00816738 l     F .text	000000e4 altera_avalon_uart_rxirq
0081681c l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
008169b8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00816bd0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00816f2c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
008173a0 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
008174e0 l     F .text	0000003c alt_get_errno
0081751c l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
008185ab l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0081c120 g     O .bss	00000004 alt_instruction_exception_handler
0080fa20 g     F .text	00000074 _mprec_log10
0080fb0c g     F .text	0000008c __any_on
00811ef4 g     F .text	00000054 _isatty_r
00818330 g     O .rodata	00000028 __mprec_tinytens
0081455c g     F .text	0000007c alt_main
0081c14c g     O .bss	00000100 alt_irq
00811f48 g     F .text	00000060 _lseek_r
0081a404 g       *ABS*	00000000 __flash_rwdata_start
00813f54 g     F .text	00000088 .hidden __eqdf2
0081c24c g       *ABS*	00000000 __alt_heap_start
008094b8 g     F .text	0000003c printf
00812820 g     F .text	0000009c _wcrtomb_r
0080fd38 g     F .text	0000005c __sseek
0080d798 g     F .text	00000010 __sinit
008126c8 g     F .text	00000140 __swbuf_r
0080dda4 g     F .text	0000007c _setlocale_r
0080d600 g     F .text	00000068 __sfmoreglue
008145fc g     F .text	00000024 __malloc_unlock
00811fa8 g     F .text	0000015c memmove
0080d780 g     F .text	00000018 _cleanup
0080eb9c g     F .text	000000a8 _Balloc
008080bc g     F .text	000000dc .hidden __gtdf2
00817908 g     F .text	00000024 altera_nios2_gen2_irq_init
00800000 g     F .entry	0000001c __reset
00800020 g       *ABS*	00000000 __flash_exceptions_start
008119dc g     F .text	0000005c _fstat_r
0081c104 g     O .bss	00000004 errno
0080fcb4 g     F .text	00000008 __seofread
0081c10c g     O .bss	00000004 alt_argv
008223bc g       *ABS*	00000000 _gp
008178d8 g     F .text	00000030 usleep
008072a4 g     F .text	00000250 reset
00818ff8 g     O .rwdata	00000180 alt_fd_list
00817a84 g     F .text	00000090 alt_find_dev
0080e92c g     F .text	00000148 memcpy
0080d450 g     F .text	0000000c _cleanup_r
008092a0 g     F .text	000000dc .hidden __floatsidf
00817464 g     F .text	0000007c alt_io_redirect
00808198 g     F .text	000000f4 .hidden __ltdf2
00818180 g       *ABS*	00000000 __DTOR_END__
00817d50 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0080fb98 g     F .text	00000074 __fpclassifyd
0080f97c g     F .text	000000a4 __ratio
00811480 g     F .text	0000001c __vfiprintf_internal
008150d0 g     F .text	0000021c altera_avalon_jtag_uart_read
00809488 g     F .text	00000030 _printf_r
008135b0 g     F .text	00000064 .hidden __udivsi3
008142bc g     F .text	000000a4 isatty
00818380 g     O .rodata	000000c8 __mprec_tens
0080de20 g     F .text	0000000c __locale_charset
00817cc0 g     F .text	00000090 alt_icache_flush
0081c100 g     O .bss	00000004 __malloc_top_pad
0081a3c4 g     O .rwdata	00000004 __mb_cur_max
0080de50 g     F .text	0000000c _localeconv_r
00811a38 g     F .text	000004bc __sfvwrite_r
0080efa8 g     F .text	0000003c __i2b
0080fc0c g     F .text	00000054 _sbrk_r
00812104 g     F .text	00000060 _read_r
0081a3e4 g     O .rwdata	00000004 alt_max_fd
008116d0 g     F .text	000000f0 _fclose_r
0080d418 g     F .text	00000030 fflush
0081c0fc g     O .bss	00000004 __malloc_max_sbrked_mem
00807810 g     F .text	000008ac .hidden __adddf3
0080f724 g     F .text	0000010c __b2d
00812f80 g     F .text	00000538 .hidden __umoddi3
00814488 g     F .text	000000d4 lseek
0081a3bc g     O .rwdata	00000004 _global_impure_ptr
00812164 g     F .text	00000564 _realloc_r
0081c24c g       *ABS*	00000000 __bss_end
008172b0 g     F .text	000000f0 alt_iic_isr_register
008177d0 g     F .text	00000108 alt_tick
00812a08 g     F .text	00000578 .hidden __udivdi3
00811938 g     F .text	00000024 _fputwc_r
00818358 g     O .rodata	00000028 __mprec_bigtens
0080ed8c g     F .text	00000104 __s2b
0080937c g     F .text	000000a8 .hidden __floatunsidf
0080f464 g     F .text	00000060 __mcmp
008165f0 g     F .text	000000ac altera_avalon_uart_init
0080d7b8 g     F .text	00000018 __fp_lock_all
00817264 g     F .text	0000004c alt_ic_irq_enabled
00817734 g     F .text	0000009c alt_alarm_stop
0081c114 g     O .bss	00000004 alt_irq_active
01008000 g       *ABS*	00000000 __alt_mem_onchip_mem
008000fc g     F .exceptions	000000d4 alt_irq_handler
00818fd0 g     O .rwdata	00000028 alt_dev_null
00816ee4 g     F .text	00000048 alt_dcache_flush_all
0080ee90 g     F .text	00000068 __hi0bits
00813fdc g     F .text	00000080 .hidden __fixdfsi
0081a404 g       *ABS*	00000000 __ram_rwdata_end
0081a3dc g     O .rwdata	00000008 alt_dev_list
008148a8 g     F .text	000000f8 write
0081872c g       *ABS*	00000000 __ram_rodata_end
008141d0 g     F .text	000000b0 fstat
00808198 g     F .text	000000f4 .hidden __ledf2
0080f1dc g     F .text	00000140 __pow5mult
00810024 g     F .text	0000145c ___vfiprintf_internal_r
0081c0f4 g     O .bss	00000004 __nlocale_changed
00813614 g     F .text	00000058 .hidden __umodsi3
0081c24c g       *ABS*	00000000 end
00815cd4 g     F .text	000004d8 altera_avalon_lcd_16207_write
00816c0c g     F .text	000001ac altera_avalon_uart_write
00814c0c g     F .text	000000c0 altera_avalon_jtag_uart_init
008001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00818180 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
00816464 g     F .text	0000007c alt_avalon_timer_sc_init
00816540 g     F .text	00000060 altera_avalon_uart_write_fd
00809424 g     F .text	00000064 .hidden __clzsi2
008165a0 g     F .text	00000050 altera_avalon_uart_close_fd
008152ec g     F .text	00000224 altera_avalon_jtag_uart_write
0080d7a8 g     F .text	00000004 __sfp_lock_acquire
0080e848 g     F .text	000000e4 memchr
008094f4 g     F .text	000021f8 ___vfprintf_internal_r
0080d90c g     F .text	00000310 _free_r
0080de2c g     F .text	00000010 __locale_mb_cur_max
00817fcc g     F .text	00000180 __call_exitprocs
0081c0f0 g     O .bss	00000004 __mlocale_changed
0081a3c8 g     O .rwdata	00000004 __malloc_sbrk_base
00800244 g     F .text	0000004c _start
0081c118 g     O .bss	00000004 _alt_tick_rate
008077a0 g     F .text	00000070 .hidden __floatundidf
0080f31c g     F .text	00000148 __lshift
0081c11c g     O .bss	00000004 _alt_nticks
0081465c g     F .text	000000fc read
00814a0c g     F .text	0000009c alt_sys_init
00817eb4 g     F .text	00000118 __register_exitproc
0080efe4 g     F .text	000001f8 __multiply
00814f78 g     F .text	00000068 altera_avalon_jtag_uart_close
0081872c g       *ABS*	00000000 __ram_rwdata_start
00818180 g       *ABS*	00000000 __ram_rodata_start
0081c124 g     O .bss	00000028 __malloc_current_mallinfo
0080f830 g     F .text	0000014c __d2b
00814aa8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00817c1c g     F .text	000000a4 alt_get_fd
0081792c g     F .text	00000158 alt_busy_sleep
008115b8 g     F .text	00000054 _close_r
00817e38 g     F .text	0000007c memcmp
00814b68 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0081c24c g       *ABS*	00000000 __alt_stack_base
00814bb8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0080b7c4 g     F .text	00000154 __swsetup_r
008074f4 g     F .text	000002ac tick
0081366c g     F .text	000008e8 .hidden __divdf3
0080d668 g     F .text	00000118 __sfp
0080fa94 g     F .text	00000078 __copybits
00818bc8 g     O .rwdata	00000408 __malloc_av_
0080d7b4 g     F .text	00000004 __sinit_lock_release
0080828c g     F .text	00000718 .hidden __muldf3
0080fc60 g     F .text	00000054 __sread
00817b14 g     F .text	00000108 alt_find_file
00816f68 g     F .text	000000a4 alt_dev_llist_insert
008145d8 g     F .text	00000024 __malloc_lock
008147bc g     F .text	000000b0 sbrk
0080d3bc g     F .text	0000005c _fflush_r
0081160c g     F .text	000000c4 _calloc_r
0081c0dc g       *ABS*	00000000 __bss_start
0080ea74 g     F .text	00000128 memset
00800290 g     F .text	0000016c main
0081c0e4 g     O .bss	00000008 prevTime
0081c110 g     O .bss	00000004 alt_envp
0081c0f8 g     O .bss	00000004 __malloc_max_total_mem
00814b08 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00812808 g     F .text	00000018 __swbuf
00816258 g     F .text	00000134 altera_avalon_lcd_16207_init
0080fd94 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
008117c0 g     F .text	00000014 fclose
0080bb18 g     F .text	00001688 _dtoa_r
0080e03c g     F .text	0000080c _malloc_r
0081297c g     F .text	00000030 __ascii_wctomb
0081a3e8 g     O .rwdata	00000004 alt_errno
0080dc1c g     F .text	000000c4 _fwalk
008134b8 g     F .text	00000084 .hidden __divsi3
0080d7e8 g     F .text	00000124 _malloc_trim_r
00818180 g       *ABS*	00000000 __CTOR_END__
0080fd9c g     F .text	000000dc strcmp
0081c0dc g     O .bss	00000008 systemTime
00818180 g       *ABS*	00000000 __flash_rodata_start
00818180 g       *ABS*	00000000 __DTOR_LIST__
00813f54 g     F .text	00000088 .hidden __nedf2
008149d4 g     F .text	00000038 alt_irq_init
00814758 g     F .text	00000064 alt_release_fd
008181a0 g     O .rodata	00000100 .hidden __clz_tab
0081c0ec g     O .bss	00000004 _PathLocale
00817dec g     F .text	00000014 atexit
00811558 g     F .text	00000060 _write_r
0080de5c g     F .text	00000018 setlocale
0081a3c0 g     O .rwdata	00000004 _impure_ptr
0081c108 g     O .bss	00000004 alt_argc
0080d1a0 g     F .text	0000021c __sflush_r
0081706c g     F .text	00000060 _do_dtors
0080de48 g     F .text	00000008 __locale_cjk_lang
00800020 g       .exceptions	00000000 alt_irq_entry
0080f6c0 g     F .text	00000064 __ulp
0080d7d0 g     F .text	00000018 __fp_unlock_all
0081638c g     F .text	00000060 altera_avalon_lcd_16207_write_fd
0081a3d4 g     O .rwdata	00000008 alt_fs_list
00800020 g       *ABS*	00000000 __ram_exceptions_start
0080de74 g     F .text	0000000c localeconv
00817100 g     F .text	00000050 alt_ic_isr_register
0081a404 g       *ABS*	00000000 _edata
008164e0 g     F .text	00000060 altera_avalon_uart_read_fd
0081c24c g       *ABS*	00000000 _end
008117d4 g     F .text	00000164 __fputwc
00800244 g       *ABS*	00000000 __ram_exceptions_end
00814fe0 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
008171d8 g     F .text	0000008c alt_ic_irq_disable
0080fcbc g     F .text	0000007c __swrite
0081a3cc g     O .rwdata	00000004 __malloc_trim_threshold
0080de3c g     F .text	0000000c __locale_msgcharset
00817e00 g     F .text	00000038 exit
0080dce0 g     F .text	000000c4 _fwalk_reent
0080f4c4 g     F .text	000001fc __mdiff
0081353c g     F .text	00000074 .hidden __modsi3
008003fc g     F .text	00006ea8 logic
0081a400 g     O .rwdata	00000004 __ctype_ptr__
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
0080d7ac g     F .text	00000004 __sfp_lock_release
00800000 g       *ABS*	00000000 __alt_mem_sdram
008184aa g     O .rodata	00000101 _ctype_
00816964 g     F .text	00000054 altera_avalon_uart_close
0081814c g     F .text	00000034 _exit
00816db8 g     F .text	0000012c alt_alarm_start
0080de80 g     F .text	000001bc __smakebuf_r
0080fe78 g     F .text	00000098 strlen
008175e0 g     F .text	00000154 open
008080bc g     F .text	000000dc .hidden __gedf2
0081a3d0 g     O .rwdata	00000004 __wctomb
0081000c g     F .text	00000018 __sprint_r
008170cc g     F .text	00000034 alt_icache_flush_all
0081a3f4 g     O .rwdata	00000004 alt_priority_mask
00817150 g     F .text	00000088 alt_ic_irq_enable
0080b6ec g     F .text	0000001c __vfprintf_internal
008169f4 g     F .text	000001dc altera_avalon_uart_read
008129ac g     F .text	0000005c _wctomb_r
008089a4 g     F .text	000008fc .hidden __subdf3
0080eef8 g     F .text	000000b0 __lo0bits
0081a3f8 g     O .rwdata	00000008 alt_alarm_list
0081700c g     F .text	00000060 _do_ctors
008128bc g     F .text	000000c0 wcrtomb
00814098 g     F .text	000000d0 close
008143c8 g     F .text	00000084 alt_load
0081195c g     F .text	00000080 fputwc
0080d7b0 g     F .text	00000004 __sinit_lock_acquire
0080ec6c g     F .text	00000120 __multadd
0080ec44 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__alt_mem_onchip_mem+0xff7f8004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08409114 	ori	at,at,580
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__alt_mem_sdram-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000fc0 	call	8000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000706 	br	8000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  80008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  800094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  800098:	08001d00 	call	8001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  80009c:	1000021e 	bne	r2,zero,8000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  8000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  8000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  8000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  8000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000f8:	ef80083a 	eret

008000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000fc:	defff904 	addi	sp,sp,-28
  800100:	dfc00615 	stw	ra,24(sp)
  800104:	df000515 	stw	fp,20(sp)
  800108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  80010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800110:	0005313a 	rdctl	r2,ipending
  800114:	e0bffe15 	stw	r2,-8(fp)

  return active;
  800118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  80011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  800120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800124:	00800044 	movi	r2,1
  800128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80012c:	e0fffb17 	ldw	r3,-20(fp)
  800130:	e0bffc17 	ldw	r2,-16(fp)
  800134:	1884703a 	and	r2,r3,r2
  800138:	10001426 	beq	r2,zero,80018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80013c:	008020b4 	movhi	r2,130
  800140:	10b05304 	addi	r2,r2,-16052
  800144:	e0fffd17 	ldw	r3,-12(fp)
  800148:	180690fa 	slli	r3,r3,3
  80014c:	10c5883a 	add	r2,r2,r3
  800150:	10c00017 	ldw	r3,0(r2)
  800154:	008020b4 	movhi	r2,130
  800158:	10b05304 	addi	r2,r2,-16052
  80015c:	e13ffd17 	ldw	r4,-12(fp)
  800160:	200890fa 	slli	r4,r4,3
  800164:	1105883a 	add	r2,r2,r4
  800168:	10800104 	addi	r2,r2,4
  80016c:	10800017 	ldw	r2,0(r2)
  800170:	1009883a 	mov	r4,r2
  800174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
  800178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  80017c:	0005313a 	rdctl	r2,ipending
  800180:	e0bfff15 	stw	r2,-4(fp)

  return active;
  800184:	e0bfff17 	ldw	r2,-4(fp)
  800188:	00000706 	br	8001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
  80018c:	e0bffc17 	ldw	r2,-16(fp)
  800190:	1085883a 	add	r2,r2,r2
  800194:	e0bffc15 	stw	r2,-16(fp)
      i++;
  800198:	e0bffd17 	ldw	r2,-12(fp)
  80019c:	10800044 	addi	r2,r2,1
  8001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  8001a4:	003fe106 	br	80012c <__alt_mem_onchip_mem+0xff7f812c>

    active = alt_irq_pending ();
  8001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  8001ac:	e0bffb17 	ldw	r2,-20(fp)
  8001b0:	103fdb1e 	bne	r2,zero,800120 <__alt_mem_onchip_mem+0xff7f8120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  8001b4:	0001883a 	nop
}
  8001b8:	0001883a 	nop
  8001bc:	e037883a 	mov	sp,fp
  8001c0:	dfc00117 	ldw	ra,4(sp)
  8001c4:	df000017 	ldw	fp,0(sp)
  8001c8:	dec00204 	addi	sp,sp,8
  8001cc:	f800283a 	ret

008001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
  8001d0:	defffb04 	addi	sp,sp,-20
  8001d4:	dfc00415 	stw	ra,16(sp)
  8001d8:	df000315 	stw	fp,12(sp)
  8001dc:	df000304 	addi	fp,sp,12
  8001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  8001e4:	000531fa 	rdctl	r2,exception
  8001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
  8001ec:	e0bffd17 	ldw	r2,-12(fp)
  8001f0:	10801f0c 	andi	r2,r2,124
  8001f4:	1004d0ba 	srli	r2,r2,2
  8001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
  8001fc:	0005333a 	rdctl	r2,badaddr
  800200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  800204:	d0a75917 	ldw	r2,-25244(gp)
  800208:	10000726 	beq	r2,zero,800228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  80020c:	d0a75917 	ldw	r2,-25244(gp)
  800210:	e0fffd17 	ldw	r3,-12(fp)
  800214:	e1bffe17 	ldw	r6,-8(fp)
  800218:	e17fff17 	ldw	r5,-4(fp)
  80021c:	1809883a 	mov	r4,r3
  800220:	103ee83a 	callr	r2
  800224:	00000206 	br	800230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  800228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
  80022c:	0005883a 	mov	r2,zero
}
  800230:	e037883a 	mov	sp,fp
  800234:	dfc00117 	ldw	ra,4(sp)
  800238:	df000017 	ldw	fp,0(sp)
  80023c:	dec00204 	addi	sp,sp,8
  800240:	f800283a 	ret

Disassembly of section .text:

00800244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  800244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  800248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  80024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
  800250:	00bffd16 	blt	zero,r2,800248 <__alt_mem_onchip_mem+0xff7f8248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800254:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  80025c:	068020b4 	movhi	gp,130
    ori gp, gp, %lo(_gp)
  800260:	d688ef14 	ori	gp,gp,9148
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800264:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  800268:	10b03714 	ori	r2,r2,49372

    movhi r3, %hi(__bss_end)
  80026c:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  800270:	18f09314 	ori	r3,r3,49740

    beq r2, r3, 1f
  800274:	10c00326 	beq	r2,r3,800284 <_start+0x40>

0:
    stw zero, (r2)
  800278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  80027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  800280:	10fffd36 	bltu	r2,r3,800278 <__alt_mem_onchip_mem+0xff7f8278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  800284:	08143c80 	call	8143c8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  800288:	081455c0 	call	81455c <alt_main>

0080028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  80028c:	003fff06 	br	80028c <__alt_mem_onchip_mem+0xff7f828c>

00800290 <main>:
#include "sccharts.h"

uint64_t systemTime = 0;
uint64_t prevTime = 0;

int main() {
  800290:	deff9704 	addi	sp,sp,-420
  800294:	dfc06815 	stw	ra,416(sp)
  800298:	df006715 	stw	fp,412(sp)
  80029c:	df006704 	addi	fp,sp,412
    // Create the struct
    TickData data;

    // Initialize
    reset(&data);
  8002a0:	e0bf9c04 	addi	r2,fp,-400
  8002a4:	1009883a 	mov	r4,r2
  8002a8:	08072a40 	call	8072a4 <reset>

    while (1) {
        // Fetch button inputs (active low, so invert the bits)
        data.VS = !(IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE) & 0b0001);  // KEY0 = VS
  8002ac:	00804074 	movhi	r2,257
  8002b0:	10842804 	addi	r2,r2,4256
  8002b4:	10800037 	ldwio	r2,0(r2)
  8002b8:	1080004c 	andi	r2,r2,1
  8002bc:	1005003a 	cmpeq	r2,r2,zero
  8002c0:	e0bfa645 	stb	r2,-359(fp)
        data.AS = !(IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE) & 0b0010);  // KEY1 = AS
  8002c4:	00804074 	movhi	r2,257
  8002c8:	10842804 	addi	r2,r2,4256
  8002cc:	10800037 	ldwio	r2,0(r2)
  8002d0:	1080008c 	andi	r2,r2,2
  8002d4:	1005003a 	cmpeq	r2,r2,zero
  8002d8:	e0bfa605 	stb	r2,-360(fp)

        // Perform a tick
        data.deltaT = systemTime - prevTime;
  8002dc:	d1274817 	ldw	r4,-25312(gp)
  8002e0:	d1674917 	ldw	r5,-25308(gp)
  8002e4:	d1a74a17 	ldw	r6,-25304(gp)
  8002e8:	d1e74b17 	ldw	r7,-25300(gp)
  8002ec:	2185c83a 	sub	r2,r4,r6
  8002f0:	2091803a 	cmpltu	r8,r4,r2
  8002f4:	29c7c83a 	sub	r3,r5,r7
  8002f8:	1a09c83a 	sub	r4,r3,r8
  8002fc:	2007883a 	mov	r3,r4
  800300:	100b883a 	mov	r5,r2
  800304:	180d883a 	mov	r6,r3
  800308:	2809883a 	mov	r4,r5
  80030c:	300b883a 	mov	r5,r6
  800310:	08077a00 	call	8077a0 <__floatundidf>
  800314:	1009883a 	mov	r4,r2
  800318:	180b883a 	mov	r5,r3
  80031c:	e13fa215 	stw	r4,-376(fp)
  800320:	e17fa315 	stw	r5,-372(fp)
        prevTime = systemTime;
  800324:	d0a74817 	ldw	r2,-25312(gp)
  800328:	d0e74917 	ldw	r3,-25308(gp)
  80032c:	d0a74a15 	stw	r2,-25304(gp)
  800330:	d0e74b15 	stw	r3,-25300(gp)
        tick(&data);
  800334:	e0bf9c04 	addi	r2,fp,-400
  800338:	1009883a 	mov	r4,r2
  80033c:	08074f40 	call	8074f4 <tick>

        // If no heartbeat is detected, pacemaker should output pacing signals
        uint32_t ap_led = data.AP ? 0x1 : 0x0;  // AP controls LED 0
  800340:	e0bfa683 	ldbu	r2,-358(fp)
  800344:	10803fcc 	andi	r2,r2,255
  800348:	1080201c 	xori	r2,r2,128
  80034c:	10bfe004 	addi	r2,r2,-128
  800350:	1004c03a 	cmpne	r2,r2,zero
  800354:	10803fcc 	andi	r2,r2,255
  800358:	e0bf9a15 	stw	r2,-408(fp)
        uint32_t vp_led = data.VP ? 0x2 : 0x0;  // VP controls LED 1
  80035c:	e0bfa6c3 	ldbu	r2,-357(fp)
  800360:	10803fcc 	andi	r2,r2,255
  800364:	1080201c 	xori	r2,r2,128
  800368:	10bfe004 	addi	r2,r2,-128
  80036c:	10000226 	beq	r2,zero,800378 <main+0xe8>
  800370:	00800084 	movi	r2,2
  800374:	00000106 	br	80037c <main+0xec>
  800378:	0005883a 	mov	r2,zero
  80037c:	e0bf9b15 	stw	r2,-404(fp)

        // Output AP and VP to LEDs
        IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, ap_led | vp_led);
  800380:	e0ff9a17 	ldw	r3,-408(fp)
  800384:	e0bf9b17 	ldw	r2,-404(fp)
  800388:	1884b03a 	or	r2,r3,r2
  80038c:	1007883a 	mov	r3,r2
  800390:	00804074 	movhi	r2,257
  800394:	10842004 	addi	r2,r2,4224
  800398:	10c00035 	stwio	r3,0(r2)

        // Print the state to console
        printf("AS: %d, VS: %d, AP: %d, VP: %d\n", data.AS, data.VS, data.AP, data.VP);
  80039c:	e0bfa603 	ldbu	r2,-360(fp)
  8003a0:	10c03fcc 	andi	r3,r2,255
  8003a4:	18c0201c 	xori	r3,r3,128
  8003a8:	18ffe004 	addi	r3,r3,-128
  8003ac:	e0bfa643 	ldbu	r2,-359(fp)
  8003b0:	11003fcc 	andi	r4,r2,255
  8003b4:	2100201c 	xori	r4,r4,128
  8003b8:	213fe004 	addi	r4,r4,-128
  8003bc:	e0bfa683 	ldbu	r2,-358(fp)
  8003c0:	11403fcc 	andi	r5,r2,255
  8003c4:	2940201c 	xori	r5,r5,128
  8003c8:	297fe004 	addi	r5,r5,-128
  8003cc:	e0bfa6c3 	ldbu	r2,-357(fp)
  8003d0:	10803fcc 	andi	r2,r2,255
  8003d4:	1080201c 	xori	r2,r2,128
  8003d8:	10bfe004 	addi	r2,r2,-128
  8003dc:	d8800015 	stw	r2,0(sp)
  8003e0:	280f883a 	mov	r7,r5
  8003e4:	200d883a 	mov	r6,r4
  8003e8:	180b883a 	mov	r5,r3
  8003ec:	010020b4 	movhi	r4,130
  8003f0:	21206004 	addi	r4,r4,-32384
  8003f4:	08094b80 	call	8094b8 <printf>
    }
  8003f8:	003fac06 	br	8002ac <__alt_mem_onchip_mem+0xff7f82ac>

008003fc <logic>:
#include "timing.h"
#include <stdio.h>

#include "sccharts.h"

void logic(TickData* d) {
  8003fc:	defffa04 	addi	sp,sp,-24
  800400:	dfc00515 	stw	ra,20(sp)
  800404:	df000415 	stw	fp,16(sp)
  800408:	dc800315 	stw	r18,12(sp)
  80040c:	dc400215 	stw	r17,8(sp)
  800410:	dc000115 	stw	r16,4(sp)
  800414:	df000404 	addi	fp,sp,16
  800418:	e13ffc15 	stw	r4,-16(fp)
  d->_Pacemaker_local_iAP = 0;
  80041c:	e0bffc17 	ldw	r2,-16(fp)
  800420:	10001705 	stb	zero,92(r2)
  d->_Pacemaker_local_iVP = 0;
  800424:	e0bffc17 	ldw	r2,-16(fp)
  800428:	10001745 	stb	zero,93(r2)
  d->_Pacemaker_local_PVARP_timeout = 0;
  80042c:	e0bffc17 	ldw	r2,-16(fp)
  800430:	10001785 	stb	zero,94(r2)
  d->_Pacemaker_local_VRP_timeout = 0;
  800434:	e0bffc17 	ldw	r2,-16(fp)
  800438:	100017c5 	stb	zero,95(r2)
  d->_Pacemaker_local_URI_timeout = 0;
  80043c:	e0bffc17 	ldw	r2,-16(fp)
  800440:	10001805 	stb	zero,96(r2)
  d->_g156 = d->_pg179;
  800444:	e0bffc17 	ldw	r2,-16(fp)
  800448:	10c059c3 	ldbu	r3,359(r2)
  80044c:	e0bffc17 	ldw	r2,-16(fp)
  800450:	10c03605 	stb	r3,216(r2)
  d->_g150 = d->_pg144;
  800454:	e0bffc17 	ldw	r2,-16(fp)
  800458:	10c05a03 	ldbu	r3,360(r2)
  80045c:	e0bffc17 	ldw	r2,-16(fp)
  800460:	10c034c5 	stb	r3,211(r2)
  d->_g153_e1 = !(d->_g156 || d->_g150);
  800464:	e0bffc17 	ldw	r2,-16(fp)
  800468:	10803603 	ldbu	r2,216(r2)
  80046c:	10803fcc 	andi	r2,r2,255
  800470:	1080201c 	xori	r2,r2,128
  800474:	10bfe004 	addi	r2,r2,-128
  800478:	1000081e 	bne	r2,zero,80049c <logic+0xa0>
  80047c:	e0bffc17 	ldw	r2,-16(fp)
  800480:	108034c3 	ldbu	r2,211(r2)
  800484:	10803fcc 	andi	r2,r2,255
  800488:	1080201c 	xori	r2,r2,128
  80048c:	10bfe004 	addi	r2,r2,-128
  800490:	1000021e 	bne	r2,zero,80049c <logic+0xa0>
  800494:	00800044 	movi	r2,1
  800498:	00000106 	br	8004a0 <logic+0xa4>
  80049c:	0005883a 	mov	r2,zero
  8004a0:	1007883a 	mov	r3,r2
  8004a4:	e0bffc17 	ldw	r2,-16(fp)
  8004a8:	10c05845 	stb	r3,353(r2)
  d->_g171 = d->_pg163;
  8004ac:	e0bffc17 	ldw	r2,-16(fp)
  8004b0:	10c05a43 	ldbu	r3,361(r2)
  8004b4:	e0bffc17 	ldw	r2,-16(fp)
  8004b8:	10c03885 	stb	r3,226(r2)
  d->_g172 = d->_g171 && d->VS;
  8004bc:	e0bffc17 	ldw	r2,-16(fp)
  8004c0:	10803883 	ldbu	r2,226(r2)
  8004c4:	10803fcc 	andi	r2,r2,255
  8004c8:	1080201c 	xori	r2,r2,128
  8004cc:	10bfe004 	addi	r2,r2,-128
  8004d0:	10000826 	beq	r2,zero,8004f4 <logic+0xf8>
  8004d4:	e0bffc17 	ldw	r2,-16(fp)
  8004d8:	10800a43 	ldbu	r2,41(r2)
  8004dc:	10803fcc 	andi	r2,r2,255
  8004e0:	1080201c 	xori	r2,r2,128
  8004e4:	10bfe004 	addi	r2,r2,-128
  8004e8:	10000226 	beq	r2,zero,8004f4 <logic+0xf8>
  8004ec:	00800044 	movi	r2,1
  8004f0:	00000106 	br	8004f8 <logic+0xfc>
  8004f4:	0005883a 	mov	r2,zero
  8004f8:	1007883a 	mov	r3,r2
  8004fc:	e0bffc17 	ldw	r2,-16(fp)
  800500:	10c038c5 	stb	r3,227(r2)
  if (d->_g172) {
  800504:	e0bffc17 	ldw	r2,-16(fp)
  800508:	108038c3 	ldbu	r2,227(r2)
  80050c:	10803fcc 	andi	r2,r2,255
  800510:	1080201c 	xori	r2,r2,128
  800514:	10bfe004 	addi	r2,r2,-128
  800518:	10000326 	beq	r2,zero,800528 <logic+0x12c>
    d->_Pacemaker_local__Atrig8 = 1;
  80051c:	e0bffc17 	ldw	r2,-16(fp)
  800520:	00c00044 	movi	r3,1
  800524:	10c01a45 	stb	r3,105(r2)
  }
  d->_g45 = d->_pg66;
  800528:	e0bffc17 	ldw	r2,-16(fp)
  80052c:	10c05a83 	ldbu	r3,362(r2)
  800530:	e0bffc17 	ldw	r2,-16(fp)
  800534:	10c02285 	stb	r3,138(r2)
  d->_g39 = d->_pg65;
  800538:	e0bffc17 	ldw	r2,-16(fp)
  80053c:	10c05ac3 	ldbu	r3,363(r2)
  800540:	e0bffc17 	ldw	r2,-16(fp)
  800544:	10c02145 	stb	r3,133(r2)
  d->_g42_e1 = !(d->_g45 || d->_g39);
  800548:	e0bffc17 	ldw	r2,-16(fp)
  80054c:	10802283 	ldbu	r2,138(r2)
  800550:	10803fcc 	andi	r2,r2,255
  800554:	1080201c 	xori	r2,r2,128
  800558:	10bfe004 	addi	r2,r2,-128
  80055c:	1000081e 	bne	r2,zero,800580 <logic+0x184>
  800560:	e0bffc17 	ldw	r2,-16(fp)
  800564:	10802143 	ldbu	r2,133(r2)
  800568:	10803fcc 	andi	r2,r2,255
  80056c:	1080201c 	xori	r2,r2,128
  800570:	10bfe004 	addi	r2,r2,-128
  800574:	1000021e 	bne	r2,zero,800580 <logic+0x184>
  800578:	00800044 	movi	r2,1
  80057c:	00000106 	br	800584 <logic+0x188>
  800580:	0005883a 	mov	r2,zero
  800584:	1007883a 	mov	r3,r2
  800588:	e0bffc17 	ldw	r2,-16(fp)
  80058c:	10c05605 	stb	r3,344(r2)
  d->_g213 = d->_pg191;
  800590:	e0bffc17 	ldw	r2,-16(fp)
  800594:	10c05b03 	ldbu	r3,364(r2)
  800598:	e0bffc17 	ldw	r2,-16(fp)
  80059c:	10c03f45 	stb	r3,253(r2)
  if (d->_g213) {
  8005a0:	e0bffc17 	ldw	r2,-16(fp)
  8005a4:	10803f43 	ldbu	r2,253(r2)
  8005a8:	10803fcc 	andi	r2,r2,255
  8005ac:	1080201c 	xori	r2,r2,128
  8005b0:	10bfe004 	addi	r2,r2,-128
  8005b4:	10001226 	beq	r2,zero,800600 <logic+0x204>
    d->_Pacemaker_local__region1_URI_x += d->deltaT;
  8005b8:	e13ffc17 	ldw	r4,-16(fp)
  8005bc:	20800d17 	ldw	r2,52(r4)
  8005c0:	20c00e17 	ldw	r3,56(r4)
  8005c4:	e1bffc17 	ldw	r6,-16(fp)
  8005c8:	31000617 	ldw	r4,24(r6)
  8005cc:	31400717 	ldw	r5,28(r6)
  8005d0:	200d883a 	mov	r6,r4
  8005d4:	280f883a 	mov	r7,r5
  8005d8:	1009883a 	mov	r4,r2
  8005dc:	180b883a 	mov	r5,r3
  8005e0:	08078100 	call	807810 <__adddf3>
  8005e4:	1009883a 	mov	r4,r2
  8005e8:	180b883a 	mov	r5,r3
  8005ec:	2005883a 	mov	r2,r4
  8005f0:	2807883a 	mov	r3,r5
  8005f4:	e13ffc17 	ldw	r4,-16(fp)
  8005f8:	20800d15 	stw	r2,52(r4)
  8005fc:	20c00e15 	stw	r3,56(r4)
  }
  d->_g60 = d->_pg43;
  800600:	e0bffc17 	ldw	r2,-16(fp)
  800604:	10c05b43 	ldbu	r3,365(r2)
  800608:	e0bffc17 	ldw	r2,-16(fp)
  80060c:	10c02505 	stb	r3,148(r2)
  d->_cg60 = !(d->_Pacemaker_local__region1_URI_x >= d->URI);
  800610:	e0bffc17 	ldw	r2,-16(fp)
  800614:	14000d17 	ldw	r16,52(r2)
  800618:	14400e17 	ldw	r17,56(r2)
  80061c:	e0bffc17 	ldw	r2,-16(fp)
  800620:	10800517 	ldw	r2,20(r2)
  800624:	1009883a 	mov	r4,r2
  800628:	08092a00 	call	8092a0 <__floatsidf>
  80062c:	1009883a 	mov	r4,r2
  800630:	180b883a 	mov	r5,r3
  800634:	04800044 	movi	r18,1
  800638:	200d883a 	mov	r6,r4
  80063c:	280f883a 	mov	r7,r5
  800640:	8009883a 	mov	r4,r16
  800644:	880b883a 	mov	r5,r17
  800648:	08080bc0 	call	8080bc <__gedf2>
  80064c:	1000010e 	bge	r2,zero,800654 <logic+0x258>
  800650:	0025883a 	mov	r18,zero
  800654:	9080005c 	xori	r2,r18,1
  800658:	10803fcc 	andi	r2,r2,255
  80065c:	1007883a 	mov	r3,r2
  800660:	e0bffc17 	ldw	r2,-16(fp)
  800664:	10c04645 	stb	r3,281(r2)
  d->_g61 = d->_g60 && d->_cg60;
  800668:	e0bffc17 	ldw	r2,-16(fp)
  80066c:	10802503 	ldbu	r2,148(r2)
  800670:	10803fcc 	andi	r2,r2,255
  800674:	1080201c 	xori	r2,r2,128
  800678:	10bfe004 	addi	r2,r2,-128
  80067c:	10000826 	beq	r2,zero,8006a0 <logic+0x2a4>
  800680:	e0bffc17 	ldw	r2,-16(fp)
  800684:	10804643 	ldbu	r2,281(r2)
  800688:	10803fcc 	andi	r2,r2,255
  80068c:	1080201c 	xori	r2,r2,128
  800690:	10bfe004 	addi	r2,r2,-128
  800694:	10000226 	beq	r2,zero,8006a0 <logic+0x2a4>
  800698:	00800044 	movi	r2,1
  80069c:	00000106 	br	8006a4 <logic+0x2a8>
  8006a0:	0005883a 	mov	r2,zero
  8006a4:	1007883a 	mov	r3,r2
  8006a8:	e0bffc17 	ldw	r2,-16(fp)
  8006ac:	10c02545 	stb	r3,149(r2)
  if (d->_g61) {
  8006b0:	e0bffc17 	ldw	r2,-16(fp)
  8006b4:	10802543 	ldbu	r2,149(r2)
  8006b8:	10803fcc 	andi	r2,r2,255
  8006bc:	1080201c 	xori	r2,r2,128
  8006c0:	10bfe004 	addi	r2,r2,-128
  8006c4:	10000326 	beq	r2,zero,8006d4 <logic+0x2d8>
    d->_Pacemaker_local__Atrig2 = 1;
  8006c8:	e0bffc17 	ldw	r2,-16(fp)
  8006cc:	00c00044 	movi	r3,1
  8006d0:	10c018c5 	stb	r3,99(r2)
  }
  d->_g63 = d->_g60 && !d->_cg60;
  8006d4:	e0bffc17 	ldw	r2,-16(fp)
  8006d8:	10802503 	ldbu	r2,148(r2)
  8006dc:	10803fcc 	andi	r2,r2,255
  8006e0:	1080201c 	xori	r2,r2,128
  8006e4:	10bfe004 	addi	r2,r2,-128
  8006e8:	10000826 	beq	r2,zero,80070c <logic+0x310>
  8006ec:	e0bffc17 	ldw	r2,-16(fp)
  8006f0:	10804643 	ldbu	r2,281(r2)
  8006f4:	10803fcc 	andi	r2,r2,255
  8006f8:	1080201c 	xori	r2,r2,128
  8006fc:	10bfe004 	addi	r2,r2,-128
  800700:	1000021e 	bne	r2,zero,80070c <logic+0x310>
  800704:	00800044 	movi	r2,1
  800708:	00000106 	br	800710 <logic+0x314>
  80070c:	0005883a 	mov	r2,zero
  800710:	1007883a 	mov	r3,r2
  800714:	e0bffc17 	ldw	r2,-16(fp)
  800718:	10c025c5 	stb	r3,151(r2)
  d->_cg63 = d->_Pacemaker_local__region1_URI_x >= d->URI;
  80071c:	e0bffc17 	ldw	r2,-16(fp)
  800720:	14000d17 	ldw	r16,52(r2)
  800724:	14400e17 	ldw	r17,56(r2)
  800728:	e0bffc17 	ldw	r2,-16(fp)
  80072c:	10800517 	ldw	r2,20(r2)
  800730:	1009883a 	mov	r4,r2
  800734:	08092a00 	call	8092a0 <__floatsidf>
  800738:	1009883a 	mov	r4,r2
  80073c:	180b883a 	mov	r5,r3
  800740:	04800044 	movi	r18,1
  800744:	200d883a 	mov	r6,r4
  800748:	280f883a 	mov	r7,r5
  80074c:	8009883a 	mov	r4,r16
  800750:	880b883a 	mov	r5,r17
  800754:	08080bc0 	call	8080bc <__gedf2>
  800758:	1000010e 	bge	r2,zero,800760 <logic+0x364>
  80075c:	0025883a 	mov	r18,zero
  800760:	9007883a 	mov	r3,r18
  800764:	e0bffc17 	ldw	r2,-16(fp)
  800768:	10c04605 	stb	r3,280(r2)
  d->_g64 = d->_g63 && d->_cg63;
  80076c:	e0bffc17 	ldw	r2,-16(fp)
  800770:	108025c3 	ldbu	r2,151(r2)
  800774:	10803fcc 	andi	r2,r2,255
  800778:	1080201c 	xori	r2,r2,128
  80077c:	10bfe004 	addi	r2,r2,-128
  800780:	10000826 	beq	r2,zero,8007a4 <logic+0x3a8>
  800784:	e0bffc17 	ldw	r2,-16(fp)
  800788:	10804603 	ldbu	r2,280(r2)
  80078c:	10803fcc 	andi	r2,r2,255
  800790:	1080201c 	xori	r2,r2,128
  800794:	10bfe004 	addi	r2,r2,-128
  800798:	10000226 	beq	r2,zero,8007a4 <logic+0x3a8>
  80079c:	00800044 	movi	r2,1
  8007a0:	00000106 	br	8007a8 <logic+0x3ac>
  8007a4:	0005883a 	mov	r2,zero
  8007a8:	1007883a 	mov	r3,r2
  8007ac:	e0bffc17 	ldw	r2,-16(fp)
  8007b0:	10c02605 	stb	r3,152(r2)
  if (d->_g64) {
  8007b4:	e0bffc17 	ldw	r2,-16(fp)
  8007b8:	10802603 	ldbu	r2,152(r2)
  8007bc:	10803fcc 	andi	r2,r2,255
  8007c0:	1080201c 	xori	r2,r2,128
  8007c4:	10bfe004 	addi	r2,r2,-128
  8007c8:	10000326 	beq	r2,zero,8007d8 <logic+0x3dc>
    d->_Pacemaker_local__Atrig3 = 1;
  8007cc:	e0bffc17 	ldw	r2,-16(fp)
  8007d0:	00c00044 	movi	r3,1
  8007d4:	10c01905 	stb	r3,100(r2)
  }
  d->sleepT = 1000.0;
  8007d8:	e0fffc17 	ldw	r3,-16(fp)
  8007dc:	18000815 	stw	zero,32(r3)
  8007e0:	009023f4 	movhi	r2,16527
  8007e4:	10900004 	addi	r2,r2,16384
  8007e8:	18800915 	stw	r2,36(r3)
  d->_g45 = d->_g39 || d->_g45;
  8007ec:	e0bffc17 	ldw	r2,-16(fp)
  8007f0:	10802143 	ldbu	r2,133(r2)
  8007f4:	10803fcc 	andi	r2,r2,255
  8007f8:	1080201c 	xori	r2,r2,128
  8007fc:	10bfe004 	addi	r2,r2,-128
  800800:	1000061e 	bne	r2,zero,80081c <logic+0x420>
  800804:	e0bffc17 	ldw	r2,-16(fp)
  800808:	10802283 	ldbu	r2,138(r2)
  80080c:	10803fcc 	andi	r2,r2,255
  800810:	1080201c 	xori	r2,r2,128
  800814:	10bfe004 	addi	r2,r2,-128
  800818:	10000226 	beq	r2,zero,800824 <logic+0x428>
  80081c:	00800044 	movi	r2,1
  800820:	00000106 	br	800828 <logic+0x42c>
  800824:	0005883a 	mov	r2,zero
  800828:	1007883a 	mov	r3,r2
  80082c:	e0bffc17 	ldw	r2,-16(fp)
  800830:	10c02285 	stb	r3,138(r2)
  d->_cg40 = d->_Pacemaker_local__region1_URI_x < d->URI;
  800834:	e0bffc17 	ldw	r2,-16(fp)
  800838:	14000d17 	ldw	r16,52(r2)
  80083c:	14400e17 	ldw	r17,56(r2)
  800840:	e0bffc17 	ldw	r2,-16(fp)
  800844:	10800517 	ldw	r2,20(r2)
  800848:	1009883a 	mov	r4,r2
  80084c:	08092a00 	call	8092a0 <__floatsidf>
  800850:	1009883a 	mov	r4,r2
  800854:	180b883a 	mov	r5,r3
  800858:	04800044 	movi	r18,1
  80085c:	200d883a 	mov	r6,r4
  800860:	280f883a 	mov	r7,r5
  800864:	8009883a 	mov	r4,r16
  800868:	880b883a 	mov	r5,r17
  80086c:	08081980 	call	808198 <__ledf2>
  800870:	10000116 	blt	r2,zero,800878 <logic+0x47c>
  800874:	0025883a 	mov	r18,zero
  800878:	9007883a 	mov	r3,r18
  80087c:	e0bffc17 	ldw	r2,-16(fp)
  800880:	10c043c5 	stb	r3,271(r2)
  d->_g39 = d->_g45 && d->_cg40;
  800884:	e0bffc17 	ldw	r2,-16(fp)
  800888:	10802283 	ldbu	r2,138(r2)
  80088c:	10803fcc 	andi	r2,r2,255
  800890:	1080201c 	xori	r2,r2,128
  800894:	10bfe004 	addi	r2,r2,-128
  800898:	10000826 	beq	r2,zero,8008bc <logic+0x4c0>
  80089c:	e0bffc17 	ldw	r2,-16(fp)
  8008a0:	108043c3 	ldbu	r2,271(r2)
  8008a4:	10803fcc 	andi	r2,r2,255
  8008a8:	1080201c 	xori	r2,r2,128
  8008ac:	10bfe004 	addi	r2,r2,-128
  8008b0:	10000226 	beq	r2,zero,8008bc <logic+0x4c0>
  8008b4:	00800044 	movi	r2,1
  8008b8:	00000106 	br	8008c0 <logic+0x4c4>
  8008bc:	0005883a 	mov	r2,zero
  8008c0:	1007883a 	mov	r3,r2
  8008c4:	e0bffc17 	ldw	r2,-16(fp)
  8008c8:	10c02145 	stb	r3,133(r2)
  if (d->_g39) {
  8008cc:	e0bffc17 	ldw	r2,-16(fp)
  8008d0:	10802143 	ldbu	r2,133(r2)
  8008d4:	10803fcc 	andi	r2,r2,255
  8008d8:	1080201c 	xori	r2,r2,128
  8008dc:	10bfe004 	addi	r2,r2,-128
  8008e0:	10003426 	beq	r2,zero,8009b4 <logic+0x5b8>
    d->sleepT = (d->sleepT < (d->URI - d->_Pacemaker_local__region1_URI_x)) ? d->sleepT : (d->URI - d->_Pacemaker_local__region1_URI_x);
  8008e4:	e0bffc17 	ldw	r2,-16(fp)
  8008e8:	14000817 	ldw	r16,32(r2)
  8008ec:	14400917 	ldw	r17,36(r2)
  8008f0:	e0bffc17 	ldw	r2,-16(fp)
  8008f4:	10800517 	ldw	r2,20(r2)
  8008f8:	1009883a 	mov	r4,r2
  8008fc:	08092a00 	call	8092a0 <__floatsidf>
  800900:	1011883a 	mov	r8,r2
  800904:	1813883a 	mov	r9,r3
  800908:	e13ffc17 	ldw	r4,-16(fp)
  80090c:	20800d17 	ldw	r2,52(r4)
  800910:	20c00e17 	ldw	r3,56(r4)
  800914:	100d883a 	mov	r6,r2
  800918:	180f883a 	mov	r7,r3
  80091c:	4009883a 	mov	r4,r8
  800920:	480b883a 	mov	r5,r9
  800924:	08089a40 	call	8089a4 <__subdf3>
  800928:	1009883a 	mov	r4,r2
  80092c:	180b883a 	mov	r5,r3
  800930:	2005883a 	mov	r2,r4
  800934:	2807883a 	mov	r3,r5
  800938:	100d883a 	mov	r6,r2
  80093c:	180f883a 	mov	r7,r3
  800940:	8009883a 	mov	r4,r16
  800944:	880b883a 	mov	r5,r17
  800948:	08081980 	call	808198 <__ledf2>
  80094c:	1000040e 	bge	r2,zero,800960 <logic+0x564>
  800950:	e13ffc17 	ldw	r4,-16(fp)
  800954:	20800817 	ldw	r2,32(r4)
  800958:	20c00917 	ldw	r3,36(r4)
  80095c:	00001206 	br	8009a8 <logic+0x5ac>
  800960:	e0bffc17 	ldw	r2,-16(fp)
  800964:	10800517 	ldw	r2,20(r2)
  800968:	1009883a 	mov	r4,r2
  80096c:	08092a00 	call	8092a0 <__floatsidf>
  800970:	1011883a 	mov	r8,r2
  800974:	1813883a 	mov	r9,r3
  800978:	e13ffc17 	ldw	r4,-16(fp)
  80097c:	20800d17 	ldw	r2,52(r4)
  800980:	20c00e17 	ldw	r3,56(r4)
  800984:	100d883a 	mov	r6,r2
  800988:	180f883a 	mov	r7,r3
  80098c:	4009883a 	mov	r4,r8
  800990:	480b883a 	mov	r5,r9
  800994:	08089a40 	call	8089a4 <__subdf3>
  800998:	1009883a 	mov	r4,r2
  80099c:	180b883a 	mov	r5,r3
  8009a0:	2005883a 	mov	r2,r4
  8009a4:	2807883a 	mov	r3,r5
  8009a8:	e13ffc17 	ldw	r4,-16(fp)
  8009ac:	20800815 	stw	r2,32(r4)
  8009b0:	20c00915 	stw	r3,36(r4)
  }
  d->_cg41 = d->_Pacemaker_local__Atrig2 || d->_Pacemaker_local__Atrig3;
  8009b4:	e0bffc17 	ldw	r2,-16(fp)
  8009b8:	108018c3 	ldbu	r2,99(r2)
  8009bc:	10803fcc 	andi	r2,r2,255
  8009c0:	1080201c 	xori	r2,r2,128
  8009c4:	10bfe004 	addi	r2,r2,-128
  8009c8:	1000061e 	bne	r2,zero,8009e4 <logic+0x5e8>
  8009cc:	e0bffc17 	ldw	r2,-16(fp)
  8009d0:	10801903 	ldbu	r2,100(r2)
  8009d4:	10803fcc 	andi	r2,r2,255
  8009d8:	1080201c 	xori	r2,r2,128
  8009dc:	10bfe004 	addi	r2,r2,-128
  8009e0:	10000226 	beq	r2,zero,8009ec <logic+0x5f0>
  8009e4:	00800044 	movi	r2,1
  8009e8:	00000106 	br	8009f0 <logic+0x5f4>
  8009ec:	0005883a 	mov	r2,zero
  8009f0:	1007883a 	mov	r3,r2
  8009f4:	e0bffc17 	ldw	r2,-16(fp)
  8009f8:	10c04385 	stb	r3,270(r2)
  d->_g40 = d->_g45 && !d->_cg40;
  8009fc:	e0bffc17 	ldw	r2,-16(fp)
  800a00:	10802283 	ldbu	r2,138(r2)
  800a04:	10803fcc 	andi	r2,r2,255
  800a08:	1080201c 	xori	r2,r2,128
  800a0c:	10bfe004 	addi	r2,r2,-128
  800a10:	10000826 	beq	r2,zero,800a34 <logic+0x638>
  800a14:	e0bffc17 	ldw	r2,-16(fp)
  800a18:	108043c3 	ldbu	r2,271(r2)
  800a1c:	10803fcc 	andi	r2,r2,255
  800a20:	1080201c 	xori	r2,r2,128
  800a24:	10bfe004 	addi	r2,r2,-128
  800a28:	1000021e 	bne	r2,zero,800a34 <logic+0x638>
  800a2c:	00800044 	movi	r2,1
  800a30:	00000106 	br	800a38 <logic+0x63c>
  800a34:	0005883a 	mov	r2,zero
  800a38:	1007883a 	mov	r3,r2
  800a3c:	e0bffc17 	ldw	r2,-16(fp)
  800a40:	10c02185 	stb	r3,134(r2)
  d->_cg43 = d->_Pacemaker_local__Atrig2 || d->_Pacemaker_local__Atrig3;
  800a44:	e0bffc17 	ldw	r2,-16(fp)
  800a48:	108018c3 	ldbu	r2,99(r2)
  800a4c:	10803fcc 	andi	r2,r2,255
  800a50:	1080201c 	xori	r2,r2,128
  800a54:	10bfe004 	addi	r2,r2,-128
  800a58:	1000061e 	bne	r2,zero,800a74 <logic+0x678>
  800a5c:	e0bffc17 	ldw	r2,-16(fp)
  800a60:	10801903 	ldbu	r2,100(r2)
  800a64:	10803fcc 	andi	r2,r2,255
  800a68:	1080201c 	xori	r2,r2,128
  800a6c:	10bfe004 	addi	r2,r2,-128
  800a70:	10000226 	beq	r2,zero,800a7c <logic+0x680>
  800a74:	00800044 	movi	r2,1
  800a78:	00000106 	br	800a80 <logic+0x684>
  800a7c:	0005883a 	mov	r2,zero
  800a80:	1007883a 	mov	r3,r2
  800a84:	e0bffc17 	ldw	r2,-16(fp)
  800a88:	10c04405 	stb	r3,272(r2)
  d->_g42 = (d->_g39 && d->_cg41) || (d->_g40 && d->_cg43);
  800a8c:	e0bffc17 	ldw	r2,-16(fp)
  800a90:	10802143 	ldbu	r2,133(r2)
  800a94:	10803fcc 	andi	r2,r2,255
  800a98:	1080201c 	xori	r2,r2,128
  800a9c:	10bfe004 	addi	r2,r2,-128
  800aa0:	10000626 	beq	r2,zero,800abc <logic+0x6c0>
  800aa4:	e0bffc17 	ldw	r2,-16(fp)
  800aa8:	10804383 	ldbu	r2,270(r2)
  800aac:	10803fcc 	andi	r2,r2,255
  800ab0:	1080201c 	xori	r2,r2,128
  800ab4:	10bfe004 	addi	r2,r2,-128
  800ab8:	10000c1e 	bne	r2,zero,800aec <logic+0x6f0>
  800abc:	e0bffc17 	ldw	r2,-16(fp)
  800ac0:	10802183 	ldbu	r2,134(r2)
  800ac4:	10803fcc 	andi	r2,r2,255
  800ac8:	1080201c 	xori	r2,r2,128
  800acc:	10bfe004 	addi	r2,r2,-128
  800ad0:	10000826 	beq	r2,zero,800af4 <logic+0x6f8>
  800ad4:	e0bffc17 	ldw	r2,-16(fp)
  800ad8:	10804403 	ldbu	r2,272(r2)
  800adc:	10803fcc 	andi	r2,r2,255
  800ae0:	1080201c 	xori	r2,r2,128
  800ae4:	10bfe004 	addi	r2,r2,-128
  800ae8:	10000226 	beq	r2,zero,800af4 <logic+0x6f8>
  800aec:	00800044 	movi	r2,1
  800af0:	00000106 	br	800af8 <logic+0x6fc>
  800af4:	0005883a 	mov	r2,zero
  800af8:	1007883a 	mov	r3,r2
  800afc:	e0bffc17 	ldw	r2,-16(fp)
  800b00:	10c02205 	stb	r3,136(r2)
  d->_g56 = d->_pg46;
  800b04:	e0bffc17 	ldw	r2,-16(fp)
  800b08:	10c05b83 	ldbu	r3,366(r2)
  800b0c:	e0bffc17 	ldw	r2,-16(fp)
  800b10:	10c02485 	stb	r3,146(r2)
  d->_g50 = d->_pg37;
  800b14:	e0bffc17 	ldw	r2,-16(fp)
  800b18:	10c05bc3 	ldbu	r3,367(r2)
  800b1c:	e0bffc17 	ldw	r2,-16(fp)
  800b20:	10c02345 	stb	r3,141(r2)
  d->_g53_e2 = !(d->_g56 || d->_g50);
  800b24:	e0bffc17 	ldw	r2,-16(fp)
  800b28:	10802483 	ldbu	r2,146(r2)
  800b2c:	10803fcc 	andi	r2,r2,255
  800b30:	1080201c 	xori	r2,r2,128
  800b34:	10bfe004 	addi	r2,r2,-128
  800b38:	1000081e 	bne	r2,zero,800b5c <logic+0x760>
  800b3c:	e0bffc17 	ldw	r2,-16(fp)
  800b40:	10802343 	ldbu	r2,141(r2)
  800b44:	10803fcc 	andi	r2,r2,255
  800b48:	1080201c 	xori	r2,r2,128
  800b4c:	10bfe004 	addi	r2,r2,-128
  800b50:	1000021e 	bne	r2,zero,800b5c <logic+0x760>
  800b54:	00800044 	movi	r2,1
  800b58:	00000106 	br	800b60 <logic+0x764>
  800b5c:	0005883a 	mov	r2,zero
  800b60:	1007883a 	mov	r3,r2
  800b64:	e0bffc17 	ldw	r2,-16(fp)
  800b68:	10c05645 	stb	r3,345(r2)
  d->_g56 = d->_g50 || d->_g56;
  800b6c:	e0bffc17 	ldw	r2,-16(fp)
  800b70:	10802343 	ldbu	r2,141(r2)
  800b74:	10803fcc 	andi	r2,r2,255
  800b78:	1080201c 	xori	r2,r2,128
  800b7c:	10bfe004 	addi	r2,r2,-128
  800b80:	1000061e 	bne	r2,zero,800b9c <logic+0x7a0>
  800b84:	e0bffc17 	ldw	r2,-16(fp)
  800b88:	10802483 	ldbu	r2,146(r2)
  800b8c:	10803fcc 	andi	r2,r2,255
  800b90:	1080201c 	xori	r2,r2,128
  800b94:	10bfe004 	addi	r2,r2,-128
  800b98:	10000226 	beq	r2,zero,800ba4 <logic+0x7a8>
  800b9c:	00800044 	movi	r2,1
  800ba0:	00000106 	br	800ba8 <logic+0x7ac>
  800ba4:	0005883a 	mov	r2,zero
  800ba8:	1007883a 	mov	r3,r2
  800bac:	e0bffc17 	ldw	r2,-16(fp)
  800bb0:	10c02485 	stb	r3,146(r2)
  d->_cg51 = d->_Pacemaker_local__region1_URI_x < d->URI;
  800bb4:	e0bffc17 	ldw	r2,-16(fp)
  800bb8:	14000d17 	ldw	r16,52(r2)
  800bbc:	14400e17 	ldw	r17,56(r2)
  800bc0:	e0bffc17 	ldw	r2,-16(fp)
  800bc4:	10800517 	ldw	r2,20(r2)
  800bc8:	1009883a 	mov	r4,r2
  800bcc:	08092a00 	call	8092a0 <__floatsidf>
  800bd0:	1009883a 	mov	r4,r2
  800bd4:	180b883a 	mov	r5,r3
  800bd8:	04800044 	movi	r18,1
  800bdc:	200d883a 	mov	r6,r4
  800be0:	280f883a 	mov	r7,r5
  800be4:	8009883a 	mov	r4,r16
  800be8:	880b883a 	mov	r5,r17
  800bec:	08081980 	call	808198 <__ledf2>
  800bf0:	10000116 	blt	r2,zero,800bf8 <logic+0x7fc>
  800bf4:	0025883a 	mov	r18,zero
  800bf8:	9007883a 	mov	r3,r18
  800bfc:	e0bffc17 	ldw	r2,-16(fp)
  800c00:	10c04545 	stb	r3,277(r2)
  d->_g50 = d->_g56 && d->_cg51;
  800c04:	e0bffc17 	ldw	r2,-16(fp)
  800c08:	10802483 	ldbu	r2,146(r2)
  800c0c:	10803fcc 	andi	r2,r2,255
  800c10:	1080201c 	xori	r2,r2,128
  800c14:	10bfe004 	addi	r2,r2,-128
  800c18:	10000826 	beq	r2,zero,800c3c <logic+0x840>
  800c1c:	e0bffc17 	ldw	r2,-16(fp)
  800c20:	10804543 	ldbu	r2,277(r2)
  800c24:	10803fcc 	andi	r2,r2,255
  800c28:	1080201c 	xori	r2,r2,128
  800c2c:	10bfe004 	addi	r2,r2,-128
  800c30:	10000226 	beq	r2,zero,800c3c <logic+0x840>
  800c34:	00800044 	movi	r2,1
  800c38:	00000106 	br	800c40 <logic+0x844>
  800c3c:	0005883a 	mov	r2,zero
  800c40:	1007883a 	mov	r3,r2
  800c44:	e0bffc17 	ldw	r2,-16(fp)
  800c48:	10c02345 	stb	r3,141(r2)
  if (d->_g50) {
  800c4c:	e0bffc17 	ldw	r2,-16(fp)
  800c50:	10802343 	ldbu	r2,141(r2)
  800c54:	10803fcc 	andi	r2,r2,255
  800c58:	1080201c 	xori	r2,r2,128
  800c5c:	10bfe004 	addi	r2,r2,-128
  800c60:	10003426 	beq	r2,zero,800d34 <logic+0x938>
    d->sleepT = (d->sleepT < (d->URI - d->_Pacemaker_local__region1_URI_x)) ? d->sleepT : (d->URI - d->_Pacemaker_local__region1_URI_x);
  800c64:	e0bffc17 	ldw	r2,-16(fp)
  800c68:	14000817 	ldw	r16,32(r2)
  800c6c:	14400917 	ldw	r17,36(r2)
  800c70:	e0bffc17 	ldw	r2,-16(fp)
  800c74:	10800517 	ldw	r2,20(r2)
  800c78:	1009883a 	mov	r4,r2
  800c7c:	08092a00 	call	8092a0 <__floatsidf>
  800c80:	1011883a 	mov	r8,r2
  800c84:	1813883a 	mov	r9,r3
  800c88:	e13ffc17 	ldw	r4,-16(fp)
  800c8c:	20800d17 	ldw	r2,52(r4)
  800c90:	20c00e17 	ldw	r3,56(r4)
  800c94:	100d883a 	mov	r6,r2
  800c98:	180f883a 	mov	r7,r3
  800c9c:	4009883a 	mov	r4,r8
  800ca0:	480b883a 	mov	r5,r9
  800ca4:	08089a40 	call	8089a4 <__subdf3>
  800ca8:	1009883a 	mov	r4,r2
  800cac:	180b883a 	mov	r5,r3
  800cb0:	2005883a 	mov	r2,r4
  800cb4:	2807883a 	mov	r3,r5
  800cb8:	100d883a 	mov	r6,r2
  800cbc:	180f883a 	mov	r7,r3
  800cc0:	8009883a 	mov	r4,r16
  800cc4:	880b883a 	mov	r5,r17
  800cc8:	08081980 	call	808198 <__ledf2>
  800ccc:	1000040e 	bge	r2,zero,800ce0 <logic+0x8e4>
  800cd0:	e13ffc17 	ldw	r4,-16(fp)
  800cd4:	20800817 	ldw	r2,32(r4)
  800cd8:	20c00917 	ldw	r3,36(r4)
  800cdc:	00001206 	br	800d28 <logic+0x92c>
  800ce0:	e0bffc17 	ldw	r2,-16(fp)
  800ce4:	10800517 	ldw	r2,20(r2)
  800ce8:	1009883a 	mov	r4,r2
  800cec:	08092a00 	call	8092a0 <__floatsidf>
  800cf0:	1011883a 	mov	r8,r2
  800cf4:	1813883a 	mov	r9,r3
  800cf8:	e13ffc17 	ldw	r4,-16(fp)
  800cfc:	20800d17 	ldw	r2,52(r4)
  800d00:	20c00e17 	ldw	r3,56(r4)
  800d04:	100d883a 	mov	r6,r2
  800d08:	180f883a 	mov	r7,r3
  800d0c:	4009883a 	mov	r4,r8
  800d10:	480b883a 	mov	r5,r9
  800d14:	08089a40 	call	8089a4 <__subdf3>
  800d18:	1009883a 	mov	r4,r2
  800d1c:	180b883a 	mov	r5,r3
  800d20:	2005883a 	mov	r2,r4
  800d24:	2807883a 	mov	r3,r5
  800d28:	e13ffc17 	ldw	r4,-16(fp)
  800d2c:	20800815 	stw	r2,32(r4)
  800d30:	20c00915 	stw	r3,36(r4)
  }
  d->_cg52 = d->_Pacemaker_local__Atrig2 || d->_Pacemaker_local__Atrig3;
  800d34:	e0bffc17 	ldw	r2,-16(fp)
  800d38:	108018c3 	ldbu	r2,99(r2)
  800d3c:	10803fcc 	andi	r2,r2,255
  800d40:	1080201c 	xori	r2,r2,128
  800d44:	10bfe004 	addi	r2,r2,-128
  800d48:	1000061e 	bne	r2,zero,800d64 <logic+0x968>
  800d4c:	e0bffc17 	ldw	r2,-16(fp)
  800d50:	10801903 	ldbu	r2,100(r2)
  800d54:	10803fcc 	andi	r2,r2,255
  800d58:	1080201c 	xori	r2,r2,128
  800d5c:	10bfe004 	addi	r2,r2,-128
  800d60:	10000226 	beq	r2,zero,800d6c <logic+0x970>
  800d64:	00800044 	movi	r2,1
  800d68:	00000106 	br	800d70 <logic+0x974>
  800d6c:	0005883a 	mov	r2,zero
  800d70:	1007883a 	mov	r3,r2
  800d74:	e0bffc17 	ldw	r2,-16(fp)
  800d78:	10c04505 	stb	r3,276(r2)
  d->_g51 = d->_g56 && !d->_cg51;
  800d7c:	e0bffc17 	ldw	r2,-16(fp)
  800d80:	10802483 	ldbu	r2,146(r2)
  800d84:	10803fcc 	andi	r2,r2,255
  800d88:	1080201c 	xori	r2,r2,128
  800d8c:	10bfe004 	addi	r2,r2,-128
  800d90:	10000826 	beq	r2,zero,800db4 <logic+0x9b8>
  800d94:	e0bffc17 	ldw	r2,-16(fp)
  800d98:	10804543 	ldbu	r2,277(r2)
  800d9c:	10803fcc 	andi	r2,r2,255
  800da0:	1080201c 	xori	r2,r2,128
  800da4:	10bfe004 	addi	r2,r2,-128
  800da8:	1000021e 	bne	r2,zero,800db4 <logic+0x9b8>
  800dac:	00800044 	movi	r2,1
  800db0:	00000106 	br	800db8 <logic+0x9bc>
  800db4:	0005883a 	mov	r2,zero
  800db8:	1007883a 	mov	r3,r2
  800dbc:	e0bffc17 	ldw	r2,-16(fp)
  800dc0:	10c02385 	stb	r3,142(r2)
  d->_cg54 = d->_Pacemaker_local__Atrig2 || d->_Pacemaker_local__Atrig3;
  800dc4:	e0bffc17 	ldw	r2,-16(fp)
  800dc8:	108018c3 	ldbu	r2,99(r2)
  800dcc:	10803fcc 	andi	r2,r2,255
  800dd0:	1080201c 	xori	r2,r2,128
  800dd4:	10bfe004 	addi	r2,r2,-128
  800dd8:	1000061e 	bne	r2,zero,800df4 <logic+0x9f8>
  800ddc:	e0bffc17 	ldw	r2,-16(fp)
  800de0:	10801903 	ldbu	r2,100(r2)
  800de4:	10803fcc 	andi	r2,r2,255
  800de8:	1080201c 	xori	r2,r2,128
  800dec:	10bfe004 	addi	r2,r2,-128
  800df0:	10000226 	beq	r2,zero,800dfc <logic+0xa00>
  800df4:	00800044 	movi	r2,1
  800df8:	00000106 	br	800e00 <logic+0xa04>
  800dfc:	0005883a 	mov	r2,zero
  800e00:	1007883a 	mov	r3,r2
  800e04:	e0bffc17 	ldw	r2,-16(fp)
  800e08:	10c04585 	stb	r3,278(r2)
  d->_g53 = (d->_g50 && d->_cg52) || (d->_g51 && d->_cg54);
  800e0c:	e0bffc17 	ldw	r2,-16(fp)
  800e10:	10802343 	ldbu	r2,141(r2)
  800e14:	10803fcc 	andi	r2,r2,255
  800e18:	1080201c 	xori	r2,r2,128
  800e1c:	10bfe004 	addi	r2,r2,-128
  800e20:	10000626 	beq	r2,zero,800e3c <logic+0xa40>
  800e24:	e0bffc17 	ldw	r2,-16(fp)
  800e28:	10804503 	ldbu	r2,276(r2)
  800e2c:	10803fcc 	andi	r2,r2,255
  800e30:	1080201c 	xori	r2,r2,128
  800e34:	10bfe004 	addi	r2,r2,-128
  800e38:	10000c1e 	bne	r2,zero,800e6c <logic+0xa70>
  800e3c:	e0bffc17 	ldw	r2,-16(fp)
  800e40:	10802383 	ldbu	r2,142(r2)
  800e44:	10803fcc 	andi	r2,r2,255
  800e48:	1080201c 	xori	r2,r2,128
  800e4c:	10bfe004 	addi	r2,r2,-128
  800e50:	10000826 	beq	r2,zero,800e74 <logic+0xa78>
  800e54:	e0bffc17 	ldw	r2,-16(fp)
  800e58:	10804583 	ldbu	r2,278(r2)
  800e5c:	10803fcc 	andi	r2,r2,255
  800e60:	1080201c 	xori	r2,r2,128
  800e64:	10bfe004 	addi	r2,r2,-128
  800e68:	10000226 	beq	r2,zero,800e74 <logic+0xa78>
  800e6c:	00800044 	movi	r2,1
  800e70:	00000106 	br	800e78 <logic+0xa7c>
  800e74:	0005883a 	mov	r2,zero
  800e78:	1007883a 	mov	r3,r2
  800e7c:	e0bffc17 	ldw	r2,-16(fp)
  800e80:	10c02405 	stb	r3,144(r2)
  d->_g60 = !d->_g60;
  800e84:	e0bffc17 	ldw	r2,-16(fp)
  800e88:	10802503 	ldbu	r2,148(r2)
  800e8c:	10803fcc 	andi	r2,r2,255
  800e90:	1080201c 	xori	r2,r2,128
  800e94:	10bfe004 	addi	r2,r2,-128
  800e98:	1005003a 	cmpeq	r2,r2,zero
  800e9c:	1007883a 	mov	r3,r2
  800ea0:	e0bffc17 	ldw	r2,-16(fp)
  800ea4:	10c02505 	stb	r3,148(r2)
  d->_g64 = d->_g61 || d->_g64;
  800ea8:	e0bffc17 	ldw	r2,-16(fp)
  800eac:	10802543 	ldbu	r2,149(r2)
  800eb0:	10803fcc 	andi	r2,r2,255
  800eb4:	1080201c 	xori	r2,r2,128
  800eb8:	10bfe004 	addi	r2,r2,-128
  800ebc:	1000061e 	bne	r2,zero,800ed8 <logic+0xadc>
  800ec0:	e0bffc17 	ldw	r2,-16(fp)
  800ec4:	10802603 	ldbu	r2,152(r2)
  800ec8:	10803fcc 	andi	r2,r2,255
  800ecc:	1080201c 	xori	r2,r2,128
  800ed0:	10bfe004 	addi	r2,r2,-128
  800ed4:	10000226 	beq	r2,zero,800ee0 <logic+0xae4>
  800ed8:	00800044 	movi	r2,1
  800edc:	00000106 	br	800ee4 <logic+0xae8>
  800ee0:	0005883a 	mov	r2,zero
  800ee4:	1007883a 	mov	r3,r2
  800ee8:	e0bffc17 	ldw	r2,-16(fp)
  800eec:	10c02605 	stb	r3,152(r2)
  d->_g61 = (d->_g42_e1 || d->_g42) && (d->_g53_e2 || d->_g53) && (d->_g60 || d->_g64) && (d->_g42 || d->_g53 || d->_g64);
  800ef0:	e0bffc17 	ldw	r2,-16(fp)
  800ef4:	10805603 	ldbu	r2,344(r2)
  800ef8:	10803fcc 	andi	r2,r2,255
  800efc:	1080201c 	xori	r2,r2,128
  800f00:	10bfe004 	addi	r2,r2,-128
  800f04:	1000061e 	bne	r2,zero,800f20 <logic+0xb24>
  800f08:	e0bffc17 	ldw	r2,-16(fp)
  800f0c:	10802203 	ldbu	r2,136(r2)
  800f10:	10803fcc 	andi	r2,r2,255
  800f14:	1080201c 	xori	r2,r2,128
  800f18:	10bfe004 	addi	r2,r2,-128
  800f1c:	10002c26 	beq	r2,zero,800fd0 <logic+0xbd4>
  800f20:	e0bffc17 	ldw	r2,-16(fp)
  800f24:	10805643 	ldbu	r2,345(r2)
  800f28:	10803fcc 	andi	r2,r2,255
  800f2c:	1080201c 	xori	r2,r2,128
  800f30:	10bfe004 	addi	r2,r2,-128
  800f34:	1000061e 	bne	r2,zero,800f50 <logic+0xb54>
  800f38:	e0bffc17 	ldw	r2,-16(fp)
  800f3c:	10802403 	ldbu	r2,144(r2)
  800f40:	10803fcc 	andi	r2,r2,255
  800f44:	1080201c 	xori	r2,r2,128
  800f48:	10bfe004 	addi	r2,r2,-128
  800f4c:	10002026 	beq	r2,zero,800fd0 <logic+0xbd4>
  800f50:	e0bffc17 	ldw	r2,-16(fp)
  800f54:	10802503 	ldbu	r2,148(r2)
  800f58:	10803fcc 	andi	r2,r2,255
  800f5c:	1080201c 	xori	r2,r2,128
  800f60:	10bfe004 	addi	r2,r2,-128
  800f64:	1000061e 	bne	r2,zero,800f80 <logic+0xb84>
  800f68:	e0bffc17 	ldw	r2,-16(fp)
  800f6c:	10802603 	ldbu	r2,152(r2)
  800f70:	10803fcc 	andi	r2,r2,255
  800f74:	1080201c 	xori	r2,r2,128
  800f78:	10bfe004 	addi	r2,r2,-128
  800f7c:	10001426 	beq	r2,zero,800fd0 <logic+0xbd4>
  800f80:	e0bffc17 	ldw	r2,-16(fp)
  800f84:	10802203 	ldbu	r2,136(r2)
  800f88:	10803fcc 	andi	r2,r2,255
  800f8c:	1080201c 	xori	r2,r2,128
  800f90:	10bfe004 	addi	r2,r2,-128
  800f94:	10000c1e 	bne	r2,zero,800fc8 <logic+0xbcc>
  800f98:	e0bffc17 	ldw	r2,-16(fp)
  800f9c:	10802403 	ldbu	r2,144(r2)
  800fa0:	10803fcc 	andi	r2,r2,255
  800fa4:	1080201c 	xori	r2,r2,128
  800fa8:	10bfe004 	addi	r2,r2,-128
  800fac:	1000061e 	bne	r2,zero,800fc8 <logic+0xbcc>
  800fb0:	e0bffc17 	ldw	r2,-16(fp)
  800fb4:	10802603 	ldbu	r2,152(r2)
  800fb8:	10803fcc 	andi	r2,r2,255
  800fbc:	1080201c 	xori	r2,r2,128
  800fc0:	10bfe004 	addi	r2,r2,-128
  800fc4:	10000226 	beq	r2,zero,800fd0 <logic+0xbd4>
  800fc8:	00800044 	movi	r2,1
  800fcc:	00000106 	br	800fd4 <logic+0xbd8>
  800fd0:	0005883a 	mov	r2,zero
  800fd4:	1007883a 	mov	r3,r2
  800fd8:	e0bffc17 	ldw	r2,-16(fp)
  800fdc:	10c02545 	stb	r3,149(r2)
  d->_cg65 = d->_Pacemaker_local__Atrig2;
  800fe0:	e0bffc17 	ldw	r2,-16(fp)
  800fe4:	10c018c3 	ldbu	r3,99(r2)
  800fe8:	e0bffc17 	ldw	r2,-16(fp)
  800fec:	10c04285 	stb	r3,266(r2)
  d->_g62 = d->_g61 && d->_cg65;
  800ff0:	e0bffc17 	ldw	r2,-16(fp)
  800ff4:	10802543 	ldbu	r2,149(r2)
  800ff8:	10803fcc 	andi	r2,r2,255
  800ffc:	1080201c 	xori	r2,r2,128
  801000:	10bfe004 	addi	r2,r2,-128
  801004:	10000826 	beq	r2,zero,801028 <logic+0xc2c>
  801008:	e0bffc17 	ldw	r2,-16(fp)
  80100c:	10804283 	ldbu	r2,266(r2)
  801010:	10803fcc 	andi	r2,r2,255
  801014:	1080201c 	xori	r2,r2,128
  801018:	10bfe004 	addi	r2,r2,-128
  80101c:	10000226 	beq	r2,zero,801028 <logic+0xc2c>
  801020:	00800044 	movi	r2,1
  801024:	00000106 	br	80102c <logic+0xc30>
  801028:	0005883a 	mov	r2,zero
  80102c:	1007883a 	mov	r3,r2
  801030:	e0bffc17 	ldw	r2,-16(fp)
  801034:	10c02585 	stb	r3,150(r2)
  if (d->_g62) {
  801038:	e0bffc17 	ldw	r2,-16(fp)
  80103c:	10802583 	ldbu	r2,150(r2)
  801040:	10803fcc 	andi	r2,r2,255
  801044:	1080201c 	xori	r2,r2,128
  801048:	10bfe004 	addi	r2,r2,-128
  80104c:	10000626 	beq	r2,zero,801068 <logic+0xc6c>
    d->_Pacemaker_local_URI_timeout |= 1;
  801050:	e0bffc17 	ldw	r2,-16(fp)
  801054:	10801803 	ldbu	r2,96(r2)
  801058:	10800054 	ori	r2,r2,1
  80105c:	1007883a 	mov	r3,r2
  801060:	e0bffc17 	ldw	r2,-16(fp)
  801064:	10c01805 	stb	r3,96(r2)
  }
  d->_g53_e2 = d->_pg185;
  801068:	e0bffc17 	ldw	r2,-16(fp)
  80106c:	10c05c03 	ldbu	r3,368(r2)
  801070:	e0bffc17 	ldw	r2,-16(fp)
  801074:	10c05645 	stb	r3,345(r2)
  if (d->_g53_e2) {
  801078:	e0bffc17 	ldw	r2,-16(fp)
  80107c:	10805643 	ldbu	r2,345(r2)
  801080:	10803fcc 	andi	r2,r2,255
  801084:	1080201c 	xori	r2,r2,128
  801088:	10bfe004 	addi	r2,r2,-128
  80108c:	10001226 	beq	r2,zero,8010d8 <logic+0xcdc>
    d->_Pacemaker_local__region4_AVI_x += d->deltaT;
  801090:	e13ffc17 	ldw	r4,-16(fp)
  801094:	20801317 	ldw	r2,76(r4)
  801098:	20c01417 	ldw	r3,80(r4)
  80109c:	e1bffc17 	ldw	r6,-16(fp)
  8010a0:	31000617 	ldw	r4,24(r6)
  8010a4:	31400717 	ldw	r5,28(r6)
  8010a8:	200d883a 	mov	r6,r4
  8010ac:	280f883a 	mov	r7,r5
  8010b0:	1009883a 	mov	r4,r2
  8010b4:	180b883a 	mov	r5,r3
  8010b8:	08078100 	call	807810 <__adddf3>
  8010bc:	1009883a 	mov	r4,r2
  8010c0:	180b883a 	mov	r5,r3
  8010c4:	2005883a 	mov	r2,r4
  8010c8:	2807883a 	mov	r3,r5
  8010cc:	e13ffc17 	ldw	r4,-16(fp)
  8010d0:	20801315 	stw	r2,76(r4)
  8010d4:	20c01415 	stw	r3,80(r4)
  }
  d->_g42 = d->_g171 && !d->VS;
  8010d8:	e0bffc17 	ldw	r2,-16(fp)
  8010dc:	10803883 	ldbu	r2,226(r2)
  8010e0:	10803fcc 	andi	r2,r2,255
  8010e4:	1080201c 	xori	r2,r2,128
  8010e8:	10bfe004 	addi	r2,r2,-128
  8010ec:	10000826 	beq	r2,zero,801110 <logic+0xd14>
  8010f0:	e0bffc17 	ldw	r2,-16(fp)
  8010f4:	10800a43 	ldbu	r2,41(r2)
  8010f8:	10803fcc 	andi	r2,r2,255
  8010fc:	1080201c 	xori	r2,r2,128
  801100:	10bfe004 	addi	r2,r2,-128
  801104:	1000021e 	bne	r2,zero,801110 <logic+0xd14>
  801108:	00800044 	movi	r2,1
  80110c:	00000106 	br	801114 <logic+0xd18>
  801110:	0005883a 	mov	r2,zero
  801114:	1007883a 	mov	r3,r2
  801118:	e0bffc17 	ldw	r2,-16(fp)
  80111c:	10c02205 	stb	r3,136(r2)
  d->_cg174 = d->_Pacemaker_local__region4_AVI_x >= d->AVI && d->_Pacemaker_local_URI_timeout;
  801120:	e0bffc17 	ldw	r2,-16(fp)
  801124:	14001317 	ldw	r16,76(r2)
  801128:	14401417 	ldw	r17,80(r2)
  80112c:	e0bffc17 	ldw	r2,-16(fp)
  801130:	10800017 	ldw	r2,0(r2)
  801134:	1009883a 	mov	r4,r2
  801138:	08092a00 	call	8092a0 <__floatsidf>
  80113c:	1009883a 	mov	r4,r2
  801140:	180b883a 	mov	r5,r3
  801144:	200d883a 	mov	r6,r4
  801148:	280f883a 	mov	r7,r5
  80114c:	8009883a 	mov	r4,r16
  801150:	880b883a 	mov	r5,r17
  801154:	08080bc0 	call	8080bc <__gedf2>
  801158:	10000816 	blt	r2,zero,80117c <logic+0xd80>
  80115c:	e0bffc17 	ldw	r2,-16(fp)
  801160:	10801803 	ldbu	r2,96(r2)
  801164:	10803fcc 	andi	r2,r2,255
  801168:	1080201c 	xori	r2,r2,128
  80116c:	10bfe004 	addi	r2,r2,-128
  801170:	10000226 	beq	r2,zero,80117c <logic+0xd80>
  801174:	00800044 	movi	r2,1
  801178:	00000106 	br	801180 <logic+0xd84>
  80117c:	0005883a 	mov	r2,zero
  801180:	1007883a 	mov	r3,r2
  801184:	e0bffc17 	ldw	r2,-16(fp)
  801188:	10c052c5 	stb	r3,331(r2)
  d->_g53 = d->_g42 && d->_cg174;
  80118c:	e0bffc17 	ldw	r2,-16(fp)
  801190:	10802203 	ldbu	r2,136(r2)
  801194:	10803fcc 	andi	r2,r2,255
  801198:	1080201c 	xori	r2,r2,128
  80119c:	10bfe004 	addi	r2,r2,-128
  8011a0:	10000826 	beq	r2,zero,8011c4 <logic+0xdc8>
  8011a4:	e0bffc17 	ldw	r2,-16(fp)
  8011a8:	108052c3 	ldbu	r2,331(r2)
  8011ac:	10803fcc 	andi	r2,r2,255
  8011b0:	1080201c 	xori	r2,r2,128
  8011b4:	10bfe004 	addi	r2,r2,-128
  8011b8:	10000226 	beq	r2,zero,8011c4 <logic+0xdc8>
  8011bc:	00800044 	movi	r2,1
  8011c0:	00000106 	br	8011c8 <logic+0xdcc>
  8011c4:	0005883a 	mov	r2,zero
  8011c8:	1007883a 	mov	r3,r2
  8011cc:	e0bffc17 	ldw	r2,-16(fp)
  8011d0:	10c02405 	stb	r3,144(r2)
  if (d->_g53) {
  8011d4:	e0bffc17 	ldw	r2,-16(fp)
  8011d8:	10802403 	ldbu	r2,144(r2)
  8011dc:	10803fcc 	andi	r2,r2,255
  8011e0:	1080201c 	xori	r2,r2,128
  8011e4:	10bfe004 	addi	r2,r2,-128
  8011e8:	10000326 	beq	r2,zero,8011f8 <logic+0xdfc>
    d->_Pacemaker_local__Atrig9 = 1;
  8011ec:	e0bffc17 	ldw	r2,-16(fp)
  8011f0:	00c00044 	movi	r3,1
  8011f4:	10c01a85 	stb	r3,106(r2)
  }
  d->_g42_e1 = d->_g42 && !d->_cg174;
  8011f8:	e0bffc17 	ldw	r2,-16(fp)
  8011fc:	10802203 	ldbu	r2,136(r2)
  801200:	10803fcc 	andi	r2,r2,255
  801204:	1080201c 	xori	r2,r2,128
  801208:	10bfe004 	addi	r2,r2,-128
  80120c:	10000826 	beq	r2,zero,801230 <logic+0xe34>
  801210:	e0bffc17 	ldw	r2,-16(fp)
  801214:	108052c3 	ldbu	r2,331(r2)
  801218:	10803fcc 	andi	r2,r2,255
  80121c:	1080201c 	xori	r2,r2,128
  801220:	10bfe004 	addi	r2,r2,-128
  801224:	1000021e 	bne	r2,zero,801230 <logic+0xe34>
  801228:	00800044 	movi	r2,1
  80122c:	00000106 	br	801234 <logic+0xe38>
  801230:	0005883a 	mov	r2,zero
  801234:	1007883a 	mov	r3,r2
  801238:	e0bffc17 	ldw	r2,-16(fp)
  80123c:	10c05605 	stb	r3,344(r2)
  d->_cg176 = d->_Pacemaker_local__region4_AVI_x >= d->AVI && !d->_Pacemaker_local_URI_timeout;
  801240:	e0bffc17 	ldw	r2,-16(fp)
  801244:	14001317 	ldw	r16,76(r2)
  801248:	14401417 	ldw	r17,80(r2)
  80124c:	e0bffc17 	ldw	r2,-16(fp)
  801250:	10800017 	ldw	r2,0(r2)
  801254:	1009883a 	mov	r4,r2
  801258:	08092a00 	call	8092a0 <__floatsidf>
  80125c:	1009883a 	mov	r4,r2
  801260:	180b883a 	mov	r5,r3
  801264:	200d883a 	mov	r6,r4
  801268:	280f883a 	mov	r7,r5
  80126c:	8009883a 	mov	r4,r16
  801270:	880b883a 	mov	r5,r17
  801274:	08080bc0 	call	8080bc <__gedf2>
  801278:	10000816 	blt	r2,zero,80129c <logic+0xea0>
  80127c:	e0bffc17 	ldw	r2,-16(fp)
  801280:	10801803 	ldbu	r2,96(r2)
  801284:	10803fcc 	andi	r2,r2,255
  801288:	1080201c 	xori	r2,r2,128
  80128c:	10bfe004 	addi	r2,r2,-128
  801290:	1000021e 	bne	r2,zero,80129c <logic+0xea0>
  801294:	00800044 	movi	r2,1
  801298:	00000106 	br	8012a0 <logic+0xea4>
  80129c:	0005883a 	mov	r2,zero
  8012a0:	1007883a 	mov	r3,r2
  8012a4:	e0bffc17 	ldw	r2,-16(fp)
  8012a8:	10c05245 	stb	r3,329(r2)
  d->_g62_e3 = d->_g42_e1 && d->_cg176;
  8012ac:	e0bffc17 	ldw	r2,-16(fp)
  8012b0:	10805603 	ldbu	r2,344(r2)
  8012b4:	10803fcc 	andi	r2,r2,255
  8012b8:	1080201c 	xori	r2,r2,128
  8012bc:	10bfe004 	addi	r2,r2,-128
  8012c0:	10000826 	beq	r2,zero,8012e4 <logic+0xee8>
  8012c4:	e0bffc17 	ldw	r2,-16(fp)
  8012c8:	10805243 	ldbu	r2,329(r2)
  8012cc:	10803fcc 	andi	r2,r2,255
  8012d0:	1080201c 	xori	r2,r2,128
  8012d4:	10bfe004 	addi	r2,r2,-128
  8012d8:	10000226 	beq	r2,zero,8012e4 <logic+0xee8>
  8012dc:	00800044 	movi	r2,1
  8012e0:	00000106 	br	8012e8 <logic+0xeec>
  8012e4:	0005883a 	mov	r2,zero
  8012e8:	1007883a 	mov	r3,r2
  8012ec:	e0bffc17 	ldw	r2,-16(fp)
  8012f0:	10c05685 	stb	r3,346(r2)
  if (d->_g62_e3) {
  8012f4:	e0bffc17 	ldw	r2,-16(fp)
  8012f8:	10805683 	ldbu	r2,346(r2)
  8012fc:	10803fcc 	andi	r2,r2,255
  801300:	1080201c 	xori	r2,r2,128
  801304:	10bfe004 	addi	r2,r2,-128
  801308:	10000326 	beq	r2,zero,801318 <logic+0xf1c>
    d->_Pacemaker_local__Atrig10 = 1;
  80130c:	e0bffc17 	ldw	r2,-16(fp)
  801310:	00c00044 	movi	r3,1
  801314:	10c01ac5 	stb	r3,107(r2)
  }
  d->_g174 = d->_g150 || d->_g156;
  801318:	e0bffc17 	ldw	r2,-16(fp)
  80131c:	108034c3 	ldbu	r2,211(r2)
  801320:	10803fcc 	andi	r2,r2,255
  801324:	1080201c 	xori	r2,r2,128
  801328:	10bfe004 	addi	r2,r2,-128
  80132c:	1000061e 	bne	r2,zero,801348 <logic+0xf4c>
  801330:	e0bffc17 	ldw	r2,-16(fp)
  801334:	10803603 	ldbu	r2,216(r2)
  801338:	10803fcc 	andi	r2,r2,255
  80133c:	1080201c 	xori	r2,r2,128
  801340:	10bfe004 	addi	r2,r2,-128
  801344:	10000226 	beq	r2,zero,801350 <logic+0xf54>
  801348:	00800044 	movi	r2,1
  80134c:	00000106 	br	801354 <logic+0xf58>
  801350:	0005883a 	mov	r2,zero
  801354:	1007883a 	mov	r3,r2
  801358:	e0bffc17 	ldw	r2,-16(fp)
  80135c:	10c03945 	stb	r3,229(r2)
  d->_cg151 = d->_Pacemaker_local__region4_AVI_x < d->AVI;
  801360:	e0bffc17 	ldw	r2,-16(fp)
  801364:	14001317 	ldw	r16,76(r2)
  801368:	14401417 	ldw	r17,80(r2)
  80136c:	e0bffc17 	ldw	r2,-16(fp)
  801370:	10800017 	ldw	r2,0(r2)
  801374:	1009883a 	mov	r4,r2
  801378:	08092a00 	call	8092a0 <__floatsidf>
  80137c:	1009883a 	mov	r4,r2
  801380:	180b883a 	mov	r5,r3
  801384:	04800044 	movi	r18,1
  801388:	200d883a 	mov	r6,r4
  80138c:	280f883a 	mov	r7,r5
  801390:	8009883a 	mov	r4,r16
  801394:	880b883a 	mov	r5,r17
  801398:	08081980 	call	808198 <__ledf2>
  80139c:	10000116 	blt	r2,zero,8013a4 <logic+0xfa8>
  8013a0:	0025883a 	mov	r18,zero
  8013a4:	9007883a 	mov	r3,r18
  8013a8:	e0bffc17 	ldw	r2,-16(fp)
  8013ac:	10c05005 	stb	r3,320(r2)
  d->_g156 = d->_g174 && d->_cg151;
  8013b0:	e0bffc17 	ldw	r2,-16(fp)
  8013b4:	10803943 	ldbu	r2,229(r2)
  8013b8:	10803fcc 	andi	r2,r2,255
  8013bc:	1080201c 	xori	r2,r2,128
  8013c0:	10bfe004 	addi	r2,r2,-128
  8013c4:	10000826 	beq	r2,zero,8013e8 <logic+0xfec>
  8013c8:	e0bffc17 	ldw	r2,-16(fp)
  8013cc:	10805003 	ldbu	r2,320(r2)
  8013d0:	10803fcc 	andi	r2,r2,255
  8013d4:	1080201c 	xori	r2,r2,128
  8013d8:	10bfe004 	addi	r2,r2,-128
  8013dc:	10000226 	beq	r2,zero,8013e8 <logic+0xfec>
  8013e0:	00800044 	movi	r2,1
  8013e4:	00000106 	br	8013ec <logic+0xff0>
  8013e8:	0005883a 	mov	r2,zero
  8013ec:	1007883a 	mov	r3,r2
  8013f0:	e0bffc17 	ldw	r2,-16(fp)
  8013f4:	10c03605 	stb	r3,216(r2)
  if (d->_g156) {
  8013f8:	e0bffc17 	ldw	r2,-16(fp)
  8013fc:	10803603 	ldbu	r2,216(r2)
  801400:	10803fcc 	andi	r2,r2,255
  801404:	1080201c 	xori	r2,r2,128
  801408:	10bfe004 	addi	r2,r2,-128
  80140c:	10003426 	beq	r2,zero,8014e0 <logic+0x10e4>
    d->sleepT = (d->sleepT < (d->AVI - d->_Pacemaker_local__region4_AVI_x)) ? d->sleepT : (d->AVI - d->_Pacemaker_local__region4_AVI_x);
  801410:	e0bffc17 	ldw	r2,-16(fp)
  801414:	14000817 	ldw	r16,32(r2)
  801418:	14400917 	ldw	r17,36(r2)
  80141c:	e0bffc17 	ldw	r2,-16(fp)
  801420:	10800017 	ldw	r2,0(r2)
  801424:	1009883a 	mov	r4,r2
  801428:	08092a00 	call	8092a0 <__floatsidf>
  80142c:	1011883a 	mov	r8,r2
  801430:	1813883a 	mov	r9,r3
  801434:	e13ffc17 	ldw	r4,-16(fp)
  801438:	20801317 	ldw	r2,76(r4)
  80143c:	20c01417 	ldw	r3,80(r4)
  801440:	100d883a 	mov	r6,r2
  801444:	180f883a 	mov	r7,r3
  801448:	4009883a 	mov	r4,r8
  80144c:	480b883a 	mov	r5,r9
  801450:	08089a40 	call	8089a4 <__subdf3>
  801454:	1009883a 	mov	r4,r2
  801458:	180b883a 	mov	r5,r3
  80145c:	2005883a 	mov	r2,r4
  801460:	2807883a 	mov	r3,r5
  801464:	100d883a 	mov	r6,r2
  801468:	180f883a 	mov	r7,r3
  80146c:	8009883a 	mov	r4,r16
  801470:	880b883a 	mov	r5,r17
  801474:	08081980 	call	808198 <__ledf2>
  801478:	1000040e 	bge	r2,zero,80148c <logic+0x1090>
  80147c:	e13ffc17 	ldw	r4,-16(fp)
  801480:	20800817 	ldw	r2,32(r4)
  801484:	20c00917 	ldw	r3,36(r4)
  801488:	00001206 	br	8014d4 <logic+0x10d8>
  80148c:	e0bffc17 	ldw	r2,-16(fp)
  801490:	10800017 	ldw	r2,0(r2)
  801494:	1009883a 	mov	r4,r2
  801498:	08092a00 	call	8092a0 <__floatsidf>
  80149c:	1011883a 	mov	r8,r2
  8014a0:	1813883a 	mov	r9,r3
  8014a4:	e13ffc17 	ldw	r4,-16(fp)
  8014a8:	20801317 	ldw	r2,76(r4)
  8014ac:	20c01417 	ldw	r3,80(r4)
  8014b0:	100d883a 	mov	r6,r2
  8014b4:	180f883a 	mov	r7,r3
  8014b8:	4009883a 	mov	r4,r8
  8014bc:	480b883a 	mov	r5,r9
  8014c0:	08089a40 	call	8089a4 <__subdf3>
  8014c4:	1009883a 	mov	r4,r2
  8014c8:	180b883a 	mov	r5,r3
  8014cc:	2005883a 	mov	r2,r4
  8014d0:	2807883a 	mov	r3,r5
  8014d4:	e13ffc17 	ldw	r4,-16(fp)
  8014d8:	20800815 	stw	r2,32(r4)
  8014dc:	20c00915 	stw	r3,36(r4)
  }
  d->_cg152 = d->_Pacemaker_local__Atrig8 || d->_Pacemaker_local__Atrig9 || d->_Pacemaker_local__Atrig10;
  8014e0:	e0bffc17 	ldw	r2,-16(fp)
  8014e4:	10801a43 	ldbu	r2,105(r2)
  8014e8:	10803fcc 	andi	r2,r2,255
  8014ec:	1080201c 	xori	r2,r2,128
  8014f0:	10bfe004 	addi	r2,r2,-128
  8014f4:	10000c1e 	bne	r2,zero,801528 <logic+0x112c>
  8014f8:	e0bffc17 	ldw	r2,-16(fp)
  8014fc:	10801a83 	ldbu	r2,106(r2)
  801500:	10803fcc 	andi	r2,r2,255
  801504:	1080201c 	xori	r2,r2,128
  801508:	10bfe004 	addi	r2,r2,-128
  80150c:	1000061e 	bne	r2,zero,801528 <logic+0x112c>
  801510:	e0bffc17 	ldw	r2,-16(fp)
  801514:	10801ac3 	ldbu	r2,107(r2)
  801518:	10803fcc 	andi	r2,r2,255
  80151c:	1080201c 	xori	r2,r2,128
  801520:	10bfe004 	addi	r2,r2,-128
  801524:	10000226 	beq	r2,zero,801530 <logic+0x1134>
  801528:	00800044 	movi	r2,1
  80152c:	00000106 	br	801534 <logic+0x1138>
  801530:	0005883a 	mov	r2,zero
  801534:	1007883a 	mov	r3,r2
  801538:	e0bffc17 	ldw	r2,-16(fp)
  80153c:	10c04fc5 	stb	r3,319(r2)
  d->_g150 = d->_g174 && !d->_cg151;
  801540:	e0bffc17 	ldw	r2,-16(fp)
  801544:	10803943 	ldbu	r2,229(r2)
  801548:	10803fcc 	andi	r2,r2,255
  80154c:	1080201c 	xori	r2,r2,128
  801550:	10bfe004 	addi	r2,r2,-128
  801554:	10000826 	beq	r2,zero,801578 <logic+0x117c>
  801558:	e0bffc17 	ldw	r2,-16(fp)
  80155c:	10805003 	ldbu	r2,320(r2)
  801560:	10803fcc 	andi	r2,r2,255
  801564:	1080201c 	xori	r2,r2,128
  801568:	10bfe004 	addi	r2,r2,-128
  80156c:	1000021e 	bne	r2,zero,801578 <logic+0x117c>
  801570:	00800044 	movi	r2,1
  801574:	00000106 	br	80157c <logic+0x1180>
  801578:	0005883a 	mov	r2,zero
  80157c:	1007883a 	mov	r3,r2
  801580:	e0bffc17 	ldw	r2,-16(fp)
  801584:	10c034c5 	stb	r3,211(r2)
  d->_cg154 = d->_Pacemaker_local__Atrig8 || d->_Pacemaker_local__Atrig9 || d->_Pacemaker_local__Atrig10;
  801588:	e0bffc17 	ldw	r2,-16(fp)
  80158c:	10801a43 	ldbu	r2,105(r2)
  801590:	10803fcc 	andi	r2,r2,255
  801594:	1080201c 	xori	r2,r2,128
  801598:	10bfe004 	addi	r2,r2,-128
  80159c:	10000c1e 	bne	r2,zero,8015d0 <logic+0x11d4>
  8015a0:	e0bffc17 	ldw	r2,-16(fp)
  8015a4:	10801a83 	ldbu	r2,106(r2)
  8015a8:	10803fcc 	andi	r2,r2,255
  8015ac:	1080201c 	xori	r2,r2,128
  8015b0:	10bfe004 	addi	r2,r2,-128
  8015b4:	1000061e 	bne	r2,zero,8015d0 <logic+0x11d4>
  8015b8:	e0bffc17 	ldw	r2,-16(fp)
  8015bc:	10801ac3 	ldbu	r2,107(r2)
  8015c0:	10803fcc 	andi	r2,r2,255
  8015c4:	1080201c 	xori	r2,r2,128
  8015c8:	10bfe004 	addi	r2,r2,-128
  8015cc:	10000226 	beq	r2,zero,8015d8 <logic+0x11dc>
  8015d0:	00800044 	movi	r2,1
  8015d4:	00000106 	br	8015dc <logic+0x11e0>
  8015d8:	0005883a 	mov	r2,zero
  8015dc:	1007883a 	mov	r3,r2
  8015e0:	e0bffc17 	ldw	r2,-16(fp)
  8015e4:	10c05045 	stb	r3,321(r2)
  d->_g151 = (d->_g156 && d->_cg152) || (d->_g150 && d->_cg154);
  8015e8:	e0bffc17 	ldw	r2,-16(fp)
  8015ec:	10803603 	ldbu	r2,216(r2)
  8015f0:	10803fcc 	andi	r2,r2,255
  8015f4:	1080201c 	xori	r2,r2,128
  8015f8:	10bfe004 	addi	r2,r2,-128
  8015fc:	10000626 	beq	r2,zero,801618 <logic+0x121c>
  801600:	e0bffc17 	ldw	r2,-16(fp)
  801604:	10804fc3 	ldbu	r2,319(r2)
  801608:	10803fcc 	andi	r2,r2,255
  80160c:	1080201c 	xori	r2,r2,128
  801610:	10bfe004 	addi	r2,r2,-128
  801614:	10000c1e 	bne	r2,zero,801648 <logic+0x124c>
  801618:	e0bffc17 	ldw	r2,-16(fp)
  80161c:	108034c3 	ldbu	r2,211(r2)
  801620:	10803fcc 	andi	r2,r2,255
  801624:	1080201c 	xori	r2,r2,128
  801628:	10bfe004 	addi	r2,r2,-128
  80162c:	10000826 	beq	r2,zero,801650 <logic+0x1254>
  801630:	e0bffc17 	ldw	r2,-16(fp)
  801634:	10805043 	ldbu	r2,321(r2)
  801638:	10803fcc 	andi	r2,r2,255
  80163c:	1080201c 	xori	r2,r2,128
  801640:	10bfe004 	addi	r2,r2,-128
  801644:	10000226 	beq	r2,zero,801650 <logic+0x1254>
  801648:	00800044 	movi	r2,1
  80164c:	00000106 	br	801654 <logic+0x1258>
  801650:	0005883a 	mov	r2,zero
  801654:	1007883a 	mov	r3,r2
  801658:	e0bffc17 	ldw	r2,-16(fp)
  80165c:	10c03505 	stb	r3,212(r2)
  d->_g167 = d->_pg154;
  801660:	e0bffc17 	ldw	r2,-16(fp)
  801664:	10c05c43 	ldbu	r3,369(r2)
  801668:	e0bffc17 	ldw	r2,-16(fp)
  80166c:	10c03805 	stb	r3,224(r2)
  d->_g161 = d->_pg148;
  801670:	e0bffc17 	ldw	r2,-16(fp)
  801674:	10c05c83 	ldbu	r3,370(r2)
  801678:	e0bffc17 	ldw	r2,-16(fp)
  80167c:	10c036c5 	stb	r3,219(r2)
  d->_g164_e2 = !(d->_g167 || d->_g161);
  801680:	e0bffc17 	ldw	r2,-16(fp)
  801684:	10803803 	ldbu	r2,224(r2)
  801688:	10803fcc 	andi	r2,r2,255
  80168c:	1080201c 	xori	r2,r2,128
  801690:	10bfe004 	addi	r2,r2,-128
  801694:	1000081e 	bne	r2,zero,8016b8 <logic+0x12bc>
  801698:	e0bffc17 	ldw	r2,-16(fp)
  80169c:	108036c3 	ldbu	r2,219(r2)
  8016a0:	10803fcc 	andi	r2,r2,255
  8016a4:	1080201c 	xori	r2,r2,128
  8016a8:	10bfe004 	addi	r2,r2,-128
  8016ac:	1000021e 	bne	r2,zero,8016b8 <logic+0x12bc>
  8016b0:	00800044 	movi	r2,1
  8016b4:	00000106 	br	8016bc <logic+0x12c0>
  8016b8:	0005883a 	mov	r2,zero
  8016bc:	1007883a 	mov	r3,r2
  8016c0:	e0bffc17 	ldw	r2,-16(fp)
  8016c4:	10c05885 	stb	r3,354(r2)
  d->_g167 = d->_g161 || d->_g167;
  8016c8:	e0bffc17 	ldw	r2,-16(fp)
  8016cc:	108036c3 	ldbu	r2,219(r2)
  8016d0:	10803fcc 	andi	r2,r2,255
  8016d4:	1080201c 	xori	r2,r2,128
  8016d8:	10bfe004 	addi	r2,r2,-128
  8016dc:	1000061e 	bne	r2,zero,8016f8 <logic+0x12fc>
  8016e0:	e0bffc17 	ldw	r2,-16(fp)
  8016e4:	10803803 	ldbu	r2,224(r2)
  8016e8:	10803fcc 	andi	r2,r2,255
  8016ec:	1080201c 	xori	r2,r2,128
  8016f0:	10bfe004 	addi	r2,r2,-128
  8016f4:	10000226 	beq	r2,zero,801700 <logic+0x1304>
  8016f8:	00800044 	movi	r2,1
  8016fc:	00000106 	br	801704 <logic+0x1308>
  801700:	0005883a 	mov	r2,zero
  801704:	1007883a 	mov	r3,r2
  801708:	e0bffc17 	ldw	r2,-16(fp)
  80170c:	10c03805 	stb	r3,224(r2)
  d->_cg162 = d->_Pacemaker_local__region4_AVI_x < d->AVI;
  801710:	e0bffc17 	ldw	r2,-16(fp)
  801714:	14001317 	ldw	r16,76(r2)
  801718:	14401417 	ldw	r17,80(r2)
  80171c:	e0bffc17 	ldw	r2,-16(fp)
  801720:	10800017 	ldw	r2,0(r2)
  801724:	1009883a 	mov	r4,r2
  801728:	08092a00 	call	8092a0 <__floatsidf>
  80172c:	1009883a 	mov	r4,r2
  801730:	180b883a 	mov	r5,r3
  801734:	04800044 	movi	r18,1
  801738:	200d883a 	mov	r6,r4
  80173c:	280f883a 	mov	r7,r5
  801740:	8009883a 	mov	r4,r16
  801744:	880b883a 	mov	r5,r17
  801748:	08081980 	call	808198 <__ledf2>
  80174c:	10000116 	blt	r2,zero,801754 <logic+0x1358>
  801750:	0025883a 	mov	r18,zero
  801754:	9007883a 	mov	r3,r18
  801758:	e0bffc17 	ldw	r2,-16(fp)
  80175c:	10c05185 	stb	r3,326(r2)
  d->_g161 = d->_g167 && d->_cg162;
  801760:	e0bffc17 	ldw	r2,-16(fp)
  801764:	10803803 	ldbu	r2,224(r2)
  801768:	10803fcc 	andi	r2,r2,255
  80176c:	1080201c 	xori	r2,r2,128
  801770:	10bfe004 	addi	r2,r2,-128
  801774:	10000826 	beq	r2,zero,801798 <logic+0x139c>
  801778:	e0bffc17 	ldw	r2,-16(fp)
  80177c:	10805183 	ldbu	r2,326(r2)
  801780:	10803fcc 	andi	r2,r2,255
  801784:	1080201c 	xori	r2,r2,128
  801788:	10bfe004 	addi	r2,r2,-128
  80178c:	10000226 	beq	r2,zero,801798 <logic+0x139c>
  801790:	00800044 	movi	r2,1
  801794:	00000106 	br	80179c <logic+0x13a0>
  801798:	0005883a 	mov	r2,zero
  80179c:	1007883a 	mov	r3,r2
  8017a0:	e0bffc17 	ldw	r2,-16(fp)
  8017a4:	10c036c5 	stb	r3,219(r2)
  if (d->_g161) {
  8017a8:	e0bffc17 	ldw	r2,-16(fp)
  8017ac:	108036c3 	ldbu	r2,219(r2)
  8017b0:	10803fcc 	andi	r2,r2,255
  8017b4:	1080201c 	xori	r2,r2,128
  8017b8:	10bfe004 	addi	r2,r2,-128
  8017bc:	10003426 	beq	r2,zero,801890 <logic+0x1494>
    d->sleepT = (d->sleepT < (d->AVI - d->_Pacemaker_local__region4_AVI_x)) ? d->sleepT : (d->AVI - d->_Pacemaker_local__region4_AVI_x);
  8017c0:	e0bffc17 	ldw	r2,-16(fp)
  8017c4:	14000817 	ldw	r16,32(r2)
  8017c8:	14400917 	ldw	r17,36(r2)
  8017cc:	e0bffc17 	ldw	r2,-16(fp)
  8017d0:	10800017 	ldw	r2,0(r2)
  8017d4:	1009883a 	mov	r4,r2
  8017d8:	08092a00 	call	8092a0 <__floatsidf>
  8017dc:	1011883a 	mov	r8,r2
  8017e0:	1813883a 	mov	r9,r3
  8017e4:	e13ffc17 	ldw	r4,-16(fp)
  8017e8:	20801317 	ldw	r2,76(r4)
  8017ec:	20c01417 	ldw	r3,80(r4)
  8017f0:	100d883a 	mov	r6,r2
  8017f4:	180f883a 	mov	r7,r3
  8017f8:	4009883a 	mov	r4,r8
  8017fc:	480b883a 	mov	r5,r9
  801800:	08089a40 	call	8089a4 <__subdf3>
  801804:	1009883a 	mov	r4,r2
  801808:	180b883a 	mov	r5,r3
  80180c:	2005883a 	mov	r2,r4
  801810:	2807883a 	mov	r3,r5
  801814:	100d883a 	mov	r6,r2
  801818:	180f883a 	mov	r7,r3
  80181c:	8009883a 	mov	r4,r16
  801820:	880b883a 	mov	r5,r17
  801824:	08081980 	call	808198 <__ledf2>
  801828:	1000040e 	bge	r2,zero,80183c <logic+0x1440>
  80182c:	e13ffc17 	ldw	r4,-16(fp)
  801830:	20800817 	ldw	r2,32(r4)
  801834:	20c00917 	ldw	r3,36(r4)
  801838:	00001206 	br	801884 <logic+0x1488>
  80183c:	e0bffc17 	ldw	r2,-16(fp)
  801840:	10800017 	ldw	r2,0(r2)
  801844:	1009883a 	mov	r4,r2
  801848:	08092a00 	call	8092a0 <__floatsidf>
  80184c:	1011883a 	mov	r8,r2
  801850:	1813883a 	mov	r9,r3
  801854:	e13ffc17 	ldw	r4,-16(fp)
  801858:	20801317 	ldw	r2,76(r4)
  80185c:	20c01417 	ldw	r3,80(r4)
  801860:	100d883a 	mov	r6,r2
  801864:	180f883a 	mov	r7,r3
  801868:	4009883a 	mov	r4,r8
  80186c:	480b883a 	mov	r5,r9
  801870:	08089a40 	call	8089a4 <__subdf3>
  801874:	1009883a 	mov	r4,r2
  801878:	180b883a 	mov	r5,r3
  80187c:	2005883a 	mov	r2,r4
  801880:	2807883a 	mov	r3,r5
  801884:	e13ffc17 	ldw	r4,-16(fp)
  801888:	20800815 	stw	r2,32(r4)
  80188c:	20c00915 	stw	r3,36(r4)
  }
  d->_cg163 = d->_Pacemaker_local__Atrig8 || d->_Pacemaker_local__Atrig9 || d->_Pacemaker_local__Atrig10;
  801890:	e0bffc17 	ldw	r2,-16(fp)
  801894:	10801a43 	ldbu	r2,105(r2)
  801898:	10803fcc 	andi	r2,r2,255
  80189c:	1080201c 	xori	r2,r2,128
  8018a0:	10bfe004 	addi	r2,r2,-128
  8018a4:	10000c1e 	bne	r2,zero,8018d8 <logic+0x14dc>
  8018a8:	e0bffc17 	ldw	r2,-16(fp)
  8018ac:	10801a83 	ldbu	r2,106(r2)
  8018b0:	10803fcc 	andi	r2,r2,255
  8018b4:	1080201c 	xori	r2,r2,128
  8018b8:	10bfe004 	addi	r2,r2,-128
  8018bc:	1000061e 	bne	r2,zero,8018d8 <logic+0x14dc>
  8018c0:	e0bffc17 	ldw	r2,-16(fp)
  8018c4:	10801ac3 	ldbu	r2,107(r2)
  8018c8:	10803fcc 	andi	r2,r2,255
  8018cc:	1080201c 	xori	r2,r2,128
  8018d0:	10bfe004 	addi	r2,r2,-128
  8018d4:	10000226 	beq	r2,zero,8018e0 <logic+0x14e4>
  8018d8:	00800044 	movi	r2,1
  8018dc:	00000106 	br	8018e4 <logic+0x14e8>
  8018e0:	0005883a 	mov	r2,zero
  8018e4:	1007883a 	mov	r3,r2
  8018e8:	e0bffc17 	ldw	r2,-16(fp)
  8018ec:	10c05145 	stb	r3,325(r2)
  d->_g162 = d->_g167 && !d->_cg162;
  8018f0:	e0bffc17 	ldw	r2,-16(fp)
  8018f4:	10803803 	ldbu	r2,224(r2)
  8018f8:	10803fcc 	andi	r2,r2,255
  8018fc:	1080201c 	xori	r2,r2,128
  801900:	10bfe004 	addi	r2,r2,-128
  801904:	10000826 	beq	r2,zero,801928 <logic+0x152c>
  801908:	e0bffc17 	ldw	r2,-16(fp)
  80190c:	10805183 	ldbu	r2,326(r2)
  801910:	10803fcc 	andi	r2,r2,255
  801914:	1080201c 	xori	r2,r2,128
  801918:	10bfe004 	addi	r2,r2,-128
  80191c:	1000021e 	bne	r2,zero,801928 <logic+0x152c>
  801920:	00800044 	movi	r2,1
  801924:	00000106 	br	80192c <logic+0x1530>
  801928:	0005883a 	mov	r2,zero
  80192c:	1007883a 	mov	r3,r2
  801930:	e0bffc17 	ldw	r2,-16(fp)
  801934:	10c03705 	stb	r3,220(r2)
  d->_cg165 = d->_Pacemaker_local__Atrig8 || d->_Pacemaker_local__Atrig9 || d->_Pacemaker_local__Atrig10;
  801938:	e0bffc17 	ldw	r2,-16(fp)
  80193c:	10801a43 	ldbu	r2,105(r2)
  801940:	10803fcc 	andi	r2,r2,255
  801944:	1080201c 	xori	r2,r2,128
  801948:	10bfe004 	addi	r2,r2,-128
  80194c:	10000c1e 	bne	r2,zero,801980 <logic+0x1584>
  801950:	e0bffc17 	ldw	r2,-16(fp)
  801954:	10801a83 	ldbu	r2,106(r2)
  801958:	10803fcc 	andi	r2,r2,255
  80195c:	1080201c 	xori	r2,r2,128
  801960:	10bfe004 	addi	r2,r2,-128
  801964:	1000061e 	bne	r2,zero,801980 <logic+0x1584>
  801968:	e0bffc17 	ldw	r2,-16(fp)
  80196c:	10801ac3 	ldbu	r2,107(r2)
  801970:	10803fcc 	andi	r2,r2,255
  801974:	1080201c 	xori	r2,r2,128
  801978:	10bfe004 	addi	r2,r2,-128
  80197c:	10000226 	beq	r2,zero,801988 <logic+0x158c>
  801980:	00800044 	movi	r2,1
  801984:	00000106 	br	80198c <logic+0x1590>
  801988:	0005883a 	mov	r2,zero
  80198c:	1007883a 	mov	r3,r2
  801990:	e0bffc17 	ldw	r2,-16(fp)
  801994:	10c051c5 	stb	r3,327(r2)
  d->_g164 = (d->_g161 && d->_cg163) || (d->_g162 && d->_cg165);
  801998:	e0bffc17 	ldw	r2,-16(fp)
  80199c:	108036c3 	ldbu	r2,219(r2)
  8019a0:	10803fcc 	andi	r2,r2,255
  8019a4:	1080201c 	xori	r2,r2,128
  8019a8:	10bfe004 	addi	r2,r2,-128
  8019ac:	10000626 	beq	r2,zero,8019c8 <logic+0x15cc>
  8019b0:	e0bffc17 	ldw	r2,-16(fp)
  8019b4:	10805143 	ldbu	r2,325(r2)
  8019b8:	10803fcc 	andi	r2,r2,255
  8019bc:	1080201c 	xori	r2,r2,128
  8019c0:	10bfe004 	addi	r2,r2,-128
  8019c4:	10000c1e 	bne	r2,zero,8019f8 <logic+0x15fc>
  8019c8:	e0bffc17 	ldw	r2,-16(fp)
  8019cc:	10803703 	ldbu	r2,220(r2)
  8019d0:	10803fcc 	andi	r2,r2,255
  8019d4:	1080201c 	xori	r2,r2,128
  8019d8:	10bfe004 	addi	r2,r2,-128
  8019dc:	10000826 	beq	r2,zero,801a00 <logic+0x1604>
  8019e0:	e0bffc17 	ldw	r2,-16(fp)
  8019e4:	108051c3 	ldbu	r2,327(r2)
  8019e8:	10803fcc 	andi	r2,r2,255
  8019ec:	1080201c 	xori	r2,r2,128
  8019f0:	10bfe004 	addi	r2,r2,-128
  8019f4:	10000226 	beq	r2,zero,801a00 <logic+0x1604>
  8019f8:	00800044 	movi	r2,1
  8019fc:	00000106 	br	801a04 <logic+0x1608>
  801a00:	0005883a 	mov	r2,zero
  801a04:	1007883a 	mov	r3,r2
  801a08:	e0bffc17 	ldw	r2,-16(fp)
  801a0c:	10c03785 	stb	r3,222(r2)
  d->_g171 = !d->_g171;
  801a10:	e0bffc17 	ldw	r2,-16(fp)
  801a14:	10803883 	ldbu	r2,226(r2)
  801a18:	10803fcc 	andi	r2,r2,255
  801a1c:	1080201c 	xori	r2,r2,128
  801a20:	10bfe004 	addi	r2,r2,-128
  801a24:	1005003a 	cmpeq	r2,r2,zero
  801a28:	1007883a 	mov	r3,r2
  801a2c:	e0bffc17 	ldw	r2,-16(fp)
  801a30:	10c03885 	stb	r3,226(r2)
  d->_g175 = d->_g172 || d->_g53 || d->_g62_e3;
  801a34:	e0bffc17 	ldw	r2,-16(fp)
  801a38:	108038c3 	ldbu	r2,227(r2)
  801a3c:	10803fcc 	andi	r2,r2,255
  801a40:	1080201c 	xori	r2,r2,128
  801a44:	10bfe004 	addi	r2,r2,-128
  801a48:	10000c1e 	bne	r2,zero,801a7c <logic+0x1680>
  801a4c:	e0bffc17 	ldw	r2,-16(fp)
  801a50:	10802403 	ldbu	r2,144(r2)
  801a54:	10803fcc 	andi	r2,r2,255
  801a58:	1080201c 	xori	r2,r2,128
  801a5c:	10bfe004 	addi	r2,r2,-128
  801a60:	1000061e 	bne	r2,zero,801a7c <logic+0x1680>
  801a64:	e0bffc17 	ldw	r2,-16(fp)
  801a68:	10805683 	ldbu	r2,346(r2)
  801a6c:	10803fcc 	andi	r2,r2,255
  801a70:	1080201c 	xori	r2,r2,128
  801a74:	10bfe004 	addi	r2,r2,-128
  801a78:	10000226 	beq	r2,zero,801a84 <logic+0x1688>
  801a7c:	00800044 	movi	r2,1
  801a80:	00000106 	br	801a88 <logic+0x168c>
  801a84:	0005883a 	mov	r2,zero
  801a88:	1007883a 	mov	r3,r2
  801a8c:	e0bffc17 	ldw	r2,-16(fp)
  801a90:	10c03985 	stb	r3,230(r2)
  d->_g172 = (d->_g153_e1 || d->_g151) && (d->_g164_e2 || d->_g164) && (d->_g171 || d->_g175) && (d->_g151 || d->_g164 || d->_g175);
  801a94:	e0bffc17 	ldw	r2,-16(fp)
  801a98:	10805843 	ldbu	r2,353(r2)
  801a9c:	10803fcc 	andi	r2,r2,255
  801aa0:	1080201c 	xori	r2,r2,128
  801aa4:	10bfe004 	addi	r2,r2,-128
  801aa8:	1000061e 	bne	r2,zero,801ac4 <logic+0x16c8>
  801aac:	e0bffc17 	ldw	r2,-16(fp)
  801ab0:	10803503 	ldbu	r2,212(r2)
  801ab4:	10803fcc 	andi	r2,r2,255
  801ab8:	1080201c 	xori	r2,r2,128
  801abc:	10bfe004 	addi	r2,r2,-128
  801ac0:	10002c26 	beq	r2,zero,801b74 <logic+0x1778>
  801ac4:	e0bffc17 	ldw	r2,-16(fp)
  801ac8:	10805883 	ldbu	r2,354(r2)
  801acc:	10803fcc 	andi	r2,r2,255
  801ad0:	1080201c 	xori	r2,r2,128
  801ad4:	10bfe004 	addi	r2,r2,-128
  801ad8:	1000061e 	bne	r2,zero,801af4 <logic+0x16f8>
  801adc:	e0bffc17 	ldw	r2,-16(fp)
  801ae0:	10803783 	ldbu	r2,222(r2)
  801ae4:	10803fcc 	andi	r2,r2,255
  801ae8:	1080201c 	xori	r2,r2,128
  801aec:	10bfe004 	addi	r2,r2,-128
  801af0:	10002026 	beq	r2,zero,801b74 <logic+0x1778>
  801af4:	e0bffc17 	ldw	r2,-16(fp)
  801af8:	10803883 	ldbu	r2,226(r2)
  801afc:	10803fcc 	andi	r2,r2,255
  801b00:	1080201c 	xori	r2,r2,128
  801b04:	10bfe004 	addi	r2,r2,-128
  801b08:	1000061e 	bne	r2,zero,801b24 <logic+0x1728>
  801b0c:	e0bffc17 	ldw	r2,-16(fp)
  801b10:	10803983 	ldbu	r2,230(r2)
  801b14:	10803fcc 	andi	r2,r2,255
  801b18:	1080201c 	xori	r2,r2,128
  801b1c:	10bfe004 	addi	r2,r2,-128
  801b20:	10001426 	beq	r2,zero,801b74 <logic+0x1778>
  801b24:	e0bffc17 	ldw	r2,-16(fp)
  801b28:	10803503 	ldbu	r2,212(r2)
  801b2c:	10803fcc 	andi	r2,r2,255
  801b30:	1080201c 	xori	r2,r2,128
  801b34:	10bfe004 	addi	r2,r2,-128
  801b38:	10000c1e 	bne	r2,zero,801b6c <logic+0x1770>
  801b3c:	e0bffc17 	ldw	r2,-16(fp)
  801b40:	10803783 	ldbu	r2,222(r2)
  801b44:	10803fcc 	andi	r2,r2,255
  801b48:	1080201c 	xori	r2,r2,128
  801b4c:	10bfe004 	addi	r2,r2,-128
  801b50:	1000061e 	bne	r2,zero,801b6c <logic+0x1770>
  801b54:	e0bffc17 	ldw	r2,-16(fp)
  801b58:	10803983 	ldbu	r2,230(r2)
  801b5c:	10803fcc 	andi	r2,r2,255
  801b60:	1080201c 	xori	r2,r2,128
  801b64:	10bfe004 	addi	r2,r2,-128
  801b68:	10000226 	beq	r2,zero,801b74 <logic+0x1778>
  801b6c:	00800044 	movi	r2,1
  801b70:	00000106 	br	801b78 <logic+0x177c>
  801b74:	0005883a 	mov	r2,zero
  801b78:	1007883a 	mov	r3,r2
  801b7c:	e0bffc17 	ldw	r2,-16(fp)
  801b80:	10c038c5 	stb	r3,227(r2)
  d->_cg178 = d->_Pacemaker_local__Atrig8;
  801b84:	e0bffc17 	ldw	r2,-16(fp)
  801b88:	10c01a43 	ldbu	r3,105(r2)
  801b8c:	e0bffc17 	ldw	r2,-16(fp)
  801b90:	10c04e85 	stb	r3,314(r2)
  d->_g177 = d->_g172 && !d->_cg178;
  801b94:	e0bffc17 	ldw	r2,-16(fp)
  801b98:	108038c3 	ldbu	r2,227(r2)
  801b9c:	10803fcc 	andi	r2,r2,255
  801ba0:	1080201c 	xori	r2,r2,128
  801ba4:	10bfe004 	addi	r2,r2,-128
  801ba8:	10000826 	beq	r2,zero,801bcc <logic+0x17d0>
  801bac:	e0bffc17 	ldw	r2,-16(fp)
  801bb0:	10804e83 	ldbu	r2,314(r2)
  801bb4:	10803fcc 	andi	r2,r2,255
  801bb8:	1080201c 	xori	r2,r2,128
  801bbc:	10bfe004 	addi	r2,r2,-128
  801bc0:	1000021e 	bne	r2,zero,801bcc <logic+0x17d0>
  801bc4:	00800044 	movi	r2,1
  801bc8:	00000106 	br	801bd0 <logic+0x17d4>
  801bcc:	0005883a 	mov	r2,zero
  801bd0:	1007883a 	mov	r3,r2
  801bd4:	e0bffc17 	ldw	r2,-16(fp)
  801bd8:	10c03a05 	stb	r3,232(r2)
  d->_cg179 = d->_Pacemaker_local__Atrig9;
  801bdc:	e0bffc17 	ldw	r2,-16(fp)
  801be0:	10c01a83 	ldbu	r3,106(r2)
  801be4:	e0bffc17 	ldw	r2,-16(fp)
  801be8:	10c04f05 	stb	r3,316(r2)
  d->_g164_e2 = d->_g177 && !d->_cg179;
  801bec:	e0bffc17 	ldw	r2,-16(fp)
  801bf0:	10803a03 	ldbu	r2,232(r2)
  801bf4:	10803fcc 	andi	r2,r2,255
  801bf8:	1080201c 	xori	r2,r2,128
  801bfc:	10bfe004 	addi	r2,r2,-128
  801c00:	10000826 	beq	r2,zero,801c24 <logic+0x1828>
  801c04:	e0bffc17 	ldw	r2,-16(fp)
  801c08:	10804f03 	ldbu	r2,316(r2)
  801c0c:	10803fcc 	andi	r2,r2,255
  801c10:	1080201c 	xori	r2,r2,128
  801c14:	10bfe004 	addi	r2,r2,-128
  801c18:	1000021e 	bne	r2,zero,801c24 <logic+0x1828>
  801c1c:	00800044 	movi	r2,1
  801c20:	00000106 	br	801c28 <logic+0x182c>
  801c24:	0005883a 	mov	r2,zero
  801c28:	1007883a 	mov	r3,r2
  801c2c:	e0bffc17 	ldw	r2,-16(fp)
  801c30:	10c05885 	stb	r3,354(r2)
  if (d->_g164_e2) {
  801c34:	e0bffc17 	ldw	r2,-16(fp)
  801c38:	10805883 	ldbu	r2,354(r2)
  801c3c:	10803fcc 	andi	r2,r2,255
  801c40:	1080201c 	xori	r2,r2,128
  801c44:	10bfe004 	addi	r2,r2,-128
  801c48:	10000626 	beq	r2,zero,801c64 <logic+0x1868>
    d->_Pacemaker_local_iVP |= 1;
  801c4c:	e0bffc17 	ldw	r2,-16(fp)
  801c50:	10801743 	ldbu	r2,93(r2)
  801c54:	10800054 	ori	r2,r2,1
  801c58:	1007883a 	mov	r3,r2
  801c5c:	e0bffc17 	ldw	r2,-16(fp)
  801c60:	10c01745 	stb	r3,93(r2)
  }
  d->_g164 = d->_pg153;
  801c64:	e0bffc17 	ldw	r2,-16(fp)
  801c68:	10c05cc3 	ldbu	r3,371(r2)
  801c6c:	e0bffc17 	ldw	r2,-16(fp)
  801c70:	10c03785 	stb	r3,222(r2)
  d->_cg6 = d->VS || d->_Pacemaker_local_iVP;
  801c74:	e0bffc17 	ldw	r2,-16(fp)
  801c78:	10800a43 	ldbu	r2,41(r2)
  801c7c:	10803fcc 	andi	r2,r2,255
  801c80:	1080201c 	xori	r2,r2,128
  801c84:	10bfe004 	addi	r2,r2,-128
  801c88:	1000061e 	bne	r2,zero,801ca4 <logic+0x18a8>
  801c8c:	e0bffc17 	ldw	r2,-16(fp)
  801c90:	10801743 	ldbu	r2,93(r2)
  801c94:	10803fcc 	andi	r2,r2,255
  801c98:	1080201c 	xori	r2,r2,128
  801c9c:	10bfe004 	addi	r2,r2,-128
  801ca0:	10000226 	beq	r2,zero,801cac <logic+0x18b0>
  801ca4:	00800044 	movi	r2,1
  801ca8:	00000106 	br	801cb0 <logic+0x18b4>
  801cac:	0005883a 	mov	r2,zero
  801cb0:	1007883a 	mov	r3,r2
  801cb4:	e0bffc17 	ldw	r2,-16(fp)
  801cb8:	10c04005 	stb	r3,256(r2)
  d->_g153 = d->_GO || (d->_g164 && !d->_cg6);
  801cbc:	e0bffc17 	ldw	r2,-16(fp)
  801cc0:	10803fc3 	ldbu	r2,255(r2)
  801cc4:	10803fcc 	andi	r2,r2,255
  801cc8:	1080201c 	xori	r2,r2,128
  801ccc:	10bfe004 	addi	r2,r2,-128
  801cd0:	10000c1e 	bne	r2,zero,801d04 <logic+0x1908>
  801cd4:	e0bffc17 	ldw	r2,-16(fp)
  801cd8:	10803783 	ldbu	r2,222(r2)
  801cdc:	10803fcc 	andi	r2,r2,255
  801ce0:	1080201c 	xori	r2,r2,128
  801ce4:	10bfe004 	addi	r2,r2,-128
  801ce8:	10000826 	beq	r2,zero,801d0c <logic+0x1910>
  801cec:	e0bffc17 	ldw	r2,-16(fp)
  801cf0:	10804003 	ldbu	r2,256(r2)
  801cf4:	10803fcc 	andi	r2,r2,255
  801cf8:	1080201c 	xori	r2,r2,128
  801cfc:	10bfe004 	addi	r2,r2,-128
  801d00:	1000021e 	bne	r2,zero,801d0c <logic+0x1910>
  801d04:	00800044 	movi	r2,1
  801d08:	00000106 	br	801d10 <logic+0x1914>
  801d0c:	0005883a 	mov	r2,zero
  801d10:	1007883a 	mov	r3,r2
  801d14:	e0bffc17 	ldw	r2,-16(fp)
  801d18:	10c03585 	stb	r3,214(r2)
  d->_g173_e3 = d->_pg187;
  801d1c:	e0bffc17 	ldw	r2,-16(fp)
  801d20:	10c05d03 	ldbu	r3,372(r2)
  801d24:	e0bffc17 	ldw	r2,-16(fp)
  801d28:	10c058c5 	stb	r3,355(r2)
  if (d->_g173_e3) {
  801d2c:	e0bffc17 	ldw	r2,-16(fp)
  801d30:	108058c3 	ldbu	r2,355(r2)
  801d34:	10803fcc 	andi	r2,r2,255
  801d38:	1080201c 	xori	r2,r2,128
  801d3c:	10bfe004 	addi	r2,r2,-128
  801d40:	10001226 	beq	r2,zero,801d8c <logic+0x1990>
    d->_Pacemaker_local__region0_LRI_x += d->deltaT;
  801d44:	e13ffc17 	ldw	r4,-16(fp)
  801d48:	20800b17 	ldw	r2,44(r4)
  801d4c:	20c00c17 	ldw	r3,48(r4)
  801d50:	e1bffc17 	ldw	r6,-16(fp)
  801d54:	31000617 	ldw	r4,24(r6)
  801d58:	31400717 	ldw	r5,28(r6)
  801d5c:	200d883a 	mov	r6,r4
  801d60:	280f883a 	mov	r7,r5
  801d64:	1009883a 	mov	r4,r2
  801d68:	180b883a 	mov	r5,r3
  801d6c:	08078100 	call	807810 <__adddf3>
  801d70:	1009883a 	mov	r4,r2
  801d74:	180b883a 	mov	r5,r3
  801d78:	2005883a 	mov	r2,r4
  801d7c:	2807883a 	mov	r3,r5
  801d80:	e13ffc17 	ldw	r4,-16(fp)
  801d84:	20800b15 	stw	r2,44(r4)
  801d88:	20c00c15 	stw	r3,48(r4)
  }
  d->_g153_e1 = d->_g164 && d->_cg6;
  801d8c:	e0bffc17 	ldw	r2,-16(fp)
  801d90:	10803783 	ldbu	r2,222(r2)
  801d94:	10803fcc 	andi	r2,r2,255
  801d98:	1080201c 	xori	r2,r2,128
  801d9c:	10bfe004 	addi	r2,r2,-128
  801da0:	10000826 	beq	r2,zero,801dc4 <logic+0x19c8>
  801da4:	e0bffc17 	ldw	r2,-16(fp)
  801da8:	10804003 	ldbu	r2,256(r2)
  801dac:	10803fcc 	andi	r2,r2,255
  801db0:	1080201c 	xori	r2,r2,128
  801db4:	10bfe004 	addi	r2,r2,-128
  801db8:	10000226 	beq	r2,zero,801dc4 <logic+0x19c8>
  801dbc:	00800044 	movi	r2,1
  801dc0:	00000106 	br	801dc8 <logic+0x19cc>
  801dc4:	0005883a 	mov	r2,zero
  801dc8:	1007883a 	mov	r3,r2
  801dcc:	e0bffc17 	ldw	r2,-16(fp)
  801dd0:	10c05845 	stb	r3,353(r2)
  if (d->_g153_e1) {
  801dd4:	e0bffc17 	ldw	r2,-16(fp)
  801dd8:	10805843 	ldbu	r2,353(r2)
  801ddc:	10803fcc 	andi	r2,r2,255
  801de0:	1080201c 	xori	r2,r2,128
  801de4:	10bfe004 	addi	r2,r2,-128
  801de8:	10000326 	beq	r2,zero,801df8 <logic+0x19fc>
    d->_Pacemaker_local__region0_LRI_x = 0;
  801dec:	e0bffc17 	ldw	r2,-16(fp)
  801df0:	10000b15 	stw	zero,44(r2)
  801df4:	10000c15 	stw	zero,48(r2)
  }
  d->_g173 = d->_pg29;
  801df8:	e0bffc17 	ldw	r2,-16(fp)
  801dfc:	10c05d43 	ldbu	r3,373(r2)
  801e00:	e0bffc17 	ldw	r2,-16(fp)
  801e04:	10c03905 	stb	r3,228(r2)
  d->_g6 = d->_pg28;
  801e08:	e0bffc17 	ldw	r2,-16(fp)
  801e0c:	10c05d83 	ldbu	r3,374(r2)
  801e10:	e0bffc17 	ldw	r2,-16(fp)
  801e14:	10c01b85 	stb	r3,110(r2)
  d->_g15_e1 = !(d->_g173 || d->_g6);
  801e18:	e0bffc17 	ldw	r2,-16(fp)
  801e1c:	10803903 	ldbu	r2,228(r2)
  801e20:	10803fcc 	andi	r2,r2,255
  801e24:	1080201c 	xori	r2,r2,128
  801e28:	10bfe004 	addi	r2,r2,-128
  801e2c:	1000081e 	bne	r2,zero,801e50 <logic+0x1a54>
  801e30:	e0bffc17 	ldw	r2,-16(fp)
  801e34:	10801b83 	ldbu	r2,110(r2)
  801e38:	10803fcc 	andi	r2,r2,255
  801e3c:	1080201c 	xori	r2,r2,128
  801e40:	10bfe004 	addi	r2,r2,-128
  801e44:	1000021e 	bne	r2,zero,801e50 <logic+0x1a54>
  801e48:	00800044 	movi	r2,1
  801e4c:	00000106 	br	801e54 <logic+0x1a58>
  801e50:	0005883a 	mov	r2,zero
  801e54:	1007883a 	mov	r3,r2
  801e58:	e0bffc17 	ldw	r2,-16(fp)
  801e5c:	10c05585 	stb	r3,342(r2)
  d->_g22 = d->_pg14;
  801e60:	e0bffc17 	ldw	r2,-16(fp)
  801e64:	10c05dc3 	ldbu	r3,375(r2)
  801e68:	e0bffc17 	ldw	r2,-16(fp)
  801e6c:	10c01e45 	stb	r3,121(r2)
  d->_cg22 = d->VS || d->_Pacemaker_local_iVP;
  801e70:	e0bffc17 	ldw	r2,-16(fp)
  801e74:	10800a43 	ldbu	r2,41(r2)
  801e78:	10803fcc 	andi	r2,r2,255
  801e7c:	1080201c 	xori	r2,r2,128
  801e80:	10bfe004 	addi	r2,r2,-128
  801e84:	1000061e 	bne	r2,zero,801ea0 <logic+0x1aa4>
  801e88:	e0bffc17 	ldw	r2,-16(fp)
  801e8c:	10801743 	ldbu	r2,93(r2)
  801e90:	10803fcc 	andi	r2,r2,255
  801e94:	1080201c 	xori	r2,r2,128
  801e98:	10bfe004 	addi	r2,r2,-128
  801e9c:	10000226 	beq	r2,zero,801ea8 <logic+0x1aac>
  801ea0:	00800044 	movi	r2,1
  801ea4:	00000106 	br	801eac <logic+0x1ab0>
  801ea8:	0005883a 	mov	r2,zero
  801eac:	1007883a 	mov	r3,r2
  801eb0:	e0bffc17 	ldw	r2,-16(fp)
  801eb4:	10c04205 	stb	r3,264(r2)
  d->_g23 = d->_g22 && d->_cg22;
  801eb8:	e0bffc17 	ldw	r2,-16(fp)
  801ebc:	10801e43 	ldbu	r2,121(r2)
  801ec0:	10803fcc 	andi	r2,r2,255
  801ec4:	1080201c 	xori	r2,r2,128
  801ec8:	10bfe004 	addi	r2,r2,-128
  801ecc:	10000826 	beq	r2,zero,801ef0 <logic+0x1af4>
  801ed0:	e0bffc17 	ldw	r2,-16(fp)
  801ed4:	10804203 	ldbu	r2,264(r2)
  801ed8:	10803fcc 	andi	r2,r2,255
  801edc:	1080201c 	xori	r2,r2,128
  801ee0:	10bfe004 	addi	r2,r2,-128
  801ee4:	10000226 	beq	r2,zero,801ef0 <logic+0x1af4>
  801ee8:	00800044 	movi	r2,1
  801eec:	00000106 	br	801ef4 <logic+0x1af8>
  801ef0:	0005883a 	mov	r2,zero
  801ef4:	1007883a 	mov	r3,r2
  801ef8:	e0bffc17 	ldw	r2,-16(fp)
  801efc:	10c01e85 	stb	r3,122(r2)
  if (d->_g23) {
  801f00:	e0bffc17 	ldw	r2,-16(fp)
  801f04:	10801e83 	ldbu	r2,122(r2)
  801f08:	10803fcc 	andi	r2,r2,255
  801f0c:	1080201c 	xori	r2,r2,128
  801f10:	10bfe004 	addi	r2,r2,-128
  801f14:	10000326 	beq	r2,zero,801f24 <logic+0x1b28>
    d->_Pacemaker_local__Atrig = 1;
  801f18:	e0bffc17 	ldw	r2,-16(fp)
  801f1c:	00c00044 	movi	r3,1
  801f20:	10c01845 	stb	r3,97(r2)
  }
  d->_g25 = d->_g22 && !d->_cg22;
  801f24:	e0bffc17 	ldw	r2,-16(fp)
  801f28:	10801e43 	ldbu	r2,121(r2)
  801f2c:	10803fcc 	andi	r2,r2,255
  801f30:	1080201c 	xori	r2,r2,128
  801f34:	10bfe004 	addi	r2,r2,-128
  801f38:	10000826 	beq	r2,zero,801f5c <logic+0x1b60>
  801f3c:	e0bffc17 	ldw	r2,-16(fp)
  801f40:	10804203 	ldbu	r2,264(r2)
  801f44:	10803fcc 	andi	r2,r2,255
  801f48:	1080201c 	xori	r2,r2,128
  801f4c:	10bfe004 	addi	r2,r2,-128
  801f50:	1000021e 	bne	r2,zero,801f5c <logic+0x1b60>
  801f54:	00800044 	movi	r2,1
  801f58:	00000106 	br	801f60 <logic+0x1b64>
  801f5c:	0005883a 	mov	r2,zero
  801f60:	1007883a 	mov	r3,r2
  801f64:	e0bffc17 	ldw	r2,-16(fp)
  801f68:	10c01f05 	stb	r3,124(r2)
  d->_cg25 = d->_Pacemaker_local__region0_LRI_x >= d->LRI && !(d->VS || d->_Pacemaker_local_iVP);
  801f6c:	e0bffc17 	ldw	r2,-16(fp)
  801f70:	14000b17 	ldw	r16,44(r2)
  801f74:	14400c17 	ldw	r17,48(r2)
  801f78:	e0bffc17 	ldw	r2,-16(fp)
  801f7c:	10800417 	ldw	r2,16(r2)
  801f80:	1009883a 	mov	r4,r2
  801f84:	08092a00 	call	8092a0 <__floatsidf>
  801f88:	1009883a 	mov	r4,r2
  801f8c:	180b883a 	mov	r5,r3
  801f90:	200d883a 	mov	r6,r4
  801f94:	280f883a 	mov	r7,r5
  801f98:	8009883a 	mov	r4,r16
  801f9c:	880b883a 	mov	r5,r17
  801fa0:	08080bc0 	call	8080bc <__gedf2>
  801fa4:	10000e16 	blt	r2,zero,801fe0 <logic+0x1be4>
  801fa8:	e0bffc17 	ldw	r2,-16(fp)
  801fac:	10800a43 	ldbu	r2,41(r2)
  801fb0:	10803fcc 	andi	r2,r2,255
  801fb4:	1080201c 	xori	r2,r2,128
  801fb8:	10bfe004 	addi	r2,r2,-128
  801fbc:	1000081e 	bne	r2,zero,801fe0 <logic+0x1be4>
  801fc0:	e0bffc17 	ldw	r2,-16(fp)
  801fc4:	10801743 	ldbu	r2,93(r2)
  801fc8:	10803fcc 	andi	r2,r2,255
  801fcc:	1080201c 	xori	r2,r2,128
  801fd0:	10bfe004 	addi	r2,r2,-128
  801fd4:	1000021e 	bne	r2,zero,801fe0 <logic+0x1be4>
  801fd8:	00800044 	movi	r2,1
  801fdc:	00000106 	br	801fe4 <logic+0x1be8>
  801fe0:	0005883a 	mov	r2,zero
  801fe4:	1007883a 	mov	r3,r2
  801fe8:	e0bffc17 	ldw	r2,-16(fp)
  801fec:	10c041c5 	stb	r3,263(r2)
  d->_g26 = d->_g25 && d->_cg25;
  801ff0:	e0bffc17 	ldw	r2,-16(fp)
  801ff4:	10801f03 	ldbu	r2,124(r2)
  801ff8:	10803fcc 	andi	r2,r2,255
  801ffc:	1080201c 	xori	r2,r2,128
  802000:	10bfe004 	addi	r2,r2,-128
  802004:	10000826 	beq	r2,zero,802028 <logic+0x1c2c>
  802008:	e0bffc17 	ldw	r2,-16(fp)
  80200c:	108041c3 	ldbu	r2,263(r2)
  802010:	10803fcc 	andi	r2,r2,255
  802014:	1080201c 	xori	r2,r2,128
  802018:	10bfe004 	addi	r2,r2,-128
  80201c:	10000226 	beq	r2,zero,802028 <logic+0x1c2c>
  802020:	00800044 	movi	r2,1
  802024:	00000106 	br	80202c <logic+0x1c30>
  802028:	0005883a 	mov	r2,zero
  80202c:	1007883a 	mov	r3,r2
  802030:	e0bffc17 	ldw	r2,-16(fp)
  802034:	10c01f45 	stb	r3,125(r2)
  if (d->_g26) {
  802038:	e0bffc17 	ldw	r2,-16(fp)
  80203c:	10801f43 	ldbu	r2,125(r2)
  802040:	10803fcc 	andi	r2,r2,255
  802044:	1080201c 	xori	r2,r2,128
  802048:	10bfe004 	addi	r2,r2,-128
  80204c:	10000326 	beq	r2,zero,80205c <logic+0x1c60>
    d->_Pacemaker_local__Atrig1 = 1;
  802050:	e0bffc17 	ldw	r2,-16(fp)
  802054:	00c00044 	movi	r3,1
  802058:	10c01885 	stb	r3,98(r2)
  }
  d->_g12 = d->_g6 || d->_g173;
  80205c:	e0bffc17 	ldw	r2,-16(fp)
  802060:	10801b83 	ldbu	r2,110(r2)
  802064:	10803fcc 	andi	r2,r2,255
  802068:	1080201c 	xori	r2,r2,128
  80206c:	10bfe004 	addi	r2,r2,-128
  802070:	1000061e 	bne	r2,zero,80208c <logic+0x1c90>
  802074:	e0bffc17 	ldw	r2,-16(fp)
  802078:	10803903 	ldbu	r2,228(r2)
  80207c:	10803fcc 	andi	r2,r2,255
  802080:	1080201c 	xori	r2,r2,128
  802084:	10bfe004 	addi	r2,r2,-128
  802088:	10000226 	beq	r2,zero,802094 <logic+0x1c98>
  80208c:	00800044 	movi	r2,1
  802090:	00000106 	br	802098 <logic+0x1c9c>
  802094:	0005883a 	mov	r2,zero
  802098:	1007883a 	mov	r3,r2
  80209c:	e0bffc17 	ldw	r2,-16(fp)
  8020a0:	10c01c85 	stb	r3,114(r2)
  d->_cg13 = d->_Pacemaker_local__region0_LRI_x < d->LRI;
  8020a4:	e0bffc17 	ldw	r2,-16(fp)
  8020a8:	14000b17 	ldw	r16,44(r2)
  8020ac:	14400c17 	ldw	r17,48(r2)
  8020b0:	e0bffc17 	ldw	r2,-16(fp)
  8020b4:	10800417 	ldw	r2,16(r2)
  8020b8:	1009883a 	mov	r4,r2
  8020bc:	08092a00 	call	8092a0 <__floatsidf>
  8020c0:	1009883a 	mov	r4,r2
  8020c4:	180b883a 	mov	r5,r3
  8020c8:	04800044 	movi	r18,1
  8020cc:	200d883a 	mov	r6,r4
  8020d0:	280f883a 	mov	r7,r5
  8020d4:	8009883a 	mov	r4,r16
  8020d8:	880b883a 	mov	r5,r17
  8020dc:	08081980 	call	808198 <__ledf2>
  8020e0:	10000116 	blt	r2,zero,8020e8 <logic+0x1cec>
  8020e4:	0025883a 	mov	r18,zero
  8020e8:	9007883a 	mov	r3,r18
  8020ec:	e0bffc17 	ldw	r2,-16(fp)
  8020f0:	10c04105 	stb	r3,260(r2)
  d->_g18 = d->_g12 && d->_cg13;
  8020f4:	e0bffc17 	ldw	r2,-16(fp)
  8020f8:	10801c83 	ldbu	r2,114(r2)
  8020fc:	10803fcc 	andi	r2,r2,255
  802100:	1080201c 	xori	r2,r2,128
  802104:	10bfe004 	addi	r2,r2,-128
  802108:	10000826 	beq	r2,zero,80212c <logic+0x1d30>
  80210c:	e0bffc17 	ldw	r2,-16(fp)
  802110:	10804103 	ldbu	r2,260(r2)
  802114:	10803fcc 	andi	r2,r2,255
  802118:	1080201c 	xori	r2,r2,128
  80211c:	10bfe004 	addi	r2,r2,-128
  802120:	10000226 	beq	r2,zero,80212c <logic+0x1d30>
  802124:	00800044 	movi	r2,1
  802128:	00000106 	br	802130 <logic+0x1d34>
  80212c:	0005883a 	mov	r2,zero
  802130:	1007883a 	mov	r3,r2
  802134:	e0bffc17 	ldw	r2,-16(fp)
  802138:	10c01dc5 	stb	r3,119(r2)
  if (d->_g18) {
  80213c:	e0bffc17 	ldw	r2,-16(fp)
  802140:	10801dc3 	ldbu	r2,119(r2)
  802144:	10803fcc 	andi	r2,r2,255
  802148:	1080201c 	xori	r2,r2,128
  80214c:	10bfe004 	addi	r2,r2,-128
  802150:	10003426 	beq	r2,zero,802224 <logic+0x1e28>
    d->sleepT = (d->sleepT < (d->LRI - d->_Pacemaker_local__region0_LRI_x)) ? d->sleepT : (d->LRI - d->_Pacemaker_local__region0_LRI_x);
  802154:	e0bffc17 	ldw	r2,-16(fp)
  802158:	14000817 	ldw	r16,32(r2)
  80215c:	14400917 	ldw	r17,36(r2)
  802160:	e0bffc17 	ldw	r2,-16(fp)
  802164:	10800417 	ldw	r2,16(r2)
  802168:	1009883a 	mov	r4,r2
  80216c:	08092a00 	call	8092a0 <__floatsidf>
  802170:	1011883a 	mov	r8,r2
  802174:	1813883a 	mov	r9,r3
  802178:	e13ffc17 	ldw	r4,-16(fp)
  80217c:	20800b17 	ldw	r2,44(r4)
  802180:	20c00c17 	ldw	r3,48(r4)
  802184:	100d883a 	mov	r6,r2
  802188:	180f883a 	mov	r7,r3
  80218c:	4009883a 	mov	r4,r8
  802190:	480b883a 	mov	r5,r9
  802194:	08089a40 	call	8089a4 <__subdf3>
  802198:	1009883a 	mov	r4,r2
  80219c:	180b883a 	mov	r5,r3
  8021a0:	2005883a 	mov	r2,r4
  8021a4:	2807883a 	mov	r3,r5
  8021a8:	100d883a 	mov	r6,r2
  8021ac:	180f883a 	mov	r7,r3
  8021b0:	8009883a 	mov	r4,r16
  8021b4:	880b883a 	mov	r5,r17
  8021b8:	08081980 	call	808198 <__ledf2>
  8021bc:	1000040e 	bge	r2,zero,8021d0 <logic+0x1dd4>
  8021c0:	e13ffc17 	ldw	r4,-16(fp)
  8021c4:	20800817 	ldw	r2,32(r4)
  8021c8:	20c00917 	ldw	r3,36(r4)
  8021cc:	00001206 	br	802218 <logic+0x1e1c>
  8021d0:	e0bffc17 	ldw	r2,-16(fp)
  8021d4:	10800417 	ldw	r2,16(r2)
  8021d8:	1009883a 	mov	r4,r2
  8021dc:	08092a00 	call	8092a0 <__floatsidf>
  8021e0:	1011883a 	mov	r8,r2
  8021e4:	1813883a 	mov	r9,r3
  8021e8:	e13ffc17 	ldw	r4,-16(fp)
  8021ec:	20800b17 	ldw	r2,44(r4)
  8021f0:	20c00c17 	ldw	r3,48(r4)
  8021f4:	100d883a 	mov	r6,r2
  8021f8:	180f883a 	mov	r7,r3
  8021fc:	4009883a 	mov	r4,r8
  802200:	480b883a 	mov	r5,r9
  802204:	08089a40 	call	8089a4 <__subdf3>
  802208:	1009883a 	mov	r4,r2
  80220c:	180b883a 	mov	r5,r3
  802210:	2005883a 	mov	r2,r4
  802214:	2807883a 	mov	r3,r5
  802218:	e13ffc17 	ldw	r4,-16(fp)
  80221c:	20800815 	stw	r2,32(r4)
  802220:	20c00915 	stw	r3,36(r4)
  }
  d->_cg14 = d->_Pacemaker_local__Atrig || d->_Pacemaker_local__Atrig1;
  802224:	e0bffc17 	ldw	r2,-16(fp)
  802228:	10801843 	ldbu	r2,97(r2)
  80222c:	10803fcc 	andi	r2,r2,255
  802230:	1080201c 	xori	r2,r2,128
  802234:	10bfe004 	addi	r2,r2,-128
  802238:	1000061e 	bne	r2,zero,802254 <logic+0x1e58>
  80223c:	e0bffc17 	ldw	r2,-16(fp)
  802240:	10801883 	ldbu	r2,98(r2)
  802244:	10803fcc 	andi	r2,r2,255
  802248:	1080201c 	xori	r2,r2,128
  80224c:	10bfe004 	addi	r2,r2,-128
  802250:	10000226 	beq	r2,zero,80225c <logic+0x1e60>
  802254:	00800044 	movi	r2,1
  802258:	00000106 	br	802260 <logic+0x1e64>
  80225c:	0005883a 	mov	r2,zero
  802260:	1007883a 	mov	r3,r2
  802264:	e0bffc17 	ldw	r2,-16(fp)
  802268:	10c040c5 	stb	r3,259(r2)
  d->_g13 = d->_g12 && !d->_cg13;
  80226c:	e0bffc17 	ldw	r2,-16(fp)
  802270:	10801c83 	ldbu	r2,114(r2)
  802274:	10803fcc 	andi	r2,r2,255
  802278:	1080201c 	xori	r2,r2,128
  80227c:	10bfe004 	addi	r2,r2,-128
  802280:	10000826 	beq	r2,zero,8022a4 <logic+0x1ea8>
  802284:	e0bffc17 	ldw	r2,-16(fp)
  802288:	10804103 	ldbu	r2,260(r2)
  80228c:	10803fcc 	andi	r2,r2,255
  802290:	1080201c 	xori	r2,r2,128
  802294:	10bfe004 	addi	r2,r2,-128
  802298:	1000021e 	bne	r2,zero,8022a4 <logic+0x1ea8>
  80229c:	00800044 	movi	r2,1
  8022a0:	00000106 	br	8022a8 <logic+0x1eac>
  8022a4:	0005883a 	mov	r2,zero
  8022a8:	1007883a 	mov	r3,r2
  8022ac:	e0bffc17 	ldw	r2,-16(fp)
  8022b0:	10c01cc5 	stb	r3,115(r2)
  d->_cg16 = d->_Pacemaker_local__Atrig || d->_Pacemaker_local__Atrig1;
  8022b4:	e0bffc17 	ldw	r2,-16(fp)
  8022b8:	10801843 	ldbu	r2,97(r2)
  8022bc:	10803fcc 	andi	r2,r2,255
  8022c0:	1080201c 	xori	r2,r2,128
  8022c4:	10bfe004 	addi	r2,r2,-128
  8022c8:	1000061e 	bne	r2,zero,8022e4 <logic+0x1ee8>
  8022cc:	e0bffc17 	ldw	r2,-16(fp)
  8022d0:	10801883 	ldbu	r2,98(r2)
  8022d4:	10803fcc 	andi	r2,r2,255
  8022d8:	1080201c 	xori	r2,r2,128
  8022dc:	10bfe004 	addi	r2,r2,-128
  8022e0:	10000226 	beq	r2,zero,8022ec <logic+0x1ef0>
  8022e4:	00800044 	movi	r2,1
  8022e8:	00000106 	br	8022f0 <logic+0x1ef4>
  8022ec:	0005883a 	mov	r2,zero
  8022f0:	1007883a 	mov	r3,r2
  8022f4:	e0bffc17 	ldw	r2,-16(fp)
  8022f8:	10c04145 	stb	r3,261(r2)
  d->_g15 = (d->_g18 && d->_cg14) || (d->_g13 && d->_cg16);
  8022fc:	e0bffc17 	ldw	r2,-16(fp)
  802300:	10801dc3 	ldbu	r2,119(r2)
  802304:	10803fcc 	andi	r2,r2,255
  802308:	1080201c 	xori	r2,r2,128
  80230c:	10bfe004 	addi	r2,r2,-128
  802310:	10000626 	beq	r2,zero,80232c <logic+0x1f30>
  802314:	e0bffc17 	ldw	r2,-16(fp)
  802318:	108040c3 	ldbu	r2,259(r2)
  80231c:	10803fcc 	andi	r2,r2,255
  802320:	1080201c 	xori	r2,r2,128
  802324:	10bfe004 	addi	r2,r2,-128
  802328:	10000c1e 	bne	r2,zero,80235c <logic+0x1f60>
  80232c:	e0bffc17 	ldw	r2,-16(fp)
  802330:	10801cc3 	ldbu	r2,115(r2)
  802334:	10803fcc 	andi	r2,r2,255
  802338:	1080201c 	xori	r2,r2,128
  80233c:	10bfe004 	addi	r2,r2,-128
  802340:	10000826 	beq	r2,zero,802364 <logic+0x1f68>
  802344:	e0bffc17 	ldw	r2,-16(fp)
  802348:	10804143 	ldbu	r2,261(r2)
  80234c:	10803fcc 	andi	r2,r2,255
  802350:	1080201c 	xori	r2,r2,128
  802354:	10bfe004 	addi	r2,r2,-128
  802358:	10000226 	beq	r2,zero,802364 <logic+0x1f68>
  80235c:	00800044 	movi	r2,1
  802360:	00000106 	br	802368 <logic+0x1f6c>
  802364:	0005883a 	mov	r2,zero
  802368:	1007883a 	mov	r3,r2
  80236c:	e0bffc17 	ldw	r2,-16(fp)
  802370:	10c01d45 	stb	r3,117(r2)
  d->_g22 = !d->_g22;
  802374:	e0bffc17 	ldw	r2,-16(fp)
  802378:	10801e43 	ldbu	r2,121(r2)
  80237c:	10803fcc 	andi	r2,r2,255
  802380:	1080201c 	xori	r2,r2,128
  802384:	10bfe004 	addi	r2,r2,-128
  802388:	1005003a 	cmpeq	r2,r2,zero
  80238c:	1007883a 	mov	r3,r2
  802390:	e0bffc17 	ldw	r2,-16(fp)
  802394:	10c01e45 	stb	r3,121(r2)
  d->_g26 = d->_g23 || d->_g26;
  802398:	e0bffc17 	ldw	r2,-16(fp)
  80239c:	10801e83 	ldbu	r2,122(r2)
  8023a0:	10803fcc 	andi	r2,r2,255
  8023a4:	1080201c 	xori	r2,r2,128
  8023a8:	10bfe004 	addi	r2,r2,-128
  8023ac:	1000061e 	bne	r2,zero,8023c8 <logic+0x1fcc>
  8023b0:	e0bffc17 	ldw	r2,-16(fp)
  8023b4:	10801f43 	ldbu	r2,125(r2)
  8023b8:	10803fcc 	andi	r2,r2,255
  8023bc:	1080201c 	xori	r2,r2,128
  8023c0:	10bfe004 	addi	r2,r2,-128
  8023c4:	10000226 	beq	r2,zero,8023d0 <logic+0x1fd4>
  8023c8:	00800044 	movi	r2,1
  8023cc:	00000106 	br	8023d4 <logic+0x1fd8>
  8023d0:	0005883a 	mov	r2,zero
  8023d4:	1007883a 	mov	r3,r2
  8023d8:	e0bffc17 	ldw	r2,-16(fp)
  8023dc:	10c01f45 	stb	r3,125(r2)
  d->_g23 = (d->_g15_e1 || d->_g15) && (d->_g22 || d->_g26) && (d->_g15 || d->_g26);
  8023e0:	e0bffc17 	ldw	r2,-16(fp)
  8023e4:	10805583 	ldbu	r2,342(r2)
  8023e8:	10803fcc 	andi	r2,r2,255
  8023ec:	1080201c 	xori	r2,r2,128
  8023f0:	10bfe004 	addi	r2,r2,-128
  8023f4:	1000061e 	bne	r2,zero,802410 <logic+0x2014>
  8023f8:	e0bffc17 	ldw	r2,-16(fp)
  8023fc:	10801d43 	ldbu	r2,117(r2)
  802400:	10803fcc 	andi	r2,r2,255
  802404:	1080201c 	xori	r2,r2,128
  802408:	10bfe004 	addi	r2,r2,-128
  80240c:	10001a26 	beq	r2,zero,802478 <logic+0x207c>
  802410:	e0bffc17 	ldw	r2,-16(fp)
  802414:	10801e43 	ldbu	r2,121(r2)
  802418:	10803fcc 	andi	r2,r2,255
  80241c:	1080201c 	xori	r2,r2,128
  802420:	10bfe004 	addi	r2,r2,-128
  802424:	1000061e 	bne	r2,zero,802440 <logic+0x2044>
  802428:	e0bffc17 	ldw	r2,-16(fp)
  80242c:	10801f43 	ldbu	r2,125(r2)
  802430:	10803fcc 	andi	r2,r2,255
  802434:	1080201c 	xori	r2,r2,128
  802438:	10bfe004 	addi	r2,r2,-128
  80243c:	10000e26 	beq	r2,zero,802478 <logic+0x207c>
  802440:	e0bffc17 	ldw	r2,-16(fp)
  802444:	10801d43 	ldbu	r2,117(r2)
  802448:	10803fcc 	andi	r2,r2,255
  80244c:	1080201c 	xori	r2,r2,128
  802450:	10bfe004 	addi	r2,r2,-128
  802454:	1000061e 	bne	r2,zero,802470 <logic+0x2074>
  802458:	e0bffc17 	ldw	r2,-16(fp)
  80245c:	10801f43 	ldbu	r2,125(r2)
  802460:	10803fcc 	andi	r2,r2,255
  802464:	1080201c 	xori	r2,r2,128
  802468:	10bfe004 	addi	r2,r2,-128
  80246c:	10000226 	beq	r2,zero,802478 <logic+0x207c>
  802470:	00800044 	movi	r2,1
  802474:	00000106 	br	80247c <logic+0x2080>
  802478:	0005883a 	mov	r2,zero
  80247c:	1007883a 	mov	r3,r2
  802480:	e0bffc17 	ldw	r2,-16(fp)
  802484:	10c01e85 	stb	r3,122(r2)
  d->_cg27 = d->_Pacemaker_local__Atrig;
  802488:	e0bffc17 	ldw	r2,-16(fp)
  80248c:	10c01843 	ldbu	r3,97(r2)
  802490:	e0bffc17 	ldw	r2,-16(fp)
  802494:	10c04245 	stb	r3,265(r2)
  d->_g15 = d->_g23 && d->_cg27;
  802498:	e0bffc17 	ldw	r2,-16(fp)
  80249c:	10801e83 	ldbu	r2,122(r2)
  8024a0:	10803fcc 	andi	r2,r2,255
  8024a4:	1080201c 	xori	r2,r2,128
  8024a8:	10bfe004 	addi	r2,r2,-128
  8024ac:	10000826 	beq	r2,zero,8024d0 <logic+0x20d4>
  8024b0:	e0bffc17 	ldw	r2,-16(fp)
  8024b4:	10804243 	ldbu	r2,265(r2)
  8024b8:	10803fcc 	andi	r2,r2,255
  8024bc:	1080201c 	xori	r2,r2,128
  8024c0:	10bfe004 	addi	r2,r2,-128
  8024c4:	10000226 	beq	r2,zero,8024d0 <logic+0x20d4>
  8024c8:	00800044 	movi	r2,1
  8024cc:	00000106 	br	8024d4 <logic+0x20d8>
  8024d0:	0005883a 	mov	r2,zero
  8024d4:	1007883a 	mov	r3,r2
  8024d8:	e0bffc17 	ldw	r2,-16(fp)
  8024dc:	10c01d45 	stb	r3,117(r2)
  if (d->_g15) {
  8024e0:	e0bffc17 	ldw	r2,-16(fp)
  8024e4:	10801d43 	ldbu	r2,117(r2)
  8024e8:	10803fcc 	andi	r2,r2,255
  8024ec:	1080201c 	xori	r2,r2,128
  8024f0:	10bfe004 	addi	r2,r2,-128
  8024f4:	10000326 	beq	r2,zero,802504 <logic+0x2108>
    d->_Pacemaker_local__region0_LRI_x = 0;
  8024f8:	e0bffc17 	ldw	r2,-16(fp)
  8024fc:	10000b15 	stw	zero,44(r2)
  802500:	10000c15 	stw	zero,48(r2)
  }
  d->_g15_e1 = d->_pg24;
  802504:	e0bffc17 	ldw	r2,-16(fp)
  802508:	10c05e03 	ldbu	r3,376(r2)
  80250c:	e0bffc17 	ldw	r2,-16(fp)
  802510:	10c05585 	stb	r3,342(r2)
  d->_g24 = d->_GO || d->_g15_e1;
  802514:	e0bffc17 	ldw	r2,-16(fp)
  802518:	10803fc3 	ldbu	r2,255(r2)
  80251c:	10803fcc 	andi	r2,r2,255
  802520:	1080201c 	xori	r2,r2,128
  802524:	10bfe004 	addi	r2,r2,-128
  802528:	1000061e 	bne	r2,zero,802544 <logic+0x2148>
  80252c:	e0bffc17 	ldw	r2,-16(fp)
  802530:	10805583 	ldbu	r2,342(r2)
  802534:	10803fcc 	andi	r2,r2,255
  802538:	1080201c 	xori	r2,r2,128
  80253c:	10bfe004 	addi	r2,r2,-128
  802540:	10000226 	beq	r2,zero,80254c <logic+0x2150>
  802544:	00800044 	movi	r2,1
  802548:	00000106 	br	802550 <logic+0x2154>
  80254c:	0005883a 	mov	r2,zero
  802550:	1007883a 	mov	r3,r2
  802554:	e0bffc17 	ldw	r2,-16(fp)
  802558:	10c01ec5 	stb	r3,123(r2)
  if (d->_g24) {
  80255c:	e0bffc17 	ldw	r2,-16(fp)
  802560:	10801ec3 	ldbu	r2,123(r2)
  802564:	10803fcc 	andi	r2,r2,255
  802568:	1080201c 	xori	r2,r2,128
  80256c:	10bfe004 	addi	r2,r2,-128
  802570:	10000426 	beq	r2,zero,802584 <logic+0x2188>
    d->AP = 0;
  802574:	e0bffc17 	ldw	r2,-16(fp)
  802578:	10000a85 	stb	zero,42(r2)
    d->VP = 0;
  80257c:	e0bffc17 	ldw	r2,-16(fp)
  802580:	10000ac5 	stb	zero,43(r2)
  }
  d->_g24_e2 = d->_g23 && !d->_cg27;
  802584:	e0bffc17 	ldw	r2,-16(fp)
  802588:	10801e83 	ldbu	r2,122(r2)
  80258c:	10803fcc 	andi	r2,r2,255
  802590:	1080201c 	xori	r2,r2,128
  802594:	10bfe004 	addi	r2,r2,-128
  802598:	10000826 	beq	r2,zero,8025bc <logic+0x21c0>
  80259c:	e0bffc17 	ldw	r2,-16(fp)
  8025a0:	10804243 	ldbu	r2,265(r2)
  8025a4:	10803fcc 	andi	r2,r2,255
  8025a8:	1080201c 	xori	r2,r2,128
  8025ac:	10bfe004 	addi	r2,r2,-128
  8025b0:	1000021e 	bne	r2,zero,8025bc <logic+0x21c0>
  8025b4:	00800044 	movi	r2,1
  8025b8:	00000106 	br	8025c0 <logic+0x21c4>
  8025bc:	0005883a 	mov	r2,zero
  8025c0:	1007883a 	mov	r3,r2
  8025c4:	e0bffc17 	ldw	r2,-16(fp)
  8025c8:	10c055c5 	stb	r3,343(r2)
  if (d->_g24_e2) {
  8025cc:	e0bffc17 	ldw	r2,-16(fp)
  8025d0:	108055c3 	ldbu	r2,343(r2)
  8025d4:	10803fcc 	andi	r2,r2,255
  8025d8:	1080201c 	xori	r2,r2,128
  8025dc:	10bfe004 	addi	r2,r2,-128
  8025e0:	10000f26 	beq	r2,zero,802620 <logic+0x2224>
    d->_Pacemaker_local_iVP |= 1;
  8025e4:	e0bffc17 	ldw	r2,-16(fp)
  8025e8:	10801743 	ldbu	r2,93(r2)
  8025ec:	10800054 	ori	r2,r2,1
  8025f0:	1007883a 	mov	r3,r2
  8025f4:	e0bffc17 	ldw	r2,-16(fp)
  8025f8:	10c01745 	stb	r3,93(r2)
    d->VP |= 1;
  8025fc:	e0bffc17 	ldw	r2,-16(fp)
  802600:	10800ac3 	ldbu	r2,43(r2)
  802604:	10800054 	ori	r2,r2,1
  802608:	1007883a 	mov	r3,r2
  80260c:	e0bffc17 	ldw	r2,-16(fp)
  802610:	10c00ac5 	stb	r3,43(r2)
    d->_Pacemaker_local__region0_LRI_x = 0;
  802614:	e0bffc17 	ldw	r2,-16(fp)
  802618:	10000b15 	stw	zero,44(r2)
  80261c:	10000c15 	stw	zero,48(r2)
  }
  d->_g247 = d->_g153_e1 || d->_g15 || d->_g24_e2;
  802620:	e0bffc17 	ldw	r2,-16(fp)
  802624:	10805843 	ldbu	r2,353(r2)
  802628:	10803fcc 	andi	r2,r2,255
  80262c:	1080201c 	xori	r2,r2,128
  802630:	10bfe004 	addi	r2,r2,-128
  802634:	10000c1e 	bne	r2,zero,802668 <logic+0x226c>
  802638:	e0bffc17 	ldw	r2,-16(fp)
  80263c:	10801d43 	ldbu	r2,117(r2)
  802640:	10803fcc 	andi	r2,r2,255
  802644:	1080201c 	xori	r2,r2,128
  802648:	10bfe004 	addi	r2,r2,-128
  80264c:	1000061e 	bne	r2,zero,802668 <logic+0x226c>
  802650:	e0bffc17 	ldw	r2,-16(fp)
  802654:	108055c3 	ldbu	r2,343(r2)
  802658:	10803fcc 	andi	r2,r2,255
  80265c:	1080201c 	xori	r2,r2,128
  802660:	10bfe004 	addi	r2,r2,-128
  802664:	10000226 	beq	r2,zero,802670 <logic+0x2274>
  802668:	00800044 	movi	r2,1
  80266c:	00000106 	br	802674 <logic+0x2278>
  802670:	0005883a 	mov	r2,zero
  802674:	1007883a 	mov	r3,r2
  802678:	e0bffc17 	ldw	r2,-16(fp)
  80267c:	10c03f85 	stb	r3,254(r2)
  if (d->_g247) {
  802680:	e0bffc17 	ldw	r2,-16(fp)
  802684:	10803f83 	ldbu	r2,254(r2)
  802688:	10803fcc 	andi	r2,r2,255
  80268c:	1080201c 	xori	r2,r2,128
  802690:	10bfe004 	addi	r2,r2,-128
  802694:	10000426 	beq	r2,zero,8026a8 <logic+0x22ac>
    d->_Pacemaker_local__Atrig = 0;
  802698:	e0bffc17 	ldw	r2,-16(fp)
  80269c:	10001845 	stb	zero,97(r2)
    d->_Pacemaker_local__Atrig1 = 0;
  8026a0:	e0bffc17 	ldw	r2,-16(fp)
  8026a4:	10001885 	stb	zero,98(r2)
  }
  d->_cg9 = d->_Pacemaker_local__region0_LRI_x < d->LRI;
  8026a8:	e0bffc17 	ldw	r2,-16(fp)
  8026ac:	14000b17 	ldw	r16,44(r2)
  8026b0:	14400c17 	ldw	r17,48(r2)
  8026b4:	e0bffc17 	ldw	r2,-16(fp)
  8026b8:	10800417 	ldw	r2,16(r2)
  8026bc:	1009883a 	mov	r4,r2
  8026c0:	08092a00 	call	8092a0 <__floatsidf>
  8026c4:	1009883a 	mov	r4,r2
  8026c8:	180b883a 	mov	r5,r3
  8026cc:	04800044 	movi	r18,1
  8026d0:	200d883a 	mov	r6,r4
  8026d4:	280f883a 	mov	r7,r5
  8026d8:	8009883a 	mov	r4,r16
  8026dc:	880b883a 	mov	r5,r17
  8026e0:	08081980 	call	808198 <__ledf2>
  8026e4:	10000116 	blt	r2,zero,8026ec <logic+0x22f0>
  8026e8:	0025883a 	mov	r18,zero
  8026ec:	9007883a 	mov	r3,r18
  8026f0:	e0bffc17 	ldw	r2,-16(fp)
  8026f4:	10c04045 	stb	r3,257(r2)
  d->_g27 = d->_g247 && d->_cg9;
  8026f8:	e0bffc17 	ldw	r2,-16(fp)
  8026fc:	10803f83 	ldbu	r2,254(r2)
  802700:	10803fcc 	andi	r2,r2,255
  802704:	1080201c 	xori	r2,r2,128
  802708:	10bfe004 	addi	r2,r2,-128
  80270c:	10000826 	beq	r2,zero,802730 <logic+0x2334>
  802710:	e0bffc17 	ldw	r2,-16(fp)
  802714:	10804043 	ldbu	r2,257(r2)
  802718:	10803fcc 	andi	r2,r2,255
  80271c:	1080201c 	xori	r2,r2,128
  802720:	10bfe004 	addi	r2,r2,-128
  802724:	10000226 	beq	r2,zero,802730 <logic+0x2334>
  802728:	00800044 	movi	r2,1
  80272c:	00000106 	br	802734 <logic+0x2338>
  802730:	0005883a 	mov	r2,zero
  802734:	1007883a 	mov	r3,r2
  802738:	e0bffc17 	ldw	r2,-16(fp)
  80273c:	10c01f85 	stb	r3,126(r2)
  if (d->_g27) {
  802740:	e0bffc17 	ldw	r2,-16(fp)
  802744:	10801f83 	ldbu	r2,126(r2)
  802748:	10803fcc 	andi	r2,r2,255
  80274c:	1080201c 	xori	r2,r2,128
  802750:	10bfe004 	addi	r2,r2,-128
  802754:	10003426 	beq	r2,zero,802828 <logic+0x242c>
    d->sleepT = (d->sleepT < (d->LRI - d->_Pacemaker_local__region0_LRI_x)) ? d->sleepT : (d->LRI - d->_Pacemaker_local__region0_LRI_x);
  802758:	e0bffc17 	ldw	r2,-16(fp)
  80275c:	14000817 	ldw	r16,32(r2)
  802760:	14400917 	ldw	r17,36(r2)
  802764:	e0bffc17 	ldw	r2,-16(fp)
  802768:	10800417 	ldw	r2,16(r2)
  80276c:	1009883a 	mov	r4,r2
  802770:	08092a00 	call	8092a0 <__floatsidf>
  802774:	1011883a 	mov	r8,r2
  802778:	1813883a 	mov	r9,r3
  80277c:	e13ffc17 	ldw	r4,-16(fp)
  802780:	20800b17 	ldw	r2,44(r4)
  802784:	20c00c17 	ldw	r3,48(r4)
  802788:	100d883a 	mov	r6,r2
  80278c:	180f883a 	mov	r7,r3
  802790:	4009883a 	mov	r4,r8
  802794:	480b883a 	mov	r5,r9
  802798:	08089a40 	call	8089a4 <__subdf3>
  80279c:	1009883a 	mov	r4,r2
  8027a0:	180b883a 	mov	r5,r3
  8027a4:	2005883a 	mov	r2,r4
  8027a8:	2807883a 	mov	r3,r5
  8027ac:	100d883a 	mov	r6,r2
  8027b0:	180f883a 	mov	r7,r3
  8027b4:	8009883a 	mov	r4,r16
  8027b8:	880b883a 	mov	r5,r17
  8027bc:	08081980 	call	808198 <__ledf2>
  8027c0:	1000040e 	bge	r2,zero,8027d4 <logic+0x23d8>
  8027c4:	e13ffc17 	ldw	r4,-16(fp)
  8027c8:	20800817 	ldw	r2,32(r4)
  8027cc:	20c00917 	ldw	r3,36(r4)
  8027d0:	00001206 	br	80281c <logic+0x2420>
  8027d4:	e0bffc17 	ldw	r2,-16(fp)
  8027d8:	10800417 	ldw	r2,16(r2)
  8027dc:	1009883a 	mov	r4,r2
  8027e0:	08092a00 	call	8092a0 <__floatsidf>
  8027e4:	1011883a 	mov	r8,r2
  8027e8:	1813883a 	mov	r9,r3
  8027ec:	e13ffc17 	ldw	r4,-16(fp)
  8027f0:	20800b17 	ldw	r2,44(r4)
  8027f4:	20c00c17 	ldw	r3,48(r4)
  8027f8:	100d883a 	mov	r6,r2
  8027fc:	180f883a 	mov	r7,r3
  802800:	4009883a 	mov	r4,r8
  802804:	480b883a 	mov	r5,r9
  802808:	08089a40 	call	8089a4 <__subdf3>
  80280c:	1009883a 	mov	r4,r2
  802810:	180b883a 	mov	r5,r3
  802814:	2005883a 	mov	r2,r4
  802818:	2807883a 	mov	r3,r5
  80281c:	e13ffc17 	ldw	r4,-16(fp)
  802820:	20800815 	stw	r2,32(r4)
  802824:	20c00915 	stw	r3,36(r4)
  }
  d->_cg10 = d->_Pacemaker_local__Atrig || d->_Pacemaker_local__Atrig1;
  802828:	e0bffc17 	ldw	r2,-16(fp)
  80282c:	10801843 	ldbu	r2,97(r2)
  802830:	10803fcc 	andi	r2,r2,255
  802834:	1080201c 	xori	r2,r2,128
  802838:	10bfe004 	addi	r2,r2,-128
  80283c:	1000061e 	bne	r2,zero,802858 <logic+0x245c>
  802840:	e0bffc17 	ldw	r2,-16(fp)
  802844:	10801883 	ldbu	r2,98(r2)
  802848:	10803fcc 	andi	r2,r2,255
  80284c:	1080201c 	xori	r2,r2,128
  802850:	10bfe004 	addi	r2,r2,-128
  802854:	10000226 	beq	r2,zero,802860 <logic+0x2464>
  802858:	00800044 	movi	r2,1
  80285c:	00000106 	br	802864 <logic+0x2468>
  802860:	0005883a 	mov	r2,zero
  802864:	1007883a 	mov	r3,r2
  802868:	e0bffc17 	ldw	r2,-16(fp)
  80286c:	10c04085 	stb	r3,258(r2)
  d->_g28 = (d->_g27 && !d->_cg10) || (d->_g18 && !d->_cg14);
  802870:	e0bffc17 	ldw	r2,-16(fp)
  802874:	10801f83 	ldbu	r2,126(r2)
  802878:	10803fcc 	andi	r2,r2,255
  80287c:	1080201c 	xori	r2,r2,128
  802880:	10bfe004 	addi	r2,r2,-128
  802884:	10000626 	beq	r2,zero,8028a0 <logic+0x24a4>
  802888:	e0bffc17 	ldw	r2,-16(fp)
  80288c:	10804083 	ldbu	r2,258(r2)
  802890:	10803fcc 	andi	r2,r2,255
  802894:	1080201c 	xori	r2,r2,128
  802898:	10bfe004 	addi	r2,r2,-128
  80289c:	10000c26 	beq	r2,zero,8028d0 <logic+0x24d4>
  8028a0:	e0bffc17 	ldw	r2,-16(fp)
  8028a4:	10801dc3 	ldbu	r2,119(r2)
  8028a8:	10803fcc 	andi	r2,r2,255
  8028ac:	1080201c 	xori	r2,r2,128
  8028b0:	10bfe004 	addi	r2,r2,-128
  8028b4:	10000826 	beq	r2,zero,8028d8 <logic+0x24dc>
  8028b8:	e0bffc17 	ldw	r2,-16(fp)
  8028bc:	108040c3 	ldbu	r2,259(r2)
  8028c0:	10803fcc 	andi	r2,r2,255
  8028c4:	1080201c 	xori	r2,r2,128
  8028c8:	10bfe004 	addi	r2,r2,-128
  8028cc:	1000021e 	bne	r2,zero,8028d8 <logic+0x24dc>
  8028d0:	00800044 	movi	r2,1
  8028d4:	00000106 	br	8028dc <logic+0x24e0>
  8028d8:	0005883a 	mov	r2,zero
  8028dc:	1007883a 	mov	r3,r2
  8028e0:	e0bffc17 	ldw	r2,-16(fp)
  8028e4:	10c01fc5 	stb	r3,127(r2)
  d->_g7 = d->_g247 && !d->_cg9;
  8028e8:	e0bffc17 	ldw	r2,-16(fp)
  8028ec:	10803f83 	ldbu	r2,254(r2)
  8028f0:	10803fcc 	andi	r2,r2,255
  8028f4:	1080201c 	xori	r2,r2,128
  8028f8:	10bfe004 	addi	r2,r2,-128
  8028fc:	10000826 	beq	r2,zero,802920 <logic+0x2524>
  802900:	e0bffc17 	ldw	r2,-16(fp)
  802904:	10804043 	ldbu	r2,257(r2)
  802908:	10803fcc 	andi	r2,r2,255
  80290c:	1080201c 	xori	r2,r2,128
  802910:	10bfe004 	addi	r2,r2,-128
  802914:	1000021e 	bne	r2,zero,802920 <logic+0x2524>
  802918:	00800044 	movi	r2,1
  80291c:	00000106 	br	802924 <logic+0x2528>
  802920:	0005883a 	mov	r2,zero
  802924:	1007883a 	mov	r3,r2
  802928:	e0bffc17 	ldw	r2,-16(fp)
  80292c:	10c01bc5 	stb	r3,111(r2)
  d->_cg19 = d->_Pacemaker_local__Atrig || d->_Pacemaker_local__Atrig1;
  802930:	e0bffc17 	ldw	r2,-16(fp)
  802934:	10801843 	ldbu	r2,97(r2)
  802938:	10803fcc 	andi	r2,r2,255
  80293c:	1080201c 	xori	r2,r2,128
  802940:	10bfe004 	addi	r2,r2,-128
  802944:	1000061e 	bne	r2,zero,802960 <logic+0x2564>
  802948:	e0bffc17 	ldw	r2,-16(fp)
  80294c:	10801883 	ldbu	r2,98(r2)
  802950:	10803fcc 	andi	r2,r2,255
  802954:	1080201c 	xori	r2,r2,128
  802958:	10bfe004 	addi	r2,r2,-128
  80295c:	10000226 	beq	r2,zero,802968 <logic+0x256c>
  802960:	00800044 	movi	r2,1
  802964:	00000106 	br	80296c <logic+0x2570>
  802968:	0005883a 	mov	r2,zero
  80296c:	1007883a 	mov	r3,r2
  802970:	e0bffc17 	ldw	r2,-16(fp)
  802974:	10c04185 	stb	r3,262(r2)
  d->_g29 = (d->_g13 && !d->_cg16) || (d->_g7 && !d->_cg19);
  802978:	e0bffc17 	ldw	r2,-16(fp)
  80297c:	10801cc3 	ldbu	r2,115(r2)
  802980:	10803fcc 	andi	r2,r2,255
  802984:	1080201c 	xori	r2,r2,128
  802988:	10bfe004 	addi	r2,r2,-128
  80298c:	10000626 	beq	r2,zero,8029a8 <logic+0x25ac>
  802990:	e0bffc17 	ldw	r2,-16(fp)
  802994:	10804143 	ldbu	r2,261(r2)
  802998:	10803fcc 	andi	r2,r2,255
  80299c:	1080201c 	xori	r2,r2,128
  8029a0:	10bfe004 	addi	r2,r2,-128
  8029a4:	10000c26 	beq	r2,zero,8029d8 <logic+0x25dc>
  8029a8:	e0bffc17 	ldw	r2,-16(fp)
  8029ac:	10801bc3 	ldbu	r2,111(r2)
  8029b0:	10803fcc 	andi	r2,r2,255
  8029b4:	1080201c 	xori	r2,r2,128
  8029b8:	10bfe004 	addi	r2,r2,-128
  8029bc:	10000826 	beq	r2,zero,8029e0 <logic+0x25e4>
  8029c0:	e0bffc17 	ldw	r2,-16(fp)
  8029c4:	10804183 	ldbu	r2,262(r2)
  8029c8:	10803fcc 	andi	r2,r2,255
  8029cc:	1080201c 	xori	r2,r2,128
  8029d0:	10bfe004 	addi	r2,r2,-128
  8029d4:	1000021e 	bne	r2,zero,8029e0 <logic+0x25e4>
  8029d8:	00800044 	movi	r2,1
  8029dc:	00000106 	br	8029e4 <logic+0x25e8>
  8029e0:	0005883a 	mov	r2,zero
  8029e4:	1007883a 	mov	r3,r2
  8029e8:	e0bffc17 	ldw	r2,-16(fp)
  8029ec:	10c02005 	stb	r3,128(r2)
  d->_g14 = d->_g247 || (d->_g25 && !d->_cg25);
  8029f0:	e0bffc17 	ldw	r2,-16(fp)
  8029f4:	10803f83 	ldbu	r2,254(r2)
  8029f8:	10803fcc 	andi	r2,r2,255
  8029fc:	1080201c 	xori	r2,r2,128
  802a00:	10bfe004 	addi	r2,r2,-128
  802a04:	10000c1e 	bne	r2,zero,802a38 <logic+0x263c>
  802a08:	e0bffc17 	ldw	r2,-16(fp)
  802a0c:	10801f03 	ldbu	r2,124(r2)
  802a10:	10803fcc 	andi	r2,r2,255
  802a14:	1080201c 	xori	r2,r2,128
  802a18:	10bfe004 	addi	r2,r2,-128
  802a1c:	10000826 	beq	r2,zero,802a40 <logic+0x2644>
  802a20:	e0bffc17 	ldw	r2,-16(fp)
  802a24:	108041c3 	ldbu	r2,263(r2)
  802a28:	10803fcc 	andi	r2,r2,255
  802a2c:	1080201c 	xori	r2,r2,128
  802a30:	10bfe004 	addi	r2,r2,-128
  802a34:	1000021e 	bne	r2,zero,802a40 <logic+0x2644>
  802a38:	00800044 	movi	r2,1
  802a3c:	00000106 	br	802a44 <logic+0x2648>
  802a40:	0005883a 	mov	r2,zero
  802a44:	1007883a 	mov	r3,r2
  802a48:	e0bffc17 	ldw	r2,-16(fp)
  802a4c:	10c01d05 	stb	r3,116(r2)
  d->_g10 = d->_pg19;
  802a50:	e0bffc17 	ldw	r2,-16(fp)
  802a54:	10c05e43 	ldbu	r3,377(r2)
  802a58:	e0bffc17 	ldw	r2,-16(fp)
  802a5c:	10c01c45 	stb	r3,113(r2)
  d->_cg33 = d->VS || d->_Pacemaker_local_iVP;
  802a60:	e0bffc17 	ldw	r2,-16(fp)
  802a64:	10800a43 	ldbu	r2,41(r2)
  802a68:	10803fcc 	andi	r2,r2,255
  802a6c:	1080201c 	xori	r2,r2,128
  802a70:	10bfe004 	addi	r2,r2,-128
  802a74:	1000061e 	bne	r2,zero,802a90 <logic+0x2694>
  802a78:	e0bffc17 	ldw	r2,-16(fp)
  802a7c:	10801743 	ldbu	r2,93(r2)
  802a80:	10803fcc 	andi	r2,r2,255
  802a84:	1080201c 	xori	r2,r2,128
  802a88:	10bfe004 	addi	r2,r2,-128
  802a8c:	10000226 	beq	r2,zero,802a98 <logic+0x269c>
  802a90:	00800044 	movi	r2,1
  802a94:	00000106 	br	802a9c <logic+0x26a0>
  802a98:	0005883a 	mov	r2,zero
  802a9c:	1007883a 	mov	r3,r2
  802aa0:	e0bffc17 	ldw	r2,-16(fp)
  802aa4:	10c042c5 	stb	r3,267(r2)
  d->_g19 = d->_GO || (d->_g61 && !d->_cg65) || (d->_g10 && !d->_cg33);
  802aa8:	e0bffc17 	ldw	r2,-16(fp)
  802aac:	10803fc3 	ldbu	r2,255(r2)
  802ab0:	10803fcc 	andi	r2,r2,255
  802ab4:	1080201c 	xori	r2,r2,128
  802ab8:	10bfe004 	addi	r2,r2,-128
  802abc:	1000181e 	bne	r2,zero,802b20 <logic+0x2724>
  802ac0:	e0bffc17 	ldw	r2,-16(fp)
  802ac4:	10802543 	ldbu	r2,149(r2)
  802ac8:	10803fcc 	andi	r2,r2,255
  802acc:	1080201c 	xori	r2,r2,128
  802ad0:	10bfe004 	addi	r2,r2,-128
  802ad4:	10000626 	beq	r2,zero,802af0 <logic+0x26f4>
  802ad8:	e0bffc17 	ldw	r2,-16(fp)
  802adc:	10804283 	ldbu	r2,266(r2)
  802ae0:	10803fcc 	andi	r2,r2,255
  802ae4:	1080201c 	xori	r2,r2,128
  802ae8:	10bfe004 	addi	r2,r2,-128
  802aec:	10000c26 	beq	r2,zero,802b20 <logic+0x2724>
  802af0:	e0bffc17 	ldw	r2,-16(fp)
  802af4:	10801c43 	ldbu	r2,113(r2)
  802af8:	10803fcc 	andi	r2,r2,255
  802afc:	1080201c 	xori	r2,r2,128
  802b00:	10bfe004 	addi	r2,r2,-128
  802b04:	10000826 	beq	r2,zero,802b28 <logic+0x272c>
  802b08:	e0bffc17 	ldw	r2,-16(fp)
  802b0c:	108042c3 	ldbu	r2,267(r2)
  802b10:	10803fcc 	andi	r2,r2,255
  802b14:	1080201c 	xori	r2,r2,128
  802b18:	10bfe004 	addi	r2,r2,-128
  802b1c:	1000021e 	bne	r2,zero,802b28 <logic+0x272c>
  802b20:	00800044 	movi	r2,1
  802b24:	00000106 	br	802b2c <logic+0x2730>
  802b28:	0005883a 	mov	r2,zero
  802b2c:	1007883a 	mov	r3,r2
  802b30:	e0bffc17 	ldw	r2,-16(fp)
  802b34:	10c01e05 	stb	r3,120(r2)
  d->_g16 = d->_g10 && d->_cg33;
  802b38:	e0bffc17 	ldw	r2,-16(fp)
  802b3c:	10801c43 	ldbu	r2,113(r2)
  802b40:	10803fcc 	andi	r2,r2,255
  802b44:	1080201c 	xori	r2,r2,128
  802b48:	10bfe004 	addi	r2,r2,-128
  802b4c:	10000826 	beq	r2,zero,802b70 <logic+0x2774>
  802b50:	e0bffc17 	ldw	r2,-16(fp)
  802b54:	108042c3 	ldbu	r2,267(r2)
  802b58:	10803fcc 	andi	r2,r2,255
  802b5c:	1080201c 	xori	r2,r2,128
  802b60:	10bfe004 	addi	r2,r2,-128
  802b64:	10000226 	beq	r2,zero,802b70 <logic+0x2774>
  802b68:	00800044 	movi	r2,1
  802b6c:	00000106 	br	802b74 <logic+0x2778>
  802b70:	0005883a 	mov	r2,zero
  802b74:	1007883a 	mov	r3,r2
  802b78:	e0bffc17 	ldw	r2,-16(fp)
  802b7c:	10c01d85 	stb	r3,118(r2)
  if (d->_g16) {
  802b80:	e0bffc17 	ldw	r2,-16(fp)
  802b84:	10801d83 	ldbu	r2,118(r2)
  802b88:	10803fcc 	andi	r2,r2,255
  802b8c:	1080201c 	xori	r2,r2,128
  802b90:	10bfe004 	addi	r2,r2,-128
  802b94:	10000326 	beq	r2,zero,802ba4 <logic+0x27a8>
    d->_Pacemaker_local__region1_URI_x = 0;
  802b98:	e0bffc17 	ldw	r2,-16(fp)
  802b9c:	10000d15 	stw	zero,52(r2)
  802ba0:	10000e15 	stw	zero,56(r2)
  }
  d->_g8 = d->_g16 || d->_g62;
  802ba4:	e0bffc17 	ldw	r2,-16(fp)
  802ba8:	10801d83 	ldbu	r2,118(r2)
  802bac:	10803fcc 	andi	r2,r2,255
  802bb0:	1080201c 	xori	r2,r2,128
  802bb4:	10bfe004 	addi	r2,r2,-128
  802bb8:	1000061e 	bne	r2,zero,802bd4 <logic+0x27d8>
  802bbc:	e0bffc17 	ldw	r2,-16(fp)
  802bc0:	10802583 	ldbu	r2,150(r2)
  802bc4:	10803fcc 	andi	r2,r2,255
  802bc8:	1080201c 	xori	r2,r2,128
  802bcc:	10bfe004 	addi	r2,r2,-128
  802bd0:	10000226 	beq	r2,zero,802bdc <logic+0x27e0>
  802bd4:	00800044 	movi	r2,1
  802bd8:	00000106 	br	802be0 <logic+0x27e4>
  802bdc:	0005883a 	mov	r2,zero
  802be0:	1007883a 	mov	r3,r2
  802be4:	e0bffc17 	ldw	r2,-16(fp)
  802be8:	10c01c05 	stb	r3,112(r2)
  if (d->_g8) {
  802bec:	e0bffc17 	ldw	r2,-16(fp)
  802bf0:	10801c03 	ldbu	r2,112(r2)
  802bf4:	10803fcc 	andi	r2,r2,255
  802bf8:	1080201c 	xori	r2,r2,128
  802bfc:	10bfe004 	addi	r2,r2,-128
  802c00:	10000426 	beq	r2,zero,802c14 <logic+0x2818>
    d->_Pacemaker_local__Atrig2 = 0;
  802c04:	e0bffc17 	ldw	r2,-16(fp)
  802c08:	100018c5 	stb	zero,99(r2)
    d->_Pacemaker_local__Atrig3 = 0;
  802c0c:	e0bffc17 	ldw	r2,-16(fp)
  802c10:	10001905 	stb	zero,100(r2)
  }
  d->_cg36 = d->_Pacemaker_local__region1_URI_x < d->URI;
  802c14:	e0bffc17 	ldw	r2,-16(fp)
  802c18:	14000d17 	ldw	r16,52(r2)
  802c1c:	14400e17 	ldw	r17,56(r2)
  802c20:	e0bffc17 	ldw	r2,-16(fp)
  802c24:	10800517 	ldw	r2,20(r2)
  802c28:	1009883a 	mov	r4,r2
  802c2c:	08092a00 	call	8092a0 <__floatsidf>
  802c30:	1009883a 	mov	r4,r2
  802c34:	180b883a 	mov	r5,r3
  802c38:	04800044 	movi	r18,1
  802c3c:	200d883a 	mov	r6,r4
  802c40:	280f883a 	mov	r7,r5
  802c44:	8009883a 	mov	r4,r16
  802c48:	880b883a 	mov	r5,r17
  802c4c:	08081980 	call	808198 <__ledf2>
  802c50:	10000116 	blt	r2,zero,802c58 <logic+0x285c>
  802c54:	0025883a 	mov	r18,zero
  802c58:	9007883a 	mov	r3,r18
  802c5c:	e0bffc17 	ldw	r2,-16(fp)
  802c60:	10c04305 	stb	r3,268(r2)
  d->_g25 = d->_g8 && d->_cg36;
  802c64:	e0bffc17 	ldw	r2,-16(fp)
  802c68:	10801c03 	ldbu	r2,112(r2)
  802c6c:	10803fcc 	andi	r2,r2,255
  802c70:	1080201c 	xori	r2,r2,128
  802c74:	10bfe004 	addi	r2,r2,-128
  802c78:	10000826 	beq	r2,zero,802c9c <logic+0x28a0>
  802c7c:	e0bffc17 	ldw	r2,-16(fp)
  802c80:	10804303 	ldbu	r2,268(r2)
  802c84:	10803fcc 	andi	r2,r2,255
  802c88:	1080201c 	xori	r2,r2,128
  802c8c:	10bfe004 	addi	r2,r2,-128
  802c90:	10000226 	beq	r2,zero,802c9c <logic+0x28a0>
  802c94:	00800044 	movi	r2,1
  802c98:	00000106 	br	802ca0 <logic+0x28a4>
  802c9c:	0005883a 	mov	r2,zero
  802ca0:	1007883a 	mov	r3,r2
  802ca4:	e0bffc17 	ldw	r2,-16(fp)
  802ca8:	10c01f05 	stb	r3,124(r2)
  if (d->_g25) {
  802cac:	e0bffc17 	ldw	r2,-16(fp)
  802cb0:	10801f03 	ldbu	r2,124(r2)
  802cb4:	10803fcc 	andi	r2,r2,255
  802cb8:	1080201c 	xori	r2,r2,128
  802cbc:	10bfe004 	addi	r2,r2,-128
  802cc0:	10003426 	beq	r2,zero,802d94 <logic+0x2998>
    d->sleepT = (d->sleepT < (d->URI - d->_Pacemaker_local__region1_URI_x)) ? d->sleepT : (d->URI - d->_Pacemaker_local__region1_URI_x);
  802cc4:	e0bffc17 	ldw	r2,-16(fp)
  802cc8:	14000817 	ldw	r16,32(r2)
  802ccc:	14400917 	ldw	r17,36(r2)
  802cd0:	e0bffc17 	ldw	r2,-16(fp)
  802cd4:	10800517 	ldw	r2,20(r2)
  802cd8:	1009883a 	mov	r4,r2
  802cdc:	08092a00 	call	8092a0 <__floatsidf>
  802ce0:	1011883a 	mov	r8,r2
  802ce4:	1813883a 	mov	r9,r3
  802ce8:	e13ffc17 	ldw	r4,-16(fp)
  802cec:	20800d17 	ldw	r2,52(r4)
  802cf0:	20c00e17 	ldw	r3,56(r4)
  802cf4:	100d883a 	mov	r6,r2
  802cf8:	180f883a 	mov	r7,r3
  802cfc:	4009883a 	mov	r4,r8
  802d00:	480b883a 	mov	r5,r9
  802d04:	08089a40 	call	8089a4 <__subdf3>
  802d08:	1009883a 	mov	r4,r2
  802d0c:	180b883a 	mov	r5,r3
  802d10:	2005883a 	mov	r2,r4
  802d14:	2807883a 	mov	r3,r5
  802d18:	100d883a 	mov	r6,r2
  802d1c:	180f883a 	mov	r7,r3
  802d20:	8009883a 	mov	r4,r16
  802d24:	880b883a 	mov	r5,r17
  802d28:	08081980 	call	808198 <__ledf2>
  802d2c:	1000040e 	bge	r2,zero,802d40 <logic+0x2944>
  802d30:	e13ffc17 	ldw	r4,-16(fp)
  802d34:	20800817 	ldw	r2,32(r4)
  802d38:	20c00917 	ldw	r3,36(r4)
  802d3c:	00001206 	br	802d88 <logic+0x298c>
  802d40:	e0bffc17 	ldw	r2,-16(fp)
  802d44:	10800517 	ldw	r2,20(r2)
  802d48:	1009883a 	mov	r4,r2
  802d4c:	08092a00 	call	8092a0 <__floatsidf>
  802d50:	1011883a 	mov	r8,r2
  802d54:	1813883a 	mov	r9,r3
  802d58:	e13ffc17 	ldw	r4,-16(fp)
  802d5c:	20800d17 	ldw	r2,52(r4)
  802d60:	20c00e17 	ldw	r3,56(r4)
  802d64:	100d883a 	mov	r6,r2
  802d68:	180f883a 	mov	r7,r3
  802d6c:	4009883a 	mov	r4,r8
  802d70:	480b883a 	mov	r5,r9
  802d74:	08089a40 	call	8089a4 <__subdf3>
  802d78:	1009883a 	mov	r4,r2
  802d7c:	180b883a 	mov	r5,r3
  802d80:	2005883a 	mov	r2,r4
  802d84:	2807883a 	mov	r3,r5
  802d88:	e13ffc17 	ldw	r4,-16(fp)
  802d8c:	20800815 	stw	r2,32(r4)
  802d90:	20c00915 	stw	r3,36(r4)
  }
  d->_cg37 = d->_Pacemaker_local__Atrig2 || d->_Pacemaker_local__Atrig3;
  802d94:	e0bffc17 	ldw	r2,-16(fp)
  802d98:	108018c3 	ldbu	r2,99(r2)
  802d9c:	10803fcc 	andi	r2,r2,255
  802da0:	1080201c 	xori	r2,r2,128
  802da4:	10bfe004 	addi	r2,r2,-128
  802da8:	1000061e 	bne	r2,zero,802dc4 <logic+0x29c8>
  802dac:	e0bffc17 	ldw	r2,-16(fp)
  802db0:	10801903 	ldbu	r2,100(r2)
  802db4:	10803fcc 	andi	r2,r2,255
  802db8:	1080201c 	xori	r2,r2,128
  802dbc:	10bfe004 	addi	r2,r2,-128
  802dc0:	10000226 	beq	r2,zero,802dcc <logic+0x29d0>
  802dc4:	00800044 	movi	r2,1
  802dc8:	00000106 	br	802dd0 <logic+0x29d4>
  802dcc:	0005883a 	mov	r2,zero
  802dd0:	1007883a 	mov	r3,r2
  802dd4:	e0bffc17 	ldw	r2,-16(fp)
  802dd8:	10c04345 	stb	r3,269(r2)
  d->_g65 = (d->_g25 && !d->_cg37) || (d->_g39 && !d->_cg41);
  802ddc:	e0bffc17 	ldw	r2,-16(fp)
  802de0:	10801f03 	ldbu	r2,124(r2)
  802de4:	10803fcc 	andi	r2,r2,255
  802de8:	1080201c 	xori	r2,r2,128
  802dec:	10bfe004 	addi	r2,r2,-128
  802df0:	10000626 	beq	r2,zero,802e0c <logic+0x2a10>
  802df4:	e0bffc17 	ldw	r2,-16(fp)
  802df8:	10804343 	ldbu	r2,269(r2)
  802dfc:	10803fcc 	andi	r2,r2,255
  802e00:	1080201c 	xori	r2,r2,128
  802e04:	10bfe004 	addi	r2,r2,-128
  802e08:	10000c26 	beq	r2,zero,802e3c <logic+0x2a40>
  802e0c:	e0bffc17 	ldw	r2,-16(fp)
  802e10:	10802143 	ldbu	r2,133(r2)
  802e14:	10803fcc 	andi	r2,r2,255
  802e18:	1080201c 	xori	r2,r2,128
  802e1c:	10bfe004 	addi	r2,r2,-128
  802e20:	10000826 	beq	r2,zero,802e44 <logic+0x2a48>
  802e24:	e0bffc17 	ldw	r2,-16(fp)
  802e28:	10804383 	ldbu	r2,270(r2)
  802e2c:	10803fcc 	andi	r2,r2,255
  802e30:	1080201c 	xori	r2,r2,128
  802e34:	10bfe004 	addi	r2,r2,-128
  802e38:	1000021e 	bne	r2,zero,802e44 <logic+0x2a48>
  802e3c:	00800044 	movi	r2,1
  802e40:	00000106 	br	802e48 <logic+0x2a4c>
  802e44:	0005883a 	mov	r2,zero
  802e48:	1007883a 	mov	r3,r2
  802e4c:	e0bffc17 	ldw	r2,-16(fp)
  802e50:	10c02645 	stb	r3,153(r2)
  d->_g33 = d->_g8 && !d->_cg36;
  802e54:	e0bffc17 	ldw	r2,-16(fp)
  802e58:	10801c03 	ldbu	r2,112(r2)
  802e5c:	10803fcc 	andi	r2,r2,255
  802e60:	1080201c 	xori	r2,r2,128
  802e64:	10bfe004 	addi	r2,r2,-128
  802e68:	10000826 	beq	r2,zero,802e8c <logic+0x2a90>
  802e6c:	e0bffc17 	ldw	r2,-16(fp)
  802e70:	10804303 	ldbu	r2,268(r2)
  802e74:	10803fcc 	andi	r2,r2,255
  802e78:	1080201c 	xori	r2,r2,128
  802e7c:	10bfe004 	addi	r2,r2,-128
  802e80:	1000021e 	bne	r2,zero,802e8c <logic+0x2a90>
  802e84:	00800044 	movi	r2,1
  802e88:	00000106 	br	802e90 <logic+0x2a94>
  802e8c:	0005883a 	mov	r2,zero
  802e90:	1007883a 	mov	r3,r2
  802e94:	e0bffc17 	ldw	r2,-16(fp)
  802e98:	10c02045 	stb	r3,129(r2)
  d->_cg46 = d->_Pacemaker_local__Atrig2 || d->_Pacemaker_local__Atrig3;
  802e9c:	e0bffc17 	ldw	r2,-16(fp)
  802ea0:	108018c3 	ldbu	r2,99(r2)
  802ea4:	10803fcc 	andi	r2,r2,255
  802ea8:	1080201c 	xori	r2,r2,128
  802eac:	10bfe004 	addi	r2,r2,-128
  802eb0:	1000061e 	bne	r2,zero,802ecc <logic+0x2ad0>
  802eb4:	e0bffc17 	ldw	r2,-16(fp)
  802eb8:	10801903 	ldbu	r2,100(r2)
  802ebc:	10803fcc 	andi	r2,r2,255
  802ec0:	1080201c 	xori	r2,r2,128
  802ec4:	10bfe004 	addi	r2,r2,-128
  802ec8:	10000226 	beq	r2,zero,802ed4 <logic+0x2ad8>
  802ecc:	00800044 	movi	r2,1
  802ed0:	00000106 	br	802ed8 <logic+0x2adc>
  802ed4:	0005883a 	mov	r2,zero
  802ed8:	1007883a 	mov	r3,r2
  802edc:	e0bffc17 	ldw	r2,-16(fp)
  802ee0:	10c04445 	stb	r3,273(r2)
  d->_g66 = (d->_g40 && !d->_cg43) || (d->_g33 && !d->_cg46);
  802ee4:	e0bffc17 	ldw	r2,-16(fp)
  802ee8:	10802183 	ldbu	r2,134(r2)
  802eec:	10803fcc 	andi	r2,r2,255
  802ef0:	1080201c 	xori	r2,r2,128
  802ef4:	10bfe004 	addi	r2,r2,-128
  802ef8:	10000626 	beq	r2,zero,802f14 <logic+0x2b18>
  802efc:	e0bffc17 	ldw	r2,-16(fp)
  802f00:	10804403 	ldbu	r2,272(r2)
  802f04:	10803fcc 	andi	r2,r2,255
  802f08:	1080201c 	xori	r2,r2,128
  802f0c:	10bfe004 	addi	r2,r2,-128
  802f10:	10000c26 	beq	r2,zero,802f44 <logic+0x2b48>
  802f14:	e0bffc17 	ldw	r2,-16(fp)
  802f18:	10802043 	ldbu	r2,129(r2)
  802f1c:	10803fcc 	andi	r2,r2,255
  802f20:	1080201c 	xori	r2,r2,128
  802f24:	10bfe004 	addi	r2,r2,-128
  802f28:	10000826 	beq	r2,zero,802f4c <logic+0x2b50>
  802f2c:	e0bffc17 	ldw	r2,-16(fp)
  802f30:	10804443 	ldbu	r2,273(r2)
  802f34:	10803fcc 	andi	r2,r2,255
  802f38:	1080201c 	xori	r2,r2,128
  802f3c:	10bfe004 	addi	r2,r2,-128
  802f40:	1000021e 	bne	r2,zero,802f4c <logic+0x2b50>
  802f44:	00800044 	movi	r2,1
  802f48:	00000106 	br	802f50 <logic+0x2b54>
  802f4c:	0005883a 	mov	r2,zero
  802f50:	1007883a 	mov	r3,r2
  802f54:	e0bffc17 	ldw	r2,-16(fp)
  802f58:	10c02685 	stb	r3,154(r2)
  d->_cg47 = d->_Pacemaker_local__region1_URI_x < d->URI;
  802f5c:	e0bffc17 	ldw	r2,-16(fp)
  802f60:	14000d17 	ldw	r16,52(r2)
  802f64:	14400e17 	ldw	r17,56(r2)
  802f68:	e0bffc17 	ldw	r2,-16(fp)
  802f6c:	10800517 	ldw	r2,20(r2)
  802f70:	1009883a 	mov	r4,r2
  802f74:	08092a00 	call	8092a0 <__floatsidf>
  802f78:	1009883a 	mov	r4,r2
  802f7c:	180b883a 	mov	r5,r3
  802f80:	04800044 	movi	r18,1
  802f84:	200d883a 	mov	r6,r4
  802f88:	280f883a 	mov	r7,r5
  802f8c:	8009883a 	mov	r4,r16
  802f90:	880b883a 	mov	r5,r17
  802f94:	08081980 	call	808198 <__ledf2>
  802f98:	10000116 	blt	r2,zero,802fa0 <logic+0x2ba4>
  802f9c:	0025883a 	mov	r18,zero
  802fa0:	9007883a 	mov	r3,r18
  802fa4:	e0bffc17 	ldw	r2,-16(fp)
  802fa8:	10c04485 	stb	r3,274(r2)
  d->_g34 = d->_g8 && d->_cg47;
  802fac:	e0bffc17 	ldw	r2,-16(fp)
  802fb0:	10801c03 	ldbu	r2,112(r2)
  802fb4:	10803fcc 	andi	r2,r2,255
  802fb8:	1080201c 	xori	r2,r2,128
  802fbc:	10bfe004 	addi	r2,r2,-128
  802fc0:	10000826 	beq	r2,zero,802fe4 <logic+0x2be8>
  802fc4:	e0bffc17 	ldw	r2,-16(fp)
  802fc8:	10804483 	ldbu	r2,274(r2)
  802fcc:	10803fcc 	andi	r2,r2,255
  802fd0:	1080201c 	xori	r2,r2,128
  802fd4:	10bfe004 	addi	r2,r2,-128
  802fd8:	10000226 	beq	r2,zero,802fe4 <logic+0x2be8>
  802fdc:	00800044 	movi	r2,1
  802fe0:	00000106 	br	802fe8 <logic+0x2bec>
  802fe4:	0005883a 	mov	r2,zero
  802fe8:	1007883a 	mov	r3,r2
  802fec:	e0bffc17 	ldw	r2,-16(fp)
  802ff0:	10c02085 	stb	r3,130(r2)
  if (d->_g34) {
  802ff4:	e0bffc17 	ldw	r2,-16(fp)
  802ff8:	10802083 	ldbu	r2,130(r2)
  802ffc:	10803fcc 	andi	r2,r2,255
  803000:	1080201c 	xori	r2,r2,128
  803004:	10bfe004 	addi	r2,r2,-128
  803008:	10003426 	beq	r2,zero,8030dc <logic+0x2ce0>
    d->sleepT = (d->sleepT < (d->URI - d->_Pacemaker_local__region1_URI_x)) ? d->sleepT : (d->URI - d->_Pacemaker_local__region1_URI_x);
  80300c:	e0bffc17 	ldw	r2,-16(fp)
  803010:	14000817 	ldw	r16,32(r2)
  803014:	14400917 	ldw	r17,36(r2)
  803018:	e0bffc17 	ldw	r2,-16(fp)
  80301c:	10800517 	ldw	r2,20(r2)
  803020:	1009883a 	mov	r4,r2
  803024:	08092a00 	call	8092a0 <__floatsidf>
  803028:	1011883a 	mov	r8,r2
  80302c:	1813883a 	mov	r9,r3
  803030:	e13ffc17 	ldw	r4,-16(fp)
  803034:	20800d17 	ldw	r2,52(r4)
  803038:	20c00e17 	ldw	r3,56(r4)
  80303c:	100d883a 	mov	r6,r2
  803040:	180f883a 	mov	r7,r3
  803044:	4009883a 	mov	r4,r8
  803048:	480b883a 	mov	r5,r9
  80304c:	08089a40 	call	8089a4 <__subdf3>
  803050:	1009883a 	mov	r4,r2
  803054:	180b883a 	mov	r5,r3
  803058:	2005883a 	mov	r2,r4
  80305c:	2807883a 	mov	r3,r5
  803060:	100d883a 	mov	r6,r2
  803064:	180f883a 	mov	r7,r3
  803068:	8009883a 	mov	r4,r16
  80306c:	880b883a 	mov	r5,r17
  803070:	08081980 	call	808198 <__ledf2>
  803074:	1000040e 	bge	r2,zero,803088 <logic+0x2c8c>
  803078:	e13ffc17 	ldw	r4,-16(fp)
  80307c:	20800817 	ldw	r2,32(r4)
  803080:	20c00917 	ldw	r3,36(r4)
  803084:	00001206 	br	8030d0 <logic+0x2cd4>
  803088:	e0bffc17 	ldw	r2,-16(fp)
  80308c:	10800517 	ldw	r2,20(r2)
  803090:	1009883a 	mov	r4,r2
  803094:	08092a00 	call	8092a0 <__floatsidf>
  803098:	1011883a 	mov	r8,r2
  80309c:	1813883a 	mov	r9,r3
  8030a0:	e13ffc17 	ldw	r4,-16(fp)
  8030a4:	20800d17 	ldw	r2,52(r4)
  8030a8:	20c00e17 	ldw	r3,56(r4)
  8030ac:	100d883a 	mov	r6,r2
  8030b0:	180f883a 	mov	r7,r3
  8030b4:	4009883a 	mov	r4,r8
  8030b8:	480b883a 	mov	r5,r9
  8030bc:	08089a40 	call	8089a4 <__subdf3>
  8030c0:	1009883a 	mov	r4,r2
  8030c4:	180b883a 	mov	r5,r3
  8030c8:	2005883a 	mov	r2,r4
  8030cc:	2807883a 	mov	r3,r5
  8030d0:	e13ffc17 	ldw	r4,-16(fp)
  8030d4:	20800815 	stw	r2,32(r4)
  8030d8:	20c00915 	stw	r3,36(r4)
  }
  d->_cg48 = d->_Pacemaker_local__Atrig2 || d->_Pacemaker_local__Atrig3;
  8030dc:	e0bffc17 	ldw	r2,-16(fp)
  8030e0:	108018c3 	ldbu	r2,99(r2)
  8030e4:	10803fcc 	andi	r2,r2,255
  8030e8:	1080201c 	xori	r2,r2,128
  8030ec:	10bfe004 	addi	r2,r2,-128
  8030f0:	1000061e 	bne	r2,zero,80310c <logic+0x2d10>
  8030f4:	e0bffc17 	ldw	r2,-16(fp)
  8030f8:	10801903 	ldbu	r2,100(r2)
  8030fc:	10803fcc 	andi	r2,r2,255
  803100:	1080201c 	xori	r2,r2,128
  803104:	10bfe004 	addi	r2,r2,-128
  803108:	10000226 	beq	r2,zero,803114 <logic+0x2d18>
  80310c:	00800044 	movi	r2,1
  803110:	00000106 	br	803118 <logic+0x2d1c>
  803114:	0005883a 	mov	r2,zero
  803118:	1007883a 	mov	r3,r2
  80311c:	e0bffc17 	ldw	r2,-16(fp)
  803120:	10c044c5 	stb	r3,275(r2)
  d->_g37 = (d->_g34 && !d->_cg48) || (d->_g50 && !d->_cg52);
  803124:	e0bffc17 	ldw	r2,-16(fp)
  803128:	10802083 	ldbu	r2,130(r2)
  80312c:	10803fcc 	andi	r2,r2,255
  803130:	1080201c 	xori	r2,r2,128
  803134:	10bfe004 	addi	r2,r2,-128
  803138:	10000626 	beq	r2,zero,803154 <logic+0x2d58>
  80313c:	e0bffc17 	ldw	r2,-16(fp)
  803140:	108044c3 	ldbu	r2,275(r2)
  803144:	10803fcc 	andi	r2,r2,255
  803148:	1080201c 	xori	r2,r2,128
  80314c:	10bfe004 	addi	r2,r2,-128
  803150:	10000c26 	beq	r2,zero,803184 <logic+0x2d88>
  803154:	e0bffc17 	ldw	r2,-16(fp)
  803158:	10802343 	ldbu	r2,141(r2)
  80315c:	10803fcc 	andi	r2,r2,255
  803160:	1080201c 	xori	r2,r2,128
  803164:	10bfe004 	addi	r2,r2,-128
  803168:	10000826 	beq	r2,zero,80318c <logic+0x2d90>
  80316c:	e0bffc17 	ldw	r2,-16(fp)
  803170:	10804503 	ldbu	r2,276(r2)
  803174:	10803fcc 	andi	r2,r2,255
  803178:	1080201c 	xori	r2,r2,128
  80317c:	10bfe004 	addi	r2,r2,-128
  803180:	1000021e 	bne	r2,zero,80318c <logic+0x2d90>
  803184:	00800044 	movi	r2,1
  803188:	00000106 	br	803190 <logic+0x2d94>
  80318c:	0005883a 	mov	r2,zero
  803190:	1007883a 	mov	r3,r2
  803194:	e0bffc17 	ldw	r2,-16(fp)
  803198:	10c02105 	stb	r3,132(r2)
  d->_g41 = d->_g8 && !d->_cg47;
  80319c:	e0bffc17 	ldw	r2,-16(fp)
  8031a0:	10801c03 	ldbu	r2,112(r2)
  8031a4:	10803fcc 	andi	r2,r2,255
  8031a8:	1080201c 	xori	r2,r2,128
  8031ac:	10bfe004 	addi	r2,r2,-128
  8031b0:	10000826 	beq	r2,zero,8031d4 <logic+0x2dd8>
  8031b4:	e0bffc17 	ldw	r2,-16(fp)
  8031b8:	10804483 	ldbu	r2,274(r2)
  8031bc:	10803fcc 	andi	r2,r2,255
  8031c0:	1080201c 	xori	r2,r2,128
  8031c4:	10bfe004 	addi	r2,r2,-128
  8031c8:	1000021e 	bne	r2,zero,8031d4 <logic+0x2dd8>
  8031cc:	00800044 	movi	r2,1
  8031d0:	00000106 	br	8031d8 <logic+0x2ddc>
  8031d4:	0005883a 	mov	r2,zero
  8031d8:	1007883a 	mov	r3,r2
  8031dc:	e0bffc17 	ldw	r2,-16(fp)
  8031e0:	10c021c5 	stb	r3,135(r2)
  d->_cg57 = d->_Pacemaker_local__Atrig2 || d->_Pacemaker_local__Atrig3;
  8031e4:	e0bffc17 	ldw	r2,-16(fp)
  8031e8:	108018c3 	ldbu	r2,99(r2)
  8031ec:	10803fcc 	andi	r2,r2,255
  8031f0:	1080201c 	xori	r2,r2,128
  8031f4:	10bfe004 	addi	r2,r2,-128
  8031f8:	1000061e 	bne	r2,zero,803214 <logic+0x2e18>
  8031fc:	e0bffc17 	ldw	r2,-16(fp)
  803200:	10801903 	ldbu	r2,100(r2)
  803204:	10803fcc 	andi	r2,r2,255
  803208:	1080201c 	xori	r2,r2,128
  80320c:	10bfe004 	addi	r2,r2,-128
  803210:	10000226 	beq	r2,zero,80321c <logic+0x2e20>
  803214:	00800044 	movi	r2,1
  803218:	00000106 	br	803220 <logic+0x2e24>
  80321c:	0005883a 	mov	r2,zero
  803220:	1007883a 	mov	r3,r2
  803224:	e0bffc17 	ldw	r2,-16(fp)
  803228:	10c045c5 	stb	r3,279(r2)
  d->_g46 = (d->_g51 && !d->_cg54) || (d->_g41 && !d->_cg57);
  80322c:	e0bffc17 	ldw	r2,-16(fp)
  803230:	10802383 	ldbu	r2,142(r2)
  803234:	10803fcc 	andi	r2,r2,255
  803238:	1080201c 	xori	r2,r2,128
  80323c:	10bfe004 	addi	r2,r2,-128
  803240:	10000626 	beq	r2,zero,80325c <logic+0x2e60>
  803244:	e0bffc17 	ldw	r2,-16(fp)
  803248:	10804583 	ldbu	r2,278(r2)
  80324c:	10803fcc 	andi	r2,r2,255
  803250:	1080201c 	xori	r2,r2,128
  803254:	10bfe004 	addi	r2,r2,-128
  803258:	10000c26 	beq	r2,zero,80328c <logic+0x2e90>
  80325c:	e0bffc17 	ldw	r2,-16(fp)
  803260:	108021c3 	ldbu	r2,135(r2)
  803264:	10803fcc 	andi	r2,r2,255
  803268:	1080201c 	xori	r2,r2,128
  80326c:	10bfe004 	addi	r2,r2,-128
  803270:	10000826 	beq	r2,zero,803294 <logic+0x2e98>
  803274:	e0bffc17 	ldw	r2,-16(fp)
  803278:	108045c3 	ldbu	r2,279(r2)
  80327c:	10803fcc 	andi	r2,r2,255
  803280:	1080201c 	xori	r2,r2,128
  803284:	10bfe004 	addi	r2,r2,-128
  803288:	1000021e 	bne	r2,zero,803294 <logic+0x2e98>
  80328c:	00800044 	movi	r2,1
  803290:	00000106 	br	803298 <logic+0x2e9c>
  803294:	0005883a 	mov	r2,zero
  803298:	1007883a 	mov	r3,r2
  80329c:	e0bffc17 	ldw	r2,-16(fp)
  8032a0:	10c022c5 	stb	r3,139(r2)
  d->_g43 = d->_g8 || (d->_g63 && !d->_cg63);
  8032a4:	e0bffc17 	ldw	r2,-16(fp)
  8032a8:	10801c03 	ldbu	r2,112(r2)
  8032ac:	10803fcc 	andi	r2,r2,255
  8032b0:	1080201c 	xori	r2,r2,128
  8032b4:	10bfe004 	addi	r2,r2,-128
  8032b8:	10000c1e 	bne	r2,zero,8032ec <logic+0x2ef0>
  8032bc:	e0bffc17 	ldw	r2,-16(fp)
  8032c0:	108025c3 	ldbu	r2,151(r2)
  8032c4:	10803fcc 	andi	r2,r2,255
  8032c8:	1080201c 	xori	r2,r2,128
  8032cc:	10bfe004 	addi	r2,r2,-128
  8032d0:	10000826 	beq	r2,zero,8032f4 <logic+0x2ef8>
  8032d4:	e0bffc17 	ldw	r2,-16(fp)
  8032d8:	10804603 	ldbu	r2,280(r2)
  8032dc:	10803fcc 	andi	r2,r2,255
  8032e0:	1080201c 	xori	r2,r2,128
  8032e4:	10bfe004 	addi	r2,r2,-128
  8032e8:	1000021e 	bne	r2,zero,8032f4 <logic+0x2ef8>
  8032ec:	00800044 	movi	r2,1
  8032f0:	00000106 	br	8032f8 <logic+0x2efc>
  8032f4:	0005883a 	mov	r2,zero
  8032f8:	1007883a 	mov	r3,r2
  8032fc:	e0bffc17 	ldw	r2,-16(fp)
  803300:	10c02245 	stb	r3,137(r2)
  d->_g48 = d->_pg103;
  803304:	e0bffc17 	ldw	r2,-16(fp)
  803308:	10c05e83 	ldbu	r3,378(r2)
  80330c:	e0bffc17 	ldw	r2,-16(fp)
  803310:	10c02305 	stb	r3,140(r2)
  d->_g52 = d->_pg70;
  803314:	e0bffc17 	ldw	r2,-16(fp)
  803318:	10c05ec3 	ldbu	r3,379(r2)
  80331c:	e0bffc17 	ldw	r2,-16(fp)
  803320:	10c023c5 	stb	r3,143(r2)
  d->_g57 = !(d->_g48 || d->_g52);
  803324:	e0bffc17 	ldw	r2,-16(fp)
  803328:	10802303 	ldbu	r2,140(r2)
  80332c:	10803fcc 	andi	r2,r2,255
  803330:	1080201c 	xori	r2,r2,128
  803334:	10bfe004 	addi	r2,r2,-128
  803338:	1000081e 	bne	r2,zero,80335c <logic+0x2f60>
  80333c:	e0bffc17 	ldw	r2,-16(fp)
  803340:	108023c3 	ldbu	r2,143(r2)
  803344:	10803fcc 	andi	r2,r2,255
  803348:	1080201c 	xori	r2,r2,128
  80334c:	10bfe004 	addi	r2,r2,-128
  803350:	1000021e 	bne	r2,zero,80335c <logic+0x2f60>
  803354:	00800044 	movi	r2,1
  803358:	00000106 	br	803360 <logic+0x2f64>
  80335c:	0005883a 	mov	r2,zero
  803360:	1007883a 	mov	r3,r2
  803364:	e0bffc17 	ldw	r2,-16(fp)
  803368:	10c024c5 	stb	r3,147(r2)
  d->_g54 = d->_pg196;
  80336c:	e0bffc17 	ldw	r2,-16(fp)
  803370:	10c05f03 	ldbu	r3,380(r2)
  803374:	e0bffc17 	ldw	r2,-16(fp)
  803378:	10c02445 	stb	r3,145(r2)
  if (d->_g54) {
  80337c:	e0bffc17 	ldw	r2,-16(fp)
  803380:	10802443 	ldbu	r2,145(r2)
  803384:	10803fcc 	andi	r2,r2,255
  803388:	1080201c 	xori	r2,r2,128
  80338c:	10bfe004 	addi	r2,r2,-128
  803390:	10001226 	beq	r2,zero,8033dc <logic+0x2fe0>
    d->_Pacemaker_local__region2_PVARP_x += d->deltaT;
  803394:	e13ffc17 	ldw	r4,-16(fp)
  803398:	20800f17 	ldw	r2,60(r4)
  80339c:	20c01017 	ldw	r3,64(r4)
  8033a0:	e1bffc17 	ldw	r6,-16(fp)
  8033a4:	31000617 	ldw	r4,24(r6)
  8033a8:	31400717 	ldw	r5,28(r6)
  8033ac:	200d883a 	mov	r6,r4
  8033b0:	280f883a 	mov	r7,r5
  8033b4:	1009883a 	mov	r4,r2
  8033b8:	180b883a 	mov	r5,r3
  8033bc:	08078100 	call	807810 <__adddf3>
  8033c0:	1009883a 	mov	r4,r2
  8033c4:	180b883a 	mov	r5,r3
  8033c8:	2005883a 	mov	r2,r4
  8033cc:	2807883a 	mov	r3,r5
  8033d0:	e13ffc17 	ldw	r4,-16(fp)
  8033d4:	20800f15 	stw	r2,60(r4)
  8033d8:	20c01015 	stw	r3,64(r4)
  }
  d->_g63 = d->_pg83;
  8033dc:	e0bffc17 	ldw	r2,-16(fp)
  8033e0:	10c05f43 	ldbu	r3,381(r2)
  8033e4:	e0bffc17 	ldw	r2,-16(fp)
  8033e8:	10c025c5 	stb	r3,151(r2)
  d->_cg97 = !(d->_Pacemaker_local__region2_PVARP_x >= d->PVARP);
  8033ec:	e0bffc17 	ldw	r2,-16(fp)
  8033f0:	14000f17 	ldw	r16,60(r2)
  8033f4:	14401017 	ldw	r17,64(r2)
  8033f8:	e0bffc17 	ldw	r2,-16(fp)
  8033fc:	10800217 	ldw	r2,8(r2)
  803400:	1009883a 	mov	r4,r2
  803404:	08092a00 	call	8092a0 <__floatsidf>
  803408:	1009883a 	mov	r4,r2
  80340c:	180b883a 	mov	r5,r3
  803410:	04800044 	movi	r18,1
  803414:	200d883a 	mov	r6,r4
  803418:	280f883a 	mov	r7,r5
  80341c:	8009883a 	mov	r4,r16
  803420:	880b883a 	mov	r5,r17
  803424:	08080bc0 	call	8080bc <__gedf2>
  803428:	1000010e 	bge	r2,zero,803430 <logic+0x3034>
  80342c:	0025883a 	mov	r18,zero
  803430:	9080005c 	xori	r2,r18,1
  803434:	10803fcc 	andi	r2,r2,255
  803438:	1007883a 	mov	r3,r2
  80343c:	e0bffc17 	ldw	r2,-16(fp)
  803440:	10c04a45 	stb	r3,297(r2)
  d->_g35 = d->_g63 && d->_cg97;
  803444:	e0bffc17 	ldw	r2,-16(fp)
  803448:	108025c3 	ldbu	r2,151(r2)
  80344c:	10803fcc 	andi	r2,r2,255
  803450:	1080201c 	xori	r2,r2,128
  803454:	10bfe004 	addi	r2,r2,-128
  803458:	10000826 	beq	r2,zero,80347c <logic+0x3080>
  80345c:	e0bffc17 	ldw	r2,-16(fp)
  803460:	10804a43 	ldbu	r2,297(r2)
  803464:	10803fcc 	andi	r2,r2,255
  803468:	1080201c 	xori	r2,r2,128
  80346c:	10bfe004 	addi	r2,r2,-128
  803470:	10000226 	beq	r2,zero,80347c <logic+0x3080>
  803474:	00800044 	movi	r2,1
  803478:	00000106 	br	803480 <logic+0x3084>
  80347c:	0005883a 	mov	r2,zero
  803480:	1007883a 	mov	r3,r2
  803484:	e0bffc17 	ldw	r2,-16(fp)
  803488:	10c020c5 	stb	r3,131(r2)
  if (d->_g35) {
  80348c:	e0bffc17 	ldw	r2,-16(fp)
  803490:	108020c3 	ldbu	r2,131(r2)
  803494:	10803fcc 	andi	r2,r2,255
  803498:	1080201c 	xori	r2,r2,128
  80349c:	10bfe004 	addi	r2,r2,-128
  8034a0:	10000326 	beq	r2,zero,8034b0 <logic+0x30b4>
    d->_Pacemaker_local__Atrig4 = 1;
  8034a4:	e0bffc17 	ldw	r2,-16(fp)
  8034a8:	00c00044 	movi	r3,1
  8034ac:	10c01945 	stb	r3,101(r2)
  }
  d->_g100 = d->_g63 && !d->_cg97;
  8034b0:	e0bffc17 	ldw	r2,-16(fp)
  8034b4:	108025c3 	ldbu	r2,151(r2)
  8034b8:	10803fcc 	andi	r2,r2,255
  8034bc:	1080201c 	xori	r2,r2,128
  8034c0:	10bfe004 	addi	r2,r2,-128
  8034c4:	10000826 	beq	r2,zero,8034e8 <logic+0x30ec>
  8034c8:	e0bffc17 	ldw	r2,-16(fp)
  8034cc:	10804a43 	ldbu	r2,297(r2)
  8034d0:	10803fcc 	andi	r2,r2,255
  8034d4:	1080201c 	xori	r2,r2,128
  8034d8:	10bfe004 	addi	r2,r2,-128
  8034dc:	1000021e 	bne	r2,zero,8034e8 <logic+0x30ec>
  8034e0:	00800044 	movi	r2,1
  8034e4:	00000106 	br	8034ec <logic+0x30f0>
  8034e8:	0005883a 	mov	r2,zero
  8034ec:	1007883a 	mov	r3,r2
  8034f0:	e0bffc17 	ldw	r2,-16(fp)
  8034f4:	10c02c45 	stb	r3,177(r2)
  d->_cg100 = d->_Pacemaker_local__region2_PVARP_x >= d->PVARP;
  8034f8:	e0bffc17 	ldw	r2,-16(fp)
  8034fc:	14000f17 	ldw	r16,60(r2)
  803500:	14401017 	ldw	r17,64(r2)
  803504:	e0bffc17 	ldw	r2,-16(fp)
  803508:	10800217 	ldw	r2,8(r2)
  80350c:	1009883a 	mov	r4,r2
  803510:	08092a00 	call	8092a0 <__floatsidf>
  803514:	1009883a 	mov	r4,r2
  803518:	180b883a 	mov	r5,r3
  80351c:	04800044 	movi	r18,1
  803520:	200d883a 	mov	r6,r4
  803524:	280f883a 	mov	r7,r5
  803528:	8009883a 	mov	r4,r16
  80352c:	880b883a 	mov	r5,r17
  803530:	08080bc0 	call	8080bc <__gedf2>
  803534:	1000010e 	bge	r2,zero,80353c <logic+0x3140>
  803538:	0025883a 	mov	r18,zero
  80353c:	9007883a 	mov	r3,r18
  803540:	e0bffc17 	ldw	r2,-16(fp)
  803544:	10c04a05 	stb	r3,296(r2)
  d->_g101 = d->_g100 && d->_cg100;
  803548:	e0bffc17 	ldw	r2,-16(fp)
  80354c:	10802c43 	ldbu	r2,177(r2)
  803550:	10803fcc 	andi	r2,r2,255
  803554:	1080201c 	xori	r2,r2,128
  803558:	10bfe004 	addi	r2,r2,-128
  80355c:	10000826 	beq	r2,zero,803580 <logic+0x3184>
  803560:	e0bffc17 	ldw	r2,-16(fp)
  803564:	10804a03 	ldbu	r2,296(r2)
  803568:	10803fcc 	andi	r2,r2,255
  80356c:	1080201c 	xori	r2,r2,128
  803570:	10bfe004 	addi	r2,r2,-128
  803574:	10000226 	beq	r2,zero,803580 <logic+0x3184>
  803578:	00800044 	movi	r2,1
  80357c:	00000106 	br	803584 <logic+0x3188>
  803580:	0005883a 	mov	r2,zero
  803584:	1007883a 	mov	r3,r2
  803588:	e0bffc17 	ldw	r2,-16(fp)
  80358c:	10c02c85 	stb	r3,178(r2)
  if (d->_g101) {
  803590:	e0bffc17 	ldw	r2,-16(fp)
  803594:	10802c83 	ldbu	r2,178(r2)
  803598:	10803fcc 	andi	r2,r2,255
  80359c:	1080201c 	xori	r2,r2,128
  8035a0:	10bfe004 	addi	r2,r2,-128
  8035a4:	10000326 	beq	r2,zero,8035b4 <logic+0x31b8>
    d->_Pacemaker_local__Atrig5 = 1;
  8035a8:	e0bffc17 	ldw	r2,-16(fp)
  8035ac:	00c00044 	movi	r3,1
  8035b0:	10c01985 	stb	r3,102(r2)
  }
  d->_g82 = d->_g52 || d->_g48;
  8035b4:	e0bffc17 	ldw	r2,-16(fp)
  8035b8:	108023c3 	ldbu	r2,143(r2)
  8035bc:	10803fcc 	andi	r2,r2,255
  8035c0:	1080201c 	xori	r2,r2,128
  8035c4:	10bfe004 	addi	r2,r2,-128
  8035c8:	1000061e 	bne	r2,zero,8035e4 <logic+0x31e8>
  8035cc:	e0bffc17 	ldw	r2,-16(fp)
  8035d0:	10802303 	ldbu	r2,140(r2)
  8035d4:	10803fcc 	andi	r2,r2,255
  8035d8:	1080201c 	xori	r2,r2,128
  8035dc:	10bfe004 	addi	r2,r2,-128
  8035e0:	10000226 	beq	r2,zero,8035ec <logic+0x31f0>
  8035e4:	00800044 	movi	r2,1
  8035e8:	00000106 	br	8035f0 <logic+0x31f4>
  8035ec:	0005883a 	mov	r2,zero
  8035f0:	1007883a 	mov	r3,r2
  8035f4:	e0bffc17 	ldw	r2,-16(fp)
  8035f8:	10c02905 	stb	r3,164(r2)
  d->_cg77 = d->_Pacemaker_local__region2_PVARP_x < d->PVARP;
  8035fc:	e0bffc17 	ldw	r2,-16(fp)
  803600:	14000f17 	ldw	r16,60(r2)
  803604:	14401017 	ldw	r17,64(r2)
  803608:	e0bffc17 	ldw	r2,-16(fp)
  80360c:	10800217 	ldw	r2,8(r2)
  803610:	1009883a 	mov	r4,r2
  803614:	08092a00 	call	8092a0 <__floatsidf>
  803618:	1009883a 	mov	r4,r2
  80361c:	180b883a 	mov	r5,r3
  803620:	04800044 	movi	r18,1
  803624:	200d883a 	mov	r6,r4
  803628:	280f883a 	mov	r7,r5
  80362c:	8009883a 	mov	r4,r16
  803630:	880b883a 	mov	r5,r17
  803634:	08081980 	call	808198 <__ledf2>
  803638:	10000116 	blt	r2,zero,803640 <logic+0x3244>
  80363c:	0025883a 	mov	r18,zero
  803640:	9007883a 	mov	r3,r18
  803644:	e0bffc17 	ldw	r2,-16(fp)
  803648:	10c047c5 	stb	r3,287(r2)
  d->_g76 = d->_g82 && d->_cg77;
  80364c:	e0bffc17 	ldw	r2,-16(fp)
  803650:	10802903 	ldbu	r2,164(r2)
  803654:	10803fcc 	andi	r2,r2,255
  803658:	1080201c 	xori	r2,r2,128
  80365c:	10bfe004 	addi	r2,r2,-128
  803660:	10000826 	beq	r2,zero,803684 <logic+0x3288>
  803664:	e0bffc17 	ldw	r2,-16(fp)
  803668:	108047c3 	ldbu	r2,287(r2)
  80366c:	10803fcc 	andi	r2,r2,255
  803670:	1080201c 	xori	r2,r2,128
  803674:	10bfe004 	addi	r2,r2,-128
  803678:	10000226 	beq	r2,zero,803684 <logic+0x3288>
  80367c:	00800044 	movi	r2,1
  803680:	00000106 	br	803688 <logic+0x328c>
  803684:	0005883a 	mov	r2,zero
  803688:	1007883a 	mov	r3,r2
  80368c:	e0bffc17 	ldw	r2,-16(fp)
  803690:	10c027c5 	stb	r3,159(r2)
  if (d->_g76) {
  803694:	e0bffc17 	ldw	r2,-16(fp)
  803698:	108027c3 	ldbu	r2,159(r2)
  80369c:	10803fcc 	andi	r2,r2,255
  8036a0:	1080201c 	xori	r2,r2,128
  8036a4:	10bfe004 	addi	r2,r2,-128
  8036a8:	10003426 	beq	r2,zero,80377c <logic+0x3380>
    d->sleepT = (d->sleepT < (d->PVARP - d->_Pacemaker_local__region2_PVARP_x)) ? d->sleepT : (d->PVARP - d->_Pacemaker_local__region2_PVARP_x);
  8036ac:	e0bffc17 	ldw	r2,-16(fp)
  8036b0:	14000817 	ldw	r16,32(r2)
  8036b4:	14400917 	ldw	r17,36(r2)
  8036b8:	e0bffc17 	ldw	r2,-16(fp)
  8036bc:	10800217 	ldw	r2,8(r2)
  8036c0:	1009883a 	mov	r4,r2
  8036c4:	08092a00 	call	8092a0 <__floatsidf>
  8036c8:	1011883a 	mov	r8,r2
  8036cc:	1813883a 	mov	r9,r3
  8036d0:	e13ffc17 	ldw	r4,-16(fp)
  8036d4:	20800f17 	ldw	r2,60(r4)
  8036d8:	20c01017 	ldw	r3,64(r4)
  8036dc:	100d883a 	mov	r6,r2
  8036e0:	180f883a 	mov	r7,r3
  8036e4:	4009883a 	mov	r4,r8
  8036e8:	480b883a 	mov	r5,r9
  8036ec:	08089a40 	call	8089a4 <__subdf3>
  8036f0:	1009883a 	mov	r4,r2
  8036f4:	180b883a 	mov	r5,r3
  8036f8:	2005883a 	mov	r2,r4
  8036fc:	2807883a 	mov	r3,r5
  803700:	100d883a 	mov	r6,r2
  803704:	180f883a 	mov	r7,r3
  803708:	8009883a 	mov	r4,r16
  80370c:	880b883a 	mov	r5,r17
  803710:	08081980 	call	808198 <__ledf2>
  803714:	1000040e 	bge	r2,zero,803728 <logic+0x332c>
  803718:	e13ffc17 	ldw	r4,-16(fp)
  80371c:	20800817 	ldw	r2,32(r4)
  803720:	20c00917 	ldw	r3,36(r4)
  803724:	00001206 	br	803770 <logic+0x3374>
  803728:	e0bffc17 	ldw	r2,-16(fp)
  80372c:	10800217 	ldw	r2,8(r2)
  803730:	1009883a 	mov	r4,r2
  803734:	08092a00 	call	8092a0 <__floatsidf>
  803738:	1011883a 	mov	r8,r2
  80373c:	1813883a 	mov	r9,r3
  803740:	e13ffc17 	ldw	r4,-16(fp)
  803744:	20800f17 	ldw	r2,60(r4)
  803748:	20c01017 	ldw	r3,64(r4)
  80374c:	100d883a 	mov	r6,r2
  803750:	180f883a 	mov	r7,r3
  803754:	4009883a 	mov	r4,r8
  803758:	480b883a 	mov	r5,r9
  80375c:	08089a40 	call	8089a4 <__subdf3>
  803760:	1009883a 	mov	r4,r2
  803764:	180b883a 	mov	r5,r3
  803768:	2005883a 	mov	r2,r4
  80376c:	2807883a 	mov	r3,r5
  803770:	e13ffc17 	ldw	r4,-16(fp)
  803774:	20800815 	stw	r2,32(r4)
  803778:	20c00915 	stw	r3,36(r4)
  }
  d->_cg78 = d->_Pacemaker_local__Atrig4 || d->_Pacemaker_local__Atrig5;
  80377c:	e0bffc17 	ldw	r2,-16(fp)
  803780:	10801943 	ldbu	r2,101(r2)
  803784:	10803fcc 	andi	r2,r2,255
  803788:	1080201c 	xori	r2,r2,128
  80378c:	10bfe004 	addi	r2,r2,-128
  803790:	1000061e 	bne	r2,zero,8037ac <logic+0x33b0>
  803794:	e0bffc17 	ldw	r2,-16(fp)
  803798:	10801983 	ldbu	r2,102(r2)
  80379c:	10803fcc 	andi	r2,r2,255
  8037a0:	1080201c 	xori	r2,r2,128
  8037a4:	10bfe004 	addi	r2,r2,-128
  8037a8:	10000226 	beq	r2,zero,8037b4 <logic+0x33b8>
  8037ac:	00800044 	movi	r2,1
  8037b0:	00000106 	br	8037b8 <logic+0x33bc>
  8037b4:	0005883a 	mov	r2,zero
  8037b8:	1007883a 	mov	r3,r2
  8037bc:	e0bffc17 	ldw	r2,-16(fp)
  8037c0:	10c04785 	stb	r3,286(r2)
  d->_g77 = d->_g82 && !d->_cg77;
  8037c4:	e0bffc17 	ldw	r2,-16(fp)
  8037c8:	10802903 	ldbu	r2,164(r2)
  8037cc:	10803fcc 	andi	r2,r2,255
  8037d0:	1080201c 	xori	r2,r2,128
  8037d4:	10bfe004 	addi	r2,r2,-128
  8037d8:	10000826 	beq	r2,zero,8037fc <logic+0x3400>
  8037dc:	e0bffc17 	ldw	r2,-16(fp)
  8037e0:	108047c3 	ldbu	r2,287(r2)
  8037e4:	10803fcc 	andi	r2,r2,255
  8037e8:	1080201c 	xori	r2,r2,128
  8037ec:	10bfe004 	addi	r2,r2,-128
  8037f0:	1000021e 	bne	r2,zero,8037fc <logic+0x3400>
  8037f4:	00800044 	movi	r2,1
  8037f8:	00000106 	br	803800 <logic+0x3404>
  8037fc:	0005883a 	mov	r2,zero
  803800:	1007883a 	mov	r3,r2
  803804:	e0bffc17 	ldw	r2,-16(fp)
  803808:	10c02805 	stb	r3,160(r2)
  d->_cg80 = d->_Pacemaker_local__Atrig4 || d->_Pacemaker_local__Atrig5;
  80380c:	e0bffc17 	ldw	r2,-16(fp)
  803810:	10801943 	ldbu	r2,101(r2)
  803814:	10803fcc 	andi	r2,r2,255
  803818:	1080201c 	xori	r2,r2,128
  80381c:	10bfe004 	addi	r2,r2,-128
  803820:	1000061e 	bne	r2,zero,80383c <logic+0x3440>
  803824:	e0bffc17 	ldw	r2,-16(fp)
  803828:	10801983 	ldbu	r2,102(r2)
  80382c:	10803fcc 	andi	r2,r2,255
  803830:	1080201c 	xori	r2,r2,128
  803834:	10bfe004 	addi	r2,r2,-128
  803838:	10000226 	beq	r2,zero,803844 <logic+0x3448>
  80383c:	00800044 	movi	r2,1
  803840:	00000106 	br	803848 <logic+0x344c>
  803844:	0005883a 	mov	r2,zero
  803848:	1007883a 	mov	r3,r2
  80384c:	e0bffc17 	ldw	r2,-16(fp)
  803850:	10c04805 	stb	r3,288(r2)
  d->_g79 = (d->_g76 && d->_cg78) || (d->_g77 && d->_cg80);
  803854:	e0bffc17 	ldw	r2,-16(fp)
  803858:	108027c3 	ldbu	r2,159(r2)
  80385c:	10803fcc 	andi	r2,r2,255
  803860:	1080201c 	xori	r2,r2,128
  803864:	10bfe004 	addi	r2,r2,-128
  803868:	10000626 	beq	r2,zero,803884 <logic+0x3488>
  80386c:	e0bffc17 	ldw	r2,-16(fp)
  803870:	10804783 	ldbu	r2,286(r2)
  803874:	10803fcc 	andi	r2,r2,255
  803878:	1080201c 	xori	r2,r2,128
  80387c:	10bfe004 	addi	r2,r2,-128
  803880:	10000c1e 	bne	r2,zero,8038b4 <logic+0x34b8>
  803884:	e0bffc17 	ldw	r2,-16(fp)
  803888:	10802803 	ldbu	r2,160(r2)
  80388c:	10803fcc 	andi	r2,r2,255
  803890:	1080201c 	xori	r2,r2,128
  803894:	10bfe004 	addi	r2,r2,-128
  803898:	10000826 	beq	r2,zero,8038bc <logic+0x34c0>
  80389c:	e0bffc17 	ldw	r2,-16(fp)
  8038a0:	10804803 	ldbu	r2,288(r2)
  8038a4:	10803fcc 	andi	r2,r2,255
  8038a8:	1080201c 	xori	r2,r2,128
  8038ac:	10bfe004 	addi	r2,r2,-128
  8038b0:	10000226 	beq	r2,zero,8038bc <logic+0x34c0>
  8038b4:	00800044 	movi	r2,1
  8038b8:	00000106 	br	8038c0 <logic+0x34c4>
  8038bc:	0005883a 	mov	r2,zero
  8038c0:	1007883a 	mov	r3,r2
  8038c4:	e0bffc17 	ldw	r2,-16(fp)
  8038c8:	10c02885 	stb	r3,162(r2)
  d->_g93 = d->_pg80;
  8038cc:	e0bffc17 	ldw	r2,-16(fp)
  8038d0:	10c05f83 	ldbu	r3,382(r2)
  8038d4:	e0bffc17 	ldw	r2,-16(fp)
  8038d8:	10c02b05 	stb	r3,172(r2)
  d->_g87 = d->_pg78;
  8038dc:	e0bffc17 	ldw	r2,-16(fp)
  8038e0:	10c05fc3 	ldbu	r3,383(r2)
  8038e4:	e0bffc17 	ldw	r2,-16(fp)
  8038e8:	10c029c5 	stb	r3,167(r2)
  d->_g90_e2 = !(d->_g93 || d->_g87);
  8038ec:	e0bffc17 	ldw	r2,-16(fp)
  8038f0:	10802b03 	ldbu	r2,172(r2)
  8038f4:	10803fcc 	andi	r2,r2,255
  8038f8:	1080201c 	xori	r2,r2,128
  8038fc:	10bfe004 	addi	r2,r2,-128
  803900:	1000081e 	bne	r2,zero,803924 <logic+0x3528>
  803904:	e0bffc17 	ldw	r2,-16(fp)
  803908:	108029c3 	ldbu	r2,167(r2)
  80390c:	10803fcc 	andi	r2,r2,255
  803910:	1080201c 	xori	r2,r2,128
  803914:	10bfe004 	addi	r2,r2,-128
  803918:	1000021e 	bne	r2,zero,803924 <logic+0x3528>
  80391c:	00800044 	movi	r2,1
  803920:	00000106 	br	803928 <logic+0x352c>
  803924:	0005883a 	mov	r2,zero
  803928:	1007883a 	mov	r3,r2
  80392c:	e0bffc17 	ldw	r2,-16(fp)
  803930:	10c05705 	stb	r3,348(r2)
  d->_g93 = d->_g87 || d->_g93;
  803934:	e0bffc17 	ldw	r2,-16(fp)
  803938:	108029c3 	ldbu	r2,167(r2)
  80393c:	10803fcc 	andi	r2,r2,255
  803940:	1080201c 	xori	r2,r2,128
  803944:	10bfe004 	addi	r2,r2,-128
  803948:	1000061e 	bne	r2,zero,803964 <logic+0x3568>
  80394c:	e0bffc17 	ldw	r2,-16(fp)
  803950:	10802b03 	ldbu	r2,172(r2)
  803954:	10803fcc 	andi	r2,r2,255
  803958:	1080201c 	xori	r2,r2,128
  80395c:	10bfe004 	addi	r2,r2,-128
  803960:	10000226 	beq	r2,zero,80396c <logic+0x3570>
  803964:	00800044 	movi	r2,1
  803968:	00000106 	br	803970 <logic+0x3574>
  80396c:	0005883a 	mov	r2,zero
  803970:	1007883a 	mov	r3,r2
  803974:	e0bffc17 	ldw	r2,-16(fp)
  803978:	10c02b05 	stb	r3,172(r2)
  d->_cg88 = d->_Pacemaker_local__region2_PVARP_x < d->PVARP;
  80397c:	e0bffc17 	ldw	r2,-16(fp)
  803980:	14000f17 	ldw	r16,60(r2)
  803984:	14401017 	ldw	r17,64(r2)
  803988:	e0bffc17 	ldw	r2,-16(fp)
  80398c:	10800217 	ldw	r2,8(r2)
  803990:	1009883a 	mov	r4,r2
  803994:	08092a00 	call	8092a0 <__floatsidf>
  803998:	1009883a 	mov	r4,r2
  80399c:	180b883a 	mov	r5,r3
  8039a0:	04800044 	movi	r18,1
  8039a4:	200d883a 	mov	r6,r4
  8039a8:	280f883a 	mov	r7,r5
  8039ac:	8009883a 	mov	r4,r16
  8039b0:	880b883a 	mov	r5,r17
  8039b4:	08081980 	call	808198 <__ledf2>
  8039b8:	10000116 	blt	r2,zero,8039c0 <logic+0x35c4>
  8039bc:	0025883a 	mov	r18,zero
  8039c0:	9007883a 	mov	r3,r18
  8039c4:	e0bffc17 	ldw	r2,-16(fp)
  8039c8:	10c04945 	stb	r3,293(r2)
  d->_g87 = d->_g93 && d->_cg88;
  8039cc:	e0bffc17 	ldw	r2,-16(fp)
  8039d0:	10802b03 	ldbu	r2,172(r2)
  8039d4:	10803fcc 	andi	r2,r2,255
  8039d8:	1080201c 	xori	r2,r2,128
  8039dc:	10bfe004 	addi	r2,r2,-128
  8039e0:	10000826 	beq	r2,zero,803a04 <logic+0x3608>
  8039e4:	e0bffc17 	ldw	r2,-16(fp)
  8039e8:	10804943 	ldbu	r2,293(r2)
  8039ec:	10803fcc 	andi	r2,r2,255
  8039f0:	1080201c 	xori	r2,r2,128
  8039f4:	10bfe004 	addi	r2,r2,-128
  8039f8:	10000226 	beq	r2,zero,803a04 <logic+0x3608>
  8039fc:	00800044 	movi	r2,1
  803a00:	00000106 	br	803a08 <logic+0x360c>
  803a04:	0005883a 	mov	r2,zero
  803a08:	1007883a 	mov	r3,r2
  803a0c:	e0bffc17 	ldw	r2,-16(fp)
  803a10:	10c029c5 	stb	r3,167(r2)
  if (d->_g87) {
  803a14:	e0bffc17 	ldw	r2,-16(fp)
  803a18:	108029c3 	ldbu	r2,167(r2)
  803a1c:	10803fcc 	andi	r2,r2,255
  803a20:	1080201c 	xori	r2,r2,128
  803a24:	10bfe004 	addi	r2,r2,-128
  803a28:	10003426 	beq	r2,zero,803afc <logic+0x3700>
    d->sleepT = (d->sleepT < (d->PVARP - d->_Pacemaker_local__region2_PVARP_x)) ? d->sleepT : (d->PVARP - d->_Pacemaker_local__region2_PVARP_x);
  803a2c:	e0bffc17 	ldw	r2,-16(fp)
  803a30:	14000817 	ldw	r16,32(r2)
  803a34:	14400917 	ldw	r17,36(r2)
  803a38:	e0bffc17 	ldw	r2,-16(fp)
  803a3c:	10800217 	ldw	r2,8(r2)
  803a40:	1009883a 	mov	r4,r2
  803a44:	08092a00 	call	8092a0 <__floatsidf>
  803a48:	1011883a 	mov	r8,r2
  803a4c:	1813883a 	mov	r9,r3
  803a50:	e13ffc17 	ldw	r4,-16(fp)
  803a54:	20800f17 	ldw	r2,60(r4)
  803a58:	20c01017 	ldw	r3,64(r4)
  803a5c:	100d883a 	mov	r6,r2
  803a60:	180f883a 	mov	r7,r3
  803a64:	4009883a 	mov	r4,r8
  803a68:	480b883a 	mov	r5,r9
  803a6c:	08089a40 	call	8089a4 <__subdf3>
  803a70:	1009883a 	mov	r4,r2
  803a74:	180b883a 	mov	r5,r3
  803a78:	2005883a 	mov	r2,r4
  803a7c:	2807883a 	mov	r3,r5
  803a80:	100d883a 	mov	r6,r2
  803a84:	180f883a 	mov	r7,r3
  803a88:	8009883a 	mov	r4,r16
  803a8c:	880b883a 	mov	r5,r17
  803a90:	08081980 	call	808198 <__ledf2>
  803a94:	1000040e 	bge	r2,zero,803aa8 <logic+0x36ac>
  803a98:	e13ffc17 	ldw	r4,-16(fp)
  803a9c:	20800817 	ldw	r2,32(r4)
  803aa0:	20c00917 	ldw	r3,36(r4)
  803aa4:	00001206 	br	803af0 <logic+0x36f4>
  803aa8:	e0bffc17 	ldw	r2,-16(fp)
  803aac:	10800217 	ldw	r2,8(r2)
  803ab0:	1009883a 	mov	r4,r2
  803ab4:	08092a00 	call	8092a0 <__floatsidf>
  803ab8:	1011883a 	mov	r8,r2
  803abc:	1813883a 	mov	r9,r3
  803ac0:	e13ffc17 	ldw	r4,-16(fp)
  803ac4:	20800f17 	ldw	r2,60(r4)
  803ac8:	20c01017 	ldw	r3,64(r4)
  803acc:	100d883a 	mov	r6,r2
  803ad0:	180f883a 	mov	r7,r3
  803ad4:	4009883a 	mov	r4,r8
  803ad8:	480b883a 	mov	r5,r9
  803adc:	08089a40 	call	8089a4 <__subdf3>
  803ae0:	1009883a 	mov	r4,r2
  803ae4:	180b883a 	mov	r5,r3
  803ae8:	2005883a 	mov	r2,r4
  803aec:	2807883a 	mov	r3,r5
  803af0:	e13ffc17 	ldw	r4,-16(fp)
  803af4:	20800815 	stw	r2,32(r4)
  803af8:	20c00915 	stw	r3,36(r4)
  }
  d->_cg89 = d->_Pacemaker_local__Atrig4 || d->_Pacemaker_local__Atrig5;
  803afc:	e0bffc17 	ldw	r2,-16(fp)
  803b00:	10801943 	ldbu	r2,101(r2)
  803b04:	10803fcc 	andi	r2,r2,255
  803b08:	1080201c 	xori	r2,r2,128
  803b0c:	10bfe004 	addi	r2,r2,-128
  803b10:	1000061e 	bne	r2,zero,803b2c <logic+0x3730>
  803b14:	e0bffc17 	ldw	r2,-16(fp)
  803b18:	10801983 	ldbu	r2,102(r2)
  803b1c:	10803fcc 	andi	r2,r2,255
  803b20:	1080201c 	xori	r2,r2,128
  803b24:	10bfe004 	addi	r2,r2,-128
  803b28:	10000226 	beq	r2,zero,803b34 <logic+0x3738>
  803b2c:	00800044 	movi	r2,1
  803b30:	00000106 	br	803b38 <logic+0x373c>
  803b34:	0005883a 	mov	r2,zero
  803b38:	1007883a 	mov	r3,r2
  803b3c:	e0bffc17 	ldw	r2,-16(fp)
  803b40:	10c04905 	stb	r3,292(r2)
  d->_g88 = d->_g93 && !d->_cg88;
  803b44:	e0bffc17 	ldw	r2,-16(fp)
  803b48:	10802b03 	ldbu	r2,172(r2)
  803b4c:	10803fcc 	andi	r2,r2,255
  803b50:	1080201c 	xori	r2,r2,128
  803b54:	10bfe004 	addi	r2,r2,-128
  803b58:	10000826 	beq	r2,zero,803b7c <logic+0x3780>
  803b5c:	e0bffc17 	ldw	r2,-16(fp)
  803b60:	10804943 	ldbu	r2,293(r2)
  803b64:	10803fcc 	andi	r2,r2,255
  803b68:	1080201c 	xori	r2,r2,128
  803b6c:	10bfe004 	addi	r2,r2,-128
  803b70:	1000021e 	bne	r2,zero,803b7c <logic+0x3780>
  803b74:	00800044 	movi	r2,1
  803b78:	00000106 	br	803b80 <logic+0x3784>
  803b7c:	0005883a 	mov	r2,zero
  803b80:	1007883a 	mov	r3,r2
  803b84:	e0bffc17 	ldw	r2,-16(fp)
  803b88:	10c02a05 	stb	r3,168(r2)
  d->_cg91 = d->_Pacemaker_local__Atrig4 || d->_Pacemaker_local__Atrig5;
  803b8c:	e0bffc17 	ldw	r2,-16(fp)
  803b90:	10801943 	ldbu	r2,101(r2)
  803b94:	10803fcc 	andi	r2,r2,255
  803b98:	1080201c 	xori	r2,r2,128
  803b9c:	10bfe004 	addi	r2,r2,-128
  803ba0:	1000061e 	bne	r2,zero,803bbc <logic+0x37c0>
  803ba4:	e0bffc17 	ldw	r2,-16(fp)
  803ba8:	10801983 	ldbu	r2,102(r2)
  803bac:	10803fcc 	andi	r2,r2,255
  803bb0:	1080201c 	xori	r2,r2,128
  803bb4:	10bfe004 	addi	r2,r2,-128
  803bb8:	10000226 	beq	r2,zero,803bc4 <logic+0x37c8>
  803bbc:	00800044 	movi	r2,1
  803bc0:	00000106 	br	803bc8 <logic+0x37cc>
  803bc4:	0005883a 	mov	r2,zero
  803bc8:	1007883a 	mov	r3,r2
  803bcc:	e0bffc17 	ldw	r2,-16(fp)
  803bd0:	10c04985 	stb	r3,294(r2)
  d->_g90 = (d->_g87 && d->_cg89) || (d->_g88 && d->_cg91);
  803bd4:	e0bffc17 	ldw	r2,-16(fp)
  803bd8:	108029c3 	ldbu	r2,167(r2)
  803bdc:	10803fcc 	andi	r2,r2,255
  803be0:	1080201c 	xori	r2,r2,128
  803be4:	10bfe004 	addi	r2,r2,-128
  803be8:	10000626 	beq	r2,zero,803c04 <logic+0x3808>
  803bec:	e0bffc17 	ldw	r2,-16(fp)
  803bf0:	10804903 	ldbu	r2,292(r2)
  803bf4:	10803fcc 	andi	r2,r2,255
  803bf8:	1080201c 	xori	r2,r2,128
  803bfc:	10bfe004 	addi	r2,r2,-128
  803c00:	10000c1e 	bne	r2,zero,803c34 <logic+0x3838>
  803c04:	e0bffc17 	ldw	r2,-16(fp)
  803c08:	10802a03 	ldbu	r2,168(r2)
  803c0c:	10803fcc 	andi	r2,r2,255
  803c10:	1080201c 	xori	r2,r2,128
  803c14:	10bfe004 	addi	r2,r2,-128
  803c18:	10000826 	beq	r2,zero,803c3c <logic+0x3840>
  803c1c:	e0bffc17 	ldw	r2,-16(fp)
  803c20:	10804983 	ldbu	r2,294(r2)
  803c24:	10803fcc 	andi	r2,r2,255
  803c28:	1080201c 	xori	r2,r2,128
  803c2c:	10bfe004 	addi	r2,r2,-128
  803c30:	10000226 	beq	r2,zero,803c3c <logic+0x3840>
  803c34:	00800044 	movi	r2,1
  803c38:	00000106 	br	803c40 <logic+0x3844>
  803c3c:	0005883a 	mov	r2,zero
  803c40:	1007883a 	mov	r3,r2
  803c44:	e0bffc17 	ldw	r2,-16(fp)
  803c48:	10c02a85 	stb	r3,170(r2)
  d->_g97 = !d->_g63;
  803c4c:	e0bffc17 	ldw	r2,-16(fp)
  803c50:	108025c3 	ldbu	r2,151(r2)
  803c54:	10803fcc 	andi	r2,r2,255
  803c58:	1080201c 	xori	r2,r2,128
  803c5c:	10bfe004 	addi	r2,r2,-128
  803c60:	1005003a 	cmpeq	r2,r2,zero
  803c64:	1007883a 	mov	r3,r2
  803c68:	e0bffc17 	ldw	r2,-16(fp)
  803c6c:	10c02b85 	stb	r3,174(r2)
  d->_g101 = d->_g35 || d->_g101;
  803c70:	e0bffc17 	ldw	r2,-16(fp)
  803c74:	108020c3 	ldbu	r2,131(r2)
  803c78:	10803fcc 	andi	r2,r2,255
  803c7c:	1080201c 	xori	r2,r2,128
  803c80:	10bfe004 	addi	r2,r2,-128
  803c84:	1000061e 	bne	r2,zero,803ca0 <logic+0x38a4>
  803c88:	e0bffc17 	ldw	r2,-16(fp)
  803c8c:	10802c83 	ldbu	r2,178(r2)
  803c90:	10803fcc 	andi	r2,r2,255
  803c94:	1080201c 	xori	r2,r2,128
  803c98:	10bfe004 	addi	r2,r2,-128
  803c9c:	10000226 	beq	r2,zero,803ca8 <logic+0x38ac>
  803ca0:	00800044 	movi	r2,1
  803ca4:	00000106 	br	803cac <logic+0x38b0>
  803ca8:	0005883a 	mov	r2,zero
  803cac:	1007883a 	mov	r3,r2
  803cb0:	e0bffc17 	ldw	r2,-16(fp)
  803cb4:	10c02c85 	stb	r3,178(r2)
  d->_g98 = (d->_g57 || d->_g79) && (d->_g90_e2 || d->_g90) && (d->_g97 || d->_g101) && (d->_g79 || d->_g90 || d->_g101);
  803cb8:	e0bffc17 	ldw	r2,-16(fp)
  803cbc:	108024c3 	ldbu	r2,147(r2)
  803cc0:	10803fcc 	andi	r2,r2,255
  803cc4:	1080201c 	xori	r2,r2,128
  803cc8:	10bfe004 	addi	r2,r2,-128
  803ccc:	1000061e 	bne	r2,zero,803ce8 <logic+0x38ec>
  803cd0:	e0bffc17 	ldw	r2,-16(fp)
  803cd4:	10802883 	ldbu	r2,162(r2)
  803cd8:	10803fcc 	andi	r2,r2,255
  803cdc:	1080201c 	xori	r2,r2,128
  803ce0:	10bfe004 	addi	r2,r2,-128
  803ce4:	10002c26 	beq	r2,zero,803d98 <logic+0x399c>
  803ce8:	e0bffc17 	ldw	r2,-16(fp)
  803cec:	10805703 	ldbu	r2,348(r2)
  803cf0:	10803fcc 	andi	r2,r2,255
  803cf4:	1080201c 	xori	r2,r2,128
  803cf8:	10bfe004 	addi	r2,r2,-128
  803cfc:	1000061e 	bne	r2,zero,803d18 <logic+0x391c>
  803d00:	e0bffc17 	ldw	r2,-16(fp)
  803d04:	10802a83 	ldbu	r2,170(r2)
  803d08:	10803fcc 	andi	r2,r2,255
  803d0c:	1080201c 	xori	r2,r2,128
  803d10:	10bfe004 	addi	r2,r2,-128
  803d14:	10002026 	beq	r2,zero,803d98 <logic+0x399c>
  803d18:	e0bffc17 	ldw	r2,-16(fp)
  803d1c:	10802b83 	ldbu	r2,174(r2)
  803d20:	10803fcc 	andi	r2,r2,255
  803d24:	1080201c 	xori	r2,r2,128
  803d28:	10bfe004 	addi	r2,r2,-128
  803d2c:	1000061e 	bne	r2,zero,803d48 <logic+0x394c>
  803d30:	e0bffc17 	ldw	r2,-16(fp)
  803d34:	10802c83 	ldbu	r2,178(r2)
  803d38:	10803fcc 	andi	r2,r2,255
  803d3c:	1080201c 	xori	r2,r2,128
  803d40:	10bfe004 	addi	r2,r2,-128
  803d44:	10001426 	beq	r2,zero,803d98 <logic+0x399c>
  803d48:	e0bffc17 	ldw	r2,-16(fp)
  803d4c:	10802883 	ldbu	r2,162(r2)
  803d50:	10803fcc 	andi	r2,r2,255
  803d54:	1080201c 	xori	r2,r2,128
  803d58:	10bfe004 	addi	r2,r2,-128
  803d5c:	10000c1e 	bne	r2,zero,803d90 <logic+0x3994>
  803d60:	e0bffc17 	ldw	r2,-16(fp)
  803d64:	10802a83 	ldbu	r2,170(r2)
  803d68:	10803fcc 	andi	r2,r2,255
  803d6c:	1080201c 	xori	r2,r2,128
  803d70:	10bfe004 	addi	r2,r2,-128
  803d74:	1000061e 	bne	r2,zero,803d90 <logic+0x3994>
  803d78:	e0bffc17 	ldw	r2,-16(fp)
  803d7c:	10802c83 	ldbu	r2,178(r2)
  803d80:	10803fcc 	andi	r2,r2,255
  803d84:	1080201c 	xori	r2,r2,128
  803d88:	10bfe004 	addi	r2,r2,-128
  803d8c:	10000226 	beq	r2,zero,803d98 <logic+0x399c>
  803d90:	00800044 	movi	r2,1
  803d94:	00000106 	br	803d9c <logic+0x39a0>
  803d98:	0005883a 	mov	r2,zero
  803d9c:	1007883a 	mov	r3,r2
  803da0:	e0bffc17 	ldw	r2,-16(fp)
  803da4:	10c02bc5 	stb	r3,175(r2)
  d->_cg102 = d->_Pacemaker_local__Atrig4;
  803da8:	e0bffc17 	ldw	r2,-16(fp)
  803dac:	10c01943 	ldbu	r3,101(r2)
  803db0:	e0bffc17 	ldw	r2,-16(fp)
  803db4:	10c04685 	stb	r3,282(r2)
  d->_g90_e2 = d->_pg90;
  803db8:	e0bffc17 	ldw	r2,-16(fp)
  803dbc:	10c06003 	ldbu	r3,384(r2)
  803dc0:	e0bffc17 	ldw	r2,-16(fp)
  803dc4:	10c05705 	stb	r3,348(r2)
  d->_cg70 = d->VS || d->_Pacemaker_local_iVP;
  803dc8:	e0bffc17 	ldw	r2,-16(fp)
  803dcc:	10800a43 	ldbu	r2,41(r2)
  803dd0:	10803fcc 	andi	r2,r2,255
  803dd4:	1080201c 	xori	r2,r2,128
  803dd8:	10bfe004 	addi	r2,r2,-128
  803ddc:	1000061e 	bne	r2,zero,803df8 <logic+0x39fc>
  803de0:	e0bffc17 	ldw	r2,-16(fp)
  803de4:	10801743 	ldbu	r2,93(r2)
  803de8:	10803fcc 	andi	r2,r2,255
  803dec:	1080201c 	xori	r2,r2,128
  803df0:	10bfe004 	addi	r2,r2,-128
  803df4:	10000226 	beq	r2,zero,803e00 <logic+0x3a04>
  803df8:	00800044 	movi	r2,1
  803dfc:	00000106 	br	803e04 <logic+0x3a08>
  803e00:	0005883a 	mov	r2,zero
  803e04:	1007883a 	mov	r3,r2
  803e08:	e0bffc17 	ldw	r2,-16(fp)
  803e0c:	10c046c5 	stb	r3,283(r2)
  d->_g90 = d->_GO || (d->_g98 && !d->_cg102) || (d->_g90_e2 && !d->_cg70);
  803e10:	e0bffc17 	ldw	r2,-16(fp)
  803e14:	10803fc3 	ldbu	r2,255(r2)
  803e18:	10803fcc 	andi	r2,r2,255
  803e1c:	1080201c 	xori	r2,r2,128
  803e20:	10bfe004 	addi	r2,r2,-128
  803e24:	1000181e 	bne	r2,zero,803e88 <logic+0x3a8c>
  803e28:	e0bffc17 	ldw	r2,-16(fp)
  803e2c:	10802bc3 	ldbu	r2,175(r2)
  803e30:	10803fcc 	andi	r2,r2,255
  803e34:	1080201c 	xori	r2,r2,128
  803e38:	10bfe004 	addi	r2,r2,-128
  803e3c:	10000626 	beq	r2,zero,803e58 <logic+0x3a5c>
  803e40:	e0bffc17 	ldw	r2,-16(fp)
  803e44:	10804683 	ldbu	r2,282(r2)
  803e48:	10803fcc 	andi	r2,r2,255
  803e4c:	1080201c 	xori	r2,r2,128
  803e50:	10bfe004 	addi	r2,r2,-128
  803e54:	10000c26 	beq	r2,zero,803e88 <logic+0x3a8c>
  803e58:	e0bffc17 	ldw	r2,-16(fp)
  803e5c:	10805703 	ldbu	r2,348(r2)
  803e60:	10803fcc 	andi	r2,r2,255
  803e64:	1080201c 	xori	r2,r2,128
  803e68:	10bfe004 	addi	r2,r2,-128
  803e6c:	10000826 	beq	r2,zero,803e90 <logic+0x3a94>
  803e70:	e0bffc17 	ldw	r2,-16(fp)
  803e74:	108046c3 	ldbu	r2,283(r2)
  803e78:	10803fcc 	andi	r2,r2,255
  803e7c:	1080201c 	xori	r2,r2,128
  803e80:	10bfe004 	addi	r2,r2,-128
  803e84:	1000021e 	bne	r2,zero,803e90 <logic+0x3a94>
  803e88:	00800044 	movi	r2,1
  803e8c:	00000106 	br	803e94 <logic+0x3a98>
  803e90:	0005883a 	mov	r2,zero
  803e94:	1007883a 	mov	r3,r2
  803e98:	e0bffc17 	ldw	r2,-16(fp)
  803e9c:	10c02a85 	stb	r3,170(r2)
  d->_g79_e1 = d->_g90_e2 && d->_cg70;
  803ea0:	e0bffc17 	ldw	r2,-16(fp)
  803ea4:	10805703 	ldbu	r2,348(r2)
  803ea8:	10803fcc 	andi	r2,r2,255
  803eac:	1080201c 	xori	r2,r2,128
  803eb0:	10bfe004 	addi	r2,r2,-128
  803eb4:	10000826 	beq	r2,zero,803ed8 <logic+0x3adc>
  803eb8:	e0bffc17 	ldw	r2,-16(fp)
  803ebc:	108046c3 	ldbu	r2,283(r2)
  803ec0:	10803fcc 	andi	r2,r2,255
  803ec4:	1080201c 	xori	r2,r2,128
  803ec8:	10bfe004 	addi	r2,r2,-128
  803ecc:	10000226 	beq	r2,zero,803ed8 <logic+0x3adc>
  803ed0:	00800044 	movi	r2,1
  803ed4:	00000106 	br	803edc <logic+0x3ae0>
  803ed8:	0005883a 	mov	r2,zero
  803edc:	1007883a 	mov	r3,r2
  803ee0:	e0bffc17 	ldw	r2,-16(fp)
  803ee4:	10c056c5 	stb	r3,347(r2)
  if (d->_g79_e1) {
  803ee8:	e0bffc17 	ldw	r2,-16(fp)
  803eec:	108056c3 	ldbu	r2,347(r2)
  803ef0:	10803fcc 	andi	r2,r2,255
  803ef4:	1080201c 	xori	r2,r2,128
  803ef8:	10bfe004 	addi	r2,r2,-128
  803efc:	10000326 	beq	r2,zero,803f0c <logic+0x3b10>
    d->_Pacemaker_local__region2_PVARP_x = 0;
  803f00:	e0bffc17 	ldw	r2,-16(fp)
  803f04:	10000f15 	stw	zero,60(r2)
  803f08:	10001015 	stw	zero,64(r2)
  }
  d->_g99 = d->_g98 && d->_cg102;
  803f0c:	e0bffc17 	ldw	r2,-16(fp)
  803f10:	10802bc3 	ldbu	r2,175(r2)
  803f14:	10803fcc 	andi	r2,r2,255
  803f18:	1080201c 	xori	r2,r2,128
  803f1c:	10bfe004 	addi	r2,r2,-128
  803f20:	10000826 	beq	r2,zero,803f44 <logic+0x3b48>
  803f24:	e0bffc17 	ldw	r2,-16(fp)
  803f28:	10804683 	ldbu	r2,282(r2)
  803f2c:	10803fcc 	andi	r2,r2,255
  803f30:	1080201c 	xori	r2,r2,128
  803f34:	10bfe004 	addi	r2,r2,-128
  803f38:	10000226 	beq	r2,zero,803f44 <logic+0x3b48>
  803f3c:	00800044 	movi	r2,1
  803f40:	00000106 	br	803f48 <logic+0x3b4c>
  803f44:	0005883a 	mov	r2,zero
  803f48:	1007883a 	mov	r3,r2
  803f4c:	e0bffc17 	ldw	r2,-16(fp)
  803f50:	10c02c05 	stb	r3,176(r2)
  if (d->_g99) {
  803f54:	e0bffc17 	ldw	r2,-16(fp)
  803f58:	10802c03 	ldbu	r2,176(r2)
  803f5c:	10803fcc 	andi	r2,r2,255
  803f60:	1080201c 	xori	r2,r2,128
  803f64:	10bfe004 	addi	r2,r2,-128
  803f68:	10000626 	beq	r2,zero,803f84 <logic+0x3b88>
    d->_Pacemaker_local_PVARP_timeout |= 1;
  803f6c:	e0bffc17 	ldw	r2,-16(fp)
  803f70:	10801783 	ldbu	r2,94(r2)
  803f74:	10800054 	ori	r2,r2,1
  803f78:	1007883a 	mov	r3,r2
  803f7c:	e0bffc17 	ldw	r2,-16(fp)
  803f80:	10c01785 	stb	r3,94(r2)
  }
  d->_g99_e3 = d->_g79_e1 || d->_g99;
  803f84:	e0bffc17 	ldw	r2,-16(fp)
  803f88:	108056c3 	ldbu	r2,347(r2)
  803f8c:	10803fcc 	andi	r2,r2,255
  803f90:	1080201c 	xori	r2,r2,128
  803f94:	10bfe004 	addi	r2,r2,-128
  803f98:	1000061e 	bne	r2,zero,803fb4 <logic+0x3bb8>
  803f9c:	e0bffc17 	ldw	r2,-16(fp)
  803fa0:	10802c03 	ldbu	r2,176(r2)
  803fa4:	10803fcc 	andi	r2,r2,255
  803fa8:	1080201c 	xori	r2,r2,128
  803fac:	10bfe004 	addi	r2,r2,-128
  803fb0:	10000226 	beq	r2,zero,803fbc <logic+0x3bc0>
  803fb4:	00800044 	movi	r2,1
  803fb8:	00000106 	br	803fc0 <logic+0x3bc4>
  803fbc:	0005883a 	mov	r2,zero
  803fc0:	1007883a 	mov	r3,r2
  803fc4:	e0bffc17 	ldw	r2,-16(fp)
  803fc8:	10c05745 	stb	r3,349(r2)
  if (d->_g99_e3) {
  803fcc:	e0bffc17 	ldw	r2,-16(fp)
  803fd0:	10805743 	ldbu	r2,349(r2)
  803fd4:	10803fcc 	andi	r2,r2,255
  803fd8:	1080201c 	xori	r2,r2,128
  803fdc:	10bfe004 	addi	r2,r2,-128
  803fe0:	10000426 	beq	r2,zero,803ff4 <logic+0x3bf8>
    d->_Pacemaker_local__Atrig4 = 0;
  803fe4:	e0bffc17 	ldw	r2,-16(fp)
  803fe8:	10001945 	stb	zero,101(r2)
    d->_Pacemaker_local__Atrig5 = 0;
  803fec:	e0bffc17 	ldw	r2,-16(fp)
  803ff0:	10001985 	stb	zero,102(r2)
  }
  d->_cg73 = d->_Pacemaker_local__region2_PVARP_x < d->PVARP;
  803ff4:	e0bffc17 	ldw	r2,-16(fp)
  803ff8:	14000f17 	ldw	r16,60(r2)
  803ffc:	14401017 	ldw	r17,64(r2)
  804000:	e0bffc17 	ldw	r2,-16(fp)
  804004:	10800217 	ldw	r2,8(r2)
  804008:	1009883a 	mov	r4,r2
  80400c:	08092a00 	call	8092a0 <__floatsidf>
  804010:	1009883a 	mov	r4,r2
  804014:	180b883a 	mov	r5,r3
  804018:	04800044 	movi	r18,1
  80401c:	200d883a 	mov	r6,r4
  804020:	280f883a 	mov	r7,r5
  804024:	8009883a 	mov	r4,r16
  804028:	880b883a 	mov	r5,r17
  80402c:	08081980 	call	808198 <__ledf2>
  804030:	10000116 	blt	r2,zero,804038 <logic+0x3c3c>
  804034:	0025883a 	mov	r18,zero
  804038:	9007883a 	mov	r3,r18
  80403c:	e0bffc17 	ldw	r2,-16(fp)
  804040:	10c04705 	stb	r3,284(r2)
  d->_g79 = d->_g99_e3 && d->_cg73;
  804044:	e0bffc17 	ldw	r2,-16(fp)
  804048:	10805743 	ldbu	r2,349(r2)
  80404c:	10803fcc 	andi	r2,r2,255
  804050:	1080201c 	xori	r2,r2,128
  804054:	10bfe004 	addi	r2,r2,-128
  804058:	10000826 	beq	r2,zero,80407c <logic+0x3c80>
  80405c:	e0bffc17 	ldw	r2,-16(fp)
  804060:	10804703 	ldbu	r2,284(r2)
  804064:	10803fcc 	andi	r2,r2,255
  804068:	1080201c 	xori	r2,r2,128
  80406c:	10bfe004 	addi	r2,r2,-128
  804070:	10000226 	beq	r2,zero,80407c <logic+0x3c80>
  804074:	00800044 	movi	r2,1
  804078:	00000106 	br	804080 <logic+0x3c84>
  80407c:	0005883a 	mov	r2,zero
  804080:	1007883a 	mov	r3,r2
  804084:	e0bffc17 	ldw	r2,-16(fp)
  804088:	10c02885 	stb	r3,162(r2)
  if (d->_g79) {
  80408c:	e0bffc17 	ldw	r2,-16(fp)
  804090:	10802883 	ldbu	r2,162(r2)
  804094:	10803fcc 	andi	r2,r2,255
  804098:	1080201c 	xori	r2,r2,128
  80409c:	10bfe004 	addi	r2,r2,-128
  8040a0:	10003426 	beq	r2,zero,804174 <logic+0x3d78>
    d->sleepT = (d->sleepT < (d->PVARP - d->_Pacemaker_local__region2_PVARP_x)) ? d->sleepT : (d->PVARP - d->_Pacemaker_local__region2_PVARP_x);
  8040a4:	e0bffc17 	ldw	r2,-16(fp)
  8040a8:	14000817 	ldw	r16,32(r2)
  8040ac:	14400917 	ldw	r17,36(r2)
  8040b0:	e0bffc17 	ldw	r2,-16(fp)
  8040b4:	10800217 	ldw	r2,8(r2)
  8040b8:	1009883a 	mov	r4,r2
  8040bc:	08092a00 	call	8092a0 <__floatsidf>
  8040c0:	1011883a 	mov	r8,r2
  8040c4:	1813883a 	mov	r9,r3
  8040c8:	e13ffc17 	ldw	r4,-16(fp)
  8040cc:	20800f17 	ldw	r2,60(r4)
  8040d0:	20c01017 	ldw	r3,64(r4)
  8040d4:	100d883a 	mov	r6,r2
  8040d8:	180f883a 	mov	r7,r3
  8040dc:	4009883a 	mov	r4,r8
  8040e0:	480b883a 	mov	r5,r9
  8040e4:	08089a40 	call	8089a4 <__subdf3>
  8040e8:	1009883a 	mov	r4,r2
  8040ec:	180b883a 	mov	r5,r3
  8040f0:	2005883a 	mov	r2,r4
  8040f4:	2807883a 	mov	r3,r5
  8040f8:	100d883a 	mov	r6,r2
  8040fc:	180f883a 	mov	r7,r3
  804100:	8009883a 	mov	r4,r16
  804104:	880b883a 	mov	r5,r17
  804108:	08081980 	call	808198 <__ledf2>
  80410c:	1000040e 	bge	r2,zero,804120 <logic+0x3d24>
  804110:	e13ffc17 	ldw	r4,-16(fp)
  804114:	20800817 	ldw	r2,32(r4)
  804118:	20c00917 	ldw	r3,36(r4)
  80411c:	00001206 	br	804168 <logic+0x3d6c>
  804120:	e0bffc17 	ldw	r2,-16(fp)
  804124:	10800217 	ldw	r2,8(r2)
  804128:	1009883a 	mov	r4,r2
  80412c:	08092a00 	call	8092a0 <__floatsidf>
  804130:	1011883a 	mov	r8,r2
  804134:	1813883a 	mov	r9,r3
  804138:	e13ffc17 	ldw	r4,-16(fp)
  80413c:	20800f17 	ldw	r2,60(r4)
  804140:	20c01017 	ldw	r3,64(r4)
  804144:	100d883a 	mov	r6,r2
  804148:	180f883a 	mov	r7,r3
  80414c:	4009883a 	mov	r4,r8
  804150:	480b883a 	mov	r5,r9
  804154:	08089a40 	call	8089a4 <__subdf3>
  804158:	1009883a 	mov	r4,r2
  80415c:	180b883a 	mov	r5,r3
  804160:	2005883a 	mov	r2,r4
  804164:	2807883a 	mov	r3,r5
  804168:	e13ffc17 	ldw	r4,-16(fp)
  80416c:	20800815 	stw	r2,32(r4)
  804170:	20c00915 	stw	r3,36(r4)
  }
  d->_cg74 = d->_Pacemaker_local__Atrig4 || d->_Pacemaker_local__Atrig5;
  804174:	e0bffc17 	ldw	r2,-16(fp)
  804178:	10801943 	ldbu	r2,101(r2)
  80417c:	10803fcc 	andi	r2,r2,255
  804180:	1080201c 	xori	r2,r2,128
  804184:	10bfe004 	addi	r2,r2,-128
  804188:	1000061e 	bne	r2,zero,8041a4 <logic+0x3da8>
  80418c:	e0bffc17 	ldw	r2,-16(fp)
  804190:	10801983 	ldbu	r2,102(r2)
  804194:	10803fcc 	andi	r2,r2,255
  804198:	1080201c 	xori	r2,r2,128
  80419c:	10bfe004 	addi	r2,r2,-128
  8041a0:	10000226 	beq	r2,zero,8041ac <logic+0x3db0>
  8041a4:	00800044 	movi	r2,1
  8041a8:	00000106 	br	8041b0 <logic+0x3db4>
  8041ac:	0005883a 	mov	r2,zero
  8041b0:	1007883a 	mov	r3,r2
  8041b4:	e0bffc17 	ldw	r2,-16(fp)
  8041b8:	10c04745 	stb	r3,285(r2)
  d->_g70 = (d->_g79 && !d->_cg74) || (d->_g76 && !d->_cg78);
  8041bc:	e0bffc17 	ldw	r2,-16(fp)
  8041c0:	10802883 	ldbu	r2,162(r2)
  8041c4:	10803fcc 	andi	r2,r2,255
  8041c8:	1080201c 	xori	r2,r2,128
  8041cc:	10bfe004 	addi	r2,r2,-128
  8041d0:	10000626 	beq	r2,zero,8041ec <logic+0x3df0>
  8041d4:	e0bffc17 	ldw	r2,-16(fp)
  8041d8:	10804743 	ldbu	r2,285(r2)
  8041dc:	10803fcc 	andi	r2,r2,255
  8041e0:	1080201c 	xori	r2,r2,128
  8041e4:	10bfe004 	addi	r2,r2,-128
  8041e8:	10000c26 	beq	r2,zero,80421c <logic+0x3e20>
  8041ec:	e0bffc17 	ldw	r2,-16(fp)
  8041f0:	108027c3 	ldbu	r2,159(r2)
  8041f4:	10803fcc 	andi	r2,r2,255
  8041f8:	1080201c 	xori	r2,r2,128
  8041fc:	10bfe004 	addi	r2,r2,-128
  804200:	10000826 	beq	r2,zero,804224 <logic+0x3e28>
  804204:	e0bffc17 	ldw	r2,-16(fp)
  804208:	10804783 	ldbu	r2,286(r2)
  80420c:	10803fcc 	andi	r2,r2,255
  804210:	1080201c 	xori	r2,r2,128
  804214:	10bfe004 	addi	r2,r2,-128
  804218:	1000021e 	bne	r2,zero,804224 <logic+0x3e28>
  80421c:	00800044 	movi	r2,1
  804220:	00000106 	br	804228 <logic+0x3e2c>
  804224:	0005883a 	mov	r2,zero
  804228:	1007883a 	mov	r3,r2
  80422c:	e0bffc17 	ldw	r2,-16(fp)
  804230:	10c026c5 	stb	r3,155(r2)
  d->_g102 = d->_g99_e3 && !d->_cg73;
  804234:	e0bffc17 	ldw	r2,-16(fp)
  804238:	10805743 	ldbu	r2,349(r2)
  80423c:	10803fcc 	andi	r2,r2,255
  804240:	1080201c 	xori	r2,r2,128
  804244:	10bfe004 	addi	r2,r2,-128
  804248:	10000826 	beq	r2,zero,80426c <logic+0x3e70>
  80424c:	e0bffc17 	ldw	r2,-16(fp)
  804250:	10804703 	ldbu	r2,284(r2)
  804254:	10803fcc 	andi	r2,r2,255
  804258:	1080201c 	xori	r2,r2,128
  80425c:	10bfe004 	addi	r2,r2,-128
  804260:	1000021e 	bne	r2,zero,80426c <logic+0x3e70>
  804264:	00800044 	movi	r2,1
  804268:	00000106 	br	804270 <logic+0x3e74>
  80426c:	0005883a 	mov	r2,zero
  804270:	1007883a 	mov	r3,r2
  804274:	e0bffc17 	ldw	r2,-16(fp)
  804278:	10c02cc5 	stb	r3,179(r2)
  d->_cg83 = d->_Pacemaker_local__Atrig4 || d->_Pacemaker_local__Atrig5;
  80427c:	e0bffc17 	ldw	r2,-16(fp)
  804280:	10801943 	ldbu	r2,101(r2)
  804284:	10803fcc 	andi	r2,r2,255
  804288:	1080201c 	xori	r2,r2,128
  80428c:	10bfe004 	addi	r2,r2,-128
  804290:	1000061e 	bne	r2,zero,8042ac <logic+0x3eb0>
  804294:	e0bffc17 	ldw	r2,-16(fp)
  804298:	10801983 	ldbu	r2,102(r2)
  80429c:	10803fcc 	andi	r2,r2,255
  8042a0:	1080201c 	xori	r2,r2,128
  8042a4:	10bfe004 	addi	r2,r2,-128
  8042a8:	10000226 	beq	r2,zero,8042b4 <logic+0x3eb8>
  8042ac:	00800044 	movi	r2,1
  8042b0:	00000106 	br	8042b8 <logic+0x3ebc>
  8042b4:	0005883a 	mov	r2,zero
  8042b8:	1007883a 	mov	r3,r2
  8042bc:	e0bffc17 	ldw	r2,-16(fp)
  8042c0:	10c04845 	stb	r3,289(r2)
  d->_g103 = (d->_g77 && !d->_cg80) || (d->_g102 && !d->_cg83);
  8042c4:	e0bffc17 	ldw	r2,-16(fp)
  8042c8:	10802803 	ldbu	r2,160(r2)
  8042cc:	10803fcc 	andi	r2,r2,255
  8042d0:	1080201c 	xori	r2,r2,128
  8042d4:	10bfe004 	addi	r2,r2,-128
  8042d8:	10000626 	beq	r2,zero,8042f4 <logic+0x3ef8>
  8042dc:	e0bffc17 	ldw	r2,-16(fp)
  8042e0:	10804803 	ldbu	r2,288(r2)
  8042e4:	10803fcc 	andi	r2,r2,255
  8042e8:	1080201c 	xori	r2,r2,128
  8042ec:	10bfe004 	addi	r2,r2,-128
  8042f0:	10000c26 	beq	r2,zero,804324 <logic+0x3f28>
  8042f4:	e0bffc17 	ldw	r2,-16(fp)
  8042f8:	10802cc3 	ldbu	r2,179(r2)
  8042fc:	10803fcc 	andi	r2,r2,255
  804300:	1080201c 	xori	r2,r2,128
  804304:	10bfe004 	addi	r2,r2,-128
  804308:	10000826 	beq	r2,zero,80432c <logic+0x3f30>
  80430c:	e0bffc17 	ldw	r2,-16(fp)
  804310:	10804843 	ldbu	r2,289(r2)
  804314:	10803fcc 	andi	r2,r2,255
  804318:	1080201c 	xori	r2,r2,128
  80431c:	10bfe004 	addi	r2,r2,-128
  804320:	1000021e 	bne	r2,zero,80432c <logic+0x3f30>
  804324:	00800044 	movi	r2,1
  804328:	00000106 	br	804330 <logic+0x3f34>
  80432c:	0005883a 	mov	r2,zero
  804330:	1007883a 	mov	r3,r2
  804334:	e0bffc17 	ldw	r2,-16(fp)
  804338:	10c02d05 	stb	r3,180(r2)
  d->_cg84 = d->_Pacemaker_local__region2_PVARP_x < d->PVARP;
  80433c:	e0bffc17 	ldw	r2,-16(fp)
  804340:	14000f17 	ldw	r16,60(r2)
  804344:	14401017 	ldw	r17,64(r2)
  804348:	e0bffc17 	ldw	r2,-16(fp)
  80434c:	10800217 	ldw	r2,8(r2)
  804350:	1009883a 	mov	r4,r2
  804354:	08092a00 	call	8092a0 <__floatsidf>
  804358:	1009883a 	mov	r4,r2
  80435c:	180b883a 	mov	r5,r3
  804360:	04800044 	movi	r18,1
  804364:	200d883a 	mov	r6,r4
  804368:	280f883a 	mov	r7,r5
  80436c:	8009883a 	mov	r4,r16
  804370:	880b883a 	mov	r5,r17
  804374:	08081980 	call	808198 <__ledf2>
  804378:	10000116 	blt	r2,zero,804380 <logic+0x3f84>
  80437c:	0025883a 	mov	r18,zero
  804380:	9007883a 	mov	r3,r18
  804384:	e0bffc17 	ldw	r2,-16(fp)
  804388:	10c04885 	stb	r3,290(r2)
  d->_g71 = d->_g99_e3 && d->_cg84;
  80438c:	e0bffc17 	ldw	r2,-16(fp)
  804390:	10805743 	ldbu	r2,349(r2)
  804394:	10803fcc 	andi	r2,r2,255
  804398:	1080201c 	xori	r2,r2,128
  80439c:	10bfe004 	addi	r2,r2,-128
  8043a0:	10000826 	beq	r2,zero,8043c4 <logic+0x3fc8>
  8043a4:	e0bffc17 	ldw	r2,-16(fp)
  8043a8:	10804883 	ldbu	r2,290(r2)
  8043ac:	10803fcc 	andi	r2,r2,255
  8043b0:	1080201c 	xori	r2,r2,128
  8043b4:	10bfe004 	addi	r2,r2,-128
  8043b8:	10000226 	beq	r2,zero,8043c4 <logic+0x3fc8>
  8043bc:	00800044 	movi	r2,1
  8043c0:	00000106 	br	8043c8 <logic+0x3fcc>
  8043c4:	0005883a 	mov	r2,zero
  8043c8:	1007883a 	mov	r3,r2
  8043cc:	e0bffc17 	ldw	r2,-16(fp)
  8043d0:	10c02705 	stb	r3,156(r2)
  if (d->_g71) {
  8043d4:	e0bffc17 	ldw	r2,-16(fp)
  8043d8:	10802703 	ldbu	r2,156(r2)
  8043dc:	10803fcc 	andi	r2,r2,255
  8043e0:	1080201c 	xori	r2,r2,128
  8043e4:	10bfe004 	addi	r2,r2,-128
  8043e8:	10003426 	beq	r2,zero,8044bc <logic+0x40c0>
    d->sleepT = (d->sleepT < (d->PVARP - d->_Pacemaker_local__region2_PVARP_x)) ? d->sleepT : (d->PVARP - d->_Pacemaker_local__region2_PVARP_x);
  8043ec:	e0bffc17 	ldw	r2,-16(fp)
  8043f0:	14000817 	ldw	r16,32(r2)
  8043f4:	14400917 	ldw	r17,36(r2)
  8043f8:	e0bffc17 	ldw	r2,-16(fp)
  8043fc:	10800217 	ldw	r2,8(r2)
  804400:	1009883a 	mov	r4,r2
  804404:	08092a00 	call	8092a0 <__floatsidf>
  804408:	1011883a 	mov	r8,r2
  80440c:	1813883a 	mov	r9,r3
  804410:	e13ffc17 	ldw	r4,-16(fp)
  804414:	20800f17 	ldw	r2,60(r4)
  804418:	20c01017 	ldw	r3,64(r4)
  80441c:	100d883a 	mov	r6,r2
  804420:	180f883a 	mov	r7,r3
  804424:	4009883a 	mov	r4,r8
  804428:	480b883a 	mov	r5,r9
  80442c:	08089a40 	call	8089a4 <__subdf3>
  804430:	1009883a 	mov	r4,r2
  804434:	180b883a 	mov	r5,r3
  804438:	2005883a 	mov	r2,r4
  80443c:	2807883a 	mov	r3,r5
  804440:	100d883a 	mov	r6,r2
  804444:	180f883a 	mov	r7,r3
  804448:	8009883a 	mov	r4,r16
  80444c:	880b883a 	mov	r5,r17
  804450:	08081980 	call	808198 <__ledf2>
  804454:	1000040e 	bge	r2,zero,804468 <logic+0x406c>
  804458:	e13ffc17 	ldw	r4,-16(fp)
  80445c:	20800817 	ldw	r2,32(r4)
  804460:	20c00917 	ldw	r3,36(r4)
  804464:	00001206 	br	8044b0 <logic+0x40b4>
  804468:	e0bffc17 	ldw	r2,-16(fp)
  80446c:	10800217 	ldw	r2,8(r2)
  804470:	1009883a 	mov	r4,r2
  804474:	08092a00 	call	8092a0 <__floatsidf>
  804478:	1011883a 	mov	r8,r2
  80447c:	1813883a 	mov	r9,r3
  804480:	e13ffc17 	ldw	r4,-16(fp)
  804484:	20800f17 	ldw	r2,60(r4)
  804488:	20c01017 	ldw	r3,64(r4)
  80448c:	100d883a 	mov	r6,r2
  804490:	180f883a 	mov	r7,r3
  804494:	4009883a 	mov	r4,r8
  804498:	480b883a 	mov	r5,r9
  80449c:	08089a40 	call	8089a4 <__subdf3>
  8044a0:	1009883a 	mov	r4,r2
  8044a4:	180b883a 	mov	r5,r3
  8044a8:	2005883a 	mov	r2,r4
  8044ac:	2807883a 	mov	r3,r5
  8044b0:	e13ffc17 	ldw	r4,-16(fp)
  8044b4:	20800815 	stw	r2,32(r4)
  8044b8:	20c00915 	stw	r3,36(r4)
  }
  d->_cg85 = d->_Pacemaker_local__Atrig4 || d->_Pacemaker_local__Atrig5;
  8044bc:	e0bffc17 	ldw	r2,-16(fp)
  8044c0:	10801943 	ldbu	r2,101(r2)
  8044c4:	10803fcc 	andi	r2,r2,255
  8044c8:	1080201c 	xori	r2,r2,128
  8044cc:	10bfe004 	addi	r2,r2,-128
  8044d0:	1000061e 	bne	r2,zero,8044ec <logic+0x40f0>
  8044d4:	e0bffc17 	ldw	r2,-16(fp)
  8044d8:	10801983 	ldbu	r2,102(r2)
  8044dc:	10803fcc 	andi	r2,r2,255
  8044e0:	1080201c 	xori	r2,r2,128
  8044e4:	10bfe004 	addi	r2,r2,-128
  8044e8:	10000226 	beq	r2,zero,8044f4 <logic+0x40f8>
  8044ec:	00800044 	movi	r2,1
  8044f0:	00000106 	br	8044f8 <logic+0x40fc>
  8044f4:	0005883a 	mov	r2,zero
  8044f8:	1007883a 	mov	r3,r2
  8044fc:	e0bffc17 	ldw	r2,-16(fp)
  804500:	10c048c5 	stb	r3,291(r2)
  d->_g78 = (d->_g71 && !d->_cg85) || (d->_g87 && !d->_cg89);
  804504:	e0bffc17 	ldw	r2,-16(fp)
  804508:	10802703 	ldbu	r2,156(r2)
  80450c:	10803fcc 	andi	r2,r2,255
  804510:	1080201c 	xori	r2,r2,128
  804514:	10bfe004 	addi	r2,r2,-128
  804518:	10000626 	beq	r2,zero,804534 <logic+0x4138>
  80451c:	e0bffc17 	ldw	r2,-16(fp)
  804520:	108048c3 	ldbu	r2,291(r2)
  804524:	10803fcc 	andi	r2,r2,255
  804528:	1080201c 	xori	r2,r2,128
  80452c:	10bfe004 	addi	r2,r2,-128
  804530:	10000c26 	beq	r2,zero,804564 <logic+0x4168>
  804534:	e0bffc17 	ldw	r2,-16(fp)
  804538:	108029c3 	ldbu	r2,167(r2)
  80453c:	10803fcc 	andi	r2,r2,255
  804540:	1080201c 	xori	r2,r2,128
  804544:	10bfe004 	addi	r2,r2,-128
  804548:	10000826 	beq	r2,zero,80456c <logic+0x4170>
  80454c:	e0bffc17 	ldw	r2,-16(fp)
  804550:	10804903 	ldbu	r2,292(r2)
  804554:	10803fcc 	andi	r2,r2,255
  804558:	1080201c 	xori	r2,r2,128
  80455c:	10bfe004 	addi	r2,r2,-128
  804560:	1000021e 	bne	r2,zero,80456c <logic+0x4170>
  804564:	00800044 	movi	r2,1
  804568:	00000106 	br	804570 <logic+0x4174>
  80456c:	0005883a 	mov	r2,zero
  804570:	1007883a 	mov	r3,r2
  804574:	e0bffc17 	ldw	r2,-16(fp)
  804578:	10c02845 	stb	r3,161(r2)
  d->_g74 = d->_g99_e3 && !d->_cg84;
  80457c:	e0bffc17 	ldw	r2,-16(fp)
  804580:	10805743 	ldbu	r2,349(r2)
  804584:	10803fcc 	andi	r2,r2,255
  804588:	1080201c 	xori	r2,r2,128
  80458c:	10bfe004 	addi	r2,r2,-128
  804590:	10000826 	beq	r2,zero,8045b4 <logic+0x41b8>
  804594:	e0bffc17 	ldw	r2,-16(fp)
  804598:	10804883 	ldbu	r2,290(r2)
  80459c:	10803fcc 	andi	r2,r2,255
  8045a0:	1080201c 	xori	r2,r2,128
  8045a4:	10bfe004 	addi	r2,r2,-128
  8045a8:	1000021e 	bne	r2,zero,8045b4 <logic+0x41b8>
  8045ac:	00800044 	movi	r2,1
  8045b0:	00000106 	br	8045b8 <logic+0x41bc>
  8045b4:	0005883a 	mov	r2,zero
  8045b8:	1007883a 	mov	r3,r2
  8045bc:	e0bffc17 	ldw	r2,-16(fp)
  8045c0:	10c02785 	stb	r3,158(r2)
  d->_cg94 = d->_Pacemaker_local__Atrig4 || d->_Pacemaker_local__Atrig5;
  8045c4:	e0bffc17 	ldw	r2,-16(fp)
  8045c8:	10801943 	ldbu	r2,101(r2)
  8045cc:	10803fcc 	andi	r2,r2,255
  8045d0:	1080201c 	xori	r2,r2,128
  8045d4:	10bfe004 	addi	r2,r2,-128
  8045d8:	1000061e 	bne	r2,zero,8045f4 <logic+0x41f8>
  8045dc:	e0bffc17 	ldw	r2,-16(fp)
  8045e0:	10801983 	ldbu	r2,102(r2)
  8045e4:	10803fcc 	andi	r2,r2,255
  8045e8:	1080201c 	xori	r2,r2,128
  8045ec:	10bfe004 	addi	r2,r2,-128
  8045f0:	10000226 	beq	r2,zero,8045fc <logic+0x4200>
  8045f4:	00800044 	movi	r2,1
  8045f8:	00000106 	br	804600 <logic+0x4204>
  8045fc:	0005883a 	mov	r2,zero
  804600:	1007883a 	mov	r3,r2
  804604:	e0bffc17 	ldw	r2,-16(fp)
  804608:	10c049c5 	stb	r3,295(r2)
  d->_g80 = (d->_g88 && !d->_cg91) || (d->_g74 && !d->_cg94);
  80460c:	e0bffc17 	ldw	r2,-16(fp)
  804610:	10802a03 	ldbu	r2,168(r2)
  804614:	10803fcc 	andi	r2,r2,255
  804618:	1080201c 	xori	r2,r2,128
  80461c:	10bfe004 	addi	r2,r2,-128
  804620:	10000626 	beq	r2,zero,80463c <logic+0x4240>
  804624:	e0bffc17 	ldw	r2,-16(fp)
  804628:	10804983 	ldbu	r2,294(r2)
  80462c:	10803fcc 	andi	r2,r2,255
  804630:	1080201c 	xori	r2,r2,128
  804634:	10bfe004 	addi	r2,r2,-128
  804638:	10000c26 	beq	r2,zero,80466c <logic+0x4270>
  80463c:	e0bffc17 	ldw	r2,-16(fp)
  804640:	10802783 	ldbu	r2,158(r2)
  804644:	10803fcc 	andi	r2,r2,255
  804648:	1080201c 	xori	r2,r2,128
  80464c:	10bfe004 	addi	r2,r2,-128
  804650:	10000826 	beq	r2,zero,804674 <logic+0x4278>
  804654:	e0bffc17 	ldw	r2,-16(fp)
  804658:	108049c3 	ldbu	r2,295(r2)
  80465c:	10803fcc 	andi	r2,r2,255
  804660:	1080201c 	xori	r2,r2,128
  804664:	10bfe004 	addi	r2,r2,-128
  804668:	1000021e 	bne	r2,zero,804674 <logic+0x4278>
  80466c:	00800044 	movi	r2,1
  804670:	00000106 	br	804678 <logic+0x427c>
  804674:	0005883a 	mov	r2,zero
  804678:	1007883a 	mov	r3,r2
  80467c:	e0bffc17 	ldw	r2,-16(fp)
  804680:	10c028c5 	stb	r3,163(r2)
  d->_g83 = d->_g99_e3 || (d->_g100 && !d->_cg100);
  804684:	e0bffc17 	ldw	r2,-16(fp)
  804688:	10805743 	ldbu	r2,349(r2)
  80468c:	10803fcc 	andi	r2,r2,255
  804690:	1080201c 	xori	r2,r2,128
  804694:	10bfe004 	addi	r2,r2,-128
  804698:	10000c1e 	bne	r2,zero,8046cc <logic+0x42d0>
  80469c:	e0bffc17 	ldw	r2,-16(fp)
  8046a0:	10802c43 	ldbu	r2,177(r2)
  8046a4:	10803fcc 	andi	r2,r2,255
  8046a8:	1080201c 	xori	r2,r2,128
  8046ac:	10bfe004 	addi	r2,r2,-128
  8046b0:	10000826 	beq	r2,zero,8046d4 <logic+0x42d8>
  8046b4:	e0bffc17 	ldw	r2,-16(fp)
  8046b8:	10804a03 	ldbu	r2,296(r2)
  8046bc:	10803fcc 	andi	r2,r2,255
  8046c0:	1080201c 	xori	r2,r2,128
  8046c4:	10bfe004 	addi	r2,r2,-128
  8046c8:	1000021e 	bne	r2,zero,8046d4 <logic+0x42d8>
  8046cc:	00800044 	movi	r2,1
  8046d0:	00000106 	br	8046d8 <logic+0x42dc>
  8046d4:	0005883a 	mov	r2,zero
  8046d8:	1007883a 	mov	r3,r2
  8046dc:	e0bffc17 	ldw	r2,-16(fp)
  8046e0:	10c02945 	stb	r3,165(r2)
  d->_g89 = d->_pg108;
  8046e4:	e0bffc17 	ldw	r2,-16(fp)
  8046e8:	10c06043 	ldbu	r3,385(r2)
  8046ec:	e0bffc17 	ldw	r2,-16(fp)
  8046f0:	10c02a45 	stb	r3,169(r2)
  d->_g85 = d->_pg107;
  8046f4:	e0bffc17 	ldw	r2,-16(fp)
  8046f8:	10c06083 	ldbu	r3,386(r2)
  8046fc:	e0bffc17 	ldw	r2,-16(fp)
  804700:	10c02985 	stb	r3,166(r2)
  d->_g91 = !(d->_g89 || d->_g85);
  804704:	e0bffc17 	ldw	r2,-16(fp)
  804708:	10802a43 	ldbu	r2,169(r2)
  80470c:	10803fcc 	andi	r2,r2,255
  804710:	1080201c 	xori	r2,r2,128
  804714:	10bfe004 	addi	r2,r2,-128
  804718:	1000081e 	bne	r2,zero,80473c <logic+0x4340>
  80471c:	e0bffc17 	ldw	r2,-16(fp)
  804720:	10802983 	ldbu	r2,166(r2)
  804724:	10803fcc 	andi	r2,r2,255
  804728:	1080201c 	xori	r2,r2,128
  80472c:	10bfe004 	addi	r2,r2,-128
  804730:	1000021e 	bne	r2,zero,80473c <logic+0x4340>
  804734:	00800044 	movi	r2,1
  804738:	00000106 	br	804740 <logic+0x4344>
  80473c:	0005883a 	mov	r2,zero
  804740:	1007883a 	mov	r3,r2
  804744:	e0bffc17 	ldw	r2,-16(fp)
  804748:	10c02ac5 	stb	r3,171(r2)
  d->_g94 = d->_pg193;
  80474c:	e0bffc17 	ldw	r2,-16(fp)
  804750:	10c060c3 	ldbu	r3,387(r2)
  804754:	e0bffc17 	ldw	r2,-16(fp)
  804758:	10c02b45 	stb	r3,173(r2)
  if (d->_g94) {
  80475c:	e0bffc17 	ldw	r2,-16(fp)
  804760:	10802b43 	ldbu	r2,173(r2)
  804764:	10803fcc 	andi	r2,r2,255
  804768:	1080201c 	xori	r2,r2,128
  80476c:	10bfe004 	addi	r2,r2,-128
  804770:	10001226 	beq	r2,zero,8047bc <logic+0x43c0>
    d->_Pacemaker_local__region3_VRP_x += d->deltaT;
  804774:	e13ffc17 	ldw	r4,-16(fp)
  804778:	20801117 	ldw	r2,68(r4)
  80477c:	20c01217 	ldw	r3,72(r4)
  804780:	e1bffc17 	ldw	r6,-16(fp)
  804784:	31000617 	ldw	r4,24(r6)
  804788:	31400717 	ldw	r5,28(r6)
  80478c:	200d883a 	mov	r6,r4
  804790:	280f883a 	mov	r7,r5
  804794:	1009883a 	mov	r4,r2
  804798:	180b883a 	mov	r5,r3
  80479c:	08078100 	call	807810 <__adddf3>
  8047a0:	1009883a 	mov	r4,r2
  8047a4:	180b883a 	mov	r5,r3
  8047a8:	2005883a 	mov	r2,r4
  8047ac:	2807883a 	mov	r3,r5
  8047b0:	e13ffc17 	ldw	r4,-16(fp)
  8047b4:	20801115 	stw	r2,68(r4)
  8047b8:	20c01215 	stw	r3,72(r4)
  }
  d->_g100 = d->_pg117;
  8047bc:	e0bffc17 	ldw	r2,-16(fp)
  8047c0:	10c06103 	ldbu	r3,388(r2)
  8047c4:	e0bffc17 	ldw	r2,-16(fp)
  8047c8:	10c02c45 	stb	r3,177(r2)
  d->_cg134 = !(d->_Pacemaker_local__region3_VRP_x >= d->VRP);
  8047cc:	e0bffc17 	ldw	r2,-16(fp)
  8047d0:	14001117 	ldw	r16,68(r2)
  8047d4:	14401217 	ldw	r17,72(r2)
  8047d8:	e0bffc17 	ldw	r2,-16(fp)
  8047dc:	10800317 	ldw	r2,12(r2)
  8047e0:	1009883a 	mov	r4,r2
  8047e4:	08092a00 	call	8092a0 <__floatsidf>
  8047e8:	1009883a 	mov	r4,r2
  8047ec:	180b883a 	mov	r5,r3
  8047f0:	04800044 	movi	r18,1
  8047f4:	200d883a 	mov	r6,r4
  8047f8:	280f883a 	mov	r7,r5
  8047fc:	8009883a 	mov	r4,r16
  804800:	880b883a 	mov	r5,r17
  804804:	08080bc0 	call	8080bc <__gedf2>
  804808:	1000010e 	bge	r2,zero,804810 <logic+0x4414>
  80480c:	0025883a 	mov	r18,zero
  804810:	9080005c 	xori	r2,r18,1
  804814:	10803fcc 	andi	r2,r2,255
  804818:	1007883a 	mov	r3,r2
  80481c:	e0bffc17 	ldw	r2,-16(fp)
  804820:	10c04e45 	stb	r3,313(r2)
  d->_g72 = d->_g100 && d->_cg134;
  804824:	e0bffc17 	ldw	r2,-16(fp)
  804828:	10802c43 	ldbu	r2,177(r2)
  80482c:	10803fcc 	andi	r2,r2,255
  804830:	1080201c 	xori	r2,r2,128
  804834:	10bfe004 	addi	r2,r2,-128
  804838:	10000826 	beq	r2,zero,80485c <logic+0x4460>
  80483c:	e0bffc17 	ldw	r2,-16(fp)
  804840:	10804e43 	ldbu	r2,313(r2)
  804844:	10803fcc 	andi	r2,r2,255
  804848:	1080201c 	xori	r2,r2,128
  80484c:	10bfe004 	addi	r2,r2,-128
  804850:	10000226 	beq	r2,zero,80485c <logic+0x4460>
  804854:	00800044 	movi	r2,1
  804858:	00000106 	br	804860 <logic+0x4464>
  80485c:	0005883a 	mov	r2,zero
  804860:	1007883a 	mov	r3,r2
  804864:	e0bffc17 	ldw	r2,-16(fp)
  804868:	10c02745 	stb	r3,157(r2)
  if (d->_g72) {
  80486c:	e0bffc17 	ldw	r2,-16(fp)
  804870:	10802743 	ldbu	r2,157(r2)
  804874:	10803fcc 	andi	r2,r2,255
  804878:	1080201c 	xori	r2,r2,128
  80487c:	10bfe004 	addi	r2,r2,-128
  804880:	10000326 	beq	r2,zero,804890 <logic+0x4494>
    d->_Pacemaker_local__Atrig6 = 1;
  804884:	e0bffc17 	ldw	r2,-16(fp)
  804888:	00c00044 	movi	r3,1
  80488c:	10c019c5 	stb	r3,103(r2)
  }
  d->_g137 = d->_g100 && !d->_cg134;
  804890:	e0bffc17 	ldw	r2,-16(fp)
  804894:	10802c43 	ldbu	r2,177(r2)
  804898:	10803fcc 	andi	r2,r2,255
  80489c:	1080201c 	xori	r2,r2,128
  8048a0:	10bfe004 	addi	r2,r2,-128
  8048a4:	10000826 	beq	r2,zero,8048c8 <logic+0x44cc>
  8048a8:	e0bffc17 	ldw	r2,-16(fp)
  8048ac:	10804e43 	ldbu	r2,313(r2)
  8048b0:	10803fcc 	andi	r2,r2,255
  8048b4:	1080201c 	xori	r2,r2,128
  8048b8:	10bfe004 	addi	r2,r2,-128
  8048bc:	1000021e 	bne	r2,zero,8048c8 <logic+0x44cc>
  8048c0:	00800044 	movi	r2,1
  8048c4:	00000106 	br	8048cc <logic+0x44d0>
  8048c8:	0005883a 	mov	r2,zero
  8048cc:	1007883a 	mov	r3,r2
  8048d0:	e0bffc17 	ldw	r2,-16(fp)
  8048d4:	10c032c5 	stb	r3,203(r2)
  d->_cg137 = d->_Pacemaker_local__region3_VRP_x >= d->VRP;
  8048d8:	e0bffc17 	ldw	r2,-16(fp)
  8048dc:	14001117 	ldw	r16,68(r2)
  8048e0:	14401217 	ldw	r17,72(r2)
  8048e4:	e0bffc17 	ldw	r2,-16(fp)
  8048e8:	10800317 	ldw	r2,12(r2)
  8048ec:	1009883a 	mov	r4,r2
  8048f0:	08092a00 	call	8092a0 <__floatsidf>
  8048f4:	1009883a 	mov	r4,r2
  8048f8:	180b883a 	mov	r5,r3
  8048fc:	04800044 	movi	r18,1
  804900:	200d883a 	mov	r6,r4
  804904:	280f883a 	mov	r7,r5
  804908:	8009883a 	mov	r4,r16
  80490c:	880b883a 	mov	r5,r17
  804910:	08080bc0 	call	8080bc <__gedf2>
  804914:	1000010e 	bge	r2,zero,80491c <logic+0x4520>
  804918:	0025883a 	mov	r18,zero
  80491c:	9007883a 	mov	r3,r18
  804920:	e0bffc17 	ldw	r2,-16(fp)
  804924:	10c04e05 	stb	r3,312(r2)
  d->_g138 = d->_g137 && d->_cg137;
  804928:	e0bffc17 	ldw	r2,-16(fp)
  80492c:	108032c3 	ldbu	r2,203(r2)
  804930:	10803fcc 	andi	r2,r2,255
  804934:	1080201c 	xori	r2,r2,128
  804938:	10bfe004 	addi	r2,r2,-128
  80493c:	10000826 	beq	r2,zero,804960 <logic+0x4564>
  804940:	e0bffc17 	ldw	r2,-16(fp)
  804944:	10804e03 	ldbu	r2,312(r2)
  804948:	10803fcc 	andi	r2,r2,255
  80494c:	1080201c 	xori	r2,r2,128
  804950:	10bfe004 	addi	r2,r2,-128
  804954:	10000226 	beq	r2,zero,804960 <logic+0x4564>
  804958:	00800044 	movi	r2,1
  80495c:	00000106 	br	804964 <logic+0x4568>
  804960:	0005883a 	mov	r2,zero
  804964:	1007883a 	mov	r3,r2
  804968:	e0bffc17 	ldw	r2,-16(fp)
  80496c:	10c03305 	stb	r3,204(r2)
  if (d->_g138) {
  804970:	e0bffc17 	ldw	r2,-16(fp)
  804974:	10803303 	ldbu	r2,204(r2)
  804978:	10803fcc 	andi	r2,r2,255
  80497c:	1080201c 	xori	r2,r2,128
  804980:	10bfe004 	addi	r2,r2,-128
  804984:	10000326 	beq	r2,zero,804994 <logic+0x4598>
    d->_Pacemaker_local__Atrig7 = 1;
  804988:	e0bffc17 	ldw	r2,-16(fp)
  80498c:	00c00044 	movi	r3,1
  804990:	10c01a05 	stb	r3,104(r2)
  }
  d->_g113 = d->_g85 || d->_g89;
  804994:	e0bffc17 	ldw	r2,-16(fp)
  804998:	10802983 	ldbu	r2,166(r2)
  80499c:	10803fcc 	andi	r2,r2,255
  8049a0:	1080201c 	xori	r2,r2,128
  8049a4:	10bfe004 	addi	r2,r2,-128
  8049a8:	1000061e 	bne	r2,zero,8049c4 <logic+0x45c8>
  8049ac:	e0bffc17 	ldw	r2,-16(fp)
  8049b0:	10802a43 	ldbu	r2,169(r2)
  8049b4:	10803fcc 	andi	r2,r2,255
  8049b8:	1080201c 	xori	r2,r2,128
  8049bc:	10bfe004 	addi	r2,r2,-128
  8049c0:	10000226 	beq	r2,zero,8049cc <logic+0x45d0>
  8049c4:	00800044 	movi	r2,1
  8049c8:	00000106 	br	8049d0 <logic+0x45d4>
  8049cc:	0005883a 	mov	r2,zero
  8049d0:	1007883a 	mov	r3,r2
  8049d4:	e0bffc17 	ldw	r2,-16(fp)
  8049d8:	10c02e45 	stb	r3,185(r2)
  d->_cg114 = d->_Pacemaker_local__region3_VRP_x < d->VRP;
  8049dc:	e0bffc17 	ldw	r2,-16(fp)
  8049e0:	14001117 	ldw	r16,68(r2)
  8049e4:	14401217 	ldw	r17,72(r2)
  8049e8:	e0bffc17 	ldw	r2,-16(fp)
  8049ec:	10800317 	ldw	r2,12(r2)
  8049f0:	1009883a 	mov	r4,r2
  8049f4:	08092a00 	call	8092a0 <__floatsidf>
  8049f8:	1009883a 	mov	r4,r2
  8049fc:	180b883a 	mov	r5,r3
  804a00:	04800044 	movi	r18,1
  804a04:	200d883a 	mov	r6,r4
  804a08:	280f883a 	mov	r7,r5
  804a0c:	8009883a 	mov	r4,r16
  804a10:	880b883a 	mov	r5,r17
  804a14:	08081980 	call	808198 <__ledf2>
  804a18:	10000116 	blt	r2,zero,804a20 <logic+0x4624>
  804a1c:	0025883a 	mov	r18,zero
  804a20:	9007883a 	mov	r3,r18
  804a24:	e0bffc17 	ldw	r2,-16(fp)
  804a28:	10c04bc5 	stb	r3,303(r2)
  d->_g119 = d->_g113 && d->_cg114;
  804a2c:	e0bffc17 	ldw	r2,-16(fp)
  804a30:	10802e43 	ldbu	r2,185(r2)
  804a34:	10803fcc 	andi	r2,r2,255
  804a38:	1080201c 	xori	r2,r2,128
  804a3c:	10bfe004 	addi	r2,r2,-128
  804a40:	10000826 	beq	r2,zero,804a64 <logic+0x4668>
  804a44:	e0bffc17 	ldw	r2,-16(fp)
  804a48:	10804bc3 	ldbu	r2,303(r2)
  804a4c:	10803fcc 	andi	r2,r2,255
  804a50:	1080201c 	xori	r2,r2,128
  804a54:	10bfe004 	addi	r2,r2,-128
  804a58:	10000226 	beq	r2,zero,804a64 <logic+0x4668>
  804a5c:	00800044 	movi	r2,1
  804a60:	00000106 	br	804a68 <logic+0x466c>
  804a64:	0005883a 	mov	r2,zero
  804a68:	1007883a 	mov	r3,r2
  804a6c:	e0bffc17 	ldw	r2,-16(fp)
  804a70:	10c02f85 	stb	r3,190(r2)
  if (d->_g119) {
  804a74:	e0bffc17 	ldw	r2,-16(fp)
  804a78:	10802f83 	ldbu	r2,190(r2)
  804a7c:	10803fcc 	andi	r2,r2,255
  804a80:	1080201c 	xori	r2,r2,128
  804a84:	10bfe004 	addi	r2,r2,-128
  804a88:	10003426 	beq	r2,zero,804b5c <logic+0x4760>
    d->sleepT = (d->sleepT < (d->VRP - d->_Pacemaker_local__region3_VRP_x)) ? d->sleepT : (d->VRP - d->_Pacemaker_local__region3_VRP_x);
  804a8c:	e0bffc17 	ldw	r2,-16(fp)
  804a90:	14000817 	ldw	r16,32(r2)
  804a94:	14400917 	ldw	r17,36(r2)
  804a98:	e0bffc17 	ldw	r2,-16(fp)
  804a9c:	10800317 	ldw	r2,12(r2)
  804aa0:	1009883a 	mov	r4,r2
  804aa4:	08092a00 	call	8092a0 <__floatsidf>
  804aa8:	1011883a 	mov	r8,r2
  804aac:	1813883a 	mov	r9,r3
  804ab0:	e13ffc17 	ldw	r4,-16(fp)
  804ab4:	20801117 	ldw	r2,68(r4)
  804ab8:	20c01217 	ldw	r3,72(r4)
  804abc:	100d883a 	mov	r6,r2
  804ac0:	180f883a 	mov	r7,r3
  804ac4:	4009883a 	mov	r4,r8
  804ac8:	480b883a 	mov	r5,r9
  804acc:	08089a40 	call	8089a4 <__subdf3>
  804ad0:	1009883a 	mov	r4,r2
  804ad4:	180b883a 	mov	r5,r3
  804ad8:	2005883a 	mov	r2,r4
  804adc:	2807883a 	mov	r3,r5
  804ae0:	100d883a 	mov	r6,r2
  804ae4:	180f883a 	mov	r7,r3
  804ae8:	8009883a 	mov	r4,r16
  804aec:	880b883a 	mov	r5,r17
  804af0:	08081980 	call	808198 <__ledf2>
  804af4:	1000040e 	bge	r2,zero,804b08 <logic+0x470c>
  804af8:	e13ffc17 	ldw	r4,-16(fp)
  804afc:	20800817 	ldw	r2,32(r4)
  804b00:	20c00917 	ldw	r3,36(r4)
  804b04:	00001206 	br	804b50 <logic+0x4754>
  804b08:	e0bffc17 	ldw	r2,-16(fp)
  804b0c:	10800317 	ldw	r2,12(r2)
  804b10:	1009883a 	mov	r4,r2
  804b14:	08092a00 	call	8092a0 <__floatsidf>
  804b18:	1011883a 	mov	r8,r2
  804b1c:	1813883a 	mov	r9,r3
  804b20:	e13ffc17 	ldw	r4,-16(fp)
  804b24:	20801117 	ldw	r2,68(r4)
  804b28:	20c01217 	ldw	r3,72(r4)
  804b2c:	100d883a 	mov	r6,r2
  804b30:	180f883a 	mov	r7,r3
  804b34:	4009883a 	mov	r4,r8
  804b38:	480b883a 	mov	r5,r9
  804b3c:	08089a40 	call	8089a4 <__subdf3>
  804b40:	1009883a 	mov	r4,r2
  804b44:	180b883a 	mov	r5,r3
  804b48:	2005883a 	mov	r2,r4
  804b4c:	2807883a 	mov	r3,r5
  804b50:	e13ffc17 	ldw	r4,-16(fp)
  804b54:	20800815 	stw	r2,32(r4)
  804b58:	20c00915 	stw	r3,36(r4)
  }
  d->_cg115 = d->_Pacemaker_local__Atrig6 || d->_Pacemaker_local__Atrig7;
  804b5c:	e0bffc17 	ldw	r2,-16(fp)
  804b60:	108019c3 	ldbu	r2,103(r2)
  804b64:	10803fcc 	andi	r2,r2,255
  804b68:	1080201c 	xori	r2,r2,128
  804b6c:	10bfe004 	addi	r2,r2,-128
  804b70:	1000061e 	bne	r2,zero,804b8c <logic+0x4790>
  804b74:	e0bffc17 	ldw	r2,-16(fp)
  804b78:	10801a03 	ldbu	r2,104(r2)
  804b7c:	10803fcc 	andi	r2,r2,255
  804b80:	1080201c 	xori	r2,r2,128
  804b84:	10bfe004 	addi	r2,r2,-128
  804b88:	10000226 	beq	r2,zero,804b94 <logic+0x4798>
  804b8c:	00800044 	movi	r2,1
  804b90:	00000106 	br	804b98 <logic+0x479c>
  804b94:	0005883a 	mov	r2,zero
  804b98:	1007883a 	mov	r3,r2
  804b9c:	e0bffc17 	ldw	r2,-16(fp)
  804ba0:	10c04b85 	stb	r3,302(r2)
  d->_g114 = d->_g113 && !d->_cg114;
  804ba4:	e0bffc17 	ldw	r2,-16(fp)
  804ba8:	10802e43 	ldbu	r2,185(r2)
  804bac:	10803fcc 	andi	r2,r2,255
  804bb0:	1080201c 	xori	r2,r2,128
  804bb4:	10bfe004 	addi	r2,r2,-128
  804bb8:	10000826 	beq	r2,zero,804bdc <logic+0x47e0>
  804bbc:	e0bffc17 	ldw	r2,-16(fp)
  804bc0:	10804bc3 	ldbu	r2,303(r2)
  804bc4:	10803fcc 	andi	r2,r2,255
  804bc8:	1080201c 	xori	r2,r2,128
  804bcc:	10bfe004 	addi	r2,r2,-128
  804bd0:	1000021e 	bne	r2,zero,804bdc <logic+0x47e0>
  804bd4:	00800044 	movi	r2,1
  804bd8:	00000106 	br	804be0 <logic+0x47e4>
  804bdc:	0005883a 	mov	r2,zero
  804be0:	1007883a 	mov	r3,r2
  804be4:	e0bffc17 	ldw	r2,-16(fp)
  804be8:	10c02e85 	stb	r3,186(r2)
  d->_cg117 = d->_Pacemaker_local__Atrig6 || d->_Pacemaker_local__Atrig7;
  804bec:	e0bffc17 	ldw	r2,-16(fp)
  804bf0:	108019c3 	ldbu	r2,103(r2)
  804bf4:	10803fcc 	andi	r2,r2,255
  804bf8:	1080201c 	xori	r2,r2,128
  804bfc:	10bfe004 	addi	r2,r2,-128
  804c00:	1000061e 	bne	r2,zero,804c1c <logic+0x4820>
  804c04:	e0bffc17 	ldw	r2,-16(fp)
  804c08:	10801a03 	ldbu	r2,104(r2)
  804c0c:	10803fcc 	andi	r2,r2,255
  804c10:	1080201c 	xori	r2,r2,128
  804c14:	10bfe004 	addi	r2,r2,-128
  804c18:	10000226 	beq	r2,zero,804c24 <logic+0x4828>
  804c1c:	00800044 	movi	r2,1
  804c20:	00000106 	br	804c28 <logic+0x482c>
  804c24:	0005883a 	mov	r2,zero
  804c28:	1007883a 	mov	r3,r2
  804c2c:	e0bffc17 	ldw	r2,-16(fp)
  804c30:	10c04c05 	stb	r3,304(r2)
  d->_g116 = (d->_g119 && d->_cg115) || (d->_g114 && d->_cg117);
  804c34:	e0bffc17 	ldw	r2,-16(fp)
  804c38:	10802f83 	ldbu	r2,190(r2)
  804c3c:	10803fcc 	andi	r2,r2,255
  804c40:	1080201c 	xori	r2,r2,128
  804c44:	10bfe004 	addi	r2,r2,-128
  804c48:	10000626 	beq	r2,zero,804c64 <logic+0x4868>
  804c4c:	e0bffc17 	ldw	r2,-16(fp)
  804c50:	10804b83 	ldbu	r2,302(r2)
  804c54:	10803fcc 	andi	r2,r2,255
  804c58:	1080201c 	xori	r2,r2,128
  804c5c:	10bfe004 	addi	r2,r2,-128
  804c60:	10000c1e 	bne	r2,zero,804c94 <logic+0x4898>
  804c64:	e0bffc17 	ldw	r2,-16(fp)
  804c68:	10802e83 	ldbu	r2,186(r2)
  804c6c:	10803fcc 	andi	r2,r2,255
  804c70:	1080201c 	xori	r2,r2,128
  804c74:	10bfe004 	addi	r2,r2,-128
  804c78:	10000826 	beq	r2,zero,804c9c <logic+0x48a0>
  804c7c:	e0bffc17 	ldw	r2,-16(fp)
  804c80:	10804c03 	ldbu	r2,304(r2)
  804c84:	10803fcc 	andi	r2,r2,255
  804c88:	1080201c 	xori	r2,r2,128
  804c8c:	10bfe004 	addi	r2,r2,-128
  804c90:	10000226 	beq	r2,zero,804c9c <logic+0x48a0>
  804c94:	00800044 	movi	r2,1
  804c98:	00000106 	br	804ca0 <logic+0x48a4>
  804c9c:	0005883a 	mov	r2,zero
  804ca0:	1007883a 	mov	r3,r2
  804ca4:	e0bffc17 	ldw	r2,-16(fp)
  804ca8:	10c02f05 	stb	r3,188(r2)
  d->_g130 = d->_pg120;
  804cac:	e0bffc17 	ldw	r2,-16(fp)
  804cb0:	10c06143 	ldbu	r3,389(r2)
  804cb4:	e0bffc17 	ldw	r2,-16(fp)
  804cb8:	10c03185 	stb	r3,198(r2)
  d->_g124 = d->_pg111;
  804cbc:	e0bffc17 	ldw	r2,-16(fp)
  804cc0:	10c06183 	ldbu	r3,390(r2)
  804cc4:	e0bffc17 	ldw	r2,-16(fp)
  804cc8:	10c03045 	stb	r3,193(r2)
  d->_g127_e2 = !(d->_g130 || d->_g124);
  804ccc:	e0bffc17 	ldw	r2,-16(fp)
  804cd0:	10803183 	ldbu	r2,198(r2)
  804cd4:	10803fcc 	andi	r2,r2,255
  804cd8:	1080201c 	xori	r2,r2,128
  804cdc:	10bfe004 	addi	r2,r2,-128
  804ce0:	1000081e 	bne	r2,zero,804d04 <logic+0x4908>
  804ce4:	e0bffc17 	ldw	r2,-16(fp)
  804ce8:	10803043 	ldbu	r2,193(r2)
  804cec:	10803fcc 	andi	r2,r2,255
  804cf0:	1080201c 	xori	r2,r2,128
  804cf4:	10bfe004 	addi	r2,r2,-128
  804cf8:	1000021e 	bne	r2,zero,804d04 <logic+0x4908>
  804cfc:	00800044 	movi	r2,1
  804d00:	00000106 	br	804d08 <logic+0x490c>
  804d04:	0005883a 	mov	r2,zero
  804d08:	1007883a 	mov	r3,r2
  804d0c:	e0bffc17 	ldw	r2,-16(fp)
  804d10:	10c057c5 	stb	r3,351(r2)
  d->_g130 = d->_g124 || d->_g130;
  804d14:	e0bffc17 	ldw	r2,-16(fp)
  804d18:	10803043 	ldbu	r2,193(r2)
  804d1c:	10803fcc 	andi	r2,r2,255
  804d20:	1080201c 	xori	r2,r2,128
  804d24:	10bfe004 	addi	r2,r2,-128
  804d28:	1000061e 	bne	r2,zero,804d44 <logic+0x4948>
  804d2c:	e0bffc17 	ldw	r2,-16(fp)
  804d30:	10803183 	ldbu	r2,198(r2)
  804d34:	10803fcc 	andi	r2,r2,255
  804d38:	1080201c 	xori	r2,r2,128
  804d3c:	10bfe004 	addi	r2,r2,-128
  804d40:	10000226 	beq	r2,zero,804d4c <logic+0x4950>
  804d44:	00800044 	movi	r2,1
  804d48:	00000106 	br	804d50 <logic+0x4954>
  804d4c:	0005883a 	mov	r2,zero
  804d50:	1007883a 	mov	r3,r2
  804d54:	e0bffc17 	ldw	r2,-16(fp)
  804d58:	10c03185 	stb	r3,198(r2)
  d->_cg125 = d->_Pacemaker_local__region3_VRP_x < d->VRP;
  804d5c:	e0bffc17 	ldw	r2,-16(fp)
  804d60:	14001117 	ldw	r16,68(r2)
  804d64:	14401217 	ldw	r17,72(r2)
  804d68:	e0bffc17 	ldw	r2,-16(fp)
  804d6c:	10800317 	ldw	r2,12(r2)
  804d70:	1009883a 	mov	r4,r2
  804d74:	08092a00 	call	8092a0 <__floatsidf>
  804d78:	1009883a 	mov	r4,r2
  804d7c:	180b883a 	mov	r5,r3
  804d80:	04800044 	movi	r18,1
  804d84:	200d883a 	mov	r6,r4
  804d88:	280f883a 	mov	r7,r5
  804d8c:	8009883a 	mov	r4,r16
  804d90:	880b883a 	mov	r5,r17
  804d94:	08081980 	call	808198 <__ledf2>
  804d98:	10000116 	blt	r2,zero,804da0 <logic+0x49a4>
  804d9c:	0025883a 	mov	r18,zero
  804da0:	9007883a 	mov	r3,r18
  804da4:	e0bffc17 	ldw	r2,-16(fp)
  804da8:	10c04d45 	stb	r3,309(r2)
  d->_g124 = d->_g130 && d->_cg125;
  804dac:	e0bffc17 	ldw	r2,-16(fp)
  804db0:	10803183 	ldbu	r2,198(r2)
  804db4:	10803fcc 	andi	r2,r2,255
  804db8:	1080201c 	xori	r2,r2,128
  804dbc:	10bfe004 	addi	r2,r2,-128
  804dc0:	10000826 	beq	r2,zero,804de4 <logic+0x49e8>
  804dc4:	e0bffc17 	ldw	r2,-16(fp)
  804dc8:	10804d43 	ldbu	r2,309(r2)
  804dcc:	10803fcc 	andi	r2,r2,255
  804dd0:	1080201c 	xori	r2,r2,128
  804dd4:	10bfe004 	addi	r2,r2,-128
  804dd8:	10000226 	beq	r2,zero,804de4 <logic+0x49e8>
  804ddc:	00800044 	movi	r2,1
  804de0:	00000106 	br	804de8 <logic+0x49ec>
  804de4:	0005883a 	mov	r2,zero
  804de8:	1007883a 	mov	r3,r2
  804dec:	e0bffc17 	ldw	r2,-16(fp)
  804df0:	10c03045 	stb	r3,193(r2)
  if (d->_g124) {
  804df4:	e0bffc17 	ldw	r2,-16(fp)
  804df8:	10803043 	ldbu	r2,193(r2)
  804dfc:	10803fcc 	andi	r2,r2,255
  804e00:	1080201c 	xori	r2,r2,128
  804e04:	10bfe004 	addi	r2,r2,-128
  804e08:	10003426 	beq	r2,zero,804edc <logic+0x4ae0>
    d->sleepT = (d->sleepT < (d->VRP - d->_Pacemaker_local__region3_VRP_x)) ? d->sleepT : (d->VRP - d->_Pacemaker_local__region3_VRP_x);
  804e0c:	e0bffc17 	ldw	r2,-16(fp)
  804e10:	14000817 	ldw	r16,32(r2)
  804e14:	14400917 	ldw	r17,36(r2)
  804e18:	e0bffc17 	ldw	r2,-16(fp)
  804e1c:	10800317 	ldw	r2,12(r2)
  804e20:	1009883a 	mov	r4,r2
  804e24:	08092a00 	call	8092a0 <__floatsidf>
  804e28:	1011883a 	mov	r8,r2
  804e2c:	1813883a 	mov	r9,r3
  804e30:	e13ffc17 	ldw	r4,-16(fp)
  804e34:	20801117 	ldw	r2,68(r4)
  804e38:	20c01217 	ldw	r3,72(r4)
  804e3c:	100d883a 	mov	r6,r2
  804e40:	180f883a 	mov	r7,r3
  804e44:	4009883a 	mov	r4,r8
  804e48:	480b883a 	mov	r5,r9
  804e4c:	08089a40 	call	8089a4 <__subdf3>
  804e50:	1009883a 	mov	r4,r2
  804e54:	180b883a 	mov	r5,r3
  804e58:	2005883a 	mov	r2,r4
  804e5c:	2807883a 	mov	r3,r5
  804e60:	100d883a 	mov	r6,r2
  804e64:	180f883a 	mov	r7,r3
  804e68:	8009883a 	mov	r4,r16
  804e6c:	880b883a 	mov	r5,r17
  804e70:	08081980 	call	808198 <__ledf2>
  804e74:	1000040e 	bge	r2,zero,804e88 <logic+0x4a8c>
  804e78:	e13ffc17 	ldw	r4,-16(fp)
  804e7c:	20800817 	ldw	r2,32(r4)
  804e80:	20c00917 	ldw	r3,36(r4)
  804e84:	00001206 	br	804ed0 <logic+0x4ad4>
  804e88:	e0bffc17 	ldw	r2,-16(fp)
  804e8c:	10800317 	ldw	r2,12(r2)
  804e90:	1009883a 	mov	r4,r2
  804e94:	08092a00 	call	8092a0 <__floatsidf>
  804e98:	1011883a 	mov	r8,r2
  804e9c:	1813883a 	mov	r9,r3
  804ea0:	e13ffc17 	ldw	r4,-16(fp)
  804ea4:	20801117 	ldw	r2,68(r4)
  804ea8:	20c01217 	ldw	r3,72(r4)
  804eac:	100d883a 	mov	r6,r2
  804eb0:	180f883a 	mov	r7,r3
  804eb4:	4009883a 	mov	r4,r8
  804eb8:	480b883a 	mov	r5,r9
  804ebc:	08089a40 	call	8089a4 <__subdf3>
  804ec0:	1009883a 	mov	r4,r2
  804ec4:	180b883a 	mov	r5,r3
  804ec8:	2005883a 	mov	r2,r4
  804ecc:	2807883a 	mov	r3,r5
  804ed0:	e13ffc17 	ldw	r4,-16(fp)
  804ed4:	20800815 	stw	r2,32(r4)
  804ed8:	20c00915 	stw	r3,36(r4)
  }
  d->_cg126 = d->_Pacemaker_local__Atrig6 || d->_Pacemaker_local__Atrig7;
  804edc:	e0bffc17 	ldw	r2,-16(fp)
  804ee0:	108019c3 	ldbu	r2,103(r2)
  804ee4:	10803fcc 	andi	r2,r2,255
  804ee8:	1080201c 	xori	r2,r2,128
  804eec:	10bfe004 	addi	r2,r2,-128
  804ef0:	1000061e 	bne	r2,zero,804f0c <logic+0x4b10>
  804ef4:	e0bffc17 	ldw	r2,-16(fp)
  804ef8:	10801a03 	ldbu	r2,104(r2)
  804efc:	10803fcc 	andi	r2,r2,255
  804f00:	1080201c 	xori	r2,r2,128
  804f04:	10bfe004 	addi	r2,r2,-128
  804f08:	10000226 	beq	r2,zero,804f14 <logic+0x4b18>
  804f0c:	00800044 	movi	r2,1
  804f10:	00000106 	br	804f18 <logic+0x4b1c>
  804f14:	0005883a 	mov	r2,zero
  804f18:	1007883a 	mov	r3,r2
  804f1c:	e0bffc17 	ldw	r2,-16(fp)
  804f20:	10c04d05 	stb	r3,308(r2)
  d->_g125 = d->_g130 && !d->_cg125;
  804f24:	e0bffc17 	ldw	r2,-16(fp)
  804f28:	10803183 	ldbu	r2,198(r2)
  804f2c:	10803fcc 	andi	r2,r2,255
  804f30:	1080201c 	xori	r2,r2,128
  804f34:	10bfe004 	addi	r2,r2,-128
  804f38:	10000826 	beq	r2,zero,804f5c <logic+0x4b60>
  804f3c:	e0bffc17 	ldw	r2,-16(fp)
  804f40:	10804d43 	ldbu	r2,309(r2)
  804f44:	10803fcc 	andi	r2,r2,255
  804f48:	1080201c 	xori	r2,r2,128
  804f4c:	10bfe004 	addi	r2,r2,-128
  804f50:	1000021e 	bne	r2,zero,804f5c <logic+0x4b60>
  804f54:	00800044 	movi	r2,1
  804f58:	00000106 	br	804f60 <logic+0x4b64>
  804f5c:	0005883a 	mov	r2,zero
  804f60:	1007883a 	mov	r3,r2
  804f64:	e0bffc17 	ldw	r2,-16(fp)
  804f68:	10c03085 	stb	r3,194(r2)
  d->_cg128 = d->_Pacemaker_local__Atrig6 || d->_Pacemaker_local__Atrig7;
  804f6c:	e0bffc17 	ldw	r2,-16(fp)
  804f70:	108019c3 	ldbu	r2,103(r2)
  804f74:	10803fcc 	andi	r2,r2,255
  804f78:	1080201c 	xori	r2,r2,128
  804f7c:	10bfe004 	addi	r2,r2,-128
  804f80:	1000061e 	bne	r2,zero,804f9c <logic+0x4ba0>
  804f84:	e0bffc17 	ldw	r2,-16(fp)
  804f88:	10801a03 	ldbu	r2,104(r2)
  804f8c:	10803fcc 	andi	r2,r2,255
  804f90:	1080201c 	xori	r2,r2,128
  804f94:	10bfe004 	addi	r2,r2,-128
  804f98:	10000226 	beq	r2,zero,804fa4 <logic+0x4ba8>
  804f9c:	00800044 	movi	r2,1
  804fa0:	00000106 	br	804fa8 <logic+0x4bac>
  804fa4:	0005883a 	mov	r2,zero
  804fa8:	1007883a 	mov	r3,r2
  804fac:	e0bffc17 	ldw	r2,-16(fp)
  804fb0:	10c04d85 	stb	r3,310(r2)
  d->_g127 = (d->_g124 && d->_cg126) || (d->_g125 && d->_cg128);
  804fb4:	e0bffc17 	ldw	r2,-16(fp)
  804fb8:	10803043 	ldbu	r2,193(r2)
  804fbc:	10803fcc 	andi	r2,r2,255
  804fc0:	1080201c 	xori	r2,r2,128
  804fc4:	10bfe004 	addi	r2,r2,-128
  804fc8:	10000626 	beq	r2,zero,804fe4 <logic+0x4be8>
  804fcc:	e0bffc17 	ldw	r2,-16(fp)
  804fd0:	10804d03 	ldbu	r2,308(r2)
  804fd4:	10803fcc 	andi	r2,r2,255
  804fd8:	1080201c 	xori	r2,r2,128
  804fdc:	10bfe004 	addi	r2,r2,-128
  804fe0:	10000c1e 	bne	r2,zero,805014 <logic+0x4c18>
  804fe4:	e0bffc17 	ldw	r2,-16(fp)
  804fe8:	10803083 	ldbu	r2,194(r2)
  804fec:	10803fcc 	andi	r2,r2,255
  804ff0:	1080201c 	xori	r2,r2,128
  804ff4:	10bfe004 	addi	r2,r2,-128
  804ff8:	10000826 	beq	r2,zero,80501c <logic+0x4c20>
  804ffc:	e0bffc17 	ldw	r2,-16(fp)
  805000:	10804d83 	ldbu	r2,310(r2)
  805004:	10803fcc 	andi	r2,r2,255
  805008:	1080201c 	xori	r2,r2,128
  80500c:	10bfe004 	addi	r2,r2,-128
  805010:	10000226 	beq	r2,zero,80501c <logic+0x4c20>
  805014:	00800044 	movi	r2,1
  805018:	00000106 	br	805020 <logic+0x4c24>
  80501c:	0005883a 	mov	r2,zero
  805020:	1007883a 	mov	r3,r2
  805024:	e0bffc17 	ldw	r2,-16(fp)
  805028:	10c03105 	stb	r3,196(r2)
  d->_g134 = !d->_g100;
  80502c:	e0bffc17 	ldw	r2,-16(fp)
  805030:	10802c43 	ldbu	r2,177(r2)
  805034:	10803fcc 	andi	r2,r2,255
  805038:	1080201c 	xori	r2,r2,128
  80503c:	10bfe004 	addi	r2,r2,-128
  805040:	1005003a 	cmpeq	r2,r2,zero
  805044:	1007883a 	mov	r3,r2
  805048:	e0bffc17 	ldw	r2,-16(fp)
  80504c:	10c03205 	stb	r3,200(r2)
  d->_g138 = d->_g72 || d->_g138;
  805050:	e0bffc17 	ldw	r2,-16(fp)
  805054:	10802743 	ldbu	r2,157(r2)
  805058:	10803fcc 	andi	r2,r2,255
  80505c:	1080201c 	xori	r2,r2,128
  805060:	10bfe004 	addi	r2,r2,-128
  805064:	1000061e 	bne	r2,zero,805080 <logic+0x4c84>
  805068:	e0bffc17 	ldw	r2,-16(fp)
  80506c:	10803303 	ldbu	r2,204(r2)
  805070:	10803fcc 	andi	r2,r2,255
  805074:	1080201c 	xori	r2,r2,128
  805078:	10bfe004 	addi	r2,r2,-128
  80507c:	10000226 	beq	r2,zero,805088 <logic+0x4c8c>
  805080:	00800044 	movi	r2,1
  805084:	00000106 	br	80508c <logic+0x4c90>
  805088:	0005883a 	mov	r2,zero
  80508c:	1007883a 	mov	r3,r2
  805090:	e0bffc17 	ldw	r2,-16(fp)
  805094:	10c03305 	stb	r3,204(r2)
  d->_g135 = (d->_g91 || d->_g116) && (d->_g127_e2 || d->_g127) && (d->_g134 || d->_g138) && (d->_g116 || d->_g127 || d->_g138);
  805098:	e0bffc17 	ldw	r2,-16(fp)
  80509c:	10802ac3 	ldbu	r2,171(r2)
  8050a0:	10803fcc 	andi	r2,r2,255
  8050a4:	1080201c 	xori	r2,r2,128
  8050a8:	10bfe004 	addi	r2,r2,-128
  8050ac:	1000061e 	bne	r2,zero,8050c8 <logic+0x4ccc>
  8050b0:	e0bffc17 	ldw	r2,-16(fp)
  8050b4:	10802f03 	ldbu	r2,188(r2)
  8050b8:	10803fcc 	andi	r2,r2,255
  8050bc:	1080201c 	xori	r2,r2,128
  8050c0:	10bfe004 	addi	r2,r2,-128
  8050c4:	10002c26 	beq	r2,zero,805178 <logic+0x4d7c>
  8050c8:	e0bffc17 	ldw	r2,-16(fp)
  8050cc:	108057c3 	ldbu	r2,351(r2)
  8050d0:	10803fcc 	andi	r2,r2,255
  8050d4:	1080201c 	xori	r2,r2,128
  8050d8:	10bfe004 	addi	r2,r2,-128
  8050dc:	1000061e 	bne	r2,zero,8050f8 <logic+0x4cfc>
  8050e0:	e0bffc17 	ldw	r2,-16(fp)
  8050e4:	10803103 	ldbu	r2,196(r2)
  8050e8:	10803fcc 	andi	r2,r2,255
  8050ec:	1080201c 	xori	r2,r2,128
  8050f0:	10bfe004 	addi	r2,r2,-128
  8050f4:	10002026 	beq	r2,zero,805178 <logic+0x4d7c>
  8050f8:	e0bffc17 	ldw	r2,-16(fp)
  8050fc:	10803203 	ldbu	r2,200(r2)
  805100:	10803fcc 	andi	r2,r2,255
  805104:	1080201c 	xori	r2,r2,128
  805108:	10bfe004 	addi	r2,r2,-128
  80510c:	1000061e 	bne	r2,zero,805128 <logic+0x4d2c>
  805110:	e0bffc17 	ldw	r2,-16(fp)
  805114:	10803303 	ldbu	r2,204(r2)
  805118:	10803fcc 	andi	r2,r2,255
  80511c:	1080201c 	xori	r2,r2,128
  805120:	10bfe004 	addi	r2,r2,-128
  805124:	10001426 	beq	r2,zero,805178 <logic+0x4d7c>
  805128:	e0bffc17 	ldw	r2,-16(fp)
  80512c:	10802f03 	ldbu	r2,188(r2)
  805130:	10803fcc 	andi	r2,r2,255
  805134:	1080201c 	xori	r2,r2,128
  805138:	10bfe004 	addi	r2,r2,-128
  80513c:	10000c1e 	bne	r2,zero,805170 <logic+0x4d74>
  805140:	e0bffc17 	ldw	r2,-16(fp)
  805144:	10803103 	ldbu	r2,196(r2)
  805148:	10803fcc 	andi	r2,r2,255
  80514c:	1080201c 	xori	r2,r2,128
  805150:	10bfe004 	addi	r2,r2,-128
  805154:	1000061e 	bne	r2,zero,805170 <logic+0x4d74>
  805158:	e0bffc17 	ldw	r2,-16(fp)
  80515c:	10803303 	ldbu	r2,204(r2)
  805160:	10803fcc 	andi	r2,r2,255
  805164:	1080201c 	xori	r2,r2,128
  805168:	10bfe004 	addi	r2,r2,-128
  80516c:	10000226 	beq	r2,zero,805178 <logic+0x4d7c>
  805170:	00800044 	movi	r2,1
  805174:	00000106 	br	80517c <logic+0x4d80>
  805178:	0005883a 	mov	r2,zero
  80517c:	1007883a 	mov	r3,r2
  805180:	e0bffc17 	ldw	r2,-16(fp)
  805184:	10c03245 	stb	r3,201(r2)
  d->_cg139 = d->_Pacemaker_local__Atrig6;
  805188:	e0bffc17 	ldw	r2,-16(fp)
  80518c:	10c019c3 	ldbu	r3,103(r2)
  805190:	e0bffc17 	ldw	r2,-16(fp)
  805194:	10c04a85 	stb	r3,298(r2)
  d->_g127 = d->_pg116;
  805198:	e0bffc17 	ldw	r2,-16(fp)
  80519c:	10c061c3 	ldbu	r3,391(r2)
  8051a0:	e0bffc17 	ldw	r2,-16(fp)
  8051a4:	10c03105 	stb	r3,196(r2)
  d->_cg107 = d->VS || d->_Pacemaker_local_iVP;
  8051a8:	e0bffc17 	ldw	r2,-16(fp)
  8051ac:	10800a43 	ldbu	r2,41(r2)
  8051b0:	10803fcc 	andi	r2,r2,255
  8051b4:	1080201c 	xori	r2,r2,128
  8051b8:	10bfe004 	addi	r2,r2,-128
  8051bc:	1000061e 	bne	r2,zero,8051d8 <logic+0x4ddc>
  8051c0:	e0bffc17 	ldw	r2,-16(fp)
  8051c4:	10801743 	ldbu	r2,93(r2)
  8051c8:	10803fcc 	andi	r2,r2,255
  8051cc:	1080201c 	xori	r2,r2,128
  8051d0:	10bfe004 	addi	r2,r2,-128
  8051d4:	10000226 	beq	r2,zero,8051e0 <logic+0x4de4>
  8051d8:	00800044 	movi	r2,1
  8051dc:	00000106 	br	8051e4 <logic+0x4de8>
  8051e0:	0005883a 	mov	r2,zero
  8051e4:	1007883a 	mov	r3,r2
  8051e8:	e0bffc17 	ldw	r2,-16(fp)
  8051ec:	10c04ac5 	stb	r3,299(r2)
  d->_g116 = d->_GO || (d->_g135 && !d->_cg139) || (d->_g127 && !d->_cg107);
  8051f0:	e0bffc17 	ldw	r2,-16(fp)
  8051f4:	10803fc3 	ldbu	r2,255(r2)
  8051f8:	10803fcc 	andi	r2,r2,255
  8051fc:	1080201c 	xori	r2,r2,128
  805200:	10bfe004 	addi	r2,r2,-128
  805204:	1000181e 	bne	r2,zero,805268 <logic+0x4e6c>
  805208:	e0bffc17 	ldw	r2,-16(fp)
  80520c:	10803243 	ldbu	r2,201(r2)
  805210:	10803fcc 	andi	r2,r2,255
  805214:	1080201c 	xori	r2,r2,128
  805218:	10bfe004 	addi	r2,r2,-128
  80521c:	10000626 	beq	r2,zero,805238 <logic+0x4e3c>
  805220:	e0bffc17 	ldw	r2,-16(fp)
  805224:	10804a83 	ldbu	r2,298(r2)
  805228:	10803fcc 	andi	r2,r2,255
  80522c:	1080201c 	xori	r2,r2,128
  805230:	10bfe004 	addi	r2,r2,-128
  805234:	10000c26 	beq	r2,zero,805268 <logic+0x4e6c>
  805238:	e0bffc17 	ldw	r2,-16(fp)
  80523c:	10803103 	ldbu	r2,196(r2)
  805240:	10803fcc 	andi	r2,r2,255
  805244:	1080201c 	xori	r2,r2,128
  805248:	10bfe004 	addi	r2,r2,-128
  80524c:	10000826 	beq	r2,zero,805270 <logic+0x4e74>
  805250:	e0bffc17 	ldw	r2,-16(fp)
  805254:	10804ac3 	ldbu	r2,299(r2)
  805258:	10803fcc 	andi	r2,r2,255
  80525c:	1080201c 	xori	r2,r2,128
  805260:	10bfe004 	addi	r2,r2,-128
  805264:	1000021e 	bne	r2,zero,805270 <logic+0x4e74>
  805268:	00800044 	movi	r2,1
  80526c:	00000106 	br	805274 <logic+0x4e78>
  805270:	0005883a 	mov	r2,zero
  805274:	1007883a 	mov	r3,r2
  805278:	e0bffc17 	ldw	r2,-16(fp)
  80527c:	10c02f05 	stb	r3,188(r2)
  d->_g136 = d->_g127 && d->_cg107;
  805280:	e0bffc17 	ldw	r2,-16(fp)
  805284:	10803103 	ldbu	r2,196(r2)
  805288:	10803fcc 	andi	r2,r2,255
  80528c:	1080201c 	xori	r2,r2,128
  805290:	10bfe004 	addi	r2,r2,-128
  805294:	10000826 	beq	r2,zero,8052b8 <logic+0x4ebc>
  805298:	e0bffc17 	ldw	r2,-16(fp)
  80529c:	10804ac3 	ldbu	r2,299(r2)
  8052a0:	10803fcc 	andi	r2,r2,255
  8052a4:	1080201c 	xori	r2,r2,128
  8052a8:	10bfe004 	addi	r2,r2,-128
  8052ac:	10000226 	beq	r2,zero,8052b8 <logic+0x4ebc>
  8052b0:	00800044 	movi	r2,1
  8052b4:	00000106 	br	8052bc <logic+0x4ec0>
  8052b8:	0005883a 	mov	r2,zero
  8052bc:	1007883a 	mov	r3,r2
  8052c0:	e0bffc17 	ldw	r2,-16(fp)
  8052c4:	10c03285 	stb	r3,202(r2)
  if (d->_g136) {
  8052c8:	e0bffc17 	ldw	r2,-16(fp)
  8052cc:	10803283 	ldbu	r2,202(r2)
  8052d0:	10803fcc 	andi	r2,r2,255
  8052d4:	1080201c 	xori	r2,r2,128
  8052d8:	10bfe004 	addi	r2,r2,-128
  8052dc:	10000326 	beq	r2,zero,8052ec <logic+0x4ef0>
    d->_Pacemaker_local__region3_VRP_x = 0;
  8052e0:	e0bffc17 	ldw	r2,-16(fp)
  8052e4:	10001115 	stw	zero,68(r2)
  8052e8:	10001215 	stw	zero,72(r2)
  }
  d->_g116_e1 = d->_g135 && d->_cg139;
  8052ec:	e0bffc17 	ldw	r2,-16(fp)
  8052f0:	10803243 	ldbu	r2,201(r2)
  8052f4:	10803fcc 	andi	r2,r2,255
  8052f8:	1080201c 	xori	r2,r2,128
  8052fc:	10bfe004 	addi	r2,r2,-128
  805300:	10000826 	beq	r2,zero,805324 <logic+0x4f28>
  805304:	e0bffc17 	ldw	r2,-16(fp)
  805308:	10804a83 	ldbu	r2,298(r2)
  80530c:	10803fcc 	andi	r2,r2,255
  805310:	1080201c 	xori	r2,r2,128
  805314:	10bfe004 	addi	r2,r2,-128
  805318:	10000226 	beq	r2,zero,805324 <logic+0x4f28>
  80531c:	00800044 	movi	r2,1
  805320:	00000106 	br	805328 <logic+0x4f2c>
  805324:	0005883a 	mov	r2,zero
  805328:	1007883a 	mov	r3,r2
  80532c:	e0bffc17 	ldw	r2,-16(fp)
  805330:	10c05785 	stb	r3,350(r2)
  if (d->_g116_e1) {
  805334:	e0bffc17 	ldw	r2,-16(fp)
  805338:	10805783 	ldbu	r2,350(r2)
  80533c:	10803fcc 	andi	r2,r2,255
  805340:	1080201c 	xori	r2,r2,128
  805344:	10bfe004 	addi	r2,r2,-128
  805348:	10000626 	beq	r2,zero,805364 <logic+0x4f68>
    d->_Pacemaker_local_VRP_timeout |= 1;
  80534c:	e0bffc17 	ldw	r2,-16(fp)
  805350:	108017c3 	ldbu	r2,95(r2)
  805354:	10800054 	ori	r2,r2,1
  805358:	1007883a 	mov	r3,r2
  80535c:	e0bffc17 	ldw	r2,-16(fp)
  805360:	10c017c5 	stb	r3,95(r2)
  }
  d->_g136_e3 = d->_g136 || d->_g116_e1;
  805364:	e0bffc17 	ldw	r2,-16(fp)
  805368:	10803283 	ldbu	r2,202(r2)
  80536c:	10803fcc 	andi	r2,r2,255
  805370:	1080201c 	xori	r2,r2,128
  805374:	10bfe004 	addi	r2,r2,-128
  805378:	1000061e 	bne	r2,zero,805394 <logic+0x4f98>
  80537c:	e0bffc17 	ldw	r2,-16(fp)
  805380:	10805783 	ldbu	r2,350(r2)
  805384:	10803fcc 	andi	r2,r2,255
  805388:	1080201c 	xori	r2,r2,128
  80538c:	10bfe004 	addi	r2,r2,-128
  805390:	10000226 	beq	r2,zero,80539c <logic+0x4fa0>
  805394:	00800044 	movi	r2,1
  805398:	00000106 	br	8053a0 <logic+0x4fa4>
  80539c:	0005883a 	mov	r2,zero
  8053a0:	1007883a 	mov	r3,r2
  8053a4:	e0bffc17 	ldw	r2,-16(fp)
  8053a8:	10c05805 	stb	r3,352(r2)
  if (d->_g136_e3) {
  8053ac:	e0bffc17 	ldw	r2,-16(fp)
  8053b0:	10805803 	ldbu	r2,352(r2)
  8053b4:	10803fcc 	andi	r2,r2,255
  8053b8:	1080201c 	xori	r2,r2,128
  8053bc:	10bfe004 	addi	r2,r2,-128
  8053c0:	10000426 	beq	r2,zero,8053d4 <logic+0x4fd8>
    d->_Pacemaker_local__Atrig6 = 0;
  8053c4:	e0bffc17 	ldw	r2,-16(fp)
  8053c8:	100019c5 	stb	zero,103(r2)
    d->_Pacemaker_local__Atrig7 = 0;
  8053cc:	e0bffc17 	ldw	r2,-16(fp)
  8053d0:	10001a05 	stb	zero,104(r2)
  }
  d->_cg110 = d->_Pacemaker_local__region3_VRP_x < d->VRP;
  8053d4:	e0bffc17 	ldw	r2,-16(fp)
  8053d8:	14001117 	ldw	r16,68(r2)
  8053dc:	14401217 	ldw	r17,72(r2)
  8053e0:	e0bffc17 	ldw	r2,-16(fp)
  8053e4:	10800317 	ldw	r2,12(r2)
  8053e8:	1009883a 	mov	r4,r2
  8053ec:	08092a00 	call	8092a0 <__floatsidf>
  8053f0:	1009883a 	mov	r4,r2
  8053f4:	180b883a 	mov	r5,r3
  8053f8:	04800044 	movi	r18,1
  8053fc:	200d883a 	mov	r6,r4
  805400:	280f883a 	mov	r7,r5
  805404:	8009883a 	mov	r4,r16
  805408:	880b883a 	mov	r5,r17
  80540c:	08081980 	call	808198 <__ledf2>
  805410:	10000116 	blt	r2,zero,805418 <logic+0x501c>
  805414:	0025883a 	mov	r18,zero
  805418:	9007883a 	mov	r3,r18
  80541c:	e0bffc17 	ldw	r2,-16(fp)
  805420:	10c04b05 	stb	r3,300(r2)
  d->_g127_e2 = d->_g136_e3 && d->_cg110;
  805424:	e0bffc17 	ldw	r2,-16(fp)
  805428:	10805803 	ldbu	r2,352(r2)
  80542c:	10803fcc 	andi	r2,r2,255
  805430:	1080201c 	xori	r2,r2,128
  805434:	10bfe004 	addi	r2,r2,-128
  805438:	10000826 	beq	r2,zero,80545c <logic+0x5060>
  80543c:	e0bffc17 	ldw	r2,-16(fp)
  805440:	10804b03 	ldbu	r2,300(r2)
  805444:	10803fcc 	andi	r2,r2,255
  805448:	1080201c 	xori	r2,r2,128
  80544c:	10bfe004 	addi	r2,r2,-128
  805450:	10000226 	beq	r2,zero,80545c <logic+0x5060>
  805454:	00800044 	movi	r2,1
  805458:	00000106 	br	805460 <logic+0x5064>
  80545c:	0005883a 	mov	r2,zero
  805460:	1007883a 	mov	r3,r2
  805464:	e0bffc17 	ldw	r2,-16(fp)
  805468:	10c057c5 	stb	r3,351(r2)
  if (d->_g127_e2) {
  80546c:	e0bffc17 	ldw	r2,-16(fp)
  805470:	108057c3 	ldbu	r2,351(r2)
  805474:	10803fcc 	andi	r2,r2,255
  805478:	1080201c 	xori	r2,r2,128
  80547c:	10bfe004 	addi	r2,r2,-128
  805480:	10003426 	beq	r2,zero,805554 <logic+0x5158>
    d->sleepT = (d->sleepT < (d->VRP - d->_Pacemaker_local__region3_VRP_x)) ? d->sleepT : (d->VRP - d->_Pacemaker_local__region3_VRP_x);
  805484:	e0bffc17 	ldw	r2,-16(fp)
  805488:	14000817 	ldw	r16,32(r2)
  80548c:	14400917 	ldw	r17,36(r2)
  805490:	e0bffc17 	ldw	r2,-16(fp)
  805494:	10800317 	ldw	r2,12(r2)
  805498:	1009883a 	mov	r4,r2
  80549c:	08092a00 	call	8092a0 <__floatsidf>
  8054a0:	1011883a 	mov	r8,r2
  8054a4:	1813883a 	mov	r9,r3
  8054a8:	e13ffc17 	ldw	r4,-16(fp)
  8054ac:	20801117 	ldw	r2,68(r4)
  8054b0:	20c01217 	ldw	r3,72(r4)
  8054b4:	100d883a 	mov	r6,r2
  8054b8:	180f883a 	mov	r7,r3
  8054bc:	4009883a 	mov	r4,r8
  8054c0:	480b883a 	mov	r5,r9
  8054c4:	08089a40 	call	8089a4 <__subdf3>
  8054c8:	1009883a 	mov	r4,r2
  8054cc:	180b883a 	mov	r5,r3
  8054d0:	2005883a 	mov	r2,r4
  8054d4:	2807883a 	mov	r3,r5
  8054d8:	100d883a 	mov	r6,r2
  8054dc:	180f883a 	mov	r7,r3
  8054e0:	8009883a 	mov	r4,r16
  8054e4:	880b883a 	mov	r5,r17
  8054e8:	08081980 	call	808198 <__ledf2>
  8054ec:	1000040e 	bge	r2,zero,805500 <logic+0x5104>
  8054f0:	e13ffc17 	ldw	r4,-16(fp)
  8054f4:	20800817 	ldw	r2,32(r4)
  8054f8:	20c00917 	ldw	r3,36(r4)
  8054fc:	00001206 	br	805548 <logic+0x514c>
  805500:	e0bffc17 	ldw	r2,-16(fp)
  805504:	10800317 	ldw	r2,12(r2)
  805508:	1009883a 	mov	r4,r2
  80550c:	08092a00 	call	8092a0 <__floatsidf>
  805510:	1011883a 	mov	r8,r2
  805514:	1813883a 	mov	r9,r3
  805518:	e13ffc17 	ldw	r4,-16(fp)
  80551c:	20801117 	ldw	r2,68(r4)
  805520:	20c01217 	ldw	r3,72(r4)
  805524:	100d883a 	mov	r6,r2
  805528:	180f883a 	mov	r7,r3
  80552c:	4009883a 	mov	r4,r8
  805530:	480b883a 	mov	r5,r9
  805534:	08089a40 	call	8089a4 <__subdf3>
  805538:	1009883a 	mov	r4,r2
  80553c:	180b883a 	mov	r5,r3
  805540:	2005883a 	mov	r2,r4
  805544:	2807883a 	mov	r3,r5
  805548:	e13ffc17 	ldw	r4,-16(fp)
  80554c:	20800815 	stw	r2,32(r4)
  805550:	20c00915 	stw	r3,36(r4)
  }
  d->_cg111 = d->_Pacemaker_local__Atrig6 || d->_Pacemaker_local__Atrig7;
  805554:	e0bffc17 	ldw	r2,-16(fp)
  805558:	108019c3 	ldbu	r2,103(r2)
  80555c:	10803fcc 	andi	r2,r2,255
  805560:	1080201c 	xori	r2,r2,128
  805564:	10bfe004 	addi	r2,r2,-128
  805568:	1000061e 	bne	r2,zero,805584 <logic+0x5188>
  80556c:	e0bffc17 	ldw	r2,-16(fp)
  805570:	10801a03 	ldbu	r2,104(r2)
  805574:	10803fcc 	andi	r2,r2,255
  805578:	1080201c 	xori	r2,r2,128
  80557c:	10bfe004 	addi	r2,r2,-128
  805580:	10000226 	beq	r2,zero,80558c <logic+0x5190>
  805584:	00800044 	movi	r2,1
  805588:	00000106 	br	805590 <logic+0x5194>
  80558c:	0005883a 	mov	r2,zero
  805590:	1007883a 	mov	r3,r2
  805594:	e0bffc17 	ldw	r2,-16(fp)
  805598:	10c04b45 	stb	r3,301(r2)
  d->_g107 = (d->_g127_e2 && !d->_cg111) || (d->_g119 && !d->_cg115);
  80559c:	e0bffc17 	ldw	r2,-16(fp)
  8055a0:	108057c3 	ldbu	r2,351(r2)
  8055a4:	10803fcc 	andi	r2,r2,255
  8055a8:	1080201c 	xori	r2,r2,128
  8055ac:	10bfe004 	addi	r2,r2,-128
  8055b0:	10000626 	beq	r2,zero,8055cc <logic+0x51d0>
  8055b4:	e0bffc17 	ldw	r2,-16(fp)
  8055b8:	10804b43 	ldbu	r2,301(r2)
  8055bc:	10803fcc 	andi	r2,r2,255
  8055c0:	1080201c 	xori	r2,r2,128
  8055c4:	10bfe004 	addi	r2,r2,-128
  8055c8:	10000c26 	beq	r2,zero,8055fc <logic+0x5200>
  8055cc:	e0bffc17 	ldw	r2,-16(fp)
  8055d0:	10802f83 	ldbu	r2,190(r2)
  8055d4:	10803fcc 	andi	r2,r2,255
  8055d8:	1080201c 	xori	r2,r2,128
  8055dc:	10bfe004 	addi	r2,r2,-128
  8055e0:	10000826 	beq	r2,zero,805604 <logic+0x5208>
  8055e4:	e0bffc17 	ldw	r2,-16(fp)
  8055e8:	10804b83 	ldbu	r2,302(r2)
  8055ec:	10803fcc 	andi	r2,r2,255
  8055f0:	1080201c 	xori	r2,r2,128
  8055f4:	10bfe004 	addi	r2,r2,-128
  8055f8:	1000021e 	bne	r2,zero,805604 <logic+0x5208>
  8055fc:	00800044 	movi	r2,1
  805600:	00000106 	br	805608 <logic+0x520c>
  805604:	0005883a 	mov	r2,zero
  805608:	1007883a 	mov	r3,r2
  80560c:	e0bffc17 	ldw	r2,-16(fp)
  805610:	10c02d45 	stb	r3,181(r2)
  d->_g139 = d->_g136_e3 && !d->_cg110;
  805614:	e0bffc17 	ldw	r2,-16(fp)
  805618:	10805803 	ldbu	r2,352(r2)
  80561c:	10803fcc 	andi	r2,r2,255
  805620:	1080201c 	xori	r2,r2,128
  805624:	10bfe004 	addi	r2,r2,-128
  805628:	10000826 	beq	r2,zero,80564c <logic+0x5250>
  80562c:	e0bffc17 	ldw	r2,-16(fp)
  805630:	10804b03 	ldbu	r2,300(r2)
  805634:	10803fcc 	andi	r2,r2,255
  805638:	1080201c 	xori	r2,r2,128
  80563c:	10bfe004 	addi	r2,r2,-128
  805640:	1000021e 	bne	r2,zero,80564c <logic+0x5250>
  805644:	00800044 	movi	r2,1
  805648:	00000106 	br	805650 <logic+0x5254>
  80564c:	0005883a 	mov	r2,zero
  805650:	1007883a 	mov	r3,r2
  805654:	e0bffc17 	ldw	r2,-16(fp)
  805658:	10c03345 	stb	r3,205(r2)
  d->_cg120 = d->_Pacemaker_local__Atrig6 || d->_Pacemaker_local__Atrig7;
  80565c:	e0bffc17 	ldw	r2,-16(fp)
  805660:	108019c3 	ldbu	r2,103(r2)
  805664:	10803fcc 	andi	r2,r2,255
  805668:	1080201c 	xori	r2,r2,128
  80566c:	10bfe004 	addi	r2,r2,-128
  805670:	1000061e 	bne	r2,zero,80568c <logic+0x5290>
  805674:	e0bffc17 	ldw	r2,-16(fp)
  805678:	10801a03 	ldbu	r2,104(r2)
  80567c:	10803fcc 	andi	r2,r2,255
  805680:	1080201c 	xori	r2,r2,128
  805684:	10bfe004 	addi	r2,r2,-128
  805688:	10000226 	beq	r2,zero,805694 <logic+0x5298>
  80568c:	00800044 	movi	r2,1
  805690:	00000106 	br	805698 <logic+0x529c>
  805694:	0005883a 	mov	r2,zero
  805698:	1007883a 	mov	r3,r2
  80569c:	e0bffc17 	ldw	r2,-16(fp)
  8056a0:	10c04c45 	stb	r3,305(r2)
  d->_g108 = (d->_g114 && !d->_cg117) || (d->_g139 && !d->_cg120);
  8056a4:	e0bffc17 	ldw	r2,-16(fp)
  8056a8:	10802e83 	ldbu	r2,186(r2)
  8056ac:	10803fcc 	andi	r2,r2,255
  8056b0:	1080201c 	xori	r2,r2,128
  8056b4:	10bfe004 	addi	r2,r2,-128
  8056b8:	10000626 	beq	r2,zero,8056d4 <logic+0x52d8>
  8056bc:	e0bffc17 	ldw	r2,-16(fp)
  8056c0:	10804c03 	ldbu	r2,304(r2)
  8056c4:	10803fcc 	andi	r2,r2,255
  8056c8:	1080201c 	xori	r2,r2,128
  8056cc:	10bfe004 	addi	r2,r2,-128
  8056d0:	10000c26 	beq	r2,zero,805704 <logic+0x5308>
  8056d4:	e0bffc17 	ldw	r2,-16(fp)
  8056d8:	10803343 	ldbu	r2,205(r2)
  8056dc:	10803fcc 	andi	r2,r2,255
  8056e0:	1080201c 	xori	r2,r2,128
  8056e4:	10bfe004 	addi	r2,r2,-128
  8056e8:	10000826 	beq	r2,zero,80570c <logic+0x5310>
  8056ec:	e0bffc17 	ldw	r2,-16(fp)
  8056f0:	10804c43 	ldbu	r2,305(r2)
  8056f4:	10803fcc 	andi	r2,r2,255
  8056f8:	1080201c 	xori	r2,r2,128
  8056fc:	10bfe004 	addi	r2,r2,-128
  805700:	1000021e 	bne	r2,zero,80570c <logic+0x5310>
  805704:	00800044 	movi	r2,1
  805708:	00000106 	br	805710 <logic+0x5314>
  80570c:	0005883a 	mov	r2,zero
  805710:	1007883a 	mov	r3,r2
  805714:	e0bffc17 	ldw	r2,-16(fp)
  805718:	10c02d85 	stb	r3,182(r2)
  d->_cg121 = d->_Pacemaker_local__region3_VRP_x < d->VRP;
  80571c:	e0bffc17 	ldw	r2,-16(fp)
  805720:	14001117 	ldw	r16,68(r2)
  805724:	14401217 	ldw	r17,72(r2)
  805728:	e0bffc17 	ldw	r2,-16(fp)
  80572c:	10800317 	ldw	r2,12(r2)
  805730:	1009883a 	mov	r4,r2
  805734:	08092a00 	call	8092a0 <__floatsidf>
  805738:	1009883a 	mov	r4,r2
  80573c:	180b883a 	mov	r5,r3
  805740:	04800044 	movi	r18,1
  805744:	200d883a 	mov	r6,r4
  805748:	280f883a 	mov	r7,r5
  80574c:	8009883a 	mov	r4,r16
  805750:	880b883a 	mov	r5,r17
  805754:	08081980 	call	808198 <__ledf2>
  805758:	10000116 	blt	r2,zero,805760 <logic+0x5364>
  80575c:	0025883a 	mov	r18,zero
  805760:	9007883a 	mov	r3,r18
  805764:	e0bffc17 	ldw	r2,-16(fp)
  805768:	10c04c85 	stb	r3,306(r2)
  d->_g140 = d->_g136_e3 && d->_cg121;
  80576c:	e0bffc17 	ldw	r2,-16(fp)
  805770:	10805803 	ldbu	r2,352(r2)
  805774:	10803fcc 	andi	r2,r2,255
  805778:	1080201c 	xori	r2,r2,128
  80577c:	10bfe004 	addi	r2,r2,-128
  805780:	10000826 	beq	r2,zero,8057a4 <logic+0x53a8>
  805784:	e0bffc17 	ldw	r2,-16(fp)
  805788:	10804c83 	ldbu	r2,306(r2)
  80578c:	10803fcc 	andi	r2,r2,255
  805790:	1080201c 	xori	r2,r2,128
  805794:	10bfe004 	addi	r2,r2,-128
  805798:	10000226 	beq	r2,zero,8057a4 <logic+0x53a8>
  80579c:	00800044 	movi	r2,1
  8057a0:	00000106 	br	8057a8 <logic+0x53ac>
  8057a4:	0005883a 	mov	r2,zero
  8057a8:	1007883a 	mov	r3,r2
  8057ac:	e0bffc17 	ldw	r2,-16(fp)
  8057b0:	10c03385 	stb	r3,206(r2)
  if (d->_g140) {
  8057b4:	e0bffc17 	ldw	r2,-16(fp)
  8057b8:	10803383 	ldbu	r2,206(r2)
  8057bc:	10803fcc 	andi	r2,r2,255
  8057c0:	1080201c 	xori	r2,r2,128
  8057c4:	10bfe004 	addi	r2,r2,-128
  8057c8:	10003426 	beq	r2,zero,80589c <logic+0x54a0>
    d->sleepT = (d->sleepT < (d->VRP - d->_Pacemaker_local__region3_VRP_x)) ? d->sleepT : (d->VRP - d->_Pacemaker_local__region3_VRP_x);
  8057cc:	e0bffc17 	ldw	r2,-16(fp)
  8057d0:	14000817 	ldw	r16,32(r2)
  8057d4:	14400917 	ldw	r17,36(r2)
  8057d8:	e0bffc17 	ldw	r2,-16(fp)
  8057dc:	10800317 	ldw	r2,12(r2)
  8057e0:	1009883a 	mov	r4,r2
  8057e4:	08092a00 	call	8092a0 <__floatsidf>
  8057e8:	1011883a 	mov	r8,r2
  8057ec:	1813883a 	mov	r9,r3
  8057f0:	e13ffc17 	ldw	r4,-16(fp)
  8057f4:	20801117 	ldw	r2,68(r4)
  8057f8:	20c01217 	ldw	r3,72(r4)
  8057fc:	100d883a 	mov	r6,r2
  805800:	180f883a 	mov	r7,r3
  805804:	4009883a 	mov	r4,r8
  805808:	480b883a 	mov	r5,r9
  80580c:	08089a40 	call	8089a4 <__subdf3>
  805810:	1009883a 	mov	r4,r2
  805814:	180b883a 	mov	r5,r3
  805818:	2005883a 	mov	r2,r4
  80581c:	2807883a 	mov	r3,r5
  805820:	100d883a 	mov	r6,r2
  805824:	180f883a 	mov	r7,r3
  805828:	8009883a 	mov	r4,r16
  80582c:	880b883a 	mov	r5,r17
  805830:	08081980 	call	808198 <__ledf2>
  805834:	1000040e 	bge	r2,zero,805848 <logic+0x544c>
  805838:	e13ffc17 	ldw	r4,-16(fp)
  80583c:	20800817 	ldw	r2,32(r4)
  805840:	20c00917 	ldw	r3,36(r4)
  805844:	00001206 	br	805890 <logic+0x5494>
  805848:	e0bffc17 	ldw	r2,-16(fp)
  80584c:	10800317 	ldw	r2,12(r2)
  805850:	1009883a 	mov	r4,r2
  805854:	08092a00 	call	8092a0 <__floatsidf>
  805858:	1011883a 	mov	r8,r2
  80585c:	1813883a 	mov	r9,r3
  805860:	e13ffc17 	ldw	r4,-16(fp)
  805864:	20801117 	ldw	r2,68(r4)
  805868:	20c01217 	ldw	r3,72(r4)
  80586c:	100d883a 	mov	r6,r2
  805870:	180f883a 	mov	r7,r3
  805874:	4009883a 	mov	r4,r8
  805878:	480b883a 	mov	r5,r9
  80587c:	08089a40 	call	8089a4 <__subdf3>
  805880:	1009883a 	mov	r4,r2
  805884:	180b883a 	mov	r5,r3
  805888:	2005883a 	mov	r2,r4
  80588c:	2807883a 	mov	r3,r5
  805890:	e13ffc17 	ldw	r4,-16(fp)
  805894:	20800815 	stw	r2,32(r4)
  805898:	20c00915 	stw	r3,36(r4)
  }
  d->_cg122 = d->_Pacemaker_local__Atrig6 || d->_Pacemaker_local__Atrig7;
  80589c:	e0bffc17 	ldw	r2,-16(fp)
  8058a0:	108019c3 	ldbu	r2,103(r2)
  8058a4:	10803fcc 	andi	r2,r2,255
  8058a8:	1080201c 	xori	r2,r2,128
  8058ac:	10bfe004 	addi	r2,r2,-128
  8058b0:	1000061e 	bne	r2,zero,8058cc <logic+0x54d0>
  8058b4:	e0bffc17 	ldw	r2,-16(fp)
  8058b8:	10801a03 	ldbu	r2,104(r2)
  8058bc:	10803fcc 	andi	r2,r2,255
  8058c0:	1080201c 	xori	r2,r2,128
  8058c4:	10bfe004 	addi	r2,r2,-128
  8058c8:	10000226 	beq	r2,zero,8058d4 <logic+0x54d8>
  8058cc:	00800044 	movi	r2,1
  8058d0:	00000106 	br	8058d8 <logic+0x54dc>
  8058d4:	0005883a 	mov	r2,zero
  8058d8:	1007883a 	mov	r3,r2
  8058dc:	e0bffc17 	ldw	r2,-16(fp)
  8058e0:	10c04cc5 	stb	r3,307(r2)
  d->_g111 = (d->_g140 && !d->_cg122) || (d->_g124 && !d->_cg126);
  8058e4:	e0bffc17 	ldw	r2,-16(fp)
  8058e8:	10803383 	ldbu	r2,206(r2)
  8058ec:	10803fcc 	andi	r2,r2,255
  8058f0:	1080201c 	xori	r2,r2,128
  8058f4:	10bfe004 	addi	r2,r2,-128
  8058f8:	10000626 	beq	r2,zero,805914 <logic+0x5518>
  8058fc:	e0bffc17 	ldw	r2,-16(fp)
  805900:	10804cc3 	ldbu	r2,307(r2)
  805904:	10803fcc 	andi	r2,r2,255
  805908:	1080201c 	xori	r2,r2,128
  80590c:	10bfe004 	addi	r2,r2,-128
  805910:	10000c26 	beq	r2,zero,805944 <logic+0x5548>
  805914:	e0bffc17 	ldw	r2,-16(fp)
  805918:	10803043 	ldbu	r2,193(r2)
  80591c:	10803fcc 	andi	r2,r2,255
  805920:	1080201c 	xori	r2,r2,128
  805924:	10bfe004 	addi	r2,r2,-128
  805928:	10000826 	beq	r2,zero,80594c <logic+0x5550>
  80592c:	e0bffc17 	ldw	r2,-16(fp)
  805930:	10804d03 	ldbu	r2,308(r2)
  805934:	10803fcc 	andi	r2,r2,255
  805938:	1080201c 	xori	r2,r2,128
  80593c:	10bfe004 	addi	r2,r2,-128
  805940:	1000021e 	bne	r2,zero,80594c <logic+0x5550>
  805944:	00800044 	movi	r2,1
  805948:	00000106 	br	805950 <logic+0x5554>
  80594c:	0005883a 	mov	r2,zero
  805950:	1007883a 	mov	r3,r2
  805954:	e0bffc17 	ldw	r2,-16(fp)
  805958:	10c02e05 	stb	r3,184(r2)
  d->_g115 = d->_g136_e3 && !d->_cg121;
  80595c:	e0bffc17 	ldw	r2,-16(fp)
  805960:	10805803 	ldbu	r2,352(r2)
  805964:	10803fcc 	andi	r2,r2,255
  805968:	1080201c 	xori	r2,r2,128
  80596c:	10bfe004 	addi	r2,r2,-128
  805970:	10000826 	beq	r2,zero,805994 <logic+0x5598>
  805974:	e0bffc17 	ldw	r2,-16(fp)
  805978:	10804c83 	ldbu	r2,306(r2)
  80597c:	10803fcc 	andi	r2,r2,255
  805980:	1080201c 	xori	r2,r2,128
  805984:	10bfe004 	addi	r2,r2,-128
  805988:	1000021e 	bne	r2,zero,805994 <logic+0x5598>
  80598c:	00800044 	movi	r2,1
  805990:	00000106 	br	805998 <logic+0x559c>
  805994:	0005883a 	mov	r2,zero
  805998:	1007883a 	mov	r3,r2
  80599c:	e0bffc17 	ldw	r2,-16(fp)
  8059a0:	10c02ec5 	stb	r3,187(r2)
  d->_cg131 = d->_Pacemaker_local__Atrig6 || d->_Pacemaker_local__Atrig7;
  8059a4:	e0bffc17 	ldw	r2,-16(fp)
  8059a8:	108019c3 	ldbu	r2,103(r2)
  8059ac:	10803fcc 	andi	r2,r2,255
  8059b0:	1080201c 	xori	r2,r2,128
  8059b4:	10bfe004 	addi	r2,r2,-128
  8059b8:	1000061e 	bne	r2,zero,8059d4 <logic+0x55d8>
  8059bc:	e0bffc17 	ldw	r2,-16(fp)
  8059c0:	10801a03 	ldbu	r2,104(r2)
  8059c4:	10803fcc 	andi	r2,r2,255
  8059c8:	1080201c 	xori	r2,r2,128
  8059cc:	10bfe004 	addi	r2,r2,-128
  8059d0:	10000226 	beq	r2,zero,8059dc <logic+0x55e0>
  8059d4:	00800044 	movi	r2,1
  8059d8:	00000106 	br	8059e0 <logic+0x55e4>
  8059dc:	0005883a 	mov	r2,zero
  8059e0:	1007883a 	mov	r3,r2
  8059e4:	e0bffc17 	ldw	r2,-16(fp)
  8059e8:	10c04dc5 	stb	r3,311(r2)
  d->_g120 = (d->_g125 && !d->_cg128) || (d->_g115 && !d->_cg131);
  8059ec:	e0bffc17 	ldw	r2,-16(fp)
  8059f0:	10803083 	ldbu	r2,194(r2)
  8059f4:	10803fcc 	andi	r2,r2,255
  8059f8:	1080201c 	xori	r2,r2,128
  8059fc:	10bfe004 	addi	r2,r2,-128
  805a00:	10000626 	beq	r2,zero,805a1c <logic+0x5620>
  805a04:	e0bffc17 	ldw	r2,-16(fp)
  805a08:	10804d83 	ldbu	r2,310(r2)
  805a0c:	10803fcc 	andi	r2,r2,255
  805a10:	1080201c 	xori	r2,r2,128
  805a14:	10bfe004 	addi	r2,r2,-128
  805a18:	10000c26 	beq	r2,zero,805a4c <logic+0x5650>
  805a1c:	e0bffc17 	ldw	r2,-16(fp)
  805a20:	10802ec3 	ldbu	r2,187(r2)
  805a24:	10803fcc 	andi	r2,r2,255
  805a28:	1080201c 	xori	r2,r2,128
  805a2c:	10bfe004 	addi	r2,r2,-128
  805a30:	10000826 	beq	r2,zero,805a54 <logic+0x5658>
  805a34:	e0bffc17 	ldw	r2,-16(fp)
  805a38:	10804dc3 	ldbu	r2,311(r2)
  805a3c:	10803fcc 	andi	r2,r2,255
  805a40:	1080201c 	xori	r2,r2,128
  805a44:	10bfe004 	addi	r2,r2,-128
  805a48:	1000021e 	bne	r2,zero,805a54 <logic+0x5658>
  805a4c:	00800044 	movi	r2,1
  805a50:	00000106 	br	805a58 <logic+0x565c>
  805a54:	0005883a 	mov	r2,zero
  805a58:	1007883a 	mov	r3,r2
  805a5c:	e0bffc17 	ldw	r2,-16(fp)
  805a60:	10c02fc5 	stb	r3,191(r2)
  d->_g117 = d->_g136_e3 || (d->_g137 && !d->_cg137);
  805a64:	e0bffc17 	ldw	r2,-16(fp)
  805a68:	10805803 	ldbu	r2,352(r2)
  805a6c:	10803fcc 	andi	r2,r2,255
  805a70:	1080201c 	xori	r2,r2,128
  805a74:	10bfe004 	addi	r2,r2,-128
  805a78:	10000c1e 	bne	r2,zero,805aac <logic+0x56b0>
  805a7c:	e0bffc17 	ldw	r2,-16(fp)
  805a80:	108032c3 	ldbu	r2,203(r2)
  805a84:	10803fcc 	andi	r2,r2,255
  805a88:	1080201c 	xori	r2,r2,128
  805a8c:	10bfe004 	addi	r2,r2,-128
  805a90:	10000826 	beq	r2,zero,805ab4 <logic+0x56b8>
  805a94:	e0bffc17 	ldw	r2,-16(fp)
  805a98:	10804e03 	ldbu	r2,312(r2)
  805a9c:	10803fcc 	andi	r2,r2,255
  805aa0:	1080201c 	xori	r2,r2,128
  805aa4:	10bfe004 	addi	r2,r2,-128
  805aa8:	1000021e 	bne	r2,zero,805ab4 <logic+0x56b8>
  805aac:	00800044 	movi	r2,1
  805ab0:	00000106 	br	805ab8 <logic+0x56bc>
  805ab4:	0005883a 	mov	r2,zero
  805ab8:	1007883a 	mov	r3,r2
  805abc:	e0bffc17 	ldw	r2,-16(fp)
  805ac0:	10c02f45 	stb	r3,189(r2)
  if (d->_g164_e2) {
  805ac4:	e0bffc17 	ldw	r2,-16(fp)
  805ac8:	10805883 	ldbu	r2,354(r2)
  805acc:	10803fcc 	andi	r2,r2,255
  805ad0:	1080201c 	xori	r2,r2,128
  805ad4:	10bfe004 	addi	r2,r2,-128
  805ad8:	10000626 	beq	r2,zero,805af4 <logic+0x56f8>
    d->VP |= 1;
  805adc:	e0bffc17 	ldw	r2,-16(fp)
  805ae0:	10800ac3 	ldbu	r2,43(r2)
  805ae4:	10800054 	ori	r2,r2,1
  805ae8:	1007883a 	mov	r3,r2
  805aec:	e0bffc17 	ldw	r2,-16(fp)
  805af0:	10c00ac5 	stb	r3,43(r2)
  }
  d->_g122 = d->_pg205;
  805af4:	e0bffc17 	ldw	r2,-16(fp)
  805af8:	10c06203 	ldbu	r3,392(r2)
  805afc:	e0bffc17 	ldw	r2,-16(fp)
  805b00:	10c03005 	stb	r3,192(r2)
  d->_g126 = d->_pg176;
  805b04:	e0bffc17 	ldw	r2,-16(fp)
  805b08:	10c06243 	ldbu	r3,393(r2)
  805b0c:	e0bffc17 	ldw	r2,-16(fp)
  805b10:	10c030c5 	stb	r3,195(r2)
  d->_g131 = !(d->_g122 || d->_g126);
  805b14:	e0bffc17 	ldw	r2,-16(fp)
  805b18:	10803003 	ldbu	r2,192(r2)
  805b1c:	10803fcc 	andi	r2,r2,255
  805b20:	1080201c 	xori	r2,r2,128
  805b24:	10bfe004 	addi	r2,r2,-128
  805b28:	1000081e 	bne	r2,zero,805b4c <logic+0x5750>
  805b2c:	e0bffc17 	ldw	r2,-16(fp)
  805b30:	108030c3 	ldbu	r2,195(r2)
  805b34:	10803fcc 	andi	r2,r2,255
  805b38:	1080201c 	xori	r2,r2,128
  805b3c:	10bfe004 	addi	r2,r2,-128
  805b40:	1000021e 	bne	r2,zero,805b4c <logic+0x5750>
  805b44:	00800044 	movi	r2,1
  805b48:	00000106 	br	805b50 <logic+0x5754>
  805b4c:	0005883a 	mov	r2,zero
  805b50:	1007883a 	mov	r3,r2
  805b54:	e0bffc17 	ldw	r2,-16(fp)
  805b58:	10c031c5 	stb	r3,199(r2)
  d->_g128 = d->_pg184;
  805b5c:	e0bffc17 	ldw	r2,-16(fp)
  805b60:	10c06283 	ldbu	r3,394(r2)
  805b64:	e0bffc17 	ldw	r2,-16(fp)
  805b68:	10c03145 	stb	r3,197(r2)
  d->_g109 = d->_g128 && d->AS;
  805b6c:	e0bffc17 	ldw	r2,-16(fp)
  805b70:	10803143 	ldbu	r2,197(r2)
  805b74:	10803fcc 	andi	r2,r2,255
  805b78:	1080201c 	xori	r2,r2,128
  805b7c:	10bfe004 	addi	r2,r2,-128
  805b80:	10000826 	beq	r2,zero,805ba4 <logic+0x57a8>
  805b84:	e0bffc17 	ldw	r2,-16(fp)
  805b88:	10800a03 	ldbu	r2,40(r2)
  805b8c:	10803fcc 	andi	r2,r2,255
  805b90:	1080201c 	xori	r2,r2,128
  805b94:	10bfe004 	addi	r2,r2,-128
  805b98:	10000226 	beq	r2,zero,805ba4 <logic+0x57a8>
  805b9c:	00800044 	movi	r2,1
  805ba0:	00000106 	br	805ba8 <logic+0x57ac>
  805ba4:	0005883a 	mov	r2,zero
  805ba8:	1007883a 	mov	r3,r2
  805bac:	e0bffc17 	ldw	r2,-16(fp)
  805bb0:	10c02dc5 	stb	r3,183(r2)
  if (d->_g109) {
  805bb4:	e0bffc17 	ldw	r2,-16(fp)
  805bb8:	10802dc3 	ldbu	r2,183(r2)
  805bbc:	10803fcc 	andi	r2,r2,255
  805bc0:	1080201c 	xori	r2,r2,128
  805bc4:	10bfe004 	addi	r2,r2,-128
  805bc8:	10000326 	beq	r2,zero,805bd8 <logic+0x57dc>
    d->_Pacemaker_local__Atrig11 = 1;
  805bcc:	e0bffc17 	ldw	r2,-16(fp)
  805bd0:	00c00044 	movi	r3,1
  805bd4:	10c01b05 	stb	r3,108(r2)
  }
  d->_g137 = d->_pg202;
  805bd8:	e0bffc17 	ldw	r2,-16(fp)
  805bdc:	10c062c3 	ldbu	r3,395(r2)
  805be0:	e0bffc17 	ldw	r2,-16(fp)
  805be4:	10c032c5 	stb	r3,203(r2)
  if (d->_g137) {
  805be8:	e0bffc17 	ldw	r2,-16(fp)
  805bec:	108032c3 	ldbu	r2,203(r2)
  805bf0:	10803fcc 	andi	r2,r2,255
  805bf4:	1080201c 	xori	r2,r2,128
  805bf8:	10bfe004 	addi	r2,r2,-128
  805bfc:	10001226 	beq	r2,zero,805c48 <logic+0x584c>
    d->_Pacemaker_local__region5_AEI_x += d->deltaT;
  805c00:	e13ffc17 	ldw	r4,-16(fp)
  805c04:	20801517 	ldw	r2,84(r4)
  805c08:	20c01617 	ldw	r3,88(r4)
  805c0c:	e1bffc17 	ldw	r6,-16(fp)
  805c10:	31000617 	ldw	r4,24(r6)
  805c14:	31400717 	ldw	r5,28(r6)
  805c18:	200d883a 	mov	r6,r4
  805c1c:	280f883a 	mov	r7,r5
  805c20:	1009883a 	mov	r4,r2
  805c24:	180b883a 	mov	r5,r3
  805c28:	08078100 	call	807810 <__adddf3>
  805c2c:	1009883a 	mov	r4,r2
  805c30:	180b883a 	mov	r5,r3
  805c34:	2005883a 	mov	r2,r4
  805c38:	2807883a 	mov	r3,r5
  805c3c:	e13ffc17 	ldw	r4,-16(fp)
  805c40:	20801515 	stw	r2,84(r4)
  805c44:	20c01615 	stw	r3,88(r4)
  }
  d->_g202 = d->_g128 && !d->AS;
  805c48:	e0bffc17 	ldw	r2,-16(fp)
  805c4c:	10803143 	ldbu	r2,197(r2)
  805c50:	10803fcc 	andi	r2,r2,255
  805c54:	1080201c 	xori	r2,r2,128
  805c58:	10bfe004 	addi	r2,r2,-128
  805c5c:	10000826 	beq	r2,zero,805c80 <logic+0x5884>
  805c60:	e0bffc17 	ldw	r2,-16(fp)
  805c64:	10800a03 	ldbu	r2,40(r2)
  805c68:	10803fcc 	andi	r2,r2,255
  805c6c:	1080201c 	xori	r2,r2,128
  805c70:	10bfe004 	addi	r2,r2,-128
  805c74:	1000021e 	bne	r2,zero,805c80 <logic+0x5884>
  805c78:	00800044 	movi	r2,1
  805c7c:	00000106 	br	805c84 <logic+0x5888>
  805c80:	0005883a 	mov	r2,zero
  805c84:	1007883a 	mov	r3,r2
  805c88:	e0bffc17 	ldw	r2,-16(fp)
  805c8c:	10c03e45 	stb	r3,249(r2)
  d->_cg202 = d->_Pacemaker_local__region5_AEI_x >= d->AEI;
  805c90:	e0bffc17 	ldw	r2,-16(fp)
  805c94:	14001517 	ldw	r16,84(r2)
  805c98:	14401617 	ldw	r17,88(r2)
  805c9c:	e0bffc17 	ldw	r2,-16(fp)
  805ca0:	10800117 	ldw	r2,4(r2)
  805ca4:	1009883a 	mov	r4,r2
  805ca8:	08092a00 	call	8092a0 <__floatsidf>
  805cac:	1009883a 	mov	r4,r2
  805cb0:	180b883a 	mov	r5,r3
  805cb4:	04800044 	movi	r18,1
  805cb8:	200d883a 	mov	r6,r4
  805cbc:	280f883a 	mov	r7,r5
  805cc0:	8009883a 	mov	r4,r16
  805cc4:	880b883a 	mov	r5,r17
  805cc8:	08080bc0 	call	8080bc <__gedf2>
  805ccc:	1000010e 	bge	r2,zero,805cd4 <logic+0x58d8>
  805cd0:	0025883a 	mov	r18,zero
  805cd4:	9007883a 	mov	r3,r18
  805cd8:	e0bffc17 	ldw	r2,-16(fp)
  805cdc:	10c05505 	stb	r3,340(r2)
  d->_g203 = d->_g202 && d->_cg202;
  805ce0:	e0bffc17 	ldw	r2,-16(fp)
  805ce4:	10803e43 	ldbu	r2,249(r2)
  805ce8:	10803fcc 	andi	r2,r2,255
  805cec:	1080201c 	xori	r2,r2,128
  805cf0:	10bfe004 	addi	r2,r2,-128
  805cf4:	10000826 	beq	r2,zero,805d18 <logic+0x591c>
  805cf8:	e0bffc17 	ldw	r2,-16(fp)
  805cfc:	10805503 	ldbu	r2,340(r2)
  805d00:	10803fcc 	andi	r2,r2,255
  805d04:	1080201c 	xori	r2,r2,128
  805d08:	10bfe004 	addi	r2,r2,-128
  805d0c:	10000226 	beq	r2,zero,805d18 <logic+0x591c>
  805d10:	00800044 	movi	r2,1
  805d14:	00000106 	br	805d1c <logic+0x5920>
  805d18:	0005883a 	mov	r2,zero
  805d1c:	1007883a 	mov	r3,r2
  805d20:	e0bffc17 	ldw	r2,-16(fp)
  805d24:	10c03e85 	stb	r3,250(r2)
  if (d->_g203) {
  805d28:	e0bffc17 	ldw	r2,-16(fp)
  805d2c:	10803e83 	ldbu	r2,250(r2)
  805d30:	10803fcc 	andi	r2,r2,255
  805d34:	1080201c 	xori	r2,r2,128
  805d38:	10bfe004 	addi	r2,r2,-128
  805d3c:	10000326 	beq	r2,zero,805d4c <logic+0x5950>
    d->_Pacemaker_local__Atrig12 = 1;
  805d40:	e0bffc17 	ldw	r2,-16(fp)
  805d44:	00c00044 	movi	r3,1
  805d48:	10c01b45 	stb	r3,109(r2)
  }
  d->_g189 = d->_g126 || d->_g122;
  805d4c:	e0bffc17 	ldw	r2,-16(fp)
  805d50:	108030c3 	ldbu	r2,195(r2)
  805d54:	10803fcc 	andi	r2,r2,255
  805d58:	1080201c 	xori	r2,r2,128
  805d5c:	10bfe004 	addi	r2,r2,-128
  805d60:	1000061e 	bne	r2,zero,805d7c <logic+0x5980>
  805d64:	e0bffc17 	ldw	r2,-16(fp)
  805d68:	10803003 	ldbu	r2,192(r2)
  805d6c:	10803fcc 	andi	r2,r2,255
  805d70:	1080201c 	xori	r2,r2,128
  805d74:	10bfe004 	addi	r2,r2,-128
  805d78:	10000226 	beq	r2,zero,805d84 <logic+0x5988>
  805d7c:	00800044 	movi	r2,1
  805d80:	00000106 	br	805d88 <logic+0x598c>
  805d84:	0005883a 	mov	r2,zero
  805d88:	1007883a 	mov	r3,r2
  805d8c:	e0bffc17 	ldw	r2,-16(fp)
  805d90:	10c03bc5 	stb	r3,239(r2)
  d->_cg190 = d->_Pacemaker_local__region5_AEI_x < d->AEI;
  805d94:	e0bffc17 	ldw	r2,-16(fp)
  805d98:	14001517 	ldw	r16,84(r2)
  805d9c:	14401617 	ldw	r17,88(r2)
  805da0:	e0bffc17 	ldw	r2,-16(fp)
  805da4:	10800117 	ldw	r2,4(r2)
  805da8:	1009883a 	mov	r4,r2
  805dac:	08092a00 	call	8092a0 <__floatsidf>
  805db0:	1009883a 	mov	r4,r2
  805db4:	180b883a 	mov	r5,r3
  805db8:	04800044 	movi	r18,1
  805dbc:	200d883a 	mov	r6,r4
  805dc0:	280f883a 	mov	r7,r5
  805dc4:	8009883a 	mov	r4,r16
  805dc8:	880b883a 	mov	r5,r17
  805dcc:	08081980 	call	808198 <__ledf2>
  805dd0:	10000116 	blt	r2,zero,805dd8 <logic+0x59dc>
  805dd4:	0025883a 	mov	r18,zero
  805dd8:	9007883a 	mov	r3,r18
  805ddc:	e0bffc17 	ldw	r2,-16(fp)
  805de0:	10c05445 	stb	r3,337(r2)
  d->_g195 = d->_g189 && d->_cg190;
  805de4:	e0bffc17 	ldw	r2,-16(fp)
  805de8:	10803bc3 	ldbu	r2,239(r2)
  805dec:	10803fcc 	andi	r2,r2,255
  805df0:	1080201c 	xori	r2,r2,128
  805df4:	10bfe004 	addi	r2,r2,-128
  805df8:	10000826 	beq	r2,zero,805e1c <logic+0x5a20>
  805dfc:	e0bffc17 	ldw	r2,-16(fp)
  805e00:	10805443 	ldbu	r2,337(r2)
  805e04:	10803fcc 	andi	r2,r2,255
  805e08:	1080201c 	xori	r2,r2,128
  805e0c:	10bfe004 	addi	r2,r2,-128
  805e10:	10000226 	beq	r2,zero,805e1c <logic+0x5a20>
  805e14:	00800044 	movi	r2,1
  805e18:	00000106 	br	805e20 <logic+0x5a24>
  805e1c:	0005883a 	mov	r2,zero
  805e20:	1007883a 	mov	r3,r2
  805e24:	e0bffc17 	ldw	r2,-16(fp)
  805e28:	10c03d05 	stb	r3,244(r2)
  if (d->_g195) {
  805e2c:	e0bffc17 	ldw	r2,-16(fp)
  805e30:	10803d03 	ldbu	r2,244(r2)
  805e34:	10803fcc 	andi	r2,r2,255
  805e38:	1080201c 	xori	r2,r2,128
  805e3c:	10bfe004 	addi	r2,r2,-128
  805e40:	10003426 	beq	r2,zero,805f14 <logic+0x5b18>
    d->sleepT = (d->sleepT < (d->AEI - d->_Pacemaker_local__region5_AEI_x)) ? d->sleepT : (d->AEI - d->_Pacemaker_local__region5_AEI_x);
  805e44:	e0bffc17 	ldw	r2,-16(fp)
  805e48:	14000817 	ldw	r16,32(r2)
  805e4c:	14400917 	ldw	r17,36(r2)
  805e50:	e0bffc17 	ldw	r2,-16(fp)
  805e54:	10800117 	ldw	r2,4(r2)
  805e58:	1009883a 	mov	r4,r2
  805e5c:	08092a00 	call	8092a0 <__floatsidf>
  805e60:	1011883a 	mov	r8,r2
  805e64:	1813883a 	mov	r9,r3
  805e68:	e13ffc17 	ldw	r4,-16(fp)
  805e6c:	20801517 	ldw	r2,84(r4)
  805e70:	20c01617 	ldw	r3,88(r4)
  805e74:	100d883a 	mov	r6,r2
  805e78:	180f883a 	mov	r7,r3
  805e7c:	4009883a 	mov	r4,r8
  805e80:	480b883a 	mov	r5,r9
  805e84:	08089a40 	call	8089a4 <__subdf3>
  805e88:	1009883a 	mov	r4,r2
  805e8c:	180b883a 	mov	r5,r3
  805e90:	2005883a 	mov	r2,r4
  805e94:	2807883a 	mov	r3,r5
  805e98:	100d883a 	mov	r6,r2
  805e9c:	180f883a 	mov	r7,r3
  805ea0:	8009883a 	mov	r4,r16
  805ea4:	880b883a 	mov	r5,r17
  805ea8:	08081980 	call	808198 <__ledf2>
  805eac:	1000040e 	bge	r2,zero,805ec0 <logic+0x5ac4>
  805eb0:	e13ffc17 	ldw	r4,-16(fp)
  805eb4:	20800817 	ldw	r2,32(r4)
  805eb8:	20c00917 	ldw	r3,36(r4)
  805ebc:	00001206 	br	805f08 <logic+0x5b0c>
  805ec0:	e0bffc17 	ldw	r2,-16(fp)
  805ec4:	10800117 	ldw	r2,4(r2)
  805ec8:	1009883a 	mov	r4,r2
  805ecc:	08092a00 	call	8092a0 <__floatsidf>
  805ed0:	1011883a 	mov	r8,r2
  805ed4:	1813883a 	mov	r9,r3
  805ed8:	e13ffc17 	ldw	r4,-16(fp)
  805edc:	20801517 	ldw	r2,84(r4)
  805ee0:	20c01617 	ldw	r3,88(r4)
  805ee4:	100d883a 	mov	r6,r2
  805ee8:	180f883a 	mov	r7,r3
  805eec:	4009883a 	mov	r4,r8
  805ef0:	480b883a 	mov	r5,r9
  805ef4:	08089a40 	call	8089a4 <__subdf3>
  805ef8:	1009883a 	mov	r4,r2
  805efc:	180b883a 	mov	r5,r3
  805f00:	2005883a 	mov	r2,r4
  805f04:	2807883a 	mov	r3,r5
  805f08:	e13ffc17 	ldw	r4,-16(fp)
  805f0c:	20800815 	stw	r2,32(r4)
  805f10:	20c00915 	stw	r3,36(r4)
  }
  d->_cg191 = d->_Pacemaker_local__Atrig11 || d->_Pacemaker_local__Atrig12;
  805f14:	e0bffc17 	ldw	r2,-16(fp)
  805f18:	10801b03 	ldbu	r2,108(r2)
  805f1c:	10803fcc 	andi	r2,r2,255
  805f20:	1080201c 	xori	r2,r2,128
  805f24:	10bfe004 	addi	r2,r2,-128
  805f28:	1000061e 	bne	r2,zero,805f44 <logic+0x5b48>
  805f2c:	e0bffc17 	ldw	r2,-16(fp)
  805f30:	10801b43 	ldbu	r2,109(r2)
  805f34:	10803fcc 	andi	r2,r2,255
  805f38:	1080201c 	xori	r2,r2,128
  805f3c:	10bfe004 	addi	r2,r2,-128
  805f40:	10000226 	beq	r2,zero,805f4c <logic+0x5b50>
  805f44:	00800044 	movi	r2,1
  805f48:	00000106 	br	805f50 <logic+0x5b54>
  805f4c:	0005883a 	mov	r2,zero
  805f50:	1007883a 	mov	r3,r2
  805f54:	e0bffc17 	ldw	r2,-16(fp)
  805f58:	10c05405 	stb	r3,336(r2)
  d->_g190 = d->_g189 && !d->_cg190;
  805f5c:	e0bffc17 	ldw	r2,-16(fp)
  805f60:	10803bc3 	ldbu	r2,239(r2)
  805f64:	10803fcc 	andi	r2,r2,255
  805f68:	1080201c 	xori	r2,r2,128
  805f6c:	10bfe004 	addi	r2,r2,-128
  805f70:	10000826 	beq	r2,zero,805f94 <logic+0x5b98>
  805f74:	e0bffc17 	ldw	r2,-16(fp)
  805f78:	10805443 	ldbu	r2,337(r2)
  805f7c:	10803fcc 	andi	r2,r2,255
  805f80:	1080201c 	xori	r2,r2,128
  805f84:	10bfe004 	addi	r2,r2,-128
  805f88:	1000021e 	bne	r2,zero,805f94 <logic+0x5b98>
  805f8c:	00800044 	movi	r2,1
  805f90:	00000106 	br	805f98 <logic+0x5b9c>
  805f94:	0005883a 	mov	r2,zero
  805f98:	1007883a 	mov	r3,r2
  805f9c:	e0bffc17 	ldw	r2,-16(fp)
  805fa0:	10c03c05 	stb	r3,240(r2)
  d->_cg193 = d->_Pacemaker_local__Atrig11 || d->_Pacemaker_local__Atrig12;
  805fa4:	e0bffc17 	ldw	r2,-16(fp)
  805fa8:	10801b03 	ldbu	r2,108(r2)
  805fac:	10803fcc 	andi	r2,r2,255
  805fb0:	1080201c 	xori	r2,r2,128
  805fb4:	10bfe004 	addi	r2,r2,-128
  805fb8:	1000061e 	bne	r2,zero,805fd4 <logic+0x5bd8>
  805fbc:	e0bffc17 	ldw	r2,-16(fp)
  805fc0:	10801b43 	ldbu	r2,109(r2)
  805fc4:	10803fcc 	andi	r2,r2,255
  805fc8:	1080201c 	xori	r2,r2,128
  805fcc:	10bfe004 	addi	r2,r2,-128
  805fd0:	10000226 	beq	r2,zero,805fdc <logic+0x5be0>
  805fd4:	00800044 	movi	r2,1
  805fd8:	00000106 	br	805fe0 <logic+0x5be4>
  805fdc:	0005883a 	mov	r2,zero
  805fe0:	1007883a 	mov	r3,r2
  805fe4:	e0bffc17 	ldw	r2,-16(fp)
  805fe8:	10c05485 	stb	r3,338(r2)
  d->_g192 = (d->_g195 && d->_cg191) || (d->_g190 && d->_cg193);
  805fec:	e0bffc17 	ldw	r2,-16(fp)
  805ff0:	10803d03 	ldbu	r2,244(r2)
  805ff4:	10803fcc 	andi	r2,r2,255
  805ff8:	1080201c 	xori	r2,r2,128
  805ffc:	10bfe004 	addi	r2,r2,-128
  806000:	10000626 	beq	r2,zero,80601c <logic+0x5c20>
  806004:	e0bffc17 	ldw	r2,-16(fp)
  806008:	10805403 	ldbu	r2,336(r2)
  80600c:	10803fcc 	andi	r2,r2,255
  806010:	1080201c 	xori	r2,r2,128
  806014:	10bfe004 	addi	r2,r2,-128
  806018:	10000c1e 	bne	r2,zero,80604c <logic+0x5c50>
  80601c:	e0bffc17 	ldw	r2,-16(fp)
  806020:	10803c03 	ldbu	r2,240(r2)
  806024:	10803fcc 	andi	r2,r2,255
  806028:	1080201c 	xori	r2,r2,128
  80602c:	10bfe004 	addi	r2,r2,-128
  806030:	10000826 	beq	r2,zero,806054 <logic+0x5c58>
  806034:	e0bffc17 	ldw	r2,-16(fp)
  806038:	10805483 	ldbu	r2,338(r2)
  80603c:	10803fcc 	andi	r2,r2,255
  806040:	1080201c 	xori	r2,r2,128
  806044:	10bfe004 	addi	r2,r2,-128
  806048:	10000226 	beq	r2,zero,806054 <logic+0x5c58>
  80604c:	00800044 	movi	r2,1
  806050:	00000106 	br	806058 <logic+0x5c5c>
  806054:	0005883a 	mov	r2,zero
  806058:	1007883a 	mov	r3,r2
  80605c:	e0bffc17 	ldw	r2,-16(fp)
  806060:	10c03c85 	stb	r3,242(r2)
  d->_g199 = !d->_g128;
  806064:	e0bffc17 	ldw	r2,-16(fp)
  806068:	10803143 	ldbu	r2,197(r2)
  80606c:	10803fcc 	andi	r2,r2,255
  806070:	1080201c 	xori	r2,r2,128
  806074:	10bfe004 	addi	r2,r2,-128
  806078:	1005003a 	cmpeq	r2,r2,zero
  80607c:	1007883a 	mov	r3,r2
  806080:	e0bffc17 	ldw	r2,-16(fp)
  806084:	10c03d85 	stb	r3,246(r2)
  d->_g200 = d->_g109 || d->_g203;
  806088:	e0bffc17 	ldw	r2,-16(fp)
  80608c:	10802dc3 	ldbu	r2,183(r2)
  806090:	10803fcc 	andi	r2,r2,255
  806094:	1080201c 	xori	r2,r2,128
  806098:	10bfe004 	addi	r2,r2,-128
  80609c:	1000061e 	bne	r2,zero,8060b8 <logic+0x5cbc>
  8060a0:	e0bffc17 	ldw	r2,-16(fp)
  8060a4:	10803e83 	ldbu	r2,250(r2)
  8060a8:	10803fcc 	andi	r2,r2,255
  8060ac:	1080201c 	xori	r2,r2,128
  8060b0:	10bfe004 	addi	r2,r2,-128
  8060b4:	10000226 	beq	r2,zero,8060c0 <logic+0x5cc4>
  8060b8:	00800044 	movi	r2,1
  8060bc:	00000106 	br	8060c4 <logic+0x5cc8>
  8060c0:	0005883a 	mov	r2,zero
  8060c4:	1007883a 	mov	r3,r2
  8060c8:	e0bffc17 	ldw	r2,-16(fp)
  8060cc:	10c03dc5 	stb	r3,247(r2)
  d->_g203 = (d->_g131 || d->_g192) && (d->_g199 || d->_g200) && (d->_g192 || d->_g200);
  8060d0:	e0bffc17 	ldw	r2,-16(fp)
  8060d4:	108031c3 	ldbu	r2,199(r2)
  8060d8:	10803fcc 	andi	r2,r2,255
  8060dc:	1080201c 	xori	r2,r2,128
  8060e0:	10bfe004 	addi	r2,r2,-128
  8060e4:	1000061e 	bne	r2,zero,806100 <logic+0x5d04>
  8060e8:	e0bffc17 	ldw	r2,-16(fp)
  8060ec:	10803c83 	ldbu	r2,242(r2)
  8060f0:	10803fcc 	andi	r2,r2,255
  8060f4:	1080201c 	xori	r2,r2,128
  8060f8:	10bfe004 	addi	r2,r2,-128
  8060fc:	10001a26 	beq	r2,zero,806168 <logic+0x5d6c>
  806100:	e0bffc17 	ldw	r2,-16(fp)
  806104:	10803d83 	ldbu	r2,246(r2)
  806108:	10803fcc 	andi	r2,r2,255
  80610c:	1080201c 	xori	r2,r2,128
  806110:	10bfe004 	addi	r2,r2,-128
  806114:	1000061e 	bne	r2,zero,806130 <logic+0x5d34>
  806118:	e0bffc17 	ldw	r2,-16(fp)
  80611c:	10803dc3 	ldbu	r2,247(r2)
  806120:	10803fcc 	andi	r2,r2,255
  806124:	1080201c 	xori	r2,r2,128
  806128:	10bfe004 	addi	r2,r2,-128
  80612c:	10000e26 	beq	r2,zero,806168 <logic+0x5d6c>
  806130:	e0bffc17 	ldw	r2,-16(fp)
  806134:	10803c83 	ldbu	r2,242(r2)
  806138:	10803fcc 	andi	r2,r2,255
  80613c:	1080201c 	xori	r2,r2,128
  806140:	10bfe004 	addi	r2,r2,-128
  806144:	1000061e 	bne	r2,zero,806160 <logic+0x5d64>
  806148:	e0bffc17 	ldw	r2,-16(fp)
  80614c:	10803dc3 	ldbu	r2,247(r2)
  806150:	10803fcc 	andi	r2,r2,255
  806154:	1080201c 	xori	r2,r2,128
  806158:	10bfe004 	addi	r2,r2,-128
  80615c:	10000226 	beq	r2,zero,806168 <logic+0x5d6c>
  806160:	00800044 	movi	r2,1
  806164:	00000106 	br	80616c <logic+0x5d70>
  806168:	0005883a 	mov	r2,zero
  80616c:	1007883a 	mov	r3,r2
  806170:	e0bffc17 	ldw	r2,-16(fp)
  806174:	10c03e85 	stb	r3,250(r2)
  d->_cg204 = d->_Pacemaker_local__Atrig11;
  806178:	e0bffc17 	ldw	r2,-16(fp)
  80617c:	10c01b03 	ldbu	r3,108(r2)
  806180:	e0bffc17 	ldw	r2,-16(fp)
  806184:	10c05305 	stb	r3,332(r2)
  d->_g192 = d->_g203 && !d->_cg204;
  806188:	e0bffc17 	ldw	r2,-16(fp)
  80618c:	10803e83 	ldbu	r2,250(r2)
  806190:	10803fcc 	andi	r2,r2,255
  806194:	1080201c 	xori	r2,r2,128
  806198:	10bfe004 	addi	r2,r2,-128
  80619c:	10000826 	beq	r2,zero,8061c0 <logic+0x5dc4>
  8061a0:	e0bffc17 	ldw	r2,-16(fp)
  8061a4:	10805303 	ldbu	r2,332(r2)
  8061a8:	10803fcc 	andi	r2,r2,255
  8061ac:	1080201c 	xori	r2,r2,128
  8061b0:	10bfe004 	addi	r2,r2,-128
  8061b4:	1000021e 	bne	r2,zero,8061c0 <logic+0x5dc4>
  8061b8:	00800044 	movi	r2,1
  8061bc:	00000106 	br	8061c4 <logic+0x5dc8>
  8061c0:	0005883a 	mov	r2,zero
  8061c4:	1007883a 	mov	r3,r2
  8061c8:	e0bffc17 	ldw	r2,-16(fp)
  8061cc:	10c03c85 	stb	r3,242(r2)
  if (d->_g192) {
  8061d0:	e0bffc17 	ldw	r2,-16(fp)
  8061d4:	10803c83 	ldbu	r2,242(r2)
  8061d8:	10803fcc 	andi	r2,r2,255
  8061dc:	1080201c 	xori	r2,r2,128
  8061e0:	10bfe004 	addi	r2,r2,-128
  8061e4:	10000626 	beq	r2,zero,806200 <logic+0x5e04>
    d->_Pacemaker_local_iAP |= 1;
  8061e8:	e0bffc17 	ldw	r2,-16(fp)
  8061ec:	10801703 	ldbu	r2,92(r2)
  8061f0:	10800054 	ori	r2,r2,1
  8061f4:	1007883a 	mov	r3,r2
  8061f8:	e0bffc17 	ldw	r2,-16(fp)
  8061fc:	10c01705 	stb	r3,92(r2)
  }
  d->_g201 = d->_pg192_e1;
  806200:	e0bffc17 	ldw	r2,-16(fp)
  806204:	10c06303 	ldbu	r3,396(r2)
  806208:	e0bffc17 	ldw	r2,-16(fp)
  80620c:	10c03e05 	stb	r3,248(r2)
  d->_cg144 = (d->AS || d->_Pacemaker_local_iAP) && !d->_Pacemaker_local_PVARP_timeout;
  806210:	e0bffc17 	ldw	r2,-16(fp)
  806214:	10800a03 	ldbu	r2,40(r2)
  806218:	10803fcc 	andi	r2,r2,255
  80621c:	1080201c 	xori	r2,r2,128
  806220:	10bfe004 	addi	r2,r2,-128
  806224:	1000061e 	bne	r2,zero,806240 <logic+0x5e44>
  806228:	e0bffc17 	ldw	r2,-16(fp)
  80622c:	10801703 	ldbu	r2,92(r2)
  806230:	10803fcc 	andi	r2,r2,255
  806234:	1080201c 	xori	r2,r2,128
  806238:	10bfe004 	addi	r2,r2,-128
  80623c:	10000826 	beq	r2,zero,806260 <logic+0x5e64>
  806240:	e0bffc17 	ldw	r2,-16(fp)
  806244:	10801783 	ldbu	r2,94(r2)
  806248:	10803fcc 	andi	r2,r2,255
  80624c:	1080201c 	xori	r2,r2,128
  806250:	10bfe004 	addi	r2,r2,-128
  806254:	1000021e 	bne	r2,zero,806260 <logic+0x5e64>
  806258:	00800044 	movi	r2,1
  80625c:	00000106 	br	806264 <logic+0x5e68>
  806260:	0005883a 	mov	r2,zero
  806264:	1007883a 	mov	r3,r2
  806268:	e0bffc17 	ldw	r2,-16(fp)
  80626c:	10c04ec5 	stb	r3,315(r2)
  d->_g192_e1 = d->_GO || (d->_g172 && d->_cg178) || d->_g164_e2 || (d->_g201 && !d->_cg144);
  806270:	e0bffc17 	ldw	r2,-16(fp)
  806274:	10803fc3 	ldbu	r2,255(r2)
  806278:	10803fcc 	andi	r2,r2,255
  80627c:	1080201c 	xori	r2,r2,128
  806280:	10bfe004 	addi	r2,r2,-128
  806284:	10001e1e 	bne	r2,zero,806300 <logic+0x5f04>
  806288:	e0bffc17 	ldw	r2,-16(fp)
  80628c:	108038c3 	ldbu	r2,227(r2)
  806290:	10803fcc 	andi	r2,r2,255
  806294:	1080201c 	xori	r2,r2,128
  806298:	10bfe004 	addi	r2,r2,-128
  80629c:	10000626 	beq	r2,zero,8062b8 <logic+0x5ebc>
  8062a0:	e0bffc17 	ldw	r2,-16(fp)
  8062a4:	10804e83 	ldbu	r2,314(r2)
  8062a8:	10803fcc 	andi	r2,r2,255
  8062ac:	1080201c 	xori	r2,r2,128
  8062b0:	10bfe004 	addi	r2,r2,-128
  8062b4:	1000121e 	bne	r2,zero,806300 <logic+0x5f04>
  8062b8:	e0bffc17 	ldw	r2,-16(fp)
  8062bc:	10805883 	ldbu	r2,354(r2)
  8062c0:	10803fcc 	andi	r2,r2,255
  8062c4:	1080201c 	xori	r2,r2,128
  8062c8:	10bfe004 	addi	r2,r2,-128
  8062cc:	10000c1e 	bne	r2,zero,806300 <logic+0x5f04>
  8062d0:	e0bffc17 	ldw	r2,-16(fp)
  8062d4:	10803e03 	ldbu	r2,248(r2)
  8062d8:	10803fcc 	andi	r2,r2,255
  8062dc:	1080201c 	xori	r2,r2,128
  8062e0:	10bfe004 	addi	r2,r2,-128
  8062e4:	10000826 	beq	r2,zero,806308 <logic+0x5f0c>
  8062e8:	e0bffc17 	ldw	r2,-16(fp)
  8062ec:	10804ec3 	ldbu	r2,315(r2)
  8062f0:	10803fcc 	andi	r2,r2,255
  8062f4:	1080201c 	xori	r2,r2,128
  8062f8:	10bfe004 	addi	r2,r2,-128
  8062fc:	1000021e 	bne	r2,zero,806308 <logic+0x5f0c>
  806300:	00800044 	movi	r2,1
  806304:	00000106 	br	80630c <logic+0x5f10>
  806308:	0005883a 	mov	r2,zero
  80630c:	1007883a 	mov	r3,r2
  806310:	e0bffc17 	ldw	r2,-16(fp)
  806314:	10c05905 	stb	r3,356(r2)
  d->_g201_e2 = d->_g201 && d->_cg144;
  806318:	e0bffc17 	ldw	r2,-16(fp)
  80631c:	10803e03 	ldbu	r2,248(r2)
  806320:	10803fcc 	andi	r2,r2,255
  806324:	1080201c 	xori	r2,r2,128
  806328:	10bfe004 	addi	r2,r2,-128
  80632c:	10000826 	beq	r2,zero,806350 <logic+0x5f54>
  806330:	e0bffc17 	ldw	r2,-16(fp)
  806334:	10804ec3 	ldbu	r2,315(r2)
  806338:	10803fcc 	andi	r2,r2,255
  80633c:	1080201c 	xori	r2,r2,128
  806340:	10bfe004 	addi	r2,r2,-128
  806344:	10000226 	beq	r2,zero,806350 <logic+0x5f54>
  806348:	00800044 	movi	r2,1
  80634c:	00000106 	br	806354 <logic+0x5f58>
  806350:	0005883a 	mov	r2,zero
  806354:	1007883a 	mov	r3,r2
  806358:	e0bffc17 	ldw	r2,-16(fp)
  80635c:	10c05945 	stb	r3,357(r2)
  if (d->_g201_e2) {
  806360:	e0bffc17 	ldw	r2,-16(fp)
  806364:	10805943 	ldbu	r2,357(r2)
  806368:	10803fcc 	andi	r2,r2,255
  80636c:	1080201c 	xori	r2,r2,128
  806370:	10bfe004 	addi	r2,r2,-128
  806374:	10000326 	beq	r2,zero,806384 <logic+0x5f88>
    d->_Pacemaker_local__region4_AVI_x = 0;
  806378:	e0bffc17 	ldw	r2,-16(fp)
  80637c:	10001315 	stw	zero,76(r2)
  806380:	10001415 	stw	zero,80(r2)
  }
  d->_g178 = d->_g201_e2 || (d->_g177 && d->_cg179);
  806384:	e0bffc17 	ldw	r2,-16(fp)
  806388:	10805943 	ldbu	r2,357(r2)
  80638c:	10803fcc 	andi	r2,r2,255
  806390:	1080201c 	xori	r2,r2,128
  806394:	10bfe004 	addi	r2,r2,-128
  806398:	10000c1e 	bne	r2,zero,8063cc <logic+0x5fd0>
  80639c:	e0bffc17 	ldw	r2,-16(fp)
  8063a0:	10803a03 	ldbu	r2,232(r2)
  8063a4:	10803fcc 	andi	r2,r2,255
  8063a8:	1080201c 	xori	r2,r2,128
  8063ac:	10bfe004 	addi	r2,r2,-128
  8063b0:	10000826 	beq	r2,zero,8063d4 <logic+0x5fd8>
  8063b4:	e0bffc17 	ldw	r2,-16(fp)
  8063b8:	10804f03 	ldbu	r2,316(r2)
  8063bc:	10803fcc 	andi	r2,r2,255
  8063c0:	1080201c 	xori	r2,r2,128
  8063c4:	10bfe004 	addi	r2,r2,-128
  8063c8:	10000226 	beq	r2,zero,8063d4 <logic+0x5fd8>
  8063cc:	00800044 	movi	r2,1
  8063d0:	00000106 	br	8063d8 <logic+0x5fdc>
  8063d4:	0005883a 	mov	r2,zero
  8063d8:	1007883a 	mov	r3,r2
  8063dc:	e0bffc17 	ldw	r2,-16(fp)
  8063e0:	10c03a45 	stb	r3,233(r2)
  if (d->_g178) {
  8063e4:	e0bffc17 	ldw	r2,-16(fp)
  8063e8:	10803a43 	ldbu	r2,233(r2)
  8063ec:	10803fcc 	andi	r2,r2,255
  8063f0:	1080201c 	xori	r2,r2,128
  8063f4:	10bfe004 	addi	r2,r2,-128
  8063f8:	10000626 	beq	r2,zero,806414 <logic+0x6018>
    d->_Pacemaker_local__Atrig8 = 0;
  8063fc:	e0bffc17 	ldw	r2,-16(fp)
  806400:	10001a45 	stb	zero,105(r2)
    d->_Pacemaker_local__Atrig9 = 0;
  806404:	e0bffc17 	ldw	r2,-16(fp)
  806408:	10001a85 	stb	zero,106(r2)
    d->_Pacemaker_local__Atrig10 = 0;
  80640c:	e0bffc17 	ldw	r2,-16(fp)
  806410:	10001ac5 	stb	zero,107(r2)
  }
  d->_cg147 = d->_Pacemaker_local__region4_AVI_x < d->AVI;
  806414:	e0bffc17 	ldw	r2,-16(fp)
  806418:	14001317 	ldw	r16,76(r2)
  80641c:	14401417 	ldw	r17,80(r2)
  806420:	e0bffc17 	ldw	r2,-16(fp)
  806424:	10800017 	ldw	r2,0(r2)
  806428:	1009883a 	mov	r4,r2
  80642c:	08092a00 	call	8092a0 <__floatsidf>
  806430:	1009883a 	mov	r4,r2
  806434:	180b883a 	mov	r5,r3
  806438:	04800044 	movi	r18,1
  80643c:	200d883a 	mov	r6,r4
  806440:	280f883a 	mov	r7,r5
  806444:	8009883a 	mov	r4,r16
  806448:	880b883a 	mov	r5,r17
  80644c:	08081980 	call	808198 <__ledf2>
  806450:	10000116 	blt	r2,zero,806458 <logic+0x605c>
  806454:	0025883a 	mov	r18,zero
  806458:	9007883a 	mov	r3,r18
  80645c:	e0bffc17 	ldw	r2,-16(fp)
  806460:	10c04f45 	stb	r3,317(r2)
  d->_g180 = d->_g178 && d->_cg147;
  806464:	e0bffc17 	ldw	r2,-16(fp)
  806468:	10803a43 	ldbu	r2,233(r2)
  80646c:	10803fcc 	andi	r2,r2,255
  806470:	1080201c 	xori	r2,r2,128
  806474:	10bfe004 	addi	r2,r2,-128
  806478:	10000826 	beq	r2,zero,80649c <logic+0x60a0>
  80647c:	e0bffc17 	ldw	r2,-16(fp)
  806480:	10804f43 	ldbu	r2,317(r2)
  806484:	10803fcc 	andi	r2,r2,255
  806488:	1080201c 	xori	r2,r2,128
  80648c:	10bfe004 	addi	r2,r2,-128
  806490:	10000226 	beq	r2,zero,80649c <logic+0x60a0>
  806494:	00800044 	movi	r2,1
  806498:	00000106 	br	8064a0 <logic+0x60a4>
  80649c:	0005883a 	mov	r2,zero
  8064a0:	1007883a 	mov	r3,r2
  8064a4:	e0bffc17 	ldw	r2,-16(fp)
  8064a8:	10c03ac5 	stb	r3,235(r2)
  if (d->_g180) {
  8064ac:	e0bffc17 	ldw	r2,-16(fp)
  8064b0:	10803ac3 	ldbu	r2,235(r2)
  8064b4:	10803fcc 	andi	r2,r2,255
  8064b8:	1080201c 	xori	r2,r2,128
  8064bc:	10bfe004 	addi	r2,r2,-128
  8064c0:	10003426 	beq	r2,zero,806594 <logic+0x6198>
    d->sleepT = (d->sleepT < (d->AVI - d->_Pacemaker_local__region4_AVI_x)) ? d->sleepT : (d->AVI - d->_Pacemaker_local__region4_AVI_x);
  8064c4:	e0bffc17 	ldw	r2,-16(fp)
  8064c8:	14000817 	ldw	r16,32(r2)
  8064cc:	14400917 	ldw	r17,36(r2)
  8064d0:	e0bffc17 	ldw	r2,-16(fp)
  8064d4:	10800017 	ldw	r2,0(r2)
  8064d8:	1009883a 	mov	r4,r2
  8064dc:	08092a00 	call	8092a0 <__floatsidf>
  8064e0:	1011883a 	mov	r8,r2
  8064e4:	1813883a 	mov	r9,r3
  8064e8:	e13ffc17 	ldw	r4,-16(fp)
  8064ec:	20801317 	ldw	r2,76(r4)
  8064f0:	20c01417 	ldw	r3,80(r4)
  8064f4:	100d883a 	mov	r6,r2
  8064f8:	180f883a 	mov	r7,r3
  8064fc:	4009883a 	mov	r4,r8
  806500:	480b883a 	mov	r5,r9
  806504:	08089a40 	call	8089a4 <__subdf3>
  806508:	1009883a 	mov	r4,r2
  80650c:	180b883a 	mov	r5,r3
  806510:	2005883a 	mov	r2,r4
  806514:	2807883a 	mov	r3,r5
  806518:	100d883a 	mov	r6,r2
  80651c:	180f883a 	mov	r7,r3
  806520:	8009883a 	mov	r4,r16
  806524:	880b883a 	mov	r5,r17
  806528:	08081980 	call	808198 <__ledf2>
  80652c:	1000040e 	bge	r2,zero,806540 <logic+0x6144>
  806530:	e13ffc17 	ldw	r4,-16(fp)
  806534:	20800817 	ldw	r2,32(r4)
  806538:	20c00917 	ldw	r3,36(r4)
  80653c:	00001206 	br	806588 <logic+0x618c>
  806540:	e0bffc17 	ldw	r2,-16(fp)
  806544:	10800017 	ldw	r2,0(r2)
  806548:	1009883a 	mov	r4,r2
  80654c:	08092a00 	call	8092a0 <__floatsidf>
  806550:	1011883a 	mov	r8,r2
  806554:	1813883a 	mov	r9,r3
  806558:	e13ffc17 	ldw	r4,-16(fp)
  80655c:	20801317 	ldw	r2,76(r4)
  806560:	20c01417 	ldw	r3,80(r4)
  806564:	100d883a 	mov	r6,r2
  806568:	180f883a 	mov	r7,r3
  80656c:	4009883a 	mov	r4,r8
  806570:	480b883a 	mov	r5,r9
  806574:	08089a40 	call	8089a4 <__subdf3>
  806578:	1009883a 	mov	r4,r2
  80657c:	180b883a 	mov	r5,r3
  806580:	2005883a 	mov	r2,r4
  806584:	2807883a 	mov	r3,r5
  806588:	e13ffc17 	ldw	r4,-16(fp)
  80658c:	20800815 	stw	r2,32(r4)
  806590:	20c00915 	stw	r3,36(r4)
  }
  d->_cg148 = d->_Pacemaker_local__Atrig8 || d->_Pacemaker_local__Atrig9 || d->_Pacemaker_local__Atrig10;
  806594:	e0bffc17 	ldw	r2,-16(fp)
  806598:	10801a43 	ldbu	r2,105(r2)
  80659c:	10803fcc 	andi	r2,r2,255
  8065a0:	1080201c 	xori	r2,r2,128
  8065a4:	10bfe004 	addi	r2,r2,-128
  8065a8:	10000c1e 	bne	r2,zero,8065dc <logic+0x61e0>
  8065ac:	e0bffc17 	ldw	r2,-16(fp)
  8065b0:	10801a83 	ldbu	r2,106(r2)
  8065b4:	10803fcc 	andi	r2,r2,255
  8065b8:	1080201c 	xori	r2,r2,128
  8065bc:	10bfe004 	addi	r2,r2,-128
  8065c0:	1000061e 	bne	r2,zero,8065dc <logic+0x61e0>
  8065c4:	e0bffc17 	ldw	r2,-16(fp)
  8065c8:	10801ac3 	ldbu	r2,107(r2)
  8065cc:	10803fcc 	andi	r2,r2,255
  8065d0:	1080201c 	xori	r2,r2,128
  8065d4:	10bfe004 	addi	r2,r2,-128
  8065d8:	10000226 	beq	r2,zero,8065e4 <logic+0x61e8>
  8065dc:	00800044 	movi	r2,1
  8065e0:	00000106 	br	8065e8 <logic+0x61ec>
  8065e4:	0005883a 	mov	r2,zero
  8065e8:	1007883a 	mov	r3,r2
  8065ec:	e0bffc17 	ldw	r2,-16(fp)
  8065f0:	10c04f85 	stb	r3,318(r2)
  d->_g144 = (d->_g180 && !d->_cg148) || (d->_g156 && !d->_cg152);
  8065f4:	e0bffc17 	ldw	r2,-16(fp)
  8065f8:	10803ac3 	ldbu	r2,235(r2)
  8065fc:	10803fcc 	andi	r2,r2,255
  806600:	1080201c 	xori	r2,r2,128
  806604:	10bfe004 	addi	r2,r2,-128
  806608:	10000626 	beq	r2,zero,806624 <logic+0x6228>
  80660c:	e0bffc17 	ldw	r2,-16(fp)
  806610:	10804f83 	ldbu	r2,318(r2)
  806614:	10803fcc 	andi	r2,r2,255
  806618:	1080201c 	xori	r2,r2,128
  80661c:	10bfe004 	addi	r2,r2,-128
  806620:	10000c26 	beq	r2,zero,806654 <logic+0x6258>
  806624:	e0bffc17 	ldw	r2,-16(fp)
  806628:	10803603 	ldbu	r2,216(r2)
  80662c:	10803fcc 	andi	r2,r2,255
  806630:	1080201c 	xori	r2,r2,128
  806634:	10bfe004 	addi	r2,r2,-128
  806638:	10000826 	beq	r2,zero,80665c <logic+0x6260>
  80663c:	e0bffc17 	ldw	r2,-16(fp)
  806640:	10804fc3 	ldbu	r2,319(r2)
  806644:	10803fcc 	andi	r2,r2,255
  806648:	1080201c 	xori	r2,r2,128
  80664c:	10bfe004 	addi	r2,r2,-128
  806650:	1000021e 	bne	r2,zero,80665c <logic+0x6260>
  806654:	00800044 	movi	r2,1
  806658:	00000106 	br	806660 <logic+0x6264>
  80665c:	0005883a 	mov	r2,zero
  806660:	1007883a 	mov	r3,r2
  806664:	e0bffc17 	ldw	r2,-16(fp)
  806668:	10c033c5 	stb	r3,207(r2)
  d->_g145 = d->_g178 && !d->_cg147;
  80666c:	e0bffc17 	ldw	r2,-16(fp)
  806670:	10803a43 	ldbu	r2,233(r2)
  806674:	10803fcc 	andi	r2,r2,255
  806678:	1080201c 	xori	r2,r2,128
  80667c:	10bfe004 	addi	r2,r2,-128
  806680:	10000826 	beq	r2,zero,8066a4 <logic+0x62a8>
  806684:	e0bffc17 	ldw	r2,-16(fp)
  806688:	10804f43 	ldbu	r2,317(r2)
  80668c:	10803fcc 	andi	r2,r2,255
  806690:	1080201c 	xori	r2,r2,128
  806694:	10bfe004 	addi	r2,r2,-128
  806698:	1000021e 	bne	r2,zero,8066a4 <logic+0x62a8>
  80669c:	00800044 	movi	r2,1
  8066a0:	00000106 	br	8066a8 <logic+0x62ac>
  8066a4:	0005883a 	mov	r2,zero
  8066a8:	1007883a 	mov	r3,r2
  8066ac:	e0bffc17 	ldw	r2,-16(fp)
  8066b0:	10c03405 	stb	r3,208(r2)
  d->_cg157 = d->_Pacemaker_local__Atrig8 || d->_Pacemaker_local__Atrig9 || d->_Pacemaker_local__Atrig10;
  8066b4:	e0bffc17 	ldw	r2,-16(fp)
  8066b8:	10801a43 	ldbu	r2,105(r2)
  8066bc:	10803fcc 	andi	r2,r2,255
  8066c0:	1080201c 	xori	r2,r2,128
  8066c4:	10bfe004 	addi	r2,r2,-128
  8066c8:	10000c1e 	bne	r2,zero,8066fc <logic+0x6300>
  8066cc:	e0bffc17 	ldw	r2,-16(fp)
  8066d0:	10801a83 	ldbu	r2,106(r2)
  8066d4:	10803fcc 	andi	r2,r2,255
  8066d8:	1080201c 	xori	r2,r2,128
  8066dc:	10bfe004 	addi	r2,r2,-128
  8066e0:	1000061e 	bne	r2,zero,8066fc <logic+0x6300>
  8066e4:	e0bffc17 	ldw	r2,-16(fp)
  8066e8:	10801ac3 	ldbu	r2,107(r2)
  8066ec:	10803fcc 	andi	r2,r2,255
  8066f0:	1080201c 	xori	r2,r2,128
  8066f4:	10bfe004 	addi	r2,r2,-128
  8066f8:	10000226 	beq	r2,zero,806704 <logic+0x6308>
  8066fc:	00800044 	movi	r2,1
  806700:	00000106 	br	806708 <logic+0x630c>
  806704:	0005883a 	mov	r2,zero
  806708:	1007883a 	mov	r3,r2
  80670c:	e0bffc17 	ldw	r2,-16(fp)
  806710:	10c05085 	stb	r3,322(r2)
  d->_g179 = (d->_g150 && !d->_cg154) || (d->_g145 && !d->_cg157);
  806714:	e0bffc17 	ldw	r2,-16(fp)
  806718:	108034c3 	ldbu	r2,211(r2)
  80671c:	10803fcc 	andi	r2,r2,255
  806720:	1080201c 	xori	r2,r2,128
  806724:	10bfe004 	addi	r2,r2,-128
  806728:	10000626 	beq	r2,zero,806744 <logic+0x6348>
  80672c:	e0bffc17 	ldw	r2,-16(fp)
  806730:	10805043 	ldbu	r2,321(r2)
  806734:	10803fcc 	andi	r2,r2,255
  806738:	1080201c 	xori	r2,r2,128
  80673c:	10bfe004 	addi	r2,r2,-128
  806740:	10000c26 	beq	r2,zero,806774 <logic+0x6378>
  806744:	e0bffc17 	ldw	r2,-16(fp)
  806748:	10803403 	ldbu	r2,208(r2)
  80674c:	10803fcc 	andi	r2,r2,255
  806750:	1080201c 	xori	r2,r2,128
  806754:	10bfe004 	addi	r2,r2,-128
  806758:	10000826 	beq	r2,zero,80677c <logic+0x6380>
  80675c:	e0bffc17 	ldw	r2,-16(fp)
  806760:	10805083 	ldbu	r2,322(r2)
  806764:	10803fcc 	andi	r2,r2,255
  806768:	1080201c 	xori	r2,r2,128
  80676c:	10bfe004 	addi	r2,r2,-128
  806770:	1000021e 	bne	r2,zero,80677c <logic+0x6380>
  806774:	00800044 	movi	r2,1
  806778:	00000106 	br	806780 <logic+0x6384>
  80677c:	0005883a 	mov	r2,zero
  806780:	1007883a 	mov	r3,r2
  806784:	e0bffc17 	ldw	r2,-16(fp)
  806788:	10c03a85 	stb	r3,234(r2)
  d->_cg158 = d->_Pacemaker_local__region4_AVI_x < d->AVI;
  80678c:	e0bffc17 	ldw	r2,-16(fp)
  806790:	14001317 	ldw	r16,76(r2)
  806794:	14401417 	ldw	r17,80(r2)
  806798:	e0bffc17 	ldw	r2,-16(fp)
  80679c:	10800017 	ldw	r2,0(r2)
  8067a0:	1009883a 	mov	r4,r2
  8067a4:	08092a00 	call	8092a0 <__floatsidf>
  8067a8:	1009883a 	mov	r4,r2
  8067ac:	180b883a 	mov	r5,r3
  8067b0:	04800044 	movi	r18,1
  8067b4:	200d883a 	mov	r6,r4
  8067b8:	280f883a 	mov	r7,r5
  8067bc:	8009883a 	mov	r4,r16
  8067c0:	880b883a 	mov	r5,r17
  8067c4:	08081980 	call	808198 <__ledf2>
  8067c8:	10000116 	blt	r2,zero,8067d0 <logic+0x63d4>
  8067cc:	0025883a 	mov	r18,zero
  8067d0:	9007883a 	mov	r3,r18
  8067d4:	e0bffc17 	ldw	r2,-16(fp)
  8067d8:	10c050c5 	stb	r3,323(r2)
  d->_g152 = d->_g178 && d->_cg158;
  8067dc:	e0bffc17 	ldw	r2,-16(fp)
  8067e0:	10803a43 	ldbu	r2,233(r2)
  8067e4:	10803fcc 	andi	r2,r2,255
  8067e8:	1080201c 	xori	r2,r2,128
  8067ec:	10bfe004 	addi	r2,r2,-128
  8067f0:	10000826 	beq	r2,zero,806814 <logic+0x6418>
  8067f4:	e0bffc17 	ldw	r2,-16(fp)
  8067f8:	108050c3 	ldbu	r2,323(r2)
  8067fc:	10803fcc 	andi	r2,r2,255
  806800:	1080201c 	xori	r2,r2,128
  806804:	10bfe004 	addi	r2,r2,-128
  806808:	10000226 	beq	r2,zero,806814 <logic+0x6418>
  80680c:	00800044 	movi	r2,1
  806810:	00000106 	br	806818 <logic+0x641c>
  806814:	0005883a 	mov	r2,zero
  806818:	1007883a 	mov	r3,r2
  80681c:	e0bffc17 	ldw	r2,-16(fp)
  806820:	10c03545 	stb	r3,213(r2)
  if (d->_g152) {
  806824:	e0bffc17 	ldw	r2,-16(fp)
  806828:	10803543 	ldbu	r2,213(r2)
  80682c:	10803fcc 	andi	r2,r2,255
  806830:	1080201c 	xori	r2,r2,128
  806834:	10bfe004 	addi	r2,r2,-128
  806838:	10003426 	beq	r2,zero,80690c <logic+0x6510>
    d->sleepT = (d->sleepT < (d->AVI - d->_Pacemaker_local__region4_AVI_x)) ? d->sleepT : (d->AVI - d->_Pacemaker_local__region4_AVI_x);
  80683c:	e0bffc17 	ldw	r2,-16(fp)
  806840:	14000817 	ldw	r16,32(r2)
  806844:	14400917 	ldw	r17,36(r2)
  806848:	e0bffc17 	ldw	r2,-16(fp)
  80684c:	10800017 	ldw	r2,0(r2)
  806850:	1009883a 	mov	r4,r2
  806854:	08092a00 	call	8092a0 <__floatsidf>
  806858:	1011883a 	mov	r8,r2
  80685c:	1813883a 	mov	r9,r3
  806860:	e13ffc17 	ldw	r4,-16(fp)
  806864:	20801317 	ldw	r2,76(r4)
  806868:	20c01417 	ldw	r3,80(r4)
  80686c:	100d883a 	mov	r6,r2
  806870:	180f883a 	mov	r7,r3
  806874:	4009883a 	mov	r4,r8
  806878:	480b883a 	mov	r5,r9
  80687c:	08089a40 	call	8089a4 <__subdf3>
  806880:	1009883a 	mov	r4,r2
  806884:	180b883a 	mov	r5,r3
  806888:	2005883a 	mov	r2,r4
  80688c:	2807883a 	mov	r3,r5
  806890:	100d883a 	mov	r6,r2
  806894:	180f883a 	mov	r7,r3
  806898:	8009883a 	mov	r4,r16
  80689c:	880b883a 	mov	r5,r17
  8068a0:	08081980 	call	808198 <__ledf2>
  8068a4:	1000040e 	bge	r2,zero,8068b8 <logic+0x64bc>
  8068a8:	e13ffc17 	ldw	r4,-16(fp)
  8068ac:	20800817 	ldw	r2,32(r4)
  8068b0:	20c00917 	ldw	r3,36(r4)
  8068b4:	00001206 	br	806900 <logic+0x6504>
  8068b8:	e0bffc17 	ldw	r2,-16(fp)
  8068bc:	10800017 	ldw	r2,0(r2)
  8068c0:	1009883a 	mov	r4,r2
  8068c4:	08092a00 	call	8092a0 <__floatsidf>
  8068c8:	1011883a 	mov	r8,r2
  8068cc:	1813883a 	mov	r9,r3
  8068d0:	e13ffc17 	ldw	r4,-16(fp)
  8068d4:	20801317 	ldw	r2,76(r4)
  8068d8:	20c01417 	ldw	r3,80(r4)
  8068dc:	100d883a 	mov	r6,r2
  8068e0:	180f883a 	mov	r7,r3
  8068e4:	4009883a 	mov	r4,r8
  8068e8:	480b883a 	mov	r5,r9
  8068ec:	08089a40 	call	8089a4 <__subdf3>
  8068f0:	1009883a 	mov	r4,r2
  8068f4:	180b883a 	mov	r5,r3
  8068f8:	2005883a 	mov	r2,r4
  8068fc:	2807883a 	mov	r3,r5
  806900:	e13ffc17 	ldw	r4,-16(fp)
  806904:	20800815 	stw	r2,32(r4)
  806908:	20c00915 	stw	r3,36(r4)
  }
  d->_cg159 = d->_Pacemaker_local__Atrig8 || d->_Pacemaker_local__Atrig9 || d->_Pacemaker_local__Atrig10;
  80690c:	e0bffc17 	ldw	r2,-16(fp)
  806910:	10801a43 	ldbu	r2,105(r2)
  806914:	10803fcc 	andi	r2,r2,255
  806918:	1080201c 	xori	r2,r2,128
  80691c:	10bfe004 	addi	r2,r2,-128
  806920:	10000c1e 	bne	r2,zero,806954 <logic+0x6558>
  806924:	e0bffc17 	ldw	r2,-16(fp)
  806928:	10801a83 	ldbu	r2,106(r2)
  80692c:	10803fcc 	andi	r2,r2,255
  806930:	1080201c 	xori	r2,r2,128
  806934:	10bfe004 	addi	r2,r2,-128
  806938:	1000061e 	bne	r2,zero,806954 <logic+0x6558>
  80693c:	e0bffc17 	ldw	r2,-16(fp)
  806940:	10801ac3 	ldbu	r2,107(r2)
  806944:	10803fcc 	andi	r2,r2,255
  806948:	1080201c 	xori	r2,r2,128
  80694c:	10bfe004 	addi	r2,r2,-128
  806950:	10000226 	beq	r2,zero,80695c <logic+0x6560>
  806954:	00800044 	movi	r2,1
  806958:	00000106 	br	806960 <logic+0x6564>
  80695c:	0005883a 	mov	r2,zero
  806960:	1007883a 	mov	r3,r2
  806964:	e0bffc17 	ldw	r2,-16(fp)
  806968:	10c05105 	stb	r3,324(r2)
  d->_g148 = (d->_g152 && !d->_cg159) || (d->_g161 && !d->_cg163);
  80696c:	e0bffc17 	ldw	r2,-16(fp)
  806970:	10803543 	ldbu	r2,213(r2)
  806974:	10803fcc 	andi	r2,r2,255
  806978:	1080201c 	xori	r2,r2,128
  80697c:	10bfe004 	addi	r2,r2,-128
  806980:	10000626 	beq	r2,zero,80699c <logic+0x65a0>
  806984:	e0bffc17 	ldw	r2,-16(fp)
  806988:	10805103 	ldbu	r2,324(r2)
  80698c:	10803fcc 	andi	r2,r2,255
  806990:	1080201c 	xori	r2,r2,128
  806994:	10bfe004 	addi	r2,r2,-128
  806998:	10000c26 	beq	r2,zero,8069cc <logic+0x65d0>
  80699c:	e0bffc17 	ldw	r2,-16(fp)
  8069a0:	108036c3 	ldbu	r2,219(r2)
  8069a4:	10803fcc 	andi	r2,r2,255
  8069a8:	1080201c 	xori	r2,r2,128
  8069ac:	10bfe004 	addi	r2,r2,-128
  8069b0:	10000826 	beq	r2,zero,8069d4 <logic+0x65d8>
  8069b4:	e0bffc17 	ldw	r2,-16(fp)
  8069b8:	10805143 	ldbu	r2,325(r2)
  8069bc:	10803fcc 	andi	r2,r2,255
  8069c0:	1080201c 	xori	r2,r2,128
  8069c4:	10bfe004 	addi	r2,r2,-128
  8069c8:	1000021e 	bne	r2,zero,8069d4 <logic+0x65d8>
  8069cc:	00800044 	movi	r2,1
  8069d0:	00000106 	br	8069d8 <logic+0x65dc>
  8069d4:	0005883a 	mov	r2,zero
  8069d8:	1007883a 	mov	r3,r2
  8069dc:	e0bffc17 	ldw	r2,-16(fp)
  8069e0:	10c03485 	stb	r3,210(r2)
  d->_g157 = d->_g178 && !d->_cg158;
  8069e4:	e0bffc17 	ldw	r2,-16(fp)
  8069e8:	10803a43 	ldbu	r2,233(r2)
  8069ec:	10803fcc 	andi	r2,r2,255
  8069f0:	1080201c 	xori	r2,r2,128
  8069f4:	10bfe004 	addi	r2,r2,-128
  8069f8:	10000826 	beq	r2,zero,806a1c <logic+0x6620>
  8069fc:	e0bffc17 	ldw	r2,-16(fp)
  806a00:	108050c3 	ldbu	r2,323(r2)
  806a04:	10803fcc 	andi	r2,r2,255
  806a08:	1080201c 	xori	r2,r2,128
  806a0c:	10bfe004 	addi	r2,r2,-128
  806a10:	1000021e 	bne	r2,zero,806a1c <logic+0x6620>
  806a14:	00800044 	movi	r2,1
  806a18:	00000106 	br	806a20 <logic+0x6624>
  806a1c:	0005883a 	mov	r2,zero
  806a20:	1007883a 	mov	r3,r2
  806a24:	e0bffc17 	ldw	r2,-16(fp)
  806a28:	10c03645 	stb	r3,217(r2)
  d->_cg168 = d->_Pacemaker_local__Atrig8 || d->_Pacemaker_local__Atrig9 || d->_Pacemaker_local__Atrig10;
  806a2c:	e0bffc17 	ldw	r2,-16(fp)
  806a30:	10801a43 	ldbu	r2,105(r2)
  806a34:	10803fcc 	andi	r2,r2,255
  806a38:	1080201c 	xori	r2,r2,128
  806a3c:	10bfe004 	addi	r2,r2,-128
  806a40:	10000c1e 	bne	r2,zero,806a74 <logic+0x6678>
  806a44:	e0bffc17 	ldw	r2,-16(fp)
  806a48:	10801a83 	ldbu	r2,106(r2)
  806a4c:	10803fcc 	andi	r2,r2,255
  806a50:	1080201c 	xori	r2,r2,128
  806a54:	10bfe004 	addi	r2,r2,-128
  806a58:	1000061e 	bne	r2,zero,806a74 <logic+0x6678>
  806a5c:	e0bffc17 	ldw	r2,-16(fp)
  806a60:	10801ac3 	ldbu	r2,107(r2)
  806a64:	10803fcc 	andi	r2,r2,255
  806a68:	1080201c 	xori	r2,r2,128
  806a6c:	10bfe004 	addi	r2,r2,-128
  806a70:	10000226 	beq	r2,zero,806a7c <logic+0x6680>
  806a74:	00800044 	movi	r2,1
  806a78:	00000106 	br	806a80 <logic+0x6684>
  806a7c:	0005883a 	mov	r2,zero
  806a80:	1007883a 	mov	r3,r2
  806a84:	e0bffc17 	ldw	r2,-16(fp)
  806a88:	10c05205 	stb	r3,328(r2)
  d->_g154 = (d->_g162 && !d->_cg165) || (d->_g157 && !d->_cg168);
  806a8c:	e0bffc17 	ldw	r2,-16(fp)
  806a90:	10803703 	ldbu	r2,220(r2)
  806a94:	10803fcc 	andi	r2,r2,255
  806a98:	1080201c 	xori	r2,r2,128
  806a9c:	10bfe004 	addi	r2,r2,-128
  806aa0:	10000626 	beq	r2,zero,806abc <logic+0x66c0>
  806aa4:	e0bffc17 	ldw	r2,-16(fp)
  806aa8:	108051c3 	ldbu	r2,327(r2)
  806aac:	10803fcc 	andi	r2,r2,255
  806ab0:	1080201c 	xori	r2,r2,128
  806ab4:	10bfe004 	addi	r2,r2,-128
  806ab8:	10000c26 	beq	r2,zero,806aec <logic+0x66f0>
  806abc:	e0bffc17 	ldw	r2,-16(fp)
  806ac0:	10803643 	ldbu	r2,217(r2)
  806ac4:	10803fcc 	andi	r2,r2,255
  806ac8:	1080201c 	xori	r2,r2,128
  806acc:	10bfe004 	addi	r2,r2,-128
  806ad0:	10000826 	beq	r2,zero,806af4 <logic+0x66f8>
  806ad4:	e0bffc17 	ldw	r2,-16(fp)
  806ad8:	10805203 	ldbu	r2,328(r2)
  806adc:	10803fcc 	andi	r2,r2,255
  806ae0:	1080201c 	xori	r2,r2,128
  806ae4:	10bfe004 	addi	r2,r2,-128
  806ae8:	1000021e 	bne	r2,zero,806af4 <logic+0x66f8>
  806aec:	00800044 	movi	r2,1
  806af0:	00000106 	br	806af8 <logic+0x66fc>
  806af4:	0005883a 	mov	r2,zero
  806af8:	1007883a 	mov	r3,r2
  806afc:	e0bffc17 	ldw	r2,-16(fp)
  806b00:	10c035c5 	stb	r3,215(r2)
  d->_g163 = d->_g178 || (d->_g42_e1 && !d->_cg176);
  806b04:	e0bffc17 	ldw	r2,-16(fp)
  806b08:	10803a43 	ldbu	r2,233(r2)
  806b0c:	10803fcc 	andi	r2,r2,255
  806b10:	1080201c 	xori	r2,r2,128
  806b14:	10bfe004 	addi	r2,r2,-128
  806b18:	10000c1e 	bne	r2,zero,806b4c <logic+0x6750>
  806b1c:	e0bffc17 	ldw	r2,-16(fp)
  806b20:	10805603 	ldbu	r2,344(r2)
  806b24:	10803fcc 	andi	r2,r2,255
  806b28:	1080201c 	xori	r2,r2,128
  806b2c:	10bfe004 	addi	r2,r2,-128
  806b30:	10000826 	beq	r2,zero,806b54 <logic+0x6758>
  806b34:	e0bffc17 	ldw	r2,-16(fp)
  806b38:	10805243 	ldbu	r2,329(r2)
  806b3c:	10803fcc 	andi	r2,r2,255
  806b40:	1080201c 	xori	r2,r2,128
  806b44:	10bfe004 	addi	r2,r2,-128
  806b48:	1000021e 	bne	r2,zero,806b54 <logic+0x6758>
  806b4c:	00800044 	movi	r2,1
  806b50:	00000106 	br	806b58 <logic+0x675c>
  806b54:	0005883a 	mov	r2,zero
  806b58:	1007883a 	mov	r3,r2
  806b5c:	e0bffc17 	ldw	r2,-16(fp)
  806b60:	10c03745 	stb	r3,221(r2)
  if (d->_g192) {
  806b64:	e0bffc17 	ldw	r2,-16(fp)
  806b68:	10803c83 	ldbu	r2,242(r2)
  806b6c:	10803fcc 	andi	r2,r2,255
  806b70:	1080201c 	xori	r2,r2,128
  806b74:	10bfe004 	addi	r2,r2,-128
  806b78:	10000626 	beq	r2,zero,806b94 <logic+0x6798>
    d->AP |= 1;
  806b7c:	e0bffc17 	ldw	r2,-16(fp)
  806b80:	10800a83 	ldbu	r2,42(r2)
  806b84:	10800054 	ori	r2,r2,1
  806b88:	1007883a 	mov	r3,r2
  806b8c:	e0bffc17 	ldw	r2,-16(fp)
  806b90:	10c00a85 	stb	r3,42(r2)
  }
  d->_g159 = d->_pg168;
  806b94:	e0bffc17 	ldw	r2,-16(fp)
  806b98:	10c06343 	ldbu	r3,397(r2)
  806b9c:	e0bffc17 	ldw	r2,-16(fp)
  806ba0:	10c03685 	stb	r3,218(r2)
  d->_cg184 = (d->VS || d->_Pacemaker_local_iVP) && !d->_Pacemaker_local_VRP_timeout;
  806ba4:	e0bffc17 	ldw	r2,-16(fp)
  806ba8:	10800a43 	ldbu	r2,41(r2)
  806bac:	10803fcc 	andi	r2,r2,255
  806bb0:	1080201c 	xori	r2,r2,128
  806bb4:	10bfe004 	addi	r2,r2,-128
  806bb8:	1000061e 	bne	r2,zero,806bd4 <logic+0x67d8>
  806bbc:	e0bffc17 	ldw	r2,-16(fp)
  806bc0:	10801743 	ldbu	r2,93(r2)
  806bc4:	10803fcc 	andi	r2,r2,255
  806bc8:	1080201c 	xori	r2,r2,128
  806bcc:	10bfe004 	addi	r2,r2,-128
  806bd0:	10000826 	beq	r2,zero,806bf4 <logic+0x67f8>
  806bd4:	e0bffc17 	ldw	r2,-16(fp)
  806bd8:	108017c3 	ldbu	r2,95(r2)
  806bdc:	10803fcc 	andi	r2,r2,255
  806be0:	1080201c 	xori	r2,r2,128
  806be4:	10bfe004 	addi	r2,r2,-128
  806be8:	1000021e 	bne	r2,zero,806bf4 <logic+0x67f8>
  806bec:	00800044 	movi	r2,1
  806bf0:	00000106 	br	806bf8 <logic+0x67fc>
  806bf4:	0005883a 	mov	r2,zero
  806bf8:	1007883a 	mov	r3,r2
  806bfc:	e0bffc17 	ldw	r2,-16(fp)
  806c00:	10c05345 	stb	r3,333(r2)
  d->_g168 = d->_GO || (d->_g203 && d->_cg204) || d->_g192 || (d->_g159 && !d->_cg184);
  806c04:	e0bffc17 	ldw	r2,-16(fp)
  806c08:	10803fc3 	ldbu	r2,255(r2)
  806c0c:	10803fcc 	andi	r2,r2,255
  806c10:	1080201c 	xori	r2,r2,128
  806c14:	10bfe004 	addi	r2,r2,-128
  806c18:	10001e1e 	bne	r2,zero,806c94 <logic+0x6898>
  806c1c:	e0bffc17 	ldw	r2,-16(fp)
  806c20:	10803e83 	ldbu	r2,250(r2)
  806c24:	10803fcc 	andi	r2,r2,255
  806c28:	1080201c 	xori	r2,r2,128
  806c2c:	10bfe004 	addi	r2,r2,-128
  806c30:	10000626 	beq	r2,zero,806c4c <logic+0x6850>
  806c34:	e0bffc17 	ldw	r2,-16(fp)
  806c38:	10805303 	ldbu	r2,332(r2)
  806c3c:	10803fcc 	andi	r2,r2,255
  806c40:	1080201c 	xori	r2,r2,128
  806c44:	10bfe004 	addi	r2,r2,-128
  806c48:	1000121e 	bne	r2,zero,806c94 <logic+0x6898>
  806c4c:	e0bffc17 	ldw	r2,-16(fp)
  806c50:	10803c83 	ldbu	r2,242(r2)
  806c54:	10803fcc 	andi	r2,r2,255
  806c58:	1080201c 	xori	r2,r2,128
  806c5c:	10bfe004 	addi	r2,r2,-128
  806c60:	10000c1e 	bne	r2,zero,806c94 <logic+0x6898>
  806c64:	e0bffc17 	ldw	r2,-16(fp)
  806c68:	10803683 	ldbu	r2,218(r2)
  806c6c:	10803fcc 	andi	r2,r2,255
  806c70:	1080201c 	xori	r2,r2,128
  806c74:	10bfe004 	addi	r2,r2,-128
  806c78:	10000826 	beq	r2,zero,806c9c <logic+0x68a0>
  806c7c:	e0bffc17 	ldw	r2,-16(fp)
  806c80:	10805343 	ldbu	r2,333(r2)
  806c84:	10803fcc 	andi	r2,r2,255
  806c88:	1080201c 	xori	r2,r2,128
  806c8c:	10bfe004 	addi	r2,r2,-128
  806c90:	1000021e 	bne	r2,zero,806c9c <logic+0x68a0>
  806c94:	00800044 	movi	r2,1
  806c98:	00000106 	br	806ca0 <logic+0x68a4>
  806c9c:	0005883a 	mov	r2,zero
  806ca0:	1007883a 	mov	r3,r2
  806ca4:	e0bffc17 	ldw	r2,-16(fp)
  806ca8:	10c03845 	stb	r3,225(r2)
  d->_g165 = d->_g159 && d->_cg184;
  806cac:	e0bffc17 	ldw	r2,-16(fp)
  806cb0:	10803683 	ldbu	r2,218(r2)
  806cb4:	10803fcc 	andi	r2,r2,255
  806cb8:	1080201c 	xori	r2,r2,128
  806cbc:	10bfe004 	addi	r2,r2,-128
  806cc0:	10000826 	beq	r2,zero,806ce4 <logic+0x68e8>
  806cc4:	e0bffc17 	ldw	r2,-16(fp)
  806cc8:	10805343 	ldbu	r2,333(r2)
  806ccc:	10803fcc 	andi	r2,r2,255
  806cd0:	1080201c 	xori	r2,r2,128
  806cd4:	10bfe004 	addi	r2,r2,-128
  806cd8:	10000226 	beq	r2,zero,806ce4 <logic+0x68e8>
  806cdc:	00800044 	movi	r2,1
  806ce0:	00000106 	br	806ce8 <logic+0x68ec>
  806ce4:	0005883a 	mov	r2,zero
  806ce8:	1007883a 	mov	r3,r2
  806cec:	e0bffc17 	ldw	r2,-16(fp)
  806cf0:	10c037c5 	stb	r3,223(r2)
  if (d->_g165) {
  806cf4:	e0bffc17 	ldw	r2,-16(fp)
  806cf8:	108037c3 	ldbu	r2,223(r2)
  806cfc:	10803fcc 	andi	r2,r2,255
  806d00:	1080201c 	xori	r2,r2,128
  806d04:	10bfe004 	addi	r2,r2,-128
  806d08:	10000726 	beq	r2,zero,806d28 <logic+0x692c>
    d->_Pacemaker_local__region5_AEI_x = 0;
  806d0c:	e0bffc17 	ldw	r2,-16(fp)
  806d10:	10001515 	stw	zero,84(r2)
  806d14:	10001615 	stw	zero,88(r2)
    d->_Pacemaker_local__Atrig11 = 0;
  806d18:	e0bffc17 	ldw	r2,-16(fp)
  806d1c:	10001b05 	stb	zero,108(r2)
    d->_Pacemaker_local__Atrig12 = 0;
  806d20:	e0bffc17 	ldw	r2,-16(fp)
  806d24:	10001b45 	stb	zero,109(r2)
  }
  d->_cg186 = d->_Pacemaker_local__region5_AEI_x < d->AEI;
  806d28:	e0bffc17 	ldw	r2,-16(fp)
  806d2c:	14001517 	ldw	r16,84(r2)
  806d30:	14401617 	ldw	r17,88(r2)
  806d34:	e0bffc17 	ldw	r2,-16(fp)
  806d38:	10800117 	ldw	r2,4(r2)
  806d3c:	1009883a 	mov	r4,r2
  806d40:	08092a00 	call	8092a0 <__floatsidf>
  806d44:	1009883a 	mov	r4,r2
  806d48:	180b883a 	mov	r5,r3
  806d4c:	04800044 	movi	r18,1
  806d50:	200d883a 	mov	r6,r4
  806d54:	280f883a 	mov	r7,r5
  806d58:	8009883a 	mov	r4,r16
  806d5c:	880b883a 	mov	r5,r17
  806d60:	08081980 	call	808198 <__ledf2>
  806d64:	10000116 	blt	r2,zero,806d6c <logic+0x6970>
  806d68:	0025883a 	mov	r18,zero
  806d6c:	9007883a 	mov	r3,r18
  806d70:	e0bffc17 	ldw	r2,-16(fp)
  806d74:	10c05385 	stb	r3,334(r2)
  d->_g146 = d->_g165 && d->_cg186;
  806d78:	e0bffc17 	ldw	r2,-16(fp)
  806d7c:	108037c3 	ldbu	r2,223(r2)
  806d80:	10803fcc 	andi	r2,r2,255
  806d84:	1080201c 	xori	r2,r2,128
  806d88:	10bfe004 	addi	r2,r2,-128
  806d8c:	10000826 	beq	r2,zero,806db0 <logic+0x69b4>
  806d90:	e0bffc17 	ldw	r2,-16(fp)
  806d94:	10805383 	ldbu	r2,334(r2)
  806d98:	10803fcc 	andi	r2,r2,255
  806d9c:	1080201c 	xori	r2,r2,128
  806da0:	10bfe004 	addi	r2,r2,-128
  806da4:	10000226 	beq	r2,zero,806db0 <logic+0x69b4>
  806da8:	00800044 	movi	r2,1
  806dac:	00000106 	br	806db4 <logic+0x69b8>
  806db0:	0005883a 	mov	r2,zero
  806db4:	1007883a 	mov	r3,r2
  806db8:	e0bffc17 	ldw	r2,-16(fp)
  806dbc:	10c03445 	stb	r3,209(r2)
  if (d->_g146) {
  806dc0:	e0bffc17 	ldw	r2,-16(fp)
  806dc4:	10803443 	ldbu	r2,209(r2)
  806dc8:	10803fcc 	andi	r2,r2,255
  806dcc:	1080201c 	xori	r2,r2,128
  806dd0:	10bfe004 	addi	r2,r2,-128
  806dd4:	10003426 	beq	r2,zero,806ea8 <logic+0x6aac>
    d->sleepT = (d->sleepT < (d->AEI - d->_Pacemaker_local__region5_AEI_x)) ? d->sleepT : (d->AEI - d->_Pacemaker_local__region5_AEI_x);
  806dd8:	e0bffc17 	ldw	r2,-16(fp)
  806ddc:	14000817 	ldw	r16,32(r2)
  806de0:	14400917 	ldw	r17,36(r2)
  806de4:	e0bffc17 	ldw	r2,-16(fp)
  806de8:	10800117 	ldw	r2,4(r2)
  806dec:	1009883a 	mov	r4,r2
  806df0:	08092a00 	call	8092a0 <__floatsidf>
  806df4:	1011883a 	mov	r8,r2
  806df8:	1813883a 	mov	r9,r3
  806dfc:	e13ffc17 	ldw	r4,-16(fp)
  806e00:	20801517 	ldw	r2,84(r4)
  806e04:	20c01617 	ldw	r3,88(r4)
  806e08:	100d883a 	mov	r6,r2
  806e0c:	180f883a 	mov	r7,r3
  806e10:	4009883a 	mov	r4,r8
  806e14:	480b883a 	mov	r5,r9
  806e18:	08089a40 	call	8089a4 <__subdf3>
  806e1c:	1009883a 	mov	r4,r2
  806e20:	180b883a 	mov	r5,r3
  806e24:	2005883a 	mov	r2,r4
  806e28:	2807883a 	mov	r3,r5
  806e2c:	100d883a 	mov	r6,r2
  806e30:	180f883a 	mov	r7,r3
  806e34:	8009883a 	mov	r4,r16
  806e38:	880b883a 	mov	r5,r17
  806e3c:	08081980 	call	808198 <__ledf2>
  806e40:	1000040e 	bge	r2,zero,806e54 <logic+0x6a58>
  806e44:	e13ffc17 	ldw	r4,-16(fp)
  806e48:	20800817 	ldw	r2,32(r4)
  806e4c:	20c00917 	ldw	r3,36(r4)
  806e50:	00001206 	br	806e9c <logic+0x6aa0>
  806e54:	e0bffc17 	ldw	r2,-16(fp)
  806e58:	10800117 	ldw	r2,4(r2)
  806e5c:	1009883a 	mov	r4,r2
  806e60:	08092a00 	call	8092a0 <__floatsidf>
  806e64:	1011883a 	mov	r8,r2
  806e68:	1813883a 	mov	r9,r3
  806e6c:	e13ffc17 	ldw	r4,-16(fp)
  806e70:	20801517 	ldw	r2,84(r4)
  806e74:	20c01617 	ldw	r3,88(r4)
  806e78:	100d883a 	mov	r6,r2
  806e7c:	180f883a 	mov	r7,r3
  806e80:	4009883a 	mov	r4,r8
  806e84:	480b883a 	mov	r5,r9
  806e88:	08089a40 	call	8089a4 <__subdf3>
  806e8c:	1009883a 	mov	r4,r2
  806e90:	180b883a 	mov	r5,r3
  806e94:	2005883a 	mov	r2,r4
  806e98:	2807883a 	mov	r3,r5
  806e9c:	e13ffc17 	ldw	r4,-16(fp)
  806ea0:	20800815 	stw	r2,32(r4)
  806ea4:	20c00915 	stw	r3,36(r4)
  }
  d->_cg187 = d->_Pacemaker_local__Atrig11 || d->_Pacemaker_local__Atrig12;
  806ea8:	e0bffc17 	ldw	r2,-16(fp)
  806eac:	10801b03 	ldbu	r2,108(r2)
  806eb0:	10803fcc 	andi	r2,r2,255
  806eb4:	1080201c 	xori	r2,r2,128
  806eb8:	10bfe004 	addi	r2,r2,-128
  806ebc:	1000061e 	bne	r2,zero,806ed8 <logic+0x6adc>
  806ec0:	e0bffc17 	ldw	r2,-16(fp)
  806ec4:	10801b43 	ldbu	r2,109(r2)
  806ec8:	10803fcc 	andi	r2,r2,255
  806ecc:	1080201c 	xori	r2,r2,128
  806ed0:	10bfe004 	addi	r2,r2,-128
  806ed4:	10000226 	beq	r2,zero,806ee0 <logic+0x6ae4>
  806ed8:	00800044 	movi	r2,1
  806edc:	00000106 	br	806ee4 <logic+0x6ae8>
  806ee0:	0005883a 	mov	r2,zero
  806ee4:	1007883a 	mov	r3,r2
  806ee8:	e0bffc17 	ldw	r2,-16(fp)
  806eec:	10c053c5 	stb	r3,335(r2)
  d->_g176 = (d->_g146 && !d->_cg187) || (d->_g195 && !d->_cg191);
  806ef0:	e0bffc17 	ldw	r2,-16(fp)
  806ef4:	10803443 	ldbu	r2,209(r2)
  806ef8:	10803fcc 	andi	r2,r2,255
  806efc:	1080201c 	xori	r2,r2,128
  806f00:	10bfe004 	addi	r2,r2,-128
  806f04:	10000626 	beq	r2,zero,806f20 <logic+0x6b24>
  806f08:	e0bffc17 	ldw	r2,-16(fp)
  806f0c:	108053c3 	ldbu	r2,335(r2)
  806f10:	10803fcc 	andi	r2,r2,255
  806f14:	1080201c 	xori	r2,r2,128
  806f18:	10bfe004 	addi	r2,r2,-128
  806f1c:	10000c26 	beq	r2,zero,806f50 <logic+0x6b54>
  806f20:	e0bffc17 	ldw	r2,-16(fp)
  806f24:	10803d03 	ldbu	r2,244(r2)
  806f28:	10803fcc 	andi	r2,r2,255
  806f2c:	1080201c 	xori	r2,r2,128
  806f30:	10bfe004 	addi	r2,r2,-128
  806f34:	10000826 	beq	r2,zero,806f58 <logic+0x6b5c>
  806f38:	e0bffc17 	ldw	r2,-16(fp)
  806f3c:	10805403 	ldbu	r2,336(r2)
  806f40:	10803fcc 	andi	r2,r2,255
  806f44:	1080201c 	xori	r2,r2,128
  806f48:	10bfe004 	addi	r2,r2,-128
  806f4c:	1000021e 	bne	r2,zero,806f58 <logic+0x6b5c>
  806f50:	00800044 	movi	r2,1
  806f54:	00000106 	br	806f5c <logic+0x6b60>
  806f58:	0005883a 	mov	r2,zero
  806f5c:	1007883a 	mov	r3,r2
  806f60:	e0bffc17 	ldw	r2,-16(fp)
  806f64:	10c039c5 	stb	r3,231(r2)
  d->_g204 = d->_g165 && !d->_cg186;
  806f68:	e0bffc17 	ldw	r2,-16(fp)
  806f6c:	108037c3 	ldbu	r2,223(r2)
  806f70:	10803fcc 	andi	r2,r2,255
  806f74:	1080201c 	xori	r2,r2,128
  806f78:	10bfe004 	addi	r2,r2,-128
  806f7c:	10000826 	beq	r2,zero,806fa0 <logic+0x6ba4>
  806f80:	e0bffc17 	ldw	r2,-16(fp)
  806f84:	10805383 	ldbu	r2,334(r2)
  806f88:	10803fcc 	andi	r2,r2,255
  806f8c:	1080201c 	xori	r2,r2,128
  806f90:	10bfe004 	addi	r2,r2,-128
  806f94:	1000021e 	bne	r2,zero,806fa0 <logic+0x6ba4>
  806f98:	00800044 	movi	r2,1
  806f9c:	00000106 	br	806fa4 <logic+0x6ba8>
  806fa0:	0005883a 	mov	r2,zero
  806fa4:	1007883a 	mov	r3,r2
  806fa8:	e0bffc17 	ldw	r2,-16(fp)
  806fac:	10c03ec5 	stb	r3,251(r2)
  d->_cg196 = d->_Pacemaker_local__Atrig11 || d->_Pacemaker_local__Atrig12;
  806fb0:	e0bffc17 	ldw	r2,-16(fp)
  806fb4:	10801b03 	ldbu	r2,108(r2)
  806fb8:	10803fcc 	andi	r2,r2,255
  806fbc:	1080201c 	xori	r2,r2,128
  806fc0:	10bfe004 	addi	r2,r2,-128
  806fc4:	1000061e 	bne	r2,zero,806fe0 <logic+0x6be4>
  806fc8:	e0bffc17 	ldw	r2,-16(fp)
  806fcc:	10801b43 	ldbu	r2,109(r2)
  806fd0:	10803fcc 	andi	r2,r2,255
  806fd4:	1080201c 	xori	r2,r2,128
  806fd8:	10bfe004 	addi	r2,r2,-128
  806fdc:	10000226 	beq	r2,zero,806fe8 <logic+0x6bec>
  806fe0:	00800044 	movi	r2,1
  806fe4:	00000106 	br	806fec <logic+0x6bf0>
  806fe8:	0005883a 	mov	r2,zero
  806fec:	1007883a 	mov	r3,r2
  806ff0:	e0bffc17 	ldw	r2,-16(fp)
  806ff4:	10c054c5 	stb	r3,339(r2)
  d->_g205 = (d->_g190 && !d->_cg193) || (d->_g204 && !d->_cg196);
  806ff8:	e0bffc17 	ldw	r2,-16(fp)
  806ffc:	10803c03 	ldbu	r2,240(r2)
  807000:	10803fcc 	andi	r2,r2,255
  807004:	1080201c 	xori	r2,r2,128
  807008:	10bfe004 	addi	r2,r2,-128
  80700c:	10000626 	beq	r2,zero,807028 <logic+0x6c2c>
  807010:	e0bffc17 	ldw	r2,-16(fp)
  807014:	10805483 	ldbu	r2,338(r2)
  807018:	10803fcc 	andi	r2,r2,255
  80701c:	1080201c 	xori	r2,r2,128
  807020:	10bfe004 	addi	r2,r2,-128
  807024:	10000c26 	beq	r2,zero,807058 <logic+0x6c5c>
  807028:	e0bffc17 	ldw	r2,-16(fp)
  80702c:	10803ec3 	ldbu	r2,251(r2)
  807030:	10803fcc 	andi	r2,r2,255
  807034:	1080201c 	xori	r2,r2,128
  807038:	10bfe004 	addi	r2,r2,-128
  80703c:	10000826 	beq	r2,zero,807060 <logic+0x6c64>
  807040:	e0bffc17 	ldw	r2,-16(fp)
  807044:	108054c3 	ldbu	r2,339(r2)
  807048:	10803fcc 	andi	r2,r2,255
  80704c:	1080201c 	xori	r2,r2,128
  807050:	10bfe004 	addi	r2,r2,-128
  807054:	1000021e 	bne	r2,zero,807060 <logic+0x6c64>
  807058:	00800044 	movi	r2,1
  80705c:	00000106 	br	807064 <logic+0x6c68>
  807060:	0005883a 	mov	r2,zero
  807064:	1007883a 	mov	r3,r2
  807068:	e0bffc17 	ldw	r2,-16(fp)
  80706c:	10c03f05 	stb	r3,252(r2)
  d->_g184 = d->_g165 || (d->_g202 && !d->_cg202);
  807070:	e0bffc17 	ldw	r2,-16(fp)
  807074:	108037c3 	ldbu	r2,223(r2)
  807078:	10803fcc 	andi	r2,r2,255
  80707c:	1080201c 	xori	r2,r2,128
  807080:	10bfe004 	addi	r2,r2,-128
  807084:	10000c1e 	bne	r2,zero,8070b8 <logic+0x6cbc>
  807088:	e0bffc17 	ldw	r2,-16(fp)
  80708c:	10803e43 	ldbu	r2,249(r2)
  807090:	10803fcc 	andi	r2,r2,255
  807094:	1080201c 	xori	r2,r2,128
  807098:	10bfe004 	addi	r2,r2,-128
  80709c:	10000826 	beq	r2,zero,8070c0 <logic+0x6cc4>
  8070a0:	e0bffc17 	ldw	r2,-16(fp)
  8070a4:	10805503 	ldbu	r2,340(r2)
  8070a8:	10803fcc 	andi	r2,r2,255
  8070ac:	1080201c 	xori	r2,r2,128
  8070b0:	10bfe004 	addi	r2,r2,-128
  8070b4:	1000021e 	bne	r2,zero,8070c0 <logic+0x6cc4>
  8070b8:	00800044 	movi	r2,1
  8070bc:	00000106 	br	8070c4 <logic+0x6cc8>
  8070c0:	0005883a 	mov	r2,zero
  8070c4:	1007883a 	mov	r3,r2
  8070c8:	e0bffc17 	ldw	r2,-16(fp)
  8070cc:	10c03b05 	stb	r3,236(r2)
  d->_g187 = d->_GO || d->_g173_e3;
  8070d0:	e0bffc17 	ldw	r2,-16(fp)
  8070d4:	10803fc3 	ldbu	r2,255(r2)
  8070d8:	10803fcc 	andi	r2,r2,255
  8070dc:	1080201c 	xori	r2,r2,128
  8070e0:	10bfe004 	addi	r2,r2,-128
  8070e4:	1000061e 	bne	r2,zero,807100 <logic+0x6d04>
  8070e8:	e0bffc17 	ldw	r2,-16(fp)
  8070ec:	108058c3 	ldbu	r2,355(r2)
  8070f0:	10803fcc 	andi	r2,r2,255
  8070f4:	1080201c 	xori	r2,r2,128
  8070f8:	10bfe004 	addi	r2,r2,-128
  8070fc:	10000226 	beq	r2,zero,807108 <logic+0x6d0c>
  807100:	00800044 	movi	r2,1
  807104:	00000106 	br	80710c <logic+0x6d10>
  807108:	0005883a 	mov	r2,zero
  80710c:	1007883a 	mov	r3,r2
  807110:	e0bffc17 	ldw	r2,-16(fp)
  807114:	10c03b85 	stb	r3,238(r2)
  d->_g191 = d->_GO || d->_g213;
  807118:	e0bffc17 	ldw	r2,-16(fp)
  80711c:	10803fc3 	ldbu	r2,255(r2)
  807120:	10803fcc 	andi	r2,r2,255
  807124:	1080201c 	xori	r2,r2,128
  807128:	10bfe004 	addi	r2,r2,-128
  80712c:	1000061e 	bne	r2,zero,807148 <logic+0x6d4c>
  807130:	e0bffc17 	ldw	r2,-16(fp)
  807134:	10803f43 	ldbu	r2,253(r2)
  807138:	10803fcc 	andi	r2,r2,255
  80713c:	1080201c 	xori	r2,r2,128
  807140:	10bfe004 	addi	r2,r2,-128
  807144:	10000226 	beq	r2,zero,807150 <logic+0x6d54>
  807148:	00800044 	movi	r2,1
  80714c:	00000106 	br	807154 <logic+0x6d58>
  807150:	0005883a 	mov	r2,zero
  807154:	1007883a 	mov	r3,r2
  807158:	e0bffc17 	ldw	r2,-16(fp)
  80715c:	10c03c45 	stb	r3,241(r2)
  d->_g196 = d->_GO || d->_g54;
  807160:	e0bffc17 	ldw	r2,-16(fp)
  807164:	10803fc3 	ldbu	r2,255(r2)
  807168:	10803fcc 	andi	r2,r2,255
  80716c:	1080201c 	xori	r2,r2,128
  807170:	10bfe004 	addi	r2,r2,-128
  807174:	1000061e 	bne	r2,zero,807190 <logic+0x6d94>
  807178:	e0bffc17 	ldw	r2,-16(fp)
  80717c:	10802443 	ldbu	r2,145(r2)
  807180:	10803fcc 	andi	r2,r2,255
  807184:	1080201c 	xori	r2,r2,128
  807188:	10bfe004 	addi	r2,r2,-128
  80718c:	10000226 	beq	r2,zero,807198 <logic+0x6d9c>
  807190:	00800044 	movi	r2,1
  807194:	00000106 	br	80719c <logic+0x6da0>
  807198:	0005883a 	mov	r2,zero
  80719c:	1007883a 	mov	r3,r2
  8071a0:	e0bffc17 	ldw	r2,-16(fp)
  8071a4:	10c03d45 	stb	r3,245(r2)
  d->_g193 = d->_GO || d->_g94;
  8071a8:	e0bffc17 	ldw	r2,-16(fp)
  8071ac:	10803fc3 	ldbu	r2,255(r2)
  8071b0:	10803fcc 	andi	r2,r2,255
  8071b4:	1080201c 	xori	r2,r2,128
  8071b8:	10bfe004 	addi	r2,r2,-128
  8071bc:	1000061e 	bne	r2,zero,8071d8 <logic+0x6ddc>
  8071c0:	e0bffc17 	ldw	r2,-16(fp)
  8071c4:	10802b43 	ldbu	r2,173(r2)
  8071c8:	10803fcc 	andi	r2,r2,255
  8071cc:	1080201c 	xori	r2,r2,128
  8071d0:	10bfe004 	addi	r2,r2,-128
  8071d4:	10000226 	beq	r2,zero,8071e0 <logic+0x6de4>
  8071d8:	00800044 	movi	r2,1
  8071dc:	00000106 	br	8071e4 <logic+0x6de8>
  8071e0:	0005883a 	mov	r2,zero
  8071e4:	1007883a 	mov	r3,r2
  8071e8:	e0bffc17 	ldw	r2,-16(fp)
  8071ec:	10c03cc5 	stb	r3,243(r2)
  d->_g185 = d->_GO || d->_g53_e2;
  8071f0:	e0bffc17 	ldw	r2,-16(fp)
  8071f4:	10803fc3 	ldbu	r2,255(r2)
  8071f8:	10803fcc 	andi	r2,r2,255
  8071fc:	1080201c 	xori	r2,r2,128
  807200:	10bfe004 	addi	r2,r2,-128
  807204:	1000061e 	bne	r2,zero,807220 <logic+0x6e24>
  807208:	e0bffc17 	ldw	r2,-16(fp)
  80720c:	10805643 	ldbu	r2,345(r2)
  807210:	10803fcc 	andi	r2,r2,255
  807214:	1080201c 	xori	r2,r2,128
  807218:	10bfe004 	addi	r2,r2,-128
  80721c:	10000226 	beq	r2,zero,807228 <logic+0x6e2c>
  807220:	00800044 	movi	r2,1
  807224:	00000106 	br	80722c <logic+0x6e30>
  807228:	0005883a 	mov	r2,zero
  80722c:	1007883a 	mov	r3,r2
  807230:	e0bffc17 	ldw	r2,-16(fp)
  807234:	10c03b45 	stb	r3,237(r2)
  d->_g202 = d->_GO || d->_g137;
  807238:	e0bffc17 	ldw	r2,-16(fp)
  80723c:	10803fc3 	ldbu	r2,255(r2)
  807240:	10803fcc 	andi	r2,r2,255
  807244:	1080201c 	xori	r2,r2,128
  807248:	10bfe004 	addi	r2,r2,-128
  80724c:	1000061e 	bne	r2,zero,807268 <logic+0x6e6c>
  807250:	e0bffc17 	ldw	r2,-16(fp)
  807254:	108032c3 	ldbu	r2,203(r2)
  807258:	10803fcc 	andi	r2,r2,255
  80725c:	1080201c 	xori	r2,r2,128
  807260:	10bfe004 	addi	r2,r2,-128
  807264:	10000226 	beq	r2,zero,807270 <logic+0x6e74>
  807268:	00800044 	movi	r2,1
  80726c:	00000106 	br	807274 <logic+0x6e78>
  807270:	0005883a 	mov	r2,zero
  807274:	1007883a 	mov	r3,r2
  807278:	e0bffc17 	ldw	r2,-16(fp)
  80727c:	10c03e45 	stb	r3,249(r2)
}
  807280:	0001883a 	nop
  807284:	e6fffd04 	addi	sp,fp,-12
  807288:	dfc00417 	ldw	ra,16(sp)
  80728c:	df000317 	ldw	fp,12(sp)
  807290:	dc800217 	ldw	r18,8(sp)
  807294:	dc400117 	ldw	r17,4(sp)
  807298:	dc000017 	ldw	r16,0(sp)
  80729c:	dec00504 	addi	sp,sp,20
  8072a0:	f800283a 	ret

008072a4 <reset>:

void reset(TickData* d) {
  8072a4:	defffe04 	addi	sp,sp,-8
  8072a8:	df000115 	stw	fp,4(sp)
  8072ac:	df000104 	addi	fp,sp,4
  8072b0:	e13fff15 	stw	r4,-4(fp)
  d->_GO = 1;
  8072b4:	e0bfff17 	ldw	r2,-4(fp)
  8072b8:	00c00044 	movi	r3,1
  8072bc:	10c03fc5 	stb	r3,255(r2)
  d->_TERM = 0;
  8072c0:	e0bfff17 	ldw	r2,-4(fp)
  8072c4:	10005985 	stb	zero,358(r2)
  d->AVI = AVI_VALUE;
  8072c8:	e0bfff17 	ldw	r2,-4(fp)
  8072cc:	00c04b04 	movi	r3,300
  8072d0:	10c00015 	stw	r3,0(r2)
  d->AEI = AEI_VALUE;
  8072d4:	e0bfff17 	ldw	r2,-4(fp)
  8072d8:	00c0c804 	movi	r3,800
  8072dc:	10c00115 	stw	r3,4(r2)
  d->PVARP = PVARP_VALUE;
  8072e0:	e0bfff17 	ldw	r2,-4(fp)
  8072e4:	00c00c84 	movi	r3,50
  8072e8:	10c00215 	stw	r3,8(r2)
  d->VRP = VRP_VALUE;
  8072ec:	e0bfff17 	ldw	r2,-4(fp)
  8072f0:	00c02584 	movi	r3,150
  8072f4:	10c00315 	stw	r3,12(r2)
  d->LRI = LRI_VALUE;
  8072f8:	e0bfff17 	ldw	r2,-4(fp)
  8072fc:	00c0ed84 	movi	r3,950
  807300:	10c00415 	stw	r3,16(r2)
  d->URI = URI_VALUE;
  807304:	e0bfff17 	ldw	r2,-4(fp)
  807308:	00c0e104 	movi	r3,900
  80730c:	10c00515 	stw	r3,20(r2)
  d->deltaT = 0.0;
  807310:	e0bfff17 	ldw	r2,-4(fp)
  807314:	10000615 	stw	zero,24(r2)
  807318:	10000715 	stw	zero,28(r2)
  d->sleepT = 0.0;
  80731c:	e0bfff17 	ldw	r2,-4(fp)
  807320:	10000815 	stw	zero,32(r2)
  807324:	10000915 	stw	zero,36(r2)
  d->AP = 0;
  807328:	e0bfff17 	ldw	r2,-4(fp)
  80732c:	10000a85 	stb	zero,42(r2)
  d->VP = 0;
  807330:	e0bfff17 	ldw	r2,-4(fp)
  807334:	10000ac5 	stb	zero,43(r2)
  d->_Pacemaker_local__region0_LRI_x = 0;
  807338:	e0bfff17 	ldw	r2,-4(fp)
  80733c:	10000b15 	stw	zero,44(r2)
  807340:	10000c15 	stw	zero,48(r2)
  d->_Pacemaker_local__region1_URI_x = 0;
  807344:	e0bfff17 	ldw	r2,-4(fp)
  807348:	10000d15 	stw	zero,52(r2)
  80734c:	10000e15 	stw	zero,56(r2)
  d->_Pacemaker_local__region2_PVARP_x = 0;
  807350:	e0bfff17 	ldw	r2,-4(fp)
  807354:	10000f15 	stw	zero,60(r2)
  807358:	10001015 	stw	zero,64(r2)
  d->_Pacemaker_local__region3_VRP_x = 0;
  80735c:	e0bfff17 	ldw	r2,-4(fp)
  807360:	10001115 	stw	zero,68(r2)
  807364:	10001215 	stw	zero,72(r2)
  d->_Pacemaker_local__region4_AVI_x = 0;
  807368:	e0bfff17 	ldw	r2,-4(fp)
  80736c:	10001315 	stw	zero,76(r2)
  807370:	10001415 	stw	zero,80(r2)
  d->_Pacemaker_local__region5_AEI_x = 0;
  807374:	e0bfff17 	ldw	r2,-4(fp)
  807378:	10001515 	stw	zero,84(r2)
  80737c:	10001615 	stw	zero,88(r2)
  d->_Pacemaker_local_iAP = 0;
  807380:	e0bfff17 	ldw	r2,-4(fp)
  807384:	10001705 	stb	zero,92(r2)
  d->_Pacemaker_local_iVP = 0;
  807388:	e0bfff17 	ldw	r2,-4(fp)
  80738c:	10001745 	stb	zero,93(r2)
  d->_Pacemaker_local_PVARP_timeout = 0;
  807390:	e0bfff17 	ldw	r2,-4(fp)
  807394:	10001785 	stb	zero,94(r2)
  d->_Pacemaker_local_VRP_timeout = 0;
  807398:	e0bfff17 	ldw	r2,-4(fp)
  80739c:	100017c5 	stb	zero,95(r2)
  d->_Pacemaker_local_URI_timeout = 0;
  8073a0:	e0bfff17 	ldw	r2,-4(fp)
  8073a4:	10001805 	stb	zero,96(r2)
  d->_pg179 = 0;
  8073a8:	e0bfff17 	ldw	r2,-4(fp)
  8073ac:	100059c5 	stb	zero,359(r2)
  d->_pg144 = 0;
  8073b0:	e0bfff17 	ldw	r2,-4(fp)
  8073b4:	10005a05 	stb	zero,360(r2)
  d->_pg163 = 0;
  8073b8:	e0bfff17 	ldw	r2,-4(fp)
  8073bc:	10005a45 	stb	zero,361(r2)
  d->_pg66 = 0;
  8073c0:	e0bfff17 	ldw	r2,-4(fp)
  8073c4:	10005a85 	stb	zero,362(r2)
  d->_pg65 = 0;
  8073c8:	e0bfff17 	ldw	r2,-4(fp)
  8073cc:	10005ac5 	stb	zero,363(r2)
  d->_pg191 = 0;
  8073d0:	e0bfff17 	ldw	r2,-4(fp)
  8073d4:	10005b05 	stb	zero,364(r2)
  d->_pg43 = 0;
  8073d8:	e0bfff17 	ldw	r2,-4(fp)
  8073dc:	10005b45 	stb	zero,365(r2)
  d->_pg46 = 0;
  8073e0:	e0bfff17 	ldw	r2,-4(fp)
  8073e4:	10005b85 	stb	zero,366(r2)
  d->_pg37 = 0;
  8073e8:	e0bfff17 	ldw	r2,-4(fp)
  8073ec:	10005bc5 	stb	zero,367(r2)
  d->_pg185 = 0;
  8073f0:	e0bfff17 	ldw	r2,-4(fp)
  8073f4:	10005c05 	stb	zero,368(r2)
  d->_pg154 = 0;
  8073f8:	e0bfff17 	ldw	r2,-4(fp)
  8073fc:	10005c45 	stb	zero,369(r2)
  d->_pg148 = 0;
  807400:	e0bfff17 	ldw	r2,-4(fp)
  807404:	10005c85 	stb	zero,370(r2)
  d->_pg153 = 0;
  807408:	e0bfff17 	ldw	r2,-4(fp)
  80740c:	10005cc5 	stb	zero,371(r2)
  d->_pg187 = 0;
  807410:	e0bfff17 	ldw	r2,-4(fp)
  807414:	10005d05 	stb	zero,372(r2)
  d->_pg29 = 0;
  807418:	e0bfff17 	ldw	r2,-4(fp)
  80741c:	10005d45 	stb	zero,373(r2)
  d->_pg28 = 0;
  807420:	e0bfff17 	ldw	r2,-4(fp)
  807424:	10005d85 	stb	zero,374(r2)
  d->_pg14 = 0;
  807428:	e0bfff17 	ldw	r2,-4(fp)
  80742c:	10005dc5 	stb	zero,375(r2)
  d->_pg24 = 0;
  807430:	e0bfff17 	ldw	r2,-4(fp)
  807434:	10005e05 	stb	zero,376(r2)
  d->_pg19 = 0;
  807438:	e0bfff17 	ldw	r2,-4(fp)
  80743c:	10005e45 	stb	zero,377(r2)
  d->_pg103 = 0;
  807440:	e0bfff17 	ldw	r2,-4(fp)
  807444:	10005e85 	stb	zero,378(r2)
  d->_pg70 = 0;
  807448:	e0bfff17 	ldw	r2,-4(fp)
  80744c:	10005ec5 	stb	zero,379(r2)
  d->_pg196 = 0;
  807450:	e0bfff17 	ldw	r2,-4(fp)
  807454:	10005f05 	stb	zero,380(r2)
  d->_pg83 = 0;
  807458:	e0bfff17 	ldw	r2,-4(fp)
  80745c:	10005f45 	stb	zero,381(r2)
  d->_pg80 = 0;
  807460:	e0bfff17 	ldw	r2,-4(fp)
  807464:	10005f85 	stb	zero,382(r2)
  d->_pg78 = 0;
  807468:	e0bfff17 	ldw	r2,-4(fp)
  80746c:	10005fc5 	stb	zero,383(r2)
  d->_pg90 = 0;
  807470:	e0bfff17 	ldw	r2,-4(fp)
  807474:	10006005 	stb	zero,384(r2)
  d->_pg108 = 0;
  807478:	e0bfff17 	ldw	r2,-4(fp)
  80747c:	10006045 	stb	zero,385(r2)
  d->_pg107 = 0;
  807480:	e0bfff17 	ldw	r2,-4(fp)
  807484:	10006085 	stb	zero,386(r2)
  d->_pg193 = 0;
  807488:	e0bfff17 	ldw	r2,-4(fp)
  80748c:	100060c5 	stb	zero,387(r2)
  d->_pg117 = 0;
  807490:	e0bfff17 	ldw	r2,-4(fp)
  807494:	10006105 	stb	zero,388(r2)
  d->_pg120 = 0;
  807498:	e0bfff17 	ldw	r2,-4(fp)
  80749c:	10006145 	stb	zero,389(r2)
  d->_pg111 = 0;
  8074a0:	e0bfff17 	ldw	r2,-4(fp)
  8074a4:	10006185 	stb	zero,390(r2)
  d->_pg116 = 0;
  8074a8:	e0bfff17 	ldw	r2,-4(fp)
  8074ac:	100061c5 	stb	zero,391(r2)
  d->_pg205 = 0;
  8074b0:	e0bfff17 	ldw	r2,-4(fp)
  8074b4:	10006205 	stb	zero,392(r2)
  d->_pg176 = 0;
  8074b8:	e0bfff17 	ldw	r2,-4(fp)
  8074bc:	10006245 	stb	zero,393(r2)
  d->_pg184 = 0;
  8074c0:	e0bfff17 	ldw	r2,-4(fp)
  8074c4:	10006285 	stb	zero,394(r2)
  d->_pg202 = 0;
  8074c8:	e0bfff17 	ldw	r2,-4(fp)
  8074cc:	100062c5 	stb	zero,395(r2)
  d->_pg192_e1 = 0;
  8074d0:	e0bfff17 	ldw	r2,-4(fp)
  8074d4:	10006305 	stb	zero,396(r2)
  d->_pg168 = 0;
  8074d8:	e0bfff17 	ldw	r2,-4(fp)
  8074dc:	10006345 	stb	zero,397(r2)
}
  8074e0:	0001883a 	nop
  8074e4:	e037883a 	mov	sp,fp
  8074e8:	df000017 	ldw	fp,0(sp)
  8074ec:	dec00104 	addi	sp,sp,4
  8074f0:	f800283a 	ret

008074f4 <tick>:

void tick(TickData* d) {
  8074f4:	defffd04 	addi	sp,sp,-12
  8074f8:	dfc00215 	stw	ra,8(sp)
  8074fc:	df000115 	stw	fp,4(sp)
  807500:	df000104 	addi	fp,sp,4
  807504:	e13fff15 	stw	r4,-4(fp)
  logic(d);
  807508:	e13fff17 	ldw	r4,-4(fp)
  80750c:	08003fc0 	call	8003fc <logic>

  d->_pg179 = d->_g179;
  807510:	e0bfff17 	ldw	r2,-4(fp)
  807514:	10c03a83 	ldbu	r3,234(r2)
  807518:	e0bfff17 	ldw	r2,-4(fp)
  80751c:	10c059c5 	stb	r3,359(r2)
  d->_pg144 = d->_g144;
  807520:	e0bfff17 	ldw	r2,-4(fp)
  807524:	10c033c3 	ldbu	r3,207(r2)
  807528:	e0bfff17 	ldw	r2,-4(fp)
  80752c:	10c05a05 	stb	r3,360(r2)
  d->_pg163 = d->_g163;
  807530:	e0bfff17 	ldw	r2,-4(fp)
  807534:	10c03743 	ldbu	r3,221(r2)
  807538:	e0bfff17 	ldw	r2,-4(fp)
  80753c:	10c05a45 	stb	r3,361(r2)
  d->_pg66 = d->_g66;
  807540:	e0bfff17 	ldw	r2,-4(fp)
  807544:	10c02683 	ldbu	r3,154(r2)
  807548:	e0bfff17 	ldw	r2,-4(fp)
  80754c:	10c05a85 	stb	r3,362(r2)
  d->_pg65 = d->_g65;
  807550:	e0bfff17 	ldw	r2,-4(fp)
  807554:	10c02643 	ldbu	r3,153(r2)
  807558:	e0bfff17 	ldw	r2,-4(fp)
  80755c:	10c05ac5 	stb	r3,363(r2)
  d->_pg191 = d->_g191;
  807560:	e0bfff17 	ldw	r2,-4(fp)
  807564:	10c03c43 	ldbu	r3,241(r2)
  807568:	e0bfff17 	ldw	r2,-4(fp)
  80756c:	10c05b05 	stb	r3,364(r2)
  d->_pg43 = d->_g43;
  807570:	e0bfff17 	ldw	r2,-4(fp)
  807574:	10c02243 	ldbu	r3,137(r2)
  807578:	e0bfff17 	ldw	r2,-4(fp)
  80757c:	10c05b45 	stb	r3,365(r2)
  d->_pg46 = d->_g46;
  807580:	e0bfff17 	ldw	r2,-4(fp)
  807584:	10c022c3 	ldbu	r3,139(r2)
  807588:	e0bfff17 	ldw	r2,-4(fp)
  80758c:	10c05b85 	stb	r3,366(r2)
  d->_pg37 = d->_g37;
  807590:	e0bfff17 	ldw	r2,-4(fp)
  807594:	10c02103 	ldbu	r3,132(r2)
  807598:	e0bfff17 	ldw	r2,-4(fp)
  80759c:	10c05bc5 	stb	r3,367(r2)
  d->_pg185 = d->_g185;
  8075a0:	e0bfff17 	ldw	r2,-4(fp)
  8075a4:	10c03b43 	ldbu	r3,237(r2)
  8075a8:	e0bfff17 	ldw	r2,-4(fp)
  8075ac:	10c05c05 	stb	r3,368(r2)
  d->_pg154 = d->_g154;
  8075b0:	e0bfff17 	ldw	r2,-4(fp)
  8075b4:	10c035c3 	ldbu	r3,215(r2)
  8075b8:	e0bfff17 	ldw	r2,-4(fp)
  8075bc:	10c05c45 	stb	r3,369(r2)
  d->_pg148 = d->_g148;
  8075c0:	e0bfff17 	ldw	r2,-4(fp)
  8075c4:	10c03483 	ldbu	r3,210(r2)
  8075c8:	e0bfff17 	ldw	r2,-4(fp)
  8075cc:	10c05c85 	stb	r3,370(r2)
  d->_pg153 = d->_g153;
  8075d0:	e0bfff17 	ldw	r2,-4(fp)
  8075d4:	10c03583 	ldbu	r3,214(r2)
  8075d8:	e0bfff17 	ldw	r2,-4(fp)
  8075dc:	10c05cc5 	stb	r3,371(r2)
  d->_pg187 = d->_g187;
  8075e0:	e0bfff17 	ldw	r2,-4(fp)
  8075e4:	10c03b83 	ldbu	r3,238(r2)
  8075e8:	e0bfff17 	ldw	r2,-4(fp)
  8075ec:	10c05d05 	stb	r3,372(r2)
  d->_pg29 = d->_g29;
  8075f0:	e0bfff17 	ldw	r2,-4(fp)
  8075f4:	10c02003 	ldbu	r3,128(r2)
  8075f8:	e0bfff17 	ldw	r2,-4(fp)
  8075fc:	10c05d45 	stb	r3,373(r2)
  d->_pg28 = d->_g28;
  807600:	e0bfff17 	ldw	r2,-4(fp)
  807604:	10c01fc3 	ldbu	r3,127(r2)
  807608:	e0bfff17 	ldw	r2,-4(fp)
  80760c:	10c05d85 	stb	r3,374(r2)
  d->_pg14 = d->_g14;
  807610:	e0bfff17 	ldw	r2,-4(fp)
  807614:	10c01d03 	ldbu	r3,116(r2)
  807618:	e0bfff17 	ldw	r2,-4(fp)
  80761c:	10c05dc5 	stb	r3,375(r2)
  d->_pg24 = d->_g24;
  807620:	e0bfff17 	ldw	r2,-4(fp)
  807624:	10c01ec3 	ldbu	r3,123(r2)
  807628:	e0bfff17 	ldw	r2,-4(fp)
  80762c:	10c05e05 	stb	r3,376(r2)
  d->_pg19 = d->_g19;
  807630:	e0bfff17 	ldw	r2,-4(fp)
  807634:	10c01e03 	ldbu	r3,120(r2)
  807638:	e0bfff17 	ldw	r2,-4(fp)
  80763c:	10c05e45 	stb	r3,377(r2)
  d->_pg103 = d->_g103;
  807640:	e0bfff17 	ldw	r2,-4(fp)
  807644:	10c02d03 	ldbu	r3,180(r2)
  807648:	e0bfff17 	ldw	r2,-4(fp)
  80764c:	10c05e85 	stb	r3,378(r2)
  d->_pg70 = d->_g70;
  807650:	e0bfff17 	ldw	r2,-4(fp)
  807654:	10c026c3 	ldbu	r3,155(r2)
  807658:	e0bfff17 	ldw	r2,-4(fp)
  80765c:	10c05ec5 	stb	r3,379(r2)
  d->_pg196 = d->_g196;
  807660:	e0bfff17 	ldw	r2,-4(fp)
  807664:	10c03d43 	ldbu	r3,245(r2)
  807668:	e0bfff17 	ldw	r2,-4(fp)
  80766c:	10c05f05 	stb	r3,380(r2)
  d->_pg83 = d->_g83;
  807670:	e0bfff17 	ldw	r2,-4(fp)
  807674:	10c02943 	ldbu	r3,165(r2)
  807678:	e0bfff17 	ldw	r2,-4(fp)
  80767c:	10c05f45 	stb	r3,381(r2)
  d->_pg80 = d->_g80;
  807680:	e0bfff17 	ldw	r2,-4(fp)
  807684:	10c028c3 	ldbu	r3,163(r2)
  807688:	e0bfff17 	ldw	r2,-4(fp)
  80768c:	10c05f85 	stb	r3,382(r2)
  d->_pg78 = d->_g78;
  807690:	e0bfff17 	ldw	r2,-4(fp)
  807694:	10c02843 	ldbu	r3,161(r2)
  807698:	e0bfff17 	ldw	r2,-4(fp)
  80769c:	10c05fc5 	stb	r3,383(r2)
  d->_pg90 = d->_g90;
  8076a0:	e0bfff17 	ldw	r2,-4(fp)
  8076a4:	10c02a83 	ldbu	r3,170(r2)
  8076a8:	e0bfff17 	ldw	r2,-4(fp)
  8076ac:	10c06005 	stb	r3,384(r2)
  d->_pg108 = d->_g108;
  8076b0:	e0bfff17 	ldw	r2,-4(fp)
  8076b4:	10c02d83 	ldbu	r3,182(r2)
  8076b8:	e0bfff17 	ldw	r2,-4(fp)
  8076bc:	10c06045 	stb	r3,385(r2)
  d->_pg107 = d->_g107;
  8076c0:	e0bfff17 	ldw	r2,-4(fp)
  8076c4:	10c02d43 	ldbu	r3,181(r2)
  8076c8:	e0bfff17 	ldw	r2,-4(fp)
  8076cc:	10c06085 	stb	r3,386(r2)
  d->_pg193 = d->_g193;
  8076d0:	e0bfff17 	ldw	r2,-4(fp)
  8076d4:	10c03cc3 	ldbu	r3,243(r2)
  8076d8:	e0bfff17 	ldw	r2,-4(fp)
  8076dc:	10c060c5 	stb	r3,387(r2)
  d->_pg117 = d->_g117;
  8076e0:	e0bfff17 	ldw	r2,-4(fp)
  8076e4:	10c02f43 	ldbu	r3,189(r2)
  8076e8:	e0bfff17 	ldw	r2,-4(fp)
  8076ec:	10c06105 	stb	r3,388(r2)
  d->_pg120 = d->_g120;
  8076f0:	e0bfff17 	ldw	r2,-4(fp)
  8076f4:	10c02fc3 	ldbu	r3,191(r2)
  8076f8:	e0bfff17 	ldw	r2,-4(fp)
  8076fc:	10c06145 	stb	r3,389(r2)
  d->_pg111 = d->_g111;
  807700:	e0bfff17 	ldw	r2,-4(fp)
  807704:	10c02e03 	ldbu	r3,184(r2)
  807708:	e0bfff17 	ldw	r2,-4(fp)
  80770c:	10c06185 	stb	r3,390(r2)
  d->_pg116 = d->_g116;
  807710:	e0bfff17 	ldw	r2,-4(fp)
  807714:	10c02f03 	ldbu	r3,188(r2)
  807718:	e0bfff17 	ldw	r2,-4(fp)
  80771c:	10c061c5 	stb	r3,391(r2)
  d->_pg205 = d->_g205;
  807720:	e0bfff17 	ldw	r2,-4(fp)
  807724:	10c03f03 	ldbu	r3,252(r2)
  807728:	e0bfff17 	ldw	r2,-4(fp)
  80772c:	10c06205 	stb	r3,392(r2)
  d->_pg176 = d->_g176;
  807730:	e0bfff17 	ldw	r2,-4(fp)
  807734:	10c039c3 	ldbu	r3,231(r2)
  807738:	e0bfff17 	ldw	r2,-4(fp)
  80773c:	10c06245 	stb	r3,393(r2)
  d->_pg184 = d->_g184;
  807740:	e0bfff17 	ldw	r2,-4(fp)
  807744:	10c03b03 	ldbu	r3,236(r2)
  807748:	e0bfff17 	ldw	r2,-4(fp)
  80774c:	10c06285 	stb	r3,394(r2)
  d->_pg202 = d->_g202;
  807750:	e0bfff17 	ldw	r2,-4(fp)
  807754:	10c03e43 	ldbu	r3,249(r2)
  807758:	e0bfff17 	ldw	r2,-4(fp)
  80775c:	10c062c5 	stb	r3,395(r2)
  d->_pg192_e1 = d->_g192_e1;
  807760:	e0bfff17 	ldw	r2,-4(fp)
  807764:	10c05903 	ldbu	r3,356(r2)
  807768:	e0bfff17 	ldw	r2,-4(fp)
  80776c:	10c06305 	stb	r3,396(r2)
  d->_pg168 = d->_g168;
  807770:	e0bfff17 	ldw	r2,-4(fp)
  807774:	10c03843 	ldbu	r3,225(r2)
  807778:	e0bfff17 	ldw	r2,-4(fp)
  80777c:	10c06345 	stb	r3,397(r2)
  d->_GO = 0;
  807780:	e0bfff17 	ldw	r2,-4(fp)
  807784:	10003fc5 	stb	zero,255(r2)
}
  807788:	0001883a 	nop
  80778c:	e037883a 	mov	sp,fp
  807790:	dfc00117 	ldw	ra,4(sp)
  807794:	df000017 	ldw	fp,0(sp)
  807798:	dec00204 	addi	sp,sp,8
  80779c:	f800283a 	ret

008077a0 <__floatundidf>:
  8077a0:	defffc04 	addi	sp,sp,-16
  8077a4:	dc800215 	stw	r18,8(sp)
  8077a8:	2025883a 	mov	r18,r4
  8077ac:	2809883a 	mov	r4,r5
  8077b0:	dfc00315 	stw	ra,12(sp)
  8077b4:	dc400115 	stw	r17,4(sp)
  8077b8:	dc000015 	stw	r16,0(sp)
  8077bc:	080937c0 	call	80937c <__floatunsidf>
  8077c0:	000d883a 	mov	r6,zero
  8077c4:	01d07c34 	movhi	r7,16880
  8077c8:	180b883a 	mov	r5,r3
  8077cc:	1009883a 	mov	r4,r2
  8077d0:	080828c0 	call	80828c <__muldf3>
  8077d4:	9009883a 	mov	r4,r18
  8077d8:	1023883a 	mov	r17,r2
  8077dc:	1821883a 	mov	r16,r3
  8077e0:	080937c0 	call	80937c <__floatunsidf>
  8077e4:	880d883a 	mov	r6,r17
  8077e8:	800f883a 	mov	r7,r16
  8077ec:	1009883a 	mov	r4,r2
  8077f0:	180b883a 	mov	r5,r3
  8077f4:	08078100 	call	807810 <__adddf3>
  8077f8:	dfc00317 	ldw	ra,12(sp)
  8077fc:	dc800217 	ldw	r18,8(sp)
  807800:	dc400117 	ldw	r17,4(sp)
  807804:	dc000017 	ldw	r16,0(sp)
  807808:	dec00404 	addi	sp,sp,16
  80780c:	f800283a 	ret

00807810 <__adddf3>:
  807810:	02c00434 	movhi	r11,16
  807814:	5affffc4 	addi	r11,r11,-1
  807818:	2806d7fa 	srli	r3,r5,31
  80781c:	2ad4703a 	and	r10,r5,r11
  807820:	3ad2703a 	and	r9,r7,r11
  807824:	3804d53a 	srli	r2,r7,20
  807828:	3018d77a 	srli	r12,r6,29
  80782c:	280ad53a 	srli	r5,r5,20
  807830:	501490fa 	slli	r10,r10,3
  807834:	2010d77a 	srli	r8,r4,29
  807838:	481290fa 	slli	r9,r9,3
  80783c:	380ed7fa 	srli	r7,r7,31
  807840:	defffb04 	addi	sp,sp,-20
  807844:	dc800215 	stw	r18,8(sp)
  807848:	dc400115 	stw	r17,4(sp)
  80784c:	dc000015 	stw	r16,0(sp)
  807850:	dfc00415 	stw	ra,16(sp)
  807854:	dcc00315 	stw	r19,12(sp)
  807858:	1c803fcc 	andi	r18,r3,255
  80785c:	2c01ffcc 	andi	r16,r5,2047
  807860:	5210b03a 	or	r8,r10,r8
  807864:	202290fa 	slli	r17,r4,3
  807868:	1081ffcc 	andi	r2,r2,2047
  80786c:	4b12b03a 	or	r9,r9,r12
  807870:	300c90fa 	slli	r6,r6,3
  807874:	91c07526 	beq	r18,r7,807a4c <__adddf3+0x23c>
  807878:	8087c83a 	sub	r3,r16,r2
  80787c:	00c0ab0e 	bge	zero,r3,807b2c <__adddf3+0x31c>
  807880:	10002a1e 	bne	r2,zero,80792c <__adddf3+0x11c>
  807884:	4984b03a 	or	r2,r9,r6
  807888:	1000961e 	bne	r2,zero,807ae4 <__adddf3+0x2d4>
  80788c:	888001cc 	andi	r2,r17,7
  807890:	10000726 	beq	r2,zero,8078b0 <__adddf3+0xa0>
  807894:	888003cc 	andi	r2,r17,15
  807898:	00c00104 	movi	r3,4
  80789c:	10c00426 	beq	r2,r3,8078b0 <__adddf3+0xa0>
  8078a0:	88c7883a 	add	r3,r17,r3
  8078a4:	1c63803a 	cmpltu	r17,r3,r17
  8078a8:	4451883a 	add	r8,r8,r17
  8078ac:	1823883a 	mov	r17,r3
  8078b0:	4080202c 	andhi	r2,r8,128
  8078b4:	10005926 	beq	r2,zero,807a1c <__adddf3+0x20c>
  8078b8:	84000044 	addi	r16,r16,1
  8078bc:	0081ffc4 	movi	r2,2047
  8078c0:	8080ba26 	beq	r16,r2,807bac <__adddf3+0x39c>
  8078c4:	00bfe034 	movhi	r2,65408
  8078c8:	10bfffc4 	addi	r2,r2,-1
  8078cc:	4090703a 	and	r8,r8,r2
  8078d0:	4004977a 	slli	r2,r8,29
  8078d4:	4010927a 	slli	r8,r8,9
  8078d8:	8822d0fa 	srli	r17,r17,3
  8078dc:	8401ffcc 	andi	r16,r16,2047
  8078e0:	4010d33a 	srli	r8,r8,12
  8078e4:	9007883a 	mov	r3,r18
  8078e8:	1444b03a 	or	r2,r2,r17
  8078ec:	8401ffcc 	andi	r16,r16,2047
  8078f0:	8020953a 	slli	r16,r16,20
  8078f4:	18c03fcc 	andi	r3,r3,255
  8078f8:	01000434 	movhi	r4,16
  8078fc:	213fffc4 	addi	r4,r4,-1
  807900:	180697fa 	slli	r3,r3,31
  807904:	4110703a 	and	r8,r8,r4
  807908:	4410b03a 	or	r8,r8,r16
  80790c:	40c6b03a 	or	r3,r8,r3
  807910:	dfc00417 	ldw	ra,16(sp)
  807914:	dcc00317 	ldw	r19,12(sp)
  807918:	dc800217 	ldw	r18,8(sp)
  80791c:	dc400117 	ldw	r17,4(sp)
  807920:	dc000017 	ldw	r16,0(sp)
  807924:	dec00504 	addi	sp,sp,20
  807928:	f800283a 	ret
  80792c:	0081ffc4 	movi	r2,2047
  807930:	80bfd626 	beq	r16,r2,80788c <__alt_mem_onchip_mem+0xff7ff88c>
  807934:	4a402034 	orhi	r9,r9,128
  807938:	00800e04 	movi	r2,56
  80793c:	10c09f16 	blt	r2,r3,807bbc <__adddf3+0x3ac>
  807940:	008007c4 	movi	r2,31
  807944:	10c0c216 	blt	r2,r3,807c50 <__adddf3+0x440>
  807948:	00800804 	movi	r2,32
  80794c:	10c5c83a 	sub	r2,r2,r3
  807950:	488a983a 	sll	r5,r9,r2
  807954:	30c8d83a 	srl	r4,r6,r3
  807958:	3084983a 	sll	r2,r6,r2
  80795c:	48c6d83a 	srl	r3,r9,r3
  807960:	290cb03a 	or	r6,r5,r4
  807964:	1004c03a 	cmpne	r2,r2,zero
  807968:	308cb03a 	or	r6,r6,r2
  80796c:	898dc83a 	sub	r6,r17,r6
  807970:	89a3803a 	cmpltu	r17,r17,r6
  807974:	40d1c83a 	sub	r8,r8,r3
  807978:	4451c83a 	sub	r8,r8,r17
  80797c:	3023883a 	mov	r17,r6
  807980:	4080202c 	andhi	r2,r8,128
  807984:	10002326 	beq	r2,zero,807a14 <__adddf3+0x204>
  807988:	04c02034 	movhi	r19,128
  80798c:	9cffffc4 	addi	r19,r19,-1
  807990:	44e6703a 	and	r19,r8,r19
  807994:	98007626 	beq	r19,zero,807b70 <__adddf3+0x360>
  807998:	9809883a 	mov	r4,r19
  80799c:	08094240 	call	809424 <__clzsi2>
  8079a0:	10fffe04 	addi	r3,r2,-8
  8079a4:	010007c4 	movi	r4,31
  8079a8:	20c07716 	blt	r4,r3,807b88 <__adddf3+0x378>
  8079ac:	00800804 	movi	r2,32
  8079b0:	10c5c83a 	sub	r2,r2,r3
  8079b4:	8884d83a 	srl	r2,r17,r2
  8079b8:	98d0983a 	sll	r8,r19,r3
  8079bc:	88e2983a 	sll	r17,r17,r3
  8079c0:	1204b03a 	or	r2,r2,r8
  8079c4:	1c007416 	blt	r3,r16,807b98 <__adddf3+0x388>
  8079c8:	1c21c83a 	sub	r16,r3,r16
  8079cc:	82000044 	addi	r8,r16,1
  8079d0:	00c007c4 	movi	r3,31
  8079d4:	1a009116 	blt	r3,r8,807c1c <__adddf3+0x40c>
  8079d8:	00c00804 	movi	r3,32
  8079dc:	1a07c83a 	sub	r3,r3,r8
  8079e0:	8a08d83a 	srl	r4,r17,r8
  8079e4:	88e2983a 	sll	r17,r17,r3
  8079e8:	10c6983a 	sll	r3,r2,r3
  8079ec:	1210d83a 	srl	r8,r2,r8
  8079f0:	8804c03a 	cmpne	r2,r17,zero
  8079f4:	1906b03a 	or	r3,r3,r4
  8079f8:	18a2b03a 	or	r17,r3,r2
  8079fc:	0021883a 	mov	r16,zero
  807a00:	003fa206 	br	80788c <__alt_mem_onchip_mem+0xff7ff88c>
  807a04:	1890b03a 	or	r8,r3,r2
  807a08:	40017d26 	beq	r8,zero,808000 <__adddf3+0x7f0>
  807a0c:	1011883a 	mov	r8,r2
  807a10:	1823883a 	mov	r17,r3
  807a14:	888001cc 	andi	r2,r17,7
  807a18:	103f9e1e 	bne	r2,zero,807894 <__alt_mem_onchip_mem+0xff7ff894>
  807a1c:	4004977a 	slli	r2,r8,29
  807a20:	8822d0fa 	srli	r17,r17,3
  807a24:	4010d0fa 	srli	r8,r8,3
  807a28:	9007883a 	mov	r3,r18
  807a2c:	1444b03a 	or	r2,r2,r17
  807a30:	0101ffc4 	movi	r4,2047
  807a34:	81002426 	beq	r16,r4,807ac8 <__adddf3+0x2b8>
  807a38:	8120703a 	and	r16,r16,r4
  807a3c:	01000434 	movhi	r4,16
  807a40:	213fffc4 	addi	r4,r4,-1
  807a44:	4110703a 	and	r8,r8,r4
  807a48:	003fa806 	br	8078ec <__alt_mem_onchip_mem+0xff7ff8ec>
  807a4c:	8089c83a 	sub	r4,r16,r2
  807a50:	01005e0e 	bge	zero,r4,807bcc <__adddf3+0x3bc>
  807a54:	10002b26 	beq	r2,zero,807b04 <__adddf3+0x2f4>
  807a58:	0081ffc4 	movi	r2,2047
  807a5c:	80bf8b26 	beq	r16,r2,80788c <__alt_mem_onchip_mem+0xff7ff88c>
  807a60:	4a402034 	orhi	r9,r9,128
  807a64:	00800e04 	movi	r2,56
  807a68:	1100a40e 	bge	r2,r4,807cfc <__adddf3+0x4ec>
  807a6c:	498cb03a 	or	r6,r9,r6
  807a70:	300ac03a 	cmpne	r5,r6,zero
  807a74:	0013883a 	mov	r9,zero
  807a78:	2c4b883a 	add	r5,r5,r17
  807a7c:	2c63803a 	cmpltu	r17,r5,r17
  807a80:	4a11883a 	add	r8,r9,r8
  807a84:	8a11883a 	add	r8,r17,r8
  807a88:	2823883a 	mov	r17,r5
  807a8c:	4080202c 	andhi	r2,r8,128
  807a90:	103fe026 	beq	r2,zero,807a14 <__alt_mem_onchip_mem+0xff7ffa14>
  807a94:	84000044 	addi	r16,r16,1
  807a98:	0081ffc4 	movi	r2,2047
  807a9c:	8080d226 	beq	r16,r2,807de8 <__adddf3+0x5d8>
  807aa0:	00bfe034 	movhi	r2,65408
  807aa4:	10bfffc4 	addi	r2,r2,-1
  807aa8:	4090703a 	and	r8,r8,r2
  807aac:	880ad07a 	srli	r5,r17,1
  807ab0:	400897fa 	slli	r4,r8,31
  807ab4:	88c0004c 	andi	r3,r17,1
  807ab8:	28e2b03a 	or	r17,r5,r3
  807abc:	4010d07a 	srli	r8,r8,1
  807ac0:	2462b03a 	or	r17,r4,r17
  807ac4:	003f7106 	br	80788c <__alt_mem_onchip_mem+0xff7ff88c>
  807ac8:	4088b03a 	or	r4,r8,r2
  807acc:	20014526 	beq	r4,zero,807fe4 <__adddf3+0x7d4>
  807ad0:	01000434 	movhi	r4,16
  807ad4:	42000234 	orhi	r8,r8,8
  807ad8:	213fffc4 	addi	r4,r4,-1
  807adc:	4110703a 	and	r8,r8,r4
  807ae0:	003f8206 	br	8078ec <__alt_mem_onchip_mem+0xff7ff8ec>
  807ae4:	18ffffc4 	addi	r3,r3,-1
  807ae8:	1800491e 	bne	r3,zero,807c10 <__adddf3+0x400>
  807aec:	898bc83a 	sub	r5,r17,r6
  807af0:	8963803a 	cmpltu	r17,r17,r5
  807af4:	4251c83a 	sub	r8,r8,r9
  807af8:	4451c83a 	sub	r8,r8,r17
  807afc:	2823883a 	mov	r17,r5
  807b00:	003f9f06 	br	807980 <__alt_mem_onchip_mem+0xff7ff980>
  807b04:	4984b03a 	or	r2,r9,r6
  807b08:	103f6026 	beq	r2,zero,80788c <__alt_mem_onchip_mem+0xff7ff88c>
  807b0c:	213fffc4 	addi	r4,r4,-1
  807b10:	2000931e 	bne	r4,zero,807d60 <__adddf3+0x550>
  807b14:	898d883a 	add	r6,r17,r6
  807b18:	3463803a 	cmpltu	r17,r6,r17
  807b1c:	4251883a 	add	r8,r8,r9
  807b20:	8a11883a 	add	r8,r17,r8
  807b24:	3023883a 	mov	r17,r6
  807b28:	003fd806 	br	807a8c <__alt_mem_onchip_mem+0xff7ffa8c>
  807b2c:	1800541e 	bne	r3,zero,807c80 <__adddf3+0x470>
  807b30:	80800044 	addi	r2,r16,1
  807b34:	1081ffcc 	andi	r2,r2,2047
  807b38:	00c00044 	movi	r3,1
  807b3c:	1880a00e 	bge	r3,r2,807dc0 <__adddf3+0x5b0>
  807b40:	8989c83a 	sub	r4,r17,r6
  807b44:	8905803a 	cmpltu	r2,r17,r4
  807b48:	4267c83a 	sub	r19,r8,r9
  807b4c:	98a7c83a 	sub	r19,r19,r2
  807b50:	9880202c 	andhi	r2,r19,128
  807b54:	10006326 	beq	r2,zero,807ce4 <__adddf3+0x4d4>
  807b58:	3463c83a 	sub	r17,r6,r17
  807b5c:	4a07c83a 	sub	r3,r9,r8
  807b60:	344d803a 	cmpltu	r6,r6,r17
  807b64:	19a7c83a 	sub	r19,r3,r6
  807b68:	3825883a 	mov	r18,r7
  807b6c:	983f8a1e 	bne	r19,zero,807998 <__alt_mem_onchip_mem+0xff7ff998>
  807b70:	8809883a 	mov	r4,r17
  807b74:	08094240 	call	809424 <__clzsi2>
  807b78:	10800804 	addi	r2,r2,32
  807b7c:	10fffe04 	addi	r3,r2,-8
  807b80:	010007c4 	movi	r4,31
  807b84:	20ff890e 	bge	r4,r3,8079ac <__alt_mem_onchip_mem+0xff7ff9ac>
  807b88:	10bff604 	addi	r2,r2,-40
  807b8c:	8884983a 	sll	r2,r17,r2
  807b90:	0023883a 	mov	r17,zero
  807b94:	1c3f8c0e 	bge	r3,r16,8079c8 <__alt_mem_onchip_mem+0xff7ff9c8>
  807b98:	023fe034 	movhi	r8,65408
  807b9c:	423fffc4 	addi	r8,r8,-1
  807ba0:	80e1c83a 	sub	r16,r16,r3
  807ba4:	1210703a 	and	r8,r2,r8
  807ba8:	003f3806 	br	80788c <__alt_mem_onchip_mem+0xff7ff88c>
  807bac:	9007883a 	mov	r3,r18
  807bb0:	0011883a 	mov	r8,zero
  807bb4:	0005883a 	mov	r2,zero
  807bb8:	003f4c06 	br	8078ec <__alt_mem_onchip_mem+0xff7ff8ec>
  807bbc:	498cb03a 	or	r6,r9,r6
  807bc0:	300cc03a 	cmpne	r6,r6,zero
  807bc4:	0007883a 	mov	r3,zero
  807bc8:	003f6806 	br	80796c <__alt_mem_onchip_mem+0xff7ff96c>
  807bcc:	20009c1e 	bne	r4,zero,807e40 <__adddf3+0x630>
  807bd0:	80800044 	addi	r2,r16,1
  807bd4:	1141ffcc 	andi	r5,r2,2047
  807bd8:	01000044 	movi	r4,1
  807bdc:	2140670e 	bge	r4,r5,807d7c <__adddf3+0x56c>
  807be0:	0101ffc4 	movi	r4,2047
  807be4:	11007f26 	beq	r2,r4,807de4 <__adddf3+0x5d4>
  807be8:	898d883a 	add	r6,r17,r6
  807bec:	4247883a 	add	r3,r8,r9
  807bf0:	3451803a 	cmpltu	r8,r6,r17
  807bf4:	40d1883a 	add	r8,r8,r3
  807bf8:	402297fa 	slli	r17,r8,31
  807bfc:	300cd07a 	srli	r6,r6,1
  807c00:	4010d07a 	srli	r8,r8,1
  807c04:	1021883a 	mov	r16,r2
  807c08:	89a2b03a 	or	r17,r17,r6
  807c0c:	003f1f06 	br	80788c <__alt_mem_onchip_mem+0xff7ff88c>
  807c10:	0081ffc4 	movi	r2,2047
  807c14:	80bf481e 	bne	r16,r2,807938 <__alt_mem_onchip_mem+0xff7ff938>
  807c18:	003f1c06 	br	80788c <__alt_mem_onchip_mem+0xff7ff88c>
  807c1c:	843ff844 	addi	r16,r16,-31
  807c20:	01000804 	movi	r4,32
  807c24:	1406d83a 	srl	r3,r2,r16
  807c28:	41005026 	beq	r8,r4,807d6c <__adddf3+0x55c>
  807c2c:	01001004 	movi	r4,64
  807c30:	2211c83a 	sub	r8,r4,r8
  807c34:	1204983a 	sll	r2,r2,r8
  807c38:	88a2b03a 	or	r17,r17,r2
  807c3c:	8822c03a 	cmpne	r17,r17,zero
  807c40:	1c62b03a 	or	r17,r3,r17
  807c44:	0011883a 	mov	r8,zero
  807c48:	0021883a 	mov	r16,zero
  807c4c:	003f7106 	br	807a14 <__alt_mem_onchip_mem+0xff7ffa14>
  807c50:	193ff804 	addi	r4,r3,-32
  807c54:	00800804 	movi	r2,32
  807c58:	4908d83a 	srl	r4,r9,r4
  807c5c:	18804526 	beq	r3,r2,807d74 <__adddf3+0x564>
  807c60:	00801004 	movi	r2,64
  807c64:	10c5c83a 	sub	r2,r2,r3
  807c68:	4886983a 	sll	r3,r9,r2
  807c6c:	198cb03a 	or	r6,r3,r6
  807c70:	300cc03a 	cmpne	r6,r6,zero
  807c74:	218cb03a 	or	r6,r4,r6
  807c78:	0007883a 	mov	r3,zero
  807c7c:	003f3b06 	br	80796c <__alt_mem_onchip_mem+0xff7ff96c>
  807c80:	80002a26 	beq	r16,zero,807d2c <__adddf3+0x51c>
  807c84:	0101ffc4 	movi	r4,2047
  807c88:	11006826 	beq	r2,r4,807e2c <__adddf3+0x61c>
  807c8c:	00c7c83a 	sub	r3,zero,r3
  807c90:	42002034 	orhi	r8,r8,128
  807c94:	01000e04 	movi	r4,56
  807c98:	20c07c16 	blt	r4,r3,807e8c <__adddf3+0x67c>
  807c9c:	010007c4 	movi	r4,31
  807ca0:	20c0da16 	blt	r4,r3,80800c <__adddf3+0x7fc>
  807ca4:	01000804 	movi	r4,32
  807ca8:	20c9c83a 	sub	r4,r4,r3
  807cac:	4114983a 	sll	r10,r8,r4
  807cb0:	88cad83a 	srl	r5,r17,r3
  807cb4:	8908983a 	sll	r4,r17,r4
  807cb8:	40c6d83a 	srl	r3,r8,r3
  807cbc:	5162b03a 	or	r17,r10,r5
  807cc0:	2008c03a 	cmpne	r4,r4,zero
  807cc4:	8922b03a 	or	r17,r17,r4
  807cc8:	3463c83a 	sub	r17,r6,r17
  807ccc:	48c7c83a 	sub	r3,r9,r3
  807cd0:	344d803a 	cmpltu	r6,r6,r17
  807cd4:	1991c83a 	sub	r8,r3,r6
  807cd8:	1021883a 	mov	r16,r2
  807cdc:	3825883a 	mov	r18,r7
  807ce0:	003f2706 	br	807980 <__alt_mem_onchip_mem+0xff7ff980>
  807ce4:	24d0b03a 	or	r8,r4,r19
  807ce8:	40001b1e 	bne	r8,zero,807d58 <__adddf3+0x548>
  807cec:	0005883a 	mov	r2,zero
  807cf0:	0007883a 	mov	r3,zero
  807cf4:	0021883a 	mov	r16,zero
  807cf8:	003f4d06 	br	807a30 <__alt_mem_onchip_mem+0xff7ffa30>
  807cfc:	008007c4 	movi	r2,31
  807d00:	11003c16 	blt	r2,r4,807df4 <__adddf3+0x5e4>
  807d04:	00800804 	movi	r2,32
  807d08:	1105c83a 	sub	r2,r2,r4
  807d0c:	488e983a 	sll	r7,r9,r2
  807d10:	310ad83a 	srl	r5,r6,r4
  807d14:	3084983a 	sll	r2,r6,r2
  807d18:	4912d83a 	srl	r9,r9,r4
  807d1c:	394ab03a 	or	r5,r7,r5
  807d20:	1004c03a 	cmpne	r2,r2,zero
  807d24:	288ab03a 	or	r5,r5,r2
  807d28:	003f5306 	br	807a78 <__alt_mem_onchip_mem+0xff7ffa78>
  807d2c:	4448b03a 	or	r4,r8,r17
  807d30:	20003e26 	beq	r4,zero,807e2c <__adddf3+0x61c>
  807d34:	00c6303a 	nor	r3,zero,r3
  807d38:	18003a1e 	bne	r3,zero,807e24 <__adddf3+0x614>
  807d3c:	3463c83a 	sub	r17,r6,r17
  807d40:	4a07c83a 	sub	r3,r9,r8
  807d44:	344d803a 	cmpltu	r6,r6,r17
  807d48:	1991c83a 	sub	r8,r3,r6
  807d4c:	1021883a 	mov	r16,r2
  807d50:	3825883a 	mov	r18,r7
  807d54:	003f0a06 	br	807980 <__alt_mem_onchip_mem+0xff7ff980>
  807d58:	2023883a 	mov	r17,r4
  807d5c:	003f0d06 	br	807994 <__alt_mem_onchip_mem+0xff7ff994>
  807d60:	0081ffc4 	movi	r2,2047
  807d64:	80bf3f1e 	bne	r16,r2,807a64 <__alt_mem_onchip_mem+0xff7ffa64>
  807d68:	003ec806 	br	80788c <__alt_mem_onchip_mem+0xff7ff88c>
  807d6c:	0005883a 	mov	r2,zero
  807d70:	003fb106 	br	807c38 <__alt_mem_onchip_mem+0xff7ffc38>
  807d74:	0007883a 	mov	r3,zero
  807d78:	003fbc06 	br	807c6c <__alt_mem_onchip_mem+0xff7ffc6c>
  807d7c:	4444b03a 	or	r2,r8,r17
  807d80:	8000871e 	bne	r16,zero,807fa0 <__adddf3+0x790>
  807d84:	1000ba26 	beq	r2,zero,808070 <__adddf3+0x860>
  807d88:	4984b03a 	or	r2,r9,r6
  807d8c:	103ebf26 	beq	r2,zero,80788c <__alt_mem_onchip_mem+0xff7ff88c>
  807d90:	8985883a 	add	r2,r17,r6
  807d94:	4247883a 	add	r3,r8,r9
  807d98:	1451803a 	cmpltu	r8,r2,r17
  807d9c:	40d1883a 	add	r8,r8,r3
  807da0:	40c0202c 	andhi	r3,r8,128
  807da4:	1023883a 	mov	r17,r2
  807da8:	183f1a26 	beq	r3,zero,807a14 <__alt_mem_onchip_mem+0xff7ffa14>
  807dac:	00bfe034 	movhi	r2,65408
  807db0:	10bfffc4 	addi	r2,r2,-1
  807db4:	2021883a 	mov	r16,r4
  807db8:	4090703a 	and	r8,r8,r2
  807dbc:	003eb306 	br	80788c <__alt_mem_onchip_mem+0xff7ff88c>
  807dc0:	4444b03a 	or	r2,r8,r17
  807dc4:	8000291e 	bne	r16,zero,807e6c <__adddf3+0x65c>
  807dc8:	10004b1e 	bne	r2,zero,807ef8 <__adddf3+0x6e8>
  807dcc:	4990b03a 	or	r8,r9,r6
  807dd0:	40008b26 	beq	r8,zero,808000 <__adddf3+0x7f0>
  807dd4:	4811883a 	mov	r8,r9
  807dd8:	3023883a 	mov	r17,r6
  807ddc:	3825883a 	mov	r18,r7
  807de0:	003eaa06 	br	80788c <__alt_mem_onchip_mem+0xff7ff88c>
  807de4:	1021883a 	mov	r16,r2
  807de8:	0011883a 	mov	r8,zero
  807dec:	0005883a 	mov	r2,zero
  807df0:	003f0f06 	br	807a30 <__alt_mem_onchip_mem+0xff7ffa30>
  807df4:	217ff804 	addi	r5,r4,-32
  807df8:	00800804 	movi	r2,32
  807dfc:	494ad83a 	srl	r5,r9,r5
  807e00:	20807d26 	beq	r4,r2,807ff8 <__adddf3+0x7e8>
  807e04:	00801004 	movi	r2,64
  807e08:	1109c83a 	sub	r4,r2,r4
  807e0c:	4912983a 	sll	r9,r9,r4
  807e10:	498cb03a 	or	r6,r9,r6
  807e14:	300cc03a 	cmpne	r6,r6,zero
  807e18:	298ab03a 	or	r5,r5,r6
  807e1c:	0013883a 	mov	r9,zero
  807e20:	003f1506 	br	807a78 <__alt_mem_onchip_mem+0xff7ffa78>
  807e24:	0101ffc4 	movi	r4,2047
  807e28:	113f9a1e 	bne	r2,r4,807c94 <__alt_mem_onchip_mem+0xff7ffc94>
  807e2c:	4811883a 	mov	r8,r9
  807e30:	3023883a 	mov	r17,r6
  807e34:	1021883a 	mov	r16,r2
  807e38:	3825883a 	mov	r18,r7
  807e3c:	003e9306 	br	80788c <__alt_mem_onchip_mem+0xff7ff88c>
  807e40:	8000161e 	bne	r16,zero,807e9c <__adddf3+0x68c>
  807e44:	444ab03a 	or	r5,r8,r17
  807e48:	28005126 	beq	r5,zero,807f90 <__adddf3+0x780>
  807e4c:	0108303a 	nor	r4,zero,r4
  807e50:	20004d1e 	bne	r4,zero,807f88 <__adddf3+0x778>
  807e54:	89a3883a 	add	r17,r17,r6
  807e58:	4253883a 	add	r9,r8,r9
  807e5c:	898d803a 	cmpltu	r6,r17,r6
  807e60:	3251883a 	add	r8,r6,r9
  807e64:	1021883a 	mov	r16,r2
  807e68:	003f0806 	br	807a8c <__alt_mem_onchip_mem+0xff7ffa8c>
  807e6c:	1000301e 	bne	r2,zero,807f30 <__adddf3+0x720>
  807e70:	4984b03a 	or	r2,r9,r6
  807e74:	10007126 	beq	r2,zero,80803c <__adddf3+0x82c>
  807e78:	4811883a 	mov	r8,r9
  807e7c:	3023883a 	mov	r17,r6
  807e80:	3825883a 	mov	r18,r7
  807e84:	0401ffc4 	movi	r16,2047
  807e88:	003e8006 	br	80788c <__alt_mem_onchip_mem+0xff7ff88c>
  807e8c:	4462b03a 	or	r17,r8,r17
  807e90:	8822c03a 	cmpne	r17,r17,zero
  807e94:	0007883a 	mov	r3,zero
  807e98:	003f8b06 	br	807cc8 <__alt_mem_onchip_mem+0xff7ffcc8>
  807e9c:	0141ffc4 	movi	r5,2047
  807ea0:	11403b26 	beq	r2,r5,807f90 <__adddf3+0x780>
  807ea4:	0109c83a 	sub	r4,zero,r4
  807ea8:	42002034 	orhi	r8,r8,128
  807eac:	01400e04 	movi	r5,56
  807eb0:	29006716 	blt	r5,r4,808050 <__adddf3+0x840>
  807eb4:	014007c4 	movi	r5,31
  807eb8:	29007016 	blt	r5,r4,80807c <__adddf3+0x86c>
  807ebc:	01400804 	movi	r5,32
  807ec0:	290bc83a 	sub	r5,r5,r4
  807ec4:	4154983a 	sll	r10,r8,r5
  807ec8:	890ed83a 	srl	r7,r17,r4
  807ecc:	894a983a 	sll	r5,r17,r5
  807ed0:	4108d83a 	srl	r4,r8,r4
  807ed4:	51e2b03a 	or	r17,r10,r7
  807ed8:	280ac03a 	cmpne	r5,r5,zero
  807edc:	8962b03a 	or	r17,r17,r5
  807ee0:	89a3883a 	add	r17,r17,r6
  807ee4:	2253883a 	add	r9,r4,r9
  807ee8:	898d803a 	cmpltu	r6,r17,r6
  807eec:	3251883a 	add	r8,r6,r9
  807ef0:	1021883a 	mov	r16,r2
  807ef4:	003ee506 	br	807a8c <__alt_mem_onchip_mem+0xff7ffa8c>
  807ef8:	4984b03a 	or	r2,r9,r6
  807efc:	103e6326 	beq	r2,zero,80788c <__alt_mem_onchip_mem+0xff7ff88c>
  807f00:	8987c83a 	sub	r3,r17,r6
  807f04:	88c9803a 	cmpltu	r4,r17,r3
  807f08:	4245c83a 	sub	r2,r8,r9
  807f0c:	1105c83a 	sub	r2,r2,r4
  807f10:	1100202c 	andhi	r4,r2,128
  807f14:	203ebb26 	beq	r4,zero,807a04 <__alt_mem_onchip_mem+0xff7ffa04>
  807f18:	3463c83a 	sub	r17,r6,r17
  807f1c:	4a07c83a 	sub	r3,r9,r8
  807f20:	344d803a 	cmpltu	r6,r6,r17
  807f24:	1991c83a 	sub	r8,r3,r6
  807f28:	3825883a 	mov	r18,r7
  807f2c:	003e5706 	br	80788c <__alt_mem_onchip_mem+0xff7ff88c>
  807f30:	4984b03a 	or	r2,r9,r6
  807f34:	10002e26 	beq	r2,zero,807ff0 <__adddf3+0x7e0>
  807f38:	4004d0fa 	srli	r2,r8,3
  807f3c:	8822d0fa 	srli	r17,r17,3
  807f40:	4010977a 	slli	r8,r8,29
  807f44:	10c0022c 	andhi	r3,r2,8
  807f48:	4462b03a 	or	r17,r8,r17
  807f4c:	18000826 	beq	r3,zero,807f70 <__adddf3+0x760>
  807f50:	4808d0fa 	srli	r4,r9,3
  807f54:	20c0022c 	andhi	r3,r4,8
  807f58:	1800051e 	bne	r3,zero,807f70 <__adddf3+0x760>
  807f5c:	300cd0fa 	srli	r6,r6,3
  807f60:	4806977a 	slli	r3,r9,29
  807f64:	2005883a 	mov	r2,r4
  807f68:	3825883a 	mov	r18,r7
  807f6c:	19a2b03a 	or	r17,r3,r6
  807f70:	8810d77a 	srli	r8,r17,29
  807f74:	100490fa 	slli	r2,r2,3
  807f78:	882290fa 	slli	r17,r17,3
  807f7c:	0401ffc4 	movi	r16,2047
  807f80:	4090b03a 	or	r8,r8,r2
  807f84:	003e4106 	br	80788c <__alt_mem_onchip_mem+0xff7ff88c>
  807f88:	0141ffc4 	movi	r5,2047
  807f8c:	117fc71e 	bne	r2,r5,807eac <__alt_mem_onchip_mem+0xff7ffeac>
  807f90:	4811883a 	mov	r8,r9
  807f94:	3023883a 	mov	r17,r6
  807f98:	1021883a 	mov	r16,r2
  807f9c:	003e3b06 	br	80788c <__alt_mem_onchip_mem+0xff7ff88c>
  807fa0:	10002f26 	beq	r2,zero,808060 <__adddf3+0x850>
  807fa4:	4984b03a 	or	r2,r9,r6
  807fa8:	10001126 	beq	r2,zero,807ff0 <__adddf3+0x7e0>
  807fac:	4004d0fa 	srli	r2,r8,3
  807fb0:	8822d0fa 	srli	r17,r17,3
  807fb4:	4010977a 	slli	r8,r8,29
  807fb8:	10c0022c 	andhi	r3,r2,8
  807fbc:	4462b03a 	or	r17,r8,r17
  807fc0:	183feb26 	beq	r3,zero,807f70 <__alt_mem_onchip_mem+0xff7fff70>
  807fc4:	4808d0fa 	srli	r4,r9,3
  807fc8:	20c0022c 	andhi	r3,r4,8
  807fcc:	183fe81e 	bne	r3,zero,807f70 <__alt_mem_onchip_mem+0xff7fff70>
  807fd0:	300cd0fa 	srli	r6,r6,3
  807fd4:	4806977a 	slli	r3,r9,29
  807fd8:	2005883a 	mov	r2,r4
  807fdc:	19a2b03a 	or	r17,r3,r6
  807fe0:	003fe306 	br	807f70 <__alt_mem_onchip_mem+0xff7fff70>
  807fe4:	0011883a 	mov	r8,zero
  807fe8:	0005883a 	mov	r2,zero
  807fec:	003e3f06 	br	8078ec <__alt_mem_onchip_mem+0xff7ff8ec>
  807ff0:	0401ffc4 	movi	r16,2047
  807ff4:	003e2506 	br	80788c <__alt_mem_onchip_mem+0xff7ff88c>
  807ff8:	0013883a 	mov	r9,zero
  807ffc:	003f8406 	br	807e10 <__alt_mem_onchip_mem+0xff7ffe10>
  808000:	0005883a 	mov	r2,zero
  808004:	0007883a 	mov	r3,zero
  808008:	003e8906 	br	807a30 <__alt_mem_onchip_mem+0xff7ffa30>
  80800c:	197ff804 	addi	r5,r3,-32
  808010:	01000804 	movi	r4,32
  808014:	414ad83a 	srl	r5,r8,r5
  808018:	19002426 	beq	r3,r4,8080ac <__adddf3+0x89c>
  80801c:	01001004 	movi	r4,64
  808020:	20c7c83a 	sub	r3,r4,r3
  808024:	40c6983a 	sll	r3,r8,r3
  808028:	1c46b03a 	or	r3,r3,r17
  80802c:	1806c03a 	cmpne	r3,r3,zero
  808030:	28e2b03a 	or	r17,r5,r3
  808034:	0007883a 	mov	r3,zero
  808038:	003f2306 	br	807cc8 <__alt_mem_onchip_mem+0xff7ffcc8>
  80803c:	0007883a 	mov	r3,zero
  808040:	5811883a 	mov	r8,r11
  808044:	00bfffc4 	movi	r2,-1
  808048:	0401ffc4 	movi	r16,2047
  80804c:	003e7806 	br	807a30 <__alt_mem_onchip_mem+0xff7ffa30>
  808050:	4462b03a 	or	r17,r8,r17
  808054:	8822c03a 	cmpne	r17,r17,zero
  808058:	0009883a 	mov	r4,zero
  80805c:	003fa006 	br	807ee0 <__alt_mem_onchip_mem+0xff7ffee0>
  808060:	4811883a 	mov	r8,r9
  808064:	3023883a 	mov	r17,r6
  808068:	0401ffc4 	movi	r16,2047
  80806c:	003e0706 	br	80788c <__alt_mem_onchip_mem+0xff7ff88c>
  808070:	4811883a 	mov	r8,r9
  808074:	3023883a 	mov	r17,r6
  808078:	003e0406 	br	80788c <__alt_mem_onchip_mem+0xff7ff88c>
  80807c:	21fff804 	addi	r7,r4,-32
  808080:	01400804 	movi	r5,32
  808084:	41ced83a 	srl	r7,r8,r7
  808088:	21400a26 	beq	r4,r5,8080b4 <__adddf3+0x8a4>
  80808c:	01401004 	movi	r5,64
  808090:	2909c83a 	sub	r4,r5,r4
  808094:	4108983a 	sll	r4,r8,r4
  808098:	2448b03a 	or	r4,r4,r17
  80809c:	2008c03a 	cmpne	r4,r4,zero
  8080a0:	3922b03a 	or	r17,r7,r4
  8080a4:	0009883a 	mov	r4,zero
  8080a8:	003f8d06 	br	807ee0 <__alt_mem_onchip_mem+0xff7ffee0>
  8080ac:	0007883a 	mov	r3,zero
  8080b0:	003fdd06 	br	808028 <__alt_mem_onchip_mem+0xff800028>
  8080b4:	0009883a 	mov	r4,zero
  8080b8:	003ff706 	br	808098 <__alt_mem_onchip_mem+0xff800098>

008080bc <__gedf2>:
  8080bc:	2804d53a 	srli	r2,r5,20
  8080c0:	3806d53a 	srli	r3,r7,20
  8080c4:	02000434 	movhi	r8,16
  8080c8:	423fffc4 	addi	r8,r8,-1
  8080cc:	1081ffcc 	andi	r2,r2,2047
  8080d0:	0241ffc4 	movi	r9,2047
  8080d4:	2a14703a 	and	r10,r5,r8
  8080d8:	18c1ffcc 	andi	r3,r3,2047
  8080dc:	3a10703a 	and	r8,r7,r8
  8080e0:	280ad7fa 	srli	r5,r5,31
  8080e4:	380ed7fa 	srli	r7,r7,31
  8080e8:	12401d26 	beq	r2,r9,808160 <__gedf2+0xa4>
  8080ec:	0241ffc4 	movi	r9,2047
  8080f0:	1a401226 	beq	r3,r9,80813c <__gedf2+0x80>
  8080f4:	1000081e 	bne	r2,zero,808118 <__gedf2+0x5c>
  8080f8:	2296b03a 	or	r11,r4,r10
  8080fc:	5813003a 	cmpeq	r9,r11,zero
  808100:	1800091e 	bne	r3,zero,808128 <__gedf2+0x6c>
  808104:	3218b03a 	or	r12,r6,r8
  808108:	6000071e 	bne	r12,zero,808128 <__gedf2+0x6c>
  80810c:	0005883a 	mov	r2,zero
  808110:	5800101e 	bne	r11,zero,808154 <__gedf2+0x98>
  808114:	f800283a 	ret
  808118:	18000c1e 	bne	r3,zero,80814c <__gedf2+0x90>
  80811c:	3212b03a 	or	r9,r6,r8
  808120:	48000c26 	beq	r9,zero,808154 <__gedf2+0x98>
  808124:	0013883a 	mov	r9,zero
  808128:	39c03fcc 	andi	r7,r7,255
  80812c:	48000826 	beq	r9,zero,808150 <__gedf2+0x94>
  808130:	38000926 	beq	r7,zero,808158 <__gedf2+0x9c>
  808134:	00800044 	movi	r2,1
  808138:	f800283a 	ret
  80813c:	3212b03a 	or	r9,r6,r8
  808140:	483fec26 	beq	r9,zero,8080f4 <__alt_mem_onchip_mem+0xff8000f4>
  808144:	00bfff84 	movi	r2,-2
  808148:	f800283a 	ret
  80814c:	39c03fcc 	andi	r7,r7,255
  808150:	29c00626 	beq	r5,r7,80816c <__gedf2+0xb0>
  808154:	283ff726 	beq	r5,zero,808134 <__alt_mem_onchip_mem+0xff800134>
  808158:	00bfffc4 	movi	r2,-1
  80815c:	f800283a 	ret
  808160:	2292b03a 	or	r9,r4,r10
  808164:	483fe126 	beq	r9,zero,8080ec <__alt_mem_onchip_mem+0xff8000ec>
  808168:	003ff606 	br	808144 <__alt_mem_onchip_mem+0xff800144>
  80816c:	18bff916 	blt	r3,r2,808154 <__alt_mem_onchip_mem+0xff800154>
  808170:	10c00316 	blt	r2,r3,808180 <__gedf2+0xc4>
  808174:	42bff736 	bltu	r8,r10,808154 <__alt_mem_onchip_mem+0xff800154>
  808178:	52000326 	beq	r10,r8,808188 <__gedf2+0xcc>
  80817c:	5200042e 	bgeu	r10,r8,808190 <__gedf2+0xd4>
  808180:	283fec1e 	bne	r5,zero,808134 <__alt_mem_onchip_mem+0xff800134>
  808184:	003ff406 	br	808158 <__alt_mem_onchip_mem+0xff800158>
  808188:	313ff236 	bltu	r6,r4,808154 <__alt_mem_onchip_mem+0xff800154>
  80818c:	21bffc36 	bltu	r4,r6,808180 <__alt_mem_onchip_mem+0xff800180>
  808190:	0005883a 	mov	r2,zero
  808194:	f800283a 	ret

00808198 <__ledf2>:
  808198:	2804d53a 	srli	r2,r5,20
  80819c:	3810d53a 	srli	r8,r7,20
  8081a0:	00c00434 	movhi	r3,16
  8081a4:	18ffffc4 	addi	r3,r3,-1
  8081a8:	1081ffcc 	andi	r2,r2,2047
  8081ac:	0241ffc4 	movi	r9,2047
  8081b0:	28d4703a 	and	r10,r5,r3
  8081b4:	4201ffcc 	andi	r8,r8,2047
  8081b8:	38c6703a 	and	r3,r7,r3
  8081bc:	280ad7fa 	srli	r5,r5,31
  8081c0:	380ed7fa 	srli	r7,r7,31
  8081c4:	12401f26 	beq	r2,r9,808244 <__ledf2+0xac>
  8081c8:	0241ffc4 	movi	r9,2047
  8081cc:	42401426 	beq	r8,r9,808220 <__ledf2+0x88>
  8081d0:	1000091e 	bne	r2,zero,8081f8 <__ledf2+0x60>
  8081d4:	2296b03a 	or	r11,r4,r10
  8081d8:	5813003a 	cmpeq	r9,r11,zero
  8081dc:	29403fcc 	andi	r5,r5,255
  8081e0:	40000a1e 	bne	r8,zero,80820c <__ledf2+0x74>
  8081e4:	30d8b03a 	or	r12,r6,r3
  8081e8:	6000081e 	bne	r12,zero,80820c <__ledf2+0x74>
  8081ec:	0005883a 	mov	r2,zero
  8081f0:	5800111e 	bne	r11,zero,808238 <__ledf2+0xa0>
  8081f4:	f800283a 	ret
  8081f8:	29403fcc 	andi	r5,r5,255
  8081fc:	40000c1e 	bne	r8,zero,808230 <__ledf2+0x98>
  808200:	30d2b03a 	or	r9,r6,r3
  808204:	48000c26 	beq	r9,zero,808238 <__ledf2+0xa0>
  808208:	0013883a 	mov	r9,zero
  80820c:	39c03fcc 	andi	r7,r7,255
  808210:	48000826 	beq	r9,zero,808234 <__ledf2+0x9c>
  808214:	38001126 	beq	r7,zero,80825c <__ledf2+0xc4>
  808218:	00800044 	movi	r2,1
  80821c:	f800283a 	ret
  808220:	30d2b03a 	or	r9,r6,r3
  808224:	483fea26 	beq	r9,zero,8081d0 <__alt_mem_onchip_mem+0xff8001d0>
  808228:	00800084 	movi	r2,2
  80822c:	f800283a 	ret
  808230:	39c03fcc 	andi	r7,r7,255
  808234:	39400726 	beq	r7,r5,808254 <__ledf2+0xbc>
  808238:	2800081e 	bne	r5,zero,80825c <__ledf2+0xc4>
  80823c:	00800044 	movi	r2,1
  808240:	f800283a 	ret
  808244:	2292b03a 	or	r9,r4,r10
  808248:	483fdf26 	beq	r9,zero,8081c8 <__alt_mem_onchip_mem+0xff8001c8>
  80824c:	00800084 	movi	r2,2
  808250:	f800283a 	ret
  808254:	4080030e 	bge	r8,r2,808264 <__ledf2+0xcc>
  808258:	383fef26 	beq	r7,zero,808218 <__alt_mem_onchip_mem+0xff800218>
  80825c:	00bfffc4 	movi	r2,-1
  808260:	f800283a 	ret
  808264:	123feb16 	blt	r2,r8,808214 <__alt_mem_onchip_mem+0xff800214>
  808268:	1abff336 	bltu	r3,r10,808238 <__alt_mem_onchip_mem+0xff800238>
  80826c:	50c00326 	beq	r10,r3,80827c <__ledf2+0xe4>
  808270:	50c0042e 	bgeu	r10,r3,808284 <__ledf2+0xec>
  808274:	283fe81e 	bne	r5,zero,808218 <__alt_mem_onchip_mem+0xff800218>
  808278:	003ff806 	br	80825c <__alt_mem_onchip_mem+0xff80025c>
  80827c:	313fee36 	bltu	r6,r4,808238 <__alt_mem_onchip_mem+0xff800238>
  808280:	21bffc36 	bltu	r4,r6,808274 <__alt_mem_onchip_mem+0xff800274>
  808284:	0005883a 	mov	r2,zero
  808288:	f800283a 	ret

0080828c <__muldf3>:
  80828c:	defff304 	addi	sp,sp,-52
  808290:	2804d53a 	srli	r2,r5,20
  808294:	dd800915 	stw	r22,36(sp)
  808298:	282cd7fa 	srli	r22,r5,31
  80829c:	dc000315 	stw	r16,12(sp)
  8082a0:	04000434 	movhi	r16,16
  8082a4:	dd400815 	stw	r21,32(sp)
  8082a8:	dc800515 	stw	r18,20(sp)
  8082ac:	843fffc4 	addi	r16,r16,-1
  8082b0:	dfc00c15 	stw	ra,48(sp)
  8082b4:	df000b15 	stw	fp,44(sp)
  8082b8:	ddc00a15 	stw	r23,40(sp)
  8082bc:	dd000715 	stw	r20,28(sp)
  8082c0:	dcc00615 	stw	r19,24(sp)
  8082c4:	dc400415 	stw	r17,16(sp)
  8082c8:	1481ffcc 	andi	r18,r2,2047
  8082cc:	2c20703a 	and	r16,r5,r16
  8082d0:	b02b883a 	mov	r21,r22
  8082d4:	b2403fcc 	andi	r9,r22,255
  8082d8:	90006026 	beq	r18,zero,80845c <__muldf3+0x1d0>
  8082dc:	0081ffc4 	movi	r2,2047
  8082e0:	2029883a 	mov	r20,r4
  8082e4:	90803626 	beq	r18,r2,8083c0 <__muldf3+0x134>
  8082e8:	80800434 	orhi	r2,r16,16
  8082ec:	100490fa 	slli	r2,r2,3
  8082f0:	2020d77a 	srli	r16,r4,29
  8082f4:	202890fa 	slli	r20,r4,3
  8082f8:	94bf0044 	addi	r18,r18,-1023
  8082fc:	80a0b03a 	or	r16,r16,r2
  808300:	0027883a 	mov	r19,zero
  808304:	0039883a 	mov	fp,zero
  808308:	3804d53a 	srli	r2,r7,20
  80830c:	382ed7fa 	srli	r23,r7,31
  808310:	04400434 	movhi	r17,16
  808314:	8c7fffc4 	addi	r17,r17,-1
  808318:	1081ffcc 	andi	r2,r2,2047
  80831c:	3011883a 	mov	r8,r6
  808320:	3c62703a 	and	r17,r7,r17
  808324:	ba803fcc 	andi	r10,r23,255
  808328:	10006d26 	beq	r2,zero,8084e0 <__muldf3+0x254>
  80832c:	00c1ffc4 	movi	r3,2047
  808330:	10c06526 	beq	r2,r3,8084c8 <__muldf3+0x23c>
  808334:	88c00434 	orhi	r3,r17,16
  808338:	180690fa 	slli	r3,r3,3
  80833c:	3022d77a 	srli	r17,r6,29
  808340:	301090fa 	slli	r8,r6,3
  808344:	10bf0044 	addi	r2,r2,-1023
  808348:	88e2b03a 	or	r17,r17,r3
  80834c:	000b883a 	mov	r5,zero
  808350:	9085883a 	add	r2,r18,r2
  808354:	2cc8b03a 	or	r4,r5,r19
  808358:	00c003c4 	movi	r3,15
  80835c:	bdacf03a 	xor	r22,r23,r22
  808360:	12c00044 	addi	r11,r2,1
  808364:	19009936 	bltu	r3,r4,8085cc <__muldf3+0x340>
  808368:	200890ba 	slli	r4,r4,2
  80836c:	00c02074 	movhi	r3,129
  808370:	18e0e004 	addi	r3,r3,-31872
  808374:	20c9883a 	add	r4,r4,r3
  808378:	20c00017 	ldw	r3,0(r4)
  80837c:	1800683a 	jmp	r3
  808380:	008085cc 	andi	r2,zero,535
  808384:	008083e0 	cmpeqi	r2,zero,527
  808388:	008083e0 	cmpeqi	r2,zero,527
  80838c:	008083dc 	xori	r2,zero,527
  808390:	008085a8 	cmpgeui	r2,zero,534
  808394:	008085a8 	cmpgeui	r2,zero,534
  808398:	00808590 	cmplti	r2,zero,534
  80839c:	008083dc 	xori	r2,zero,527
  8083a0:	008085a8 	cmpgeui	r2,zero,534
  8083a4:	00808590 	cmplti	r2,zero,534
  8083a8:	008085a8 	cmpgeui	r2,zero,534
  8083ac:	008083dc 	xori	r2,zero,527
  8083b0:	008085b8 	rdprs	r2,zero,534
  8083b4:	008085b8 	rdprs	r2,zero,534
  8083b8:	008085b8 	rdprs	r2,zero,534
  8083bc:	008087d4 	movui	r2,543
  8083c0:	2404b03a 	or	r2,r4,r16
  8083c4:	10006f1e 	bne	r2,zero,808584 <__muldf3+0x2f8>
  8083c8:	04c00204 	movi	r19,8
  8083cc:	0021883a 	mov	r16,zero
  8083d0:	0029883a 	mov	r20,zero
  8083d4:	07000084 	movi	fp,2
  8083d8:	003fcb06 	br	808308 <__alt_mem_onchip_mem+0xff800308>
  8083dc:	502d883a 	mov	r22,r10
  8083e0:	00800084 	movi	r2,2
  8083e4:	28805726 	beq	r5,r2,808544 <__muldf3+0x2b8>
  8083e8:	008000c4 	movi	r2,3
  8083ec:	28816626 	beq	r5,r2,808988 <__muldf3+0x6fc>
  8083f0:	00800044 	movi	r2,1
  8083f4:	2881411e 	bne	r5,r2,8088fc <__muldf3+0x670>
  8083f8:	b02b883a 	mov	r21,r22
  8083fc:	0005883a 	mov	r2,zero
  808400:	000b883a 	mov	r5,zero
  808404:	0029883a 	mov	r20,zero
  808408:	1004953a 	slli	r2,r2,20
  80840c:	a8c03fcc 	andi	r3,r21,255
  808410:	04400434 	movhi	r17,16
  808414:	8c7fffc4 	addi	r17,r17,-1
  808418:	180697fa 	slli	r3,r3,31
  80841c:	2c4a703a 	and	r5,r5,r17
  808420:	288ab03a 	or	r5,r5,r2
  808424:	28c6b03a 	or	r3,r5,r3
  808428:	a005883a 	mov	r2,r20
  80842c:	dfc00c17 	ldw	ra,48(sp)
  808430:	df000b17 	ldw	fp,44(sp)
  808434:	ddc00a17 	ldw	r23,40(sp)
  808438:	dd800917 	ldw	r22,36(sp)
  80843c:	dd400817 	ldw	r21,32(sp)
  808440:	dd000717 	ldw	r20,28(sp)
  808444:	dcc00617 	ldw	r19,24(sp)
  808448:	dc800517 	ldw	r18,20(sp)
  80844c:	dc400417 	ldw	r17,16(sp)
  808450:	dc000317 	ldw	r16,12(sp)
  808454:	dec00d04 	addi	sp,sp,52
  808458:	f800283a 	ret
  80845c:	2404b03a 	or	r2,r4,r16
  808460:	2027883a 	mov	r19,r4
  808464:	10004226 	beq	r2,zero,808570 <__muldf3+0x2e4>
  808468:	8000fc26 	beq	r16,zero,80885c <__muldf3+0x5d0>
  80846c:	8009883a 	mov	r4,r16
  808470:	d9800215 	stw	r6,8(sp)
  808474:	d9c00015 	stw	r7,0(sp)
  808478:	da400115 	stw	r9,4(sp)
  80847c:	08094240 	call	809424 <__clzsi2>
  808480:	d9800217 	ldw	r6,8(sp)
  808484:	d9c00017 	ldw	r7,0(sp)
  808488:	da400117 	ldw	r9,4(sp)
  80848c:	113ffd44 	addi	r4,r2,-11
  808490:	00c00704 	movi	r3,28
  808494:	1900ed16 	blt	r3,r4,80884c <__muldf3+0x5c0>
  808498:	00c00744 	movi	r3,29
  80849c:	147ffe04 	addi	r17,r2,-8
  8084a0:	1907c83a 	sub	r3,r3,r4
  8084a4:	8460983a 	sll	r16,r16,r17
  8084a8:	98c6d83a 	srl	r3,r19,r3
  8084ac:	9c68983a 	sll	r20,r19,r17
  8084b0:	1c20b03a 	or	r16,r3,r16
  8084b4:	1080fcc4 	addi	r2,r2,1011
  8084b8:	00a5c83a 	sub	r18,zero,r2
  8084bc:	0027883a 	mov	r19,zero
  8084c0:	0039883a 	mov	fp,zero
  8084c4:	003f9006 	br	808308 <__alt_mem_onchip_mem+0xff800308>
  8084c8:	3446b03a 	or	r3,r6,r17
  8084cc:	1800261e 	bne	r3,zero,808568 <__muldf3+0x2dc>
  8084d0:	0023883a 	mov	r17,zero
  8084d4:	0011883a 	mov	r8,zero
  8084d8:	01400084 	movi	r5,2
  8084dc:	003f9c06 	br	808350 <__alt_mem_onchip_mem+0xff800350>
  8084e0:	3446b03a 	or	r3,r6,r17
  8084e4:	18001c26 	beq	r3,zero,808558 <__muldf3+0x2cc>
  8084e8:	8800ce26 	beq	r17,zero,808824 <__muldf3+0x598>
  8084ec:	8809883a 	mov	r4,r17
  8084f0:	d9800215 	stw	r6,8(sp)
  8084f4:	da400115 	stw	r9,4(sp)
  8084f8:	da800015 	stw	r10,0(sp)
  8084fc:	08094240 	call	809424 <__clzsi2>
  808500:	d9800217 	ldw	r6,8(sp)
  808504:	da400117 	ldw	r9,4(sp)
  808508:	da800017 	ldw	r10,0(sp)
  80850c:	113ffd44 	addi	r4,r2,-11
  808510:	00c00704 	movi	r3,28
  808514:	1900bf16 	blt	r3,r4,808814 <__muldf3+0x588>
  808518:	00c00744 	movi	r3,29
  80851c:	123ffe04 	addi	r8,r2,-8
  808520:	1907c83a 	sub	r3,r3,r4
  808524:	8a22983a 	sll	r17,r17,r8
  808528:	30c6d83a 	srl	r3,r6,r3
  80852c:	3210983a 	sll	r8,r6,r8
  808530:	1c62b03a 	or	r17,r3,r17
  808534:	1080fcc4 	addi	r2,r2,1011
  808538:	0085c83a 	sub	r2,zero,r2
  80853c:	000b883a 	mov	r5,zero
  808540:	003f8306 	br	808350 <__alt_mem_onchip_mem+0xff800350>
  808544:	b02b883a 	mov	r21,r22
  808548:	0081ffc4 	movi	r2,2047
  80854c:	000b883a 	mov	r5,zero
  808550:	0029883a 	mov	r20,zero
  808554:	003fac06 	br	808408 <__alt_mem_onchip_mem+0xff800408>
  808558:	0023883a 	mov	r17,zero
  80855c:	0011883a 	mov	r8,zero
  808560:	01400044 	movi	r5,1
  808564:	003f7a06 	br	808350 <__alt_mem_onchip_mem+0xff800350>
  808568:	014000c4 	movi	r5,3
  80856c:	003f7806 	br	808350 <__alt_mem_onchip_mem+0xff800350>
  808570:	04c00104 	movi	r19,4
  808574:	0021883a 	mov	r16,zero
  808578:	0029883a 	mov	r20,zero
  80857c:	07000044 	movi	fp,1
  808580:	003f6106 	br	808308 <__alt_mem_onchip_mem+0xff800308>
  808584:	04c00304 	movi	r19,12
  808588:	070000c4 	movi	fp,3
  80858c:	003f5e06 	br	808308 <__alt_mem_onchip_mem+0xff800308>
  808590:	01400434 	movhi	r5,16
  808594:	002b883a 	mov	r21,zero
  808598:	297fffc4 	addi	r5,r5,-1
  80859c:	053fffc4 	movi	r20,-1
  8085a0:	0081ffc4 	movi	r2,2047
  8085a4:	003f9806 	br	808408 <__alt_mem_onchip_mem+0xff800408>
  8085a8:	8023883a 	mov	r17,r16
  8085ac:	a011883a 	mov	r8,r20
  8085b0:	e00b883a 	mov	r5,fp
  8085b4:	003f8a06 	br	8083e0 <__alt_mem_onchip_mem+0xff8003e0>
  8085b8:	8023883a 	mov	r17,r16
  8085bc:	a011883a 	mov	r8,r20
  8085c0:	482d883a 	mov	r22,r9
  8085c4:	e00b883a 	mov	r5,fp
  8085c8:	003f8506 	br	8083e0 <__alt_mem_onchip_mem+0xff8003e0>
  8085cc:	a00ad43a 	srli	r5,r20,16
  8085d0:	401ad43a 	srli	r13,r8,16
  8085d4:	a53fffcc 	andi	r20,r20,65535
  8085d8:	423fffcc 	andi	r8,r8,65535
  8085dc:	4519383a 	mul	r12,r8,r20
  8085e0:	4147383a 	mul	r3,r8,r5
  8085e4:	6d09383a 	mul	r4,r13,r20
  8085e8:	600cd43a 	srli	r6,r12,16
  8085ec:	2b5d383a 	mul	r14,r5,r13
  8085f0:	20c9883a 	add	r4,r4,r3
  8085f4:	310d883a 	add	r6,r6,r4
  8085f8:	30c0022e 	bgeu	r6,r3,808604 <__muldf3+0x378>
  8085fc:	00c00074 	movhi	r3,1
  808600:	70dd883a 	add	r14,r14,r3
  808604:	8826d43a 	srli	r19,r17,16
  808608:	8bffffcc 	andi	r15,r17,65535
  80860c:	7d23383a 	mul	r17,r15,r20
  808610:	7949383a 	mul	r4,r15,r5
  808614:	9d29383a 	mul	r20,r19,r20
  808618:	8814d43a 	srli	r10,r17,16
  80861c:	3012943a 	slli	r9,r6,16
  808620:	a129883a 	add	r20,r20,r4
  808624:	633fffcc 	andi	r12,r12,65535
  808628:	5515883a 	add	r10,r10,r20
  80862c:	3006d43a 	srli	r3,r6,16
  808630:	4b13883a 	add	r9,r9,r12
  808634:	2ccb383a 	mul	r5,r5,r19
  808638:	5100022e 	bgeu	r10,r4,808644 <__muldf3+0x3b8>
  80863c:	01000074 	movhi	r4,1
  808640:	290b883a 	add	r5,r5,r4
  808644:	802ad43a 	srli	r21,r16,16
  808648:	843fffcc 	andi	r16,r16,65535
  80864c:	440d383a 	mul	r6,r8,r16
  808650:	4565383a 	mul	r18,r8,r21
  808654:	8349383a 	mul	r4,r16,r13
  808658:	500e943a 	slli	r7,r10,16
  80865c:	3010d43a 	srli	r8,r6,16
  808660:	5028d43a 	srli	r20,r10,16
  808664:	2489883a 	add	r4,r4,r18
  808668:	8abfffcc 	andi	r10,r17,65535
  80866c:	3a95883a 	add	r10,r7,r10
  808670:	4119883a 	add	r12,r8,r4
  808674:	a169883a 	add	r20,r20,r5
  808678:	1a87883a 	add	r3,r3,r10
  80867c:	6d5b383a 	mul	r13,r13,r21
  808680:	6480022e 	bgeu	r12,r18,80868c <__muldf3+0x400>
  808684:	01000074 	movhi	r4,1
  808688:	691b883a 	add	r13,r13,r4
  80868c:	7c25383a 	mul	r18,r15,r16
  808690:	7d4b383a 	mul	r5,r15,r21
  808694:	84cf383a 	mul	r7,r16,r19
  808698:	901ed43a 	srli	r15,r18,16
  80869c:	6008d43a 	srli	r4,r12,16
  8086a0:	6010943a 	slli	r8,r12,16
  8086a4:	394f883a 	add	r7,r7,r5
  8086a8:	333fffcc 	andi	r12,r6,65535
  8086ac:	79df883a 	add	r15,r15,r7
  8086b0:	235b883a 	add	r13,r4,r13
  8086b4:	9d63383a 	mul	r17,r19,r21
  8086b8:	4309883a 	add	r4,r8,r12
  8086bc:	7940022e 	bgeu	r15,r5,8086c8 <__muldf3+0x43c>
  8086c0:	01400074 	movhi	r5,1
  8086c4:	8963883a 	add	r17,r17,r5
  8086c8:	780a943a 	slli	r5,r15,16
  8086cc:	91bfffcc 	andi	r6,r18,65535
  8086d0:	70c7883a 	add	r3,r14,r3
  8086d4:	298d883a 	add	r6,r5,r6
  8086d8:	1a8f803a 	cmpltu	r7,r3,r10
  8086dc:	350b883a 	add	r5,r6,r20
  8086e0:	20c7883a 	add	r3,r4,r3
  8086e4:	3955883a 	add	r10,r7,r5
  8086e8:	1909803a 	cmpltu	r4,r3,r4
  8086ec:	6a91883a 	add	r8,r13,r10
  8086f0:	780cd43a 	srli	r6,r15,16
  8086f4:	2219883a 	add	r12,r4,r8
  8086f8:	2d0b803a 	cmpltu	r5,r5,r20
  8086fc:	51cf803a 	cmpltu	r7,r10,r7
  808700:	29ceb03a 	or	r7,r5,r7
  808704:	4351803a 	cmpltu	r8,r8,r13
  808708:	610b803a 	cmpltu	r5,r12,r4
  80870c:	4148b03a 	or	r4,r8,r5
  808710:	398f883a 	add	r7,r7,r6
  808714:	3909883a 	add	r4,r7,r4
  808718:	1810927a 	slli	r8,r3,9
  80871c:	2449883a 	add	r4,r4,r17
  808720:	2008927a 	slli	r4,r4,9
  808724:	6022d5fa 	srli	r17,r12,23
  808728:	1806d5fa 	srli	r3,r3,23
  80872c:	4252b03a 	or	r9,r8,r9
  808730:	600a927a 	slli	r5,r12,9
  808734:	4810c03a 	cmpne	r8,r9,zero
  808738:	2462b03a 	or	r17,r4,r17
  80873c:	40c6b03a 	or	r3,r8,r3
  808740:	8900402c 	andhi	r4,r17,256
  808744:	1950b03a 	or	r8,r3,r5
  808748:	20000726 	beq	r4,zero,808768 <__muldf3+0x4dc>
  80874c:	4006d07a 	srli	r3,r8,1
  808750:	880497fa 	slli	r2,r17,31
  808754:	4200004c 	andi	r8,r8,1
  808758:	8822d07a 	srli	r17,r17,1
  80875c:	1a10b03a 	or	r8,r3,r8
  808760:	1210b03a 	or	r8,r2,r8
  808764:	5805883a 	mov	r2,r11
  808768:	1140ffc4 	addi	r5,r2,1023
  80876c:	0140440e 	bge	zero,r5,808880 <__muldf3+0x5f4>
  808770:	40c001cc 	andi	r3,r8,7
  808774:	18000726 	beq	r3,zero,808794 <__muldf3+0x508>
  808778:	40c003cc 	andi	r3,r8,15
  80877c:	01000104 	movi	r4,4
  808780:	19000426 	beq	r3,r4,808794 <__muldf3+0x508>
  808784:	4107883a 	add	r3,r8,r4
  808788:	1a11803a 	cmpltu	r8,r3,r8
  80878c:	8a23883a 	add	r17,r17,r8
  808790:	1811883a 	mov	r8,r3
  808794:	88c0402c 	andhi	r3,r17,256
  808798:	18000426 	beq	r3,zero,8087ac <__muldf3+0x520>
  80879c:	11410004 	addi	r5,r2,1024
  8087a0:	00bfc034 	movhi	r2,65280
  8087a4:	10bfffc4 	addi	r2,r2,-1
  8087a8:	88a2703a 	and	r17,r17,r2
  8087ac:	0081ff84 	movi	r2,2046
  8087b0:	117f6416 	blt	r2,r5,808544 <__alt_mem_onchip_mem+0xff800544>
  8087b4:	8828977a 	slli	r20,r17,29
  8087b8:	4010d0fa 	srli	r8,r8,3
  8087bc:	8822927a 	slli	r17,r17,9
  8087c0:	2881ffcc 	andi	r2,r5,2047
  8087c4:	a228b03a 	or	r20,r20,r8
  8087c8:	880ad33a 	srli	r5,r17,12
  8087cc:	b02b883a 	mov	r21,r22
  8087d0:	003f0d06 	br	808408 <__alt_mem_onchip_mem+0xff800408>
  8087d4:	8080022c 	andhi	r2,r16,8
  8087d8:	10000926 	beq	r2,zero,808800 <__muldf3+0x574>
  8087dc:	8880022c 	andhi	r2,r17,8
  8087e0:	1000071e 	bne	r2,zero,808800 <__muldf3+0x574>
  8087e4:	00800434 	movhi	r2,16
  8087e8:	89400234 	orhi	r5,r17,8
  8087ec:	10bfffc4 	addi	r2,r2,-1
  8087f0:	b82b883a 	mov	r21,r23
  8087f4:	288a703a 	and	r5,r5,r2
  8087f8:	4029883a 	mov	r20,r8
  8087fc:	003f6806 	br	8085a0 <__alt_mem_onchip_mem+0xff8005a0>
  808800:	00800434 	movhi	r2,16
  808804:	81400234 	orhi	r5,r16,8
  808808:	10bfffc4 	addi	r2,r2,-1
  80880c:	288a703a 	and	r5,r5,r2
  808810:	003f6306 	br	8085a0 <__alt_mem_onchip_mem+0xff8005a0>
  808814:	147ff604 	addi	r17,r2,-40
  808818:	3462983a 	sll	r17,r6,r17
  80881c:	0011883a 	mov	r8,zero
  808820:	003f4406 	br	808534 <__alt_mem_onchip_mem+0xff800534>
  808824:	3009883a 	mov	r4,r6
  808828:	d9800215 	stw	r6,8(sp)
  80882c:	da400115 	stw	r9,4(sp)
  808830:	da800015 	stw	r10,0(sp)
  808834:	08094240 	call	809424 <__clzsi2>
  808838:	10800804 	addi	r2,r2,32
  80883c:	da800017 	ldw	r10,0(sp)
  808840:	da400117 	ldw	r9,4(sp)
  808844:	d9800217 	ldw	r6,8(sp)
  808848:	003f3006 	br	80850c <__alt_mem_onchip_mem+0xff80050c>
  80884c:	143ff604 	addi	r16,r2,-40
  808850:	9c20983a 	sll	r16,r19,r16
  808854:	0029883a 	mov	r20,zero
  808858:	003f1606 	br	8084b4 <__alt_mem_onchip_mem+0xff8004b4>
  80885c:	d9800215 	stw	r6,8(sp)
  808860:	d9c00015 	stw	r7,0(sp)
  808864:	da400115 	stw	r9,4(sp)
  808868:	08094240 	call	809424 <__clzsi2>
  80886c:	10800804 	addi	r2,r2,32
  808870:	da400117 	ldw	r9,4(sp)
  808874:	d9c00017 	ldw	r7,0(sp)
  808878:	d9800217 	ldw	r6,8(sp)
  80887c:	003f0306 	br	80848c <__alt_mem_onchip_mem+0xff80048c>
  808880:	00c00044 	movi	r3,1
  808884:	1947c83a 	sub	r3,r3,r5
  808888:	00800e04 	movi	r2,56
  80888c:	10feda16 	blt	r2,r3,8083f8 <__alt_mem_onchip_mem+0xff8003f8>
  808890:	008007c4 	movi	r2,31
  808894:	10c01b16 	blt	r2,r3,808904 <__muldf3+0x678>
  808898:	00800804 	movi	r2,32
  80889c:	10c5c83a 	sub	r2,r2,r3
  8088a0:	888a983a 	sll	r5,r17,r2
  8088a4:	40c8d83a 	srl	r4,r8,r3
  8088a8:	4084983a 	sll	r2,r8,r2
  8088ac:	88e2d83a 	srl	r17,r17,r3
  8088b0:	2906b03a 	or	r3,r5,r4
  8088b4:	1004c03a 	cmpne	r2,r2,zero
  8088b8:	1886b03a 	or	r3,r3,r2
  8088bc:	188001cc 	andi	r2,r3,7
  8088c0:	10000726 	beq	r2,zero,8088e0 <__muldf3+0x654>
  8088c4:	188003cc 	andi	r2,r3,15
  8088c8:	01000104 	movi	r4,4
  8088cc:	11000426 	beq	r2,r4,8088e0 <__muldf3+0x654>
  8088d0:	1805883a 	mov	r2,r3
  8088d4:	10c00104 	addi	r3,r2,4
  8088d8:	1885803a 	cmpltu	r2,r3,r2
  8088dc:	88a3883a 	add	r17,r17,r2
  8088e0:	8880202c 	andhi	r2,r17,128
  8088e4:	10001c26 	beq	r2,zero,808958 <__muldf3+0x6cc>
  8088e8:	b02b883a 	mov	r21,r22
  8088ec:	00800044 	movi	r2,1
  8088f0:	000b883a 	mov	r5,zero
  8088f4:	0029883a 	mov	r20,zero
  8088f8:	003ec306 	br	808408 <__alt_mem_onchip_mem+0xff800408>
  8088fc:	5805883a 	mov	r2,r11
  808900:	003f9906 	br	808768 <__alt_mem_onchip_mem+0xff800768>
  808904:	00bff844 	movi	r2,-31
  808908:	1145c83a 	sub	r2,r2,r5
  80890c:	8888d83a 	srl	r4,r17,r2
  808910:	00800804 	movi	r2,32
  808914:	18801a26 	beq	r3,r2,808980 <__muldf3+0x6f4>
  808918:	00801004 	movi	r2,64
  80891c:	10c5c83a 	sub	r2,r2,r3
  808920:	8884983a 	sll	r2,r17,r2
  808924:	1204b03a 	or	r2,r2,r8
  808928:	1004c03a 	cmpne	r2,r2,zero
  80892c:	2084b03a 	or	r2,r4,r2
  808930:	144001cc 	andi	r17,r2,7
  808934:	88000d1e 	bne	r17,zero,80896c <__muldf3+0x6e0>
  808938:	000b883a 	mov	r5,zero
  80893c:	1028d0fa 	srli	r20,r2,3
  808940:	b02b883a 	mov	r21,r22
  808944:	0005883a 	mov	r2,zero
  808948:	a468b03a 	or	r20,r20,r17
  80894c:	003eae06 	br	808408 <__alt_mem_onchip_mem+0xff800408>
  808950:	1007883a 	mov	r3,r2
  808954:	0023883a 	mov	r17,zero
  808958:	880a927a 	slli	r5,r17,9
  80895c:	1805883a 	mov	r2,r3
  808960:	8822977a 	slli	r17,r17,29
  808964:	280ad33a 	srli	r5,r5,12
  808968:	003ff406 	br	80893c <__alt_mem_onchip_mem+0xff80093c>
  80896c:	10c003cc 	andi	r3,r2,15
  808970:	01000104 	movi	r4,4
  808974:	193ff626 	beq	r3,r4,808950 <__alt_mem_onchip_mem+0xff800950>
  808978:	0023883a 	mov	r17,zero
  80897c:	003fd506 	br	8088d4 <__alt_mem_onchip_mem+0xff8008d4>
  808980:	0005883a 	mov	r2,zero
  808984:	003fe706 	br	808924 <__alt_mem_onchip_mem+0xff800924>
  808988:	00800434 	movhi	r2,16
  80898c:	89400234 	orhi	r5,r17,8
  808990:	10bfffc4 	addi	r2,r2,-1
  808994:	b02b883a 	mov	r21,r22
  808998:	288a703a 	and	r5,r5,r2
  80899c:	4029883a 	mov	r20,r8
  8089a0:	003eff06 	br	8085a0 <__alt_mem_onchip_mem+0xff8005a0>

008089a4 <__subdf3>:
  8089a4:	02000434 	movhi	r8,16
  8089a8:	423fffc4 	addi	r8,r8,-1
  8089ac:	defffb04 	addi	sp,sp,-20
  8089b0:	2a14703a 	and	r10,r5,r8
  8089b4:	3812d53a 	srli	r9,r7,20
  8089b8:	3a10703a 	and	r8,r7,r8
  8089bc:	2006d77a 	srli	r3,r4,29
  8089c0:	3004d77a 	srli	r2,r6,29
  8089c4:	dc000015 	stw	r16,0(sp)
  8089c8:	501490fa 	slli	r10,r10,3
  8089cc:	2820d53a 	srli	r16,r5,20
  8089d0:	401090fa 	slli	r8,r8,3
  8089d4:	dc800215 	stw	r18,8(sp)
  8089d8:	dc400115 	stw	r17,4(sp)
  8089dc:	dfc00415 	stw	ra,16(sp)
  8089e0:	202290fa 	slli	r17,r4,3
  8089e4:	dcc00315 	stw	r19,12(sp)
  8089e8:	4a41ffcc 	andi	r9,r9,2047
  8089ec:	0101ffc4 	movi	r4,2047
  8089f0:	2824d7fa 	srli	r18,r5,31
  8089f4:	8401ffcc 	andi	r16,r16,2047
  8089f8:	50c6b03a 	or	r3,r10,r3
  8089fc:	380ed7fa 	srli	r7,r7,31
  808a00:	408ab03a 	or	r5,r8,r2
  808a04:	300c90fa 	slli	r6,r6,3
  808a08:	49009626 	beq	r9,r4,808c64 <__subdf3+0x2c0>
  808a0c:	39c0005c 	xori	r7,r7,1
  808a10:	8245c83a 	sub	r2,r16,r9
  808a14:	3c807426 	beq	r7,r18,808be8 <__subdf3+0x244>
  808a18:	0080af0e 	bge	zero,r2,808cd8 <__subdf3+0x334>
  808a1c:	48002a1e 	bne	r9,zero,808ac8 <__subdf3+0x124>
  808a20:	2988b03a 	or	r4,r5,r6
  808a24:	20009a1e 	bne	r4,zero,808c90 <__subdf3+0x2ec>
  808a28:	888001cc 	andi	r2,r17,7
  808a2c:	10000726 	beq	r2,zero,808a4c <__subdf3+0xa8>
  808a30:	888003cc 	andi	r2,r17,15
  808a34:	01000104 	movi	r4,4
  808a38:	11000426 	beq	r2,r4,808a4c <__subdf3+0xa8>
  808a3c:	890b883a 	add	r5,r17,r4
  808a40:	2c63803a 	cmpltu	r17,r5,r17
  808a44:	1c47883a 	add	r3,r3,r17
  808a48:	2823883a 	mov	r17,r5
  808a4c:	1880202c 	andhi	r2,r3,128
  808a50:	10005926 	beq	r2,zero,808bb8 <__subdf3+0x214>
  808a54:	84000044 	addi	r16,r16,1
  808a58:	0081ffc4 	movi	r2,2047
  808a5c:	8080be26 	beq	r16,r2,808d58 <__subdf3+0x3b4>
  808a60:	017fe034 	movhi	r5,65408
  808a64:	297fffc4 	addi	r5,r5,-1
  808a68:	1946703a 	and	r3,r3,r5
  808a6c:	1804977a 	slli	r2,r3,29
  808a70:	1806927a 	slli	r3,r3,9
  808a74:	8822d0fa 	srli	r17,r17,3
  808a78:	8401ffcc 	andi	r16,r16,2047
  808a7c:	180ad33a 	srli	r5,r3,12
  808a80:	9100004c 	andi	r4,r18,1
  808a84:	1444b03a 	or	r2,r2,r17
  808a88:	80c1ffcc 	andi	r3,r16,2047
  808a8c:	1820953a 	slli	r16,r3,20
  808a90:	20c03fcc 	andi	r3,r4,255
  808a94:	180897fa 	slli	r4,r3,31
  808a98:	00c00434 	movhi	r3,16
  808a9c:	18ffffc4 	addi	r3,r3,-1
  808aa0:	28c6703a 	and	r3,r5,r3
  808aa4:	1c06b03a 	or	r3,r3,r16
  808aa8:	1906b03a 	or	r3,r3,r4
  808aac:	dfc00417 	ldw	ra,16(sp)
  808ab0:	dcc00317 	ldw	r19,12(sp)
  808ab4:	dc800217 	ldw	r18,8(sp)
  808ab8:	dc400117 	ldw	r17,4(sp)
  808abc:	dc000017 	ldw	r16,0(sp)
  808ac0:	dec00504 	addi	sp,sp,20
  808ac4:	f800283a 	ret
  808ac8:	0101ffc4 	movi	r4,2047
  808acc:	813fd626 	beq	r16,r4,808a28 <__alt_mem_onchip_mem+0xff800a28>
  808ad0:	29402034 	orhi	r5,r5,128
  808ad4:	01000e04 	movi	r4,56
  808ad8:	2080a316 	blt	r4,r2,808d68 <__subdf3+0x3c4>
  808adc:	010007c4 	movi	r4,31
  808ae0:	2080c616 	blt	r4,r2,808dfc <__subdf3+0x458>
  808ae4:	01000804 	movi	r4,32
  808ae8:	2089c83a 	sub	r4,r4,r2
  808aec:	2910983a 	sll	r8,r5,r4
  808af0:	308ed83a 	srl	r7,r6,r2
  808af4:	3108983a 	sll	r4,r6,r4
  808af8:	2884d83a 	srl	r2,r5,r2
  808afc:	41ccb03a 	or	r6,r8,r7
  808b00:	2008c03a 	cmpne	r4,r4,zero
  808b04:	310cb03a 	or	r6,r6,r4
  808b08:	898dc83a 	sub	r6,r17,r6
  808b0c:	89a3803a 	cmpltu	r17,r17,r6
  808b10:	1887c83a 	sub	r3,r3,r2
  808b14:	1c47c83a 	sub	r3,r3,r17
  808b18:	3023883a 	mov	r17,r6
  808b1c:	1880202c 	andhi	r2,r3,128
  808b20:	10002326 	beq	r2,zero,808bb0 <__subdf3+0x20c>
  808b24:	04c02034 	movhi	r19,128
  808b28:	9cffffc4 	addi	r19,r19,-1
  808b2c:	1ce6703a 	and	r19,r3,r19
  808b30:	98007a26 	beq	r19,zero,808d1c <__subdf3+0x378>
  808b34:	9809883a 	mov	r4,r19
  808b38:	08094240 	call	809424 <__clzsi2>
  808b3c:	113ffe04 	addi	r4,r2,-8
  808b40:	00c007c4 	movi	r3,31
  808b44:	19007b16 	blt	r3,r4,808d34 <__subdf3+0x390>
  808b48:	00800804 	movi	r2,32
  808b4c:	1105c83a 	sub	r2,r2,r4
  808b50:	8884d83a 	srl	r2,r17,r2
  808b54:	9906983a 	sll	r3,r19,r4
  808b58:	8922983a 	sll	r17,r17,r4
  808b5c:	10c4b03a 	or	r2,r2,r3
  808b60:	24007816 	blt	r4,r16,808d44 <__subdf3+0x3a0>
  808b64:	2421c83a 	sub	r16,r4,r16
  808b68:	80c00044 	addi	r3,r16,1
  808b6c:	010007c4 	movi	r4,31
  808b70:	20c09516 	blt	r4,r3,808dc8 <__subdf3+0x424>
  808b74:	01400804 	movi	r5,32
  808b78:	28cbc83a 	sub	r5,r5,r3
  808b7c:	88c8d83a 	srl	r4,r17,r3
  808b80:	8962983a 	sll	r17,r17,r5
  808b84:	114a983a 	sll	r5,r2,r5
  808b88:	10c6d83a 	srl	r3,r2,r3
  808b8c:	8804c03a 	cmpne	r2,r17,zero
  808b90:	290ab03a 	or	r5,r5,r4
  808b94:	28a2b03a 	or	r17,r5,r2
  808b98:	0021883a 	mov	r16,zero
  808b9c:	003fa206 	br	808a28 <__alt_mem_onchip_mem+0xff800a28>
  808ba0:	2090b03a 	or	r8,r4,r2
  808ba4:	40018e26 	beq	r8,zero,8091e0 <__subdf3+0x83c>
  808ba8:	1007883a 	mov	r3,r2
  808bac:	2023883a 	mov	r17,r4
  808bb0:	888001cc 	andi	r2,r17,7
  808bb4:	103f9e1e 	bne	r2,zero,808a30 <__alt_mem_onchip_mem+0xff800a30>
  808bb8:	1804977a 	slli	r2,r3,29
  808bbc:	8822d0fa 	srli	r17,r17,3
  808bc0:	1810d0fa 	srli	r8,r3,3
  808bc4:	9100004c 	andi	r4,r18,1
  808bc8:	1444b03a 	or	r2,r2,r17
  808bcc:	00c1ffc4 	movi	r3,2047
  808bd0:	80c02826 	beq	r16,r3,808c74 <__subdf3+0x2d0>
  808bd4:	01400434 	movhi	r5,16
  808bd8:	297fffc4 	addi	r5,r5,-1
  808bdc:	80e0703a 	and	r16,r16,r3
  808be0:	414a703a 	and	r5,r8,r5
  808be4:	003fa806 	br	808a88 <__alt_mem_onchip_mem+0xff800a88>
  808be8:	0080630e 	bge	zero,r2,808d78 <__subdf3+0x3d4>
  808bec:	48003026 	beq	r9,zero,808cb0 <__subdf3+0x30c>
  808bf0:	0101ffc4 	movi	r4,2047
  808bf4:	813f8c26 	beq	r16,r4,808a28 <__alt_mem_onchip_mem+0xff800a28>
  808bf8:	29402034 	orhi	r5,r5,128
  808bfc:	01000e04 	movi	r4,56
  808c00:	2080a90e 	bge	r4,r2,808ea8 <__subdf3+0x504>
  808c04:	298cb03a 	or	r6,r5,r6
  808c08:	3012c03a 	cmpne	r9,r6,zero
  808c0c:	0005883a 	mov	r2,zero
  808c10:	4c53883a 	add	r9,r9,r17
  808c14:	4c63803a 	cmpltu	r17,r9,r17
  808c18:	10c7883a 	add	r3,r2,r3
  808c1c:	88c7883a 	add	r3,r17,r3
  808c20:	4823883a 	mov	r17,r9
  808c24:	1880202c 	andhi	r2,r3,128
  808c28:	1000d026 	beq	r2,zero,808f6c <__subdf3+0x5c8>
  808c2c:	84000044 	addi	r16,r16,1
  808c30:	0081ffc4 	movi	r2,2047
  808c34:	8080fe26 	beq	r16,r2,809030 <__subdf3+0x68c>
  808c38:	00bfe034 	movhi	r2,65408
  808c3c:	10bfffc4 	addi	r2,r2,-1
  808c40:	1886703a 	and	r3,r3,r2
  808c44:	880ad07a 	srli	r5,r17,1
  808c48:	180497fa 	slli	r2,r3,31
  808c4c:	8900004c 	andi	r4,r17,1
  808c50:	2922b03a 	or	r17,r5,r4
  808c54:	1806d07a 	srli	r3,r3,1
  808c58:	1462b03a 	or	r17,r2,r17
  808c5c:	3825883a 	mov	r18,r7
  808c60:	003f7106 	br	808a28 <__alt_mem_onchip_mem+0xff800a28>
  808c64:	2984b03a 	or	r2,r5,r6
  808c68:	103f6826 	beq	r2,zero,808a0c <__alt_mem_onchip_mem+0xff800a0c>
  808c6c:	39c03fcc 	andi	r7,r7,255
  808c70:	003f6706 	br	808a10 <__alt_mem_onchip_mem+0xff800a10>
  808c74:	4086b03a 	or	r3,r8,r2
  808c78:	18015226 	beq	r3,zero,8091c4 <__subdf3+0x820>
  808c7c:	00c00434 	movhi	r3,16
  808c80:	41400234 	orhi	r5,r8,8
  808c84:	18ffffc4 	addi	r3,r3,-1
  808c88:	28ca703a 	and	r5,r5,r3
  808c8c:	003f7e06 	br	808a88 <__alt_mem_onchip_mem+0xff800a88>
  808c90:	10bfffc4 	addi	r2,r2,-1
  808c94:	1000491e 	bne	r2,zero,808dbc <__subdf3+0x418>
  808c98:	898fc83a 	sub	r7,r17,r6
  808c9c:	89e3803a 	cmpltu	r17,r17,r7
  808ca0:	1947c83a 	sub	r3,r3,r5
  808ca4:	1c47c83a 	sub	r3,r3,r17
  808ca8:	3823883a 	mov	r17,r7
  808cac:	003f9b06 	br	808b1c <__alt_mem_onchip_mem+0xff800b1c>
  808cb0:	2988b03a 	or	r4,r5,r6
  808cb4:	203f5c26 	beq	r4,zero,808a28 <__alt_mem_onchip_mem+0xff800a28>
  808cb8:	10bfffc4 	addi	r2,r2,-1
  808cbc:	1000931e 	bne	r2,zero,808f0c <__subdf3+0x568>
  808cc0:	898d883a 	add	r6,r17,r6
  808cc4:	3463803a 	cmpltu	r17,r6,r17
  808cc8:	1947883a 	add	r3,r3,r5
  808ccc:	88c7883a 	add	r3,r17,r3
  808cd0:	3023883a 	mov	r17,r6
  808cd4:	003fd306 	br	808c24 <__alt_mem_onchip_mem+0xff800c24>
  808cd8:	1000541e 	bne	r2,zero,808e2c <__subdf3+0x488>
  808cdc:	80800044 	addi	r2,r16,1
  808ce0:	1081ffcc 	andi	r2,r2,2047
  808ce4:	01000044 	movi	r4,1
  808ce8:	2080a20e 	bge	r4,r2,808f74 <__subdf3+0x5d0>
  808cec:	8989c83a 	sub	r4,r17,r6
  808cf0:	8905803a 	cmpltu	r2,r17,r4
  808cf4:	1967c83a 	sub	r19,r3,r5
  808cf8:	98a7c83a 	sub	r19,r19,r2
  808cfc:	9880202c 	andhi	r2,r19,128
  808d00:	10006326 	beq	r2,zero,808e90 <__subdf3+0x4ec>
  808d04:	3463c83a 	sub	r17,r6,r17
  808d08:	28c7c83a 	sub	r3,r5,r3
  808d0c:	344d803a 	cmpltu	r6,r6,r17
  808d10:	19a7c83a 	sub	r19,r3,r6
  808d14:	3825883a 	mov	r18,r7
  808d18:	983f861e 	bne	r19,zero,808b34 <__alt_mem_onchip_mem+0xff800b34>
  808d1c:	8809883a 	mov	r4,r17
  808d20:	08094240 	call	809424 <__clzsi2>
  808d24:	10800804 	addi	r2,r2,32
  808d28:	113ffe04 	addi	r4,r2,-8
  808d2c:	00c007c4 	movi	r3,31
  808d30:	193f850e 	bge	r3,r4,808b48 <__alt_mem_onchip_mem+0xff800b48>
  808d34:	10bff604 	addi	r2,r2,-40
  808d38:	8884983a 	sll	r2,r17,r2
  808d3c:	0023883a 	mov	r17,zero
  808d40:	243f880e 	bge	r4,r16,808b64 <__alt_mem_onchip_mem+0xff800b64>
  808d44:	00ffe034 	movhi	r3,65408
  808d48:	18ffffc4 	addi	r3,r3,-1
  808d4c:	8121c83a 	sub	r16,r16,r4
  808d50:	10c6703a 	and	r3,r2,r3
  808d54:	003f3406 	br	808a28 <__alt_mem_onchip_mem+0xff800a28>
  808d58:	9100004c 	andi	r4,r18,1
  808d5c:	000b883a 	mov	r5,zero
  808d60:	0005883a 	mov	r2,zero
  808d64:	003f4806 	br	808a88 <__alt_mem_onchip_mem+0xff800a88>
  808d68:	298cb03a 	or	r6,r5,r6
  808d6c:	300cc03a 	cmpne	r6,r6,zero
  808d70:	0005883a 	mov	r2,zero
  808d74:	003f6406 	br	808b08 <__alt_mem_onchip_mem+0xff800b08>
  808d78:	10009a1e 	bne	r2,zero,808fe4 <__subdf3+0x640>
  808d7c:	82400044 	addi	r9,r16,1
  808d80:	4881ffcc 	andi	r2,r9,2047
  808d84:	02800044 	movi	r10,1
  808d88:	5080670e 	bge	r10,r2,808f28 <__subdf3+0x584>
  808d8c:	0081ffc4 	movi	r2,2047
  808d90:	4880af26 	beq	r9,r2,809050 <__subdf3+0x6ac>
  808d94:	898d883a 	add	r6,r17,r6
  808d98:	1945883a 	add	r2,r3,r5
  808d9c:	3447803a 	cmpltu	r3,r6,r17
  808da0:	1887883a 	add	r3,r3,r2
  808da4:	182297fa 	slli	r17,r3,31
  808da8:	300cd07a 	srli	r6,r6,1
  808dac:	1806d07a 	srli	r3,r3,1
  808db0:	4821883a 	mov	r16,r9
  808db4:	89a2b03a 	or	r17,r17,r6
  808db8:	003f1b06 	br	808a28 <__alt_mem_onchip_mem+0xff800a28>
  808dbc:	0101ffc4 	movi	r4,2047
  808dc0:	813f441e 	bne	r16,r4,808ad4 <__alt_mem_onchip_mem+0xff800ad4>
  808dc4:	003f1806 	br	808a28 <__alt_mem_onchip_mem+0xff800a28>
  808dc8:	843ff844 	addi	r16,r16,-31
  808dcc:	01400804 	movi	r5,32
  808dd0:	1408d83a 	srl	r4,r2,r16
  808dd4:	19405026 	beq	r3,r5,808f18 <__subdf3+0x574>
  808dd8:	01401004 	movi	r5,64
  808ddc:	28c7c83a 	sub	r3,r5,r3
  808de0:	10c4983a 	sll	r2,r2,r3
  808de4:	88a2b03a 	or	r17,r17,r2
  808de8:	8822c03a 	cmpne	r17,r17,zero
  808dec:	2462b03a 	or	r17,r4,r17
  808df0:	0007883a 	mov	r3,zero
  808df4:	0021883a 	mov	r16,zero
  808df8:	003f6d06 	br	808bb0 <__alt_mem_onchip_mem+0xff800bb0>
  808dfc:	11fff804 	addi	r7,r2,-32
  808e00:	01000804 	movi	r4,32
  808e04:	29ced83a 	srl	r7,r5,r7
  808e08:	11004526 	beq	r2,r4,808f20 <__subdf3+0x57c>
  808e0c:	01001004 	movi	r4,64
  808e10:	2089c83a 	sub	r4,r4,r2
  808e14:	2904983a 	sll	r2,r5,r4
  808e18:	118cb03a 	or	r6,r2,r6
  808e1c:	300cc03a 	cmpne	r6,r6,zero
  808e20:	398cb03a 	or	r6,r7,r6
  808e24:	0005883a 	mov	r2,zero
  808e28:	003f3706 	br	808b08 <__alt_mem_onchip_mem+0xff800b08>
  808e2c:	80002a26 	beq	r16,zero,808ed8 <__subdf3+0x534>
  808e30:	0101ffc4 	movi	r4,2047
  808e34:	49006626 	beq	r9,r4,808fd0 <__subdf3+0x62c>
  808e38:	0085c83a 	sub	r2,zero,r2
  808e3c:	18c02034 	orhi	r3,r3,128
  808e40:	01000e04 	movi	r4,56
  808e44:	20807e16 	blt	r4,r2,809040 <__subdf3+0x69c>
  808e48:	010007c4 	movi	r4,31
  808e4c:	2080e716 	blt	r4,r2,8091ec <__subdf3+0x848>
  808e50:	01000804 	movi	r4,32
  808e54:	2089c83a 	sub	r4,r4,r2
  808e58:	1914983a 	sll	r10,r3,r4
  808e5c:	8890d83a 	srl	r8,r17,r2
  808e60:	8908983a 	sll	r4,r17,r4
  808e64:	1884d83a 	srl	r2,r3,r2
  808e68:	5222b03a 	or	r17,r10,r8
  808e6c:	2006c03a 	cmpne	r3,r4,zero
  808e70:	88e2b03a 	or	r17,r17,r3
  808e74:	3463c83a 	sub	r17,r6,r17
  808e78:	2885c83a 	sub	r2,r5,r2
  808e7c:	344d803a 	cmpltu	r6,r6,r17
  808e80:	1187c83a 	sub	r3,r2,r6
  808e84:	4821883a 	mov	r16,r9
  808e88:	3825883a 	mov	r18,r7
  808e8c:	003f2306 	br	808b1c <__alt_mem_onchip_mem+0xff800b1c>
  808e90:	24d0b03a 	or	r8,r4,r19
  808e94:	40001b1e 	bne	r8,zero,808f04 <__subdf3+0x560>
  808e98:	0005883a 	mov	r2,zero
  808e9c:	0009883a 	mov	r4,zero
  808ea0:	0021883a 	mov	r16,zero
  808ea4:	003f4906 	br	808bcc <__alt_mem_onchip_mem+0xff800bcc>
  808ea8:	010007c4 	movi	r4,31
  808eac:	20803a16 	blt	r4,r2,808f98 <__subdf3+0x5f4>
  808eb0:	01000804 	movi	r4,32
  808eb4:	2089c83a 	sub	r4,r4,r2
  808eb8:	2912983a 	sll	r9,r5,r4
  808ebc:	3090d83a 	srl	r8,r6,r2
  808ec0:	3108983a 	sll	r4,r6,r4
  808ec4:	2884d83a 	srl	r2,r5,r2
  808ec8:	4a12b03a 	or	r9,r9,r8
  808ecc:	2008c03a 	cmpne	r4,r4,zero
  808ed0:	4912b03a 	or	r9,r9,r4
  808ed4:	003f4e06 	br	808c10 <__alt_mem_onchip_mem+0xff800c10>
  808ed8:	1c48b03a 	or	r4,r3,r17
  808edc:	20003c26 	beq	r4,zero,808fd0 <__subdf3+0x62c>
  808ee0:	0084303a 	nor	r2,zero,r2
  808ee4:	1000381e 	bne	r2,zero,808fc8 <__subdf3+0x624>
  808ee8:	3463c83a 	sub	r17,r6,r17
  808eec:	28c5c83a 	sub	r2,r5,r3
  808ef0:	344d803a 	cmpltu	r6,r6,r17
  808ef4:	1187c83a 	sub	r3,r2,r6
  808ef8:	4821883a 	mov	r16,r9
  808efc:	3825883a 	mov	r18,r7
  808f00:	003f0606 	br	808b1c <__alt_mem_onchip_mem+0xff800b1c>
  808f04:	2023883a 	mov	r17,r4
  808f08:	003f0906 	br	808b30 <__alt_mem_onchip_mem+0xff800b30>
  808f0c:	0101ffc4 	movi	r4,2047
  808f10:	813f3a1e 	bne	r16,r4,808bfc <__alt_mem_onchip_mem+0xff800bfc>
  808f14:	003ec406 	br	808a28 <__alt_mem_onchip_mem+0xff800a28>
  808f18:	0005883a 	mov	r2,zero
  808f1c:	003fb106 	br	808de4 <__alt_mem_onchip_mem+0xff800de4>
  808f20:	0005883a 	mov	r2,zero
  808f24:	003fbc06 	br	808e18 <__alt_mem_onchip_mem+0xff800e18>
  808f28:	1c44b03a 	or	r2,r3,r17
  808f2c:	80008e1e 	bne	r16,zero,809168 <__subdf3+0x7c4>
  808f30:	1000c826 	beq	r2,zero,809254 <__subdf3+0x8b0>
  808f34:	2984b03a 	or	r2,r5,r6
  808f38:	103ebb26 	beq	r2,zero,808a28 <__alt_mem_onchip_mem+0xff800a28>
  808f3c:	8989883a 	add	r4,r17,r6
  808f40:	1945883a 	add	r2,r3,r5
  808f44:	2447803a 	cmpltu	r3,r4,r17
  808f48:	1887883a 	add	r3,r3,r2
  808f4c:	1880202c 	andhi	r2,r3,128
  808f50:	2023883a 	mov	r17,r4
  808f54:	103f1626 	beq	r2,zero,808bb0 <__alt_mem_onchip_mem+0xff800bb0>
  808f58:	00bfe034 	movhi	r2,65408
  808f5c:	10bfffc4 	addi	r2,r2,-1
  808f60:	5021883a 	mov	r16,r10
  808f64:	1886703a 	and	r3,r3,r2
  808f68:	003eaf06 	br	808a28 <__alt_mem_onchip_mem+0xff800a28>
  808f6c:	3825883a 	mov	r18,r7
  808f70:	003f0f06 	br	808bb0 <__alt_mem_onchip_mem+0xff800bb0>
  808f74:	1c44b03a 	or	r2,r3,r17
  808f78:	8000251e 	bne	r16,zero,809010 <__subdf3+0x66c>
  808f7c:	1000661e 	bne	r2,zero,809118 <__subdf3+0x774>
  808f80:	2990b03a 	or	r8,r5,r6
  808f84:	40009626 	beq	r8,zero,8091e0 <__subdf3+0x83c>
  808f88:	2807883a 	mov	r3,r5
  808f8c:	3023883a 	mov	r17,r6
  808f90:	3825883a 	mov	r18,r7
  808f94:	003ea406 	br	808a28 <__alt_mem_onchip_mem+0xff800a28>
  808f98:	127ff804 	addi	r9,r2,-32
  808f9c:	01000804 	movi	r4,32
  808fa0:	2a52d83a 	srl	r9,r5,r9
  808fa4:	11008c26 	beq	r2,r4,8091d8 <__subdf3+0x834>
  808fa8:	01001004 	movi	r4,64
  808fac:	2085c83a 	sub	r2,r4,r2
  808fb0:	2884983a 	sll	r2,r5,r2
  808fb4:	118cb03a 	or	r6,r2,r6
  808fb8:	300cc03a 	cmpne	r6,r6,zero
  808fbc:	4992b03a 	or	r9,r9,r6
  808fc0:	0005883a 	mov	r2,zero
  808fc4:	003f1206 	br	808c10 <__alt_mem_onchip_mem+0xff800c10>
  808fc8:	0101ffc4 	movi	r4,2047
  808fcc:	493f9c1e 	bne	r9,r4,808e40 <__alt_mem_onchip_mem+0xff800e40>
  808fd0:	2807883a 	mov	r3,r5
  808fd4:	3023883a 	mov	r17,r6
  808fd8:	4821883a 	mov	r16,r9
  808fdc:	3825883a 	mov	r18,r7
  808fe0:	003e9106 	br	808a28 <__alt_mem_onchip_mem+0xff800a28>
  808fe4:	80001f1e 	bne	r16,zero,809064 <__subdf3+0x6c0>
  808fe8:	1c48b03a 	or	r4,r3,r17
  808fec:	20005a26 	beq	r4,zero,809158 <__subdf3+0x7b4>
  808ff0:	0084303a 	nor	r2,zero,r2
  808ff4:	1000561e 	bne	r2,zero,809150 <__subdf3+0x7ac>
  808ff8:	89a3883a 	add	r17,r17,r6
  808ffc:	1945883a 	add	r2,r3,r5
  809000:	898d803a 	cmpltu	r6,r17,r6
  809004:	3087883a 	add	r3,r6,r2
  809008:	4821883a 	mov	r16,r9
  80900c:	003f0506 	br	808c24 <__alt_mem_onchip_mem+0xff800c24>
  809010:	10002b1e 	bne	r2,zero,8090c0 <__subdf3+0x71c>
  809014:	2984b03a 	or	r2,r5,r6
  809018:	10008026 	beq	r2,zero,80921c <__subdf3+0x878>
  80901c:	2807883a 	mov	r3,r5
  809020:	3023883a 	mov	r17,r6
  809024:	3825883a 	mov	r18,r7
  809028:	0401ffc4 	movi	r16,2047
  80902c:	003e7e06 	br	808a28 <__alt_mem_onchip_mem+0xff800a28>
  809030:	3809883a 	mov	r4,r7
  809034:	0011883a 	mov	r8,zero
  809038:	0005883a 	mov	r2,zero
  80903c:	003ee306 	br	808bcc <__alt_mem_onchip_mem+0xff800bcc>
  809040:	1c62b03a 	or	r17,r3,r17
  809044:	8822c03a 	cmpne	r17,r17,zero
  809048:	0005883a 	mov	r2,zero
  80904c:	003f8906 	br	808e74 <__alt_mem_onchip_mem+0xff800e74>
  809050:	3809883a 	mov	r4,r7
  809054:	4821883a 	mov	r16,r9
  809058:	0011883a 	mov	r8,zero
  80905c:	0005883a 	mov	r2,zero
  809060:	003eda06 	br	808bcc <__alt_mem_onchip_mem+0xff800bcc>
  809064:	0101ffc4 	movi	r4,2047
  809068:	49003b26 	beq	r9,r4,809158 <__subdf3+0x7b4>
  80906c:	0085c83a 	sub	r2,zero,r2
  809070:	18c02034 	orhi	r3,r3,128
  809074:	01000e04 	movi	r4,56
  809078:	20806e16 	blt	r4,r2,809234 <__subdf3+0x890>
  80907c:	010007c4 	movi	r4,31
  809080:	20807716 	blt	r4,r2,809260 <__subdf3+0x8bc>
  809084:	01000804 	movi	r4,32
  809088:	2089c83a 	sub	r4,r4,r2
  80908c:	1914983a 	sll	r10,r3,r4
  809090:	8890d83a 	srl	r8,r17,r2
  809094:	8908983a 	sll	r4,r17,r4
  809098:	1884d83a 	srl	r2,r3,r2
  80909c:	5222b03a 	or	r17,r10,r8
  8090a0:	2006c03a 	cmpne	r3,r4,zero
  8090a4:	88e2b03a 	or	r17,r17,r3
  8090a8:	89a3883a 	add	r17,r17,r6
  8090ac:	1145883a 	add	r2,r2,r5
  8090b0:	898d803a 	cmpltu	r6,r17,r6
  8090b4:	3087883a 	add	r3,r6,r2
  8090b8:	4821883a 	mov	r16,r9
  8090bc:	003ed906 	br	808c24 <__alt_mem_onchip_mem+0xff800c24>
  8090c0:	2984b03a 	or	r2,r5,r6
  8090c4:	10004226 	beq	r2,zero,8091d0 <__subdf3+0x82c>
  8090c8:	1808d0fa 	srli	r4,r3,3
  8090cc:	8822d0fa 	srli	r17,r17,3
  8090d0:	1806977a 	slli	r3,r3,29
  8090d4:	2080022c 	andhi	r2,r4,8
  8090d8:	1c62b03a 	or	r17,r3,r17
  8090dc:	10000826 	beq	r2,zero,809100 <__subdf3+0x75c>
  8090e0:	2812d0fa 	srli	r9,r5,3
  8090e4:	4880022c 	andhi	r2,r9,8
  8090e8:	1000051e 	bne	r2,zero,809100 <__subdf3+0x75c>
  8090ec:	300cd0fa 	srli	r6,r6,3
  8090f0:	2804977a 	slli	r2,r5,29
  8090f4:	4809883a 	mov	r4,r9
  8090f8:	3825883a 	mov	r18,r7
  8090fc:	11a2b03a 	or	r17,r2,r6
  809100:	8806d77a 	srli	r3,r17,29
  809104:	200890fa 	slli	r4,r4,3
  809108:	882290fa 	slli	r17,r17,3
  80910c:	0401ffc4 	movi	r16,2047
  809110:	1906b03a 	or	r3,r3,r4
  809114:	003e4406 	br	808a28 <__alt_mem_onchip_mem+0xff800a28>
  809118:	2984b03a 	or	r2,r5,r6
  80911c:	103e4226 	beq	r2,zero,808a28 <__alt_mem_onchip_mem+0xff800a28>
  809120:	8989c83a 	sub	r4,r17,r6
  809124:	8911803a 	cmpltu	r8,r17,r4
  809128:	1945c83a 	sub	r2,r3,r5
  80912c:	1205c83a 	sub	r2,r2,r8
  809130:	1200202c 	andhi	r8,r2,128
  809134:	403e9a26 	beq	r8,zero,808ba0 <__alt_mem_onchip_mem+0xff800ba0>
  809138:	3463c83a 	sub	r17,r6,r17
  80913c:	28c5c83a 	sub	r2,r5,r3
  809140:	344d803a 	cmpltu	r6,r6,r17
  809144:	1187c83a 	sub	r3,r2,r6
  809148:	3825883a 	mov	r18,r7
  80914c:	003e3606 	br	808a28 <__alt_mem_onchip_mem+0xff800a28>
  809150:	0101ffc4 	movi	r4,2047
  809154:	493fc71e 	bne	r9,r4,809074 <__alt_mem_onchip_mem+0xff801074>
  809158:	2807883a 	mov	r3,r5
  80915c:	3023883a 	mov	r17,r6
  809160:	4821883a 	mov	r16,r9
  809164:	003e3006 	br	808a28 <__alt_mem_onchip_mem+0xff800a28>
  809168:	10003626 	beq	r2,zero,809244 <__subdf3+0x8a0>
  80916c:	2984b03a 	or	r2,r5,r6
  809170:	10001726 	beq	r2,zero,8091d0 <__subdf3+0x82c>
  809174:	1808d0fa 	srli	r4,r3,3
  809178:	8822d0fa 	srli	r17,r17,3
  80917c:	1806977a 	slli	r3,r3,29
  809180:	2080022c 	andhi	r2,r4,8
  809184:	1c62b03a 	or	r17,r3,r17
  809188:	10000726 	beq	r2,zero,8091a8 <__subdf3+0x804>
  80918c:	2812d0fa 	srli	r9,r5,3
  809190:	4880022c 	andhi	r2,r9,8
  809194:	1000041e 	bne	r2,zero,8091a8 <__subdf3+0x804>
  809198:	300cd0fa 	srli	r6,r6,3
  80919c:	2804977a 	slli	r2,r5,29
  8091a0:	4809883a 	mov	r4,r9
  8091a4:	11a2b03a 	or	r17,r2,r6
  8091a8:	8806d77a 	srli	r3,r17,29
  8091ac:	200890fa 	slli	r4,r4,3
  8091b0:	882290fa 	slli	r17,r17,3
  8091b4:	3825883a 	mov	r18,r7
  8091b8:	1906b03a 	or	r3,r3,r4
  8091bc:	0401ffc4 	movi	r16,2047
  8091c0:	003e1906 	br	808a28 <__alt_mem_onchip_mem+0xff800a28>
  8091c4:	000b883a 	mov	r5,zero
  8091c8:	0005883a 	mov	r2,zero
  8091cc:	003e2e06 	br	808a88 <__alt_mem_onchip_mem+0xff800a88>
  8091d0:	0401ffc4 	movi	r16,2047
  8091d4:	003e1406 	br	808a28 <__alt_mem_onchip_mem+0xff800a28>
  8091d8:	0005883a 	mov	r2,zero
  8091dc:	003f7506 	br	808fb4 <__alt_mem_onchip_mem+0xff800fb4>
  8091e0:	0005883a 	mov	r2,zero
  8091e4:	0009883a 	mov	r4,zero
  8091e8:	003e7806 	br	808bcc <__alt_mem_onchip_mem+0xff800bcc>
  8091ec:	123ff804 	addi	r8,r2,-32
  8091f0:	01000804 	movi	r4,32
  8091f4:	1a10d83a 	srl	r8,r3,r8
  8091f8:	11002526 	beq	r2,r4,809290 <__subdf3+0x8ec>
  8091fc:	01001004 	movi	r4,64
  809200:	2085c83a 	sub	r2,r4,r2
  809204:	1884983a 	sll	r2,r3,r2
  809208:	1444b03a 	or	r2,r2,r17
  80920c:	1004c03a 	cmpne	r2,r2,zero
  809210:	40a2b03a 	or	r17,r8,r2
  809214:	0005883a 	mov	r2,zero
  809218:	003f1606 	br	808e74 <__alt_mem_onchip_mem+0xff800e74>
  80921c:	02000434 	movhi	r8,16
  809220:	0009883a 	mov	r4,zero
  809224:	423fffc4 	addi	r8,r8,-1
  809228:	00bfffc4 	movi	r2,-1
  80922c:	0401ffc4 	movi	r16,2047
  809230:	003e6606 	br	808bcc <__alt_mem_onchip_mem+0xff800bcc>
  809234:	1c62b03a 	or	r17,r3,r17
  809238:	8822c03a 	cmpne	r17,r17,zero
  80923c:	0005883a 	mov	r2,zero
  809240:	003f9906 	br	8090a8 <__alt_mem_onchip_mem+0xff8010a8>
  809244:	2807883a 	mov	r3,r5
  809248:	3023883a 	mov	r17,r6
  80924c:	0401ffc4 	movi	r16,2047
  809250:	003df506 	br	808a28 <__alt_mem_onchip_mem+0xff800a28>
  809254:	2807883a 	mov	r3,r5
  809258:	3023883a 	mov	r17,r6
  80925c:	003df206 	br	808a28 <__alt_mem_onchip_mem+0xff800a28>
  809260:	123ff804 	addi	r8,r2,-32
  809264:	01000804 	movi	r4,32
  809268:	1a10d83a 	srl	r8,r3,r8
  80926c:	11000a26 	beq	r2,r4,809298 <__subdf3+0x8f4>
  809270:	01001004 	movi	r4,64
  809274:	2085c83a 	sub	r2,r4,r2
  809278:	1884983a 	sll	r2,r3,r2
  80927c:	1444b03a 	or	r2,r2,r17
  809280:	1004c03a 	cmpne	r2,r2,zero
  809284:	40a2b03a 	or	r17,r8,r2
  809288:	0005883a 	mov	r2,zero
  80928c:	003f8606 	br	8090a8 <__alt_mem_onchip_mem+0xff8010a8>
  809290:	0005883a 	mov	r2,zero
  809294:	003fdc06 	br	809208 <__alt_mem_onchip_mem+0xff801208>
  809298:	0005883a 	mov	r2,zero
  80929c:	003ff706 	br	80927c <__alt_mem_onchip_mem+0xff80127c>

008092a0 <__floatsidf>:
  8092a0:	defffd04 	addi	sp,sp,-12
  8092a4:	dfc00215 	stw	ra,8(sp)
  8092a8:	dc400115 	stw	r17,4(sp)
  8092ac:	dc000015 	stw	r16,0(sp)
  8092b0:	20002b26 	beq	r4,zero,809360 <__floatsidf+0xc0>
  8092b4:	2023883a 	mov	r17,r4
  8092b8:	2020d7fa 	srli	r16,r4,31
  8092bc:	20002d16 	blt	r4,zero,809374 <__floatsidf+0xd4>
  8092c0:	8809883a 	mov	r4,r17
  8092c4:	08094240 	call	809424 <__clzsi2>
  8092c8:	01410784 	movi	r5,1054
  8092cc:	288bc83a 	sub	r5,r5,r2
  8092d0:	01010cc4 	movi	r4,1075
  8092d4:	2149c83a 	sub	r4,r4,r5
  8092d8:	00c007c4 	movi	r3,31
  8092dc:	1900160e 	bge	r3,r4,809338 <__floatsidf+0x98>
  8092e0:	00c104c4 	movi	r3,1043
  8092e4:	1947c83a 	sub	r3,r3,r5
  8092e8:	88c6983a 	sll	r3,r17,r3
  8092ec:	00800434 	movhi	r2,16
  8092f0:	10bfffc4 	addi	r2,r2,-1
  8092f4:	1886703a 	and	r3,r3,r2
  8092f8:	2941ffcc 	andi	r5,r5,2047
  8092fc:	800d883a 	mov	r6,r16
  809300:	0005883a 	mov	r2,zero
  809304:	280a953a 	slli	r5,r5,20
  809308:	31803fcc 	andi	r6,r6,255
  80930c:	01000434 	movhi	r4,16
  809310:	300c97fa 	slli	r6,r6,31
  809314:	213fffc4 	addi	r4,r4,-1
  809318:	1906703a 	and	r3,r3,r4
  80931c:	1946b03a 	or	r3,r3,r5
  809320:	1986b03a 	or	r3,r3,r6
  809324:	dfc00217 	ldw	ra,8(sp)
  809328:	dc400117 	ldw	r17,4(sp)
  80932c:	dc000017 	ldw	r16,0(sp)
  809330:	dec00304 	addi	sp,sp,12
  809334:	f800283a 	ret
  809338:	00c002c4 	movi	r3,11
  80933c:	1887c83a 	sub	r3,r3,r2
  809340:	88c6d83a 	srl	r3,r17,r3
  809344:	8904983a 	sll	r2,r17,r4
  809348:	01000434 	movhi	r4,16
  80934c:	213fffc4 	addi	r4,r4,-1
  809350:	2941ffcc 	andi	r5,r5,2047
  809354:	1906703a 	and	r3,r3,r4
  809358:	800d883a 	mov	r6,r16
  80935c:	003fe906 	br	809304 <__alt_mem_onchip_mem+0xff801304>
  809360:	000d883a 	mov	r6,zero
  809364:	000b883a 	mov	r5,zero
  809368:	0007883a 	mov	r3,zero
  80936c:	0005883a 	mov	r2,zero
  809370:	003fe406 	br	809304 <__alt_mem_onchip_mem+0xff801304>
  809374:	0123c83a 	sub	r17,zero,r4
  809378:	003fd106 	br	8092c0 <__alt_mem_onchip_mem+0xff8012c0>

0080937c <__floatunsidf>:
  80937c:	defffe04 	addi	sp,sp,-8
  809380:	dc000015 	stw	r16,0(sp)
  809384:	dfc00115 	stw	ra,4(sp)
  809388:	2021883a 	mov	r16,r4
  80938c:	20002226 	beq	r4,zero,809418 <__floatunsidf+0x9c>
  809390:	08094240 	call	809424 <__clzsi2>
  809394:	01010784 	movi	r4,1054
  809398:	2089c83a 	sub	r4,r4,r2
  80939c:	01810cc4 	movi	r6,1075
  8093a0:	310dc83a 	sub	r6,r6,r4
  8093a4:	00c007c4 	movi	r3,31
  8093a8:	1980120e 	bge	r3,r6,8093f4 <__floatunsidf+0x78>
  8093ac:	00c104c4 	movi	r3,1043
  8093b0:	1907c83a 	sub	r3,r3,r4
  8093b4:	80ca983a 	sll	r5,r16,r3
  8093b8:	00800434 	movhi	r2,16
  8093bc:	10bfffc4 	addi	r2,r2,-1
  8093c0:	2101ffcc 	andi	r4,r4,2047
  8093c4:	0021883a 	mov	r16,zero
  8093c8:	288a703a 	and	r5,r5,r2
  8093cc:	2008953a 	slli	r4,r4,20
  8093d0:	00c00434 	movhi	r3,16
  8093d4:	18ffffc4 	addi	r3,r3,-1
  8093d8:	28c6703a 	and	r3,r5,r3
  8093dc:	8005883a 	mov	r2,r16
  8093e0:	1906b03a 	or	r3,r3,r4
  8093e4:	dfc00117 	ldw	ra,4(sp)
  8093e8:	dc000017 	ldw	r16,0(sp)
  8093ec:	dec00204 	addi	sp,sp,8
  8093f0:	f800283a 	ret
  8093f4:	00c002c4 	movi	r3,11
  8093f8:	188bc83a 	sub	r5,r3,r2
  8093fc:	814ad83a 	srl	r5,r16,r5
  809400:	00c00434 	movhi	r3,16
  809404:	18ffffc4 	addi	r3,r3,-1
  809408:	81a0983a 	sll	r16,r16,r6
  80940c:	2101ffcc 	andi	r4,r4,2047
  809410:	28ca703a 	and	r5,r5,r3
  809414:	003fed06 	br	8093cc <__alt_mem_onchip_mem+0xff8013cc>
  809418:	0009883a 	mov	r4,zero
  80941c:	000b883a 	mov	r5,zero
  809420:	003fea06 	br	8093cc <__alt_mem_onchip_mem+0xff8013cc>

00809424 <__clzsi2>:
  809424:	00bfffd4 	movui	r2,65535
  809428:	11000536 	bltu	r2,r4,809440 <__clzsi2+0x1c>
  80942c:	00803fc4 	movi	r2,255
  809430:	11000f36 	bltu	r2,r4,809470 <__clzsi2+0x4c>
  809434:	00800804 	movi	r2,32
  809438:	0007883a 	mov	r3,zero
  80943c:	00000506 	br	809454 <__clzsi2+0x30>
  809440:	00804034 	movhi	r2,256
  809444:	10bfffc4 	addi	r2,r2,-1
  809448:	11000c2e 	bgeu	r2,r4,80947c <__clzsi2+0x58>
  80944c:	00800204 	movi	r2,8
  809450:	00c00604 	movi	r3,24
  809454:	20c8d83a 	srl	r4,r4,r3
  809458:	00c020b4 	movhi	r3,130
  80945c:	18e06804 	addi	r3,r3,-32352
  809460:	1909883a 	add	r4,r3,r4
  809464:	20c00003 	ldbu	r3,0(r4)
  809468:	10c5c83a 	sub	r2,r2,r3
  80946c:	f800283a 	ret
  809470:	00800604 	movi	r2,24
  809474:	00c00204 	movi	r3,8
  809478:	003ff606 	br	809454 <__alt_mem_onchip_mem+0xff801454>
  80947c:	00800404 	movi	r2,16
  809480:	1007883a 	mov	r3,r2
  809484:	003ff306 	br	809454 <__alt_mem_onchip_mem+0xff801454>

00809488 <_printf_r>:
  809488:	defffd04 	addi	sp,sp,-12
  80948c:	2805883a 	mov	r2,r5
  809490:	dfc00015 	stw	ra,0(sp)
  809494:	d9800115 	stw	r6,4(sp)
  809498:	d9c00215 	stw	r7,8(sp)
  80949c:	21400217 	ldw	r5,8(r4)
  8094a0:	d9c00104 	addi	r7,sp,4
  8094a4:	100d883a 	mov	r6,r2
  8094a8:	08094f40 	call	8094f4 <___vfprintf_internal_r>
  8094ac:	dfc00017 	ldw	ra,0(sp)
  8094b0:	dec00304 	addi	sp,sp,12
  8094b4:	f800283a 	ret

008094b8 <printf>:
  8094b8:	defffc04 	addi	sp,sp,-16
  8094bc:	dfc00015 	stw	ra,0(sp)
  8094c0:	d9400115 	stw	r5,4(sp)
  8094c4:	d9800215 	stw	r6,8(sp)
  8094c8:	d9c00315 	stw	r7,12(sp)
  8094cc:	008020b4 	movhi	r2,130
  8094d0:	10a8f004 	addi	r2,r2,-23616
  8094d4:	10800017 	ldw	r2,0(r2)
  8094d8:	200b883a 	mov	r5,r4
  8094dc:	d9800104 	addi	r6,sp,4
  8094e0:	11000217 	ldw	r4,8(r2)
  8094e4:	080b6ec0 	call	80b6ec <__vfprintf_internal>
  8094e8:	dfc00017 	ldw	ra,0(sp)
  8094ec:	dec00404 	addi	sp,sp,16
  8094f0:	f800283a 	ret

008094f4 <___vfprintf_internal_r>:
  8094f4:	deffb804 	addi	sp,sp,-288
  8094f8:	dfc04715 	stw	ra,284(sp)
  8094fc:	ddc04515 	stw	r23,276(sp)
  809500:	dd404315 	stw	r21,268(sp)
  809504:	d9002c15 	stw	r4,176(sp)
  809508:	282f883a 	mov	r23,r5
  80950c:	302b883a 	mov	r21,r6
  809510:	d9c02d15 	stw	r7,180(sp)
  809514:	df004615 	stw	fp,280(sp)
  809518:	dd804415 	stw	r22,272(sp)
  80951c:	dd004215 	stw	r20,264(sp)
  809520:	dcc04115 	stw	r19,260(sp)
  809524:	dc804015 	stw	r18,256(sp)
  809528:	dc403f15 	stw	r17,252(sp)
  80952c:	dc003e15 	stw	r16,248(sp)
  809530:	080de500 	call	80de50 <_localeconv_r>
  809534:	10800017 	ldw	r2,0(r2)
  809538:	1009883a 	mov	r4,r2
  80953c:	d8803415 	stw	r2,208(sp)
  809540:	080fe780 	call	80fe78 <strlen>
  809544:	d8803715 	stw	r2,220(sp)
  809548:	d8802c17 	ldw	r2,176(sp)
  80954c:	10000226 	beq	r2,zero,809558 <___vfprintf_internal_r+0x64>
  809550:	10800e17 	ldw	r2,56(r2)
  809554:	1000f926 	beq	r2,zero,80993c <___vfprintf_internal_r+0x448>
  809558:	b880030b 	ldhu	r2,12(r23)
  80955c:	10c8000c 	andi	r3,r2,8192
  809560:	1800061e 	bne	r3,zero,80957c <___vfprintf_internal_r+0x88>
  809564:	b9001917 	ldw	r4,100(r23)
  809568:	00f7ffc4 	movi	r3,-8193
  80956c:	10880014 	ori	r2,r2,8192
  809570:	20c6703a 	and	r3,r4,r3
  809574:	b880030d 	sth	r2,12(r23)
  809578:	b8c01915 	stw	r3,100(r23)
  80957c:	10c0020c 	andi	r3,r2,8
  809580:	1800c126 	beq	r3,zero,809888 <___vfprintf_internal_r+0x394>
  809584:	b8c00417 	ldw	r3,16(r23)
  809588:	1800bf26 	beq	r3,zero,809888 <___vfprintf_internal_r+0x394>
  80958c:	1080068c 	andi	r2,r2,26
  809590:	00c00284 	movi	r3,10
  809594:	10c0c426 	beq	r2,r3,8098a8 <___vfprintf_internal_r+0x3b4>
  809598:	d8c00404 	addi	r3,sp,16
  80959c:	050020b4 	movhi	r20,130
  8095a0:	d9001e04 	addi	r4,sp,120
  8095a4:	a520b884 	addi	r20,r20,-32030
  8095a8:	d8c01e15 	stw	r3,120(sp)
  8095ac:	d8002015 	stw	zero,128(sp)
  8095b0:	d8001f15 	stw	zero,124(sp)
  8095b4:	d8003315 	stw	zero,204(sp)
  8095b8:	d8003615 	stw	zero,216(sp)
  8095bc:	d8003815 	stw	zero,224(sp)
  8095c0:	1811883a 	mov	r8,r3
  8095c4:	d8003915 	stw	zero,228(sp)
  8095c8:	d8003a15 	stw	zero,232(sp)
  8095cc:	d8002f15 	stw	zero,188(sp)
  8095d0:	d9002815 	stw	r4,160(sp)
  8095d4:	a8800007 	ldb	r2,0(r21)
  8095d8:	10027b26 	beq	r2,zero,809fc8 <___vfprintf_internal_r+0xad4>
  8095dc:	00c00944 	movi	r3,37
  8095e0:	a821883a 	mov	r16,r21
  8095e4:	10c0021e 	bne	r2,r3,8095f0 <___vfprintf_internal_r+0xfc>
  8095e8:	00001406 	br	80963c <___vfprintf_internal_r+0x148>
  8095ec:	10c00326 	beq	r2,r3,8095fc <___vfprintf_internal_r+0x108>
  8095f0:	84000044 	addi	r16,r16,1
  8095f4:	80800007 	ldb	r2,0(r16)
  8095f8:	103ffc1e 	bne	r2,zero,8095ec <__alt_mem_onchip_mem+0xff8015ec>
  8095fc:	8563c83a 	sub	r17,r16,r21
  809600:	88000e26 	beq	r17,zero,80963c <___vfprintf_internal_r+0x148>
  809604:	d8c02017 	ldw	r3,128(sp)
  809608:	d8801f17 	ldw	r2,124(sp)
  80960c:	45400015 	stw	r21,0(r8)
  809610:	1c47883a 	add	r3,r3,r17
  809614:	10800044 	addi	r2,r2,1
  809618:	d8c02015 	stw	r3,128(sp)
  80961c:	44400115 	stw	r17,4(r8)
  809620:	d8801f15 	stw	r2,124(sp)
  809624:	00c001c4 	movi	r3,7
  809628:	1880a716 	blt	r3,r2,8098c8 <___vfprintf_internal_r+0x3d4>
  80962c:	42000204 	addi	r8,r8,8
  809630:	d9402f17 	ldw	r5,188(sp)
  809634:	2c4b883a 	add	r5,r5,r17
  809638:	d9402f15 	stw	r5,188(sp)
  80963c:	80800007 	ldb	r2,0(r16)
  809640:	1000a826 	beq	r2,zero,8098e4 <___vfprintf_internal_r+0x3f0>
  809644:	84400047 	ldb	r17,1(r16)
  809648:	00bfffc4 	movi	r2,-1
  80964c:	85400044 	addi	r21,r16,1
  809650:	d8002785 	stb	zero,158(sp)
  809654:	0007883a 	mov	r3,zero
  809658:	000f883a 	mov	r7,zero
  80965c:	d8802915 	stw	r2,164(sp)
  809660:	d8003115 	stw	zero,196(sp)
  809664:	0025883a 	mov	r18,zero
  809668:	01401604 	movi	r5,88
  80966c:	01800244 	movi	r6,9
  809670:	02800a84 	movi	r10,42
  809674:	02401b04 	movi	r9,108
  809678:	ad400044 	addi	r21,r21,1
  80967c:	88bff804 	addi	r2,r17,-32
  809680:	28830436 	bltu	r5,r2,80a294 <___vfprintf_internal_r+0xda0>
  809684:	100490ba 	slli	r2,r2,2
  809688:	01002074 	movhi	r4,129
  80968c:	2125a704 	addi	r4,r4,-26980
  809690:	1105883a 	add	r2,r2,r4
  809694:	10800017 	ldw	r2,0(r2)
  809698:	1000683a 	jmp	r2
  80969c:	0080a1b4 	movhi	r2,646
  8096a0:	0080a294 	movui	r2,650
  8096a4:	0080a294 	movui	r2,650
  8096a8:	0080a1d4 	movui	r2,647
  8096ac:	0080a294 	movui	r2,650
  8096b0:	0080a294 	movui	r2,650
  8096b4:	0080a294 	movui	r2,650
  8096b8:	0080a294 	movui	r2,650
  8096bc:	0080a294 	movui	r2,650
  8096c0:	0080a294 	movui	r2,650
  8096c4:	00809948 	cmpgei	r2,zero,613
  8096c8:	0080a0f0 	cmpltui	r2,zero,643
  8096cc:	0080a294 	movui	r2,650
  8096d0:	00809810 	cmplti	r2,zero,608
  8096d4:	00809970 	cmpltui	r2,zero,613
  8096d8:	0080a294 	movui	r2,650
  8096dc:	008099b0 	cmpltui	r2,zero,614
  8096e0:	008099bc 	xorhi	r2,zero,614
  8096e4:	008099bc 	xorhi	r2,zero,614
  8096e8:	008099bc 	xorhi	r2,zero,614
  8096ec:	008099bc 	xorhi	r2,zero,614
  8096f0:	008099bc 	xorhi	r2,zero,614
  8096f4:	008099bc 	xorhi	r2,zero,614
  8096f8:	008099bc 	xorhi	r2,zero,614
  8096fc:	008099bc 	xorhi	r2,zero,614
  809700:	008099bc 	xorhi	r2,zero,614
  809704:	0080a294 	movui	r2,650
  809708:	0080a294 	movui	r2,650
  80970c:	0080a294 	movui	r2,650
  809710:	0080a294 	movui	r2,650
  809714:	0080a294 	movui	r2,650
  809718:	0080a294 	movui	r2,650
  80971c:	0080a294 	movui	r2,650
  809720:	0080a294 	movui	r2,650
  809724:	0080a294 	movui	r2,650
  809728:	0080a294 	movui	r2,650
  80972c:	008099f0 	cmpltui	r2,zero,615
  809730:	00809aac 	andhi	r2,zero,618
  809734:	0080a294 	movui	r2,650
  809738:	00809aac 	andhi	r2,zero,618
  80973c:	0080a294 	movui	r2,650
  809740:	0080a294 	movui	r2,650
  809744:	0080a294 	movui	r2,650
  809748:	0080a294 	movui	r2,650
  80974c:	00809b4c 	andi	r2,zero,621
  809750:	0080a294 	movui	r2,650
  809754:	0080a294 	movui	r2,650
  809758:	00809b58 	cmpnei	r2,zero,621
  80975c:	0080a294 	movui	r2,650
  809760:	0080a294 	movui	r2,650
  809764:	0080a294 	movui	r2,650
  809768:	0080a294 	movui	r2,650
  80976c:	0080a294 	movui	r2,650
  809770:	00809fd0 	cmplti	r2,zero,639
  809774:	0080a294 	movui	r2,650
  809778:	0080a294 	movui	r2,650
  80977c:	0080a030 	cmpltui	r2,zero,640
  809780:	0080a294 	movui	r2,650
  809784:	0080a294 	movui	r2,650
  809788:	0080a294 	movui	r2,650
  80978c:	0080a294 	movui	r2,650
  809790:	0080a294 	movui	r2,650
  809794:	0080a294 	movui	r2,650
  809798:	0080a294 	movui	r2,650
  80979c:	0080a294 	movui	r2,650
  8097a0:	0080a294 	movui	r2,650
  8097a4:	0080a294 	movui	r2,650
  8097a8:	0080a240 	call	80a24 <__alt_mem_sdram-0x77f5dc>
  8097ac:	0080a1e0 	cmpeqi	r2,zero,647
  8097b0:	00809aac 	andhi	r2,zero,618
  8097b4:	00809aac 	andhi	r2,zero,618
  8097b8:	00809aac 	andhi	r2,zero,618
  8097bc:	0080a1f0 	cmpltui	r2,zero,647
  8097c0:	0080a1e0 	cmpeqi	r2,zero,647
  8097c4:	0080a294 	movui	r2,650
  8097c8:	0080a294 	movui	r2,650
  8097cc:	0080a1fc 	xorhi	r2,zero,647
  8097d0:	0080a294 	movui	r2,650
  8097d4:	0080a20c 	andi	r2,zero,648
  8097d8:	0080a0e0 	cmpeqi	r2,zero,643
  8097dc:	0080981c 	xori	r2,zero,608
  8097e0:	0080a100 	call	80a10 <__alt_mem_sdram-0x77f5f0>
  8097e4:	0080a294 	movui	r2,650
  8097e8:	0080a10c 	andi	r2,zero,644
  8097ec:	0080a294 	movui	r2,650
  8097f0:	0080a168 	cmpgeui	r2,zero,645
  8097f4:	0080a294 	movui	r2,650
  8097f8:	0080a294 	movui	r2,650
  8097fc:	0080a178 	rdprs	r2,zero,645
  809800:	d9003117 	ldw	r4,196(sp)
  809804:	d8802d15 	stw	r2,180(sp)
  809808:	0109c83a 	sub	r4,zero,r4
  80980c:	d9003115 	stw	r4,196(sp)
  809810:	94800114 	ori	r18,r18,4
  809814:	ac400007 	ldb	r17,0(r21)
  809818:	003f9706 	br	809678 <__alt_mem_onchip_mem+0xff801678>
  80981c:	00800c04 	movi	r2,48
  809820:	d9002d17 	ldw	r4,180(sp)
  809824:	d9402917 	ldw	r5,164(sp)
  809828:	d8802705 	stb	r2,156(sp)
  80982c:	00801e04 	movi	r2,120
  809830:	d8802745 	stb	r2,157(sp)
  809834:	d8002785 	stb	zero,158(sp)
  809838:	20c00104 	addi	r3,r4,4
  80983c:	24c00017 	ldw	r19,0(r4)
  809840:	002d883a 	mov	r22,zero
  809844:	90800094 	ori	r2,r18,2
  809848:	28029a16 	blt	r5,zero,80a2b4 <___vfprintf_internal_r+0xdc0>
  80984c:	00bfdfc4 	movi	r2,-129
  809850:	90a4703a 	and	r18,r18,r2
  809854:	d8c02d15 	stw	r3,180(sp)
  809858:	94800094 	ori	r18,r18,2
  80985c:	9802871e 	bne	r19,zero,80a27c <___vfprintf_internal_r+0xd88>
  809860:	008020b4 	movhi	r2,130
  809864:	10a0b104 	addi	r2,r2,-32060
  809868:	d8803915 	stw	r2,228(sp)
  80986c:	04401e04 	movi	r17,120
  809870:	d8802917 	ldw	r2,164(sp)
  809874:	0039883a 	mov	fp,zero
  809878:	1001e926 	beq	r2,zero,80a020 <___vfprintf_internal_r+0xb2c>
  80987c:	0027883a 	mov	r19,zero
  809880:	002d883a 	mov	r22,zero
  809884:	00020506 	br	80a09c <___vfprintf_internal_r+0xba8>
  809888:	d9002c17 	ldw	r4,176(sp)
  80988c:	b80b883a 	mov	r5,r23
  809890:	080b7c40 	call	80b7c4 <__swsetup_r>
  809894:	1005ac1e 	bne	r2,zero,80af48 <___vfprintf_internal_r+0x1a54>
  809898:	b880030b 	ldhu	r2,12(r23)
  80989c:	00c00284 	movi	r3,10
  8098a0:	1080068c 	andi	r2,r2,26
  8098a4:	10ff3c1e 	bne	r2,r3,809598 <__alt_mem_onchip_mem+0xff801598>
  8098a8:	b880038f 	ldh	r2,14(r23)
  8098ac:	103f3a16 	blt	r2,zero,809598 <__alt_mem_onchip_mem+0xff801598>
  8098b0:	d9c02d17 	ldw	r7,180(sp)
  8098b4:	d9002c17 	ldw	r4,176(sp)
  8098b8:	a80d883a 	mov	r6,r21
  8098bc:	b80b883a 	mov	r5,r23
  8098c0:	080b7080 	call	80b708 <__sbprintf>
  8098c4:	00001106 	br	80990c <___vfprintf_internal_r+0x418>
  8098c8:	d9002c17 	ldw	r4,176(sp)
  8098cc:	d9801e04 	addi	r6,sp,120
  8098d0:	b80b883a 	mov	r5,r23
  8098d4:	081000c0 	call	81000c <__sprint_r>
  8098d8:	1000081e 	bne	r2,zero,8098fc <___vfprintf_internal_r+0x408>
  8098dc:	da000404 	addi	r8,sp,16
  8098e0:	003f5306 	br	809630 <__alt_mem_onchip_mem+0xff801630>
  8098e4:	d8802017 	ldw	r2,128(sp)
  8098e8:	10000426 	beq	r2,zero,8098fc <___vfprintf_internal_r+0x408>
  8098ec:	d9002c17 	ldw	r4,176(sp)
  8098f0:	d9801e04 	addi	r6,sp,120
  8098f4:	b80b883a 	mov	r5,r23
  8098f8:	081000c0 	call	81000c <__sprint_r>
  8098fc:	b880030b 	ldhu	r2,12(r23)
  809900:	1080100c 	andi	r2,r2,64
  809904:	1005901e 	bne	r2,zero,80af48 <___vfprintf_internal_r+0x1a54>
  809908:	d8802f17 	ldw	r2,188(sp)
  80990c:	dfc04717 	ldw	ra,284(sp)
  809910:	df004617 	ldw	fp,280(sp)
  809914:	ddc04517 	ldw	r23,276(sp)
  809918:	dd804417 	ldw	r22,272(sp)
  80991c:	dd404317 	ldw	r21,268(sp)
  809920:	dd004217 	ldw	r20,264(sp)
  809924:	dcc04117 	ldw	r19,260(sp)
  809928:	dc804017 	ldw	r18,256(sp)
  80992c:	dc403f17 	ldw	r17,252(sp)
  809930:	dc003e17 	ldw	r16,248(sp)
  809934:	dec04804 	addi	sp,sp,288
  809938:	f800283a 	ret
  80993c:	d9002c17 	ldw	r4,176(sp)
  809940:	080d7980 	call	80d798 <__sinit>
  809944:	003f0406 	br	809558 <__alt_mem_onchip_mem+0xff801558>
  809948:	d8802d17 	ldw	r2,180(sp)
  80994c:	d9002d17 	ldw	r4,180(sp)
  809950:	10800017 	ldw	r2,0(r2)
  809954:	d8803115 	stw	r2,196(sp)
  809958:	20800104 	addi	r2,r4,4
  80995c:	d9003117 	ldw	r4,196(sp)
  809960:	203fa716 	blt	r4,zero,809800 <__alt_mem_onchip_mem+0xff801800>
  809964:	d8802d15 	stw	r2,180(sp)
  809968:	ac400007 	ldb	r17,0(r21)
  80996c:	003f4206 	br	809678 <__alt_mem_onchip_mem+0xff801678>
  809970:	ac400007 	ldb	r17,0(r21)
  809974:	aac00044 	addi	r11,r21,1
  809978:	8a872826 	beq	r17,r10,80b61c <___vfprintf_internal_r+0x2128>
  80997c:	88bff404 	addi	r2,r17,-48
  809980:	0009883a 	mov	r4,zero
  809984:	30867d36 	bltu	r6,r2,80b37c <___vfprintf_internal_r+0x1e88>
  809988:	5c400007 	ldb	r17,0(r11)
  80998c:	210002a4 	muli	r4,r4,10
  809990:	5d400044 	addi	r21,r11,1
  809994:	a817883a 	mov	r11,r21
  809998:	2089883a 	add	r4,r4,r2
  80999c:	88bff404 	addi	r2,r17,-48
  8099a0:	30bff92e 	bgeu	r6,r2,809988 <__alt_mem_onchip_mem+0xff801988>
  8099a4:	2005c916 	blt	r4,zero,80b0cc <___vfprintf_internal_r+0x1bd8>
  8099a8:	d9002915 	stw	r4,164(sp)
  8099ac:	003f3306 	br	80967c <__alt_mem_onchip_mem+0xff80167c>
  8099b0:	94802014 	ori	r18,r18,128
  8099b4:	ac400007 	ldb	r17,0(r21)
  8099b8:	003f2f06 	br	809678 <__alt_mem_onchip_mem+0xff801678>
  8099bc:	a809883a 	mov	r4,r21
  8099c0:	d8003115 	stw	zero,196(sp)
  8099c4:	88bff404 	addi	r2,r17,-48
  8099c8:	0017883a 	mov	r11,zero
  8099cc:	24400007 	ldb	r17,0(r4)
  8099d0:	5ac002a4 	muli	r11,r11,10
  8099d4:	ad400044 	addi	r21,r21,1
  8099d8:	a809883a 	mov	r4,r21
  8099dc:	12d7883a 	add	r11,r2,r11
  8099e0:	88bff404 	addi	r2,r17,-48
  8099e4:	30bff92e 	bgeu	r6,r2,8099cc <__alt_mem_onchip_mem+0xff8019cc>
  8099e8:	dac03115 	stw	r11,196(sp)
  8099ec:	003f2306 	br	80967c <__alt_mem_onchip_mem+0xff80167c>
  8099f0:	18c03fcc 	andi	r3,r3,255
  8099f4:	18072b1e 	bne	r3,zero,80b6a4 <___vfprintf_internal_r+0x21b0>
  8099f8:	94800414 	ori	r18,r18,16
  8099fc:	9080080c 	andi	r2,r18,32
  809a00:	10037b26 	beq	r2,zero,80a7f0 <___vfprintf_internal_r+0x12fc>
  809a04:	d9402d17 	ldw	r5,180(sp)
  809a08:	28800117 	ldw	r2,4(r5)
  809a0c:	2cc00017 	ldw	r19,0(r5)
  809a10:	29400204 	addi	r5,r5,8
  809a14:	d9402d15 	stw	r5,180(sp)
  809a18:	102d883a 	mov	r22,r2
  809a1c:	10044b16 	blt	r2,zero,80ab4c <___vfprintf_internal_r+0x1658>
  809a20:	d9402917 	ldw	r5,164(sp)
  809a24:	df002783 	ldbu	fp,158(sp)
  809a28:	2803bc16 	blt	r5,zero,80a91c <___vfprintf_internal_r+0x1428>
  809a2c:	00ffdfc4 	movi	r3,-129
  809a30:	9d84b03a 	or	r2,r19,r22
  809a34:	90e4703a 	and	r18,r18,r3
  809a38:	10017726 	beq	r2,zero,80a018 <___vfprintf_internal_r+0xb24>
  809a3c:	b0038326 	beq	r22,zero,80a84c <___vfprintf_internal_r+0x1358>
  809a40:	dc402a15 	stw	r17,168(sp)
  809a44:	dc001e04 	addi	r16,sp,120
  809a48:	b023883a 	mov	r17,r22
  809a4c:	402d883a 	mov	r22,r8
  809a50:	9809883a 	mov	r4,r19
  809a54:	880b883a 	mov	r5,r17
  809a58:	01800284 	movi	r6,10
  809a5c:	000f883a 	mov	r7,zero
  809a60:	0812f800 	call	812f80 <__umoddi3>
  809a64:	10800c04 	addi	r2,r2,48
  809a68:	843fffc4 	addi	r16,r16,-1
  809a6c:	9809883a 	mov	r4,r19
  809a70:	880b883a 	mov	r5,r17
  809a74:	80800005 	stb	r2,0(r16)
  809a78:	01800284 	movi	r6,10
  809a7c:	000f883a 	mov	r7,zero
  809a80:	0812a080 	call	812a08 <__udivdi3>
  809a84:	1027883a 	mov	r19,r2
  809a88:	10c4b03a 	or	r2,r2,r3
  809a8c:	1823883a 	mov	r17,r3
  809a90:	103fef1e 	bne	r2,zero,809a50 <__alt_mem_onchip_mem+0xff801a50>
  809a94:	d8c02817 	ldw	r3,160(sp)
  809a98:	dc402a17 	ldw	r17,168(sp)
  809a9c:	b011883a 	mov	r8,r22
  809aa0:	1c07c83a 	sub	r3,r3,r16
  809aa4:	d8c02e15 	stw	r3,184(sp)
  809aa8:	00005906 	br	809c10 <___vfprintf_internal_r+0x71c>
  809aac:	18c03fcc 	andi	r3,r3,255
  809ab0:	1806fa1e 	bne	r3,zero,80b69c <___vfprintf_internal_r+0x21a8>
  809ab4:	9080020c 	andi	r2,r18,8
  809ab8:	10048a26 	beq	r2,zero,80ace4 <___vfprintf_internal_r+0x17f0>
  809abc:	d8c02d17 	ldw	r3,180(sp)
  809ac0:	d9002d17 	ldw	r4,180(sp)
  809ac4:	d9402d17 	ldw	r5,180(sp)
  809ac8:	18c00017 	ldw	r3,0(r3)
  809acc:	21000117 	ldw	r4,4(r4)
  809ad0:	29400204 	addi	r5,r5,8
  809ad4:	d8c03615 	stw	r3,216(sp)
  809ad8:	d9003815 	stw	r4,224(sp)
  809adc:	d9402d15 	stw	r5,180(sp)
  809ae0:	d9003617 	ldw	r4,216(sp)
  809ae4:	d9403817 	ldw	r5,224(sp)
  809ae8:	da003d15 	stw	r8,244(sp)
  809aec:	04000044 	movi	r16,1
  809af0:	080fb980 	call	80fb98 <__fpclassifyd>
  809af4:	da003d17 	ldw	r8,244(sp)
  809af8:	14041f1e 	bne	r2,r16,80ab78 <___vfprintf_internal_r+0x1684>
  809afc:	d9003617 	ldw	r4,216(sp)
  809b00:	d9403817 	ldw	r5,224(sp)
  809b04:	000d883a 	mov	r6,zero
  809b08:	000f883a 	mov	r7,zero
  809b0c:	08081980 	call	808198 <__ledf2>
  809b10:	da003d17 	ldw	r8,244(sp)
  809b14:	1005be16 	blt	r2,zero,80b210 <___vfprintf_internal_r+0x1d1c>
  809b18:	df002783 	ldbu	fp,158(sp)
  809b1c:	008011c4 	movi	r2,71
  809b20:	1445330e 	bge	r2,r17,80aff0 <___vfprintf_internal_r+0x1afc>
  809b24:	040020b4 	movhi	r16,130
  809b28:	8420a904 	addi	r16,r16,-32092
  809b2c:	00c000c4 	movi	r3,3
  809b30:	00bfdfc4 	movi	r2,-129
  809b34:	d8c02a15 	stw	r3,168(sp)
  809b38:	90a4703a 	and	r18,r18,r2
  809b3c:	d8c02e15 	stw	r3,184(sp)
  809b40:	d8002915 	stw	zero,164(sp)
  809b44:	d8003215 	stw	zero,200(sp)
  809b48:	00003706 	br	809c28 <___vfprintf_internal_r+0x734>
  809b4c:	94800214 	ori	r18,r18,8
  809b50:	ac400007 	ldb	r17,0(r21)
  809b54:	003ec806 	br	809678 <__alt_mem_onchip_mem+0xff801678>
  809b58:	18c03fcc 	andi	r3,r3,255
  809b5c:	1806db1e 	bne	r3,zero,80b6cc <___vfprintf_internal_r+0x21d8>
  809b60:	94800414 	ori	r18,r18,16
  809b64:	9080080c 	andi	r2,r18,32
  809b68:	1002d826 	beq	r2,zero,80a6cc <___vfprintf_internal_r+0x11d8>
  809b6c:	d9402d17 	ldw	r5,180(sp)
  809b70:	d8c02917 	ldw	r3,164(sp)
  809b74:	d8002785 	stb	zero,158(sp)
  809b78:	28800204 	addi	r2,r5,8
  809b7c:	2cc00017 	ldw	r19,0(r5)
  809b80:	2d800117 	ldw	r22,4(r5)
  809b84:	18048f16 	blt	r3,zero,80adc4 <___vfprintf_internal_r+0x18d0>
  809b88:	013fdfc4 	movi	r4,-129
  809b8c:	9d86b03a 	or	r3,r19,r22
  809b90:	d8802d15 	stw	r2,180(sp)
  809b94:	9124703a 	and	r18,r18,r4
  809b98:	1802d91e 	bne	r3,zero,80a700 <___vfprintf_internal_r+0x120c>
  809b9c:	d8c02917 	ldw	r3,164(sp)
  809ba0:	0039883a 	mov	fp,zero
  809ba4:	1805c326 	beq	r3,zero,80b2b4 <___vfprintf_internal_r+0x1dc0>
  809ba8:	0027883a 	mov	r19,zero
  809bac:	002d883a 	mov	r22,zero
  809bb0:	dc001e04 	addi	r16,sp,120
  809bb4:	9806d0fa 	srli	r3,r19,3
  809bb8:	b008977a 	slli	r4,r22,29
  809bbc:	b02cd0fa 	srli	r22,r22,3
  809bc0:	9cc001cc 	andi	r19,r19,7
  809bc4:	98800c04 	addi	r2,r19,48
  809bc8:	843fffc4 	addi	r16,r16,-1
  809bcc:	20e6b03a 	or	r19,r4,r3
  809bd0:	80800005 	stb	r2,0(r16)
  809bd4:	9d86b03a 	or	r3,r19,r22
  809bd8:	183ff61e 	bne	r3,zero,809bb4 <__alt_mem_onchip_mem+0xff801bb4>
  809bdc:	90c0004c 	andi	r3,r18,1
  809be0:	18013b26 	beq	r3,zero,80a0d0 <___vfprintf_internal_r+0xbdc>
  809be4:	10803fcc 	andi	r2,r2,255
  809be8:	1080201c 	xori	r2,r2,128
  809bec:	10bfe004 	addi	r2,r2,-128
  809bf0:	00c00c04 	movi	r3,48
  809bf4:	10c13626 	beq	r2,r3,80a0d0 <___vfprintf_internal_r+0xbdc>
  809bf8:	80ffffc5 	stb	r3,-1(r16)
  809bfc:	d8c02817 	ldw	r3,160(sp)
  809c00:	80bfffc4 	addi	r2,r16,-1
  809c04:	1021883a 	mov	r16,r2
  809c08:	1887c83a 	sub	r3,r3,r2
  809c0c:	d8c02e15 	stw	r3,184(sp)
  809c10:	d8802e17 	ldw	r2,184(sp)
  809c14:	d9002917 	ldw	r4,164(sp)
  809c18:	1100010e 	bge	r2,r4,809c20 <___vfprintf_internal_r+0x72c>
  809c1c:	2005883a 	mov	r2,r4
  809c20:	d8802a15 	stw	r2,168(sp)
  809c24:	d8003215 	stw	zero,200(sp)
  809c28:	e7003fcc 	andi	fp,fp,255
  809c2c:	e700201c 	xori	fp,fp,128
  809c30:	e73fe004 	addi	fp,fp,-128
  809c34:	e0000326 	beq	fp,zero,809c44 <___vfprintf_internal_r+0x750>
  809c38:	d8c02a17 	ldw	r3,168(sp)
  809c3c:	18c00044 	addi	r3,r3,1
  809c40:	d8c02a15 	stw	r3,168(sp)
  809c44:	90c0008c 	andi	r3,r18,2
  809c48:	d8c02b15 	stw	r3,172(sp)
  809c4c:	18000326 	beq	r3,zero,809c5c <___vfprintf_internal_r+0x768>
  809c50:	d8c02a17 	ldw	r3,168(sp)
  809c54:	18c00084 	addi	r3,r3,2
  809c58:	d8c02a15 	stw	r3,168(sp)
  809c5c:	90c0210c 	andi	r3,r18,132
  809c60:	d8c03015 	stw	r3,192(sp)
  809c64:	1801a31e 	bne	r3,zero,80a2f4 <___vfprintf_internal_r+0xe00>
  809c68:	d9003117 	ldw	r4,196(sp)
  809c6c:	d8c02a17 	ldw	r3,168(sp)
  809c70:	20e7c83a 	sub	r19,r4,r3
  809c74:	04c19f0e 	bge	zero,r19,80a2f4 <___vfprintf_internal_r+0xe00>
  809c78:	02400404 	movi	r9,16
  809c7c:	d8c02017 	ldw	r3,128(sp)
  809c80:	d8801f17 	ldw	r2,124(sp)
  809c84:	4cc50d0e 	bge	r9,r19,80b0bc <___vfprintf_internal_r+0x1bc8>
  809c88:	014020b4 	movhi	r5,130
  809c8c:	2960bc84 	addi	r5,r5,-32014
  809c90:	dc403b15 	stw	r17,236(sp)
  809c94:	d9403515 	stw	r5,212(sp)
  809c98:	9823883a 	mov	r17,r19
  809c9c:	482d883a 	mov	r22,r9
  809ca0:	9027883a 	mov	r19,r18
  809ca4:	070001c4 	movi	fp,7
  809ca8:	8025883a 	mov	r18,r16
  809cac:	dc002c17 	ldw	r16,176(sp)
  809cb0:	00000306 	br	809cc0 <___vfprintf_internal_r+0x7cc>
  809cb4:	8c7ffc04 	addi	r17,r17,-16
  809cb8:	42000204 	addi	r8,r8,8
  809cbc:	b440130e 	bge	r22,r17,809d0c <___vfprintf_internal_r+0x818>
  809cc0:	010020b4 	movhi	r4,130
  809cc4:	18c00404 	addi	r3,r3,16
  809cc8:	10800044 	addi	r2,r2,1
  809ccc:	2120bc84 	addi	r4,r4,-32014
  809cd0:	41000015 	stw	r4,0(r8)
  809cd4:	45800115 	stw	r22,4(r8)
  809cd8:	d8c02015 	stw	r3,128(sp)
  809cdc:	d8801f15 	stw	r2,124(sp)
  809ce0:	e0bff40e 	bge	fp,r2,809cb4 <__alt_mem_onchip_mem+0xff801cb4>
  809ce4:	d9801e04 	addi	r6,sp,120
  809ce8:	b80b883a 	mov	r5,r23
  809cec:	8009883a 	mov	r4,r16
  809cf0:	081000c0 	call	81000c <__sprint_r>
  809cf4:	103f011e 	bne	r2,zero,8098fc <__alt_mem_onchip_mem+0xff8018fc>
  809cf8:	8c7ffc04 	addi	r17,r17,-16
  809cfc:	d8c02017 	ldw	r3,128(sp)
  809d00:	d8801f17 	ldw	r2,124(sp)
  809d04:	da000404 	addi	r8,sp,16
  809d08:	b47fed16 	blt	r22,r17,809cc0 <__alt_mem_onchip_mem+0xff801cc0>
  809d0c:	9021883a 	mov	r16,r18
  809d10:	9825883a 	mov	r18,r19
  809d14:	8827883a 	mov	r19,r17
  809d18:	dc403b17 	ldw	r17,236(sp)
  809d1c:	d9403517 	ldw	r5,212(sp)
  809d20:	98c7883a 	add	r3,r19,r3
  809d24:	10800044 	addi	r2,r2,1
  809d28:	41400015 	stw	r5,0(r8)
  809d2c:	44c00115 	stw	r19,4(r8)
  809d30:	d8c02015 	stw	r3,128(sp)
  809d34:	d8801f15 	stw	r2,124(sp)
  809d38:	010001c4 	movi	r4,7
  809d3c:	2082a316 	blt	r4,r2,80a7cc <___vfprintf_internal_r+0x12d8>
  809d40:	df002787 	ldb	fp,158(sp)
  809d44:	42000204 	addi	r8,r8,8
  809d48:	e0000c26 	beq	fp,zero,809d7c <___vfprintf_internal_r+0x888>
  809d4c:	d8801f17 	ldw	r2,124(sp)
  809d50:	d9002784 	addi	r4,sp,158
  809d54:	18c00044 	addi	r3,r3,1
  809d58:	10800044 	addi	r2,r2,1
  809d5c:	41000015 	stw	r4,0(r8)
  809d60:	01000044 	movi	r4,1
  809d64:	41000115 	stw	r4,4(r8)
  809d68:	d8c02015 	stw	r3,128(sp)
  809d6c:	d8801f15 	stw	r2,124(sp)
  809d70:	010001c4 	movi	r4,7
  809d74:	20823c16 	blt	r4,r2,80a668 <___vfprintf_internal_r+0x1174>
  809d78:	42000204 	addi	r8,r8,8
  809d7c:	d8802b17 	ldw	r2,172(sp)
  809d80:	10000c26 	beq	r2,zero,809db4 <___vfprintf_internal_r+0x8c0>
  809d84:	d8801f17 	ldw	r2,124(sp)
  809d88:	d9002704 	addi	r4,sp,156
  809d8c:	18c00084 	addi	r3,r3,2
  809d90:	10800044 	addi	r2,r2,1
  809d94:	41000015 	stw	r4,0(r8)
  809d98:	01000084 	movi	r4,2
  809d9c:	41000115 	stw	r4,4(r8)
  809da0:	d8c02015 	stw	r3,128(sp)
  809da4:	d8801f15 	stw	r2,124(sp)
  809da8:	010001c4 	movi	r4,7
  809dac:	20823616 	blt	r4,r2,80a688 <___vfprintf_internal_r+0x1194>
  809db0:	42000204 	addi	r8,r8,8
  809db4:	d9003017 	ldw	r4,192(sp)
  809db8:	00802004 	movi	r2,128
  809dbc:	20819926 	beq	r4,r2,80a424 <___vfprintf_internal_r+0xf30>
  809dc0:	d9402917 	ldw	r5,164(sp)
  809dc4:	d8802e17 	ldw	r2,184(sp)
  809dc8:	28adc83a 	sub	r22,r5,r2
  809dcc:	0580310e 	bge	zero,r22,809e94 <___vfprintf_internal_r+0x9a0>
  809dd0:	07000404 	movi	fp,16
  809dd4:	d8801f17 	ldw	r2,124(sp)
  809dd8:	e584140e 	bge	fp,r22,80ae2c <___vfprintf_internal_r+0x1938>
  809ddc:	014020b4 	movhi	r5,130
  809de0:	2960b884 	addi	r5,r5,-32030
  809de4:	dc402915 	stw	r17,164(sp)
  809de8:	d9402b15 	stw	r5,172(sp)
  809dec:	b023883a 	mov	r17,r22
  809df0:	04c001c4 	movi	r19,7
  809df4:	a82d883a 	mov	r22,r21
  809df8:	902b883a 	mov	r21,r18
  809dfc:	8025883a 	mov	r18,r16
  809e00:	dc002c17 	ldw	r16,176(sp)
  809e04:	00000306 	br	809e14 <___vfprintf_internal_r+0x920>
  809e08:	8c7ffc04 	addi	r17,r17,-16
  809e0c:	42000204 	addi	r8,r8,8
  809e10:	e440110e 	bge	fp,r17,809e58 <___vfprintf_internal_r+0x964>
  809e14:	18c00404 	addi	r3,r3,16
  809e18:	10800044 	addi	r2,r2,1
  809e1c:	45000015 	stw	r20,0(r8)
  809e20:	47000115 	stw	fp,4(r8)
  809e24:	d8c02015 	stw	r3,128(sp)
  809e28:	d8801f15 	stw	r2,124(sp)
  809e2c:	98bff60e 	bge	r19,r2,809e08 <__alt_mem_onchip_mem+0xff801e08>
  809e30:	d9801e04 	addi	r6,sp,120
  809e34:	b80b883a 	mov	r5,r23
  809e38:	8009883a 	mov	r4,r16
  809e3c:	081000c0 	call	81000c <__sprint_r>
  809e40:	103eae1e 	bne	r2,zero,8098fc <__alt_mem_onchip_mem+0xff8018fc>
  809e44:	8c7ffc04 	addi	r17,r17,-16
  809e48:	d8c02017 	ldw	r3,128(sp)
  809e4c:	d8801f17 	ldw	r2,124(sp)
  809e50:	da000404 	addi	r8,sp,16
  809e54:	e47fef16 	blt	fp,r17,809e14 <__alt_mem_onchip_mem+0xff801e14>
  809e58:	9021883a 	mov	r16,r18
  809e5c:	a825883a 	mov	r18,r21
  809e60:	b02b883a 	mov	r21,r22
  809e64:	882d883a 	mov	r22,r17
  809e68:	dc402917 	ldw	r17,164(sp)
  809e6c:	d9002b17 	ldw	r4,172(sp)
  809e70:	1d87883a 	add	r3,r3,r22
  809e74:	10800044 	addi	r2,r2,1
  809e78:	41000015 	stw	r4,0(r8)
  809e7c:	45800115 	stw	r22,4(r8)
  809e80:	d8c02015 	stw	r3,128(sp)
  809e84:	d8801f15 	stw	r2,124(sp)
  809e88:	010001c4 	movi	r4,7
  809e8c:	2081ee16 	blt	r4,r2,80a648 <___vfprintf_internal_r+0x1154>
  809e90:	42000204 	addi	r8,r8,8
  809e94:	9080400c 	andi	r2,r18,256
  809e98:	1001181e 	bne	r2,zero,80a2fc <___vfprintf_internal_r+0xe08>
  809e9c:	d9402e17 	ldw	r5,184(sp)
  809ea0:	d8801f17 	ldw	r2,124(sp)
  809ea4:	44000015 	stw	r16,0(r8)
  809ea8:	1947883a 	add	r3,r3,r5
  809eac:	10800044 	addi	r2,r2,1
  809eb0:	41400115 	stw	r5,4(r8)
  809eb4:	d8c02015 	stw	r3,128(sp)
  809eb8:	d8801f15 	stw	r2,124(sp)
  809ebc:	010001c4 	movi	r4,7
  809ec0:	2081d316 	blt	r4,r2,80a610 <___vfprintf_internal_r+0x111c>
  809ec4:	42000204 	addi	r8,r8,8
  809ec8:	9480010c 	andi	r18,r18,4
  809ecc:	90003226 	beq	r18,zero,809f98 <___vfprintf_internal_r+0xaa4>
  809ed0:	d9403117 	ldw	r5,196(sp)
  809ed4:	d8802a17 	ldw	r2,168(sp)
  809ed8:	28a1c83a 	sub	r16,r5,r2
  809edc:	04002e0e 	bge	zero,r16,809f98 <___vfprintf_internal_r+0xaa4>
  809ee0:	04400404 	movi	r17,16
  809ee4:	d8801f17 	ldw	r2,124(sp)
  809ee8:	8c04a20e 	bge	r17,r16,80b174 <___vfprintf_internal_r+0x1c80>
  809eec:	014020b4 	movhi	r5,130
  809ef0:	2960bc84 	addi	r5,r5,-32014
  809ef4:	d9403515 	stw	r5,212(sp)
  809ef8:	048001c4 	movi	r18,7
  809efc:	dcc02c17 	ldw	r19,176(sp)
  809f00:	00000306 	br	809f10 <___vfprintf_internal_r+0xa1c>
  809f04:	843ffc04 	addi	r16,r16,-16
  809f08:	42000204 	addi	r8,r8,8
  809f0c:	8c00130e 	bge	r17,r16,809f5c <___vfprintf_internal_r+0xa68>
  809f10:	010020b4 	movhi	r4,130
  809f14:	18c00404 	addi	r3,r3,16
  809f18:	10800044 	addi	r2,r2,1
  809f1c:	2120bc84 	addi	r4,r4,-32014
  809f20:	41000015 	stw	r4,0(r8)
  809f24:	44400115 	stw	r17,4(r8)
  809f28:	d8c02015 	stw	r3,128(sp)
  809f2c:	d8801f15 	stw	r2,124(sp)
  809f30:	90bff40e 	bge	r18,r2,809f04 <__alt_mem_onchip_mem+0xff801f04>
  809f34:	d9801e04 	addi	r6,sp,120
  809f38:	b80b883a 	mov	r5,r23
  809f3c:	9809883a 	mov	r4,r19
  809f40:	081000c0 	call	81000c <__sprint_r>
  809f44:	103e6d1e 	bne	r2,zero,8098fc <__alt_mem_onchip_mem+0xff8018fc>
  809f48:	843ffc04 	addi	r16,r16,-16
  809f4c:	d8c02017 	ldw	r3,128(sp)
  809f50:	d8801f17 	ldw	r2,124(sp)
  809f54:	da000404 	addi	r8,sp,16
  809f58:	8c3fed16 	blt	r17,r16,809f10 <__alt_mem_onchip_mem+0xff801f10>
  809f5c:	d9403517 	ldw	r5,212(sp)
  809f60:	1c07883a 	add	r3,r3,r16
  809f64:	10800044 	addi	r2,r2,1
  809f68:	41400015 	stw	r5,0(r8)
  809f6c:	44000115 	stw	r16,4(r8)
  809f70:	d8c02015 	stw	r3,128(sp)
  809f74:	d8801f15 	stw	r2,124(sp)
  809f78:	010001c4 	movi	r4,7
  809f7c:	2080060e 	bge	r4,r2,809f98 <___vfprintf_internal_r+0xaa4>
  809f80:	d9002c17 	ldw	r4,176(sp)
  809f84:	d9801e04 	addi	r6,sp,120
  809f88:	b80b883a 	mov	r5,r23
  809f8c:	081000c0 	call	81000c <__sprint_r>
  809f90:	103e5a1e 	bne	r2,zero,8098fc <__alt_mem_onchip_mem+0xff8018fc>
  809f94:	d8c02017 	ldw	r3,128(sp)
  809f98:	d8803117 	ldw	r2,196(sp)
  809f9c:	d9002a17 	ldw	r4,168(sp)
  809fa0:	1100010e 	bge	r2,r4,809fa8 <___vfprintf_internal_r+0xab4>
  809fa4:	2005883a 	mov	r2,r4
  809fa8:	d9402f17 	ldw	r5,188(sp)
  809fac:	288b883a 	add	r5,r5,r2
  809fb0:	d9402f15 	stw	r5,188(sp)
  809fb4:	18019e1e 	bne	r3,zero,80a630 <___vfprintf_internal_r+0x113c>
  809fb8:	a8800007 	ldb	r2,0(r21)
  809fbc:	d8001f15 	stw	zero,124(sp)
  809fc0:	da000404 	addi	r8,sp,16
  809fc4:	103d851e 	bne	r2,zero,8095dc <__alt_mem_onchip_mem+0xff8015dc>
  809fc8:	a821883a 	mov	r16,r21
  809fcc:	003d9b06 	br	80963c <__alt_mem_onchip_mem+0xff80163c>
  809fd0:	18c03fcc 	andi	r3,r3,255
  809fd4:	1805c11e 	bne	r3,zero,80b6dc <___vfprintf_internal_r+0x21e8>
  809fd8:	94800414 	ori	r18,r18,16
  809fdc:	9080080c 	andi	r2,r18,32
  809fe0:	10020c26 	beq	r2,zero,80a814 <___vfprintf_internal_r+0x1320>
  809fe4:	d8802d17 	ldw	r2,180(sp)
  809fe8:	d9002917 	ldw	r4,164(sp)
  809fec:	d8002785 	stb	zero,158(sp)
  809ff0:	10c00204 	addi	r3,r2,8
  809ff4:	14c00017 	ldw	r19,0(r2)
  809ff8:	15800117 	ldw	r22,4(r2)
  809ffc:	20040f16 	blt	r4,zero,80b03c <___vfprintf_internal_r+0x1b48>
  80a000:	013fdfc4 	movi	r4,-129
  80a004:	9d84b03a 	or	r2,r19,r22
  80a008:	d8c02d15 	stw	r3,180(sp)
  80a00c:	9124703a 	and	r18,r18,r4
  80a010:	0039883a 	mov	fp,zero
  80a014:	103e891e 	bne	r2,zero,809a3c <__alt_mem_onchip_mem+0xff801a3c>
  80a018:	d9002917 	ldw	r4,164(sp)
  80a01c:	2002c11e 	bne	r4,zero,80ab24 <___vfprintf_internal_r+0x1630>
  80a020:	d8002915 	stw	zero,164(sp)
  80a024:	d8002e15 	stw	zero,184(sp)
  80a028:	dc001e04 	addi	r16,sp,120
  80a02c:	003ef806 	br	809c10 <__alt_mem_onchip_mem+0xff801c10>
  80a030:	18c03fcc 	andi	r3,r3,255
  80a034:	18059d1e 	bne	r3,zero,80b6ac <___vfprintf_internal_r+0x21b8>
  80a038:	014020b4 	movhi	r5,130
  80a03c:	2960ac04 	addi	r5,r5,-32080
  80a040:	d9403915 	stw	r5,228(sp)
  80a044:	9080080c 	andi	r2,r18,32
  80a048:	10005226 	beq	r2,zero,80a194 <___vfprintf_internal_r+0xca0>
  80a04c:	d8802d17 	ldw	r2,180(sp)
  80a050:	14c00017 	ldw	r19,0(r2)
  80a054:	15800117 	ldw	r22,4(r2)
  80a058:	10800204 	addi	r2,r2,8
  80a05c:	d8802d15 	stw	r2,180(sp)
  80a060:	9080004c 	andi	r2,r18,1
  80a064:	10019026 	beq	r2,zero,80a6a8 <___vfprintf_internal_r+0x11b4>
  80a068:	9d84b03a 	or	r2,r19,r22
  80a06c:	10036926 	beq	r2,zero,80ae14 <___vfprintf_internal_r+0x1920>
  80a070:	d8c02917 	ldw	r3,164(sp)
  80a074:	00800c04 	movi	r2,48
  80a078:	d8802705 	stb	r2,156(sp)
  80a07c:	dc402745 	stb	r17,157(sp)
  80a080:	d8002785 	stb	zero,158(sp)
  80a084:	90800094 	ori	r2,r18,2
  80a088:	18045d16 	blt	r3,zero,80b200 <___vfprintf_internal_r+0x1d0c>
  80a08c:	00bfdfc4 	movi	r2,-129
  80a090:	90a4703a 	and	r18,r18,r2
  80a094:	94800094 	ori	r18,r18,2
  80a098:	0039883a 	mov	fp,zero
  80a09c:	d9003917 	ldw	r4,228(sp)
  80a0a0:	dc001e04 	addi	r16,sp,120
  80a0a4:	988003cc 	andi	r2,r19,15
  80a0a8:	b006973a 	slli	r3,r22,28
  80a0ac:	2085883a 	add	r2,r4,r2
  80a0b0:	9826d13a 	srli	r19,r19,4
  80a0b4:	10800003 	ldbu	r2,0(r2)
  80a0b8:	b02cd13a 	srli	r22,r22,4
  80a0bc:	843fffc4 	addi	r16,r16,-1
  80a0c0:	1ce6b03a 	or	r19,r3,r19
  80a0c4:	80800005 	stb	r2,0(r16)
  80a0c8:	9d84b03a 	or	r2,r19,r22
  80a0cc:	103ff51e 	bne	r2,zero,80a0a4 <__alt_mem_onchip_mem+0xff8020a4>
  80a0d0:	d8c02817 	ldw	r3,160(sp)
  80a0d4:	1c07c83a 	sub	r3,r3,r16
  80a0d8:	d8c02e15 	stw	r3,184(sp)
  80a0dc:	003ecc06 	br	809c10 <__alt_mem_onchip_mem+0xff801c10>
  80a0e0:	18c03fcc 	andi	r3,r3,255
  80a0e4:	183e9f26 	beq	r3,zero,809b64 <__alt_mem_onchip_mem+0xff801b64>
  80a0e8:	d9c02785 	stb	r7,158(sp)
  80a0ec:	003e9d06 	br	809b64 <__alt_mem_onchip_mem+0xff801b64>
  80a0f0:	00c00044 	movi	r3,1
  80a0f4:	01c00ac4 	movi	r7,43
  80a0f8:	ac400007 	ldb	r17,0(r21)
  80a0fc:	003d5e06 	br	809678 <__alt_mem_onchip_mem+0xff801678>
  80a100:	94800814 	ori	r18,r18,32
  80a104:	ac400007 	ldb	r17,0(r21)
  80a108:	003d5b06 	br	809678 <__alt_mem_onchip_mem+0xff801678>
  80a10c:	d8c02d17 	ldw	r3,180(sp)
  80a110:	d8002785 	stb	zero,158(sp)
  80a114:	1c000017 	ldw	r16,0(r3)
  80a118:	1cc00104 	addi	r19,r3,4
  80a11c:	80041926 	beq	r16,zero,80b184 <___vfprintf_internal_r+0x1c90>
  80a120:	d9002917 	ldw	r4,164(sp)
  80a124:	2003d016 	blt	r4,zero,80b068 <___vfprintf_internal_r+0x1b74>
  80a128:	200d883a 	mov	r6,r4
  80a12c:	000b883a 	mov	r5,zero
  80a130:	8009883a 	mov	r4,r16
  80a134:	da003d15 	stw	r8,244(sp)
  80a138:	080e8480 	call	80e848 <memchr>
  80a13c:	da003d17 	ldw	r8,244(sp)
  80a140:	10045426 	beq	r2,zero,80b294 <___vfprintf_internal_r+0x1da0>
  80a144:	1405c83a 	sub	r2,r2,r16
  80a148:	d8802e15 	stw	r2,184(sp)
  80a14c:	1003cc16 	blt	r2,zero,80b080 <___vfprintf_internal_r+0x1b8c>
  80a150:	df002783 	ldbu	fp,158(sp)
  80a154:	d8802a15 	stw	r2,168(sp)
  80a158:	dcc02d15 	stw	r19,180(sp)
  80a15c:	d8002915 	stw	zero,164(sp)
  80a160:	d8003215 	stw	zero,200(sp)
  80a164:	003eb006 	br	809c28 <__alt_mem_onchip_mem+0xff801c28>
  80a168:	18c03fcc 	andi	r3,r3,255
  80a16c:	183f9b26 	beq	r3,zero,809fdc <__alt_mem_onchip_mem+0xff801fdc>
  80a170:	d9c02785 	stb	r7,158(sp)
  80a174:	003f9906 	br	809fdc <__alt_mem_onchip_mem+0xff801fdc>
  80a178:	18c03fcc 	andi	r3,r3,255
  80a17c:	1805551e 	bne	r3,zero,80b6d4 <___vfprintf_internal_r+0x21e0>
  80a180:	014020b4 	movhi	r5,130
  80a184:	2960b104 	addi	r5,r5,-32060
  80a188:	d9403915 	stw	r5,228(sp)
  80a18c:	9080080c 	andi	r2,r18,32
  80a190:	103fae1e 	bne	r2,zero,80a04c <__alt_mem_onchip_mem+0xff80204c>
  80a194:	9080040c 	andi	r2,r18,16
  80a198:	1002de26 	beq	r2,zero,80ad14 <___vfprintf_internal_r+0x1820>
  80a19c:	d8c02d17 	ldw	r3,180(sp)
  80a1a0:	002d883a 	mov	r22,zero
  80a1a4:	1cc00017 	ldw	r19,0(r3)
  80a1a8:	18c00104 	addi	r3,r3,4
  80a1ac:	d8c02d15 	stw	r3,180(sp)
  80a1b0:	003fab06 	br	80a060 <__alt_mem_onchip_mem+0xff802060>
  80a1b4:	38803fcc 	andi	r2,r7,255
  80a1b8:	1080201c 	xori	r2,r2,128
  80a1bc:	10bfe004 	addi	r2,r2,-128
  80a1c0:	1002d21e 	bne	r2,zero,80ad0c <___vfprintf_internal_r+0x1818>
  80a1c4:	00c00044 	movi	r3,1
  80a1c8:	01c00804 	movi	r7,32
  80a1cc:	ac400007 	ldb	r17,0(r21)
  80a1d0:	003d2906 	br	809678 <__alt_mem_onchip_mem+0xff801678>
  80a1d4:	94800054 	ori	r18,r18,1
  80a1d8:	ac400007 	ldb	r17,0(r21)
  80a1dc:	003d2606 	br	809678 <__alt_mem_onchip_mem+0xff801678>
  80a1e0:	18c03fcc 	andi	r3,r3,255
  80a1e4:	183e0526 	beq	r3,zero,8099fc <__alt_mem_onchip_mem+0xff8019fc>
  80a1e8:	d9c02785 	stb	r7,158(sp)
  80a1ec:	003e0306 	br	8099fc <__alt_mem_onchip_mem+0xff8019fc>
  80a1f0:	94801014 	ori	r18,r18,64
  80a1f4:	ac400007 	ldb	r17,0(r21)
  80a1f8:	003d1f06 	br	809678 <__alt_mem_onchip_mem+0xff801678>
  80a1fc:	ac400007 	ldb	r17,0(r21)
  80a200:	8a438726 	beq	r17,r9,80b020 <___vfprintf_internal_r+0x1b2c>
  80a204:	94800414 	ori	r18,r18,16
  80a208:	003d1b06 	br	809678 <__alt_mem_onchip_mem+0xff801678>
  80a20c:	18c03fcc 	andi	r3,r3,255
  80a210:	1805341e 	bne	r3,zero,80b6e4 <___vfprintf_internal_r+0x21f0>
  80a214:	9080080c 	andi	r2,r18,32
  80a218:	1002cd26 	beq	r2,zero,80ad50 <___vfprintf_internal_r+0x185c>
  80a21c:	d9402d17 	ldw	r5,180(sp)
  80a220:	d9002f17 	ldw	r4,188(sp)
  80a224:	28800017 	ldw	r2,0(r5)
  80a228:	2007d7fa 	srai	r3,r4,31
  80a22c:	29400104 	addi	r5,r5,4
  80a230:	d9402d15 	stw	r5,180(sp)
  80a234:	11000015 	stw	r4,0(r2)
  80a238:	10c00115 	stw	r3,4(r2)
  80a23c:	003ce506 	br	8095d4 <__alt_mem_onchip_mem+0xff8015d4>
  80a240:	d8c02d17 	ldw	r3,180(sp)
  80a244:	d9002d17 	ldw	r4,180(sp)
  80a248:	d8002785 	stb	zero,158(sp)
  80a24c:	18800017 	ldw	r2,0(r3)
  80a250:	21000104 	addi	r4,r4,4
  80a254:	00c00044 	movi	r3,1
  80a258:	d8c02a15 	stw	r3,168(sp)
  80a25c:	d8801405 	stb	r2,80(sp)
  80a260:	d9002d15 	stw	r4,180(sp)
  80a264:	d8c02e15 	stw	r3,184(sp)
  80a268:	d8002915 	stw	zero,164(sp)
  80a26c:	d8003215 	stw	zero,200(sp)
  80a270:	dc001404 	addi	r16,sp,80
  80a274:	0039883a 	mov	fp,zero
  80a278:	003e7206 	br	809c44 <__alt_mem_onchip_mem+0xff801c44>
  80a27c:	010020b4 	movhi	r4,130
  80a280:	2120b104 	addi	r4,r4,-32060
  80a284:	0039883a 	mov	fp,zero
  80a288:	d9003915 	stw	r4,228(sp)
  80a28c:	04401e04 	movi	r17,120
  80a290:	003f8206 	br	80a09c <__alt_mem_onchip_mem+0xff80209c>
  80a294:	18c03fcc 	andi	r3,r3,255
  80a298:	1805061e 	bne	r3,zero,80b6b4 <___vfprintf_internal_r+0x21c0>
  80a29c:	883d9126 	beq	r17,zero,8098e4 <__alt_mem_onchip_mem+0xff8018e4>
  80a2a0:	00c00044 	movi	r3,1
  80a2a4:	d8c02a15 	stw	r3,168(sp)
  80a2a8:	dc401405 	stb	r17,80(sp)
  80a2ac:	d8002785 	stb	zero,158(sp)
  80a2b0:	003fec06 	br	80a264 <__alt_mem_onchip_mem+0xff802264>
  80a2b4:	014020b4 	movhi	r5,130
  80a2b8:	2960b104 	addi	r5,r5,-32060
  80a2bc:	d9403915 	stw	r5,228(sp)
  80a2c0:	d8c02d15 	stw	r3,180(sp)
  80a2c4:	1025883a 	mov	r18,r2
  80a2c8:	04401e04 	movi	r17,120
  80a2cc:	9d84b03a 	or	r2,r19,r22
  80a2d0:	1000fc1e 	bne	r2,zero,80a6c4 <___vfprintf_internal_r+0x11d0>
  80a2d4:	0039883a 	mov	fp,zero
  80a2d8:	00800084 	movi	r2,2
  80a2dc:	10803fcc 	andi	r2,r2,255
  80a2e0:	00c00044 	movi	r3,1
  80a2e4:	10c20f26 	beq	r2,r3,80ab24 <___vfprintf_internal_r+0x1630>
  80a2e8:	00c00084 	movi	r3,2
  80a2ec:	10fd6326 	beq	r2,r3,80987c <__alt_mem_onchip_mem+0xff80187c>
  80a2f0:	003e2d06 	br	809ba8 <__alt_mem_onchip_mem+0xff801ba8>
  80a2f4:	d8c02017 	ldw	r3,128(sp)
  80a2f8:	003e9306 	br	809d48 <__alt_mem_onchip_mem+0xff801d48>
  80a2fc:	00801944 	movi	r2,101
  80a300:	14407e0e 	bge	r2,r17,80a4fc <___vfprintf_internal_r+0x1008>
  80a304:	d9003617 	ldw	r4,216(sp)
  80a308:	d9403817 	ldw	r5,224(sp)
  80a30c:	000d883a 	mov	r6,zero
  80a310:	000f883a 	mov	r7,zero
  80a314:	d8c03c15 	stw	r3,240(sp)
  80a318:	da003d15 	stw	r8,244(sp)
  80a31c:	0813f540 	call	813f54 <__eqdf2>
  80a320:	d8c03c17 	ldw	r3,240(sp)
  80a324:	da003d17 	ldw	r8,244(sp)
  80a328:	1000f71e 	bne	r2,zero,80a708 <___vfprintf_internal_r+0x1214>
  80a32c:	d8801f17 	ldw	r2,124(sp)
  80a330:	010020b4 	movhi	r4,130
  80a334:	2120b804 	addi	r4,r4,-32032
  80a338:	18c00044 	addi	r3,r3,1
  80a33c:	10800044 	addi	r2,r2,1
  80a340:	41000015 	stw	r4,0(r8)
  80a344:	01000044 	movi	r4,1
  80a348:	41000115 	stw	r4,4(r8)
  80a34c:	d8c02015 	stw	r3,128(sp)
  80a350:	d8801f15 	stw	r2,124(sp)
  80a354:	010001c4 	movi	r4,7
  80a358:	2082b816 	blt	r4,r2,80ae3c <___vfprintf_internal_r+0x1948>
  80a35c:	42000204 	addi	r8,r8,8
  80a360:	d8802617 	ldw	r2,152(sp)
  80a364:	d9403317 	ldw	r5,204(sp)
  80a368:	11400216 	blt	r2,r5,80a374 <___vfprintf_internal_r+0xe80>
  80a36c:	9080004c 	andi	r2,r18,1
  80a370:	103ed526 	beq	r2,zero,809ec8 <__alt_mem_onchip_mem+0xff801ec8>
  80a374:	d8803717 	ldw	r2,220(sp)
  80a378:	d9003417 	ldw	r4,208(sp)
  80a37c:	d9403717 	ldw	r5,220(sp)
  80a380:	1887883a 	add	r3,r3,r2
  80a384:	d8801f17 	ldw	r2,124(sp)
  80a388:	41000015 	stw	r4,0(r8)
  80a38c:	41400115 	stw	r5,4(r8)
  80a390:	10800044 	addi	r2,r2,1
  80a394:	d8c02015 	stw	r3,128(sp)
  80a398:	d8801f15 	stw	r2,124(sp)
  80a39c:	010001c4 	movi	r4,7
  80a3a0:	20832916 	blt	r4,r2,80b048 <___vfprintf_internal_r+0x1b54>
  80a3a4:	42000204 	addi	r8,r8,8
  80a3a8:	d8803317 	ldw	r2,204(sp)
  80a3ac:	143fffc4 	addi	r16,r2,-1
  80a3b0:	043ec50e 	bge	zero,r16,809ec8 <__alt_mem_onchip_mem+0xff801ec8>
  80a3b4:	04400404 	movi	r17,16
  80a3b8:	d8801f17 	ldw	r2,124(sp)
  80a3bc:	8c00880e 	bge	r17,r16,80a5e0 <___vfprintf_internal_r+0x10ec>
  80a3c0:	014020b4 	movhi	r5,130
  80a3c4:	2960b884 	addi	r5,r5,-32030
  80a3c8:	d9402b15 	stw	r5,172(sp)
  80a3cc:	058001c4 	movi	r22,7
  80a3d0:	dcc02c17 	ldw	r19,176(sp)
  80a3d4:	00000306 	br	80a3e4 <___vfprintf_internal_r+0xef0>
  80a3d8:	42000204 	addi	r8,r8,8
  80a3dc:	843ffc04 	addi	r16,r16,-16
  80a3e0:	8c00820e 	bge	r17,r16,80a5ec <___vfprintf_internal_r+0x10f8>
  80a3e4:	18c00404 	addi	r3,r3,16
  80a3e8:	10800044 	addi	r2,r2,1
  80a3ec:	45000015 	stw	r20,0(r8)
  80a3f0:	44400115 	stw	r17,4(r8)
  80a3f4:	d8c02015 	stw	r3,128(sp)
  80a3f8:	d8801f15 	stw	r2,124(sp)
  80a3fc:	b0bff60e 	bge	r22,r2,80a3d8 <__alt_mem_onchip_mem+0xff8023d8>
  80a400:	d9801e04 	addi	r6,sp,120
  80a404:	b80b883a 	mov	r5,r23
  80a408:	9809883a 	mov	r4,r19
  80a40c:	081000c0 	call	81000c <__sprint_r>
  80a410:	103d3a1e 	bne	r2,zero,8098fc <__alt_mem_onchip_mem+0xff8018fc>
  80a414:	d8c02017 	ldw	r3,128(sp)
  80a418:	d8801f17 	ldw	r2,124(sp)
  80a41c:	da000404 	addi	r8,sp,16
  80a420:	003fee06 	br	80a3dc <__alt_mem_onchip_mem+0xff8023dc>
  80a424:	d9403117 	ldw	r5,196(sp)
  80a428:	d8802a17 	ldw	r2,168(sp)
  80a42c:	28adc83a 	sub	r22,r5,r2
  80a430:	05be630e 	bge	zero,r22,809dc0 <__alt_mem_onchip_mem+0xff801dc0>
  80a434:	07000404 	movi	fp,16
  80a438:	d8801f17 	ldw	r2,124(sp)
  80a43c:	e5838f0e 	bge	fp,r22,80b27c <___vfprintf_internal_r+0x1d88>
  80a440:	014020b4 	movhi	r5,130
  80a444:	2960b884 	addi	r5,r5,-32030
  80a448:	dc403015 	stw	r17,192(sp)
  80a44c:	d9402b15 	stw	r5,172(sp)
  80a450:	b023883a 	mov	r17,r22
  80a454:	04c001c4 	movi	r19,7
  80a458:	a82d883a 	mov	r22,r21
  80a45c:	902b883a 	mov	r21,r18
  80a460:	8025883a 	mov	r18,r16
  80a464:	dc002c17 	ldw	r16,176(sp)
  80a468:	00000306 	br	80a478 <___vfprintf_internal_r+0xf84>
  80a46c:	8c7ffc04 	addi	r17,r17,-16
  80a470:	42000204 	addi	r8,r8,8
  80a474:	e440110e 	bge	fp,r17,80a4bc <___vfprintf_internal_r+0xfc8>
  80a478:	18c00404 	addi	r3,r3,16
  80a47c:	10800044 	addi	r2,r2,1
  80a480:	45000015 	stw	r20,0(r8)
  80a484:	47000115 	stw	fp,4(r8)
  80a488:	d8c02015 	stw	r3,128(sp)
  80a48c:	d8801f15 	stw	r2,124(sp)
  80a490:	98bff60e 	bge	r19,r2,80a46c <__alt_mem_onchip_mem+0xff80246c>
  80a494:	d9801e04 	addi	r6,sp,120
  80a498:	b80b883a 	mov	r5,r23
  80a49c:	8009883a 	mov	r4,r16
  80a4a0:	081000c0 	call	81000c <__sprint_r>
  80a4a4:	103d151e 	bne	r2,zero,8098fc <__alt_mem_onchip_mem+0xff8018fc>
  80a4a8:	8c7ffc04 	addi	r17,r17,-16
  80a4ac:	d8c02017 	ldw	r3,128(sp)
  80a4b0:	d8801f17 	ldw	r2,124(sp)
  80a4b4:	da000404 	addi	r8,sp,16
  80a4b8:	e47fef16 	blt	fp,r17,80a478 <__alt_mem_onchip_mem+0xff802478>
  80a4bc:	9021883a 	mov	r16,r18
  80a4c0:	a825883a 	mov	r18,r21
  80a4c4:	b02b883a 	mov	r21,r22
  80a4c8:	882d883a 	mov	r22,r17
  80a4cc:	dc403017 	ldw	r17,192(sp)
  80a4d0:	d9002b17 	ldw	r4,172(sp)
  80a4d4:	1d87883a 	add	r3,r3,r22
  80a4d8:	10800044 	addi	r2,r2,1
  80a4dc:	41000015 	stw	r4,0(r8)
  80a4e0:	45800115 	stw	r22,4(r8)
  80a4e4:	d8c02015 	stw	r3,128(sp)
  80a4e8:	d8801f15 	stw	r2,124(sp)
  80a4ec:	010001c4 	movi	r4,7
  80a4f0:	20818e16 	blt	r4,r2,80ab2c <___vfprintf_internal_r+0x1638>
  80a4f4:	42000204 	addi	r8,r8,8
  80a4f8:	003e3106 	br	809dc0 <__alt_mem_onchip_mem+0xff801dc0>
  80a4fc:	d9403317 	ldw	r5,204(sp)
  80a500:	00800044 	movi	r2,1
  80a504:	18c00044 	addi	r3,r3,1
  80a508:	1141530e 	bge	r2,r5,80aa58 <___vfprintf_internal_r+0x1564>
  80a50c:	dc401f17 	ldw	r17,124(sp)
  80a510:	00800044 	movi	r2,1
  80a514:	40800115 	stw	r2,4(r8)
  80a518:	8c400044 	addi	r17,r17,1
  80a51c:	44000015 	stw	r16,0(r8)
  80a520:	d8c02015 	stw	r3,128(sp)
  80a524:	dc401f15 	stw	r17,124(sp)
  80a528:	008001c4 	movi	r2,7
  80a52c:	14416b16 	blt	r2,r17,80aadc <___vfprintf_internal_r+0x15e8>
  80a530:	42000204 	addi	r8,r8,8
  80a534:	d8803717 	ldw	r2,220(sp)
  80a538:	d9003417 	ldw	r4,208(sp)
  80a53c:	8c400044 	addi	r17,r17,1
  80a540:	10c7883a 	add	r3,r2,r3
  80a544:	40800115 	stw	r2,4(r8)
  80a548:	41000015 	stw	r4,0(r8)
  80a54c:	d8c02015 	stw	r3,128(sp)
  80a550:	dc401f15 	stw	r17,124(sp)
  80a554:	008001c4 	movi	r2,7
  80a558:	14416916 	blt	r2,r17,80ab00 <___vfprintf_internal_r+0x160c>
  80a55c:	45800204 	addi	r22,r8,8
  80a560:	d9003617 	ldw	r4,216(sp)
  80a564:	d9403817 	ldw	r5,224(sp)
  80a568:	000d883a 	mov	r6,zero
  80a56c:	000f883a 	mov	r7,zero
  80a570:	d8c03c15 	stw	r3,240(sp)
  80a574:	0813f540 	call	813f54 <__eqdf2>
  80a578:	d8c03c17 	ldw	r3,240(sp)
  80a57c:	1000bc26 	beq	r2,zero,80a870 <___vfprintf_internal_r+0x137c>
  80a580:	d9403317 	ldw	r5,204(sp)
  80a584:	84000044 	addi	r16,r16,1
  80a588:	8c400044 	addi	r17,r17,1
  80a58c:	28bfffc4 	addi	r2,r5,-1
  80a590:	1887883a 	add	r3,r3,r2
  80a594:	b0800115 	stw	r2,4(r22)
  80a598:	b4000015 	stw	r16,0(r22)
  80a59c:	d8c02015 	stw	r3,128(sp)
  80a5a0:	dc401f15 	stw	r17,124(sp)
  80a5a4:	008001c4 	movi	r2,7
  80a5a8:	14414316 	blt	r2,r17,80aab8 <___vfprintf_internal_r+0x15c4>
  80a5ac:	b5800204 	addi	r22,r22,8
  80a5b0:	d9003a17 	ldw	r4,232(sp)
  80a5b4:	df0022c4 	addi	fp,sp,139
  80a5b8:	8c400044 	addi	r17,r17,1
  80a5bc:	20c7883a 	add	r3,r4,r3
  80a5c0:	b7000015 	stw	fp,0(r22)
  80a5c4:	b1000115 	stw	r4,4(r22)
  80a5c8:	d8c02015 	stw	r3,128(sp)
  80a5cc:	dc401f15 	stw	r17,124(sp)
  80a5d0:	008001c4 	movi	r2,7
  80a5d4:	14400e16 	blt	r2,r17,80a610 <___vfprintf_internal_r+0x111c>
  80a5d8:	b2000204 	addi	r8,r22,8
  80a5dc:	003e3a06 	br	809ec8 <__alt_mem_onchip_mem+0xff801ec8>
  80a5e0:	010020b4 	movhi	r4,130
  80a5e4:	2120b884 	addi	r4,r4,-32030
  80a5e8:	d9002b15 	stw	r4,172(sp)
  80a5ec:	d9002b17 	ldw	r4,172(sp)
  80a5f0:	1c07883a 	add	r3,r3,r16
  80a5f4:	44000115 	stw	r16,4(r8)
  80a5f8:	41000015 	stw	r4,0(r8)
  80a5fc:	10800044 	addi	r2,r2,1
  80a600:	d8c02015 	stw	r3,128(sp)
  80a604:	d8801f15 	stw	r2,124(sp)
  80a608:	010001c4 	movi	r4,7
  80a60c:	20be2d0e 	bge	r4,r2,809ec4 <__alt_mem_onchip_mem+0xff801ec4>
  80a610:	d9002c17 	ldw	r4,176(sp)
  80a614:	d9801e04 	addi	r6,sp,120
  80a618:	b80b883a 	mov	r5,r23
  80a61c:	081000c0 	call	81000c <__sprint_r>
  80a620:	103cb61e 	bne	r2,zero,8098fc <__alt_mem_onchip_mem+0xff8018fc>
  80a624:	d8c02017 	ldw	r3,128(sp)
  80a628:	da000404 	addi	r8,sp,16
  80a62c:	003e2606 	br	809ec8 <__alt_mem_onchip_mem+0xff801ec8>
  80a630:	d9002c17 	ldw	r4,176(sp)
  80a634:	d9801e04 	addi	r6,sp,120
  80a638:	b80b883a 	mov	r5,r23
  80a63c:	081000c0 	call	81000c <__sprint_r>
  80a640:	103e5d26 	beq	r2,zero,809fb8 <__alt_mem_onchip_mem+0xff801fb8>
  80a644:	003cad06 	br	8098fc <__alt_mem_onchip_mem+0xff8018fc>
  80a648:	d9002c17 	ldw	r4,176(sp)
  80a64c:	d9801e04 	addi	r6,sp,120
  80a650:	b80b883a 	mov	r5,r23
  80a654:	081000c0 	call	81000c <__sprint_r>
  80a658:	103ca81e 	bne	r2,zero,8098fc <__alt_mem_onchip_mem+0xff8018fc>
  80a65c:	d8c02017 	ldw	r3,128(sp)
  80a660:	da000404 	addi	r8,sp,16
  80a664:	003e0b06 	br	809e94 <__alt_mem_onchip_mem+0xff801e94>
  80a668:	d9002c17 	ldw	r4,176(sp)
  80a66c:	d9801e04 	addi	r6,sp,120
  80a670:	b80b883a 	mov	r5,r23
  80a674:	081000c0 	call	81000c <__sprint_r>
  80a678:	103ca01e 	bne	r2,zero,8098fc <__alt_mem_onchip_mem+0xff8018fc>
  80a67c:	d8c02017 	ldw	r3,128(sp)
  80a680:	da000404 	addi	r8,sp,16
  80a684:	003dbd06 	br	809d7c <__alt_mem_onchip_mem+0xff801d7c>
  80a688:	d9002c17 	ldw	r4,176(sp)
  80a68c:	d9801e04 	addi	r6,sp,120
  80a690:	b80b883a 	mov	r5,r23
  80a694:	081000c0 	call	81000c <__sprint_r>
  80a698:	103c981e 	bne	r2,zero,8098fc <__alt_mem_onchip_mem+0xff8018fc>
  80a69c:	d8c02017 	ldw	r3,128(sp)
  80a6a0:	da000404 	addi	r8,sp,16
  80a6a4:	003dc306 	br	809db4 <__alt_mem_onchip_mem+0xff801db4>
  80a6a8:	d8802917 	ldw	r2,164(sp)
  80a6ac:	d8002785 	stb	zero,158(sp)
  80a6b0:	103f0616 	blt	r2,zero,80a2cc <__alt_mem_onchip_mem+0xff8022cc>
  80a6b4:	00ffdfc4 	movi	r3,-129
  80a6b8:	9d84b03a 	or	r2,r19,r22
  80a6bc:	90e4703a 	and	r18,r18,r3
  80a6c0:	103c6b26 	beq	r2,zero,809870 <__alt_mem_onchip_mem+0xff801870>
  80a6c4:	0039883a 	mov	fp,zero
  80a6c8:	003e7406 	br	80a09c <__alt_mem_onchip_mem+0xff80209c>
  80a6cc:	9080040c 	andi	r2,r18,16
  80a6d0:	1001b326 	beq	r2,zero,80ada0 <___vfprintf_internal_r+0x18ac>
  80a6d4:	d9002d17 	ldw	r4,180(sp)
  80a6d8:	d9402917 	ldw	r5,164(sp)
  80a6dc:	d8002785 	stb	zero,158(sp)
  80a6e0:	20800104 	addi	r2,r4,4
  80a6e4:	24c00017 	ldw	r19,0(r4)
  80a6e8:	002d883a 	mov	r22,zero
  80a6ec:	2801b516 	blt	r5,zero,80adc4 <___vfprintf_internal_r+0x18d0>
  80a6f0:	00ffdfc4 	movi	r3,-129
  80a6f4:	d8802d15 	stw	r2,180(sp)
  80a6f8:	90e4703a 	and	r18,r18,r3
  80a6fc:	983d2726 	beq	r19,zero,809b9c <__alt_mem_onchip_mem+0xff801b9c>
  80a700:	0039883a 	mov	fp,zero
  80a704:	003d2a06 	br	809bb0 <__alt_mem_onchip_mem+0xff801bb0>
  80a708:	dc402617 	ldw	r17,152(sp)
  80a70c:	0441d30e 	bge	zero,r17,80ae5c <___vfprintf_internal_r+0x1968>
  80a710:	dc403217 	ldw	r17,200(sp)
  80a714:	d8803317 	ldw	r2,204(sp)
  80a718:	1440010e 	bge	r2,r17,80a720 <___vfprintf_internal_r+0x122c>
  80a71c:	1023883a 	mov	r17,r2
  80a720:	04400a0e 	bge	zero,r17,80a74c <___vfprintf_internal_r+0x1258>
  80a724:	d8801f17 	ldw	r2,124(sp)
  80a728:	1c47883a 	add	r3,r3,r17
  80a72c:	44000015 	stw	r16,0(r8)
  80a730:	10800044 	addi	r2,r2,1
  80a734:	44400115 	stw	r17,4(r8)
  80a738:	d8c02015 	stw	r3,128(sp)
  80a73c:	d8801f15 	stw	r2,124(sp)
  80a740:	010001c4 	movi	r4,7
  80a744:	20826516 	blt	r4,r2,80b0dc <___vfprintf_internal_r+0x1be8>
  80a748:	42000204 	addi	r8,r8,8
  80a74c:	88026116 	blt	r17,zero,80b0d4 <___vfprintf_internal_r+0x1be0>
  80a750:	d9003217 	ldw	r4,200(sp)
  80a754:	2463c83a 	sub	r17,r4,r17
  80a758:	04407b0e 	bge	zero,r17,80a948 <___vfprintf_internal_r+0x1454>
  80a75c:	05800404 	movi	r22,16
  80a760:	d8801f17 	ldw	r2,124(sp)
  80a764:	b4419d0e 	bge	r22,r17,80addc <___vfprintf_internal_r+0x18e8>
  80a768:	010020b4 	movhi	r4,130
  80a76c:	2120b884 	addi	r4,r4,-32030
  80a770:	d9002b15 	stw	r4,172(sp)
  80a774:	070001c4 	movi	fp,7
  80a778:	dcc02c17 	ldw	r19,176(sp)
  80a77c:	00000306 	br	80a78c <___vfprintf_internal_r+0x1298>
  80a780:	42000204 	addi	r8,r8,8
  80a784:	8c7ffc04 	addi	r17,r17,-16
  80a788:	b441970e 	bge	r22,r17,80ade8 <___vfprintf_internal_r+0x18f4>
  80a78c:	18c00404 	addi	r3,r3,16
  80a790:	10800044 	addi	r2,r2,1
  80a794:	45000015 	stw	r20,0(r8)
  80a798:	45800115 	stw	r22,4(r8)
  80a79c:	d8c02015 	stw	r3,128(sp)
  80a7a0:	d8801f15 	stw	r2,124(sp)
  80a7a4:	e0bff60e 	bge	fp,r2,80a780 <__alt_mem_onchip_mem+0xff802780>
  80a7a8:	d9801e04 	addi	r6,sp,120
  80a7ac:	b80b883a 	mov	r5,r23
  80a7b0:	9809883a 	mov	r4,r19
  80a7b4:	081000c0 	call	81000c <__sprint_r>
  80a7b8:	103c501e 	bne	r2,zero,8098fc <__alt_mem_onchip_mem+0xff8018fc>
  80a7bc:	d8c02017 	ldw	r3,128(sp)
  80a7c0:	d8801f17 	ldw	r2,124(sp)
  80a7c4:	da000404 	addi	r8,sp,16
  80a7c8:	003fee06 	br	80a784 <__alt_mem_onchip_mem+0xff802784>
  80a7cc:	d9002c17 	ldw	r4,176(sp)
  80a7d0:	d9801e04 	addi	r6,sp,120
  80a7d4:	b80b883a 	mov	r5,r23
  80a7d8:	081000c0 	call	81000c <__sprint_r>
  80a7dc:	103c471e 	bne	r2,zero,8098fc <__alt_mem_onchip_mem+0xff8018fc>
  80a7e0:	d8c02017 	ldw	r3,128(sp)
  80a7e4:	df002787 	ldb	fp,158(sp)
  80a7e8:	da000404 	addi	r8,sp,16
  80a7ec:	003d5606 	br	809d48 <__alt_mem_onchip_mem+0xff801d48>
  80a7f0:	9080040c 	andi	r2,r18,16
  80a7f4:	10016126 	beq	r2,zero,80ad7c <___vfprintf_internal_r+0x1888>
  80a7f8:	d8802d17 	ldw	r2,180(sp)
  80a7fc:	14c00017 	ldw	r19,0(r2)
  80a800:	10800104 	addi	r2,r2,4
  80a804:	d8802d15 	stw	r2,180(sp)
  80a808:	982dd7fa 	srai	r22,r19,31
  80a80c:	b005883a 	mov	r2,r22
  80a810:	003c8206 	br	809a1c <__alt_mem_onchip_mem+0xff801a1c>
  80a814:	9080040c 	andi	r2,r18,16
  80a818:	10003526 	beq	r2,zero,80a8f0 <___vfprintf_internal_r+0x13fc>
  80a81c:	d9402d17 	ldw	r5,180(sp)
  80a820:	d8c02917 	ldw	r3,164(sp)
  80a824:	d8002785 	stb	zero,158(sp)
  80a828:	28800104 	addi	r2,r5,4
  80a82c:	2cc00017 	ldw	r19,0(r5)
  80a830:	002d883a 	mov	r22,zero
  80a834:	18003716 	blt	r3,zero,80a914 <___vfprintf_internal_r+0x1420>
  80a838:	00ffdfc4 	movi	r3,-129
  80a83c:	d8802d15 	stw	r2,180(sp)
  80a840:	90e4703a 	and	r18,r18,r3
  80a844:	0039883a 	mov	fp,zero
  80a848:	983df326 	beq	r19,zero,80a018 <__alt_mem_onchip_mem+0xff802018>
  80a84c:	00800244 	movi	r2,9
  80a850:	14fc7b36 	bltu	r2,r19,809a40 <__alt_mem_onchip_mem+0xff801a40>
  80a854:	d8c02817 	ldw	r3,160(sp)
  80a858:	dc001dc4 	addi	r16,sp,119
  80a85c:	9cc00c04 	addi	r19,r19,48
  80a860:	1c07c83a 	sub	r3,r3,r16
  80a864:	dcc01dc5 	stb	r19,119(sp)
  80a868:	d8c02e15 	stw	r3,184(sp)
  80a86c:	003ce806 	br	809c10 <__alt_mem_onchip_mem+0xff801c10>
  80a870:	d8803317 	ldw	r2,204(sp)
  80a874:	143fffc4 	addi	r16,r2,-1
  80a878:	043f4d0e 	bge	zero,r16,80a5b0 <__alt_mem_onchip_mem+0xff8025b0>
  80a87c:	07000404 	movi	fp,16
  80a880:	e400810e 	bge	fp,r16,80aa88 <___vfprintf_internal_r+0x1594>
  80a884:	014020b4 	movhi	r5,130
  80a888:	2960b884 	addi	r5,r5,-32030
  80a88c:	d9402b15 	stw	r5,172(sp)
  80a890:	01c001c4 	movi	r7,7
  80a894:	dcc02c17 	ldw	r19,176(sp)
  80a898:	00000306 	br	80a8a8 <___vfprintf_internal_r+0x13b4>
  80a89c:	b5800204 	addi	r22,r22,8
  80a8a0:	843ffc04 	addi	r16,r16,-16
  80a8a4:	e4007b0e 	bge	fp,r16,80aa94 <___vfprintf_internal_r+0x15a0>
  80a8a8:	18c00404 	addi	r3,r3,16
  80a8ac:	8c400044 	addi	r17,r17,1
  80a8b0:	b5000015 	stw	r20,0(r22)
  80a8b4:	b7000115 	stw	fp,4(r22)
  80a8b8:	d8c02015 	stw	r3,128(sp)
  80a8bc:	dc401f15 	stw	r17,124(sp)
  80a8c0:	3c7ff60e 	bge	r7,r17,80a89c <__alt_mem_onchip_mem+0xff80289c>
  80a8c4:	d9801e04 	addi	r6,sp,120
  80a8c8:	b80b883a 	mov	r5,r23
  80a8cc:	9809883a 	mov	r4,r19
  80a8d0:	d9c03c15 	stw	r7,240(sp)
  80a8d4:	081000c0 	call	81000c <__sprint_r>
  80a8d8:	d9c03c17 	ldw	r7,240(sp)
  80a8dc:	103c071e 	bne	r2,zero,8098fc <__alt_mem_onchip_mem+0xff8018fc>
  80a8e0:	d8c02017 	ldw	r3,128(sp)
  80a8e4:	dc401f17 	ldw	r17,124(sp)
  80a8e8:	dd800404 	addi	r22,sp,16
  80a8ec:	003fec06 	br	80a8a0 <__alt_mem_onchip_mem+0xff8028a0>
  80a8f0:	9080100c 	andi	r2,r18,64
  80a8f4:	d8002785 	stb	zero,158(sp)
  80a8f8:	10010e26 	beq	r2,zero,80ad34 <___vfprintf_internal_r+0x1840>
  80a8fc:	d9002d17 	ldw	r4,180(sp)
  80a900:	d9402917 	ldw	r5,164(sp)
  80a904:	002d883a 	mov	r22,zero
  80a908:	20800104 	addi	r2,r4,4
  80a90c:	24c0000b 	ldhu	r19,0(r4)
  80a910:	283fc90e 	bge	r5,zero,80a838 <__alt_mem_onchip_mem+0xff802838>
  80a914:	d8802d15 	stw	r2,180(sp)
  80a918:	0039883a 	mov	fp,zero
  80a91c:	9d84b03a 	or	r2,r19,r22
  80a920:	103c461e 	bne	r2,zero,809a3c <__alt_mem_onchip_mem+0xff801a3c>
  80a924:	00800044 	movi	r2,1
  80a928:	003e6c06 	br	80a2dc <__alt_mem_onchip_mem+0xff8022dc>
  80a92c:	d9002c17 	ldw	r4,176(sp)
  80a930:	d9801e04 	addi	r6,sp,120
  80a934:	b80b883a 	mov	r5,r23
  80a938:	081000c0 	call	81000c <__sprint_r>
  80a93c:	103bef1e 	bne	r2,zero,8098fc <__alt_mem_onchip_mem+0xff8018fc>
  80a940:	d8c02017 	ldw	r3,128(sp)
  80a944:	da000404 	addi	r8,sp,16
  80a948:	d9003217 	ldw	r4,200(sp)
  80a94c:	d8802617 	ldw	r2,152(sp)
  80a950:	d9403317 	ldw	r5,204(sp)
  80a954:	8123883a 	add	r17,r16,r4
  80a958:	11400216 	blt	r2,r5,80a964 <___vfprintf_internal_r+0x1470>
  80a95c:	9100004c 	andi	r4,r18,1
  80a960:	20000d26 	beq	r4,zero,80a998 <___vfprintf_internal_r+0x14a4>
  80a964:	d9003717 	ldw	r4,220(sp)
  80a968:	d9403417 	ldw	r5,208(sp)
  80a96c:	1907883a 	add	r3,r3,r4
  80a970:	d9001f17 	ldw	r4,124(sp)
  80a974:	41400015 	stw	r5,0(r8)
  80a978:	d9403717 	ldw	r5,220(sp)
  80a97c:	21000044 	addi	r4,r4,1
  80a980:	d8c02015 	stw	r3,128(sp)
  80a984:	41400115 	stw	r5,4(r8)
  80a988:	d9001f15 	stw	r4,124(sp)
  80a98c:	014001c4 	movi	r5,7
  80a990:	2901e816 	blt	r5,r4,80b134 <___vfprintf_internal_r+0x1c40>
  80a994:	42000204 	addi	r8,r8,8
  80a998:	d9003317 	ldw	r4,204(sp)
  80a99c:	8121883a 	add	r16,r16,r4
  80a9a0:	2085c83a 	sub	r2,r4,r2
  80a9a4:	8461c83a 	sub	r16,r16,r17
  80a9a8:	1400010e 	bge	r2,r16,80a9b0 <___vfprintf_internal_r+0x14bc>
  80a9ac:	1021883a 	mov	r16,r2
  80a9b0:	04000a0e 	bge	zero,r16,80a9dc <___vfprintf_internal_r+0x14e8>
  80a9b4:	d9001f17 	ldw	r4,124(sp)
  80a9b8:	1c07883a 	add	r3,r3,r16
  80a9bc:	44400015 	stw	r17,0(r8)
  80a9c0:	21000044 	addi	r4,r4,1
  80a9c4:	44000115 	stw	r16,4(r8)
  80a9c8:	d8c02015 	stw	r3,128(sp)
  80a9cc:	d9001f15 	stw	r4,124(sp)
  80a9d0:	014001c4 	movi	r5,7
  80a9d4:	2901fb16 	blt	r5,r4,80b1c4 <___vfprintf_internal_r+0x1cd0>
  80a9d8:	42000204 	addi	r8,r8,8
  80a9dc:	8001f716 	blt	r16,zero,80b1bc <___vfprintf_internal_r+0x1cc8>
  80a9e0:	1421c83a 	sub	r16,r2,r16
  80a9e4:	043d380e 	bge	zero,r16,809ec8 <__alt_mem_onchip_mem+0xff801ec8>
  80a9e8:	04400404 	movi	r17,16
  80a9ec:	d8801f17 	ldw	r2,124(sp)
  80a9f0:	8c3efb0e 	bge	r17,r16,80a5e0 <__alt_mem_onchip_mem+0xff8025e0>
  80a9f4:	014020b4 	movhi	r5,130
  80a9f8:	2960b884 	addi	r5,r5,-32030
  80a9fc:	d9402b15 	stw	r5,172(sp)
  80aa00:	058001c4 	movi	r22,7
  80aa04:	dcc02c17 	ldw	r19,176(sp)
  80aa08:	00000306 	br	80aa18 <___vfprintf_internal_r+0x1524>
  80aa0c:	42000204 	addi	r8,r8,8
  80aa10:	843ffc04 	addi	r16,r16,-16
  80aa14:	8c3ef50e 	bge	r17,r16,80a5ec <__alt_mem_onchip_mem+0xff8025ec>
  80aa18:	18c00404 	addi	r3,r3,16
  80aa1c:	10800044 	addi	r2,r2,1
  80aa20:	45000015 	stw	r20,0(r8)
  80aa24:	44400115 	stw	r17,4(r8)
  80aa28:	d8c02015 	stw	r3,128(sp)
  80aa2c:	d8801f15 	stw	r2,124(sp)
  80aa30:	b0bff60e 	bge	r22,r2,80aa0c <__alt_mem_onchip_mem+0xff802a0c>
  80aa34:	d9801e04 	addi	r6,sp,120
  80aa38:	b80b883a 	mov	r5,r23
  80aa3c:	9809883a 	mov	r4,r19
  80aa40:	081000c0 	call	81000c <__sprint_r>
  80aa44:	103bad1e 	bne	r2,zero,8098fc <__alt_mem_onchip_mem+0xff8018fc>
  80aa48:	d8c02017 	ldw	r3,128(sp)
  80aa4c:	d8801f17 	ldw	r2,124(sp)
  80aa50:	da000404 	addi	r8,sp,16
  80aa54:	003fee06 	br	80aa10 <__alt_mem_onchip_mem+0xff802a10>
  80aa58:	9088703a 	and	r4,r18,r2
  80aa5c:	203eab1e 	bne	r4,zero,80a50c <__alt_mem_onchip_mem+0xff80250c>
  80aa60:	dc401f17 	ldw	r17,124(sp)
  80aa64:	40800115 	stw	r2,4(r8)
  80aa68:	44000015 	stw	r16,0(r8)
  80aa6c:	8c400044 	addi	r17,r17,1
  80aa70:	d8c02015 	stw	r3,128(sp)
  80aa74:	dc401f15 	stw	r17,124(sp)
  80aa78:	008001c4 	movi	r2,7
  80aa7c:	14400e16 	blt	r2,r17,80aab8 <___vfprintf_internal_r+0x15c4>
  80aa80:	45800204 	addi	r22,r8,8
  80aa84:	003eca06 	br	80a5b0 <__alt_mem_onchip_mem+0xff8025b0>
  80aa88:	010020b4 	movhi	r4,130
  80aa8c:	2120b884 	addi	r4,r4,-32030
  80aa90:	d9002b15 	stw	r4,172(sp)
  80aa94:	d8802b17 	ldw	r2,172(sp)
  80aa98:	1c07883a 	add	r3,r3,r16
  80aa9c:	8c400044 	addi	r17,r17,1
  80aaa0:	b0800015 	stw	r2,0(r22)
  80aaa4:	b4000115 	stw	r16,4(r22)
  80aaa8:	d8c02015 	stw	r3,128(sp)
  80aaac:	dc401f15 	stw	r17,124(sp)
  80aab0:	008001c4 	movi	r2,7
  80aab4:	147ebd0e 	bge	r2,r17,80a5ac <__alt_mem_onchip_mem+0xff8025ac>
  80aab8:	d9002c17 	ldw	r4,176(sp)
  80aabc:	d9801e04 	addi	r6,sp,120
  80aac0:	b80b883a 	mov	r5,r23
  80aac4:	081000c0 	call	81000c <__sprint_r>
  80aac8:	103b8c1e 	bne	r2,zero,8098fc <__alt_mem_onchip_mem+0xff8018fc>
  80aacc:	d8c02017 	ldw	r3,128(sp)
  80aad0:	dc401f17 	ldw	r17,124(sp)
  80aad4:	dd800404 	addi	r22,sp,16
  80aad8:	003eb506 	br	80a5b0 <__alt_mem_onchip_mem+0xff8025b0>
  80aadc:	d9002c17 	ldw	r4,176(sp)
  80aae0:	d9801e04 	addi	r6,sp,120
  80aae4:	b80b883a 	mov	r5,r23
  80aae8:	081000c0 	call	81000c <__sprint_r>
  80aaec:	103b831e 	bne	r2,zero,8098fc <__alt_mem_onchip_mem+0xff8018fc>
  80aaf0:	d8c02017 	ldw	r3,128(sp)
  80aaf4:	dc401f17 	ldw	r17,124(sp)
  80aaf8:	da000404 	addi	r8,sp,16
  80aafc:	003e8d06 	br	80a534 <__alt_mem_onchip_mem+0xff802534>
  80ab00:	d9002c17 	ldw	r4,176(sp)
  80ab04:	d9801e04 	addi	r6,sp,120
  80ab08:	b80b883a 	mov	r5,r23
  80ab0c:	081000c0 	call	81000c <__sprint_r>
  80ab10:	103b7a1e 	bne	r2,zero,8098fc <__alt_mem_onchip_mem+0xff8018fc>
  80ab14:	d8c02017 	ldw	r3,128(sp)
  80ab18:	dc401f17 	ldw	r17,124(sp)
  80ab1c:	dd800404 	addi	r22,sp,16
  80ab20:	003e8f06 	br	80a560 <__alt_mem_onchip_mem+0xff802560>
  80ab24:	0027883a 	mov	r19,zero
  80ab28:	003f4a06 	br	80a854 <__alt_mem_onchip_mem+0xff802854>
  80ab2c:	d9002c17 	ldw	r4,176(sp)
  80ab30:	d9801e04 	addi	r6,sp,120
  80ab34:	b80b883a 	mov	r5,r23
  80ab38:	081000c0 	call	81000c <__sprint_r>
  80ab3c:	103b6f1e 	bne	r2,zero,8098fc <__alt_mem_onchip_mem+0xff8018fc>
  80ab40:	d8c02017 	ldw	r3,128(sp)
  80ab44:	da000404 	addi	r8,sp,16
  80ab48:	003c9d06 	br	809dc0 <__alt_mem_onchip_mem+0xff801dc0>
  80ab4c:	04e7c83a 	sub	r19,zero,r19
  80ab50:	9804c03a 	cmpne	r2,r19,zero
  80ab54:	05adc83a 	sub	r22,zero,r22
  80ab58:	b0adc83a 	sub	r22,r22,r2
  80ab5c:	d8802917 	ldw	r2,164(sp)
  80ab60:	07000b44 	movi	fp,45
  80ab64:	df002785 	stb	fp,158(sp)
  80ab68:	10017b16 	blt	r2,zero,80b158 <___vfprintf_internal_r+0x1c64>
  80ab6c:	00bfdfc4 	movi	r2,-129
  80ab70:	90a4703a 	and	r18,r18,r2
  80ab74:	003bb106 	br	809a3c <__alt_mem_onchip_mem+0xff801a3c>
  80ab78:	d9003617 	ldw	r4,216(sp)
  80ab7c:	d9403817 	ldw	r5,224(sp)
  80ab80:	da003d15 	stw	r8,244(sp)
  80ab84:	080fb980 	call	80fb98 <__fpclassifyd>
  80ab88:	da003d17 	ldw	r8,244(sp)
  80ab8c:	1000f026 	beq	r2,zero,80af50 <___vfprintf_internal_r+0x1a5c>
  80ab90:	d9002917 	ldw	r4,164(sp)
  80ab94:	05bff7c4 	movi	r22,-33
  80ab98:	00bfffc4 	movi	r2,-1
  80ab9c:	8dac703a 	and	r22,r17,r22
  80aba0:	20820026 	beq	r4,r2,80b3a4 <___vfprintf_internal_r+0x1eb0>
  80aba4:	008011c4 	movi	r2,71
  80aba8:	b081f726 	beq	r22,r2,80b388 <___vfprintf_internal_r+0x1e94>
  80abac:	d9003817 	ldw	r4,224(sp)
  80abb0:	90c04014 	ori	r3,r18,256
  80abb4:	d8c02b15 	stw	r3,172(sp)
  80abb8:	20021516 	blt	r4,zero,80b410 <___vfprintf_internal_r+0x1f1c>
  80abbc:	dcc03817 	ldw	r19,224(sp)
  80abc0:	d8002a05 	stb	zero,168(sp)
  80abc4:	00801984 	movi	r2,102
  80abc8:	8881f926 	beq	r17,r2,80b3b0 <___vfprintf_internal_r+0x1ebc>
  80abcc:	00801184 	movi	r2,70
  80abd0:	88821c26 	beq	r17,r2,80b444 <___vfprintf_internal_r+0x1f50>
  80abd4:	00801144 	movi	r2,69
  80abd8:	b081ef26 	beq	r22,r2,80b398 <___vfprintf_internal_r+0x1ea4>
  80abdc:	d8c02917 	ldw	r3,164(sp)
  80abe0:	d8802104 	addi	r2,sp,132
  80abe4:	d8800315 	stw	r2,12(sp)
  80abe8:	d9403617 	ldw	r5,216(sp)
  80abec:	d8802504 	addi	r2,sp,148
  80abf0:	d9002c17 	ldw	r4,176(sp)
  80abf4:	d8800215 	stw	r2,8(sp)
  80abf8:	d8802604 	addi	r2,sp,152
  80abfc:	d8c00015 	stw	r3,0(sp)
  80ac00:	d8800115 	stw	r2,4(sp)
  80ac04:	01c00084 	movi	r7,2
  80ac08:	980d883a 	mov	r6,r19
  80ac0c:	d8c03c15 	stw	r3,240(sp)
  80ac10:	da003d15 	stw	r8,244(sp)
  80ac14:	080bb180 	call	80bb18 <_dtoa_r>
  80ac18:	1021883a 	mov	r16,r2
  80ac1c:	008019c4 	movi	r2,103
  80ac20:	d8c03c17 	ldw	r3,240(sp)
  80ac24:	da003d17 	ldw	r8,244(sp)
  80ac28:	88817126 	beq	r17,r2,80b1f0 <___vfprintf_internal_r+0x1cfc>
  80ac2c:	008011c4 	movi	r2,71
  80ac30:	88829226 	beq	r17,r2,80b67c <___vfprintf_internal_r+0x2188>
  80ac34:	80f9883a 	add	fp,r16,r3
  80ac38:	d9003617 	ldw	r4,216(sp)
  80ac3c:	000d883a 	mov	r6,zero
  80ac40:	000f883a 	mov	r7,zero
  80ac44:	980b883a 	mov	r5,r19
  80ac48:	da003d15 	stw	r8,244(sp)
  80ac4c:	0813f540 	call	813f54 <__eqdf2>
  80ac50:	da003d17 	ldw	r8,244(sp)
  80ac54:	10018d26 	beq	r2,zero,80b28c <___vfprintf_internal_r+0x1d98>
  80ac58:	d8802117 	ldw	r2,132(sp)
  80ac5c:	1700062e 	bgeu	r2,fp,80ac78 <___vfprintf_internal_r+0x1784>
  80ac60:	01000c04 	movi	r4,48
  80ac64:	10c00044 	addi	r3,r2,1
  80ac68:	d8c02115 	stw	r3,132(sp)
  80ac6c:	11000005 	stb	r4,0(r2)
  80ac70:	d8802117 	ldw	r2,132(sp)
  80ac74:	173ffb36 	bltu	r2,fp,80ac64 <__alt_mem_onchip_mem+0xff802c64>
  80ac78:	1405c83a 	sub	r2,r2,r16
  80ac7c:	d8803315 	stw	r2,204(sp)
  80ac80:	008011c4 	movi	r2,71
  80ac84:	b0817626 	beq	r22,r2,80b260 <___vfprintf_internal_r+0x1d6c>
  80ac88:	00801944 	movi	r2,101
  80ac8c:	1442810e 	bge	r2,r17,80b694 <___vfprintf_internal_r+0x21a0>
  80ac90:	d8c02617 	ldw	r3,152(sp)
  80ac94:	00801984 	movi	r2,102
  80ac98:	d8c03215 	stw	r3,200(sp)
  80ac9c:	8881fe26 	beq	r17,r2,80b498 <___vfprintf_internal_r+0x1fa4>
  80aca0:	d8c03217 	ldw	r3,200(sp)
  80aca4:	d9003317 	ldw	r4,204(sp)
  80aca8:	1901dd16 	blt	r3,r4,80b420 <___vfprintf_internal_r+0x1f2c>
  80acac:	9480004c 	andi	r18,r18,1
  80acb0:	90022b1e 	bne	r18,zero,80b560 <___vfprintf_internal_r+0x206c>
  80acb4:	1805883a 	mov	r2,r3
  80acb8:	18028016 	blt	r3,zero,80b6bc <___vfprintf_internal_r+0x21c8>
  80acbc:	d8c03217 	ldw	r3,200(sp)
  80acc0:	044019c4 	movi	r17,103
  80acc4:	d8c02e15 	stw	r3,184(sp)
  80acc8:	df002a07 	ldb	fp,168(sp)
  80accc:	e001531e 	bne	fp,zero,80b21c <___vfprintf_internal_r+0x1d28>
  80acd0:	df002783 	ldbu	fp,158(sp)
  80acd4:	d8802a15 	stw	r2,168(sp)
  80acd8:	dc802b17 	ldw	r18,172(sp)
  80acdc:	d8002915 	stw	zero,164(sp)
  80ace0:	003bd106 	br	809c28 <__alt_mem_onchip_mem+0xff801c28>
  80ace4:	d8802d17 	ldw	r2,180(sp)
  80ace8:	d8c02d17 	ldw	r3,180(sp)
  80acec:	d9002d17 	ldw	r4,180(sp)
  80acf0:	10800017 	ldw	r2,0(r2)
  80acf4:	18c00117 	ldw	r3,4(r3)
  80acf8:	21000204 	addi	r4,r4,8
  80acfc:	d8803615 	stw	r2,216(sp)
  80ad00:	d8c03815 	stw	r3,224(sp)
  80ad04:	d9002d15 	stw	r4,180(sp)
  80ad08:	003b7506 	br	809ae0 <__alt_mem_onchip_mem+0xff801ae0>
  80ad0c:	ac400007 	ldb	r17,0(r21)
  80ad10:	003a5906 	br	809678 <__alt_mem_onchip_mem+0xff801678>
  80ad14:	9080100c 	andi	r2,r18,64
  80ad18:	1000a826 	beq	r2,zero,80afbc <___vfprintf_internal_r+0x1ac8>
  80ad1c:	d9002d17 	ldw	r4,180(sp)
  80ad20:	002d883a 	mov	r22,zero
  80ad24:	24c0000b 	ldhu	r19,0(r4)
  80ad28:	21000104 	addi	r4,r4,4
  80ad2c:	d9002d15 	stw	r4,180(sp)
  80ad30:	003ccb06 	br	80a060 <__alt_mem_onchip_mem+0xff802060>
  80ad34:	d8c02d17 	ldw	r3,180(sp)
  80ad38:	d9002917 	ldw	r4,164(sp)
  80ad3c:	002d883a 	mov	r22,zero
  80ad40:	18800104 	addi	r2,r3,4
  80ad44:	1cc00017 	ldw	r19,0(r3)
  80ad48:	203ebb0e 	bge	r4,zero,80a838 <__alt_mem_onchip_mem+0xff802838>
  80ad4c:	003ef106 	br	80a914 <__alt_mem_onchip_mem+0xff802914>
  80ad50:	9080040c 	andi	r2,r18,16
  80ad54:	1000921e 	bne	r2,zero,80afa0 <___vfprintf_internal_r+0x1aac>
  80ad58:	9480100c 	andi	r18,r18,64
  80ad5c:	90013926 	beq	r18,zero,80b244 <___vfprintf_internal_r+0x1d50>
  80ad60:	d9002d17 	ldw	r4,180(sp)
  80ad64:	d9402f17 	ldw	r5,188(sp)
  80ad68:	20800017 	ldw	r2,0(r4)
  80ad6c:	21000104 	addi	r4,r4,4
  80ad70:	d9002d15 	stw	r4,180(sp)
  80ad74:	1140000d 	sth	r5,0(r2)
  80ad78:	003a1606 	br	8095d4 <__alt_mem_onchip_mem+0xff8015d4>
  80ad7c:	9080100c 	andi	r2,r18,64
  80ad80:	10008026 	beq	r2,zero,80af84 <___vfprintf_internal_r+0x1a90>
  80ad84:	d8c02d17 	ldw	r3,180(sp)
  80ad88:	1cc0000f 	ldh	r19,0(r3)
  80ad8c:	18c00104 	addi	r3,r3,4
  80ad90:	d8c02d15 	stw	r3,180(sp)
  80ad94:	982dd7fa 	srai	r22,r19,31
  80ad98:	b005883a 	mov	r2,r22
  80ad9c:	003b1f06 	br	809a1c <__alt_mem_onchip_mem+0xff801a1c>
  80ada0:	9080100c 	andi	r2,r18,64
  80ada4:	d8002785 	stb	zero,158(sp)
  80ada8:	10008a1e 	bne	r2,zero,80afd4 <___vfprintf_internal_r+0x1ae0>
  80adac:	d9402d17 	ldw	r5,180(sp)
  80adb0:	d8c02917 	ldw	r3,164(sp)
  80adb4:	002d883a 	mov	r22,zero
  80adb8:	28800104 	addi	r2,r5,4
  80adbc:	2cc00017 	ldw	r19,0(r5)
  80adc0:	183e4b0e 	bge	r3,zero,80a6f0 <__alt_mem_onchip_mem+0xff8026f0>
  80adc4:	9d86b03a 	or	r3,r19,r22
  80adc8:	d8802d15 	stw	r2,180(sp)
  80adcc:	183e4c1e 	bne	r3,zero,80a700 <__alt_mem_onchip_mem+0xff802700>
  80add0:	0039883a 	mov	fp,zero
  80add4:	0005883a 	mov	r2,zero
  80add8:	003d4006 	br	80a2dc <__alt_mem_onchip_mem+0xff8022dc>
  80addc:	014020b4 	movhi	r5,130
  80ade0:	2960b884 	addi	r5,r5,-32030
  80ade4:	d9402b15 	stw	r5,172(sp)
  80ade8:	d9402b17 	ldw	r5,172(sp)
  80adec:	1c47883a 	add	r3,r3,r17
  80adf0:	10800044 	addi	r2,r2,1
  80adf4:	41400015 	stw	r5,0(r8)
  80adf8:	44400115 	stw	r17,4(r8)
  80adfc:	d8c02015 	stw	r3,128(sp)
  80ae00:	d8801f15 	stw	r2,124(sp)
  80ae04:	010001c4 	movi	r4,7
  80ae08:	20bec816 	blt	r4,r2,80a92c <__alt_mem_onchip_mem+0xff80292c>
  80ae0c:	42000204 	addi	r8,r8,8
  80ae10:	003ecd06 	br	80a948 <__alt_mem_onchip_mem+0xff802948>
  80ae14:	d9002917 	ldw	r4,164(sp)
  80ae18:	d8002785 	stb	zero,158(sp)
  80ae1c:	203d2d16 	blt	r4,zero,80a2d4 <__alt_mem_onchip_mem+0xff8022d4>
  80ae20:	00bfdfc4 	movi	r2,-129
  80ae24:	90a4703a 	and	r18,r18,r2
  80ae28:	003a9106 	br	809870 <__alt_mem_onchip_mem+0xff801870>
  80ae2c:	010020b4 	movhi	r4,130
  80ae30:	2120b884 	addi	r4,r4,-32030
  80ae34:	d9002b15 	stw	r4,172(sp)
  80ae38:	003c0c06 	br	809e6c <__alt_mem_onchip_mem+0xff801e6c>
  80ae3c:	d9002c17 	ldw	r4,176(sp)
  80ae40:	d9801e04 	addi	r6,sp,120
  80ae44:	b80b883a 	mov	r5,r23
  80ae48:	081000c0 	call	81000c <__sprint_r>
  80ae4c:	103aab1e 	bne	r2,zero,8098fc <__alt_mem_onchip_mem+0xff8018fc>
  80ae50:	d8c02017 	ldw	r3,128(sp)
  80ae54:	da000404 	addi	r8,sp,16
  80ae58:	003d4106 	br	80a360 <__alt_mem_onchip_mem+0xff802360>
  80ae5c:	d8801f17 	ldw	r2,124(sp)
  80ae60:	014020b4 	movhi	r5,130
  80ae64:	01000044 	movi	r4,1
  80ae68:	18c00044 	addi	r3,r3,1
  80ae6c:	10800044 	addi	r2,r2,1
  80ae70:	2960b804 	addi	r5,r5,-32032
  80ae74:	41000115 	stw	r4,4(r8)
  80ae78:	41400015 	stw	r5,0(r8)
  80ae7c:	d8c02015 	stw	r3,128(sp)
  80ae80:	d8801f15 	stw	r2,124(sp)
  80ae84:	010001c4 	movi	r4,7
  80ae88:	20805c16 	blt	r4,r2,80affc <___vfprintf_internal_r+0x1b08>
  80ae8c:	42000204 	addi	r8,r8,8
  80ae90:	8800041e 	bne	r17,zero,80aea4 <___vfprintf_internal_r+0x19b0>
  80ae94:	d8803317 	ldw	r2,204(sp)
  80ae98:	1000021e 	bne	r2,zero,80aea4 <___vfprintf_internal_r+0x19b0>
  80ae9c:	9080004c 	andi	r2,r18,1
  80aea0:	103c0926 	beq	r2,zero,809ec8 <__alt_mem_onchip_mem+0xff801ec8>
  80aea4:	d9003717 	ldw	r4,220(sp)
  80aea8:	d8801f17 	ldw	r2,124(sp)
  80aeac:	d9403417 	ldw	r5,208(sp)
  80aeb0:	20c7883a 	add	r3,r4,r3
  80aeb4:	10800044 	addi	r2,r2,1
  80aeb8:	41000115 	stw	r4,4(r8)
  80aebc:	41400015 	stw	r5,0(r8)
  80aec0:	d8c02015 	stw	r3,128(sp)
  80aec4:	d8801f15 	stw	r2,124(sp)
  80aec8:	010001c4 	movi	r4,7
  80aecc:	20812116 	blt	r4,r2,80b354 <___vfprintf_internal_r+0x1e60>
  80aed0:	42000204 	addi	r8,r8,8
  80aed4:	0463c83a 	sub	r17,zero,r17
  80aed8:	0440730e 	bge	zero,r17,80b0a8 <___vfprintf_internal_r+0x1bb4>
  80aedc:	05800404 	movi	r22,16
  80aee0:	b440860e 	bge	r22,r17,80b0fc <___vfprintf_internal_r+0x1c08>
  80aee4:	014020b4 	movhi	r5,130
  80aee8:	2960b884 	addi	r5,r5,-32030
  80aeec:	d9402b15 	stw	r5,172(sp)
  80aef0:	070001c4 	movi	fp,7
  80aef4:	dcc02c17 	ldw	r19,176(sp)
  80aef8:	00000306 	br	80af08 <___vfprintf_internal_r+0x1a14>
  80aefc:	42000204 	addi	r8,r8,8
  80af00:	8c7ffc04 	addi	r17,r17,-16
  80af04:	b440800e 	bge	r22,r17,80b108 <___vfprintf_internal_r+0x1c14>
  80af08:	18c00404 	addi	r3,r3,16
  80af0c:	10800044 	addi	r2,r2,1
  80af10:	45000015 	stw	r20,0(r8)
  80af14:	45800115 	stw	r22,4(r8)
  80af18:	d8c02015 	stw	r3,128(sp)
  80af1c:	d8801f15 	stw	r2,124(sp)
  80af20:	e0bff60e 	bge	fp,r2,80aefc <__alt_mem_onchip_mem+0xff802efc>
  80af24:	d9801e04 	addi	r6,sp,120
  80af28:	b80b883a 	mov	r5,r23
  80af2c:	9809883a 	mov	r4,r19
  80af30:	081000c0 	call	81000c <__sprint_r>
  80af34:	103a711e 	bne	r2,zero,8098fc <__alt_mem_onchip_mem+0xff8018fc>
  80af38:	d8c02017 	ldw	r3,128(sp)
  80af3c:	d8801f17 	ldw	r2,124(sp)
  80af40:	da000404 	addi	r8,sp,16
  80af44:	003fee06 	br	80af00 <__alt_mem_onchip_mem+0xff802f00>
  80af48:	00bfffc4 	movi	r2,-1
  80af4c:	003a6f06 	br	80990c <__alt_mem_onchip_mem+0xff80190c>
  80af50:	008011c4 	movi	r2,71
  80af54:	1440b816 	blt	r2,r17,80b238 <___vfprintf_internal_r+0x1d44>
  80af58:	040020b4 	movhi	r16,130
  80af5c:	8420aa04 	addi	r16,r16,-32088
  80af60:	00c000c4 	movi	r3,3
  80af64:	00bfdfc4 	movi	r2,-129
  80af68:	d8c02a15 	stw	r3,168(sp)
  80af6c:	90a4703a 	and	r18,r18,r2
  80af70:	df002783 	ldbu	fp,158(sp)
  80af74:	d8c02e15 	stw	r3,184(sp)
  80af78:	d8002915 	stw	zero,164(sp)
  80af7c:	d8003215 	stw	zero,200(sp)
  80af80:	003b2906 	br	809c28 <__alt_mem_onchip_mem+0xff801c28>
  80af84:	d9002d17 	ldw	r4,180(sp)
  80af88:	24c00017 	ldw	r19,0(r4)
  80af8c:	21000104 	addi	r4,r4,4
  80af90:	d9002d15 	stw	r4,180(sp)
  80af94:	982dd7fa 	srai	r22,r19,31
  80af98:	b005883a 	mov	r2,r22
  80af9c:	003a9f06 	br	809a1c <__alt_mem_onchip_mem+0xff801a1c>
  80afa0:	d9402d17 	ldw	r5,180(sp)
  80afa4:	d8c02f17 	ldw	r3,188(sp)
  80afa8:	28800017 	ldw	r2,0(r5)
  80afac:	29400104 	addi	r5,r5,4
  80afb0:	d9402d15 	stw	r5,180(sp)
  80afb4:	10c00015 	stw	r3,0(r2)
  80afb8:	00398606 	br	8095d4 <__alt_mem_onchip_mem+0xff8015d4>
  80afbc:	d9402d17 	ldw	r5,180(sp)
  80afc0:	002d883a 	mov	r22,zero
  80afc4:	2cc00017 	ldw	r19,0(r5)
  80afc8:	29400104 	addi	r5,r5,4
  80afcc:	d9402d15 	stw	r5,180(sp)
  80afd0:	003c2306 	br	80a060 <__alt_mem_onchip_mem+0xff802060>
  80afd4:	d8c02d17 	ldw	r3,180(sp)
  80afd8:	d9002917 	ldw	r4,164(sp)
  80afdc:	002d883a 	mov	r22,zero
  80afe0:	18800104 	addi	r2,r3,4
  80afe4:	1cc0000b 	ldhu	r19,0(r3)
  80afe8:	203dc10e 	bge	r4,zero,80a6f0 <__alt_mem_onchip_mem+0xff8026f0>
  80afec:	003f7506 	br	80adc4 <__alt_mem_onchip_mem+0xff802dc4>
  80aff0:	040020b4 	movhi	r16,130
  80aff4:	8420a804 	addi	r16,r16,-32096
  80aff8:	003acc06 	br	809b2c <__alt_mem_onchip_mem+0xff801b2c>
  80affc:	d9002c17 	ldw	r4,176(sp)
  80b000:	d9801e04 	addi	r6,sp,120
  80b004:	b80b883a 	mov	r5,r23
  80b008:	081000c0 	call	81000c <__sprint_r>
  80b00c:	103a3b1e 	bne	r2,zero,8098fc <__alt_mem_onchip_mem+0xff8018fc>
  80b010:	dc402617 	ldw	r17,152(sp)
  80b014:	d8c02017 	ldw	r3,128(sp)
  80b018:	da000404 	addi	r8,sp,16
  80b01c:	003f9c06 	br	80ae90 <__alt_mem_onchip_mem+0xff802e90>
  80b020:	ac400043 	ldbu	r17,1(r21)
  80b024:	94800814 	ori	r18,r18,32
  80b028:	ad400044 	addi	r21,r21,1
  80b02c:	8c403fcc 	andi	r17,r17,255
  80b030:	8c40201c 	xori	r17,r17,128
  80b034:	8c7fe004 	addi	r17,r17,-128
  80b038:	00398f06 	br	809678 <__alt_mem_onchip_mem+0xff801678>
  80b03c:	d8c02d15 	stw	r3,180(sp)
  80b040:	0039883a 	mov	fp,zero
  80b044:	003e3506 	br	80a91c <__alt_mem_onchip_mem+0xff80291c>
  80b048:	d9002c17 	ldw	r4,176(sp)
  80b04c:	d9801e04 	addi	r6,sp,120
  80b050:	b80b883a 	mov	r5,r23
  80b054:	081000c0 	call	81000c <__sprint_r>
  80b058:	103a281e 	bne	r2,zero,8098fc <__alt_mem_onchip_mem+0xff8018fc>
  80b05c:	d8c02017 	ldw	r3,128(sp)
  80b060:	da000404 	addi	r8,sp,16
  80b064:	003cd006 	br	80a3a8 <__alt_mem_onchip_mem+0xff8023a8>
  80b068:	8009883a 	mov	r4,r16
  80b06c:	da003d15 	stw	r8,244(sp)
  80b070:	080fe780 	call	80fe78 <strlen>
  80b074:	d8802e15 	stw	r2,184(sp)
  80b078:	da003d17 	ldw	r8,244(sp)
  80b07c:	103c340e 	bge	r2,zero,80a150 <__alt_mem_onchip_mem+0xff802150>
  80b080:	0005883a 	mov	r2,zero
  80b084:	003c3206 	br	80a150 <__alt_mem_onchip_mem+0xff802150>
  80b088:	d9002c17 	ldw	r4,176(sp)
  80b08c:	d9801e04 	addi	r6,sp,120
  80b090:	b80b883a 	mov	r5,r23
  80b094:	081000c0 	call	81000c <__sprint_r>
  80b098:	103a181e 	bne	r2,zero,8098fc <__alt_mem_onchip_mem+0xff8018fc>
  80b09c:	d8c02017 	ldw	r3,128(sp)
  80b0a0:	d8801f17 	ldw	r2,124(sp)
  80b0a4:	da000404 	addi	r8,sp,16
  80b0a8:	d9403317 	ldw	r5,204(sp)
  80b0ac:	10800044 	addi	r2,r2,1
  80b0b0:	44000015 	stw	r16,0(r8)
  80b0b4:	28c7883a 	add	r3,r5,r3
  80b0b8:	003b7d06 	br	809eb0 <__alt_mem_onchip_mem+0xff801eb0>
  80b0bc:	010020b4 	movhi	r4,130
  80b0c0:	2120bc84 	addi	r4,r4,-32014
  80b0c4:	d9003515 	stw	r4,212(sp)
  80b0c8:	003b1406 	br	809d1c <__alt_mem_onchip_mem+0xff801d1c>
  80b0cc:	013fffc4 	movi	r4,-1
  80b0d0:	003a3506 	br	8099a8 <__alt_mem_onchip_mem+0xff8019a8>
  80b0d4:	0023883a 	mov	r17,zero
  80b0d8:	003d9d06 	br	80a750 <__alt_mem_onchip_mem+0xff802750>
  80b0dc:	d9002c17 	ldw	r4,176(sp)
  80b0e0:	d9801e04 	addi	r6,sp,120
  80b0e4:	b80b883a 	mov	r5,r23
  80b0e8:	081000c0 	call	81000c <__sprint_r>
  80b0ec:	103a031e 	bne	r2,zero,8098fc <__alt_mem_onchip_mem+0xff8018fc>
  80b0f0:	d8c02017 	ldw	r3,128(sp)
  80b0f4:	da000404 	addi	r8,sp,16
  80b0f8:	003d9406 	br	80a74c <__alt_mem_onchip_mem+0xff80274c>
  80b0fc:	010020b4 	movhi	r4,130
  80b100:	2120b884 	addi	r4,r4,-32030
  80b104:	d9002b15 	stw	r4,172(sp)
  80b108:	d9002b17 	ldw	r4,172(sp)
  80b10c:	1c47883a 	add	r3,r3,r17
  80b110:	10800044 	addi	r2,r2,1
  80b114:	41000015 	stw	r4,0(r8)
  80b118:	44400115 	stw	r17,4(r8)
  80b11c:	d8c02015 	stw	r3,128(sp)
  80b120:	d8801f15 	stw	r2,124(sp)
  80b124:	010001c4 	movi	r4,7
  80b128:	20bfd716 	blt	r4,r2,80b088 <__alt_mem_onchip_mem+0xff803088>
  80b12c:	42000204 	addi	r8,r8,8
  80b130:	003fdd06 	br	80b0a8 <__alt_mem_onchip_mem+0xff8030a8>
  80b134:	d9002c17 	ldw	r4,176(sp)
  80b138:	d9801e04 	addi	r6,sp,120
  80b13c:	b80b883a 	mov	r5,r23
  80b140:	081000c0 	call	81000c <__sprint_r>
  80b144:	1039ed1e 	bne	r2,zero,8098fc <__alt_mem_onchip_mem+0xff8018fc>
  80b148:	d8802617 	ldw	r2,152(sp)
  80b14c:	d8c02017 	ldw	r3,128(sp)
  80b150:	da000404 	addi	r8,sp,16
  80b154:	003e1006 	br	80a998 <__alt_mem_onchip_mem+0xff802998>
  80b158:	00800044 	movi	r2,1
  80b15c:	10803fcc 	andi	r2,r2,255
  80b160:	00c00044 	movi	r3,1
  80b164:	10fa3526 	beq	r2,r3,809a3c <__alt_mem_onchip_mem+0xff801a3c>
  80b168:	00c00084 	movi	r3,2
  80b16c:	10fbcb26 	beq	r2,r3,80a09c <__alt_mem_onchip_mem+0xff80209c>
  80b170:	003a8f06 	br	809bb0 <__alt_mem_onchip_mem+0xff801bb0>
  80b174:	010020b4 	movhi	r4,130
  80b178:	2120bc84 	addi	r4,r4,-32014
  80b17c:	d9003515 	stw	r4,212(sp)
  80b180:	003b7606 	br	809f5c <__alt_mem_onchip_mem+0xff801f5c>
  80b184:	d8802917 	ldw	r2,164(sp)
  80b188:	00c00184 	movi	r3,6
  80b18c:	1880012e 	bgeu	r3,r2,80b194 <___vfprintf_internal_r+0x1ca0>
  80b190:	1805883a 	mov	r2,r3
  80b194:	d8802e15 	stw	r2,184(sp)
  80b198:	1000ef16 	blt	r2,zero,80b558 <___vfprintf_internal_r+0x2064>
  80b19c:	040020b4 	movhi	r16,130
  80b1a0:	d8802a15 	stw	r2,168(sp)
  80b1a4:	dcc02d15 	stw	r19,180(sp)
  80b1a8:	d8002915 	stw	zero,164(sp)
  80b1ac:	d8003215 	stw	zero,200(sp)
  80b1b0:	8420b604 	addi	r16,r16,-32040
  80b1b4:	0039883a 	mov	fp,zero
  80b1b8:	003aa206 	br	809c44 <__alt_mem_onchip_mem+0xff801c44>
  80b1bc:	0021883a 	mov	r16,zero
  80b1c0:	003e0706 	br	80a9e0 <__alt_mem_onchip_mem+0xff8029e0>
  80b1c4:	d9002c17 	ldw	r4,176(sp)
  80b1c8:	d9801e04 	addi	r6,sp,120
  80b1cc:	b80b883a 	mov	r5,r23
  80b1d0:	081000c0 	call	81000c <__sprint_r>
  80b1d4:	1039c91e 	bne	r2,zero,8098fc <__alt_mem_onchip_mem+0xff8018fc>
  80b1d8:	d8802617 	ldw	r2,152(sp)
  80b1dc:	d9403317 	ldw	r5,204(sp)
  80b1e0:	d8c02017 	ldw	r3,128(sp)
  80b1e4:	da000404 	addi	r8,sp,16
  80b1e8:	2885c83a 	sub	r2,r5,r2
  80b1ec:	003dfb06 	br	80a9dc <__alt_mem_onchip_mem+0xff8029dc>
  80b1f0:	9080004c 	andi	r2,r18,1
  80b1f4:	103e8f1e 	bne	r2,zero,80ac34 <__alt_mem_onchip_mem+0xff802c34>
  80b1f8:	d8802117 	ldw	r2,132(sp)
  80b1fc:	003e9e06 	br	80ac78 <__alt_mem_onchip_mem+0xff802c78>
  80b200:	1025883a 	mov	r18,r2
  80b204:	0039883a 	mov	fp,zero
  80b208:	00800084 	movi	r2,2
  80b20c:	003fd306 	br	80b15c <__alt_mem_onchip_mem+0xff80315c>
  80b210:	07000b44 	movi	fp,45
  80b214:	df002785 	stb	fp,158(sp)
  80b218:	003a4006 	br	809b1c <__alt_mem_onchip_mem+0xff801b1c>
  80b21c:	00c00b44 	movi	r3,45
  80b220:	d8c02785 	stb	r3,158(sp)
  80b224:	d8802a15 	stw	r2,168(sp)
  80b228:	dc802b17 	ldw	r18,172(sp)
  80b22c:	d8002915 	stw	zero,164(sp)
  80b230:	07000b44 	movi	fp,45
  80b234:	003a8006 	br	809c38 <__alt_mem_onchip_mem+0xff801c38>
  80b238:	040020b4 	movhi	r16,130
  80b23c:	8420ab04 	addi	r16,r16,-32084
  80b240:	003f4706 	br	80af60 <__alt_mem_onchip_mem+0xff802f60>
  80b244:	d8c02d17 	ldw	r3,180(sp)
  80b248:	d9002f17 	ldw	r4,188(sp)
  80b24c:	18800017 	ldw	r2,0(r3)
  80b250:	18c00104 	addi	r3,r3,4
  80b254:	d8c02d15 	stw	r3,180(sp)
  80b258:	11000015 	stw	r4,0(r2)
  80b25c:	0038dd06 	br	8095d4 <__alt_mem_onchip_mem+0xff8015d4>
  80b260:	dd802617 	ldw	r22,152(sp)
  80b264:	00bfff44 	movi	r2,-3
  80b268:	b0801c16 	blt	r22,r2,80b2dc <___vfprintf_internal_r+0x1de8>
  80b26c:	d9402917 	ldw	r5,164(sp)
  80b270:	2d801a16 	blt	r5,r22,80b2dc <___vfprintf_internal_r+0x1de8>
  80b274:	dd803215 	stw	r22,200(sp)
  80b278:	003e8906 	br	80aca0 <__alt_mem_onchip_mem+0xff802ca0>
  80b27c:	010020b4 	movhi	r4,130
  80b280:	2120b884 	addi	r4,r4,-32030
  80b284:	d9002b15 	stw	r4,172(sp)
  80b288:	003c9106 	br	80a4d0 <__alt_mem_onchip_mem+0xff8024d0>
  80b28c:	e005883a 	mov	r2,fp
  80b290:	003e7906 	br	80ac78 <__alt_mem_onchip_mem+0xff802c78>
  80b294:	d9402917 	ldw	r5,164(sp)
  80b298:	df002783 	ldbu	fp,158(sp)
  80b29c:	dcc02d15 	stw	r19,180(sp)
  80b2a0:	d9402a15 	stw	r5,168(sp)
  80b2a4:	d9402e15 	stw	r5,184(sp)
  80b2a8:	d8002915 	stw	zero,164(sp)
  80b2ac:	d8003215 	stw	zero,200(sp)
  80b2b0:	003a5d06 	br	809c28 <__alt_mem_onchip_mem+0xff801c28>
  80b2b4:	9080004c 	andi	r2,r18,1
  80b2b8:	0039883a 	mov	fp,zero
  80b2bc:	10000426 	beq	r2,zero,80b2d0 <___vfprintf_internal_r+0x1ddc>
  80b2c0:	00800c04 	movi	r2,48
  80b2c4:	dc001dc4 	addi	r16,sp,119
  80b2c8:	d8801dc5 	stb	r2,119(sp)
  80b2cc:	003b8006 	br	80a0d0 <__alt_mem_onchip_mem+0xff8020d0>
  80b2d0:	d8002e15 	stw	zero,184(sp)
  80b2d4:	dc001e04 	addi	r16,sp,120
  80b2d8:	003a4d06 	br	809c10 <__alt_mem_onchip_mem+0xff801c10>
  80b2dc:	8c7fff84 	addi	r17,r17,-2
  80b2e0:	b5bfffc4 	addi	r22,r22,-1
  80b2e4:	dd802615 	stw	r22,152(sp)
  80b2e8:	dc4022c5 	stb	r17,139(sp)
  80b2ec:	b000bf16 	blt	r22,zero,80b5ec <___vfprintf_internal_r+0x20f8>
  80b2f0:	00800ac4 	movi	r2,43
  80b2f4:	d8802305 	stb	r2,140(sp)
  80b2f8:	00800244 	movi	r2,9
  80b2fc:	15807016 	blt	r2,r22,80b4c0 <___vfprintf_internal_r+0x1fcc>
  80b300:	00800c04 	movi	r2,48
  80b304:	b5800c04 	addi	r22,r22,48
  80b308:	d8802345 	stb	r2,141(sp)
  80b30c:	dd802385 	stb	r22,142(sp)
  80b310:	d88023c4 	addi	r2,sp,143
  80b314:	df0022c4 	addi	fp,sp,139
  80b318:	d8c03317 	ldw	r3,204(sp)
  80b31c:	1739c83a 	sub	fp,r2,fp
  80b320:	d9003317 	ldw	r4,204(sp)
  80b324:	e0c7883a 	add	r3,fp,r3
  80b328:	df003a15 	stw	fp,232(sp)
  80b32c:	d8c02e15 	stw	r3,184(sp)
  80b330:	00800044 	movi	r2,1
  80b334:	1100b30e 	bge	r2,r4,80b604 <___vfprintf_internal_r+0x2110>
  80b338:	d8c02e17 	ldw	r3,184(sp)
  80b33c:	18c00044 	addi	r3,r3,1
  80b340:	d8c02e15 	stw	r3,184(sp)
  80b344:	1805883a 	mov	r2,r3
  80b348:	1800ac16 	blt	r3,zero,80b5fc <___vfprintf_internal_r+0x2108>
  80b34c:	d8003215 	stw	zero,200(sp)
  80b350:	003e5d06 	br	80acc8 <__alt_mem_onchip_mem+0xff802cc8>
  80b354:	d9002c17 	ldw	r4,176(sp)
  80b358:	d9801e04 	addi	r6,sp,120
  80b35c:	b80b883a 	mov	r5,r23
  80b360:	081000c0 	call	81000c <__sprint_r>
  80b364:	1039651e 	bne	r2,zero,8098fc <__alt_mem_onchip_mem+0xff8018fc>
  80b368:	dc402617 	ldw	r17,152(sp)
  80b36c:	d8c02017 	ldw	r3,128(sp)
  80b370:	d8801f17 	ldw	r2,124(sp)
  80b374:	da000404 	addi	r8,sp,16
  80b378:	003ed606 	br	80aed4 <__alt_mem_onchip_mem+0xff802ed4>
  80b37c:	582b883a 	mov	r21,r11
  80b380:	d8002915 	stw	zero,164(sp)
  80b384:	0038bd06 	br	80967c <__alt_mem_onchip_mem+0xff80167c>
  80b388:	d8802917 	ldw	r2,164(sp)
  80b38c:	103e071e 	bne	r2,zero,80abac <__alt_mem_onchip_mem+0xff802bac>
  80b390:	dc002915 	stw	r16,164(sp)
  80b394:	003e0506 	br	80abac <__alt_mem_onchip_mem+0xff802bac>
  80b398:	d9002917 	ldw	r4,164(sp)
  80b39c:	20c00044 	addi	r3,r4,1
  80b3a0:	003e0f06 	br	80abe0 <__alt_mem_onchip_mem+0xff802be0>
  80b3a4:	01400184 	movi	r5,6
  80b3a8:	d9402915 	stw	r5,164(sp)
  80b3ac:	003dff06 	br	80abac <__alt_mem_onchip_mem+0xff802bac>
  80b3b0:	d8802104 	addi	r2,sp,132
  80b3b4:	d8800315 	stw	r2,12(sp)
  80b3b8:	d8802504 	addi	r2,sp,148
  80b3bc:	d8800215 	stw	r2,8(sp)
  80b3c0:	d8802604 	addi	r2,sp,152
  80b3c4:	d8800115 	stw	r2,4(sp)
  80b3c8:	d8802917 	ldw	r2,164(sp)
  80b3cc:	d9403617 	ldw	r5,216(sp)
  80b3d0:	d9002c17 	ldw	r4,176(sp)
  80b3d4:	d8800015 	stw	r2,0(sp)
  80b3d8:	01c000c4 	movi	r7,3
  80b3dc:	980d883a 	mov	r6,r19
  80b3e0:	da003d15 	stw	r8,244(sp)
  80b3e4:	080bb180 	call	80bb18 <_dtoa_r>
  80b3e8:	d8c02917 	ldw	r3,164(sp)
  80b3ec:	da003d17 	ldw	r8,244(sp)
  80b3f0:	1021883a 	mov	r16,r2
  80b3f4:	10f9883a 	add	fp,r2,r3
  80b3f8:	81000007 	ldb	r4,0(r16)
  80b3fc:	00800c04 	movi	r2,48
  80b400:	20805e26 	beq	r4,r2,80b57c <___vfprintf_internal_r+0x2088>
  80b404:	d8c02617 	ldw	r3,152(sp)
  80b408:	e0f9883a 	add	fp,fp,r3
  80b40c:	003e0a06 	br	80ac38 <__alt_mem_onchip_mem+0xff802c38>
  80b410:	00c00b44 	movi	r3,45
  80b414:	24e0003c 	xorhi	r19,r4,32768
  80b418:	d8c02a05 	stb	r3,168(sp)
  80b41c:	003de906 	br	80abc4 <__alt_mem_onchip_mem+0xff802bc4>
  80b420:	d8c03217 	ldw	r3,200(sp)
  80b424:	00c07a0e 	bge	zero,r3,80b610 <___vfprintf_internal_r+0x211c>
  80b428:	00800044 	movi	r2,1
  80b42c:	d9003317 	ldw	r4,204(sp)
  80b430:	1105883a 	add	r2,r2,r4
  80b434:	d8802e15 	stw	r2,184(sp)
  80b438:	10004e16 	blt	r2,zero,80b574 <___vfprintf_internal_r+0x2080>
  80b43c:	044019c4 	movi	r17,103
  80b440:	003e2106 	br	80acc8 <__alt_mem_onchip_mem+0xff802cc8>
  80b444:	d9002917 	ldw	r4,164(sp)
  80b448:	d8802104 	addi	r2,sp,132
  80b44c:	d8800315 	stw	r2,12(sp)
  80b450:	d9000015 	stw	r4,0(sp)
  80b454:	d8802504 	addi	r2,sp,148
  80b458:	d9403617 	ldw	r5,216(sp)
  80b45c:	d9002c17 	ldw	r4,176(sp)
  80b460:	d8800215 	stw	r2,8(sp)
  80b464:	d8802604 	addi	r2,sp,152
  80b468:	d8800115 	stw	r2,4(sp)
  80b46c:	01c000c4 	movi	r7,3
  80b470:	980d883a 	mov	r6,r19
  80b474:	da003d15 	stw	r8,244(sp)
  80b478:	080bb180 	call	80bb18 <_dtoa_r>
  80b47c:	d8c02917 	ldw	r3,164(sp)
  80b480:	da003d17 	ldw	r8,244(sp)
  80b484:	1021883a 	mov	r16,r2
  80b488:	00801184 	movi	r2,70
  80b48c:	80f9883a 	add	fp,r16,r3
  80b490:	88bfd926 	beq	r17,r2,80b3f8 <__alt_mem_onchip_mem+0xff8033f8>
  80b494:	003de806 	br	80ac38 <__alt_mem_onchip_mem+0xff802c38>
  80b498:	d9002917 	ldw	r4,164(sp)
  80b49c:	00c04d0e 	bge	zero,r3,80b5d4 <___vfprintf_internal_r+0x20e0>
  80b4a0:	2000441e 	bne	r4,zero,80b5b4 <___vfprintf_internal_r+0x20c0>
  80b4a4:	9480004c 	andi	r18,r18,1
  80b4a8:	9000421e 	bne	r18,zero,80b5b4 <___vfprintf_internal_r+0x20c0>
  80b4ac:	1805883a 	mov	r2,r3
  80b4b0:	18007016 	blt	r3,zero,80b674 <___vfprintf_internal_r+0x2180>
  80b4b4:	d8c03217 	ldw	r3,200(sp)
  80b4b8:	d8c02e15 	stw	r3,184(sp)
  80b4bc:	003e0206 	br	80acc8 <__alt_mem_onchip_mem+0xff802cc8>
  80b4c0:	df0022c4 	addi	fp,sp,139
  80b4c4:	dc002915 	stw	r16,164(sp)
  80b4c8:	4027883a 	mov	r19,r8
  80b4cc:	e021883a 	mov	r16,fp
  80b4d0:	b009883a 	mov	r4,r22
  80b4d4:	01400284 	movi	r5,10
  80b4d8:	081353c0 	call	81353c <__modsi3>
  80b4dc:	10800c04 	addi	r2,r2,48
  80b4e0:	843fffc4 	addi	r16,r16,-1
  80b4e4:	b009883a 	mov	r4,r22
  80b4e8:	01400284 	movi	r5,10
  80b4ec:	80800005 	stb	r2,0(r16)
  80b4f0:	08134b80 	call	8134b8 <__divsi3>
  80b4f4:	102d883a 	mov	r22,r2
  80b4f8:	00800244 	movi	r2,9
  80b4fc:	15bff416 	blt	r2,r22,80b4d0 <__alt_mem_onchip_mem+0xff8034d0>
  80b500:	9811883a 	mov	r8,r19
  80b504:	b0800c04 	addi	r2,r22,48
  80b508:	8027883a 	mov	r19,r16
  80b50c:	997fffc4 	addi	r5,r19,-1
  80b510:	98bfffc5 	stb	r2,-1(r19)
  80b514:	dc002917 	ldw	r16,164(sp)
  80b518:	2f006a2e 	bgeu	r5,fp,80b6c4 <___vfprintf_internal_r+0x21d0>
  80b51c:	d9c02384 	addi	r7,sp,142
  80b520:	3ccfc83a 	sub	r7,r7,r19
  80b524:	d9002344 	addi	r4,sp,141
  80b528:	e1cf883a 	add	r7,fp,r7
  80b52c:	00000106 	br	80b534 <___vfprintf_internal_r+0x2040>
  80b530:	28800003 	ldbu	r2,0(r5)
  80b534:	20800005 	stb	r2,0(r4)
  80b538:	21000044 	addi	r4,r4,1
  80b53c:	29400044 	addi	r5,r5,1
  80b540:	393ffb1e 	bne	r7,r4,80b530 <__alt_mem_onchip_mem+0xff803530>
  80b544:	d8802304 	addi	r2,sp,140
  80b548:	14c5c83a 	sub	r2,r2,r19
  80b54c:	d8c02344 	addi	r3,sp,141
  80b550:	1885883a 	add	r2,r3,r2
  80b554:	003f7006 	br	80b318 <__alt_mem_onchip_mem+0xff803318>
  80b558:	0005883a 	mov	r2,zero
  80b55c:	003f0f06 	br	80b19c <__alt_mem_onchip_mem+0xff80319c>
  80b560:	d8c03217 	ldw	r3,200(sp)
  80b564:	18c00044 	addi	r3,r3,1
  80b568:	d8c02e15 	stw	r3,184(sp)
  80b56c:	1805883a 	mov	r2,r3
  80b570:	183fb20e 	bge	r3,zero,80b43c <__alt_mem_onchip_mem+0xff80343c>
  80b574:	0005883a 	mov	r2,zero
  80b578:	003fb006 	br	80b43c <__alt_mem_onchip_mem+0xff80343c>
  80b57c:	d9003617 	ldw	r4,216(sp)
  80b580:	000d883a 	mov	r6,zero
  80b584:	000f883a 	mov	r7,zero
  80b588:	980b883a 	mov	r5,r19
  80b58c:	d8c03c15 	stw	r3,240(sp)
  80b590:	da003d15 	stw	r8,244(sp)
  80b594:	0813f540 	call	813f54 <__eqdf2>
  80b598:	d8c03c17 	ldw	r3,240(sp)
  80b59c:	da003d17 	ldw	r8,244(sp)
  80b5a0:	103f9826 	beq	r2,zero,80b404 <__alt_mem_onchip_mem+0xff803404>
  80b5a4:	00800044 	movi	r2,1
  80b5a8:	10c7c83a 	sub	r3,r2,r3
  80b5ac:	d8c02615 	stw	r3,152(sp)
  80b5b0:	003f9506 	br	80b408 <__alt_mem_onchip_mem+0xff803408>
  80b5b4:	d9002917 	ldw	r4,164(sp)
  80b5b8:	d8c03217 	ldw	r3,200(sp)
  80b5bc:	20800044 	addi	r2,r4,1
  80b5c0:	1885883a 	add	r2,r3,r2
  80b5c4:	d8802e15 	stw	r2,184(sp)
  80b5c8:	103dbf0e 	bge	r2,zero,80acc8 <__alt_mem_onchip_mem+0xff802cc8>
  80b5cc:	0005883a 	mov	r2,zero
  80b5d0:	003dbd06 	br	80acc8 <__alt_mem_onchip_mem+0xff802cc8>
  80b5d4:	2000211e 	bne	r4,zero,80b65c <___vfprintf_internal_r+0x2168>
  80b5d8:	9480004c 	andi	r18,r18,1
  80b5dc:	90001f1e 	bne	r18,zero,80b65c <___vfprintf_internal_r+0x2168>
  80b5e0:	00800044 	movi	r2,1
  80b5e4:	d8802e15 	stw	r2,184(sp)
  80b5e8:	003db706 	br	80acc8 <__alt_mem_onchip_mem+0xff802cc8>
  80b5ec:	00800b44 	movi	r2,45
  80b5f0:	05adc83a 	sub	r22,zero,r22
  80b5f4:	d8802305 	stb	r2,140(sp)
  80b5f8:	003f3f06 	br	80b2f8 <__alt_mem_onchip_mem+0xff8032f8>
  80b5fc:	0005883a 	mov	r2,zero
  80b600:	003f5206 	br	80b34c <__alt_mem_onchip_mem+0xff80334c>
  80b604:	90a4703a 	and	r18,r18,r2
  80b608:	903f4e26 	beq	r18,zero,80b344 <__alt_mem_onchip_mem+0xff803344>
  80b60c:	003f4a06 	br	80b338 <__alt_mem_onchip_mem+0xff803338>
  80b610:	00800084 	movi	r2,2
  80b614:	10c5c83a 	sub	r2,r2,r3
  80b618:	003f8406 	br	80b42c <__alt_mem_onchip_mem+0xff80342c>
  80b61c:	d8802d17 	ldw	r2,180(sp)
  80b620:	d9002d17 	ldw	r4,180(sp)
  80b624:	ac400043 	ldbu	r17,1(r21)
  80b628:	10800017 	ldw	r2,0(r2)
  80b62c:	582b883a 	mov	r21,r11
  80b630:	d8802915 	stw	r2,164(sp)
  80b634:	20800104 	addi	r2,r4,4
  80b638:	d9002917 	ldw	r4,164(sp)
  80b63c:	d8802d15 	stw	r2,180(sp)
  80b640:	203e7a0e 	bge	r4,zero,80b02c <__alt_mem_onchip_mem+0xff80302c>
  80b644:	8c403fcc 	andi	r17,r17,255
  80b648:	00bfffc4 	movi	r2,-1
  80b64c:	8c40201c 	xori	r17,r17,128
  80b650:	d8802915 	stw	r2,164(sp)
  80b654:	8c7fe004 	addi	r17,r17,-128
  80b658:	00380706 	br	809678 <__alt_mem_onchip_mem+0xff801678>
  80b65c:	d8c02917 	ldw	r3,164(sp)
  80b660:	18c00084 	addi	r3,r3,2
  80b664:	d8c02e15 	stw	r3,184(sp)
  80b668:	1805883a 	mov	r2,r3
  80b66c:	183d960e 	bge	r3,zero,80acc8 <__alt_mem_onchip_mem+0xff802cc8>
  80b670:	003fd606 	br	80b5cc <__alt_mem_onchip_mem+0xff8035cc>
  80b674:	0005883a 	mov	r2,zero
  80b678:	003f8e06 	br	80b4b4 <__alt_mem_onchip_mem+0xff8034b4>
  80b67c:	9080004c 	andi	r2,r18,1
  80b680:	103f811e 	bne	r2,zero,80b488 <__alt_mem_onchip_mem+0xff803488>
  80b684:	d8802117 	ldw	r2,132(sp)
  80b688:	1405c83a 	sub	r2,r2,r16
  80b68c:	d8803315 	stw	r2,204(sp)
  80b690:	b47ef326 	beq	r22,r17,80b260 <__alt_mem_onchip_mem+0xff803260>
  80b694:	dd802617 	ldw	r22,152(sp)
  80b698:	003f1106 	br	80b2e0 <__alt_mem_onchip_mem+0xff8032e0>
  80b69c:	d9c02785 	stb	r7,158(sp)
  80b6a0:	00390406 	br	809ab4 <__alt_mem_onchip_mem+0xff801ab4>
  80b6a4:	d9c02785 	stb	r7,158(sp)
  80b6a8:	0038d306 	br	8099f8 <__alt_mem_onchip_mem+0xff8019f8>
  80b6ac:	d9c02785 	stb	r7,158(sp)
  80b6b0:	003a6106 	br	80a038 <__alt_mem_onchip_mem+0xff802038>
  80b6b4:	d9c02785 	stb	r7,158(sp)
  80b6b8:	003af806 	br	80a29c <__alt_mem_onchip_mem+0xff80229c>
  80b6bc:	0005883a 	mov	r2,zero
  80b6c0:	003d7e06 	br	80acbc <__alt_mem_onchip_mem+0xff802cbc>
  80b6c4:	d8802344 	addi	r2,sp,141
  80b6c8:	003f1306 	br	80b318 <__alt_mem_onchip_mem+0xff803318>
  80b6cc:	d9c02785 	stb	r7,158(sp)
  80b6d0:	00392306 	br	809b60 <__alt_mem_onchip_mem+0xff801b60>
  80b6d4:	d9c02785 	stb	r7,158(sp)
  80b6d8:	003aa906 	br	80a180 <__alt_mem_onchip_mem+0xff802180>
  80b6dc:	d9c02785 	stb	r7,158(sp)
  80b6e0:	003a3d06 	br	809fd8 <__alt_mem_onchip_mem+0xff801fd8>
  80b6e4:	d9c02785 	stb	r7,158(sp)
  80b6e8:	003aca06 	br	80a214 <__alt_mem_onchip_mem+0xff802214>

0080b6ec <__vfprintf_internal>:
  80b6ec:	008020b4 	movhi	r2,130
  80b6f0:	10a8f004 	addi	r2,r2,-23616
  80b6f4:	300f883a 	mov	r7,r6
  80b6f8:	280d883a 	mov	r6,r5
  80b6fc:	200b883a 	mov	r5,r4
  80b700:	11000017 	ldw	r4,0(r2)
  80b704:	08094f41 	jmpi	8094f4 <___vfprintf_internal_r>

0080b708 <__sbprintf>:
  80b708:	2880030b 	ldhu	r2,12(r5)
  80b70c:	2ac01917 	ldw	r11,100(r5)
  80b710:	2a80038b 	ldhu	r10,14(r5)
  80b714:	2a400717 	ldw	r9,28(r5)
  80b718:	2a000917 	ldw	r8,36(r5)
  80b71c:	defee204 	addi	sp,sp,-1144
  80b720:	00c10004 	movi	r3,1024
  80b724:	dc011a15 	stw	r16,1128(sp)
  80b728:	10bfff4c 	andi	r2,r2,65533
  80b72c:	2821883a 	mov	r16,r5
  80b730:	d8cb883a 	add	r5,sp,r3
  80b734:	dc811c15 	stw	r18,1136(sp)
  80b738:	dc411b15 	stw	r17,1132(sp)
  80b73c:	dfc11d15 	stw	ra,1140(sp)
  80b740:	2025883a 	mov	r18,r4
  80b744:	d881030d 	sth	r2,1036(sp)
  80b748:	dac11915 	stw	r11,1124(sp)
  80b74c:	da81038d 	sth	r10,1038(sp)
  80b750:	da410715 	stw	r9,1052(sp)
  80b754:	da010915 	stw	r8,1060(sp)
  80b758:	dec10015 	stw	sp,1024(sp)
  80b75c:	dec10415 	stw	sp,1040(sp)
  80b760:	d8c10215 	stw	r3,1032(sp)
  80b764:	d8c10515 	stw	r3,1044(sp)
  80b768:	d8010615 	stw	zero,1048(sp)
  80b76c:	08094f40 	call	8094f4 <___vfprintf_internal_r>
  80b770:	1023883a 	mov	r17,r2
  80b774:	10000416 	blt	r2,zero,80b788 <__sbprintf+0x80>
  80b778:	d9410004 	addi	r5,sp,1024
  80b77c:	9009883a 	mov	r4,r18
  80b780:	080d3bc0 	call	80d3bc <_fflush_r>
  80b784:	10000d1e 	bne	r2,zero,80b7bc <__sbprintf+0xb4>
  80b788:	d881030b 	ldhu	r2,1036(sp)
  80b78c:	1080100c 	andi	r2,r2,64
  80b790:	10000326 	beq	r2,zero,80b7a0 <__sbprintf+0x98>
  80b794:	8080030b 	ldhu	r2,12(r16)
  80b798:	10801014 	ori	r2,r2,64
  80b79c:	8080030d 	sth	r2,12(r16)
  80b7a0:	8805883a 	mov	r2,r17
  80b7a4:	dfc11d17 	ldw	ra,1140(sp)
  80b7a8:	dc811c17 	ldw	r18,1136(sp)
  80b7ac:	dc411b17 	ldw	r17,1132(sp)
  80b7b0:	dc011a17 	ldw	r16,1128(sp)
  80b7b4:	dec11e04 	addi	sp,sp,1144
  80b7b8:	f800283a 	ret
  80b7bc:	047fffc4 	movi	r17,-1
  80b7c0:	003ff106 	br	80b788 <__alt_mem_onchip_mem+0xff803788>

0080b7c4 <__swsetup_r>:
  80b7c4:	008020b4 	movhi	r2,130
  80b7c8:	defffd04 	addi	sp,sp,-12
  80b7cc:	10a8f004 	addi	r2,r2,-23616
  80b7d0:	dc400115 	stw	r17,4(sp)
  80b7d4:	2023883a 	mov	r17,r4
  80b7d8:	11000017 	ldw	r4,0(r2)
  80b7dc:	dc000015 	stw	r16,0(sp)
  80b7e0:	dfc00215 	stw	ra,8(sp)
  80b7e4:	2821883a 	mov	r16,r5
  80b7e8:	20000226 	beq	r4,zero,80b7f4 <__swsetup_r+0x30>
  80b7ec:	20800e17 	ldw	r2,56(r4)
  80b7f0:	10003126 	beq	r2,zero,80b8b8 <__swsetup_r+0xf4>
  80b7f4:	8080030b 	ldhu	r2,12(r16)
  80b7f8:	10c0020c 	andi	r3,r2,8
  80b7fc:	1009883a 	mov	r4,r2
  80b800:	18000f26 	beq	r3,zero,80b840 <__swsetup_r+0x7c>
  80b804:	80c00417 	ldw	r3,16(r16)
  80b808:	18001526 	beq	r3,zero,80b860 <__swsetup_r+0x9c>
  80b80c:	1100004c 	andi	r4,r2,1
  80b810:	20001c1e 	bne	r4,zero,80b884 <__swsetup_r+0xc0>
  80b814:	1080008c 	andi	r2,r2,2
  80b818:	1000291e 	bne	r2,zero,80b8c0 <__swsetup_r+0xfc>
  80b81c:	80800517 	ldw	r2,20(r16)
  80b820:	80800215 	stw	r2,8(r16)
  80b824:	18001c26 	beq	r3,zero,80b898 <__swsetup_r+0xd4>
  80b828:	0005883a 	mov	r2,zero
  80b82c:	dfc00217 	ldw	ra,8(sp)
  80b830:	dc400117 	ldw	r17,4(sp)
  80b834:	dc000017 	ldw	r16,0(sp)
  80b838:	dec00304 	addi	sp,sp,12
  80b83c:	f800283a 	ret
  80b840:	2080040c 	andi	r2,r4,16
  80b844:	10002e26 	beq	r2,zero,80b900 <__swsetup_r+0x13c>
  80b848:	2080010c 	andi	r2,r4,4
  80b84c:	10001e1e 	bne	r2,zero,80b8c8 <__swsetup_r+0x104>
  80b850:	80c00417 	ldw	r3,16(r16)
  80b854:	20800214 	ori	r2,r4,8
  80b858:	8080030d 	sth	r2,12(r16)
  80b85c:	183feb1e 	bne	r3,zero,80b80c <__alt_mem_onchip_mem+0xff80380c>
  80b860:	1100a00c 	andi	r4,r2,640
  80b864:	01408004 	movi	r5,512
  80b868:	217fe826 	beq	r4,r5,80b80c <__alt_mem_onchip_mem+0xff80380c>
  80b86c:	800b883a 	mov	r5,r16
  80b870:	8809883a 	mov	r4,r17
  80b874:	080de800 	call	80de80 <__smakebuf_r>
  80b878:	8080030b 	ldhu	r2,12(r16)
  80b87c:	80c00417 	ldw	r3,16(r16)
  80b880:	003fe206 	br	80b80c <__alt_mem_onchip_mem+0xff80380c>
  80b884:	80800517 	ldw	r2,20(r16)
  80b888:	80000215 	stw	zero,8(r16)
  80b88c:	0085c83a 	sub	r2,zero,r2
  80b890:	80800615 	stw	r2,24(r16)
  80b894:	183fe41e 	bne	r3,zero,80b828 <__alt_mem_onchip_mem+0xff803828>
  80b898:	80c0030b 	ldhu	r3,12(r16)
  80b89c:	0005883a 	mov	r2,zero
  80b8a0:	1900200c 	andi	r4,r3,128
  80b8a4:	203fe126 	beq	r4,zero,80b82c <__alt_mem_onchip_mem+0xff80382c>
  80b8a8:	18c01014 	ori	r3,r3,64
  80b8ac:	80c0030d 	sth	r3,12(r16)
  80b8b0:	00bfffc4 	movi	r2,-1
  80b8b4:	003fdd06 	br	80b82c <__alt_mem_onchip_mem+0xff80382c>
  80b8b8:	080d7980 	call	80d798 <__sinit>
  80b8bc:	003fcd06 	br	80b7f4 <__alt_mem_onchip_mem+0xff8037f4>
  80b8c0:	0005883a 	mov	r2,zero
  80b8c4:	003fd606 	br	80b820 <__alt_mem_onchip_mem+0xff803820>
  80b8c8:	81400c17 	ldw	r5,48(r16)
  80b8cc:	28000626 	beq	r5,zero,80b8e8 <__swsetup_r+0x124>
  80b8d0:	80801004 	addi	r2,r16,64
  80b8d4:	28800326 	beq	r5,r2,80b8e4 <__swsetup_r+0x120>
  80b8d8:	8809883a 	mov	r4,r17
  80b8dc:	080d90c0 	call	80d90c <_free_r>
  80b8e0:	8100030b 	ldhu	r4,12(r16)
  80b8e4:	80000c15 	stw	zero,48(r16)
  80b8e8:	80c00417 	ldw	r3,16(r16)
  80b8ec:	00bff6c4 	movi	r2,-37
  80b8f0:	1108703a 	and	r4,r2,r4
  80b8f4:	80000115 	stw	zero,4(r16)
  80b8f8:	80c00015 	stw	r3,0(r16)
  80b8fc:	003fd506 	br	80b854 <__alt_mem_onchip_mem+0xff803854>
  80b900:	00800244 	movi	r2,9
  80b904:	88800015 	stw	r2,0(r17)
  80b908:	20801014 	ori	r2,r4,64
  80b90c:	8080030d 	sth	r2,12(r16)
  80b910:	00bfffc4 	movi	r2,-1
  80b914:	003fc506 	br	80b82c <__alt_mem_onchip_mem+0xff80382c>

0080b918 <quorem>:
  80b918:	defff704 	addi	sp,sp,-36
  80b91c:	dc800215 	stw	r18,8(sp)
  80b920:	20800417 	ldw	r2,16(r4)
  80b924:	2c800417 	ldw	r18,16(r5)
  80b928:	dfc00815 	stw	ra,32(sp)
  80b92c:	ddc00715 	stw	r23,28(sp)
  80b930:	dd800615 	stw	r22,24(sp)
  80b934:	dd400515 	stw	r21,20(sp)
  80b938:	dd000415 	stw	r20,16(sp)
  80b93c:	dcc00315 	stw	r19,12(sp)
  80b940:	dc400115 	stw	r17,4(sp)
  80b944:	dc000015 	stw	r16,0(sp)
  80b948:	14807116 	blt	r2,r18,80bb10 <quorem+0x1f8>
  80b94c:	94bfffc4 	addi	r18,r18,-1
  80b950:	94ad883a 	add	r22,r18,r18
  80b954:	b5ad883a 	add	r22,r22,r22
  80b958:	2c400504 	addi	r17,r5,20
  80b95c:	8da9883a 	add	r20,r17,r22
  80b960:	25400504 	addi	r21,r4,20
  80b964:	282f883a 	mov	r23,r5
  80b968:	adad883a 	add	r22,r21,r22
  80b96c:	a1400017 	ldw	r5,0(r20)
  80b970:	2021883a 	mov	r16,r4
  80b974:	b1000017 	ldw	r4,0(r22)
  80b978:	29400044 	addi	r5,r5,1
  80b97c:	08135b00 	call	8135b0 <__udivsi3>
  80b980:	1027883a 	mov	r19,r2
  80b984:	10002c26 	beq	r2,zero,80ba38 <quorem+0x120>
  80b988:	a813883a 	mov	r9,r21
  80b98c:	880b883a 	mov	r5,r17
  80b990:	0009883a 	mov	r4,zero
  80b994:	000d883a 	mov	r6,zero
  80b998:	2a000017 	ldw	r8,0(r5)
  80b99c:	49c00017 	ldw	r7,0(r9)
  80b9a0:	29400104 	addi	r5,r5,4
  80b9a4:	40bfffcc 	andi	r2,r8,65535
  80b9a8:	14c5383a 	mul	r2,r2,r19
  80b9ac:	4010d43a 	srli	r8,r8,16
  80b9b0:	38ffffcc 	andi	r3,r7,65535
  80b9b4:	1105883a 	add	r2,r2,r4
  80b9b8:	1008d43a 	srli	r4,r2,16
  80b9bc:	44d1383a 	mul	r8,r8,r19
  80b9c0:	198d883a 	add	r6,r3,r6
  80b9c4:	10ffffcc 	andi	r3,r2,65535
  80b9c8:	30c7c83a 	sub	r3,r6,r3
  80b9cc:	380ed43a 	srli	r7,r7,16
  80b9d0:	4105883a 	add	r2,r8,r4
  80b9d4:	180dd43a 	srai	r6,r3,16
  80b9d8:	113fffcc 	andi	r4,r2,65535
  80b9dc:	390fc83a 	sub	r7,r7,r4
  80b9e0:	398d883a 	add	r6,r7,r6
  80b9e4:	300e943a 	slli	r7,r6,16
  80b9e8:	18ffffcc 	andi	r3,r3,65535
  80b9ec:	1008d43a 	srli	r4,r2,16
  80b9f0:	38ceb03a 	or	r7,r7,r3
  80b9f4:	49c00015 	stw	r7,0(r9)
  80b9f8:	300dd43a 	srai	r6,r6,16
  80b9fc:	4a400104 	addi	r9,r9,4
  80ba00:	a17fe52e 	bgeu	r20,r5,80b998 <__alt_mem_onchip_mem+0xff803998>
  80ba04:	b0800017 	ldw	r2,0(r22)
  80ba08:	10000b1e 	bne	r2,zero,80ba38 <quorem+0x120>
  80ba0c:	b0bfff04 	addi	r2,r22,-4
  80ba10:	a880082e 	bgeu	r21,r2,80ba34 <quorem+0x11c>
  80ba14:	b0ffff17 	ldw	r3,-4(r22)
  80ba18:	18000326 	beq	r3,zero,80ba28 <quorem+0x110>
  80ba1c:	00000506 	br	80ba34 <quorem+0x11c>
  80ba20:	10c00017 	ldw	r3,0(r2)
  80ba24:	1800031e 	bne	r3,zero,80ba34 <quorem+0x11c>
  80ba28:	10bfff04 	addi	r2,r2,-4
  80ba2c:	94bfffc4 	addi	r18,r18,-1
  80ba30:	a8bffb36 	bltu	r21,r2,80ba20 <__alt_mem_onchip_mem+0xff803a20>
  80ba34:	84800415 	stw	r18,16(r16)
  80ba38:	b80b883a 	mov	r5,r23
  80ba3c:	8009883a 	mov	r4,r16
  80ba40:	080f4640 	call	80f464 <__mcmp>
  80ba44:	10002616 	blt	r2,zero,80bae0 <quorem+0x1c8>
  80ba48:	9cc00044 	addi	r19,r19,1
  80ba4c:	a805883a 	mov	r2,r21
  80ba50:	000b883a 	mov	r5,zero
  80ba54:	11000017 	ldw	r4,0(r2)
  80ba58:	89800017 	ldw	r6,0(r17)
  80ba5c:	10800104 	addi	r2,r2,4
  80ba60:	20ffffcc 	andi	r3,r4,65535
  80ba64:	194b883a 	add	r5,r3,r5
  80ba68:	30ffffcc 	andi	r3,r6,65535
  80ba6c:	28c7c83a 	sub	r3,r5,r3
  80ba70:	300cd43a 	srli	r6,r6,16
  80ba74:	2008d43a 	srli	r4,r4,16
  80ba78:	180bd43a 	srai	r5,r3,16
  80ba7c:	18ffffcc 	andi	r3,r3,65535
  80ba80:	2189c83a 	sub	r4,r4,r6
  80ba84:	2149883a 	add	r4,r4,r5
  80ba88:	200c943a 	slli	r6,r4,16
  80ba8c:	8c400104 	addi	r17,r17,4
  80ba90:	200bd43a 	srai	r5,r4,16
  80ba94:	30c6b03a 	or	r3,r6,r3
  80ba98:	10ffff15 	stw	r3,-4(r2)
  80ba9c:	a47fed2e 	bgeu	r20,r17,80ba54 <__alt_mem_onchip_mem+0xff803a54>
  80baa0:	9485883a 	add	r2,r18,r18
  80baa4:	1085883a 	add	r2,r2,r2
  80baa8:	a887883a 	add	r3,r21,r2
  80baac:	18800017 	ldw	r2,0(r3)
  80bab0:	10000b1e 	bne	r2,zero,80bae0 <quorem+0x1c8>
  80bab4:	18bfff04 	addi	r2,r3,-4
  80bab8:	a880082e 	bgeu	r21,r2,80badc <quorem+0x1c4>
  80babc:	18ffff17 	ldw	r3,-4(r3)
  80bac0:	18000326 	beq	r3,zero,80bad0 <quorem+0x1b8>
  80bac4:	00000506 	br	80badc <quorem+0x1c4>
  80bac8:	10c00017 	ldw	r3,0(r2)
  80bacc:	1800031e 	bne	r3,zero,80badc <quorem+0x1c4>
  80bad0:	10bfff04 	addi	r2,r2,-4
  80bad4:	94bfffc4 	addi	r18,r18,-1
  80bad8:	a8bffb36 	bltu	r21,r2,80bac8 <__alt_mem_onchip_mem+0xff803ac8>
  80badc:	84800415 	stw	r18,16(r16)
  80bae0:	9805883a 	mov	r2,r19
  80bae4:	dfc00817 	ldw	ra,32(sp)
  80bae8:	ddc00717 	ldw	r23,28(sp)
  80baec:	dd800617 	ldw	r22,24(sp)
  80baf0:	dd400517 	ldw	r21,20(sp)
  80baf4:	dd000417 	ldw	r20,16(sp)
  80baf8:	dcc00317 	ldw	r19,12(sp)
  80bafc:	dc800217 	ldw	r18,8(sp)
  80bb00:	dc400117 	ldw	r17,4(sp)
  80bb04:	dc000017 	ldw	r16,0(sp)
  80bb08:	dec00904 	addi	sp,sp,36
  80bb0c:	f800283a 	ret
  80bb10:	0005883a 	mov	r2,zero
  80bb14:	003ff306 	br	80bae4 <__alt_mem_onchip_mem+0xff803ae4>

0080bb18 <_dtoa_r>:
  80bb18:	20801017 	ldw	r2,64(r4)
  80bb1c:	deffde04 	addi	sp,sp,-136
  80bb20:	df002015 	stw	fp,128(sp)
  80bb24:	dcc01b15 	stw	r19,108(sp)
  80bb28:	dc801a15 	stw	r18,104(sp)
  80bb2c:	dc401915 	stw	r17,100(sp)
  80bb30:	dc001815 	stw	r16,96(sp)
  80bb34:	dfc02115 	stw	ra,132(sp)
  80bb38:	ddc01f15 	stw	r23,124(sp)
  80bb3c:	dd801e15 	stw	r22,120(sp)
  80bb40:	dd401d15 	stw	r21,116(sp)
  80bb44:	dd001c15 	stw	r20,112(sp)
  80bb48:	d9c00315 	stw	r7,12(sp)
  80bb4c:	2039883a 	mov	fp,r4
  80bb50:	3023883a 	mov	r17,r6
  80bb54:	2825883a 	mov	r18,r5
  80bb58:	dc002417 	ldw	r16,144(sp)
  80bb5c:	3027883a 	mov	r19,r6
  80bb60:	10000826 	beq	r2,zero,80bb84 <_dtoa_r+0x6c>
  80bb64:	21801117 	ldw	r6,68(r4)
  80bb68:	00c00044 	movi	r3,1
  80bb6c:	100b883a 	mov	r5,r2
  80bb70:	1986983a 	sll	r3,r3,r6
  80bb74:	11800115 	stw	r6,4(r2)
  80bb78:	10c00215 	stw	r3,8(r2)
  80bb7c:	080ec440 	call	80ec44 <_Bfree>
  80bb80:	e0001015 	stw	zero,64(fp)
  80bb84:	88002e16 	blt	r17,zero,80bc40 <_dtoa_r+0x128>
  80bb88:	80000015 	stw	zero,0(r16)
  80bb8c:	889ffc2c 	andhi	r2,r17,32752
  80bb90:	00dffc34 	movhi	r3,32752
  80bb94:	10c01c26 	beq	r2,r3,80bc08 <_dtoa_r+0xf0>
  80bb98:	000d883a 	mov	r6,zero
  80bb9c:	000f883a 	mov	r7,zero
  80bba0:	9009883a 	mov	r4,r18
  80bba4:	980b883a 	mov	r5,r19
  80bba8:	0813f540 	call	813f54 <__eqdf2>
  80bbac:	10002b1e 	bne	r2,zero,80bc5c <_dtoa_r+0x144>
  80bbb0:	d9c02317 	ldw	r7,140(sp)
  80bbb4:	00800044 	movi	r2,1
  80bbb8:	38800015 	stw	r2,0(r7)
  80bbbc:	d8802517 	ldw	r2,148(sp)
  80bbc0:	10019e26 	beq	r2,zero,80c23c <_dtoa_r+0x724>
  80bbc4:	d8c02517 	ldw	r3,148(sp)
  80bbc8:	008020b4 	movhi	r2,130
  80bbcc:	10a0b844 	addi	r2,r2,-32031
  80bbd0:	18800015 	stw	r2,0(r3)
  80bbd4:	10bfffc4 	addi	r2,r2,-1
  80bbd8:	dfc02117 	ldw	ra,132(sp)
  80bbdc:	df002017 	ldw	fp,128(sp)
  80bbe0:	ddc01f17 	ldw	r23,124(sp)
  80bbe4:	dd801e17 	ldw	r22,120(sp)
  80bbe8:	dd401d17 	ldw	r21,116(sp)
  80bbec:	dd001c17 	ldw	r20,112(sp)
  80bbf0:	dcc01b17 	ldw	r19,108(sp)
  80bbf4:	dc801a17 	ldw	r18,104(sp)
  80bbf8:	dc401917 	ldw	r17,100(sp)
  80bbfc:	dc001817 	ldw	r16,96(sp)
  80bc00:	dec02204 	addi	sp,sp,136
  80bc04:	f800283a 	ret
  80bc08:	d8c02317 	ldw	r3,140(sp)
  80bc0c:	0089c3c4 	movi	r2,9999
  80bc10:	18800015 	stw	r2,0(r3)
  80bc14:	90017726 	beq	r18,zero,80c1f4 <_dtoa_r+0x6dc>
  80bc18:	008020b4 	movhi	r2,130
  80bc1c:	10a0c404 	addi	r2,r2,-31984
  80bc20:	d9002517 	ldw	r4,148(sp)
  80bc24:	203fec26 	beq	r4,zero,80bbd8 <__alt_mem_onchip_mem+0xff803bd8>
  80bc28:	10c000c7 	ldb	r3,3(r2)
  80bc2c:	1801781e 	bne	r3,zero,80c210 <_dtoa_r+0x6f8>
  80bc30:	10c000c4 	addi	r3,r2,3
  80bc34:	d9802517 	ldw	r6,148(sp)
  80bc38:	30c00015 	stw	r3,0(r6)
  80bc3c:	003fe606 	br	80bbd8 <__alt_mem_onchip_mem+0xff803bd8>
  80bc40:	04e00034 	movhi	r19,32768
  80bc44:	9cffffc4 	addi	r19,r19,-1
  80bc48:	00800044 	movi	r2,1
  80bc4c:	8ce6703a 	and	r19,r17,r19
  80bc50:	80800015 	stw	r2,0(r16)
  80bc54:	9823883a 	mov	r17,r19
  80bc58:	003fcc06 	br	80bb8c <__alt_mem_onchip_mem+0xff803b8c>
  80bc5c:	d8800204 	addi	r2,sp,8
  80bc60:	d8800015 	stw	r2,0(sp)
  80bc64:	d9c00104 	addi	r7,sp,4
  80bc68:	900b883a 	mov	r5,r18
  80bc6c:	980d883a 	mov	r6,r19
  80bc70:	e009883a 	mov	r4,fp
  80bc74:	8820d53a 	srli	r16,r17,20
  80bc78:	080f8300 	call	80f830 <__d2b>
  80bc7c:	d8800915 	stw	r2,36(sp)
  80bc80:	8001651e 	bne	r16,zero,80c218 <_dtoa_r+0x700>
  80bc84:	dd800217 	ldw	r22,8(sp)
  80bc88:	dc000117 	ldw	r16,4(sp)
  80bc8c:	00800804 	movi	r2,32
  80bc90:	b421883a 	add	r16,r22,r16
  80bc94:	80c10c84 	addi	r3,r16,1074
  80bc98:	10c2d10e 	bge	r2,r3,80c7e0 <_dtoa_r+0xcc8>
  80bc9c:	00801004 	movi	r2,64
  80bca0:	81010484 	addi	r4,r16,1042
  80bca4:	10c7c83a 	sub	r3,r2,r3
  80bca8:	9108d83a 	srl	r4,r18,r4
  80bcac:	88e2983a 	sll	r17,r17,r3
  80bcb0:	2448b03a 	or	r4,r4,r17
  80bcb4:	080937c0 	call	80937c <__floatunsidf>
  80bcb8:	017f8434 	movhi	r5,65040
  80bcbc:	01800044 	movi	r6,1
  80bcc0:	1009883a 	mov	r4,r2
  80bcc4:	194b883a 	add	r5,r3,r5
  80bcc8:	843fffc4 	addi	r16,r16,-1
  80bccc:	d9801115 	stw	r6,68(sp)
  80bcd0:	000d883a 	mov	r6,zero
  80bcd4:	01cffe34 	movhi	r7,16376
  80bcd8:	08089a40 	call	8089a4 <__subdf3>
  80bcdc:	0198dbf4 	movhi	r6,25455
  80bce0:	01cff4f4 	movhi	r7,16339
  80bce4:	3190d844 	addi	r6,r6,17249
  80bce8:	39e1e9c4 	addi	r7,r7,-30809
  80bcec:	1009883a 	mov	r4,r2
  80bcf0:	180b883a 	mov	r5,r3
  80bcf4:	080828c0 	call	80828c <__muldf3>
  80bcf8:	01a2d874 	movhi	r6,35681
  80bcfc:	01cff1f4 	movhi	r7,16327
  80bd00:	31b22cc4 	addi	r6,r6,-14157
  80bd04:	39e28a04 	addi	r7,r7,-30168
  80bd08:	180b883a 	mov	r5,r3
  80bd0c:	1009883a 	mov	r4,r2
  80bd10:	08078100 	call	807810 <__adddf3>
  80bd14:	8009883a 	mov	r4,r16
  80bd18:	1029883a 	mov	r20,r2
  80bd1c:	1823883a 	mov	r17,r3
  80bd20:	08092a00 	call	8092a0 <__floatsidf>
  80bd24:	019427f4 	movhi	r6,20639
  80bd28:	01cff4f4 	movhi	r7,16339
  80bd2c:	319e7ec4 	addi	r6,r6,31227
  80bd30:	39d104c4 	addi	r7,r7,17427
  80bd34:	1009883a 	mov	r4,r2
  80bd38:	180b883a 	mov	r5,r3
  80bd3c:	080828c0 	call	80828c <__muldf3>
  80bd40:	100d883a 	mov	r6,r2
  80bd44:	180f883a 	mov	r7,r3
  80bd48:	a009883a 	mov	r4,r20
  80bd4c:	880b883a 	mov	r5,r17
  80bd50:	08078100 	call	807810 <__adddf3>
  80bd54:	1009883a 	mov	r4,r2
  80bd58:	180b883a 	mov	r5,r3
  80bd5c:	1029883a 	mov	r20,r2
  80bd60:	1823883a 	mov	r17,r3
  80bd64:	0813fdc0 	call	813fdc <__fixdfsi>
  80bd68:	000d883a 	mov	r6,zero
  80bd6c:	000f883a 	mov	r7,zero
  80bd70:	a009883a 	mov	r4,r20
  80bd74:	880b883a 	mov	r5,r17
  80bd78:	d8800515 	stw	r2,20(sp)
  80bd7c:	08081980 	call	808198 <__ledf2>
  80bd80:	10028716 	blt	r2,zero,80c7a0 <_dtoa_r+0xc88>
  80bd84:	d8c00517 	ldw	r3,20(sp)
  80bd88:	00800584 	movi	r2,22
  80bd8c:	10c27536 	bltu	r2,r3,80c764 <_dtoa_r+0xc4c>
  80bd90:	180490fa 	slli	r2,r3,3
  80bd94:	00c020b4 	movhi	r3,130
  80bd98:	18e0e004 	addi	r3,r3,-31872
  80bd9c:	1885883a 	add	r2,r3,r2
  80bda0:	11000017 	ldw	r4,0(r2)
  80bda4:	11400117 	ldw	r5,4(r2)
  80bda8:	900d883a 	mov	r6,r18
  80bdac:	980f883a 	mov	r7,r19
  80bdb0:	08080bc0 	call	8080bc <__gedf2>
  80bdb4:	00828d0e 	bge	zero,r2,80c7ec <_dtoa_r+0xcd4>
  80bdb8:	d9000517 	ldw	r4,20(sp)
  80bdbc:	d8000e15 	stw	zero,56(sp)
  80bdc0:	213fffc4 	addi	r4,r4,-1
  80bdc4:	d9000515 	stw	r4,20(sp)
  80bdc8:	b42dc83a 	sub	r22,r22,r16
  80bdcc:	b5bfffc4 	addi	r22,r22,-1
  80bdd0:	b0026f16 	blt	r22,zero,80c790 <_dtoa_r+0xc78>
  80bdd4:	d8000815 	stw	zero,32(sp)
  80bdd8:	d9c00517 	ldw	r7,20(sp)
  80bddc:	38026416 	blt	r7,zero,80c770 <_dtoa_r+0xc58>
  80bde0:	b1ed883a 	add	r22,r22,r7
  80bde4:	d9c00d15 	stw	r7,52(sp)
  80bde8:	d8000a15 	stw	zero,40(sp)
  80bdec:	d9800317 	ldw	r6,12(sp)
  80bdf0:	00800244 	movi	r2,9
  80bdf4:	11811436 	bltu	r2,r6,80c248 <_dtoa_r+0x730>
  80bdf8:	00800144 	movi	r2,5
  80bdfc:	1184e10e 	bge	r2,r6,80d184 <_dtoa_r+0x166c>
  80be00:	31bfff04 	addi	r6,r6,-4
  80be04:	d9800315 	stw	r6,12(sp)
  80be08:	0023883a 	mov	r17,zero
  80be0c:	d9800317 	ldw	r6,12(sp)
  80be10:	008000c4 	movi	r2,3
  80be14:	30836726 	beq	r6,r2,80cbb4 <_dtoa_r+0x109c>
  80be18:	1183410e 	bge	r2,r6,80cb20 <_dtoa_r+0x1008>
  80be1c:	d9c00317 	ldw	r7,12(sp)
  80be20:	00800104 	movi	r2,4
  80be24:	38827c26 	beq	r7,r2,80c818 <_dtoa_r+0xd00>
  80be28:	00800144 	movi	r2,5
  80be2c:	3884c41e 	bne	r7,r2,80d140 <_dtoa_r+0x1628>
  80be30:	00800044 	movi	r2,1
  80be34:	d8800b15 	stw	r2,44(sp)
  80be38:	d8c00517 	ldw	r3,20(sp)
  80be3c:	d9002217 	ldw	r4,136(sp)
  80be40:	1907883a 	add	r3,r3,r4
  80be44:	19800044 	addi	r6,r3,1
  80be48:	d8c00c15 	stw	r3,48(sp)
  80be4c:	d9800615 	stw	r6,24(sp)
  80be50:	0183a40e 	bge	zero,r6,80cce4 <_dtoa_r+0x11cc>
  80be54:	d9800617 	ldw	r6,24(sp)
  80be58:	3021883a 	mov	r16,r6
  80be5c:	e0001115 	stw	zero,68(fp)
  80be60:	008005c4 	movi	r2,23
  80be64:	1184c92e 	bgeu	r2,r6,80d18c <_dtoa_r+0x1674>
  80be68:	00c00044 	movi	r3,1
  80be6c:	00800104 	movi	r2,4
  80be70:	1085883a 	add	r2,r2,r2
  80be74:	11000504 	addi	r4,r2,20
  80be78:	180b883a 	mov	r5,r3
  80be7c:	18c00044 	addi	r3,r3,1
  80be80:	313ffb2e 	bgeu	r6,r4,80be70 <__alt_mem_onchip_mem+0xff803e70>
  80be84:	e1401115 	stw	r5,68(fp)
  80be88:	e009883a 	mov	r4,fp
  80be8c:	080eb9c0 	call	80eb9c <_Balloc>
  80be90:	d8800715 	stw	r2,28(sp)
  80be94:	e0801015 	stw	r2,64(fp)
  80be98:	00800384 	movi	r2,14
  80be9c:	1400f736 	bltu	r2,r16,80c27c <_dtoa_r+0x764>
  80bea0:	8800f626 	beq	r17,zero,80c27c <_dtoa_r+0x764>
  80bea4:	d9c00517 	ldw	r7,20(sp)
  80bea8:	01c39a0e 	bge	zero,r7,80cd14 <_dtoa_r+0x11fc>
  80beac:	388003cc 	andi	r2,r7,15
  80beb0:	100490fa 	slli	r2,r2,3
  80beb4:	382bd13a 	srai	r21,r7,4
  80beb8:	00c020b4 	movhi	r3,130
  80bebc:	18e0e004 	addi	r3,r3,-31872
  80bec0:	1885883a 	add	r2,r3,r2
  80bec4:	a8c0040c 	andi	r3,r21,16
  80bec8:	12400017 	ldw	r9,0(r2)
  80becc:	12000117 	ldw	r8,4(r2)
  80bed0:	18037926 	beq	r3,zero,80ccb8 <_dtoa_r+0x11a0>
  80bed4:	008020b4 	movhi	r2,130
  80bed8:	10a0d604 	addi	r2,r2,-31912
  80bedc:	11800817 	ldw	r6,32(r2)
  80bee0:	11c00917 	ldw	r7,36(r2)
  80bee4:	9009883a 	mov	r4,r18
  80bee8:	980b883a 	mov	r5,r19
  80beec:	da001715 	stw	r8,92(sp)
  80bef0:	da401615 	stw	r9,88(sp)
  80bef4:	081366c0 	call	81366c <__divdf3>
  80bef8:	da001717 	ldw	r8,92(sp)
  80befc:	da401617 	ldw	r9,88(sp)
  80bf00:	ad4003cc 	andi	r21,r21,15
  80bf04:	040000c4 	movi	r16,3
  80bf08:	1023883a 	mov	r17,r2
  80bf0c:	1829883a 	mov	r20,r3
  80bf10:	a8001126 	beq	r21,zero,80bf58 <_dtoa_r+0x440>
  80bf14:	05c020b4 	movhi	r23,130
  80bf18:	bde0d604 	addi	r23,r23,-31912
  80bf1c:	4805883a 	mov	r2,r9
  80bf20:	4007883a 	mov	r3,r8
  80bf24:	a980004c 	andi	r6,r21,1
  80bf28:	1009883a 	mov	r4,r2
  80bf2c:	a82bd07a 	srai	r21,r21,1
  80bf30:	180b883a 	mov	r5,r3
  80bf34:	30000426 	beq	r6,zero,80bf48 <_dtoa_r+0x430>
  80bf38:	b9800017 	ldw	r6,0(r23)
  80bf3c:	b9c00117 	ldw	r7,4(r23)
  80bf40:	84000044 	addi	r16,r16,1
  80bf44:	080828c0 	call	80828c <__muldf3>
  80bf48:	bdc00204 	addi	r23,r23,8
  80bf4c:	a83ff51e 	bne	r21,zero,80bf24 <__alt_mem_onchip_mem+0xff803f24>
  80bf50:	1013883a 	mov	r9,r2
  80bf54:	1811883a 	mov	r8,r3
  80bf58:	480d883a 	mov	r6,r9
  80bf5c:	400f883a 	mov	r7,r8
  80bf60:	8809883a 	mov	r4,r17
  80bf64:	a00b883a 	mov	r5,r20
  80bf68:	081366c0 	call	81366c <__divdf3>
  80bf6c:	d8800f15 	stw	r2,60(sp)
  80bf70:	d8c01015 	stw	r3,64(sp)
  80bf74:	d8c00e17 	ldw	r3,56(sp)
  80bf78:	18000626 	beq	r3,zero,80bf94 <_dtoa_r+0x47c>
  80bf7c:	d9000f17 	ldw	r4,60(sp)
  80bf80:	d9401017 	ldw	r5,64(sp)
  80bf84:	000d883a 	mov	r6,zero
  80bf88:	01cffc34 	movhi	r7,16368
  80bf8c:	08081980 	call	808198 <__ledf2>
  80bf90:	10040b16 	blt	r2,zero,80cfc0 <_dtoa_r+0x14a8>
  80bf94:	8009883a 	mov	r4,r16
  80bf98:	08092a00 	call	8092a0 <__floatsidf>
  80bf9c:	d9800f17 	ldw	r6,60(sp)
  80bfa0:	d9c01017 	ldw	r7,64(sp)
  80bfa4:	1009883a 	mov	r4,r2
  80bfa8:	180b883a 	mov	r5,r3
  80bfac:	080828c0 	call	80828c <__muldf3>
  80bfb0:	000d883a 	mov	r6,zero
  80bfb4:	01d00734 	movhi	r7,16412
  80bfb8:	1009883a 	mov	r4,r2
  80bfbc:	180b883a 	mov	r5,r3
  80bfc0:	08078100 	call	807810 <__adddf3>
  80bfc4:	1021883a 	mov	r16,r2
  80bfc8:	d8800617 	ldw	r2,24(sp)
  80bfcc:	047f3034 	movhi	r17,64704
  80bfd0:	1c63883a 	add	r17,r3,r17
  80bfd4:	10031826 	beq	r2,zero,80cc38 <_dtoa_r+0x1120>
  80bfd8:	d8c00517 	ldw	r3,20(sp)
  80bfdc:	db000617 	ldw	r12,24(sp)
  80bfe0:	d8c01315 	stw	r3,76(sp)
  80bfe4:	d9000b17 	ldw	r4,44(sp)
  80bfe8:	20038f26 	beq	r4,zero,80ce28 <_dtoa_r+0x1310>
  80bfec:	60bfffc4 	addi	r2,r12,-1
  80bff0:	100490fa 	slli	r2,r2,3
  80bff4:	00c020b4 	movhi	r3,130
  80bff8:	18e0e004 	addi	r3,r3,-31872
  80bffc:	1885883a 	add	r2,r3,r2
  80c000:	11800017 	ldw	r6,0(r2)
  80c004:	11c00117 	ldw	r7,4(r2)
  80c008:	d8800717 	ldw	r2,28(sp)
  80c00c:	0009883a 	mov	r4,zero
  80c010:	014ff834 	movhi	r5,16352
  80c014:	db001615 	stw	r12,88(sp)
  80c018:	15c00044 	addi	r23,r2,1
  80c01c:	081366c0 	call	81366c <__divdf3>
  80c020:	800d883a 	mov	r6,r16
  80c024:	880f883a 	mov	r7,r17
  80c028:	1009883a 	mov	r4,r2
  80c02c:	180b883a 	mov	r5,r3
  80c030:	08089a40 	call	8089a4 <__subdf3>
  80c034:	d9401017 	ldw	r5,64(sp)
  80c038:	d9000f17 	ldw	r4,60(sp)
  80c03c:	102b883a 	mov	r21,r2
  80c040:	d8c01215 	stw	r3,72(sp)
  80c044:	0813fdc0 	call	813fdc <__fixdfsi>
  80c048:	1009883a 	mov	r4,r2
  80c04c:	1029883a 	mov	r20,r2
  80c050:	08092a00 	call	8092a0 <__floatsidf>
  80c054:	d9000f17 	ldw	r4,60(sp)
  80c058:	d9401017 	ldw	r5,64(sp)
  80c05c:	100d883a 	mov	r6,r2
  80c060:	180f883a 	mov	r7,r3
  80c064:	08089a40 	call	8089a4 <__subdf3>
  80c068:	1823883a 	mov	r17,r3
  80c06c:	d8c00717 	ldw	r3,28(sp)
  80c070:	d9401217 	ldw	r5,72(sp)
  80c074:	a2000c04 	addi	r8,r20,48
  80c078:	1021883a 	mov	r16,r2
  80c07c:	1a000005 	stb	r8,0(r3)
  80c080:	800d883a 	mov	r6,r16
  80c084:	880f883a 	mov	r7,r17
  80c088:	a809883a 	mov	r4,r21
  80c08c:	4029883a 	mov	r20,r8
  80c090:	08080bc0 	call	8080bc <__gedf2>
  80c094:	00841d16 	blt	zero,r2,80d10c <_dtoa_r+0x15f4>
  80c098:	800d883a 	mov	r6,r16
  80c09c:	880f883a 	mov	r7,r17
  80c0a0:	0009883a 	mov	r4,zero
  80c0a4:	014ffc34 	movhi	r5,16368
  80c0a8:	08089a40 	call	8089a4 <__subdf3>
  80c0ac:	d9401217 	ldw	r5,72(sp)
  80c0b0:	100d883a 	mov	r6,r2
  80c0b4:	180f883a 	mov	r7,r3
  80c0b8:	a809883a 	mov	r4,r21
  80c0bc:	08080bc0 	call	8080bc <__gedf2>
  80c0c0:	db001617 	ldw	r12,88(sp)
  80c0c4:	00840e16 	blt	zero,r2,80d100 <_dtoa_r+0x15e8>
  80c0c8:	00800044 	movi	r2,1
  80c0cc:	13006b0e 	bge	r2,r12,80c27c <_dtoa_r+0x764>
  80c0d0:	d9000717 	ldw	r4,28(sp)
  80c0d4:	dd800f15 	stw	r22,60(sp)
  80c0d8:	dcc01015 	stw	r19,64(sp)
  80c0dc:	2319883a 	add	r12,r4,r12
  80c0e0:	dcc01217 	ldw	r19,72(sp)
  80c0e4:	602d883a 	mov	r22,r12
  80c0e8:	dc801215 	stw	r18,72(sp)
  80c0ec:	b825883a 	mov	r18,r23
  80c0f0:	00000906 	br	80c118 <_dtoa_r+0x600>
  80c0f4:	08089a40 	call	8089a4 <__subdf3>
  80c0f8:	a80d883a 	mov	r6,r21
  80c0fc:	980f883a 	mov	r7,r19
  80c100:	1009883a 	mov	r4,r2
  80c104:	180b883a 	mov	r5,r3
  80c108:	08081980 	call	808198 <__ledf2>
  80c10c:	1003e816 	blt	r2,zero,80d0b0 <_dtoa_r+0x1598>
  80c110:	b825883a 	mov	r18,r23
  80c114:	bd83e926 	beq	r23,r22,80d0bc <_dtoa_r+0x15a4>
  80c118:	a809883a 	mov	r4,r21
  80c11c:	980b883a 	mov	r5,r19
  80c120:	000d883a 	mov	r6,zero
  80c124:	01d00934 	movhi	r7,16420
  80c128:	080828c0 	call	80828c <__muldf3>
  80c12c:	000d883a 	mov	r6,zero
  80c130:	01d00934 	movhi	r7,16420
  80c134:	8009883a 	mov	r4,r16
  80c138:	880b883a 	mov	r5,r17
  80c13c:	102b883a 	mov	r21,r2
  80c140:	1827883a 	mov	r19,r3
  80c144:	080828c0 	call	80828c <__muldf3>
  80c148:	180b883a 	mov	r5,r3
  80c14c:	1009883a 	mov	r4,r2
  80c150:	1821883a 	mov	r16,r3
  80c154:	1023883a 	mov	r17,r2
  80c158:	0813fdc0 	call	813fdc <__fixdfsi>
  80c15c:	1009883a 	mov	r4,r2
  80c160:	1029883a 	mov	r20,r2
  80c164:	08092a00 	call	8092a0 <__floatsidf>
  80c168:	8809883a 	mov	r4,r17
  80c16c:	800b883a 	mov	r5,r16
  80c170:	100d883a 	mov	r6,r2
  80c174:	180f883a 	mov	r7,r3
  80c178:	08089a40 	call	8089a4 <__subdf3>
  80c17c:	a5000c04 	addi	r20,r20,48
  80c180:	a80d883a 	mov	r6,r21
  80c184:	980f883a 	mov	r7,r19
  80c188:	1009883a 	mov	r4,r2
  80c18c:	180b883a 	mov	r5,r3
  80c190:	95000005 	stb	r20,0(r18)
  80c194:	1021883a 	mov	r16,r2
  80c198:	1823883a 	mov	r17,r3
  80c19c:	08081980 	call	808198 <__ledf2>
  80c1a0:	bdc00044 	addi	r23,r23,1
  80c1a4:	800d883a 	mov	r6,r16
  80c1a8:	880f883a 	mov	r7,r17
  80c1ac:	0009883a 	mov	r4,zero
  80c1b0:	014ffc34 	movhi	r5,16368
  80c1b4:	103fcf0e 	bge	r2,zero,80c0f4 <__alt_mem_onchip_mem+0xff8040f4>
  80c1b8:	d8c01317 	ldw	r3,76(sp)
  80c1bc:	d8c00515 	stw	r3,20(sp)
  80c1c0:	d9400917 	ldw	r5,36(sp)
  80c1c4:	e009883a 	mov	r4,fp
  80c1c8:	080ec440 	call	80ec44 <_Bfree>
  80c1cc:	d9000517 	ldw	r4,20(sp)
  80c1d0:	d9802317 	ldw	r6,140(sp)
  80c1d4:	d9c02517 	ldw	r7,148(sp)
  80c1d8:	b8000005 	stb	zero,0(r23)
  80c1dc:	20800044 	addi	r2,r4,1
  80c1e0:	30800015 	stw	r2,0(r6)
  80c1e4:	3802aa26 	beq	r7,zero,80cc90 <_dtoa_r+0x1178>
  80c1e8:	3dc00015 	stw	r23,0(r7)
  80c1ec:	d8800717 	ldw	r2,28(sp)
  80c1f0:	003e7906 	br	80bbd8 <__alt_mem_onchip_mem+0xff803bd8>
  80c1f4:	00800434 	movhi	r2,16
  80c1f8:	10bfffc4 	addi	r2,r2,-1
  80c1fc:	88a2703a 	and	r17,r17,r2
  80c200:	883e851e 	bne	r17,zero,80bc18 <__alt_mem_onchip_mem+0xff803c18>
  80c204:	008020b4 	movhi	r2,130
  80c208:	10a0c104 	addi	r2,r2,-31996
  80c20c:	003e8406 	br	80bc20 <__alt_mem_onchip_mem+0xff803c20>
  80c210:	10c00204 	addi	r3,r2,8
  80c214:	003e8706 	br	80bc34 <__alt_mem_onchip_mem+0xff803c34>
  80c218:	01400434 	movhi	r5,16
  80c21c:	297fffc4 	addi	r5,r5,-1
  80c220:	994a703a 	and	r5,r19,r5
  80c224:	9009883a 	mov	r4,r18
  80c228:	843f0044 	addi	r16,r16,-1023
  80c22c:	294ffc34 	orhi	r5,r5,16368
  80c230:	dd800217 	ldw	r22,8(sp)
  80c234:	d8001115 	stw	zero,68(sp)
  80c238:	003ea506 	br	80bcd0 <__alt_mem_onchip_mem+0xff803cd0>
  80c23c:	008020b4 	movhi	r2,130
  80c240:	10a0b804 	addi	r2,r2,-32032
  80c244:	003e6406 	br	80bbd8 <__alt_mem_onchip_mem+0xff803bd8>
  80c248:	e0001115 	stw	zero,68(fp)
  80c24c:	000b883a 	mov	r5,zero
  80c250:	e009883a 	mov	r4,fp
  80c254:	080eb9c0 	call	80eb9c <_Balloc>
  80c258:	01bfffc4 	movi	r6,-1
  80c25c:	01c00044 	movi	r7,1
  80c260:	d8800715 	stw	r2,28(sp)
  80c264:	d9800c15 	stw	r6,48(sp)
  80c268:	e0801015 	stw	r2,64(fp)
  80c26c:	d8000315 	stw	zero,12(sp)
  80c270:	d9c00b15 	stw	r7,44(sp)
  80c274:	d9800615 	stw	r6,24(sp)
  80c278:	d8002215 	stw	zero,136(sp)
  80c27c:	d8800117 	ldw	r2,4(sp)
  80c280:	10008916 	blt	r2,zero,80c4a8 <_dtoa_r+0x990>
  80c284:	d9000517 	ldw	r4,20(sp)
  80c288:	00c00384 	movi	r3,14
  80c28c:	19008616 	blt	r3,r4,80c4a8 <_dtoa_r+0x990>
  80c290:	200490fa 	slli	r2,r4,3
  80c294:	00c020b4 	movhi	r3,130
  80c298:	d9802217 	ldw	r6,136(sp)
  80c29c:	18e0e004 	addi	r3,r3,-31872
  80c2a0:	1885883a 	add	r2,r3,r2
  80c2a4:	14000017 	ldw	r16,0(r2)
  80c2a8:	14400117 	ldw	r17,4(r2)
  80c2ac:	30016316 	blt	r6,zero,80c83c <_dtoa_r+0xd24>
  80c2b0:	800d883a 	mov	r6,r16
  80c2b4:	880f883a 	mov	r7,r17
  80c2b8:	9009883a 	mov	r4,r18
  80c2bc:	980b883a 	mov	r5,r19
  80c2c0:	081366c0 	call	81366c <__divdf3>
  80c2c4:	180b883a 	mov	r5,r3
  80c2c8:	1009883a 	mov	r4,r2
  80c2cc:	0813fdc0 	call	813fdc <__fixdfsi>
  80c2d0:	1009883a 	mov	r4,r2
  80c2d4:	102b883a 	mov	r21,r2
  80c2d8:	08092a00 	call	8092a0 <__floatsidf>
  80c2dc:	800d883a 	mov	r6,r16
  80c2e0:	880f883a 	mov	r7,r17
  80c2e4:	1009883a 	mov	r4,r2
  80c2e8:	180b883a 	mov	r5,r3
  80c2ec:	080828c0 	call	80828c <__muldf3>
  80c2f0:	100d883a 	mov	r6,r2
  80c2f4:	180f883a 	mov	r7,r3
  80c2f8:	9009883a 	mov	r4,r18
  80c2fc:	980b883a 	mov	r5,r19
  80c300:	08089a40 	call	8089a4 <__subdf3>
  80c304:	d9c00717 	ldw	r7,28(sp)
  80c308:	1009883a 	mov	r4,r2
  80c30c:	a8800c04 	addi	r2,r21,48
  80c310:	38800005 	stb	r2,0(r7)
  80c314:	3dc00044 	addi	r23,r7,1
  80c318:	d9c00617 	ldw	r7,24(sp)
  80c31c:	01800044 	movi	r6,1
  80c320:	180b883a 	mov	r5,r3
  80c324:	2005883a 	mov	r2,r4
  80c328:	39803826 	beq	r7,r6,80c40c <_dtoa_r+0x8f4>
  80c32c:	000d883a 	mov	r6,zero
  80c330:	01d00934 	movhi	r7,16420
  80c334:	080828c0 	call	80828c <__muldf3>
  80c338:	000d883a 	mov	r6,zero
  80c33c:	000f883a 	mov	r7,zero
  80c340:	1009883a 	mov	r4,r2
  80c344:	180b883a 	mov	r5,r3
  80c348:	1025883a 	mov	r18,r2
  80c34c:	1827883a 	mov	r19,r3
  80c350:	0813f540 	call	813f54 <__eqdf2>
  80c354:	103f9a26 	beq	r2,zero,80c1c0 <__alt_mem_onchip_mem+0xff8041c0>
  80c358:	d9c00617 	ldw	r7,24(sp)
  80c35c:	d8c00717 	ldw	r3,28(sp)
  80c360:	b829883a 	mov	r20,r23
  80c364:	38bfffc4 	addi	r2,r7,-1
  80c368:	18ad883a 	add	r22,r3,r2
  80c36c:	00000a06 	br	80c398 <_dtoa_r+0x880>
  80c370:	080828c0 	call	80828c <__muldf3>
  80c374:	000d883a 	mov	r6,zero
  80c378:	000f883a 	mov	r7,zero
  80c37c:	1009883a 	mov	r4,r2
  80c380:	180b883a 	mov	r5,r3
  80c384:	1025883a 	mov	r18,r2
  80c388:	1827883a 	mov	r19,r3
  80c38c:	b829883a 	mov	r20,r23
  80c390:	0813f540 	call	813f54 <__eqdf2>
  80c394:	103f8a26 	beq	r2,zero,80c1c0 <__alt_mem_onchip_mem+0xff8041c0>
  80c398:	800d883a 	mov	r6,r16
  80c39c:	880f883a 	mov	r7,r17
  80c3a0:	9009883a 	mov	r4,r18
  80c3a4:	980b883a 	mov	r5,r19
  80c3a8:	081366c0 	call	81366c <__divdf3>
  80c3ac:	180b883a 	mov	r5,r3
  80c3b0:	1009883a 	mov	r4,r2
  80c3b4:	0813fdc0 	call	813fdc <__fixdfsi>
  80c3b8:	1009883a 	mov	r4,r2
  80c3bc:	102b883a 	mov	r21,r2
  80c3c0:	08092a00 	call	8092a0 <__floatsidf>
  80c3c4:	800d883a 	mov	r6,r16
  80c3c8:	880f883a 	mov	r7,r17
  80c3cc:	1009883a 	mov	r4,r2
  80c3d0:	180b883a 	mov	r5,r3
  80c3d4:	080828c0 	call	80828c <__muldf3>
  80c3d8:	100d883a 	mov	r6,r2
  80c3dc:	180f883a 	mov	r7,r3
  80c3e0:	9009883a 	mov	r4,r18
  80c3e4:	980b883a 	mov	r5,r19
  80c3e8:	08089a40 	call	8089a4 <__subdf3>
  80c3ec:	aa000c04 	addi	r8,r21,48
  80c3f0:	a2000005 	stb	r8,0(r20)
  80c3f4:	000d883a 	mov	r6,zero
  80c3f8:	01d00934 	movhi	r7,16420
  80c3fc:	1009883a 	mov	r4,r2
  80c400:	180b883a 	mov	r5,r3
  80c404:	a5c00044 	addi	r23,r20,1
  80c408:	b53fd91e 	bne	r22,r20,80c370 <__alt_mem_onchip_mem+0xff804370>
  80c40c:	100d883a 	mov	r6,r2
  80c410:	180f883a 	mov	r7,r3
  80c414:	1009883a 	mov	r4,r2
  80c418:	180b883a 	mov	r5,r3
  80c41c:	08078100 	call	807810 <__adddf3>
  80c420:	100d883a 	mov	r6,r2
  80c424:	180f883a 	mov	r7,r3
  80c428:	8009883a 	mov	r4,r16
  80c42c:	880b883a 	mov	r5,r17
  80c430:	1027883a 	mov	r19,r2
  80c434:	1825883a 	mov	r18,r3
  80c438:	08081980 	call	808198 <__ledf2>
  80c43c:	10000816 	blt	r2,zero,80c460 <_dtoa_r+0x948>
  80c440:	980d883a 	mov	r6,r19
  80c444:	900f883a 	mov	r7,r18
  80c448:	8009883a 	mov	r4,r16
  80c44c:	880b883a 	mov	r5,r17
  80c450:	0813f540 	call	813f54 <__eqdf2>
  80c454:	103f5a1e 	bne	r2,zero,80c1c0 <__alt_mem_onchip_mem+0xff8041c0>
  80c458:	ad40004c 	andi	r21,r21,1
  80c45c:	a83f5826 	beq	r21,zero,80c1c0 <__alt_mem_onchip_mem+0xff8041c0>
  80c460:	bd3fffc3 	ldbu	r20,-1(r23)
  80c464:	b8bfffc4 	addi	r2,r23,-1
  80c468:	1007883a 	mov	r3,r2
  80c46c:	01400e44 	movi	r5,57
  80c470:	d9800717 	ldw	r6,28(sp)
  80c474:	00000506 	br	80c48c <_dtoa_r+0x974>
  80c478:	18ffffc4 	addi	r3,r3,-1
  80c47c:	11824726 	beq	r2,r6,80cd9c <_dtoa_r+0x1284>
  80c480:	1d000003 	ldbu	r20,0(r3)
  80c484:	102f883a 	mov	r23,r2
  80c488:	10bfffc4 	addi	r2,r2,-1
  80c48c:	a1003fcc 	andi	r4,r20,255
  80c490:	2100201c 	xori	r4,r4,128
  80c494:	213fe004 	addi	r4,r4,-128
  80c498:	217ff726 	beq	r4,r5,80c478 <__alt_mem_onchip_mem+0xff804478>
  80c49c:	a2000044 	addi	r8,r20,1
  80c4a0:	12000005 	stb	r8,0(r2)
  80c4a4:	003f4606 	br	80c1c0 <__alt_mem_onchip_mem+0xff8041c0>
  80c4a8:	d9000b17 	ldw	r4,44(sp)
  80c4ac:	2000c826 	beq	r4,zero,80c7d0 <_dtoa_r+0xcb8>
  80c4b0:	d9800317 	ldw	r6,12(sp)
  80c4b4:	00c00044 	movi	r3,1
  80c4b8:	1980f90e 	bge	r3,r6,80c8a0 <_dtoa_r+0xd88>
  80c4bc:	d8800617 	ldw	r2,24(sp)
  80c4c0:	d8c00a17 	ldw	r3,40(sp)
  80c4c4:	157fffc4 	addi	r21,r2,-1
  80c4c8:	1d41f316 	blt	r3,r21,80cc98 <_dtoa_r+0x1180>
  80c4cc:	1d6bc83a 	sub	r21,r3,r21
  80c4d0:	d9c00617 	ldw	r7,24(sp)
  80c4d4:	3802aa16 	blt	r7,zero,80cf80 <_dtoa_r+0x1468>
  80c4d8:	dd000817 	ldw	r20,32(sp)
  80c4dc:	d8800617 	ldw	r2,24(sp)
  80c4e0:	d8c00817 	ldw	r3,32(sp)
  80c4e4:	01400044 	movi	r5,1
  80c4e8:	e009883a 	mov	r4,fp
  80c4ec:	1887883a 	add	r3,r3,r2
  80c4f0:	d8c00815 	stw	r3,32(sp)
  80c4f4:	b0ad883a 	add	r22,r22,r2
  80c4f8:	080efa80 	call	80efa8 <__i2b>
  80c4fc:	1023883a 	mov	r17,r2
  80c500:	a0000826 	beq	r20,zero,80c524 <_dtoa_r+0xa0c>
  80c504:	0580070e 	bge	zero,r22,80c524 <_dtoa_r+0xa0c>
  80c508:	a005883a 	mov	r2,r20
  80c50c:	b500b916 	blt	r22,r20,80c7f4 <_dtoa_r+0xcdc>
  80c510:	d9000817 	ldw	r4,32(sp)
  80c514:	a0a9c83a 	sub	r20,r20,r2
  80c518:	b0adc83a 	sub	r22,r22,r2
  80c51c:	2089c83a 	sub	r4,r4,r2
  80c520:	d9000815 	stw	r4,32(sp)
  80c524:	d9800a17 	ldw	r6,40(sp)
  80c528:	0181810e 	bge	zero,r6,80cb30 <_dtoa_r+0x1018>
  80c52c:	d9c00b17 	ldw	r7,44(sp)
  80c530:	3800b326 	beq	r7,zero,80c800 <_dtoa_r+0xce8>
  80c534:	a800b226 	beq	r21,zero,80c800 <_dtoa_r+0xce8>
  80c538:	880b883a 	mov	r5,r17
  80c53c:	a80d883a 	mov	r6,r21
  80c540:	e009883a 	mov	r4,fp
  80c544:	080f1dc0 	call	80f1dc <__pow5mult>
  80c548:	d9800917 	ldw	r6,36(sp)
  80c54c:	100b883a 	mov	r5,r2
  80c550:	e009883a 	mov	r4,fp
  80c554:	1023883a 	mov	r17,r2
  80c558:	080efe40 	call	80efe4 <__multiply>
  80c55c:	1021883a 	mov	r16,r2
  80c560:	d8800a17 	ldw	r2,40(sp)
  80c564:	d9400917 	ldw	r5,36(sp)
  80c568:	e009883a 	mov	r4,fp
  80c56c:	1545c83a 	sub	r2,r2,r21
  80c570:	d8800a15 	stw	r2,40(sp)
  80c574:	080ec440 	call	80ec44 <_Bfree>
  80c578:	d8c00a17 	ldw	r3,40(sp)
  80c57c:	18009f1e 	bne	r3,zero,80c7fc <_dtoa_r+0xce4>
  80c580:	05c00044 	movi	r23,1
  80c584:	e009883a 	mov	r4,fp
  80c588:	b80b883a 	mov	r5,r23
  80c58c:	080efa80 	call	80efa8 <__i2b>
  80c590:	d9000d17 	ldw	r4,52(sp)
  80c594:	102b883a 	mov	r21,r2
  80c598:	2000ce26 	beq	r4,zero,80c8d4 <_dtoa_r+0xdbc>
  80c59c:	200d883a 	mov	r6,r4
  80c5a0:	100b883a 	mov	r5,r2
  80c5a4:	e009883a 	mov	r4,fp
  80c5a8:	080f1dc0 	call	80f1dc <__pow5mult>
  80c5ac:	d9800317 	ldw	r6,12(sp)
  80c5b0:	102b883a 	mov	r21,r2
  80c5b4:	b981810e 	bge	r23,r6,80cbbc <_dtoa_r+0x10a4>
  80c5b8:	0027883a 	mov	r19,zero
  80c5bc:	a8800417 	ldw	r2,16(r21)
  80c5c0:	05c00804 	movi	r23,32
  80c5c4:	10800104 	addi	r2,r2,4
  80c5c8:	1085883a 	add	r2,r2,r2
  80c5cc:	1085883a 	add	r2,r2,r2
  80c5d0:	a885883a 	add	r2,r21,r2
  80c5d4:	11000017 	ldw	r4,0(r2)
  80c5d8:	080ee900 	call	80ee90 <__hi0bits>
  80c5dc:	b885c83a 	sub	r2,r23,r2
  80c5e0:	1585883a 	add	r2,r2,r22
  80c5e4:	108007cc 	andi	r2,r2,31
  80c5e8:	1000b326 	beq	r2,zero,80c8b8 <_dtoa_r+0xda0>
  80c5ec:	00c00804 	movi	r3,32
  80c5f0:	1887c83a 	sub	r3,r3,r2
  80c5f4:	01000104 	movi	r4,4
  80c5f8:	20c2cd0e 	bge	r4,r3,80d130 <_dtoa_r+0x1618>
  80c5fc:	00c00704 	movi	r3,28
  80c600:	1885c83a 	sub	r2,r3,r2
  80c604:	d8c00817 	ldw	r3,32(sp)
  80c608:	a0a9883a 	add	r20,r20,r2
  80c60c:	b0ad883a 	add	r22,r22,r2
  80c610:	1887883a 	add	r3,r3,r2
  80c614:	d8c00815 	stw	r3,32(sp)
  80c618:	d9800817 	ldw	r6,32(sp)
  80c61c:	0180040e 	bge	zero,r6,80c630 <_dtoa_r+0xb18>
  80c620:	800b883a 	mov	r5,r16
  80c624:	e009883a 	mov	r4,fp
  80c628:	080f31c0 	call	80f31c <__lshift>
  80c62c:	1021883a 	mov	r16,r2
  80c630:	0580050e 	bge	zero,r22,80c648 <_dtoa_r+0xb30>
  80c634:	a80b883a 	mov	r5,r21
  80c638:	b00d883a 	mov	r6,r22
  80c63c:	e009883a 	mov	r4,fp
  80c640:	080f31c0 	call	80f31c <__lshift>
  80c644:	102b883a 	mov	r21,r2
  80c648:	d9c00e17 	ldw	r7,56(sp)
  80c64c:	3801211e 	bne	r7,zero,80cad4 <_dtoa_r+0xfbc>
  80c650:	d9800617 	ldw	r6,24(sp)
  80c654:	0181380e 	bge	zero,r6,80cb38 <_dtoa_r+0x1020>
  80c658:	d8c00b17 	ldw	r3,44(sp)
  80c65c:	1800ab1e 	bne	r3,zero,80c90c <_dtoa_r+0xdf4>
  80c660:	dc800717 	ldw	r18,28(sp)
  80c664:	dcc00617 	ldw	r19,24(sp)
  80c668:	9029883a 	mov	r20,r18
  80c66c:	00000206 	br	80c678 <_dtoa_r+0xb60>
  80c670:	080ec6c0 	call	80ec6c <__multadd>
  80c674:	1021883a 	mov	r16,r2
  80c678:	a80b883a 	mov	r5,r21
  80c67c:	8009883a 	mov	r4,r16
  80c680:	080b9180 	call	80b918 <quorem>
  80c684:	10800c04 	addi	r2,r2,48
  80c688:	90800005 	stb	r2,0(r18)
  80c68c:	94800044 	addi	r18,r18,1
  80c690:	9507c83a 	sub	r3,r18,r20
  80c694:	000f883a 	mov	r7,zero
  80c698:	01800284 	movi	r6,10
  80c69c:	800b883a 	mov	r5,r16
  80c6a0:	e009883a 	mov	r4,fp
  80c6a4:	1cfff216 	blt	r3,r19,80c670 <__alt_mem_onchip_mem+0xff804670>
  80c6a8:	1011883a 	mov	r8,r2
  80c6ac:	d8800617 	ldw	r2,24(sp)
  80c6b0:	0082370e 	bge	zero,r2,80cf90 <_dtoa_r+0x1478>
  80c6b4:	d9000717 	ldw	r4,28(sp)
  80c6b8:	0025883a 	mov	r18,zero
  80c6bc:	20af883a 	add	r23,r4,r2
  80c6c0:	01800044 	movi	r6,1
  80c6c4:	800b883a 	mov	r5,r16
  80c6c8:	e009883a 	mov	r4,fp
  80c6cc:	da001715 	stw	r8,92(sp)
  80c6d0:	080f31c0 	call	80f31c <__lshift>
  80c6d4:	a80b883a 	mov	r5,r21
  80c6d8:	1009883a 	mov	r4,r2
  80c6dc:	d8800915 	stw	r2,36(sp)
  80c6e0:	080f4640 	call	80f464 <__mcmp>
  80c6e4:	da001717 	ldw	r8,92(sp)
  80c6e8:	0081800e 	bge	zero,r2,80ccec <_dtoa_r+0x11d4>
  80c6ec:	b93fffc3 	ldbu	r4,-1(r23)
  80c6f0:	b8bfffc4 	addi	r2,r23,-1
  80c6f4:	1007883a 	mov	r3,r2
  80c6f8:	01800e44 	movi	r6,57
  80c6fc:	d9c00717 	ldw	r7,28(sp)
  80c700:	00000506 	br	80c718 <_dtoa_r+0xc00>
  80c704:	18ffffc4 	addi	r3,r3,-1
  80c708:	11c12326 	beq	r2,r7,80cb98 <_dtoa_r+0x1080>
  80c70c:	19000003 	ldbu	r4,0(r3)
  80c710:	102f883a 	mov	r23,r2
  80c714:	10bfffc4 	addi	r2,r2,-1
  80c718:	21403fcc 	andi	r5,r4,255
  80c71c:	2940201c 	xori	r5,r5,128
  80c720:	297fe004 	addi	r5,r5,-128
  80c724:	29bff726 	beq	r5,r6,80c704 <__alt_mem_onchip_mem+0xff804704>
  80c728:	21000044 	addi	r4,r4,1
  80c72c:	11000005 	stb	r4,0(r2)
  80c730:	a80b883a 	mov	r5,r21
  80c734:	e009883a 	mov	r4,fp
  80c738:	080ec440 	call	80ec44 <_Bfree>
  80c73c:	883ea026 	beq	r17,zero,80c1c0 <__alt_mem_onchip_mem+0xff8041c0>
  80c740:	90000426 	beq	r18,zero,80c754 <_dtoa_r+0xc3c>
  80c744:	94400326 	beq	r18,r17,80c754 <_dtoa_r+0xc3c>
  80c748:	900b883a 	mov	r5,r18
  80c74c:	e009883a 	mov	r4,fp
  80c750:	080ec440 	call	80ec44 <_Bfree>
  80c754:	880b883a 	mov	r5,r17
  80c758:	e009883a 	mov	r4,fp
  80c75c:	080ec440 	call	80ec44 <_Bfree>
  80c760:	003e9706 	br	80c1c0 <__alt_mem_onchip_mem+0xff8041c0>
  80c764:	01800044 	movi	r6,1
  80c768:	d9800e15 	stw	r6,56(sp)
  80c76c:	003d9606 	br	80bdc8 <__alt_mem_onchip_mem+0xff803dc8>
  80c770:	d8800817 	ldw	r2,32(sp)
  80c774:	d8c00517 	ldw	r3,20(sp)
  80c778:	d8000d15 	stw	zero,52(sp)
  80c77c:	10c5c83a 	sub	r2,r2,r3
  80c780:	00c9c83a 	sub	r4,zero,r3
  80c784:	d8800815 	stw	r2,32(sp)
  80c788:	d9000a15 	stw	r4,40(sp)
  80c78c:	003d9706 	br	80bdec <__alt_mem_onchip_mem+0xff803dec>
  80c790:	05adc83a 	sub	r22,zero,r22
  80c794:	dd800815 	stw	r22,32(sp)
  80c798:	002d883a 	mov	r22,zero
  80c79c:	003d8e06 	br	80bdd8 <__alt_mem_onchip_mem+0xff803dd8>
  80c7a0:	d9000517 	ldw	r4,20(sp)
  80c7a4:	08092a00 	call	8092a0 <__floatsidf>
  80c7a8:	100d883a 	mov	r6,r2
  80c7ac:	180f883a 	mov	r7,r3
  80c7b0:	a009883a 	mov	r4,r20
  80c7b4:	880b883a 	mov	r5,r17
  80c7b8:	0813f540 	call	813f54 <__eqdf2>
  80c7bc:	103d7126 	beq	r2,zero,80bd84 <__alt_mem_onchip_mem+0xff803d84>
  80c7c0:	d9c00517 	ldw	r7,20(sp)
  80c7c4:	39ffffc4 	addi	r7,r7,-1
  80c7c8:	d9c00515 	stw	r7,20(sp)
  80c7cc:	003d6d06 	br	80bd84 <__alt_mem_onchip_mem+0xff803d84>
  80c7d0:	dd400a17 	ldw	r21,40(sp)
  80c7d4:	dd000817 	ldw	r20,32(sp)
  80c7d8:	0023883a 	mov	r17,zero
  80c7dc:	003f4806 	br	80c500 <__alt_mem_onchip_mem+0xff804500>
  80c7e0:	10e3c83a 	sub	r17,r2,r3
  80c7e4:	9448983a 	sll	r4,r18,r17
  80c7e8:	003d3206 	br	80bcb4 <__alt_mem_onchip_mem+0xff803cb4>
  80c7ec:	d8000e15 	stw	zero,56(sp)
  80c7f0:	003d7506 	br	80bdc8 <__alt_mem_onchip_mem+0xff803dc8>
  80c7f4:	b005883a 	mov	r2,r22
  80c7f8:	003f4506 	br	80c510 <__alt_mem_onchip_mem+0xff804510>
  80c7fc:	dc000915 	stw	r16,36(sp)
  80c800:	d9800a17 	ldw	r6,40(sp)
  80c804:	d9400917 	ldw	r5,36(sp)
  80c808:	e009883a 	mov	r4,fp
  80c80c:	080f1dc0 	call	80f1dc <__pow5mult>
  80c810:	1021883a 	mov	r16,r2
  80c814:	003f5a06 	br	80c580 <__alt_mem_onchip_mem+0xff804580>
  80c818:	01c00044 	movi	r7,1
  80c81c:	d9c00b15 	stw	r7,44(sp)
  80c820:	d8802217 	ldw	r2,136(sp)
  80c824:	0081280e 	bge	zero,r2,80ccc8 <_dtoa_r+0x11b0>
  80c828:	100d883a 	mov	r6,r2
  80c82c:	1021883a 	mov	r16,r2
  80c830:	d8800c15 	stw	r2,48(sp)
  80c834:	d8800615 	stw	r2,24(sp)
  80c838:	003d8806 	br	80be5c <__alt_mem_onchip_mem+0xff803e5c>
  80c83c:	d8800617 	ldw	r2,24(sp)
  80c840:	00be9b16 	blt	zero,r2,80c2b0 <__alt_mem_onchip_mem+0xff8042b0>
  80c844:	10010f1e 	bne	r2,zero,80cc84 <_dtoa_r+0x116c>
  80c848:	880b883a 	mov	r5,r17
  80c84c:	000d883a 	mov	r6,zero
  80c850:	01d00534 	movhi	r7,16404
  80c854:	8009883a 	mov	r4,r16
  80c858:	080828c0 	call	80828c <__muldf3>
  80c85c:	900d883a 	mov	r6,r18
  80c860:	980f883a 	mov	r7,r19
  80c864:	1009883a 	mov	r4,r2
  80c868:	180b883a 	mov	r5,r3
  80c86c:	08080bc0 	call	8080bc <__gedf2>
  80c870:	002b883a 	mov	r21,zero
  80c874:	0023883a 	mov	r17,zero
  80c878:	1000bf16 	blt	r2,zero,80cb78 <_dtoa_r+0x1060>
  80c87c:	d9802217 	ldw	r6,136(sp)
  80c880:	ddc00717 	ldw	r23,28(sp)
  80c884:	018c303a 	nor	r6,zero,r6
  80c888:	d9800515 	stw	r6,20(sp)
  80c88c:	a80b883a 	mov	r5,r21
  80c890:	e009883a 	mov	r4,fp
  80c894:	080ec440 	call	80ec44 <_Bfree>
  80c898:	883e4926 	beq	r17,zero,80c1c0 <__alt_mem_onchip_mem+0xff8041c0>
  80c89c:	003fad06 	br	80c754 <__alt_mem_onchip_mem+0xff804754>
  80c8a0:	d9c01117 	ldw	r7,68(sp)
  80c8a4:	3801bc26 	beq	r7,zero,80cf98 <_dtoa_r+0x1480>
  80c8a8:	10810cc4 	addi	r2,r2,1075
  80c8ac:	dd400a17 	ldw	r21,40(sp)
  80c8b0:	dd000817 	ldw	r20,32(sp)
  80c8b4:	003f0a06 	br	80c4e0 <__alt_mem_onchip_mem+0xff8044e0>
  80c8b8:	00800704 	movi	r2,28
  80c8bc:	d9000817 	ldw	r4,32(sp)
  80c8c0:	a0a9883a 	add	r20,r20,r2
  80c8c4:	b0ad883a 	add	r22,r22,r2
  80c8c8:	2089883a 	add	r4,r4,r2
  80c8cc:	d9000815 	stw	r4,32(sp)
  80c8d0:	003f5106 	br	80c618 <__alt_mem_onchip_mem+0xff804618>
  80c8d4:	d8c00317 	ldw	r3,12(sp)
  80c8d8:	b8c1fc0e 	bge	r23,r3,80d0cc <_dtoa_r+0x15b4>
  80c8dc:	0027883a 	mov	r19,zero
  80c8e0:	b805883a 	mov	r2,r23
  80c8e4:	003f3e06 	br	80c5e0 <__alt_mem_onchip_mem+0xff8045e0>
  80c8e8:	880b883a 	mov	r5,r17
  80c8ec:	e009883a 	mov	r4,fp
  80c8f0:	000f883a 	mov	r7,zero
  80c8f4:	01800284 	movi	r6,10
  80c8f8:	080ec6c0 	call	80ec6c <__multadd>
  80c8fc:	d9000c17 	ldw	r4,48(sp)
  80c900:	1023883a 	mov	r17,r2
  80c904:	0102040e 	bge	zero,r4,80d118 <_dtoa_r+0x1600>
  80c908:	d9000615 	stw	r4,24(sp)
  80c90c:	0500050e 	bge	zero,r20,80c924 <_dtoa_r+0xe0c>
  80c910:	880b883a 	mov	r5,r17
  80c914:	a00d883a 	mov	r6,r20
  80c918:	e009883a 	mov	r4,fp
  80c91c:	080f31c0 	call	80f31c <__lshift>
  80c920:	1023883a 	mov	r17,r2
  80c924:	9801241e 	bne	r19,zero,80cdb8 <_dtoa_r+0x12a0>
  80c928:	8829883a 	mov	r20,r17
  80c92c:	d9000617 	ldw	r4,24(sp)
  80c930:	dcc00717 	ldw	r19,28(sp)
  80c934:	9480004c 	andi	r18,r18,1
  80c938:	20bfffc4 	addi	r2,r4,-1
  80c93c:	9885883a 	add	r2,r19,r2
  80c940:	d8800415 	stw	r2,16(sp)
  80c944:	dc800615 	stw	r18,24(sp)
  80c948:	a80b883a 	mov	r5,r21
  80c94c:	8009883a 	mov	r4,r16
  80c950:	080b9180 	call	80b918 <quorem>
  80c954:	880b883a 	mov	r5,r17
  80c958:	8009883a 	mov	r4,r16
  80c95c:	102f883a 	mov	r23,r2
  80c960:	080f4640 	call	80f464 <__mcmp>
  80c964:	a80b883a 	mov	r5,r21
  80c968:	a00d883a 	mov	r6,r20
  80c96c:	e009883a 	mov	r4,fp
  80c970:	102d883a 	mov	r22,r2
  80c974:	080f4c40 	call	80f4c4 <__mdiff>
  80c978:	1007883a 	mov	r3,r2
  80c97c:	10800317 	ldw	r2,12(r2)
  80c980:	bc800c04 	addi	r18,r23,48
  80c984:	180b883a 	mov	r5,r3
  80c988:	10004e1e 	bne	r2,zero,80cac4 <_dtoa_r+0xfac>
  80c98c:	8009883a 	mov	r4,r16
  80c990:	d8c01615 	stw	r3,88(sp)
  80c994:	080f4640 	call	80f464 <__mcmp>
  80c998:	d8c01617 	ldw	r3,88(sp)
  80c99c:	e009883a 	mov	r4,fp
  80c9a0:	d8801615 	stw	r2,88(sp)
  80c9a4:	180b883a 	mov	r5,r3
  80c9a8:	080ec440 	call	80ec44 <_Bfree>
  80c9ac:	d8801617 	ldw	r2,88(sp)
  80c9b0:	1000041e 	bne	r2,zero,80c9c4 <_dtoa_r+0xeac>
  80c9b4:	d9800317 	ldw	r6,12(sp)
  80c9b8:	3000021e 	bne	r6,zero,80c9c4 <_dtoa_r+0xeac>
  80c9bc:	d8c00617 	ldw	r3,24(sp)
  80c9c0:	18003726 	beq	r3,zero,80caa0 <_dtoa_r+0xf88>
  80c9c4:	b0002016 	blt	r22,zero,80ca48 <_dtoa_r+0xf30>
  80c9c8:	b000041e 	bne	r22,zero,80c9dc <_dtoa_r+0xec4>
  80c9cc:	d9000317 	ldw	r4,12(sp)
  80c9d0:	2000021e 	bne	r4,zero,80c9dc <_dtoa_r+0xec4>
  80c9d4:	d8c00617 	ldw	r3,24(sp)
  80c9d8:	18001b26 	beq	r3,zero,80ca48 <_dtoa_r+0xf30>
  80c9dc:	00810716 	blt	zero,r2,80cdfc <_dtoa_r+0x12e4>
  80c9e0:	d8c00417 	ldw	r3,16(sp)
  80c9e4:	9d800044 	addi	r22,r19,1
  80c9e8:	9c800005 	stb	r18,0(r19)
  80c9ec:	b02f883a 	mov	r23,r22
  80c9f0:	98c10626 	beq	r19,r3,80ce0c <_dtoa_r+0x12f4>
  80c9f4:	800b883a 	mov	r5,r16
  80c9f8:	000f883a 	mov	r7,zero
  80c9fc:	01800284 	movi	r6,10
  80ca00:	e009883a 	mov	r4,fp
  80ca04:	080ec6c0 	call	80ec6c <__multadd>
  80ca08:	1021883a 	mov	r16,r2
  80ca0c:	000f883a 	mov	r7,zero
  80ca10:	01800284 	movi	r6,10
  80ca14:	880b883a 	mov	r5,r17
  80ca18:	e009883a 	mov	r4,fp
  80ca1c:	8d002526 	beq	r17,r20,80cab4 <_dtoa_r+0xf9c>
  80ca20:	080ec6c0 	call	80ec6c <__multadd>
  80ca24:	a00b883a 	mov	r5,r20
  80ca28:	000f883a 	mov	r7,zero
  80ca2c:	01800284 	movi	r6,10
  80ca30:	e009883a 	mov	r4,fp
  80ca34:	1023883a 	mov	r17,r2
  80ca38:	080ec6c0 	call	80ec6c <__multadd>
  80ca3c:	1029883a 	mov	r20,r2
  80ca40:	b027883a 	mov	r19,r22
  80ca44:	003fc006 	br	80c948 <__alt_mem_onchip_mem+0xff804948>
  80ca48:	9011883a 	mov	r8,r18
  80ca4c:	00800e0e 	bge	zero,r2,80ca88 <_dtoa_r+0xf70>
  80ca50:	800b883a 	mov	r5,r16
  80ca54:	01800044 	movi	r6,1
  80ca58:	e009883a 	mov	r4,fp
  80ca5c:	da001715 	stw	r8,92(sp)
  80ca60:	080f31c0 	call	80f31c <__lshift>
  80ca64:	a80b883a 	mov	r5,r21
  80ca68:	1009883a 	mov	r4,r2
  80ca6c:	1021883a 	mov	r16,r2
  80ca70:	080f4640 	call	80f464 <__mcmp>
  80ca74:	da001717 	ldw	r8,92(sp)
  80ca78:	0081960e 	bge	zero,r2,80d0d4 <_dtoa_r+0x15bc>
  80ca7c:	00800e44 	movi	r2,57
  80ca80:	40817026 	beq	r8,r2,80d044 <_dtoa_r+0x152c>
  80ca84:	ba000c44 	addi	r8,r23,49
  80ca88:	8825883a 	mov	r18,r17
  80ca8c:	9dc00044 	addi	r23,r19,1
  80ca90:	9a000005 	stb	r8,0(r19)
  80ca94:	a023883a 	mov	r17,r20
  80ca98:	dc000915 	stw	r16,36(sp)
  80ca9c:	003f2406 	br	80c730 <__alt_mem_onchip_mem+0xff804730>
  80caa0:	00800e44 	movi	r2,57
  80caa4:	9011883a 	mov	r8,r18
  80caa8:	90816626 	beq	r18,r2,80d044 <_dtoa_r+0x152c>
  80caac:	05bff516 	blt	zero,r22,80ca84 <__alt_mem_onchip_mem+0xff804a84>
  80cab0:	003ff506 	br	80ca88 <__alt_mem_onchip_mem+0xff804a88>
  80cab4:	080ec6c0 	call	80ec6c <__multadd>
  80cab8:	1023883a 	mov	r17,r2
  80cabc:	1029883a 	mov	r20,r2
  80cac0:	003fdf06 	br	80ca40 <__alt_mem_onchip_mem+0xff804a40>
  80cac4:	e009883a 	mov	r4,fp
  80cac8:	080ec440 	call	80ec44 <_Bfree>
  80cacc:	00800044 	movi	r2,1
  80cad0:	003fbc06 	br	80c9c4 <__alt_mem_onchip_mem+0xff8049c4>
  80cad4:	a80b883a 	mov	r5,r21
  80cad8:	8009883a 	mov	r4,r16
  80cadc:	080f4640 	call	80f464 <__mcmp>
  80cae0:	103edb0e 	bge	r2,zero,80c650 <__alt_mem_onchip_mem+0xff804650>
  80cae4:	800b883a 	mov	r5,r16
  80cae8:	000f883a 	mov	r7,zero
  80caec:	01800284 	movi	r6,10
  80caf0:	e009883a 	mov	r4,fp
  80caf4:	080ec6c0 	call	80ec6c <__multadd>
  80caf8:	1021883a 	mov	r16,r2
  80cafc:	d8800517 	ldw	r2,20(sp)
  80cb00:	d8c00b17 	ldw	r3,44(sp)
  80cb04:	10bfffc4 	addi	r2,r2,-1
  80cb08:	d8800515 	stw	r2,20(sp)
  80cb0c:	183f761e 	bne	r3,zero,80c8e8 <__alt_mem_onchip_mem+0xff8048e8>
  80cb10:	d9000c17 	ldw	r4,48(sp)
  80cb14:	0101730e 	bge	zero,r4,80d0e4 <_dtoa_r+0x15cc>
  80cb18:	d9000615 	stw	r4,24(sp)
  80cb1c:	003ed006 	br	80c660 <__alt_mem_onchip_mem+0xff804660>
  80cb20:	00800084 	movi	r2,2
  80cb24:	3081861e 	bne	r6,r2,80d140 <_dtoa_r+0x1628>
  80cb28:	d8000b15 	stw	zero,44(sp)
  80cb2c:	003f3c06 	br	80c820 <__alt_mem_onchip_mem+0xff804820>
  80cb30:	dc000917 	ldw	r16,36(sp)
  80cb34:	003e9206 	br	80c580 <__alt_mem_onchip_mem+0xff804580>
  80cb38:	d9c00317 	ldw	r7,12(sp)
  80cb3c:	00800084 	movi	r2,2
  80cb40:	11fec50e 	bge	r2,r7,80c658 <__alt_mem_onchip_mem+0xff804658>
  80cb44:	d9000617 	ldw	r4,24(sp)
  80cb48:	20013c1e 	bne	r4,zero,80d03c <_dtoa_r+0x1524>
  80cb4c:	a80b883a 	mov	r5,r21
  80cb50:	000f883a 	mov	r7,zero
  80cb54:	01800144 	movi	r6,5
  80cb58:	e009883a 	mov	r4,fp
  80cb5c:	080ec6c0 	call	80ec6c <__multadd>
  80cb60:	100b883a 	mov	r5,r2
  80cb64:	8009883a 	mov	r4,r16
  80cb68:	102b883a 	mov	r21,r2
  80cb6c:	080f4640 	call	80f464 <__mcmp>
  80cb70:	dc000915 	stw	r16,36(sp)
  80cb74:	00bf410e 	bge	zero,r2,80c87c <__alt_mem_onchip_mem+0xff80487c>
  80cb78:	d9c00717 	ldw	r7,28(sp)
  80cb7c:	00800c44 	movi	r2,49
  80cb80:	38800005 	stb	r2,0(r7)
  80cb84:	d8800517 	ldw	r2,20(sp)
  80cb88:	3dc00044 	addi	r23,r7,1
  80cb8c:	10800044 	addi	r2,r2,1
  80cb90:	d8800515 	stw	r2,20(sp)
  80cb94:	003f3d06 	br	80c88c <__alt_mem_onchip_mem+0xff80488c>
  80cb98:	d9800517 	ldw	r6,20(sp)
  80cb9c:	d9c00717 	ldw	r7,28(sp)
  80cba0:	00800c44 	movi	r2,49
  80cba4:	31800044 	addi	r6,r6,1
  80cba8:	d9800515 	stw	r6,20(sp)
  80cbac:	38800005 	stb	r2,0(r7)
  80cbb0:	003edf06 	br	80c730 <__alt_mem_onchip_mem+0xff804730>
  80cbb4:	d8000b15 	stw	zero,44(sp)
  80cbb8:	003c9f06 	br	80be38 <__alt_mem_onchip_mem+0xff803e38>
  80cbbc:	903e7e1e 	bne	r18,zero,80c5b8 <__alt_mem_onchip_mem+0xff8045b8>
  80cbc0:	00800434 	movhi	r2,16
  80cbc4:	10bfffc4 	addi	r2,r2,-1
  80cbc8:	9884703a 	and	r2,r19,r2
  80cbcc:	1000ea1e 	bne	r2,zero,80cf78 <_dtoa_r+0x1460>
  80cbd0:	9cdffc2c 	andhi	r19,r19,32752
  80cbd4:	9800e826 	beq	r19,zero,80cf78 <_dtoa_r+0x1460>
  80cbd8:	d9c00817 	ldw	r7,32(sp)
  80cbdc:	b5800044 	addi	r22,r22,1
  80cbe0:	04c00044 	movi	r19,1
  80cbe4:	39c00044 	addi	r7,r7,1
  80cbe8:	d9c00815 	stw	r7,32(sp)
  80cbec:	d8800d17 	ldw	r2,52(sp)
  80cbf0:	103e721e 	bne	r2,zero,80c5bc <__alt_mem_onchip_mem+0xff8045bc>
  80cbf4:	00800044 	movi	r2,1
  80cbf8:	003e7906 	br	80c5e0 <__alt_mem_onchip_mem+0xff8045e0>
  80cbfc:	8009883a 	mov	r4,r16
  80cc00:	08092a00 	call	8092a0 <__floatsidf>
  80cc04:	d9800f17 	ldw	r6,60(sp)
  80cc08:	d9c01017 	ldw	r7,64(sp)
  80cc0c:	1009883a 	mov	r4,r2
  80cc10:	180b883a 	mov	r5,r3
  80cc14:	080828c0 	call	80828c <__muldf3>
  80cc18:	000d883a 	mov	r6,zero
  80cc1c:	01d00734 	movhi	r7,16412
  80cc20:	1009883a 	mov	r4,r2
  80cc24:	180b883a 	mov	r5,r3
  80cc28:	08078100 	call	807810 <__adddf3>
  80cc2c:	047f3034 	movhi	r17,64704
  80cc30:	1021883a 	mov	r16,r2
  80cc34:	1c63883a 	add	r17,r3,r17
  80cc38:	d9000f17 	ldw	r4,60(sp)
  80cc3c:	d9401017 	ldw	r5,64(sp)
  80cc40:	000d883a 	mov	r6,zero
  80cc44:	01d00534 	movhi	r7,16404
  80cc48:	08089a40 	call	8089a4 <__subdf3>
  80cc4c:	800d883a 	mov	r6,r16
  80cc50:	880f883a 	mov	r7,r17
  80cc54:	1009883a 	mov	r4,r2
  80cc58:	180b883a 	mov	r5,r3
  80cc5c:	102b883a 	mov	r21,r2
  80cc60:	1829883a 	mov	r20,r3
  80cc64:	08080bc0 	call	8080bc <__gedf2>
  80cc68:	00806c16 	blt	zero,r2,80ce1c <_dtoa_r+0x1304>
  80cc6c:	89e0003c 	xorhi	r7,r17,32768
  80cc70:	800d883a 	mov	r6,r16
  80cc74:	a809883a 	mov	r4,r21
  80cc78:	a00b883a 	mov	r5,r20
  80cc7c:	08081980 	call	808198 <__ledf2>
  80cc80:	103d7e0e 	bge	r2,zero,80c27c <__alt_mem_onchip_mem+0xff80427c>
  80cc84:	002b883a 	mov	r21,zero
  80cc88:	0023883a 	mov	r17,zero
  80cc8c:	003efb06 	br	80c87c <__alt_mem_onchip_mem+0xff80487c>
  80cc90:	d8800717 	ldw	r2,28(sp)
  80cc94:	003bd006 	br	80bbd8 <__alt_mem_onchip_mem+0xff803bd8>
  80cc98:	d9000a17 	ldw	r4,40(sp)
  80cc9c:	d9800d17 	ldw	r6,52(sp)
  80cca0:	dd400a15 	stw	r21,40(sp)
  80cca4:	a905c83a 	sub	r2,r21,r4
  80cca8:	308d883a 	add	r6,r6,r2
  80ccac:	d9800d15 	stw	r6,52(sp)
  80ccb0:	002b883a 	mov	r21,zero
  80ccb4:	003e0606 	br	80c4d0 <__alt_mem_onchip_mem+0xff8044d0>
  80ccb8:	9023883a 	mov	r17,r18
  80ccbc:	9829883a 	mov	r20,r19
  80ccc0:	04000084 	movi	r16,2
  80ccc4:	003c9206 	br	80bf10 <__alt_mem_onchip_mem+0xff803f10>
  80ccc8:	04000044 	movi	r16,1
  80cccc:	dc000c15 	stw	r16,48(sp)
  80ccd0:	dc000615 	stw	r16,24(sp)
  80ccd4:	dc002215 	stw	r16,136(sp)
  80ccd8:	e0001115 	stw	zero,68(fp)
  80ccdc:	000b883a 	mov	r5,zero
  80cce0:	003c6906 	br	80be88 <__alt_mem_onchip_mem+0xff803e88>
  80cce4:	3021883a 	mov	r16,r6
  80cce8:	003ffb06 	br	80ccd8 <__alt_mem_onchip_mem+0xff804cd8>
  80ccec:	1000021e 	bne	r2,zero,80ccf8 <_dtoa_r+0x11e0>
  80ccf0:	4200004c 	andi	r8,r8,1
  80ccf4:	403e7d1e 	bne	r8,zero,80c6ec <__alt_mem_onchip_mem+0xff8046ec>
  80ccf8:	01000c04 	movi	r4,48
  80ccfc:	00000106 	br	80cd04 <_dtoa_r+0x11ec>
  80cd00:	102f883a 	mov	r23,r2
  80cd04:	b8bfffc4 	addi	r2,r23,-1
  80cd08:	10c00007 	ldb	r3,0(r2)
  80cd0c:	193ffc26 	beq	r3,r4,80cd00 <__alt_mem_onchip_mem+0xff804d00>
  80cd10:	003e8706 	br	80c730 <__alt_mem_onchip_mem+0xff804730>
  80cd14:	d8800517 	ldw	r2,20(sp)
  80cd18:	00a3c83a 	sub	r17,zero,r2
  80cd1c:	8800a426 	beq	r17,zero,80cfb0 <_dtoa_r+0x1498>
  80cd20:	888003cc 	andi	r2,r17,15
  80cd24:	100490fa 	slli	r2,r2,3
  80cd28:	00c020b4 	movhi	r3,130
  80cd2c:	18e0e004 	addi	r3,r3,-31872
  80cd30:	1885883a 	add	r2,r3,r2
  80cd34:	11800017 	ldw	r6,0(r2)
  80cd38:	11c00117 	ldw	r7,4(r2)
  80cd3c:	9009883a 	mov	r4,r18
  80cd40:	980b883a 	mov	r5,r19
  80cd44:	8823d13a 	srai	r17,r17,4
  80cd48:	080828c0 	call	80828c <__muldf3>
  80cd4c:	d8800f15 	stw	r2,60(sp)
  80cd50:	d8c01015 	stw	r3,64(sp)
  80cd54:	8800e826 	beq	r17,zero,80d0f8 <_dtoa_r+0x15e0>
  80cd58:	050020b4 	movhi	r20,130
  80cd5c:	a520d604 	addi	r20,r20,-31912
  80cd60:	04000084 	movi	r16,2
  80cd64:	8980004c 	andi	r6,r17,1
  80cd68:	1009883a 	mov	r4,r2
  80cd6c:	8823d07a 	srai	r17,r17,1
  80cd70:	180b883a 	mov	r5,r3
  80cd74:	30000426 	beq	r6,zero,80cd88 <_dtoa_r+0x1270>
  80cd78:	a1800017 	ldw	r6,0(r20)
  80cd7c:	a1c00117 	ldw	r7,4(r20)
  80cd80:	84000044 	addi	r16,r16,1
  80cd84:	080828c0 	call	80828c <__muldf3>
  80cd88:	a5000204 	addi	r20,r20,8
  80cd8c:	883ff51e 	bne	r17,zero,80cd64 <__alt_mem_onchip_mem+0xff804d64>
  80cd90:	d8800f15 	stw	r2,60(sp)
  80cd94:	d8c01015 	stw	r3,64(sp)
  80cd98:	003c7606 	br	80bf74 <__alt_mem_onchip_mem+0xff803f74>
  80cd9c:	00c00c04 	movi	r3,48
  80cda0:	10c00005 	stb	r3,0(r2)
  80cda4:	d8c00517 	ldw	r3,20(sp)
  80cda8:	bd3fffc3 	ldbu	r20,-1(r23)
  80cdac:	18c00044 	addi	r3,r3,1
  80cdb0:	d8c00515 	stw	r3,20(sp)
  80cdb4:	003db906 	br	80c49c <__alt_mem_onchip_mem+0xff80449c>
  80cdb8:	89400117 	ldw	r5,4(r17)
  80cdbc:	e009883a 	mov	r4,fp
  80cdc0:	080eb9c0 	call	80eb9c <_Balloc>
  80cdc4:	89800417 	ldw	r6,16(r17)
  80cdc8:	89400304 	addi	r5,r17,12
  80cdcc:	11000304 	addi	r4,r2,12
  80cdd0:	31800084 	addi	r6,r6,2
  80cdd4:	318d883a 	add	r6,r6,r6
  80cdd8:	318d883a 	add	r6,r6,r6
  80cddc:	1027883a 	mov	r19,r2
  80cde0:	080e92c0 	call	80e92c <memcpy>
  80cde4:	01800044 	movi	r6,1
  80cde8:	980b883a 	mov	r5,r19
  80cdec:	e009883a 	mov	r4,fp
  80cdf0:	080f31c0 	call	80f31c <__lshift>
  80cdf4:	1029883a 	mov	r20,r2
  80cdf8:	003ecc06 	br	80c92c <__alt_mem_onchip_mem+0xff80492c>
  80cdfc:	00800e44 	movi	r2,57
  80ce00:	90809026 	beq	r18,r2,80d044 <_dtoa_r+0x152c>
  80ce04:	92000044 	addi	r8,r18,1
  80ce08:	003f1f06 	br	80ca88 <__alt_mem_onchip_mem+0xff804a88>
  80ce0c:	9011883a 	mov	r8,r18
  80ce10:	8825883a 	mov	r18,r17
  80ce14:	a023883a 	mov	r17,r20
  80ce18:	003e2906 	br	80c6c0 <__alt_mem_onchip_mem+0xff8046c0>
  80ce1c:	002b883a 	mov	r21,zero
  80ce20:	0023883a 	mov	r17,zero
  80ce24:	003f5406 	br	80cb78 <__alt_mem_onchip_mem+0xff804b78>
  80ce28:	61bfffc4 	addi	r6,r12,-1
  80ce2c:	300490fa 	slli	r2,r6,3
  80ce30:	00c020b4 	movhi	r3,130
  80ce34:	18e0e004 	addi	r3,r3,-31872
  80ce38:	1885883a 	add	r2,r3,r2
  80ce3c:	11000017 	ldw	r4,0(r2)
  80ce40:	11400117 	ldw	r5,4(r2)
  80ce44:	d8800717 	ldw	r2,28(sp)
  80ce48:	880f883a 	mov	r7,r17
  80ce4c:	d9801215 	stw	r6,72(sp)
  80ce50:	800d883a 	mov	r6,r16
  80ce54:	db001615 	stw	r12,88(sp)
  80ce58:	15c00044 	addi	r23,r2,1
  80ce5c:	080828c0 	call	80828c <__muldf3>
  80ce60:	d9401017 	ldw	r5,64(sp)
  80ce64:	d9000f17 	ldw	r4,60(sp)
  80ce68:	d8c01515 	stw	r3,84(sp)
  80ce6c:	d8801415 	stw	r2,80(sp)
  80ce70:	0813fdc0 	call	813fdc <__fixdfsi>
  80ce74:	1009883a 	mov	r4,r2
  80ce78:	1021883a 	mov	r16,r2
  80ce7c:	08092a00 	call	8092a0 <__floatsidf>
  80ce80:	d9000f17 	ldw	r4,60(sp)
  80ce84:	d9401017 	ldw	r5,64(sp)
  80ce88:	100d883a 	mov	r6,r2
  80ce8c:	180f883a 	mov	r7,r3
  80ce90:	08089a40 	call	8089a4 <__subdf3>
  80ce94:	1829883a 	mov	r20,r3
  80ce98:	d8c00717 	ldw	r3,28(sp)
  80ce9c:	84000c04 	addi	r16,r16,48
  80cea0:	1023883a 	mov	r17,r2
  80cea4:	1c000005 	stb	r16,0(r3)
  80cea8:	db001617 	ldw	r12,88(sp)
  80ceac:	00800044 	movi	r2,1
  80ceb0:	60802226 	beq	r12,r2,80cf3c <_dtoa_r+0x1424>
  80ceb4:	d9c00717 	ldw	r7,28(sp)
  80ceb8:	8805883a 	mov	r2,r17
  80cebc:	b82b883a 	mov	r21,r23
  80cec0:	3b19883a 	add	r12,r7,r12
  80cec4:	6023883a 	mov	r17,r12
  80cec8:	a007883a 	mov	r3,r20
  80cecc:	dc800f15 	stw	r18,60(sp)
  80ced0:	000d883a 	mov	r6,zero
  80ced4:	01d00934 	movhi	r7,16420
  80ced8:	1009883a 	mov	r4,r2
  80cedc:	180b883a 	mov	r5,r3
  80cee0:	080828c0 	call	80828c <__muldf3>
  80cee4:	180b883a 	mov	r5,r3
  80cee8:	1009883a 	mov	r4,r2
  80ceec:	1829883a 	mov	r20,r3
  80cef0:	1025883a 	mov	r18,r2
  80cef4:	0813fdc0 	call	813fdc <__fixdfsi>
  80cef8:	1009883a 	mov	r4,r2
  80cefc:	1021883a 	mov	r16,r2
  80cf00:	08092a00 	call	8092a0 <__floatsidf>
  80cf04:	100d883a 	mov	r6,r2
  80cf08:	180f883a 	mov	r7,r3
  80cf0c:	9009883a 	mov	r4,r18
  80cf10:	a00b883a 	mov	r5,r20
  80cf14:	84000c04 	addi	r16,r16,48
  80cf18:	08089a40 	call	8089a4 <__subdf3>
  80cf1c:	ad400044 	addi	r21,r21,1
  80cf20:	ac3fffc5 	stb	r16,-1(r21)
  80cf24:	ac7fea1e 	bne	r21,r17,80ced0 <__alt_mem_onchip_mem+0xff804ed0>
  80cf28:	1023883a 	mov	r17,r2
  80cf2c:	d8801217 	ldw	r2,72(sp)
  80cf30:	dc800f17 	ldw	r18,60(sp)
  80cf34:	1829883a 	mov	r20,r3
  80cf38:	b8af883a 	add	r23,r23,r2
  80cf3c:	d9001417 	ldw	r4,80(sp)
  80cf40:	d9401517 	ldw	r5,84(sp)
  80cf44:	000d883a 	mov	r6,zero
  80cf48:	01cff834 	movhi	r7,16352
  80cf4c:	08078100 	call	807810 <__adddf3>
  80cf50:	880d883a 	mov	r6,r17
  80cf54:	a00f883a 	mov	r7,r20
  80cf58:	1009883a 	mov	r4,r2
  80cf5c:	180b883a 	mov	r5,r3
  80cf60:	08081980 	call	808198 <__ledf2>
  80cf64:	10003e0e 	bge	r2,zero,80d060 <_dtoa_r+0x1548>
  80cf68:	d9001317 	ldw	r4,76(sp)
  80cf6c:	bd3fffc3 	ldbu	r20,-1(r23)
  80cf70:	d9000515 	stw	r4,20(sp)
  80cf74:	003d3b06 	br	80c464 <__alt_mem_onchip_mem+0xff804464>
  80cf78:	0027883a 	mov	r19,zero
  80cf7c:	003f1b06 	br	80cbec <__alt_mem_onchip_mem+0xff804bec>
  80cf80:	d8800817 	ldw	r2,32(sp)
  80cf84:	11e9c83a 	sub	r20,r2,r7
  80cf88:	0005883a 	mov	r2,zero
  80cf8c:	003d5406 	br	80c4e0 <__alt_mem_onchip_mem+0xff8044e0>
  80cf90:	00800044 	movi	r2,1
  80cf94:	003dc706 	br	80c6b4 <__alt_mem_onchip_mem+0xff8046b4>
  80cf98:	d8c00217 	ldw	r3,8(sp)
  80cf9c:	00800d84 	movi	r2,54
  80cfa0:	dd400a17 	ldw	r21,40(sp)
  80cfa4:	10c5c83a 	sub	r2,r2,r3
  80cfa8:	dd000817 	ldw	r20,32(sp)
  80cfac:	003d4c06 	br	80c4e0 <__alt_mem_onchip_mem+0xff8044e0>
  80cfb0:	dc800f15 	stw	r18,60(sp)
  80cfb4:	dcc01015 	stw	r19,64(sp)
  80cfb8:	04000084 	movi	r16,2
  80cfbc:	003bed06 	br	80bf74 <__alt_mem_onchip_mem+0xff803f74>
  80cfc0:	d9000617 	ldw	r4,24(sp)
  80cfc4:	203f0d26 	beq	r4,zero,80cbfc <__alt_mem_onchip_mem+0xff804bfc>
  80cfc8:	d9800c17 	ldw	r6,48(sp)
  80cfcc:	01bcab0e 	bge	zero,r6,80c27c <__alt_mem_onchip_mem+0xff80427c>
  80cfd0:	d9401017 	ldw	r5,64(sp)
  80cfd4:	d9000f17 	ldw	r4,60(sp)
  80cfd8:	000d883a 	mov	r6,zero
  80cfdc:	01d00934 	movhi	r7,16420
  80cfe0:	080828c0 	call	80828c <__muldf3>
  80cfe4:	81000044 	addi	r4,r16,1
  80cfe8:	d8800f15 	stw	r2,60(sp)
  80cfec:	d8c01015 	stw	r3,64(sp)
  80cff0:	08092a00 	call	8092a0 <__floatsidf>
  80cff4:	d9800f17 	ldw	r6,60(sp)
  80cff8:	d9c01017 	ldw	r7,64(sp)
  80cffc:	1009883a 	mov	r4,r2
  80d000:	180b883a 	mov	r5,r3
  80d004:	080828c0 	call	80828c <__muldf3>
  80d008:	01d00734 	movhi	r7,16412
  80d00c:	000d883a 	mov	r6,zero
  80d010:	1009883a 	mov	r4,r2
  80d014:	180b883a 	mov	r5,r3
  80d018:	08078100 	call	807810 <__adddf3>
  80d01c:	d9c00517 	ldw	r7,20(sp)
  80d020:	047f3034 	movhi	r17,64704
  80d024:	1021883a 	mov	r16,r2
  80d028:	39ffffc4 	addi	r7,r7,-1
  80d02c:	d9c01315 	stw	r7,76(sp)
  80d030:	1c63883a 	add	r17,r3,r17
  80d034:	db000c17 	ldw	r12,48(sp)
  80d038:	003bea06 	br	80bfe4 <__alt_mem_onchip_mem+0xff803fe4>
  80d03c:	dc000915 	stw	r16,36(sp)
  80d040:	003e0e06 	br	80c87c <__alt_mem_onchip_mem+0xff80487c>
  80d044:	01000e44 	movi	r4,57
  80d048:	8825883a 	mov	r18,r17
  80d04c:	9dc00044 	addi	r23,r19,1
  80d050:	99000005 	stb	r4,0(r19)
  80d054:	a023883a 	mov	r17,r20
  80d058:	dc000915 	stw	r16,36(sp)
  80d05c:	003da406 	br	80c6f0 <__alt_mem_onchip_mem+0xff8046f0>
  80d060:	d9801417 	ldw	r6,80(sp)
  80d064:	d9c01517 	ldw	r7,84(sp)
  80d068:	0009883a 	mov	r4,zero
  80d06c:	014ff834 	movhi	r5,16352
  80d070:	08089a40 	call	8089a4 <__subdf3>
  80d074:	880d883a 	mov	r6,r17
  80d078:	a00f883a 	mov	r7,r20
  80d07c:	1009883a 	mov	r4,r2
  80d080:	180b883a 	mov	r5,r3
  80d084:	08080bc0 	call	8080bc <__gedf2>
  80d088:	00bc7c0e 	bge	zero,r2,80c27c <__alt_mem_onchip_mem+0xff80427c>
  80d08c:	01000c04 	movi	r4,48
  80d090:	00000106 	br	80d098 <_dtoa_r+0x1580>
  80d094:	102f883a 	mov	r23,r2
  80d098:	b8bfffc4 	addi	r2,r23,-1
  80d09c:	10c00007 	ldb	r3,0(r2)
  80d0a0:	193ffc26 	beq	r3,r4,80d094 <__alt_mem_onchip_mem+0xff805094>
  80d0a4:	d9801317 	ldw	r6,76(sp)
  80d0a8:	d9800515 	stw	r6,20(sp)
  80d0ac:	003c4406 	br	80c1c0 <__alt_mem_onchip_mem+0xff8041c0>
  80d0b0:	d9801317 	ldw	r6,76(sp)
  80d0b4:	d9800515 	stw	r6,20(sp)
  80d0b8:	003cea06 	br	80c464 <__alt_mem_onchip_mem+0xff804464>
  80d0bc:	dd800f17 	ldw	r22,60(sp)
  80d0c0:	dcc01017 	ldw	r19,64(sp)
  80d0c4:	dc801217 	ldw	r18,72(sp)
  80d0c8:	003c6c06 	br	80c27c <__alt_mem_onchip_mem+0xff80427c>
  80d0cc:	903e031e 	bne	r18,zero,80c8dc <__alt_mem_onchip_mem+0xff8048dc>
  80d0d0:	003ebb06 	br	80cbc0 <__alt_mem_onchip_mem+0xff804bc0>
  80d0d4:	103e6c1e 	bne	r2,zero,80ca88 <__alt_mem_onchip_mem+0xff804a88>
  80d0d8:	4080004c 	andi	r2,r8,1
  80d0dc:	103e6a26 	beq	r2,zero,80ca88 <__alt_mem_onchip_mem+0xff804a88>
  80d0e0:	003e6606 	br	80ca7c <__alt_mem_onchip_mem+0xff804a7c>
  80d0e4:	d8c00317 	ldw	r3,12(sp)
  80d0e8:	00800084 	movi	r2,2
  80d0ec:	10c02916 	blt	r2,r3,80d194 <_dtoa_r+0x167c>
  80d0f0:	d9000c17 	ldw	r4,48(sp)
  80d0f4:	003e8806 	br	80cb18 <__alt_mem_onchip_mem+0xff804b18>
  80d0f8:	04000084 	movi	r16,2
  80d0fc:	003b9d06 	br	80bf74 <__alt_mem_onchip_mem+0xff803f74>
  80d100:	d9001317 	ldw	r4,76(sp)
  80d104:	d9000515 	stw	r4,20(sp)
  80d108:	003cd606 	br	80c464 <__alt_mem_onchip_mem+0xff804464>
  80d10c:	d8801317 	ldw	r2,76(sp)
  80d110:	d8800515 	stw	r2,20(sp)
  80d114:	003c2a06 	br	80c1c0 <__alt_mem_onchip_mem+0xff8041c0>
  80d118:	d9800317 	ldw	r6,12(sp)
  80d11c:	00800084 	movi	r2,2
  80d120:	11801516 	blt	r2,r6,80d178 <_dtoa_r+0x1660>
  80d124:	d9c00c17 	ldw	r7,48(sp)
  80d128:	d9c00615 	stw	r7,24(sp)
  80d12c:	003df706 	br	80c90c <__alt_mem_onchip_mem+0xff80490c>
  80d130:	193d3926 	beq	r3,r4,80c618 <__alt_mem_onchip_mem+0xff804618>
  80d134:	00c00f04 	movi	r3,60
  80d138:	1885c83a 	sub	r2,r3,r2
  80d13c:	003ddf06 	br	80c8bc <__alt_mem_onchip_mem+0xff8048bc>
  80d140:	e009883a 	mov	r4,fp
  80d144:	e0001115 	stw	zero,68(fp)
  80d148:	000b883a 	mov	r5,zero
  80d14c:	080eb9c0 	call	80eb9c <_Balloc>
  80d150:	d8800715 	stw	r2,28(sp)
  80d154:	d8c00717 	ldw	r3,28(sp)
  80d158:	00bfffc4 	movi	r2,-1
  80d15c:	01000044 	movi	r4,1
  80d160:	d8800c15 	stw	r2,48(sp)
  80d164:	e0c01015 	stw	r3,64(fp)
  80d168:	d9000b15 	stw	r4,44(sp)
  80d16c:	d8800615 	stw	r2,24(sp)
  80d170:	d8002215 	stw	zero,136(sp)
  80d174:	003c4106 	br	80c27c <__alt_mem_onchip_mem+0xff80427c>
  80d178:	d8c00c17 	ldw	r3,48(sp)
  80d17c:	d8c00615 	stw	r3,24(sp)
  80d180:	003e7006 	br	80cb44 <__alt_mem_onchip_mem+0xff804b44>
  80d184:	04400044 	movi	r17,1
  80d188:	003b2006 	br	80be0c <__alt_mem_onchip_mem+0xff803e0c>
  80d18c:	000b883a 	mov	r5,zero
  80d190:	003b3d06 	br	80be88 <__alt_mem_onchip_mem+0xff803e88>
  80d194:	d8800c17 	ldw	r2,48(sp)
  80d198:	d8800615 	stw	r2,24(sp)
  80d19c:	003e6906 	br	80cb44 <__alt_mem_onchip_mem+0xff804b44>

0080d1a0 <__sflush_r>:
  80d1a0:	2880030b 	ldhu	r2,12(r5)
  80d1a4:	defffb04 	addi	sp,sp,-20
  80d1a8:	dcc00315 	stw	r19,12(sp)
  80d1ac:	dc400115 	stw	r17,4(sp)
  80d1b0:	dfc00415 	stw	ra,16(sp)
  80d1b4:	dc800215 	stw	r18,8(sp)
  80d1b8:	dc000015 	stw	r16,0(sp)
  80d1bc:	10c0020c 	andi	r3,r2,8
  80d1c0:	2823883a 	mov	r17,r5
  80d1c4:	2027883a 	mov	r19,r4
  80d1c8:	1800311e 	bne	r3,zero,80d290 <__sflush_r+0xf0>
  80d1cc:	28c00117 	ldw	r3,4(r5)
  80d1d0:	10820014 	ori	r2,r2,2048
  80d1d4:	2880030d 	sth	r2,12(r5)
  80d1d8:	00c04b0e 	bge	zero,r3,80d308 <__sflush_r+0x168>
  80d1dc:	8a000a17 	ldw	r8,40(r17)
  80d1e0:	40002326 	beq	r8,zero,80d270 <__sflush_r+0xd0>
  80d1e4:	9c000017 	ldw	r16,0(r19)
  80d1e8:	10c4000c 	andi	r3,r2,4096
  80d1ec:	98000015 	stw	zero,0(r19)
  80d1f0:	18004826 	beq	r3,zero,80d314 <__sflush_r+0x174>
  80d1f4:	89801417 	ldw	r6,80(r17)
  80d1f8:	10c0010c 	andi	r3,r2,4
  80d1fc:	18000626 	beq	r3,zero,80d218 <__sflush_r+0x78>
  80d200:	88c00117 	ldw	r3,4(r17)
  80d204:	88800c17 	ldw	r2,48(r17)
  80d208:	30cdc83a 	sub	r6,r6,r3
  80d20c:	10000226 	beq	r2,zero,80d218 <__sflush_r+0x78>
  80d210:	88800f17 	ldw	r2,60(r17)
  80d214:	308dc83a 	sub	r6,r6,r2
  80d218:	89400717 	ldw	r5,28(r17)
  80d21c:	000f883a 	mov	r7,zero
  80d220:	9809883a 	mov	r4,r19
  80d224:	403ee83a 	callr	r8
  80d228:	00ffffc4 	movi	r3,-1
  80d22c:	10c04426 	beq	r2,r3,80d340 <__sflush_r+0x1a0>
  80d230:	88c0030b 	ldhu	r3,12(r17)
  80d234:	89000417 	ldw	r4,16(r17)
  80d238:	88000115 	stw	zero,4(r17)
  80d23c:	197dffcc 	andi	r5,r3,63487
  80d240:	8940030d 	sth	r5,12(r17)
  80d244:	89000015 	stw	r4,0(r17)
  80d248:	18c4000c 	andi	r3,r3,4096
  80d24c:	18002c1e 	bne	r3,zero,80d300 <__sflush_r+0x160>
  80d250:	89400c17 	ldw	r5,48(r17)
  80d254:	9c000015 	stw	r16,0(r19)
  80d258:	28000526 	beq	r5,zero,80d270 <__sflush_r+0xd0>
  80d25c:	88801004 	addi	r2,r17,64
  80d260:	28800226 	beq	r5,r2,80d26c <__sflush_r+0xcc>
  80d264:	9809883a 	mov	r4,r19
  80d268:	080d90c0 	call	80d90c <_free_r>
  80d26c:	88000c15 	stw	zero,48(r17)
  80d270:	0005883a 	mov	r2,zero
  80d274:	dfc00417 	ldw	ra,16(sp)
  80d278:	dcc00317 	ldw	r19,12(sp)
  80d27c:	dc800217 	ldw	r18,8(sp)
  80d280:	dc400117 	ldw	r17,4(sp)
  80d284:	dc000017 	ldw	r16,0(sp)
  80d288:	dec00504 	addi	sp,sp,20
  80d28c:	f800283a 	ret
  80d290:	2c800417 	ldw	r18,16(r5)
  80d294:	903ff626 	beq	r18,zero,80d270 <__alt_mem_onchip_mem+0xff805270>
  80d298:	2c000017 	ldw	r16,0(r5)
  80d29c:	108000cc 	andi	r2,r2,3
  80d2a0:	2c800015 	stw	r18,0(r5)
  80d2a4:	84a1c83a 	sub	r16,r16,r18
  80d2a8:	1000131e 	bne	r2,zero,80d2f8 <__sflush_r+0x158>
  80d2ac:	28800517 	ldw	r2,20(r5)
  80d2b0:	88800215 	stw	r2,8(r17)
  80d2b4:	04000316 	blt	zero,r16,80d2c4 <__sflush_r+0x124>
  80d2b8:	003fed06 	br	80d270 <__alt_mem_onchip_mem+0xff805270>
  80d2bc:	90a5883a 	add	r18,r18,r2
  80d2c0:	043feb0e 	bge	zero,r16,80d270 <__alt_mem_onchip_mem+0xff805270>
  80d2c4:	88800917 	ldw	r2,36(r17)
  80d2c8:	89400717 	ldw	r5,28(r17)
  80d2cc:	800f883a 	mov	r7,r16
  80d2d0:	900d883a 	mov	r6,r18
  80d2d4:	9809883a 	mov	r4,r19
  80d2d8:	103ee83a 	callr	r2
  80d2dc:	80a1c83a 	sub	r16,r16,r2
  80d2e0:	00bff616 	blt	zero,r2,80d2bc <__alt_mem_onchip_mem+0xff8052bc>
  80d2e4:	88c0030b 	ldhu	r3,12(r17)
  80d2e8:	00bfffc4 	movi	r2,-1
  80d2ec:	18c01014 	ori	r3,r3,64
  80d2f0:	88c0030d 	sth	r3,12(r17)
  80d2f4:	003fdf06 	br	80d274 <__alt_mem_onchip_mem+0xff805274>
  80d2f8:	0005883a 	mov	r2,zero
  80d2fc:	003fec06 	br	80d2b0 <__alt_mem_onchip_mem+0xff8052b0>
  80d300:	88801415 	stw	r2,80(r17)
  80d304:	003fd206 	br	80d250 <__alt_mem_onchip_mem+0xff805250>
  80d308:	28c00f17 	ldw	r3,60(r5)
  80d30c:	00ffb316 	blt	zero,r3,80d1dc <__alt_mem_onchip_mem+0xff8051dc>
  80d310:	003fd706 	br	80d270 <__alt_mem_onchip_mem+0xff805270>
  80d314:	89400717 	ldw	r5,28(r17)
  80d318:	000d883a 	mov	r6,zero
  80d31c:	01c00044 	movi	r7,1
  80d320:	9809883a 	mov	r4,r19
  80d324:	403ee83a 	callr	r8
  80d328:	100d883a 	mov	r6,r2
  80d32c:	00bfffc4 	movi	r2,-1
  80d330:	30801426 	beq	r6,r2,80d384 <__sflush_r+0x1e4>
  80d334:	8880030b 	ldhu	r2,12(r17)
  80d338:	8a000a17 	ldw	r8,40(r17)
  80d33c:	003fae06 	br	80d1f8 <__alt_mem_onchip_mem+0xff8051f8>
  80d340:	98c00017 	ldw	r3,0(r19)
  80d344:	183fba26 	beq	r3,zero,80d230 <__alt_mem_onchip_mem+0xff805230>
  80d348:	01000744 	movi	r4,29
  80d34c:	19000626 	beq	r3,r4,80d368 <__sflush_r+0x1c8>
  80d350:	01000584 	movi	r4,22
  80d354:	19000426 	beq	r3,r4,80d368 <__sflush_r+0x1c8>
  80d358:	88c0030b 	ldhu	r3,12(r17)
  80d35c:	18c01014 	ori	r3,r3,64
  80d360:	88c0030d 	sth	r3,12(r17)
  80d364:	003fc306 	br	80d274 <__alt_mem_onchip_mem+0xff805274>
  80d368:	8880030b 	ldhu	r2,12(r17)
  80d36c:	88c00417 	ldw	r3,16(r17)
  80d370:	88000115 	stw	zero,4(r17)
  80d374:	10bdffcc 	andi	r2,r2,63487
  80d378:	8880030d 	sth	r2,12(r17)
  80d37c:	88c00015 	stw	r3,0(r17)
  80d380:	003fb306 	br	80d250 <__alt_mem_onchip_mem+0xff805250>
  80d384:	98800017 	ldw	r2,0(r19)
  80d388:	103fea26 	beq	r2,zero,80d334 <__alt_mem_onchip_mem+0xff805334>
  80d38c:	00c00744 	movi	r3,29
  80d390:	10c00226 	beq	r2,r3,80d39c <__sflush_r+0x1fc>
  80d394:	00c00584 	movi	r3,22
  80d398:	10c0031e 	bne	r2,r3,80d3a8 <__sflush_r+0x208>
  80d39c:	9c000015 	stw	r16,0(r19)
  80d3a0:	0005883a 	mov	r2,zero
  80d3a4:	003fb306 	br	80d274 <__alt_mem_onchip_mem+0xff805274>
  80d3a8:	88c0030b 	ldhu	r3,12(r17)
  80d3ac:	3005883a 	mov	r2,r6
  80d3b0:	18c01014 	ori	r3,r3,64
  80d3b4:	88c0030d 	sth	r3,12(r17)
  80d3b8:	003fae06 	br	80d274 <__alt_mem_onchip_mem+0xff805274>

0080d3bc <_fflush_r>:
  80d3bc:	defffd04 	addi	sp,sp,-12
  80d3c0:	dc000115 	stw	r16,4(sp)
  80d3c4:	dfc00215 	stw	ra,8(sp)
  80d3c8:	2021883a 	mov	r16,r4
  80d3cc:	20000226 	beq	r4,zero,80d3d8 <_fflush_r+0x1c>
  80d3d0:	20800e17 	ldw	r2,56(r4)
  80d3d4:	10000c26 	beq	r2,zero,80d408 <_fflush_r+0x4c>
  80d3d8:	2880030f 	ldh	r2,12(r5)
  80d3dc:	1000051e 	bne	r2,zero,80d3f4 <_fflush_r+0x38>
  80d3e0:	0005883a 	mov	r2,zero
  80d3e4:	dfc00217 	ldw	ra,8(sp)
  80d3e8:	dc000117 	ldw	r16,4(sp)
  80d3ec:	dec00304 	addi	sp,sp,12
  80d3f0:	f800283a 	ret
  80d3f4:	8009883a 	mov	r4,r16
  80d3f8:	dfc00217 	ldw	ra,8(sp)
  80d3fc:	dc000117 	ldw	r16,4(sp)
  80d400:	dec00304 	addi	sp,sp,12
  80d404:	080d1a01 	jmpi	80d1a0 <__sflush_r>
  80d408:	d9400015 	stw	r5,0(sp)
  80d40c:	080d7980 	call	80d798 <__sinit>
  80d410:	d9400017 	ldw	r5,0(sp)
  80d414:	003ff006 	br	80d3d8 <__alt_mem_onchip_mem+0xff8053d8>

0080d418 <fflush>:
  80d418:	20000526 	beq	r4,zero,80d430 <fflush+0x18>
  80d41c:	008020b4 	movhi	r2,130
  80d420:	10a8f004 	addi	r2,r2,-23616
  80d424:	200b883a 	mov	r5,r4
  80d428:	11000017 	ldw	r4,0(r2)
  80d42c:	080d3bc1 	jmpi	80d3bc <_fflush_r>
  80d430:	008020b4 	movhi	r2,130
  80d434:	10a8ef04 	addi	r2,r2,-23620
  80d438:	11000017 	ldw	r4,0(r2)
  80d43c:	01402074 	movhi	r5,129
  80d440:	2974ef04 	addi	r5,r5,-11332
  80d444:	080dce01 	jmpi	80dce0 <_fwalk_reent>

0080d448 <__fp_unlock>:
  80d448:	0005883a 	mov	r2,zero
  80d44c:	f800283a 	ret

0080d450 <_cleanup_r>:
  80d450:	01402074 	movhi	r5,129
  80d454:	2945b404 	addi	r5,r5,5840
  80d458:	080dce01 	jmpi	80dce0 <_fwalk_reent>

0080d45c <__sinit.part.1>:
  80d45c:	defff704 	addi	sp,sp,-36
  80d460:	00c02074 	movhi	r3,129
  80d464:	dfc00815 	stw	ra,32(sp)
  80d468:	ddc00715 	stw	r23,28(sp)
  80d46c:	dd800615 	stw	r22,24(sp)
  80d470:	dd400515 	stw	r21,20(sp)
  80d474:	dd000415 	stw	r20,16(sp)
  80d478:	dcc00315 	stw	r19,12(sp)
  80d47c:	dc800215 	stw	r18,8(sp)
  80d480:	dc400115 	stw	r17,4(sp)
  80d484:	dc000015 	stw	r16,0(sp)
  80d488:	18f51404 	addi	r3,r3,-11184
  80d48c:	24000117 	ldw	r16,4(r4)
  80d490:	20c00f15 	stw	r3,60(r4)
  80d494:	2080bb04 	addi	r2,r4,748
  80d498:	00c000c4 	movi	r3,3
  80d49c:	20c0b915 	stw	r3,740(r4)
  80d4a0:	2080ba15 	stw	r2,744(r4)
  80d4a4:	2000b815 	stw	zero,736(r4)
  80d4a8:	05c00204 	movi	r23,8
  80d4ac:	00800104 	movi	r2,4
  80d4b0:	2025883a 	mov	r18,r4
  80d4b4:	b80d883a 	mov	r6,r23
  80d4b8:	81001704 	addi	r4,r16,92
  80d4bc:	000b883a 	mov	r5,zero
  80d4c0:	80000015 	stw	zero,0(r16)
  80d4c4:	80000115 	stw	zero,4(r16)
  80d4c8:	80000215 	stw	zero,8(r16)
  80d4cc:	8080030d 	sth	r2,12(r16)
  80d4d0:	80001915 	stw	zero,100(r16)
  80d4d4:	8000038d 	sth	zero,14(r16)
  80d4d8:	80000415 	stw	zero,16(r16)
  80d4dc:	80000515 	stw	zero,20(r16)
  80d4e0:	80000615 	stw	zero,24(r16)
  80d4e4:	080ea740 	call	80ea74 <memset>
  80d4e8:	05802074 	movhi	r22,129
  80d4ec:	94400217 	ldw	r17,8(r18)
  80d4f0:	05402074 	movhi	r21,129
  80d4f4:	05002074 	movhi	r20,129
  80d4f8:	04c02074 	movhi	r19,129
  80d4fc:	b5bf1804 	addi	r22,r22,-928
  80d500:	ad7f2f04 	addi	r21,r21,-836
  80d504:	a53f4e04 	addi	r20,r20,-712
  80d508:	9cff6504 	addi	r19,r19,-620
  80d50c:	85800815 	stw	r22,32(r16)
  80d510:	85400915 	stw	r21,36(r16)
  80d514:	85000a15 	stw	r20,40(r16)
  80d518:	84c00b15 	stw	r19,44(r16)
  80d51c:	84000715 	stw	r16,28(r16)
  80d520:	00800284 	movi	r2,10
  80d524:	8880030d 	sth	r2,12(r17)
  80d528:	00800044 	movi	r2,1
  80d52c:	b80d883a 	mov	r6,r23
  80d530:	89001704 	addi	r4,r17,92
  80d534:	000b883a 	mov	r5,zero
  80d538:	88000015 	stw	zero,0(r17)
  80d53c:	88000115 	stw	zero,4(r17)
  80d540:	88000215 	stw	zero,8(r17)
  80d544:	88001915 	stw	zero,100(r17)
  80d548:	8880038d 	sth	r2,14(r17)
  80d54c:	88000415 	stw	zero,16(r17)
  80d550:	88000515 	stw	zero,20(r17)
  80d554:	88000615 	stw	zero,24(r17)
  80d558:	080ea740 	call	80ea74 <memset>
  80d55c:	94000317 	ldw	r16,12(r18)
  80d560:	00800484 	movi	r2,18
  80d564:	8c400715 	stw	r17,28(r17)
  80d568:	8d800815 	stw	r22,32(r17)
  80d56c:	8d400915 	stw	r21,36(r17)
  80d570:	8d000a15 	stw	r20,40(r17)
  80d574:	8cc00b15 	stw	r19,44(r17)
  80d578:	8080030d 	sth	r2,12(r16)
  80d57c:	00800084 	movi	r2,2
  80d580:	80000015 	stw	zero,0(r16)
  80d584:	80000115 	stw	zero,4(r16)
  80d588:	80000215 	stw	zero,8(r16)
  80d58c:	80001915 	stw	zero,100(r16)
  80d590:	8080038d 	sth	r2,14(r16)
  80d594:	80000415 	stw	zero,16(r16)
  80d598:	80000515 	stw	zero,20(r16)
  80d59c:	80000615 	stw	zero,24(r16)
  80d5a0:	b80d883a 	mov	r6,r23
  80d5a4:	000b883a 	mov	r5,zero
  80d5a8:	81001704 	addi	r4,r16,92
  80d5ac:	080ea740 	call	80ea74 <memset>
  80d5b0:	00800044 	movi	r2,1
  80d5b4:	84000715 	stw	r16,28(r16)
  80d5b8:	85800815 	stw	r22,32(r16)
  80d5bc:	85400915 	stw	r21,36(r16)
  80d5c0:	85000a15 	stw	r20,40(r16)
  80d5c4:	84c00b15 	stw	r19,44(r16)
  80d5c8:	90800e15 	stw	r2,56(r18)
  80d5cc:	dfc00817 	ldw	ra,32(sp)
  80d5d0:	ddc00717 	ldw	r23,28(sp)
  80d5d4:	dd800617 	ldw	r22,24(sp)
  80d5d8:	dd400517 	ldw	r21,20(sp)
  80d5dc:	dd000417 	ldw	r20,16(sp)
  80d5e0:	dcc00317 	ldw	r19,12(sp)
  80d5e4:	dc800217 	ldw	r18,8(sp)
  80d5e8:	dc400117 	ldw	r17,4(sp)
  80d5ec:	dc000017 	ldw	r16,0(sp)
  80d5f0:	dec00904 	addi	sp,sp,36
  80d5f4:	f800283a 	ret

0080d5f8 <__fp_lock>:
  80d5f8:	0005883a 	mov	r2,zero
  80d5fc:	f800283a 	ret

0080d600 <__sfmoreglue>:
  80d600:	defffc04 	addi	sp,sp,-16
  80d604:	dc400115 	stw	r17,4(sp)
  80d608:	2c7fffc4 	addi	r17,r5,-1
  80d60c:	8c401a24 	muli	r17,r17,104
  80d610:	dc800215 	stw	r18,8(sp)
  80d614:	2825883a 	mov	r18,r5
  80d618:	89401d04 	addi	r5,r17,116
  80d61c:	dc000015 	stw	r16,0(sp)
  80d620:	dfc00315 	stw	ra,12(sp)
  80d624:	080e03c0 	call	80e03c <_malloc_r>
  80d628:	1021883a 	mov	r16,r2
  80d62c:	10000726 	beq	r2,zero,80d64c <__sfmoreglue+0x4c>
  80d630:	11000304 	addi	r4,r2,12
  80d634:	10000015 	stw	zero,0(r2)
  80d638:	14800115 	stw	r18,4(r2)
  80d63c:	11000215 	stw	r4,8(r2)
  80d640:	89801a04 	addi	r6,r17,104
  80d644:	000b883a 	mov	r5,zero
  80d648:	080ea740 	call	80ea74 <memset>
  80d64c:	8005883a 	mov	r2,r16
  80d650:	dfc00317 	ldw	ra,12(sp)
  80d654:	dc800217 	ldw	r18,8(sp)
  80d658:	dc400117 	ldw	r17,4(sp)
  80d65c:	dc000017 	ldw	r16,0(sp)
  80d660:	dec00404 	addi	sp,sp,16
  80d664:	f800283a 	ret

0080d668 <__sfp>:
  80d668:	defffb04 	addi	sp,sp,-20
  80d66c:	dc000015 	stw	r16,0(sp)
  80d670:	040020b4 	movhi	r16,130
  80d674:	8428ef04 	addi	r16,r16,-23620
  80d678:	dcc00315 	stw	r19,12(sp)
  80d67c:	2027883a 	mov	r19,r4
  80d680:	81000017 	ldw	r4,0(r16)
  80d684:	dfc00415 	stw	ra,16(sp)
  80d688:	dc800215 	stw	r18,8(sp)
  80d68c:	20800e17 	ldw	r2,56(r4)
  80d690:	dc400115 	stw	r17,4(sp)
  80d694:	1000021e 	bne	r2,zero,80d6a0 <__sfp+0x38>
  80d698:	080d45c0 	call	80d45c <__sinit.part.1>
  80d69c:	81000017 	ldw	r4,0(r16)
  80d6a0:	2480b804 	addi	r18,r4,736
  80d6a4:	047fffc4 	movi	r17,-1
  80d6a8:	91000117 	ldw	r4,4(r18)
  80d6ac:	94000217 	ldw	r16,8(r18)
  80d6b0:	213fffc4 	addi	r4,r4,-1
  80d6b4:	20000a16 	blt	r4,zero,80d6e0 <__sfp+0x78>
  80d6b8:	8080030f 	ldh	r2,12(r16)
  80d6bc:	10000c26 	beq	r2,zero,80d6f0 <__sfp+0x88>
  80d6c0:	80c01d04 	addi	r3,r16,116
  80d6c4:	00000206 	br	80d6d0 <__sfp+0x68>
  80d6c8:	18bfe60f 	ldh	r2,-104(r3)
  80d6cc:	10000826 	beq	r2,zero,80d6f0 <__sfp+0x88>
  80d6d0:	213fffc4 	addi	r4,r4,-1
  80d6d4:	1c3ffd04 	addi	r16,r3,-12
  80d6d8:	18c01a04 	addi	r3,r3,104
  80d6dc:	247ffa1e 	bne	r4,r17,80d6c8 <__alt_mem_onchip_mem+0xff8056c8>
  80d6e0:	90800017 	ldw	r2,0(r18)
  80d6e4:	10001d26 	beq	r2,zero,80d75c <__sfp+0xf4>
  80d6e8:	1025883a 	mov	r18,r2
  80d6ec:	003fee06 	br	80d6a8 <__alt_mem_onchip_mem+0xff8056a8>
  80d6f0:	00bfffc4 	movi	r2,-1
  80d6f4:	8080038d 	sth	r2,14(r16)
  80d6f8:	00800044 	movi	r2,1
  80d6fc:	8080030d 	sth	r2,12(r16)
  80d700:	80001915 	stw	zero,100(r16)
  80d704:	80000015 	stw	zero,0(r16)
  80d708:	80000215 	stw	zero,8(r16)
  80d70c:	80000115 	stw	zero,4(r16)
  80d710:	80000415 	stw	zero,16(r16)
  80d714:	80000515 	stw	zero,20(r16)
  80d718:	80000615 	stw	zero,24(r16)
  80d71c:	01800204 	movi	r6,8
  80d720:	000b883a 	mov	r5,zero
  80d724:	81001704 	addi	r4,r16,92
  80d728:	080ea740 	call	80ea74 <memset>
  80d72c:	8005883a 	mov	r2,r16
  80d730:	80000c15 	stw	zero,48(r16)
  80d734:	80000d15 	stw	zero,52(r16)
  80d738:	80001115 	stw	zero,68(r16)
  80d73c:	80001215 	stw	zero,72(r16)
  80d740:	dfc00417 	ldw	ra,16(sp)
  80d744:	dcc00317 	ldw	r19,12(sp)
  80d748:	dc800217 	ldw	r18,8(sp)
  80d74c:	dc400117 	ldw	r17,4(sp)
  80d750:	dc000017 	ldw	r16,0(sp)
  80d754:	dec00504 	addi	sp,sp,20
  80d758:	f800283a 	ret
  80d75c:	01400104 	movi	r5,4
  80d760:	9809883a 	mov	r4,r19
  80d764:	080d6000 	call	80d600 <__sfmoreglue>
  80d768:	90800015 	stw	r2,0(r18)
  80d76c:	103fde1e 	bne	r2,zero,80d6e8 <__alt_mem_onchip_mem+0xff8056e8>
  80d770:	00800304 	movi	r2,12
  80d774:	98800015 	stw	r2,0(r19)
  80d778:	0005883a 	mov	r2,zero
  80d77c:	003ff006 	br	80d740 <__alt_mem_onchip_mem+0xff805740>

0080d780 <_cleanup>:
  80d780:	008020b4 	movhi	r2,130
  80d784:	10a8ef04 	addi	r2,r2,-23620
  80d788:	11000017 	ldw	r4,0(r2)
  80d78c:	01402074 	movhi	r5,129
  80d790:	2945b404 	addi	r5,r5,5840
  80d794:	080dce01 	jmpi	80dce0 <_fwalk_reent>

0080d798 <__sinit>:
  80d798:	20800e17 	ldw	r2,56(r4)
  80d79c:	10000126 	beq	r2,zero,80d7a4 <__sinit+0xc>
  80d7a0:	f800283a 	ret
  80d7a4:	080d45c1 	jmpi	80d45c <__sinit.part.1>

0080d7a8 <__sfp_lock_acquire>:
  80d7a8:	f800283a 	ret

0080d7ac <__sfp_lock_release>:
  80d7ac:	f800283a 	ret

0080d7b0 <__sinit_lock_acquire>:
  80d7b0:	f800283a 	ret

0080d7b4 <__sinit_lock_release>:
  80d7b4:	f800283a 	ret

0080d7b8 <__fp_lock_all>:
  80d7b8:	008020b4 	movhi	r2,130
  80d7bc:	10a8f004 	addi	r2,r2,-23616
  80d7c0:	11000017 	ldw	r4,0(r2)
  80d7c4:	01402074 	movhi	r5,129
  80d7c8:	29757e04 	addi	r5,r5,-10760
  80d7cc:	080dc1c1 	jmpi	80dc1c <_fwalk>

0080d7d0 <__fp_unlock_all>:
  80d7d0:	008020b4 	movhi	r2,130
  80d7d4:	10a8f004 	addi	r2,r2,-23616
  80d7d8:	11000017 	ldw	r4,0(r2)
  80d7dc:	01402074 	movhi	r5,129
  80d7e0:	29751204 	addi	r5,r5,-11192
  80d7e4:	080dc1c1 	jmpi	80dc1c <_fwalk>

0080d7e8 <_malloc_trim_r>:
  80d7e8:	defffb04 	addi	sp,sp,-20
  80d7ec:	dcc00315 	stw	r19,12(sp)
  80d7f0:	04c020b4 	movhi	r19,130
  80d7f4:	dc800215 	stw	r18,8(sp)
  80d7f8:	dc400115 	stw	r17,4(sp)
  80d7fc:	dc000015 	stw	r16,0(sp)
  80d800:	dfc00415 	stw	ra,16(sp)
  80d804:	2821883a 	mov	r16,r5
  80d808:	9ce2f204 	addi	r19,r19,-29752
  80d80c:	2025883a 	mov	r18,r4
  80d810:	08145d80 	call	8145d8 <__malloc_lock>
  80d814:	98800217 	ldw	r2,8(r19)
  80d818:	14400117 	ldw	r17,4(r2)
  80d81c:	00bfff04 	movi	r2,-4
  80d820:	88a2703a 	and	r17,r17,r2
  80d824:	8c21c83a 	sub	r16,r17,r16
  80d828:	8403fbc4 	addi	r16,r16,4079
  80d82c:	8020d33a 	srli	r16,r16,12
  80d830:	0083ffc4 	movi	r2,4095
  80d834:	843fffc4 	addi	r16,r16,-1
  80d838:	8020933a 	slli	r16,r16,12
  80d83c:	1400060e 	bge	r2,r16,80d858 <_malloc_trim_r+0x70>
  80d840:	000b883a 	mov	r5,zero
  80d844:	9009883a 	mov	r4,r18
  80d848:	080fc0c0 	call	80fc0c <_sbrk_r>
  80d84c:	98c00217 	ldw	r3,8(r19)
  80d850:	1c47883a 	add	r3,r3,r17
  80d854:	10c00a26 	beq	r2,r3,80d880 <_malloc_trim_r+0x98>
  80d858:	9009883a 	mov	r4,r18
  80d85c:	08145fc0 	call	8145fc <__malloc_unlock>
  80d860:	0005883a 	mov	r2,zero
  80d864:	dfc00417 	ldw	ra,16(sp)
  80d868:	dcc00317 	ldw	r19,12(sp)
  80d86c:	dc800217 	ldw	r18,8(sp)
  80d870:	dc400117 	ldw	r17,4(sp)
  80d874:	dc000017 	ldw	r16,0(sp)
  80d878:	dec00504 	addi	sp,sp,20
  80d87c:	f800283a 	ret
  80d880:	040bc83a 	sub	r5,zero,r16
  80d884:	9009883a 	mov	r4,r18
  80d888:	080fc0c0 	call	80fc0c <_sbrk_r>
  80d88c:	00ffffc4 	movi	r3,-1
  80d890:	10c00d26 	beq	r2,r3,80d8c8 <_malloc_trim_r+0xe0>
  80d894:	00c020b4 	movhi	r3,130
  80d898:	18f04904 	addi	r3,r3,-16092
  80d89c:	18800017 	ldw	r2,0(r3)
  80d8a0:	99000217 	ldw	r4,8(r19)
  80d8a4:	8c23c83a 	sub	r17,r17,r16
  80d8a8:	8c400054 	ori	r17,r17,1
  80d8ac:	1421c83a 	sub	r16,r2,r16
  80d8b0:	24400115 	stw	r17,4(r4)
  80d8b4:	9009883a 	mov	r4,r18
  80d8b8:	1c000015 	stw	r16,0(r3)
  80d8bc:	08145fc0 	call	8145fc <__malloc_unlock>
  80d8c0:	00800044 	movi	r2,1
  80d8c4:	003fe706 	br	80d864 <__alt_mem_onchip_mem+0xff805864>
  80d8c8:	000b883a 	mov	r5,zero
  80d8cc:	9009883a 	mov	r4,r18
  80d8d0:	080fc0c0 	call	80fc0c <_sbrk_r>
  80d8d4:	99000217 	ldw	r4,8(r19)
  80d8d8:	014003c4 	movi	r5,15
  80d8dc:	1107c83a 	sub	r3,r2,r4
  80d8e0:	28ffdd0e 	bge	r5,r3,80d858 <__alt_mem_onchip_mem+0xff805858>
  80d8e4:	014020b4 	movhi	r5,130
  80d8e8:	2968f204 	addi	r5,r5,-23608
  80d8ec:	29400017 	ldw	r5,0(r5)
  80d8f0:	18c00054 	ori	r3,r3,1
  80d8f4:	20c00115 	stw	r3,4(r4)
  80d8f8:	00c020b4 	movhi	r3,130
  80d8fc:	1145c83a 	sub	r2,r2,r5
  80d900:	18f04904 	addi	r3,r3,-16092
  80d904:	18800015 	stw	r2,0(r3)
  80d908:	003fd306 	br	80d858 <__alt_mem_onchip_mem+0xff805858>

0080d90c <_free_r>:
  80d90c:	28004126 	beq	r5,zero,80da14 <_free_r+0x108>
  80d910:	defffd04 	addi	sp,sp,-12
  80d914:	dc400115 	stw	r17,4(sp)
  80d918:	dc000015 	stw	r16,0(sp)
  80d91c:	2023883a 	mov	r17,r4
  80d920:	2821883a 	mov	r16,r5
  80d924:	dfc00215 	stw	ra,8(sp)
  80d928:	08145d80 	call	8145d8 <__malloc_lock>
  80d92c:	81ffff17 	ldw	r7,-4(r16)
  80d930:	00bfff84 	movi	r2,-2
  80d934:	010020b4 	movhi	r4,130
  80d938:	81bffe04 	addi	r6,r16,-8
  80d93c:	3884703a 	and	r2,r7,r2
  80d940:	2122f204 	addi	r4,r4,-29752
  80d944:	308b883a 	add	r5,r6,r2
  80d948:	2a400117 	ldw	r9,4(r5)
  80d94c:	22000217 	ldw	r8,8(r4)
  80d950:	00ffff04 	movi	r3,-4
  80d954:	48c6703a 	and	r3,r9,r3
  80d958:	2a005726 	beq	r5,r8,80dab8 <_free_r+0x1ac>
  80d95c:	28c00115 	stw	r3,4(r5)
  80d960:	39c0004c 	andi	r7,r7,1
  80d964:	3800091e 	bne	r7,zero,80d98c <_free_r+0x80>
  80d968:	823ffe17 	ldw	r8,-8(r16)
  80d96c:	22400204 	addi	r9,r4,8
  80d970:	320dc83a 	sub	r6,r6,r8
  80d974:	31c00217 	ldw	r7,8(r6)
  80d978:	1205883a 	add	r2,r2,r8
  80d97c:	3a406526 	beq	r7,r9,80db14 <_free_r+0x208>
  80d980:	32000317 	ldw	r8,12(r6)
  80d984:	3a000315 	stw	r8,12(r7)
  80d988:	41c00215 	stw	r7,8(r8)
  80d98c:	28cf883a 	add	r7,r5,r3
  80d990:	39c00117 	ldw	r7,4(r7)
  80d994:	39c0004c 	andi	r7,r7,1
  80d998:	38003a26 	beq	r7,zero,80da84 <_free_r+0x178>
  80d99c:	10c00054 	ori	r3,r2,1
  80d9a0:	30c00115 	stw	r3,4(r6)
  80d9a4:	3087883a 	add	r3,r6,r2
  80d9a8:	18800015 	stw	r2,0(r3)
  80d9ac:	00c07fc4 	movi	r3,511
  80d9b0:	18801936 	bltu	r3,r2,80da18 <_free_r+0x10c>
  80d9b4:	1004d0fa 	srli	r2,r2,3
  80d9b8:	01c00044 	movi	r7,1
  80d9bc:	21400117 	ldw	r5,4(r4)
  80d9c0:	10c00044 	addi	r3,r2,1
  80d9c4:	18c7883a 	add	r3,r3,r3
  80d9c8:	1005d0ba 	srai	r2,r2,2
  80d9cc:	18c7883a 	add	r3,r3,r3
  80d9d0:	18c7883a 	add	r3,r3,r3
  80d9d4:	1907883a 	add	r3,r3,r4
  80d9d8:	3884983a 	sll	r2,r7,r2
  80d9dc:	19c00017 	ldw	r7,0(r3)
  80d9e0:	1a3ffe04 	addi	r8,r3,-8
  80d9e4:	1144b03a 	or	r2,r2,r5
  80d9e8:	32000315 	stw	r8,12(r6)
  80d9ec:	31c00215 	stw	r7,8(r6)
  80d9f0:	20800115 	stw	r2,4(r4)
  80d9f4:	19800015 	stw	r6,0(r3)
  80d9f8:	39800315 	stw	r6,12(r7)
  80d9fc:	8809883a 	mov	r4,r17
  80da00:	dfc00217 	ldw	ra,8(sp)
  80da04:	dc400117 	ldw	r17,4(sp)
  80da08:	dc000017 	ldw	r16,0(sp)
  80da0c:	dec00304 	addi	sp,sp,12
  80da10:	08145fc1 	jmpi	8145fc <__malloc_unlock>
  80da14:	f800283a 	ret
  80da18:	100ad27a 	srli	r5,r2,9
  80da1c:	00c00104 	movi	r3,4
  80da20:	19404a36 	bltu	r3,r5,80db4c <_free_r+0x240>
  80da24:	100ad1ba 	srli	r5,r2,6
  80da28:	28c00e44 	addi	r3,r5,57
  80da2c:	18c7883a 	add	r3,r3,r3
  80da30:	29400e04 	addi	r5,r5,56
  80da34:	18c7883a 	add	r3,r3,r3
  80da38:	18c7883a 	add	r3,r3,r3
  80da3c:	1909883a 	add	r4,r3,r4
  80da40:	20c00017 	ldw	r3,0(r4)
  80da44:	01c020b4 	movhi	r7,130
  80da48:	213ffe04 	addi	r4,r4,-8
  80da4c:	39e2f204 	addi	r7,r7,-29752
  80da50:	20c04426 	beq	r4,r3,80db64 <_free_r+0x258>
  80da54:	01ffff04 	movi	r7,-4
  80da58:	19400117 	ldw	r5,4(r3)
  80da5c:	29ca703a 	and	r5,r5,r7
  80da60:	1140022e 	bgeu	r2,r5,80da6c <_free_r+0x160>
  80da64:	18c00217 	ldw	r3,8(r3)
  80da68:	20fffb1e 	bne	r4,r3,80da58 <__alt_mem_onchip_mem+0xff805a58>
  80da6c:	19000317 	ldw	r4,12(r3)
  80da70:	31000315 	stw	r4,12(r6)
  80da74:	30c00215 	stw	r3,8(r6)
  80da78:	21800215 	stw	r6,8(r4)
  80da7c:	19800315 	stw	r6,12(r3)
  80da80:	003fde06 	br	80d9fc <__alt_mem_onchip_mem+0xff8059fc>
  80da84:	29c00217 	ldw	r7,8(r5)
  80da88:	10c5883a 	add	r2,r2,r3
  80da8c:	00c020b4 	movhi	r3,130
  80da90:	18e2f404 	addi	r3,r3,-29744
  80da94:	38c03b26 	beq	r7,r3,80db84 <_free_r+0x278>
  80da98:	2a000317 	ldw	r8,12(r5)
  80da9c:	11400054 	ori	r5,r2,1
  80daa0:	3087883a 	add	r3,r6,r2
  80daa4:	3a000315 	stw	r8,12(r7)
  80daa8:	41c00215 	stw	r7,8(r8)
  80daac:	31400115 	stw	r5,4(r6)
  80dab0:	18800015 	stw	r2,0(r3)
  80dab4:	003fbd06 	br	80d9ac <__alt_mem_onchip_mem+0xff8059ac>
  80dab8:	39c0004c 	andi	r7,r7,1
  80dabc:	10c5883a 	add	r2,r2,r3
  80dac0:	3800071e 	bne	r7,zero,80dae0 <_free_r+0x1d4>
  80dac4:	81fffe17 	ldw	r7,-8(r16)
  80dac8:	31cdc83a 	sub	r6,r6,r7
  80dacc:	30c00317 	ldw	r3,12(r6)
  80dad0:	31400217 	ldw	r5,8(r6)
  80dad4:	11c5883a 	add	r2,r2,r7
  80dad8:	28c00315 	stw	r3,12(r5)
  80dadc:	19400215 	stw	r5,8(r3)
  80dae0:	10c00054 	ori	r3,r2,1
  80dae4:	30c00115 	stw	r3,4(r6)
  80dae8:	00c020b4 	movhi	r3,130
  80daec:	18e8f304 	addi	r3,r3,-23604
  80daf0:	18c00017 	ldw	r3,0(r3)
  80daf4:	21800215 	stw	r6,8(r4)
  80daf8:	10ffc036 	bltu	r2,r3,80d9fc <__alt_mem_onchip_mem+0xff8059fc>
  80dafc:	008020b4 	movhi	r2,130
  80db00:	10b04004 	addi	r2,r2,-16128
  80db04:	11400017 	ldw	r5,0(r2)
  80db08:	8809883a 	mov	r4,r17
  80db0c:	080d7e80 	call	80d7e8 <_malloc_trim_r>
  80db10:	003fba06 	br	80d9fc <__alt_mem_onchip_mem+0xff8059fc>
  80db14:	28c9883a 	add	r4,r5,r3
  80db18:	21000117 	ldw	r4,4(r4)
  80db1c:	2100004c 	andi	r4,r4,1
  80db20:	2000391e 	bne	r4,zero,80dc08 <_free_r+0x2fc>
  80db24:	29c00217 	ldw	r7,8(r5)
  80db28:	29000317 	ldw	r4,12(r5)
  80db2c:	1885883a 	add	r2,r3,r2
  80db30:	10c00054 	ori	r3,r2,1
  80db34:	39000315 	stw	r4,12(r7)
  80db38:	21c00215 	stw	r7,8(r4)
  80db3c:	30c00115 	stw	r3,4(r6)
  80db40:	308d883a 	add	r6,r6,r2
  80db44:	30800015 	stw	r2,0(r6)
  80db48:	003fac06 	br	80d9fc <__alt_mem_onchip_mem+0xff8059fc>
  80db4c:	00c00504 	movi	r3,20
  80db50:	19401536 	bltu	r3,r5,80dba8 <_free_r+0x29c>
  80db54:	28c01704 	addi	r3,r5,92
  80db58:	18c7883a 	add	r3,r3,r3
  80db5c:	294016c4 	addi	r5,r5,91
  80db60:	003fb406 	br	80da34 <__alt_mem_onchip_mem+0xff805a34>
  80db64:	280bd0ba 	srai	r5,r5,2
  80db68:	00c00044 	movi	r3,1
  80db6c:	38800117 	ldw	r2,4(r7)
  80db70:	194a983a 	sll	r5,r3,r5
  80db74:	2007883a 	mov	r3,r4
  80db78:	2884b03a 	or	r2,r5,r2
  80db7c:	38800115 	stw	r2,4(r7)
  80db80:	003fbb06 	br	80da70 <__alt_mem_onchip_mem+0xff805a70>
  80db84:	21800515 	stw	r6,20(r4)
  80db88:	21800415 	stw	r6,16(r4)
  80db8c:	10c00054 	ori	r3,r2,1
  80db90:	31c00315 	stw	r7,12(r6)
  80db94:	31c00215 	stw	r7,8(r6)
  80db98:	30c00115 	stw	r3,4(r6)
  80db9c:	308d883a 	add	r6,r6,r2
  80dba0:	30800015 	stw	r2,0(r6)
  80dba4:	003f9506 	br	80d9fc <__alt_mem_onchip_mem+0xff8059fc>
  80dba8:	00c01504 	movi	r3,84
  80dbac:	19400536 	bltu	r3,r5,80dbc4 <_free_r+0x2b8>
  80dbb0:	100ad33a 	srli	r5,r2,12
  80dbb4:	28c01bc4 	addi	r3,r5,111
  80dbb8:	18c7883a 	add	r3,r3,r3
  80dbbc:	29401b84 	addi	r5,r5,110
  80dbc0:	003f9c06 	br	80da34 <__alt_mem_onchip_mem+0xff805a34>
  80dbc4:	00c05504 	movi	r3,340
  80dbc8:	19400536 	bltu	r3,r5,80dbe0 <_free_r+0x2d4>
  80dbcc:	100ad3fa 	srli	r5,r2,15
  80dbd0:	28c01e04 	addi	r3,r5,120
  80dbd4:	18c7883a 	add	r3,r3,r3
  80dbd8:	29401dc4 	addi	r5,r5,119
  80dbdc:	003f9506 	br	80da34 <__alt_mem_onchip_mem+0xff805a34>
  80dbe0:	00c15504 	movi	r3,1364
  80dbe4:	19400536 	bltu	r3,r5,80dbfc <_free_r+0x2f0>
  80dbe8:	100ad4ba 	srli	r5,r2,18
  80dbec:	28c01f44 	addi	r3,r5,125
  80dbf0:	18c7883a 	add	r3,r3,r3
  80dbf4:	29401f04 	addi	r5,r5,124
  80dbf8:	003f8e06 	br	80da34 <__alt_mem_onchip_mem+0xff805a34>
  80dbfc:	00c03f84 	movi	r3,254
  80dc00:	01401f84 	movi	r5,126
  80dc04:	003f8b06 	br	80da34 <__alt_mem_onchip_mem+0xff805a34>
  80dc08:	10c00054 	ori	r3,r2,1
  80dc0c:	30c00115 	stw	r3,4(r6)
  80dc10:	308d883a 	add	r6,r6,r2
  80dc14:	30800015 	stw	r2,0(r6)
  80dc18:	003f7806 	br	80d9fc <__alt_mem_onchip_mem+0xff8059fc>

0080dc1c <_fwalk>:
  80dc1c:	defff704 	addi	sp,sp,-36
  80dc20:	dd000415 	stw	r20,16(sp)
  80dc24:	dfc00815 	stw	ra,32(sp)
  80dc28:	ddc00715 	stw	r23,28(sp)
  80dc2c:	dd800615 	stw	r22,24(sp)
  80dc30:	dd400515 	stw	r21,20(sp)
  80dc34:	dcc00315 	stw	r19,12(sp)
  80dc38:	dc800215 	stw	r18,8(sp)
  80dc3c:	dc400115 	stw	r17,4(sp)
  80dc40:	dc000015 	stw	r16,0(sp)
  80dc44:	2500b804 	addi	r20,r4,736
  80dc48:	a0002326 	beq	r20,zero,80dcd8 <_fwalk+0xbc>
  80dc4c:	282b883a 	mov	r21,r5
  80dc50:	002f883a 	mov	r23,zero
  80dc54:	05800044 	movi	r22,1
  80dc58:	04ffffc4 	movi	r19,-1
  80dc5c:	a4400117 	ldw	r17,4(r20)
  80dc60:	a4800217 	ldw	r18,8(r20)
  80dc64:	8c7fffc4 	addi	r17,r17,-1
  80dc68:	88000d16 	blt	r17,zero,80dca0 <_fwalk+0x84>
  80dc6c:	94000304 	addi	r16,r18,12
  80dc70:	94800384 	addi	r18,r18,14
  80dc74:	8080000b 	ldhu	r2,0(r16)
  80dc78:	8c7fffc4 	addi	r17,r17,-1
  80dc7c:	813ffd04 	addi	r4,r16,-12
  80dc80:	b080042e 	bgeu	r22,r2,80dc94 <_fwalk+0x78>
  80dc84:	9080000f 	ldh	r2,0(r18)
  80dc88:	14c00226 	beq	r2,r19,80dc94 <_fwalk+0x78>
  80dc8c:	a83ee83a 	callr	r21
  80dc90:	b8aeb03a 	or	r23,r23,r2
  80dc94:	84001a04 	addi	r16,r16,104
  80dc98:	94801a04 	addi	r18,r18,104
  80dc9c:	8cfff51e 	bne	r17,r19,80dc74 <__alt_mem_onchip_mem+0xff805c74>
  80dca0:	a5000017 	ldw	r20,0(r20)
  80dca4:	a03fed1e 	bne	r20,zero,80dc5c <__alt_mem_onchip_mem+0xff805c5c>
  80dca8:	b805883a 	mov	r2,r23
  80dcac:	dfc00817 	ldw	ra,32(sp)
  80dcb0:	ddc00717 	ldw	r23,28(sp)
  80dcb4:	dd800617 	ldw	r22,24(sp)
  80dcb8:	dd400517 	ldw	r21,20(sp)
  80dcbc:	dd000417 	ldw	r20,16(sp)
  80dcc0:	dcc00317 	ldw	r19,12(sp)
  80dcc4:	dc800217 	ldw	r18,8(sp)
  80dcc8:	dc400117 	ldw	r17,4(sp)
  80dccc:	dc000017 	ldw	r16,0(sp)
  80dcd0:	dec00904 	addi	sp,sp,36
  80dcd4:	f800283a 	ret
  80dcd8:	002f883a 	mov	r23,zero
  80dcdc:	003ff206 	br	80dca8 <__alt_mem_onchip_mem+0xff805ca8>

0080dce0 <_fwalk_reent>:
  80dce0:	defff704 	addi	sp,sp,-36
  80dce4:	dd000415 	stw	r20,16(sp)
  80dce8:	dfc00815 	stw	ra,32(sp)
  80dcec:	ddc00715 	stw	r23,28(sp)
  80dcf0:	dd800615 	stw	r22,24(sp)
  80dcf4:	dd400515 	stw	r21,20(sp)
  80dcf8:	dcc00315 	stw	r19,12(sp)
  80dcfc:	dc800215 	stw	r18,8(sp)
  80dd00:	dc400115 	stw	r17,4(sp)
  80dd04:	dc000015 	stw	r16,0(sp)
  80dd08:	2500b804 	addi	r20,r4,736
  80dd0c:	a0002326 	beq	r20,zero,80dd9c <_fwalk_reent+0xbc>
  80dd10:	282b883a 	mov	r21,r5
  80dd14:	2027883a 	mov	r19,r4
  80dd18:	002f883a 	mov	r23,zero
  80dd1c:	05800044 	movi	r22,1
  80dd20:	04bfffc4 	movi	r18,-1
  80dd24:	a4400117 	ldw	r17,4(r20)
  80dd28:	a4000217 	ldw	r16,8(r20)
  80dd2c:	8c7fffc4 	addi	r17,r17,-1
  80dd30:	88000c16 	blt	r17,zero,80dd64 <_fwalk_reent+0x84>
  80dd34:	84000304 	addi	r16,r16,12
  80dd38:	8080000b 	ldhu	r2,0(r16)
  80dd3c:	8c7fffc4 	addi	r17,r17,-1
  80dd40:	817ffd04 	addi	r5,r16,-12
  80dd44:	b080052e 	bgeu	r22,r2,80dd5c <_fwalk_reent+0x7c>
  80dd48:	8080008f 	ldh	r2,2(r16)
  80dd4c:	9809883a 	mov	r4,r19
  80dd50:	14800226 	beq	r2,r18,80dd5c <_fwalk_reent+0x7c>
  80dd54:	a83ee83a 	callr	r21
  80dd58:	b8aeb03a 	or	r23,r23,r2
  80dd5c:	84001a04 	addi	r16,r16,104
  80dd60:	8cbff51e 	bne	r17,r18,80dd38 <__alt_mem_onchip_mem+0xff805d38>
  80dd64:	a5000017 	ldw	r20,0(r20)
  80dd68:	a03fee1e 	bne	r20,zero,80dd24 <__alt_mem_onchip_mem+0xff805d24>
  80dd6c:	b805883a 	mov	r2,r23
  80dd70:	dfc00817 	ldw	ra,32(sp)
  80dd74:	ddc00717 	ldw	r23,28(sp)
  80dd78:	dd800617 	ldw	r22,24(sp)
  80dd7c:	dd400517 	ldw	r21,20(sp)
  80dd80:	dd000417 	ldw	r20,16(sp)
  80dd84:	dcc00317 	ldw	r19,12(sp)
  80dd88:	dc800217 	ldw	r18,8(sp)
  80dd8c:	dc400117 	ldw	r17,4(sp)
  80dd90:	dc000017 	ldw	r16,0(sp)
  80dd94:	dec00904 	addi	sp,sp,36
  80dd98:	f800283a 	ret
  80dd9c:	002f883a 	mov	r23,zero
  80dda0:	003ff206 	br	80dd6c <__alt_mem_onchip_mem+0xff805d6c>

0080dda4 <_setlocale_r>:
  80dda4:	30001b26 	beq	r6,zero,80de14 <_setlocale_r+0x70>
  80dda8:	014020b4 	movhi	r5,130
  80ddac:	defffe04 	addi	sp,sp,-8
  80ddb0:	2960c604 	addi	r5,r5,-31976
  80ddb4:	3009883a 	mov	r4,r6
  80ddb8:	dc000015 	stw	r16,0(sp)
  80ddbc:	dfc00115 	stw	ra,4(sp)
  80ddc0:	3021883a 	mov	r16,r6
  80ddc4:	080fd9c0 	call	80fd9c <strcmp>
  80ddc8:	1000061e 	bne	r2,zero,80dde4 <_setlocale_r+0x40>
  80ddcc:	008020b4 	movhi	r2,130
  80ddd0:	10a0c504 	addi	r2,r2,-31980
  80ddd4:	dfc00117 	ldw	ra,4(sp)
  80ddd8:	dc000017 	ldw	r16,0(sp)
  80dddc:	dec00204 	addi	sp,sp,8
  80dde0:	f800283a 	ret
  80dde4:	014020b4 	movhi	r5,130
  80dde8:	2960c504 	addi	r5,r5,-31980
  80ddec:	8009883a 	mov	r4,r16
  80ddf0:	080fd9c0 	call	80fd9c <strcmp>
  80ddf4:	103ff526 	beq	r2,zero,80ddcc <__alt_mem_onchip_mem+0xff805dcc>
  80ddf8:	014020b4 	movhi	r5,130
  80ddfc:	2960b004 	addi	r5,r5,-32064
  80de00:	8009883a 	mov	r4,r16
  80de04:	080fd9c0 	call	80fd9c <strcmp>
  80de08:	103ff026 	beq	r2,zero,80ddcc <__alt_mem_onchip_mem+0xff805dcc>
  80de0c:	0005883a 	mov	r2,zero
  80de10:	003ff006 	br	80ddd4 <__alt_mem_onchip_mem+0xff805dd4>
  80de14:	008020b4 	movhi	r2,130
  80de18:	10a0c504 	addi	r2,r2,-31980
  80de1c:	f800283a 	ret

0080de20 <__locale_charset>:
  80de20:	008020b4 	movhi	r2,130
  80de24:	10a2dc04 	addi	r2,r2,-29840
  80de28:	f800283a 	ret

0080de2c <__locale_mb_cur_max>:
  80de2c:	008020b4 	movhi	r2,130
  80de30:	10a8f104 	addi	r2,r2,-23612
  80de34:	10800017 	ldw	r2,0(r2)
  80de38:	f800283a 	ret

0080de3c <__locale_msgcharset>:
  80de3c:	008020b4 	movhi	r2,130
  80de40:	10a2d404 	addi	r2,r2,-29872
  80de44:	f800283a 	ret

0080de48 <__locale_cjk_lang>:
  80de48:	0005883a 	mov	r2,zero
  80de4c:	f800283a 	ret

0080de50 <_localeconv_r>:
  80de50:	008020b4 	movhi	r2,130
  80de54:	10a2e404 	addi	r2,r2,-29808
  80de58:	f800283a 	ret

0080de5c <setlocale>:
  80de5c:	008020b4 	movhi	r2,130
  80de60:	10a8f004 	addi	r2,r2,-23616
  80de64:	280d883a 	mov	r6,r5
  80de68:	200b883a 	mov	r5,r4
  80de6c:	11000017 	ldw	r4,0(r2)
  80de70:	080dda41 	jmpi	80dda4 <_setlocale_r>

0080de74 <localeconv>:
  80de74:	008020b4 	movhi	r2,130
  80de78:	10a2e404 	addi	r2,r2,-29808
  80de7c:	f800283a 	ret

0080de80 <__smakebuf_r>:
  80de80:	2880030b 	ldhu	r2,12(r5)
  80de84:	10c0008c 	andi	r3,r2,2
  80de88:	1800411e 	bne	r3,zero,80df90 <__smakebuf_r+0x110>
  80de8c:	deffec04 	addi	sp,sp,-80
  80de90:	dc000f15 	stw	r16,60(sp)
  80de94:	2821883a 	mov	r16,r5
  80de98:	2940038f 	ldh	r5,14(r5)
  80de9c:	dc401015 	stw	r17,64(sp)
  80dea0:	dfc01315 	stw	ra,76(sp)
  80dea4:	dcc01215 	stw	r19,72(sp)
  80dea8:	dc801115 	stw	r18,68(sp)
  80deac:	2023883a 	mov	r17,r4
  80deb0:	28001c16 	blt	r5,zero,80df24 <__smakebuf_r+0xa4>
  80deb4:	d80d883a 	mov	r6,sp
  80deb8:	08119dc0 	call	8119dc <_fstat_r>
  80debc:	10001816 	blt	r2,zero,80df20 <__smakebuf_r+0xa0>
  80dec0:	d8800117 	ldw	r2,4(sp)
  80dec4:	00e00014 	movui	r3,32768
  80dec8:	10bc000c 	andi	r2,r2,61440
  80decc:	14c80020 	cmpeqi	r19,r2,8192
  80ded0:	10c03726 	beq	r2,r3,80dfb0 <__smakebuf_r+0x130>
  80ded4:	80c0030b 	ldhu	r3,12(r16)
  80ded8:	18c20014 	ori	r3,r3,2048
  80dedc:	80c0030d 	sth	r3,12(r16)
  80dee0:	00c80004 	movi	r3,8192
  80dee4:	10c0521e 	bne	r2,r3,80e030 <__smakebuf_r+0x1b0>
  80dee8:	8140038f 	ldh	r5,14(r16)
  80deec:	8809883a 	mov	r4,r17
  80def0:	0811ef40 	call	811ef4 <_isatty_r>
  80def4:	10004c26 	beq	r2,zero,80e028 <__smakebuf_r+0x1a8>
  80def8:	8080030b 	ldhu	r2,12(r16)
  80defc:	80c010c4 	addi	r3,r16,67
  80df00:	80c00015 	stw	r3,0(r16)
  80df04:	10800054 	ori	r2,r2,1
  80df08:	8080030d 	sth	r2,12(r16)
  80df0c:	00800044 	movi	r2,1
  80df10:	80c00415 	stw	r3,16(r16)
  80df14:	80800515 	stw	r2,20(r16)
  80df18:	04810004 	movi	r18,1024
  80df1c:	00000706 	br	80df3c <__smakebuf_r+0xbc>
  80df20:	8080030b 	ldhu	r2,12(r16)
  80df24:	10c0200c 	andi	r3,r2,128
  80df28:	18001f1e 	bne	r3,zero,80dfa8 <__smakebuf_r+0x128>
  80df2c:	04810004 	movi	r18,1024
  80df30:	10820014 	ori	r2,r2,2048
  80df34:	8080030d 	sth	r2,12(r16)
  80df38:	0027883a 	mov	r19,zero
  80df3c:	900b883a 	mov	r5,r18
  80df40:	8809883a 	mov	r4,r17
  80df44:	080e03c0 	call	80e03c <_malloc_r>
  80df48:	10002c26 	beq	r2,zero,80dffc <__smakebuf_r+0x17c>
  80df4c:	80c0030b 	ldhu	r3,12(r16)
  80df50:	01002074 	movhi	r4,129
  80df54:	21351404 	addi	r4,r4,-11184
  80df58:	89000f15 	stw	r4,60(r17)
  80df5c:	18c02014 	ori	r3,r3,128
  80df60:	80c0030d 	sth	r3,12(r16)
  80df64:	80800015 	stw	r2,0(r16)
  80df68:	80800415 	stw	r2,16(r16)
  80df6c:	84800515 	stw	r18,20(r16)
  80df70:	98001a1e 	bne	r19,zero,80dfdc <__smakebuf_r+0x15c>
  80df74:	dfc01317 	ldw	ra,76(sp)
  80df78:	dcc01217 	ldw	r19,72(sp)
  80df7c:	dc801117 	ldw	r18,68(sp)
  80df80:	dc401017 	ldw	r17,64(sp)
  80df84:	dc000f17 	ldw	r16,60(sp)
  80df88:	dec01404 	addi	sp,sp,80
  80df8c:	f800283a 	ret
  80df90:	288010c4 	addi	r2,r5,67
  80df94:	28800015 	stw	r2,0(r5)
  80df98:	28800415 	stw	r2,16(r5)
  80df9c:	00800044 	movi	r2,1
  80dfa0:	28800515 	stw	r2,20(r5)
  80dfa4:	f800283a 	ret
  80dfa8:	04801004 	movi	r18,64
  80dfac:	003fe006 	br	80df30 <__alt_mem_onchip_mem+0xff805f30>
  80dfb0:	81000a17 	ldw	r4,40(r16)
  80dfb4:	00c02074 	movhi	r3,129
  80dfb8:	18ff4e04 	addi	r3,r3,-712
  80dfbc:	20ffc51e 	bne	r4,r3,80ded4 <__alt_mem_onchip_mem+0xff805ed4>
  80dfc0:	8080030b 	ldhu	r2,12(r16)
  80dfc4:	04810004 	movi	r18,1024
  80dfc8:	84801315 	stw	r18,76(r16)
  80dfcc:	1484b03a 	or	r2,r2,r18
  80dfd0:	8080030d 	sth	r2,12(r16)
  80dfd4:	0027883a 	mov	r19,zero
  80dfd8:	003fd806 	br	80df3c <__alt_mem_onchip_mem+0xff805f3c>
  80dfdc:	8140038f 	ldh	r5,14(r16)
  80dfe0:	8809883a 	mov	r4,r17
  80dfe4:	0811ef40 	call	811ef4 <_isatty_r>
  80dfe8:	103fe226 	beq	r2,zero,80df74 <__alt_mem_onchip_mem+0xff805f74>
  80dfec:	8080030b 	ldhu	r2,12(r16)
  80dff0:	10800054 	ori	r2,r2,1
  80dff4:	8080030d 	sth	r2,12(r16)
  80dff8:	003fde06 	br	80df74 <__alt_mem_onchip_mem+0xff805f74>
  80dffc:	8080030b 	ldhu	r2,12(r16)
  80e000:	10c0800c 	andi	r3,r2,512
  80e004:	183fdb1e 	bne	r3,zero,80df74 <__alt_mem_onchip_mem+0xff805f74>
  80e008:	10800094 	ori	r2,r2,2
  80e00c:	80c010c4 	addi	r3,r16,67
  80e010:	8080030d 	sth	r2,12(r16)
  80e014:	00800044 	movi	r2,1
  80e018:	80c00015 	stw	r3,0(r16)
  80e01c:	80c00415 	stw	r3,16(r16)
  80e020:	80800515 	stw	r2,20(r16)
  80e024:	003fd306 	br	80df74 <__alt_mem_onchip_mem+0xff805f74>
  80e028:	04810004 	movi	r18,1024
  80e02c:	003fc306 	br	80df3c <__alt_mem_onchip_mem+0xff805f3c>
  80e030:	0027883a 	mov	r19,zero
  80e034:	04810004 	movi	r18,1024
  80e038:	003fc006 	br	80df3c <__alt_mem_onchip_mem+0xff805f3c>

0080e03c <_malloc_r>:
  80e03c:	defff504 	addi	sp,sp,-44
  80e040:	dc800315 	stw	r18,12(sp)
  80e044:	dfc00a15 	stw	ra,40(sp)
  80e048:	df000915 	stw	fp,36(sp)
  80e04c:	ddc00815 	stw	r23,32(sp)
  80e050:	dd800715 	stw	r22,28(sp)
  80e054:	dd400615 	stw	r21,24(sp)
  80e058:	dd000515 	stw	r20,20(sp)
  80e05c:	dcc00415 	stw	r19,16(sp)
  80e060:	dc400215 	stw	r17,8(sp)
  80e064:	dc000115 	stw	r16,4(sp)
  80e068:	288002c4 	addi	r2,r5,11
  80e06c:	00c00584 	movi	r3,22
  80e070:	2025883a 	mov	r18,r4
  80e074:	18807f2e 	bgeu	r3,r2,80e274 <_malloc_r+0x238>
  80e078:	047ffe04 	movi	r17,-8
  80e07c:	1462703a 	and	r17,r2,r17
  80e080:	8800a316 	blt	r17,zero,80e310 <_malloc_r+0x2d4>
  80e084:	8940a236 	bltu	r17,r5,80e310 <_malloc_r+0x2d4>
  80e088:	08145d80 	call	8145d8 <__malloc_lock>
  80e08c:	00807dc4 	movi	r2,503
  80e090:	1441e92e 	bgeu	r2,r17,80e838 <_malloc_r+0x7fc>
  80e094:	8804d27a 	srli	r2,r17,9
  80e098:	1000a126 	beq	r2,zero,80e320 <_malloc_r+0x2e4>
  80e09c:	00c00104 	movi	r3,4
  80e0a0:	18811e36 	bltu	r3,r2,80e51c <_malloc_r+0x4e0>
  80e0a4:	8804d1ba 	srli	r2,r17,6
  80e0a8:	12000e44 	addi	r8,r2,57
  80e0ac:	11c00e04 	addi	r7,r2,56
  80e0b0:	4209883a 	add	r4,r8,r8
  80e0b4:	04c020b4 	movhi	r19,130
  80e0b8:	2109883a 	add	r4,r4,r4
  80e0bc:	9ce2f204 	addi	r19,r19,-29752
  80e0c0:	2109883a 	add	r4,r4,r4
  80e0c4:	9909883a 	add	r4,r19,r4
  80e0c8:	24000117 	ldw	r16,4(r4)
  80e0cc:	213ffe04 	addi	r4,r4,-8
  80e0d0:	24009726 	beq	r4,r16,80e330 <_malloc_r+0x2f4>
  80e0d4:	80800117 	ldw	r2,4(r16)
  80e0d8:	01bfff04 	movi	r6,-4
  80e0dc:	014003c4 	movi	r5,15
  80e0e0:	1184703a 	and	r2,r2,r6
  80e0e4:	1447c83a 	sub	r3,r2,r17
  80e0e8:	28c00716 	blt	r5,r3,80e108 <_malloc_r+0xcc>
  80e0ec:	1800920e 	bge	r3,zero,80e338 <_malloc_r+0x2fc>
  80e0f0:	84000317 	ldw	r16,12(r16)
  80e0f4:	24008e26 	beq	r4,r16,80e330 <_malloc_r+0x2f4>
  80e0f8:	80800117 	ldw	r2,4(r16)
  80e0fc:	1184703a 	and	r2,r2,r6
  80e100:	1447c83a 	sub	r3,r2,r17
  80e104:	28fff90e 	bge	r5,r3,80e0ec <__alt_mem_onchip_mem+0xff8060ec>
  80e108:	3809883a 	mov	r4,r7
  80e10c:	018020b4 	movhi	r6,130
  80e110:	9c000417 	ldw	r16,16(r19)
  80e114:	31a2f204 	addi	r6,r6,-29752
  80e118:	32000204 	addi	r8,r6,8
  80e11c:	82013426 	beq	r16,r8,80e5f0 <_malloc_r+0x5b4>
  80e120:	80c00117 	ldw	r3,4(r16)
  80e124:	00bfff04 	movi	r2,-4
  80e128:	188e703a 	and	r7,r3,r2
  80e12c:	3c45c83a 	sub	r2,r7,r17
  80e130:	00c003c4 	movi	r3,15
  80e134:	18811f16 	blt	r3,r2,80e5b4 <_malloc_r+0x578>
  80e138:	32000515 	stw	r8,20(r6)
  80e13c:	32000415 	stw	r8,16(r6)
  80e140:	10007f0e 	bge	r2,zero,80e340 <_malloc_r+0x304>
  80e144:	00807fc4 	movi	r2,511
  80e148:	11c0fd36 	bltu	r2,r7,80e540 <_malloc_r+0x504>
  80e14c:	3806d0fa 	srli	r3,r7,3
  80e150:	01c00044 	movi	r7,1
  80e154:	30800117 	ldw	r2,4(r6)
  80e158:	19400044 	addi	r5,r3,1
  80e15c:	294b883a 	add	r5,r5,r5
  80e160:	1807d0ba 	srai	r3,r3,2
  80e164:	294b883a 	add	r5,r5,r5
  80e168:	294b883a 	add	r5,r5,r5
  80e16c:	298b883a 	add	r5,r5,r6
  80e170:	38c6983a 	sll	r3,r7,r3
  80e174:	29c00017 	ldw	r7,0(r5)
  80e178:	2a7ffe04 	addi	r9,r5,-8
  80e17c:	1886b03a 	or	r3,r3,r2
  80e180:	82400315 	stw	r9,12(r16)
  80e184:	81c00215 	stw	r7,8(r16)
  80e188:	30c00115 	stw	r3,4(r6)
  80e18c:	2c000015 	stw	r16,0(r5)
  80e190:	3c000315 	stw	r16,12(r7)
  80e194:	2005d0ba 	srai	r2,r4,2
  80e198:	01400044 	movi	r5,1
  80e19c:	288a983a 	sll	r5,r5,r2
  80e1a0:	19406f36 	bltu	r3,r5,80e360 <_malloc_r+0x324>
  80e1a4:	28c4703a 	and	r2,r5,r3
  80e1a8:	10000a1e 	bne	r2,zero,80e1d4 <_malloc_r+0x198>
  80e1ac:	00bfff04 	movi	r2,-4
  80e1b0:	294b883a 	add	r5,r5,r5
  80e1b4:	2088703a 	and	r4,r4,r2
  80e1b8:	28c4703a 	and	r2,r5,r3
  80e1bc:	21000104 	addi	r4,r4,4
  80e1c0:	1000041e 	bne	r2,zero,80e1d4 <_malloc_r+0x198>
  80e1c4:	294b883a 	add	r5,r5,r5
  80e1c8:	28c4703a 	and	r2,r5,r3
  80e1cc:	21000104 	addi	r4,r4,4
  80e1d0:	103ffc26 	beq	r2,zero,80e1c4 <__alt_mem_onchip_mem+0xff8061c4>
  80e1d4:	02bfff04 	movi	r10,-4
  80e1d8:	024003c4 	movi	r9,15
  80e1dc:	21800044 	addi	r6,r4,1
  80e1e0:	318d883a 	add	r6,r6,r6
  80e1e4:	318d883a 	add	r6,r6,r6
  80e1e8:	318d883a 	add	r6,r6,r6
  80e1ec:	998d883a 	add	r6,r19,r6
  80e1f0:	333ffe04 	addi	r12,r6,-8
  80e1f4:	2017883a 	mov	r11,r4
  80e1f8:	31800104 	addi	r6,r6,4
  80e1fc:	34000017 	ldw	r16,0(r6)
  80e200:	31fffd04 	addi	r7,r6,-12
  80e204:	81c0041e 	bne	r16,r7,80e218 <_malloc_r+0x1dc>
  80e208:	0000fb06 	br	80e5f8 <_malloc_r+0x5bc>
  80e20c:	1801030e 	bge	r3,zero,80e61c <_malloc_r+0x5e0>
  80e210:	84000317 	ldw	r16,12(r16)
  80e214:	81c0f826 	beq	r16,r7,80e5f8 <_malloc_r+0x5bc>
  80e218:	80800117 	ldw	r2,4(r16)
  80e21c:	1284703a 	and	r2,r2,r10
  80e220:	1447c83a 	sub	r3,r2,r17
  80e224:	48fff90e 	bge	r9,r3,80e20c <__alt_mem_onchip_mem+0xff80620c>
  80e228:	80800317 	ldw	r2,12(r16)
  80e22c:	81000217 	ldw	r4,8(r16)
  80e230:	89400054 	ori	r5,r17,1
  80e234:	81400115 	stw	r5,4(r16)
  80e238:	20800315 	stw	r2,12(r4)
  80e23c:	11000215 	stw	r4,8(r2)
  80e240:	8463883a 	add	r17,r16,r17
  80e244:	9c400515 	stw	r17,20(r19)
  80e248:	9c400415 	stw	r17,16(r19)
  80e24c:	18800054 	ori	r2,r3,1
  80e250:	88800115 	stw	r2,4(r17)
  80e254:	8a000315 	stw	r8,12(r17)
  80e258:	8a000215 	stw	r8,8(r17)
  80e25c:	88e3883a 	add	r17,r17,r3
  80e260:	88c00015 	stw	r3,0(r17)
  80e264:	9009883a 	mov	r4,r18
  80e268:	08145fc0 	call	8145fc <__malloc_unlock>
  80e26c:	80800204 	addi	r2,r16,8
  80e270:	00001b06 	br	80e2e0 <_malloc_r+0x2a4>
  80e274:	04400404 	movi	r17,16
  80e278:	89402536 	bltu	r17,r5,80e310 <_malloc_r+0x2d4>
  80e27c:	08145d80 	call	8145d8 <__malloc_lock>
  80e280:	00800184 	movi	r2,6
  80e284:	01000084 	movi	r4,2
  80e288:	04c020b4 	movhi	r19,130
  80e28c:	1085883a 	add	r2,r2,r2
  80e290:	9ce2f204 	addi	r19,r19,-29752
  80e294:	1085883a 	add	r2,r2,r2
  80e298:	9885883a 	add	r2,r19,r2
  80e29c:	14000117 	ldw	r16,4(r2)
  80e2a0:	10fffe04 	addi	r3,r2,-8
  80e2a4:	80c0d926 	beq	r16,r3,80e60c <_malloc_r+0x5d0>
  80e2a8:	80c00117 	ldw	r3,4(r16)
  80e2ac:	81000317 	ldw	r4,12(r16)
  80e2b0:	00bfff04 	movi	r2,-4
  80e2b4:	1884703a 	and	r2,r3,r2
  80e2b8:	81400217 	ldw	r5,8(r16)
  80e2bc:	8085883a 	add	r2,r16,r2
  80e2c0:	10c00117 	ldw	r3,4(r2)
  80e2c4:	29000315 	stw	r4,12(r5)
  80e2c8:	21400215 	stw	r5,8(r4)
  80e2cc:	18c00054 	ori	r3,r3,1
  80e2d0:	10c00115 	stw	r3,4(r2)
  80e2d4:	9009883a 	mov	r4,r18
  80e2d8:	08145fc0 	call	8145fc <__malloc_unlock>
  80e2dc:	80800204 	addi	r2,r16,8
  80e2e0:	dfc00a17 	ldw	ra,40(sp)
  80e2e4:	df000917 	ldw	fp,36(sp)
  80e2e8:	ddc00817 	ldw	r23,32(sp)
  80e2ec:	dd800717 	ldw	r22,28(sp)
  80e2f0:	dd400617 	ldw	r21,24(sp)
  80e2f4:	dd000517 	ldw	r20,20(sp)
  80e2f8:	dcc00417 	ldw	r19,16(sp)
  80e2fc:	dc800317 	ldw	r18,12(sp)
  80e300:	dc400217 	ldw	r17,8(sp)
  80e304:	dc000117 	ldw	r16,4(sp)
  80e308:	dec00b04 	addi	sp,sp,44
  80e30c:	f800283a 	ret
  80e310:	00800304 	movi	r2,12
  80e314:	90800015 	stw	r2,0(r18)
  80e318:	0005883a 	mov	r2,zero
  80e31c:	003ff006 	br	80e2e0 <__alt_mem_onchip_mem+0xff8062e0>
  80e320:	01002004 	movi	r4,128
  80e324:	02001004 	movi	r8,64
  80e328:	01c00fc4 	movi	r7,63
  80e32c:	003f6106 	br	80e0b4 <__alt_mem_onchip_mem+0xff8060b4>
  80e330:	4009883a 	mov	r4,r8
  80e334:	003f7506 	br	80e10c <__alt_mem_onchip_mem+0xff80610c>
  80e338:	81000317 	ldw	r4,12(r16)
  80e33c:	003fde06 	br	80e2b8 <__alt_mem_onchip_mem+0xff8062b8>
  80e340:	81c5883a 	add	r2,r16,r7
  80e344:	11400117 	ldw	r5,4(r2)
  80e348:	9009883a 	mov	r4,r18
  80e34c:	29400054 	ori	r5,r5,1
  80e350:	11400115 	stw	r5,4(r2)
  80e354:	08145fc0 	call	8145fc <__malloc_unlock>
  80e358:	80800204 	addi	r2,r16,8
  80e35c:	003fe006 	br	80e2e0 <__alt_mem_onchip_mem+0xff8062e0>
  80e360:	9c000217 	ldw	r16,8(r19)
  80e364:	00bfff04 	movi	r2,-4
  80e368:	85800117 	ldw	r22,4(r16)
  80e36c:	b0ac703a 	and	r22,r22,r2
  80e370:	b4400336 	bltu	r22,r17,80e380 <_malloc_r+0x344>
  80e374:	b445c83a 	sub	r2,r22,r17
  80e378:	00c003c4 	movi	r3,15
  80e37c:	18805d16 	blt	r3,r2,80e4f4 <_malloc_r+0x4b8>
  80e380:	05c020b4 	movhi	r23,130
  80e384:	008020b4 	movhi	r2,130
  80e388:	10b04004 	addi	r2,r2,-16128
  80e38c:	bde8f204 	addi	r23,r23,-23608
  80e390:	15400017 	ldw	r21,0(r2)
  80e394:	b8c00017 	ldw	r3,0(r23)
  80e398:	00bfffc4 	movi	r2,-1
  80e39c:	858d883a 	add	r6,r16,r22
  80e3a0:	8d6b883a 	add	r21,r17,r21
  80e3a4:	1880ea26 	beq	r3,r2,80e750 <_malloc_r+0x714>
  80e3a8:	ad4403c4 	addi	r21,r21,4111
  80e3ac:	00bc0004 	movi	r2,-4096
  80e3b0:	a8aa703a 	and	r21,r21,r2
  80e3b4:	a80b883a 	mov	r5,r21
  80e3b8:	9009883a 	mov	r4,r18
  80e3bc:	d9800015 	stw	r6,0(sp)
  80e3c0:	080fc0c0 	call	80fc0c <_sbrk_r>
  80e3c4:	1029883a 	mov	r20,r2
  80e3c8:	00bfffc4 	movi	r2,-1
  80e3cc:	d9800017 	ldw	r6,0(sp)
  80e3d0:	a080e826 	beq	r20,r2,80e774 <_malloc_r+0x738>
  80e3d4:	a180a636 	bltu	r20,r6,80e670 <_malloc_r+0x634>
  80e3d8:	070020b4 	movhi	fp,130
  80e3dc:	e7304904 	addi	fp,fp,-16092
  80e3e0:	e0800017 	ldw	r2,0(fp)
  80e3e4:	a887883a 	add	r3,r21,r2
  80e3e8:	e0c00015 	stw	r3,0(fp)
  80e3ec:	3500e626 	beq	r6,r20,80e788 <_malloc_r+0x74c>
  80e3f0:	b9000017 	ldw	r4,0(r23)
  80e3f4:	00bfffc4 	movi	r2,-1
  80e3f8:	2080ee26 	beq	r4,r2,80e7b4 <_malloc_r+0x778>
  80e3fc:	a185c83a 	sub	r2,r20,r6
  80e400:	10c5883a 	add	r2,r2,r3
  80e404:	e0800015 	stw	r2,0(fp)
  80e408:	a0c001cc 	andi	r3,r20,7
  80e40c:	1800bc26 	beq	r3,zero,80e700 <_malloc_r+0x6c4>
  80e410:	a0e9c83a 	sub	r20,r20,r3
  80e414:	00840204 	movi	r2,4104
  80e418:	a5000204 	addi	r20,r20,8
  80e41c:	10c7c83a 	sub	r3,r2,r3
  80e420:	a545883a 	add	r2,r20,r21
  80e424:	1083ffcc 	andi	r2,r2,4095
  80e428:	18abc83a 	sub	r21,r3,r2
  80e42c:	a80b883a 	mov	r5,r21
  80e430:	9009883a 	mov	r4,r18
  80e434:	080fc0c0 	call	80fc0c <_sbrk_r>
  80e438:	00ffffc4 	movi	r3,-1
  80e43c:	10c0e126 	beq	r2,r3,80e7c4 <_malloc_r+0x788>
  80e440:	1505c83a 	sub	r2,r2,r20
  80e444:	1545883a 	add	r2,r2,r21
  80e448:	10800054 	ori	r2,r2,1
  80e44c:	e0c00017 	ldw	r3,0(fp)
  80e450:	9d000215 	stw	r20,8(r19)
  80e454:	a0800115 	stw	r2,4(r20)
  80e458:	a8c7883a 	add	r3,r21,r3
  80e45c:	e0c00015 	stw	r3,0(fp)
  80e460:	84c00e26 	beq	r16,r19,80e49c <_malloc_r+0x460>
  80e464:	018003c4 	movi	r6,15
  80e468:	3580a72e 	bgeu	r6,r22,80e708 <_malloc_r+0x6cc>
  80e46c:	81400117 	ldw	r5,4(r16)
  80e470:	013ffe04 	movi	r4,-8
  80e474:	b0bffd04 	addi	r2,r22,-12
  80e478:	1104703a 	and	r2,r2,r4
  80e47c:	2900004c 	andi	r4,r5,1
  80e480:	2088b03a 	or	r4,r4,r2
  80e484:	81000115 	stw	r4,4(r16)
  80e488:	01400144 	movi	r5,5
  80e48c:	8089883a 	add	r4,r16,r2
  80e490:	21400115 	stw	r5,4(r4)
  80e494:	21400215 	stw	r5,8(r4)
  80e498:	3080cd36 	bltu	r6,r2,80e7d0 <_malloc_r+0x794>
  80e49c:	008020b4 	movhi	r2,130
  80e4a0:	10b03f04 	addi	r2,r2,-16132
  80e4a4:	11000017 	ldw	r4,0(r2)
  80e4a8:	20c0012e 	bgeu	r4,r3,80e4b0 <_malloc_r+0x474>
  80e4ac:	10c00015 	stw	r3,0(r2)
  80e4b0:	008020b4 	movhi	r2,130
  80e4b4:	10b03e04 	addi	r2,r2,-16136
  80e4b8:	11000017 	ldw	r4,0(r2)
  80e4bc:	9c000217 	ldw	r16,8(r19)
  80e4c0:	20c0012e 	bgeu	r4,r3,80e4c8 <_malloc_r+0x48c>
  80e4c4:	10c00015 	stw	r3,0(r2)
  80e4c8:	80c00117 	ldw	r3,4(r16)
  80e4cc:	00bfff04 	movi	r2,-4
  80e4d0:	1886703a 	and	r3,r3,r2
  80e4d4:	1c45c83a 	sub	r2,r3,r17
  80e4d8:	1c400236 	bltu	r3,r17,80e4e4 <_malloc_r+0x4a8>
  80e4dc:	00c003c4 	movi	r3,15
  80e4e0:	18800416 	blt	r3,r2,80e4f4 <_malloc_r+0x4b8>
  80e4e4:	9009883a 	mov	r4,r18
  80e4e8:	08145fc0 	call	8145fc <__malloc_unlock>
  80e4ec:	0005883a 	mov	r2,zero
  80e4f0:	003f7b06 	br	80e2e0 <__alt_mem_onchip_mem+0xff8062e0>
  80e4f4:	88c00054 	ori	r3,r17,1
  80e4f8:	80c00115 	stw	r3,4(r16)
  80e4fc:	8463883a 	add	r17,r16,r17
  80e500:	10800054 	ori	r2,r2,1
  80e504:	9c400215 	stw	r17,8(r19)
  80e508:	88800115 	stw	r2,4(r17)
  80e50c:	9009883a 	mov	r4,r18
  80e510:	08145fc0 	call	8145fc <__malloc_unlock>
  80e514:	80800204 	addi	r2,r16,8
  80e518:	003f7106 	br	80e2e0 <__alt_mem_onchip_mem+0xff8062e0>
  80e51c:	00c00504 	movi	r3,20
  80e520:	18804a2e 	bgeu	r3,r2,80e64c <_malloc_r+0x610>
  80e524:	00c01504 	movi	r3,84
  80e528:	18806e36 	bltu	r3,r2,80e6e4 <_malloc_r+0x6a8>
  80e52c:	8804d33a 	srli	r2,r17,12
  80e530:	12001bc4 	addi	r8,r2,111
  80e534:	11c01b84 	addi	r7,r2,110
  80e538:	4209883a 	add	r4,r8,r8
  80e53c:	003edd06 	br	80e0b4 <__alt_mem_onchip_mem+0xff8060b4>
  80e540:	3804d27a 	srli	r2,r7,9
  80e544:	00c00104 	movi	r3,4
  80e548:	1880442e 	bgeu	r3,r2,80e65c <_malloc_r+0x620>
  80e54c:	00c00504 	movi	r3,20
  80e550:	18808136 	bltu	r3,r2,80e758 <_malloc_r+0x71c>
  80e554:	11401704 	addi	r5,r2,92
  80e558:	10c016c4 	addi	r3,r2,91
  80e55c:	294b883a 	add	r5,r5,r5
  80e560:	294b883a 	add	r5,r5,r5
  80e564:	294b883a 	add	r5,r5,r5
  80e568:	994b883a 	add	r5,r19,r5
  80e56c:	28800017 	ldw	r2,0(r5)
  80e570:	018020b4 	movhi	r6,130
  80e574:	297ffe04 	addi	r5,r5,-8
  80e578:	31a2f204 	addi	r6,r6,-29752
  80e57c:	28806526 	beq	r5,r2,80e714 <_malloc_r+0x6d8>
  80e580:	01bfff04 	movi	r6,-4
  80e584:	10c00117 	ldw	r3,4(r2)
  80e588:	1986703a 	and	r3,r3,r6
  80e58c:	38c0022e 	bgeu	r7,r3,80e598 <_malloc_r+0x55c>
  80e590:	10800217 	ldw	r2,8(r2)
  80e594:	28bffb1e 	bne	r5,r2,80e584 <__alt_mem_onchip_mem+0xff806584>
  80e598:	11400317 	ldw	r5,12(r2)
  80e59c:	98c00117 	ldw	r3,4(r19)
  80e5a0:	81400315 	stw	r5,12(r16)
  80e5a4:	80800215 	stw	r2,8(r16)
  80e5a8:	2c000215 	stw	r16,8(r5)
  80e5ac:	14000315 	stw	r16,12(r2)
  80e5b0:	003ef806 	br	80e194 <__alt_mem_onchip_mem+0xff806194>
  80e5b4:	88c00054 	ori	r3,r17,1
  80e5b8:	80c00115 	stw	r3,4(r16)
  80e5bc:	8463883a 	add	r17,r16,r17
  80e5c0:	34400515 	stw	r17,20(r6)
  80e5c4:	34400415 	stw	r17,16(r6)
  80e5c8:	10c00054 	ori	r3,r2,1
  80e5cc:	8a000315 	stw	r8,12(r17)
  80e5d0:	8a000215 	stw	r8,8(r17)
  80e5d4:	88c00115 	stw	r3,4(r17)
  80e5d8:	88a3883a 	add	r17,r17,r2
  80e5dc:	88800015 	stw	r2,0(r17)
  80e5e0:	9009883a 	mov	r4,r18
  80e5e4:	08145fc0 	call	8145fc <__malloc_unlock>
  80e5e8:	80800204 	addi	r2,r16,8
  80e5ec:	003f3c06 	br	80e2e0 <__alt_mem_onchip_mem+0xff8062e0>
  80e5f0:	30c00117 	ldw	r3,4(r6)
  80e5f4:	003ee706 	br	80e194 <__alt_mem_onchip_mem+0xff806194>
  80e5f8:	5ac00044 	addi	r11,r11,1
  80e5fc:	588000cc 	andi	r2,r11,3
  80e600:	31800204 	addi	r6,r6,8
  80e604:	103efd1e 	bne	r2,zero,80e1fc <__alt_mem_onchip_mem+0xff8061fc>
  80e608:	00002406 	br	80e69c <_malloc_r+0x660>
  80e60c:	14000317 	ldw	r16,12(r2)
  80e610:	143f251e 	bne	r2,r16,80e2a8 <__alt_mem_onchip_mem+0xff8062a8>
  80e614:	21000084 	addi	r4,r4,2
  80e618:	003ebc06 	br	80e10c <__alt_mem_onchip_mem+0xff80610c>
  80e61c:	8085883a 	add	r2,r16,r2
  80e620:	10c00117 	ldw	r3,4(r2)
  80e624:	81000317 	ldw	r4,12(r16)
  80e628:	81400217 	ldw	r5,8(r16)
  80e62c:	18c00054 	ori	r3,r3,1
  80e630:	10c00115 	stw	r3,4(r2)
  80e634:	29000315 	stw	r4,12(r5)
  80e638:	21400215 	stw	r5,8(r4)
  80e63c:	9009883a 	mov	r4,r18
  80e640:	08145fc0 	call	8145fc <__malloc_unlock>
  80e644:	80800204 	addi	r2,r16,8
  80e648:	003f2506 	br	80e2e0 <__alt_mem_onchip_mem+0xff8062e0>
  80e64c:	12001704 	addi	r8,r2,92
  80e650:	11c016c4 	addi	r7,r2,91
  80e654:	4209883a 	add	r4,r8,r8
  80e658:	003e9606 	br	80e0b4 <__alt_mem_onchip_mem+0xff8060b4>
  80e65c:	3804d1ba 	srli	r2,r7,6
  80e660:	11400e44 	addi	r5,r2,57
  80e664:	10c00e04 	addi	r3,r2,56
  80e668:	294b883a 	add	r5,r5,r5
  80e66c:	003fbc06 	br	80e560 <__alt_mem_onchip_mem+0xff806560>
  80e670:	84ff5926 	beq	r16,r19,80e3d8 <__alt_mem_onchip_mem+0xff8063d8>
  80e674:	008020b4 	movhi	r2,130
  80e678:	10a2f204 	addi	r2,r2,-29752
  80e67c:	14000217 	ldw	r16,8(r2)
  80e680:	00bfff04 	movi	r2,-4
  80e684:	80c00117 	ldw	r3,4(r16)
  80e688:	1886703a 	and	r3,r3,r2
  80e68c:	003f9106 	br	80e4d4 <__alt_mem_onchip_mem+0xff8064d4>
  80e690:	60800217 	ldw	r2,8(r12)
  80e694:	213fffc4 	addi	r4,r4,-1
  80e698:	1300651e 	bne	r2,r12,80e830 <_malloc_r+0x7f4>
  80e69c:	208000cc 	andi	r2,r4,3
  80e6a0:	633ffe04 	addi	r12,r12,-8
  80e6a4:	103ffa1e 	bne	r2,zero,80e690 <__alt_mem_onchip_mem+0xff806690>
  80e6a8:	98800117 	ldw	r2,4(r19)
  80e6ac:	0146303a 	nor	r3,zero,r5
  80e6b0:	1884703a 	and	r2,r3,r2
  80e6b4:	98800115 	stw	r2,4(r19)
  80e6b8:	294b883a 	add	r5,r5,r5
  80e6bc:	117f2836 	bltu	r2,r5,80e360 <__alt_mem_onchip_mem+0xff806360>
  80e6c0:	283f2726 	beq	r5,zero,80e360 <__alt_mem_onchip_mem+0xff806360>
  80e6c4:	2886703a 	and	r3,r5,r2
  80e6c8:	5809883a 	mov	r4,r11
  80e6cc:	183ec31e 	bne	r3,zero,80e1dc <__alt_mem_onchip_mem+0xff8061dc>
  80e6d0:	294b883a 	add	r5,r5,r5
  80e6d4:	2886703a 	and	r3,r5,r2
  80e6d8:	21000104 	addi	r4,r4,4
  80e6dc:	183ffc26 	beq	r3,zero,80e6d0 <__alt_mem_onchip_mem+0xff8066d0>
  80e6e0:	003ebe06 	br	80e1dc <__alt_mem_onchip_mem+0xff8061dc>
  80e6e4:	00c05504 	movi	r3,340
  80e6e8:	18801236 	bltu	r3,r2,80e734 <_malloc_r+0x6f8>
  80e6ec:	8804d3fa 	srli	r2,r17,15
  80e6f0:	12001e04 	addi	r8,r2,120
  80e6f4:	11c01dc4 	addi	r7,r2,119
  80e6f8:	4209883a 	add	r4,r8,r8
  80e6fc:	003e6d06 	br	80e0b4 <__alt_mem_onchip_mem+0xff8060b4>
  80e700:	00c40004 	movi	r3,4096
  80e704:	003f4606 	br	80e420 <__alt_mem_onchip_mem+0xff806420>
  80e708:	00800044 	movi	r2,1
  80e70c:	a0800115 	stw	r2,4(r20)
  80e710:	003f7406 	br	80e4e4 <__alt_mem_onchip_mem+0xff8064e4>
  80e714:	1805d0ba 	srai	r2,r3,2
  80e718:	01c00044 	movi	r7,1
  80e71c:	30c00117 	ldw	r3,4(r6)
  80e720:	388e983a 	sll	r7,r7,r2
  80e724:	2805883a 	mov	r2,r5
  80e728:	38c6b03a 	or	r3,r7,r3
  80e72c:	30c00115 	stw	r3,4(r6)
  80e730:	003f9b06 	br	80e5a0 <__alt_mem_onchip_mem+0xff8065a0>
  80e734:	00c15504 	movi	r3,1364
  80e738:	18801a36 	bltu	r3,r2,80e7a4 <_malloc_r+0x768>
  80e73c:	8804d4ba 	srli	r2,r17,18
  80e740:	12001f44 	addi	r8,r2,125
  80e744:	11c01f04 	addi	r7,r2,124
  80e748:	4209883a 	add	r4,r8,r8
  80e74c:	003e5906 	br	80e0b4 <__alt_mem_onchip_mem+0xff8060b4>
  80e750:	ad400404 	addi	r21,r21,16
  80e754:	003f1706 	br	80e3b4 <__alt_mem_onchip_mem+0xff8063b4>
  80e758:	00c01504 	movi	r3,84
  80e75c:	18802336 	bltu	r3,r2,80e7ec <_malloc_r+0x7b0>
  80e760:	3804d33a 	srli	r2,r7,12
  80e764:	11401bc4 	addi	r5,r2,111
  80e768:	10c01b84 	addi	r3,r2,110
  80e76c:	294b883a 	add	r5,r5,r5
  80e770:	003f7b06 	br	80e560 <__alt_mem_onchip_mem+0xff806560>
  80e774:	9c000217 	ldw	r16,8(r19)
  80e778:	00bfff04 	movi	r2,-4
  80e77c:	80c00117 	ldw	r3,4(r16)
  80e780:	1886703a 	and	r3,r3,r2
  80e784:	003f5306 	br	80e4d4 <__alt_mem_onchip_mem+0xff8064d4>
  80e788:	3083ffcc 	andi	r2,r6,4095
  80e78c:	103f181e 	bne	r2,zero,80e3f0 <__alt_mem_onchip_mem+0xff8063f0>
  80e790:	99000217 	ldw	r4,8(r19)
  80e794:	b545883a 	add	r2,r22,r21
  80e798:	10800054 	ori	r2,r2,1
  80e79c:	20800115 	stw	r2,4(r4)
  80e7a0:	003f3e06 	br	80e49c <__alt_mem_onchip_mem+0xff80649c>
  80e7a4:	01003f84 	movi	r4,254
  80e7a8:	02001fc4 	movi	r8,127
  80e7ac:	01c01f84 	movi	r7,126
  80e7b0:	003e4006 	br	80e0b4 <__alt_mem_onchip_mem+0xff8060b4>
  80e7b4:	008020b4 	movhi	r2,130
  80e7b8:	10a8f204 	addi	r2,r2,-23608
  80e7bc:	15000015 	stw	r20,0(r2)
  80e7c0:	003f1106 	br	80e408 <__alt_mem_onchip_mem+0xff806408>
  80e7c4:	00800044 	movi	r2,1
  80e7c8:	002b883a 	mov	r21,zero
  80e7cc:	003f1f06 	br	80e44c <__alt_mem_onchip_mem+0xff80644c>
  80e7d0:	81400204 	addi	r5,r16,8
  80e7d4:	9009883a 	mov	r4,r18
  80e7d8:	080d90c0 	call	80d90c <_free_r>
  80e7dc:	008020b4 	movhi	r2,130
  80e7e0:	10b04904 	addi	r2,r2,-16092
  80e7e4:	10c00017 	ldw	r3,0(r2)
  80e7e8:	003f2c06 	br	80e49c <__alt_mem_onchip_mem+0xff80649c>
  80e7ec:	00c05504 	movi	r3,340
  80e7f0:	18800536 	bltu	r3,r2,80e808 <_malloc_r+0x7cc>
  80e7f4:	3804d3fa 	srli	r2,r7,15
  80e7f8:	11401e04 	addi	r5,r2,120
  80e7fc:	10c01dc4 	addi	r3,r2,119
  80e800:	294b883a 	add	r5,r5,r5
  80e804:	003f5606 	br	80e560 <__alt_mem_onchip_mem+0xff806560>
  80e808:	00c15504 	movi	r3,1364
  80e80c:	18800536 	bltu	r3,r2,80e824 <_malloc_r+0x7e8>
  80e810:	3804d4ba 	srli	r2,r7,18
  80e814:	11401f44 	addi	r5,r2,125
  80e818:	10c01f04 	addi	r3,r2,124
  80e81c:	294b883a 	add	r5,r5,r5
  80e820:	003f4f06 	br	80e560 <__alt_mem_onchip_mem+0xff806560>
  80e824:	01403f84 	movi	r5,254
  80e828:	00c01f84 	movi	r3,126
  80e82c:	003f4c06 	br	80e560 <__alt_mem_onchip_mem+0xff806560>
  80e830:	98800117 	ldw	r2,4(r19)
  80e834:	003fa006 	br	80e6b8 <__alt_mem_onchip_mem+0xff8066b8>
  80e838:	8808d0fa 	srli	r4,r17,3
  80e83c:	20800044 	addi	r2,r4,1
  80e840:	1085883a 	add	r2,r2,r2
  80e844:	003e9006 	br	80e288 <__alt_mem_onchip_mem+0xff806288>

0080e848 <memchr>:
  80e848:	208000cc 	andi	r2,r4,3
  80e84c:	280f883a 	mov	r7,r5
  80e850:	10003426 	beq	r2,zero,80e924 <memchr+0xdc>
  80e854:	30bfffc4 	addi	r2,r6,-1
  80e858:	30001a26 	beq	r6,zero,80e8c4 <memchr+0x7c>
  80e85c:	20c00003 	ldbu	r3,0(r4)
  80e860:	29803fcc 	andi	r6,r5,255
  80e864:	30c0051e 	bne	r6,r3,80e87c <memchr+0x34>
  80e868:	00001806 	br	80e8cc <memchr+0x84>
  80e86c:	10001526 	beq	r2,zero,80e8c4 <memchr+0x7c>
  80e870:	20c00003 	ldbu	r3,0(r4)
  80e874:	10bfffc4 	addi	r2,r2,-1
  80e878:	30c01426 	beq	r6,r3,80e8cc <memchr+0x84>
  80e87c:	21000044 	addi	r4,r4,1
  80e880:	20c000cc 	andi	r3,r4,3
  80e884:	183ff91e 	bne	r3,zero,80e86c <__alt_mem_onchip_mem+0xff80686c>
  80e888:	020000c4 	movi	r8,3
  80e88c:	40801136 	bltu	r8,r2,80e8d4 <memchr+0x8c>
  80e890:	10000c26 	beq	r2,zero,80e8c4 <memchr+0x7c>
  80e894:	20c00003 	ldbu	r3,0(r4)
  80e898:	29403fcc 	andi	r5,r5,255
  80e89c:	28c00b26 	beq	r5,r3,80e8cc <memchr+0x84>
  80e8a0:	20c00044 	addi	r3,r4,1
  80e8a4:	39803fcc 	andi	r6,r7,255
  80e8a8:	2089883a 	add	r4,r4,r2
  80e8ac:	00000306 	br	80e8bc <memchr+0x74>
  80e8b0:	18c00044 	addi	r3,r3,1
  80e8b4:	197fffc3 	ldbu	r5,-1(r3)
  80e8b8:	31400526 	beq	r6,r5,80e8d0 <memchr+0x88>
  80e8bc:	1805883a 	mov	r2,r3
  80e8c0:	20fffb1e 	bne	r4,r3,80e8b0 <__alt_mem_onchip_mem+0xff8068b0>
  80e8c4:	0005883a 	mov	r2,zero
  80e8c8:	f800283a 	ret
  80e8cc:	2005883a 	mov	r2,r4
  80e8d0:	f800283a 	ret
  80e8d4:	28c03fcc 	andi	r3,r5,255
  80e8d8:	1812923a 	slli	r9,r3,8
  80e8dc:	02ffbff4 	movhi	r11,65279
  80e8e0:	02a02074 	movhi	r10,32897
  80e8e4:	48d2b03a 	or	r9,r9,r3
  80e8e8:	4806943a 	slli	r3,r9,16
  80e8ec:	5affbfc4 	addi	r11,r11,-257
  80e8f0:	52a02004 	addi	r10,r10,-32640
  80e8f4:	48d2b03a 	or	r9,r9,r3
  80e8f8:	20c00017 	ldw	r3,0(r4)
  80e8fc:	48c6f03a 	xor	r3,r9,r3
  80e900:	1acd883a 	add	r6,r3,r11
  80e904:	00c6303a 	nor	r3,zero,r3
  80e908:	30c6703a 	and	r3,r6,r3
  80e90c:	1a86703a 	and	r3,r3,r10
  80e910:	183fe01e 	bne	r3,zero,80e894 <__alt_mem_onchip_mem+0xff806894>
  80e914:	10bfff04 	addi	r2,r2,-4
  80e918:	21000104 	addi	r4,r4,4
  80e91c:	40bff636 	bltu	r8,r2,80e8f8 <__alt_mem_onchip_mem+0xff8068f8>
  80e920:	003fdb06 	br	80e890 <__alt_mem_onchip_mem+0xff806890>
  80e924:	3005883a 	mov	r2,r6
  80e928:	003fd706 	br	80e888 <__alt_mem_onchip_mem+0xff806888>

0080e92c <memcpy>:
  80e92c:	defffd04 	addi	sp,sp,-12
  80e930:	dfc00215 	stw	ra,8(sp)
  80e934:	dc400115 	stw	r17,4(sp)
  80e938:	dc000015 	stw	r16,0(sp)
  80e93c:	00c003c4 	movi	r3,15
  80e940:	2005883a 	mov	r2,r4
  80e944:	1980452e 	bgeu	r3,r6,80ea5c <memcpy+0x130>
  80e948:	2906b03a 	or	r3,r5,r4
  80e94c:	18c000cc 	andi	r3,r3,3
  80e950:	1800441e 	bne	r3,zero,80ea64 <memcpy+0x138>
  80e954:	347ffc04 	addi	r17,r6,-16
  80e958:	8822d13a 	srli	r17,r17,4
  80e95c:	28c00104 	addi	r3,r5,4
  80e960:	23400104 	addi	r13,r4,4
  80e964:	8820913a 	slli	r16,r17,4
  80e968:	2b000204 	addi	r12,r5,8
  80e96c:	22c00204 	addi	r11,r4,8
  80e970:	84000504 	addi	r16,r16,20
  80e974:	2a800304 	addi	r10,r5,12
  80e978:	22400304 	addi	r9,r4,12
  80e97c:	2c21883a 	add	r16,r5,r16
  80e980:	2811883a 	mov	r8,r5
  80e984:	200f883a 	mov	r7,r4
  80e988:	41000017 	ldw	r4,0(r8)
  80e98c:	1fc00017 	ldw	ra,0(r3)
  80e990:	63c00017 	ldw	r15,0(r12)
  80e994:	39000015 	stw	r4,0(r7)
  80e998:	53800017 	ldw	r14,0(r10)
  80e99c:	6fc00015 	stw	ra,0(r13)
  80e9a0:	5bc00015 	stw	r15,0(r11)
  80e9a4:	4b800015 	stw	r14,0(r9)
  80e9a8:	18c00404 	addi	r3,r3,16
  80e9ac:	39c00404 	addi	r7,r7,16
  80e9b0:	42000404 	addi	r8,r8,16
  80e9b4:	6b400404 	addi	r13,r13,16
  80e9b8:	63000404 	addi	r12,r12,16
  80e9bc:	5ac00404 	addi	r11,r11,16
  80e9c0:	52800404 	addi	r10,r10,16
  80e9c4:	4a400404 	addi	r9,r9,16
  80e9c8:	1c3fef1e 	bne	r3,r16,80e988 <__alt_mem_onchip_mem+0xff806988>
  80e9cc:	89c00044 	addi	r7,r17,1
  80e9d0:	380e913a 	slli	r7,r7,4
  80e9d4:	310003cc 	andi	r4,r6,15
  80e9d8:	02c000c4 	movi	r11,3
  80e9dc:	11c7883a 	add	r3,r2,r7
  80e9e0:	29cb883a 	add	r5,r5,r7
  80e9e4:	5900212e 	bgeu	r11,r4,80ea6c <memcpy+0x140>
  80e9e8:	1813883a 	mov	r9,r3
  80e9ec:	2811883a 	mov	r8,r5
  80e9f0:	200f883a 	mov	r7,r4
  80e9f4:	42800017 	ldw	r10,0(r8)
  80e9f8:	4a400104 	addi	r9,r9,4
  80e9fc:	39ffff04 	addi	r7,r7,-4
  80ea00:	4abfff15 	stw	r10,-4(r9)
  80ea04:	42000104 	addi	r8,r8,4
  80ea08:	59fffa36 	bltu	r11,r7,80e9f4 <__alt_mem_onchip_mem+0xff8069f4>
  80ea0c:	213fff04 	addi	r4,r4,-4
  80ea10:	2008d0ba 	srli	r4,r4,2
  80ea14:	318000cc 	andi	r6,r6,3
  80ea18:	21000044 	addi	r4,r4,1
  80ea1c:	2109883a 	add	r4,r4,r4
  80ea20:	2109883a 	add	r4,r4,r4
  80ea24:	1907883a 	add	r3,r3,r4
  80ea28:	290b883a 	add	r5,r5,r4
  80ea2c:	30000626 	beq	r6,zero,80ea48 <memcpy+0x11c>
  80ea30:	198d883a 	add	r6,r3,r6
  80ea34:	29c00003 	ldbu	r7,0(r5)
  80ea38:	18c00044 	addi	r3,r3,1
  80ea3c:	29400044 	addi	r5,r5,1
  80ea40:	19ffffc5 	stb	r7,-1(r3)
  80ea44:	19bffb1e 	bne	r3,r6,80ea34 <__alt_mem_onchip_mem+0xff806a34>
  80ea48:	dfc00217 	ldw	ra,8(sp)
  80ea4c:	dc400117 	ldw	r17,4(sp)
  80ea50:	dc000017 	ldw	r16,0(sp)
  80ea54:	dec00304 	addi	sp,sp,12
  80ea58:	f800283a 	ret
  80ea5c:	2007883a 	mov	r3,r4
  80ea60:	003ff206 	br	80ea2c <__alt_mem_onchip_mem+0xff806a2c>
  80ea64:	2007883a 	mov	r3,r4
  80ea68:	003ff106 	br	80ea30 <__alt_mem_onchip_mem+0xff806a30>
  80ea6c:	200d883a 	mov	r6,r4
  80ea70:	003fee06 	br	80ea2c <__alt_mem_onchip_mem+0xff806a2c>

0080ea74 <memset>:
  80ea74:	20c000cc 	andi	r3,r4,3
  80ea78:	2005883a 	mov	r2,r4
  80ea7c:	18004426 	beq	r3,zero,80eb90 <memset+0x11c>
  80ea80:	31ffffc4 	addi	r7,r6,-1
  80ea84:	30004026 	beq	r6,zero,80eb88 <memset+0x114>
  80ea88:	2813883a 	mov	r9,r5
  80ea8c:	200d883a 	mov	r6,r4
  80ea90:	2007883a 	mov	r3,r4
  80ea94:	00000406 	br	80eaa8 <memset+0x34>
  80ea98:	3a3fffc4 	addi	r8,r7,-1
  80ea9c:	31800044 	addi	r6,r6,1
  80eaa0:	38003926 	beq	r7,zero,80eb88 <memset+0x114>
  80eaa4:	400f883a 	mov	r7,r8
  80eaa8:	18c00044 	addi	r3,r3,1
  80eaac:	32400005 	stb	r9,0(r6)
  80eab0:	1a0000cc 	andi	r8,r3,3
  80eab4:	403ff81e 	bne	r8,zero,80ea98 <__alt_mem_onchip_mem+0xff806a98>
  80eab8:	010000c4 	movi	r4,3
  80eabc:	21c02d2e 	bgeu	r4,r7,80eb74 <memset+0x100>
  80eac0:	29003fcc 	andi	r4,r5,255
  80eac4:	200c923a 	slli	r6,r4,8
  80eac8:	3108b03a 	or	r4,r6,r4
  80eacc:	200c943a 	slli	r6,r4,16
  80ead0:	218cb03a 	or	r6,r4,r6
  80ead4:	010003c4 	movi	r4,15
  80ead8:	21c0182e 	bgeu	r4,r7,80eb3c <memset+0xc8>
  80eadc:	3b3ffc04 	addi	r12,r7,-16
  80eae0:	6018d13a 	srli	r12,r12,4
  80eae4:	1a000104 	addi	r8,r3,4
  80eae8:	1ac00204 	addi	r11,r3,8
  80eaec:	6008913a 	slli	r4,r12,4
  80eaf0:	1a800304 	addi	r10,r3,12
  80eaf4:	1813883a 	mov	r9,r3
  80eaf8:	21000504 	addi	r4,r4,20
  80eafc:	1909883a 	add	r4,r3,r4
  80eb00:	49800015 	stw	r6,0(r9)
  80eb04:	41800015 	stw	r6,0(r8)
  80eb08:	59800015 	stw	r6,0(r11)
  80eb0c:	51800015 	stw	r6,0(r10)
  80eb10:	42000404 	addi	r8,r8,16
  80eb14:	4a400404 	addi	r9,r9,16
  80eb18:	5ac00404 	addi	r11,r11,16
  80eb1c:	52800404 	addi	r10,r10,16
  80eb20:	413ff71e 	bne	r8,r4,80eb00 <__alt_mem_onchip_mem+0xff806b00>
  80eb24:	63000044 	addi	r12,r12,1
  80eb28:	6018913a 	slli	r12,r12,4
  80eb2c:	39c003cc 	andi	r7,r7,15
  80eb30:	010000c4 	movi	r4,3
  80eb34:	1b07883a 	add	r3,r3,r12
  80eb38:	21c00e2e 	bgeu	r4,r7,80eb74 <memset+0x100>
  80eb3c:	1813883a 	mov	r9,r3
  80eb40:	3811883a 	mov	r8,r7
  80eb44:	010000c4 	movi	r4,3
  80eb48:	49800015 	stw	r6,0(r9)
  80eb4c:	423fff04 	addi	r8,r8,-4
  80eb50:	4a400104 	addi	r9,r9,4
  80eb54:	223ffc36 	bltu	r4,r8,80eb48 <__alt_mem_onchip_mem+0xff806b48>
  80eb58:	393fff04 	addi	r4,r7,-4
  80eb5c:	2008d0ba 	srli	r4,r4,2
  80eb60:	39c000cc 	andi	r7,r7,3
  80eb64:	21000044 	addi	r4,r4,1
  80eb68:	2109883a 	add	r4,r4,r4
  80eb6c:	2109883a 	add	r4,r4,r4
  80eb70:	1907883a 	add	r3,r3,r4
  80eb74:	38000526 	beq	r7,zero,80eb8c <memset+0x118>
  80eb78:	19cf883a 	add	r7,r3,r7
  80eb7c:	19400005 	stb	r5,0(r3)
  80eb80:	18c00044 	addi	r3,r3,1
  80eb84:	38fffd1e 	bne	r7,r3,80eb7c <__alt_mem_onchip_mem+0xff806b7c>
  80eb88:	f800283a 	ret
  80eb8c:	f800283a 	ret
  80eb90:	2007883a 	mov	r3,r4
  80eb94:	300f883a 	mov	r7,r6
  80eb98:	003fc706 	br	80eab8 <__alt_mem_onchip_mem+0xff806ab8>

0080eb9c <_Balloc>:
  80eb9c:	20801317 	ldw	r2,76(r4)
  80eba0:	defffc04 	addi	sp,sp,-16
  80eba4:	dc400115 	stw	r17,4(sp)
  80eba8:	dc000015 	stw	r16,0(sp)
  80ebac:	dfc00315 	stw	ra,12(sp)
  80ebb0:	dc800215 	stw	r18,8(sp)
  80ebb4:	2023883a 	mov	r17,r4
  80ebb8:	2821883a 	mov	r16,r5
  80ebbc:	10000f26 	beq	r2,zero,80ebfc <_Balloc+0x60>
  80ebc0:	8407883a 	add	r3,r16,r16
  80ebc4:	18c7883a 	add	r3,r3,r3
  80ebc8:	10c7883a 	add	r3,r2,r3
  80ebcc:	18800017 	ldw	r2,0(r3)
  80ebd0:	10001126 	beq	r2,zero,80ec18 <_Balloc+0x7c>
  80ebd4:	11000017 	ldw	r4,0(r2)
  80ebd8:	19000015 	stw	r4,0(r3)
  80ebdc:	10000415 	stw	zero,16(r2)
  80ebe0:	10000315 	stw	zero,12(r2)
  80ebe4:	dfc00317 	ldw	ra,12(sp)
  80ebe8:	dc800217 	ldw	r18,8(sp)
  80ebec:	dc400117 	ldw	r17,4(sp)
  80ebf0:	dc000017 	ldw	r16,0(sp)
  80ebf4:	dec00404 	addi	sp,sp,16
  80ebf8:	f800283a 	ret
  80ebfc:	01800844 	movi	r6,33
  80ec00:	01400104 	movi	r5,4
  80ec04:	081160c0 	call	81160c <_calloc_r>
  80ec08:	88801315 	stw	r2,76(r17)
  80ec0c:	103fec1e 	bne	r2,zero,80ebc0 <__alt_mem_onchip_mem+0xff806bc0>
  80ec10:	0005883a 	mov	r2,zero
  80ec14:	003ff306 	br	80ebe4 <__alt_mem_onchip_mem+0xff806be4>
  80ec18:	01400044 	movi	r5,1
  80ec1c:	2c24983a 	sll	r18,r5,r16
  80ec20:	8809883a 	mov	r4,r17
  80ec24:	91800144 	addi	r6,r18,5
  80ec28:	318d883a 	add	r6,r6,r6
  80ec2c:	318d883a 	add	r6,r6,r6
  80ec30:	081160c0 	call	81160c <_calloc_r>
  80ec34:	103ff626 	beq	r2,zero,80ec10 <__alt_mem_onchip_mem+0xff806c10>
  80ec38:	14000115 	stw	r16,4(r2)
  80ec3c:	14800215 	stw	r18,8(r2)
  80ec40:	003fe606 	br	80ebdc <__alt_mem_onchip_mem+0xff806bdc>

0080ec44 <_Bfree>:
  80ec44:	28000826 	beq	r5,zero,80ec68 <_Bfree+0x24>
  80ec48:	28c00117 	ldw	r3,4(r5)
  80ec4c:	20801317 	ldw	r2,76(r4)
  80ec50:	18c7883a 	add	r3,r3,r3
  80ec54:	18c7883a 	add	r3,r3,r3
  80ec58:	10c5883a 	add	r2,r2,r3
  80ec5c:	10c00017 	ldw	r3,0(r2)
  80ec60:	28c00015 	stw	r3,0(r5)
  80ec64:	11400015 	stw	r5,0(r2)
  80ec68:	f800283a 	ret

0080ec6c <__multadd>:
  80ec6c:	defffa04 	addi	sp,sp,-24
  80ec70:	dc800315 	stw	r18,12(sp)
  80ec74:	dc400215 	stw	r17,8(sp)
  80ec78:	dc000115 	stw	r16,4(sp)
  80ec7c:	2823883a 	mov	r17,r5
  80ec80:	2c000417 	ldw	r16,16(r5)
  80ec84:	dfc00515 	stw	ra,20(sp)
  80ec88:	dcc00415 	stw	r19,16(sp)
  80ec8c:	2025883a 	mov	r18,r4
  80ec90:	29400504 	addi	r5,r5,20
  80ec94:	0011883a 	mov	r8,zero
  80ec98:	28c00017 	ldw	r3,0(r5)
  80ec9c:	29400104 	addi	r5,r5,4
  80eca0:	42000044 	addi	r8,r8,1
  80eca4:	18bfffcc 	andi	r2,r3,65535
  80eca8:	1185383a 	mul	r2,r2,r6
  80ecac:	1806d43a 	srli	r3,r3,16
  80ecb0:	11cf883a 	add	r7,r2,r7
  80ecb4:	3808d43a 	srli	r4,r7,16
  80ecb8:	1987383a 	mul	r3,r3,r6
  80ecbc:	38bfffcc 	andi	r2,r7,65535
  80ecc0:	1907883a 	add	r3,r3,r4
  80ecc4:	1808943a 	slli	r4,r3,16
  80ecc8:	180ed43a 	srli	r7,r3,16
  80eccc:	2085883a 	add	r2,r4,r2
  80ecd0:	28bfff15 	stw	r2,-4(r5)
  80ecd4:	443ff016 	blt	r8,r16,80ec98 <__alt_mem_onchip_mem+0xff806c98>
  80ecd8:	38000926 	beq	r7,zero,80ed00 <__multadd+0x94>
  80ecdc:	88800217 	ldw	r2,8(r17)
  80ece0:	80800f0e 	bge	r16,r2,80ed20 <__multadd+0xb4>
  80ece4:	80800144 	addi	r2,r16,5
  80ece8:	1085883a 	add	r2,r2,r2
  80ecec:	1085883a 	add	r2,r2,r2
  80ecf0:	8885883a 	add	r2,r17,r2
  80ecf4:	11c00015 	stw	r7,0(r2)
  80ecf8:	84000044 	addi	r16,r16,1
  80ecfc:	8c000415 	stw	r16,16(r17)
  80ed00:	8805883a 	mov	r2,r17
  80ed04:	dfc00517 	ldw	ra,20(sp)
  80ed08:	dcc00417 	ldw	r19,16(sp)
  80ed0c:	dc800317 	ldw	r18,12(sp)
  80ed10:	dc400217 	ldw	r17,8(sp)
  80ed14:	dc000117 	ldw	r16,4(sp)
  80ed18:	dec00604 	addi	sp,sp,24
  80ed1c:	f800283a 	ret
  80ed20:	89400117 	ldw	r5,4(r17)
  80ed24:	9009883a 	mov	r4,r18
  80ed28:	d9c00015 	stw	r7,0(sp)
  80ed2c:	29400044 	addi	r5,r5,1
  80ed30:	080eb9c0 	call	80eb9c <_Balloc>
  80ed34:	89800417 	ldw	r6,16(r17)
  80ed38:	89400304 	addi	r5,r17,12
  80ed3c:	11000304 	addi	r4,r2,12
  80ed40:	31800084 	addi	r6,r6,2
  80ed44:	318d883a 	add	r6,r6,r6
  80ed48:	318d883a 	add	r6,r6,r6
  80ed4c:	1027883a 	mov	r19,r2
  80ed50:	080e92c0 	call	80e92c <memcpy>
  80ed54:	d9c00017 	ldw	r7,0(sp)
  80ed58:	88000a26 	beq	r17,zero,80ed84 <__multadd+0x118>
  80ed5c:	88c00117 	ldw	r3,4(r17)
  80ed60:	90801317 	ldw	r2,76(r18)
  80ed64:	18c7883a 	add	r3,r3,r3
  80ed68:	18c7883a 	add	r3,r3,r3
  80ed6c:	10c5883a 	add	r2,r2,r3
  80ed70:	10c00017 	ldw	r3,0(r2)
  80ed74:	88c00015 	stw	r3,0(r17)
  80ed78:	14400015 	stw	r17,0(r2)
  80ed7c:	9823883a 	mov	r17,r19
  80ed80:	003fd806 	br	80ece4 <__alt_mem_onchip_mem+0xff806ce4>
  80ed84:	9823883a 	mov	r17,r19
  80ed88:	003fd606 	br	80ece4 <__alt_mem_onchip_mem+0xff806ce4>

0080ed8c <__s2b>:
  80ed8c:	defff904 	addi	sp,sp,-28
  80ed90:	dc400115 	stw	r17,4(sp)
  80ed94:	dc000015 	stw	r16,0(sp)
  80ed98:	2023883a 	mov	r17,r4
  80ed9c:	2821883a 	mov	r16,r5
  80eda0:	39000204 	addi	r4,r7,8
  80eda4:	01400244 	movi	r5,9
  80eda8:	dcc00315 	stw	r19,12(sp)
  80edac:	dc800215 	stw	r18,8(sp)
  80edb0:	dfc00615 	stw	ra,24(sp)
  80edb4:	dd400515 	stw	r21,20(sp)
  80edb8:	dd000415 	stw	r20,16(sp)
  80edbc:	3825883a 	mov	r18,r7
  80edc0:	3027883a 	mov	r19,r6
  80edc4:	08134b80 	call	8134b8 <__divsi3>
  80edc8:	00c00044 	movi	r3,1
  80edcc:	000b883a 	mov	r5,zero
  80edd0:	1880030e 	bge	r3,r2,80ede0 <__s2b+0x54>
  80edd4:	18c7883a 	add	r3,r3,r3
  80edd8:	29400044 	addi	r5,r5,1
  80eddc:	18bffd16 	blt	r3,r2,80edd4 <__alt_mem_onchip_mem+0xff806dd4>
  80ede0:	8809883a 	mov	r4,r17
  80ede4:	080eb9c0 	call	80eb9c <_Balloc>
  80ede8:	d8c00717 	ldw	r3,28(sp)
  80edec:	10c00515 	stw	r3,20(r2)
  80edf0:	00c00044 	movi	r3,1
  80edf4:	10c00415 	stw	r3,16(r2)
  80edf8:	00c00244 	movi	r3,9
  80edfc:	1cc0210e 	bge	r3,r19,80ee84 <__s2b+0xf8>
  80ee00:	80eb883a 	add	r21,r16,r3
  80ee04:	a829883a 	mov	r20,r21
  80ee08:	84e1883a 	add	r16,r16,r19
  80ee0c:	a1c00007 	ldb	r7,0(r20)
  80ee10:	01800284 	movi	r6,10
  80ee14:	a5000044 	addi	r20,r20,1
  80ee18:	100b883a 	mov	r5,r2
  80ee1c:	39fff404 	addi	r7,r7,-48
  80ee20:	8809883a 	mov	r4,r17
  80ee24:	080ec6c0 	call	80ec6c <__multadd>
  80ee28:	a43ff81e 	bne	r20,r16,80ee0c <__alt_mem_onchip_mem+0xff806e0c>
  80ee2c:	ace1883a 	add	r16,r21,r19
  80ee30:	843ffe04 	addi	r16,r16,-8
  80ee34:	9c800a0e 	bge	r19,r18,80ee60 <__s2b+0xd4>
  80ee38:	94e5c83a 	sub	r18,r18,r19
  80ee3c:	84a5883a 	add	r18,r16,r18
  80ee40:	81c00007 	ldb	r7,0(r16)
  80ee44:	01800284 	movi	r6,10
  80ee48:	84000044 	addi	r16,r16,1
  80ee4c:	100b883a 	mov	r5,r2
  80ee50:	39fff404 	addi	r7,r7,-48
  80ee54:	8809883a 	mov	r4,r17
  80ee58:	080ec6c0 	call	80ec6c <__multadd>
  80ee5c:	84bff81e 	bne	r16,r18,80ee40 <__alt_mem_onchip_mem+0xff806e40>
  80ee60:	dfc00617 	ldw	ra,24(sp)
  80ee64:	dd400517 	ldw	r21,20(sp)
  80ee68:	dd000417 	ldw	r20,16(sp)
  80ee6c:	dcc00317 	ldw	r19,12(sp)
  80ee70:	dc800217 	ldw	r18,8(sp)
  80ee74:	dc400117 	ldw	r17,4(sp)
  80ee78:	dc000017 	ldw	r16,0(sp)
  80ee7c:	dec00704 	addi	sp,sp,28
  80ee80:	f800283a 	ret
  80ee84:	84000284 	addi	r16,r16,10
  80ee88:	1827883a 	mov	r19,r3
  80ee8c:	003fe906 	br	80ee34 <__alt_mem_onchip_mem+0xff806e34>

0080ee90 <__hi0bits>:
  80ee90:	20bfffec 	andhi	r2,r4,65535
  80ee94:	1000141e 	bne	r2,zero,80eee8 <__hi0bits+0x58>
  80ee98:	2008943a 	slli	r4,r4,16
  80ee9c:	00800404 	movi	r2,16
  80eea0:	20ffc02c 	andhi	r3,r4,65280
  80eea4:	1800021e 	bne	r3,zero,80eeb0 <__hi0bits+0x20>
  80eea8:	2008923a 	slli	r4,r4,8
  80eeac:	10800204 	addi	r2,r2,8
  80eeb0:	20fc002c 	andhi	r3,r4,61440
  80eeb4:	1800021e 	bne	r3,zero,80eec0 <__hi0bits+0x30>
  80eeb8:	2008913a 	slli	r4,r4,4
  80eebc:	10800104 	addi	r2,r2,4
  80eec0:	20f0002c 	andhi	r3,r4,49152
  80eec4:	1800031e 	bne	r3,zero,80eed4 <__hi0bits+0x44>
  80eec8:	2109883a 	add	r4,r4,r4
  80eecc:	10800084 	addi	r2,r2,2
  80eed0:	2109883a 	add	r4,r4,r4
  80eed4:	20000316 	blt	r4,zero,80eee4 <__hi0bits+0x54>
  80eed8:	2110002c 	andhi	r4,r4,16384
  80eedc:	2000041e 	bne	r4,zero,80eef0 <__hi0bits+0x60>
  80eee0:	00800804 	movi	r2,32
  80eee4:	f800283a 	ret
  80eee8:	0005883a 	mov	r2,zero
  80eeec:	003fec06 	br	80eea0 <__alt_mem_onchip_mem+0xff806ea0>
  80eef0:	10800044 	addi	r2,r2,1
  80eef4:	f800283a 	ret

0080eef8 <__lo0bits>:
  80eef8:	20c00017 	ldw	r3,0(r4)
  80eefc:	188001cc 	andi	r2,r3,7
  80ef00:	10000826 	beq	r2,zero,80ef24 <__lo0bits+0x2c>
  80ef04:	1880004c 	andi	r2,r3,1
  80ef08:	1000211e 	bne	r2,zero,80ef90 <__lo0bits+0x98>
  80ef0c:	1880008c 	andi	r2,r3,2
  80ef10:	1000211e 	bne	r2,zero,80ef98 <__lo0bits+0xa0>
  80ef14:	1806d0ba 	srli	r3,r3,2
  80ef18:	00800084 	movi	r2,2
  80ef1c:	20c00015 	stw	r3,0(r4)
  80ef20:	f800283a 	ret
  80ef24:	18bfffcc 	andi	r2,r3,65535
  80ef28:	10001326 	beq	r2,zero,80ef78 <__lo0bits+0x80>
  80ef2c:	0005883a 	mov	r2,zero
  80ef30:	19403fcc 	andi	r5,r3,255
  80ef34:	2800021e 	bne	r5,zero,80ef40 <__lo0bits+0x48>
  80ef38:	1806d23a 	srli	r3,r3,8
  80ef3c:	10800204 	addi	r2,r2,8
  80ef40:	194003cc 	andi	r5,r3,15
  80ef44:	2800021e 	bne	r5,zero,80ef50 <__lo0bits+0x58>
  80ef48:	1806d13a 	srli	r3,r3,4
  80ef4c:	10800104 	addi	r2,r2,4
  80ef50:	194000cc 	andi	r5,r3,3
  80ef54:	2800021e 	bne	r5,zero,80ef60 <__lo0bits+0x68>
  80ef58:	1806d0ba 	srli	r3,r3,2
  80ef5c:	10800084 	addi	r2,r2,2
  80ef60:	1940004c 	andi	r5,r3,1
  80ef64:	2800081e 	bne	r5,zero,80ef88 <__lo0bits+0x90>
  80ef68:	1806d07a 	srli	r3,r3,1
  80ef6c:	1800051e 	bne	r3,zero,80ef84 <__lo0bits+0x8c>
  80ef70:	00800804 	movi	r2,32
  80ef74:	f800283a 	ret
  80ef78:	1806d43a 	srli	r3,r3,16
  80ef7c:	00800404 	movi	r2,16
  80ef80:	003feb06 	br	80ef30 <__alt_mem_onchip_mem+0xff806f30>
  80ef84:	10800044 	addi	r2,r2,1
  80ef88:	20c00015 	stw	r3,0(r4)
  80ef8c:	f800283a 	ret
  80ef90:	0005883a 	mov	r2,zero
  80ef94:	f800283a 	ret
  80ef98:	1806d07a 	srli	r3,r3,1
  80ef9c:	00800044 	movi	r2,1
  80efa0:	20c00015 	stw	r3,0(r4)
  80efa4:	f800283a 	ret

0080efa8 <__i2b>:
  80efa8:	defffd04 	addi	sp,sp,-12
  80efac:	dc000015 	stw	r16,0(sp)
  80efb0:	04000044 	movi	r16,1
  80efb4:	dc400115 	stw	r17,4(sp)
  80efb8:	2823883a 	mov	r17,r5
  80efbc:	800b883a 	mov	r5,r16
  80efc0:	dfc00215 	stw	ra,8(sp)
  80efc4:	080eb9c0 	call	80eb9c <_Balloc>
  80efc8:	14400515 	stw	r17,20(r2)
  80efcc:	14000415 	stw	r16,16(r2)
  80efd0:	dfc00217 	ldw	ra,8(sp)
  80efd4:	dc400117 	ldw	r17,4(sp)
  80efd8:	dc000017 	ldw	r16,0(sp)
  80efdc:	dec00304 	addi	sp,sp,12
  80efe0:	f800283a 	ret

0080efe4 <__multiply>:
  80efe4:	defffa04 	addi	sp,sp,-24
  80efe8:	dcc00315 	stw	r19,12(sp)
  80efec:	dc800215 	stw	r18,8(sp)
  80eff0:	34c00417 	ldw	r19,16(r6)
  80eff4:	2c800417 	ldw	r18,16(r5)
  80eff8:	dd000415 	stw	r20,16(sp)
  80effc:	dc400115 	stw	r17,4(sp)
  80f000:	dfc00515 	stw	ra,20(sp)
  80f004:	dc000015 	stw	r16,0(sp)
  80f008:	2829883a 	mov	r20,r5
  80f00c:	3023883a 	mov	r17,r6
  80f010:	94c0050e 	bge	r18,r19,80f028 <__multiply+0x44>
  80f014:	9007883a 	mov	r3,r18
  80f018:	3029883a 	mov	r20,r6
  80f01c:	9825883a 	mov	r18,r19
  80f020:	2823883a 	mov	r17,r5
  80f024:	1827883a 	mov	r19,r3
  80f028:	a0800217 	ldw	r2,8(r20)
  80f02c:	94e1883a 	add	r16,r18,r19
  80f030:	a1400117 	ldw	r5,4(r20)
  80f034:	1400010e 	bge	r2,r16,80f03c <__multiply+0x58>
  80f038:	29400044 	addi	r5,r5,1
  80f03c:	080eb9c0 	call	80eb9c <_Balloc>
  80f040:	8415883a 	add	r10,r16,r16
  80f044:	12c00504 	addi	r11,r2,20
  80f048:	5295883a 	add	r10,r10,r10
  80f04c:	5a95883a 	add	r10,r11,r10
  80f050:	5807883a 	mov	r3,r11
  80f054:	5a80032e 	bgeu	r11,r10,80f064 <__multiply+0x80>
  80f058:	18000015 	stw	zero,0(r3)
  80f05c:	18c00104 	addi	r3,r3,4
  80f060:	1abffd36 	bltu	r3,r10,80f058 <__alt_mem_onchip_mem+0xff807058>
  80f064:	9ce7883a 	add	r19,r19,r19
  80f068:	94a5883a 	add	r18,r18,r18
  80f06c:	89800504 	addi	r6,r17,20
  80f070:	9ce7883a 	add	r19,r19,r19
  80f074:	a3400504 	addi	r13,r20,20
  80f078:	94a5883a 	add	r18,r18,r18
  80f07c:	34d9883a 	add	r12,r6,r19
  80f080:	6c93883a 	add	r9,r13,r18
  80f084:	3300422e 	bgeu	r6,r12,80f190 <__multiply+0x1ac>
  80f088:	37c00017 	ldw	ra,0(r6)
  80f08c:	fbffffcc 	andi	r15,ra,65535
  80f090:	78001b26 	beq	r15,zero,80f100 <__multiply+0x11c>
  80f094:	5811883a 	mov	r8,r11
  80f098:	681d883a 	mov	r14,r13
  80f09c:	000f883a 	mov	r7,zero
  80f0a0:	71000017 	ldw	r4,0(r14)
  80f0a4:	40c00017 	ldw	r3,0(r8)
  80f0a8:	73800104 	addi	r14,r14,4
  80f0ac:	217fffcc 	andi	r5,r4,65535
  80f0b0:	2bcb383a 	mul	r5,r5,r15
  80f0b4:	2008d43a 	srli	r4,r4,16
  80f0b8:	1c7fffcc 	andi	r17,r3,65535
  80f0bc:	2c4b883a 	add	r5,r5,r17
  80f0c0:	29cb883a 	add	r5,r5,r7
  80f0c4:	23c9383a 	mul	r4,r4,r15
  80f0c8:	1806d43a 	srli	r3,r3,16
  80f0cc:	280ed43a 	srli	r7,r5,16
  80f0d0:	297fffcc 	andi	r5,r5,65535
  80f0d4:	20c7883a 	add	r3,r4,r3
  80f0d8:	19c7883a 	add	r3,r3,r7
  80f0dc:	1808943a 	slli	r4,r3,16
  80f0e0:	4023883a 	mov	r17,r8
  80f0e4:	180ed43a 	srli	r7,r3,16
  80f0e8:	214ab03a 	or	r5,r4,r5
  80f0ec:	41400015 	stw	r5,0(r8)
  80f0f0:	42000104 	addi	r8,r8,4
  80f0f4:	727fea36 	bltu	r14,r9,80f0a0 <__alt_mem_onchip_mem+0xff8070a0>
  80f0f8:	89c00115 	stw	r7,4(r17)
  80f0fc:	37c00017 	ldw	ra,0(r6)
  80f100:	f83ed43a 	srli	ra,ra,16
  80f104:	f8001f26 	beq	ra,zero,80f184 <__multiply+0x1a0>
  80f108:	58c00017 	ldw	r3,0(r11)
  80f10c:	681d883a 	mov	r14,r13
  80f110:	581f883a 	mov	r15,r11
  80f114:	1811883a 	mov	r8,r3
  80f118:	5825883a 	mov	r18,r11
  80f11c:	000f883a 	mov	r7,zero
  80f120:	00000106 	br	80f128 <__multiply+0x144>
  80f124:	8825883a 	mov	r18,r17
  80f128:	7140000b 	ldhu	r5,0(r14)
  80f12c:	4010d43a 	srli	r8,r8,16
  80f130:	193fffcc 	andi	r4,r3,65535
  80f134:	2fcb383a 	mul	r5,r5,ra
  80f138:	7bc00104 	addi	r15,r15,4
  80f13c:	73800104 	addi	r14,r14,4
  80f140:	2a0b883a 	add	r5,r5,r8
  80f144:	29cb883a 	add	r5,r5,r7
  80f148:	2806943a 	slli	r3,r5,16
  80f14c:	94400104 	addi	r17,r18,4
  80f150:	280ad43a 	srli	r5,r5,16
  80f154:	1908b03a 	or	r4,r3,r4
  80f158:	793fff15 	stw	r4,-4(r15)
  80f15c:	70ffff17 	ldw	r3,-4(r14)
  80f160:	8a000017 	ldw	r8,0(r17)
  80f164:	1806d43a 	srli	r3,r3,16
  80f168:	413fffcc 	andi	r4,r8,65535
  80f16c:	1fc7383a 	mul	r3,r3,ra
  80f170:	1907883a 	add	r3,r3,r4
  80f174:	1947883a 	add	r3,r3,r5
  80f178:	180ed43a 	srli	r7,r3,16
  80f17c:	727fe936 	bltu	r14,r9,80f124 <__alt_mem_onchip_mem+0xff807124>
  80f180:	90c00115 	stw	r3,4(r18)
  80f184:	31800104 	addi	r6,r6,4
  80f188:	5ac00104 	addi	r11,r11,4
  80f18c:	333fbe36 	bltu	r6,r12,80f088 <__alt_mem_onchip_mem+0xff807088>
  80f190:	0400090e 	bge	zero,r16,80f1b8 <__multiply+0x1d4>
  80f194:	50ffff17 	ldw	r3,-4(r10)
  80f198:	52bfff04 	addi	r10,r10,-4
  80f19c:	18000326 	beq	r3,zero,80f1ac <__multiply+0x1c8>
  80f1a0:	00000506 	br	80f1b8 <__multiply+0x1d4>
  80f1a4:	50c00017 	ldw	r3,0(r10)
  80f1a8:	1800031e 	bne	r3,zero,80f1b8 <__multiply+0x1d4>
  80f1ac:	843fffc4 	addi	r16,r16,-1
  80f1b0:	52bfff04 	addi	r10,r10,-4
  80f1b4:	803ffb1e 	bne	r16,zero,80f1a4 <__alt_mem_onchip_mem+0xff8071a4>
  80f1b8:	14000415 	stw	r16,16(r2)
  80f1bc:	dfc00517 	ldw	ra,20(sp)
  80f1c0:	dd000417 	ldw	r20,16(sp)
  80f1c4:	dcc00317 	ldw	r19,12(sp)
  80f1c8:	dc800217 	ldw	r18,8(sp)
  80f1cc:	dc400117 	ldw	r17,4(sp)
  80f1d0:	dc000017 	ldw	r16,0(sp)
  80f1d4:	dec00604 	addi	sp,sp,24
  80f1d8:	f800283a 	ret

0080f1dc <__pow5mult>:
  80f1dc:	defffa04 	addi	sp,sp,-24
  80f1e0:	dcc00315 	stw	r19,12(sp)
  80f1e4:	dc000015 	stw	r16,0(sp)
  80f1e8:	dfc00515 	stw	ra,20(sp)
  80f1ec:	dd000415 	stw	r20,16(sp)
  80f1f0:	dc800215 	stw	r18,8(sp)
  80f1f4:	dc400115 	stw	r17,4(sp)
  80f1f8:	308000cc 	andi	r2,r6,3
  80f1fc:	3021883a 	mov	r16,r6
  80f200:	2027883a 	mov	r19,r4
  80f204:	10002f1e 	bne	r2,zero,80f2c4 <__pow5mult+0xe8>
  80f208:	2825883a 	mov	r18,r5
  80f20c:	8021d0ba 	srai	r16,r16,2
  80f210:	80001a26 	beq	r16,zero,80f27c <__pow5mult+0xa0>
  80f214:	9c401217 	ldw	r17,72(r19)
  80f218:	8800061e 	bne	r17,zero,80f234 <__pow5mult+0x58>
  80f21c:	00003406 	br	80f2f0 <__pow5mult+0x114>
  80f220:	8021d07a 	srai	r16,r16,1
  80f224:	80001526 	beq	r16,zero,80f27c <__pow5mult+0xa0>
  80f228:	88800017 	ldw	r2,0(r17)
  80f22c:	10001c26 	beq	r2,zero,80f2a0 <__pow5mult+0xc4>
  80f230:	1023883a 	mov	r17,r2
  80f234:	8080004c 	andi	r2,r16,1
  80f238:	103ff926 	beq	r2,zero,80f220 <__alt_mem_onchip_mem+0xff807220>
  80f23c:	880d883a 	mov	r6,r17
  80f240:	900b883a 	mov	r5,r18
  80f244:	9809883a 	mov	r4,r19
  80f248:	080efe40 	call	80efe4 <__multiply>
  80f24c:	90001b26 	beq	r18,zero,80f2bc <__pow5mult+0xe0>
  80f250:	91000117 	ldw	r4,4(r18)
  80f254:	98c01317 	ldw	r3,76(r19)
  80f258:	8021d07a 	srai	r16,r16,1
  80f25c:	2109883a 	add	r4,r4,r4
  80f260:	2109883a 	add	r4,r4,r4
  80f264:	1907883a 	add	r3,r3,r4
  80f268:	19000017 	ldw	r4,0(r3)
  80f26c:	91000015 	stw	r4,0(r18)
  80f270:	1c800015 	stw	r18,0(r3)
  80f274:	1025883a 	mov	r18,r2
  80f278:	803feb1e 	bne	r16,zero,80f228 <__alt_mem_onchip_mem+0xff807228>
  80f27c:	9005883a 	mov	r2,r18
  80f280:	dfc00517 	ldw	ra,20(sp)
  80f284:	dd000417 	ldw	r20,16(sp)
  80f288:	dcc00317 	ldw	r19,12(sp)
  80f28c:	dc800217 	ldw	r18,8(sp)
  80f290:	dc400117 	ldw	r17,4(sp)
  80f294:	dc000017 	ldw	r16,0(sp)
  80f298:	dec00604 	addi	sp,sp,24
  80f29c:	f800283a 	ret
  80f2a0:	880d883a 	mov	r6,r17
  80f2a4:	880b883a 	mov	r5,r17
  80f2a8:	9809883a 	mov	r4,r19
  80f2ac:	080efe40 	call	80efe4 <__multiply>
  80f2b0:	88800015 	stw	r2,0(r17)
  80f2b4:	10000015 	stw	zero,0(r2)
  80f2b8:	003fdd06 	br	80f230 <__alt_mem_onchip_mem+0xff807230>
  80f2bc:	1025883a 	mov	r18,r2
  80f2c0:	003fd706 	br	80f220 <__alt_mem_onchip_mem+0xff807220>
  80f2c4:	10bfffc4 	addi	r2,r2,-1
  80f2c8:	1085883a 	add	r2,r2,r2
  80f2cc:	00c020b4 	movhi	r3,130
  80f2d0:	18e0c904 	addi	r3,r3,-31964
  80f2d4:	1085883a 	add	r2,r2,r2
  80f2d8:	1885883a 	add	r2,r3,r2
  80f2dc:	11800017 	ldw	r6,0(r2)
  80f2e0:	000f883a 	mov	r7,zero
  80f2e4:	080ec6c0 	call	80ec6c <__multadd>
  80f2e8:	1025883a 	mov	r18,r2
  80f2ec:	003fc706 	br	80f20c <__alt_mem_onchip_mem+0xff80720c>
  80f2f0:	05000044 	movi	r20,1
  80f2f4:	a00b883a 	mov	r5,r20
  80f2f8:	9809883a 	mov	r4,r19
  80f2fc:	080eb9c0 	call	80eb9c <_Balloc>
  80f300:	1023883a 	mov	r17,r2
  80f304:	00809c44 	movi	r2,625
  80f308:	88800515 	stw	r2,20(r17)
  80f30c:	8d000415 	stw	r20,16(r17)
  80f310:	9c401215 	stw	r17,72(r19)
  80f314:	88000015 	stw	zero,0(r17)
  80f318:	003fc606 	br	80f234 <__alt_mem_onchip_mem+0xff807234>

0080f31c <__lshift>:
  80f31c:	defff904 	addi	sp,sp,-28
  80f320:	dd400515 	stw	r21,20(sp)
  80f324:	dcc00315 	stw	r19,12(sp)
  80f328:	302bd17a 	srai	r21,r6,5
  80f32c:	2cc00417 	ldw	r19,16(r5)
  80f330:	28800217 	ldw	r2,8(r5)
  80f334:	dd000415 	stw	r20,16(sp)
  80f338:	ace7883a 	add	r19,r21,r19
  80f33c:	dc800215 	stw	r18,8(sp)
  80f340:	dc400115 	stw	r17,4(sp)
  80f344:	dc000015 	stw	r16,0(sp)
  80f348:	dfc00615 	stw	ra,24(sp)
  80f34c:	9c000044 	addi	r16,r19,1
  80f350:	2823883a 	mov	r17,r5
  80f354:	3029883a 	mov	r20,r6
  80f358:	2025883a 	mov	r18,r4
  80f35c:	29400117 	ldw	r5,4(r5)
  80f360:	1400030e 	bge	r2,r16,80f370 <__lshift+0x54>
  80f364:	1085883a 	add	r2,r2,r2
  80f368:	29400044 	addi	r5,r5,1
  80f36c:	143ffd16 	blt	r2,r16,80f364 <__alt_mem_onchip_mem+0xff807364>
  80f370:	9009883a 	mov	r4,r18
  80f374:	080eb9c0 	call	80eb9c <_Balloc>
  80f378:	10c00504 	addi	r3,r2,20
  80f37c:	0540070e 	bge	zero,r21,80f39c <__lshift+0x80>
  80f380:	ad6b883a 	add	r21,r21,r21
  80f384:	ad6b883a 	add	r21,r21,r21
  80f388:	1809883a 	mov	r4,r3
  80f38c:	1d47883a 	add	r3,r3,r21
  80f390:	20000015 	stw	zero,0(r4)
  80f394:	21000104 	addi	r4,r4,4
  80f398:	193ffd1e 	bne	r3,r4,80f390 <__alt_mem_onchip_mem+0xff807390>
  80f39c:	8a000417 	ldw	r8,16(r17)
  80f3a0:	89000504 	addi	r4,r17,20
  80f3a4:	a18007cc 	andi	r6,r20,31
  80f3a8:	4211883a 	add	r8,r8,r8
  80f3ac:	4211883a 	add	r8,r8,r8
  80f3b0:	2211883a 	add	r8,r4,r8
  80f3b4:	30002326 	beq	r6,zero,80f444 <__lshift+0x128>
  80f3b8:	02400804 	movi	r9,32
  80f3bc:	4993c83a 	sub	r9,r9,r6
  80f3c0:	000b883a 	mov	r5,zero
  80f3c4:	21c00017 	ldw	r7,0(r4)
  80f3c8:	1815883a 	mov	r10,r3
  80f3cc:	18c00104 	addi	r3,r3,4
  80f3d0:	398e983a 	sll	r7,r7,r6
  80f3d4:	21000104 	addi	r4,r4,4
  80f3d8:	394ab03a 	or	r5,r7,r5
  80f3dc:	197fff15 	stw	r5,-4(r3)
  80f3e0:	217fff17 	ldw	r5,-4(r4)
  80f3e4:	2a4ad83a 	srl	r5,r5,r9
  80f3e8:	223ff636 	bltu	r4,r8,80f3c4 <__alt_mem_onchip_mem+0xff8073c4>
  80f3ec:	51400115 	stw	r5,4(r10)
  80f3f0:	28001a1e 	bne	r5,zero,80f45c <__lshift+0x140>
  80f3f4:	843fffc4 	addi	r16,r16,-1
  80f3f8:	14000415 	stw	r16,16(r2)
  80f3fc:	88000826 	beq	r17,zero,80f420 <__lshift+0x104>
  80f400:	89000117 	ldw	r4,4(r17)
  80f404:	90c01317 	ldw	r3,76(r18)
  80f408:	2109883a 	add	r4,r4,r4
  80f40c:	2109883a 	add	r4,r4,r4
  80f410:	1907883a 	add	r3,r3,r4
  80f414:	19000017 	ldw	r4,0(r3)
  80f418:	89000015 	stw	r4,0(r17)
  80f41c:	1c400015 	stw	r17,0(r3)
  80f420:	dfc00617 	ldw	ra,24(sp)
  80f424:	dd400517 	ldw	r21,20(sp)
  80f428:	dd000417 	ldw	r20,16(sp)
  80f42c:	dcc00317 	ldw	r19,12(sp)
  80f430:	dc800217 	ldw	r18,8(sp)
  80f434:	dc400117 	ldw	r17,4(sp)
  80f438:	dc000017 	ldw	r16,0(sp)
  80f43c:	dec00704 	addi	sp,sp,28
  80f440:	f800283a 	ret
  80f444:	21400017 	ldw	r5,0(r4)
  80f448:	18c00104 	addi	r3,r3,4
  80f44c:	21000104 	addi	r4,r4,4
  80f450:	197fff15 	stw	r5,-4(r3)
  80f454:	223ffb36 	bltu	r4,r8,80f444 <__alt_mem_onchip_mem+0xff807444>
  80f458:	003fe606 	br	80f3f4 <__alt_mem_onchip_mem+0xff8073f4>
  80f45c:	9c000084 	addi	r16,r19,2
  80f460:	003fe406 	br	80f3f4 <__alt_mem_onchip_mem+0xff8073f4>

0080f464 <__mcmp>:
  80f464:	20800417 	ldw	r2,16(r4)
  80f468:	28c00417 	ldw	r3,16(r5)
  80f46c:	10c5c83a 	sub	r2,r2,r3
  80f470:	1000111e 	bne	r2,zero,80f4b8 <__mcmp+0x54>
  80f474:	18c7883a 	add	r3,r3,r3
  80f478:	18c7883a 	add	r3,r3,r3
  80f47c:	21000504 	addi	r4,r4,20
  80f480:	29400504 	addi	r5,r5,20
  80f484:	20c5883a 	add	r2,r4,r3
  80f488:	28cb883a 	add	r5,r5,r3
  80f48c:	00000106 	br	80f494 <__mcmp+0x30>
  80f490:	20800a2e 	bgeu	r4,r2,80f4bc <__mcmp+0x58>
  80f494:	10bfff04 	addi	r2,r2,-4
  80f498:	297fff04 	addi	r5,r5,-4
  80f49c:	11800017 	ldw	r6,0(r2)
  80f4a0:	28c00017 	ldw	r3,0(r5)
  80f4a4:	30fffa26 	beq	r6,r3,80f490 <__alt_mem_onchip_mem+0xff807490>
  80f4a8:	30c00236 	bltu	r6,r3,80f4b4 <__mcmp+0x50>
  80f4ac:	00800044 	movi	r2,1
  80f4b0:	f800283a 	ret
  80f4b4:	00bfffc4 	movi	r2,-1
  80f4b8:	f800283a 	ret
  80f4bc:	0005883a 	mov	r2,zero
  80f4c0:	f800283a 	ret

0080f4c4 <__mdiff>:
  80f4c4:	28c00417 	ldw	r3,16(r5)
  80f4c8:	30800417 	ldw	r2,16(r6)
  80f4cc:	defffa04 	addi	sp,sp,-24
  80f4d0:	dcc00315 	stw	r19,12(sp)
  80f4d4:	dc800215 	stw	r18,8(sp)
  80f4d8:	dfc00515 	stw	ra,20(sp)
  80f4dc:	dd000415 	stw	r20,16(sp)
  80f4e0:	dc400115 	stw	r17,4(sp)
  80f4e4:	dc000015 	stw	r16,0(sp)
  80f4e8:	1887c83a 	sub	r3,r3,r2
  80f4ec:	2825883a 	mov	r18,r5
  80f4f0:	3027883a 	mov	r19,r6
  80f4f4:	1800141e 	bne	r3,zero,80f548 <__mdiff+0x84>
  80f4f8:	1085883a 	add	r2,r2,r2
  80f4fc:	1085883a 	add	r2,r2,r2
  80f500:	2a000504 	addi	r8,r5,20
  80f504:	34000504 	addi	r16,r6,20
  80f508:	4087883a 	add	r3,r8,r2
  80f50c:	8085883a 	add	r2,r16,r2
  80f510:	00000106 	br	80f518 <__mdiff+0x54>
  80f514:	40c0592e 	bgeu	r8,r3,80f67c <__mdiff+0x1b8>
  80f518:	18ffff04 	addi	r3,r3,-4
  80f51c:	10bfff04 	addi	r2,r2,-4
  80f520:	19c00017 	ldw	r7,0(r3)
  80f524:	11400017 	ldw	r5,0(r2)
  80f528:	397ffa26 	beq	r7,r5,80f514 <__alt_mem_onchip_mem+0xff807514>
  80f52c:	3940592e 	bgeu	r7,r5,80f694 <__mdiff+0x1d0>
  80f530:	9005883a 	mov	r2,r18
  80f534:	4023883a 	mov	r17,r8
  80f538:	9825883a 	mov	r18,r19
  80f53c:	05000044 	movi	r20,1
  80f540:	1027883a 	mov	r19,r2
  80f544:	00000406 	br	80f558 <__mdiff+0x94>
  80f548:	18005616 	blt	r3,zero,80f6a4 <__mdiff+0x1e0>
  80f54c:	34400504 	addi	r17,r6,20
  80f550:	2c000504 	addi	r16,r5,20
  80f554:	0029883a 	mov	r20,zero
  80f558:	91400117 	ldw	r5,4(r18)
  80f55c:	080eb9c0 	call	80eb9c <_Balloc>
  80f560:	92400417 	ldw	r9,16(r18)
  80f564:	9b000417 	ldw	r12,16(r19)
  80f568:	12c00504 	addi	r11,r2,20
  80f56c:	4a51883a 	add	r8,r9,r9
  80f570:	6319883a 	add	r12,r12,r12
  80f574:	4211883a 	add	r8,r8,r8
  80f578:	6319883a 	add	r12,r12,r12
  80f57c:	15000315 	stw	r20,12(r2)
  80f580:	8211883a 	add	r8,r16,r8
  80f584:	8b19883a 	add	r12,r17,r12
  80f588:	0007883a 	mov	r3,zero
  80f58c:	81400017 	ldw	r5,0(r16)
  80f590:	89c00017 	ldw	r7,0(r17)
  80f594:	59800104 	addi	r6,r11,4
  80f598:	293fffcc 	andi	r4,r5,65535
  80f59c:	20c7883a 	add	r3,r4,r3
  80f5a0:	393fffcc 	andi	r4,r7,65535
  80f5a4:	1909c83a 	sub	r4,r3,r4
  80f5a8:	280ad43a 	srli	r5,r5,16
  80f5ac:	380ed43a 	srli	r7,r7,16
  80f5b0:	2007d43a 	srai	r3,r4,16
  80f5b4:	213fffcc 	andi	r4,r4,65535
  80f5b8:	29cbc83a 	sub	r5,r5,r7
  80f5bc:	28c7883a 	add	r3,r5,r3
  80f5c0:	180a943a 	slli	r5,r3,16
  80f5c4:	8c400104 	addi	r17,r17,4
  80f5c8:	84000104 	addi	r16,r16,4
  80f5cc:	2908b03a 	or	r4,r5,r4
  80f5d0:	59000015 	stw	r4,0(r11)
  80f5d4:	1807d43a 	srai	r3,r3,16
  80f5d8:	3015883a 	mov	r10,r6
  80f5dc:	3017883a 	mov	r11,r6
  80f5e0:	8b3fea36 	bltu	r17,r12,80f58c <__alt_mem_onchip_mem+0xff80758c>
  80f5e4:	8200162e 	bgeu	r16,r8,80f640 <__mdiff+0x17c>
  80f5e8:	8017883a 	mov	r11,r16
  80f5ec:	59400017 	ldw	r5,0(r11)
  80f5f0:	31800104 	addi	r6,r6,4
  80f5f4:	5ac00104 	addi	r11,r11,4
  80f5f8:	293fffcc 	andi	r4,r5,65535
  80f5fc:	20c7883a 	add	r3,r4,r3
  80f600:	280ed43a 	srli	r7,r5,16
  80f604:	180bd43a 	srai	r5,r3,16
  80f608:	193fffcc 	andi	r4,r3,65535
  80f60c:	3947883a 	add	r3,r7,r5
  80f610:	180a943a 	slli	r5,r3,16
  80f614:	1807d43a 	srai	r3,r3,16
  80f618:	2908b03a 	or	r4,r5,r4
  80f61c:	313fff15 	stw	r4,-4(r6)
  80f620:	5a3ff236 	bltu	r11,r8,80f5ec <__alt_mem_onchip_mem+0xff8075ec>
  80f624:	0406303a 	nor	r3,zero,r16
  80f628:	1a07883a 	add	r3,r3,r8
  80f62c:	1806d0ba 	srli	r3,r3,2
  80f630:	18c00044 	addi	r3,r3,1
  80f634:	18c7883a 	add	r3,r3,r3
  80f638:	18c7883a 	add	r3,r3,r3
  80f63c:	50d5883a 	add	r10,r10,r3
  80f640:	50ffff04 	addi	r3,r10,-4
  80f644:	2000041e 	bne	r4,zero,80f658 <__mdiff+0x194>
  80f648:	18ffff04 	addi	r3,r3,-4
  80f64c:	19000017 	ldw	r4,0(r3)
  80f650:	4a7fffc4 	addi	r9,r9,-1
  80f654:	203ffc26 	beq	r4,zero,80f648 <__alt_mem_onchip_mem+0xff807648>
  80f658:	12400415 	stw	r9,16(r2)
  80f65c:	dfc00517 	ldw	ra,20(sp)
  80f660:	dd000417 	ldw	r20,16(sp)
  80f664:	dcc00317 	ldw	r19,12(sp)
  80f668:	dc800217 	ldw	r18,8(sp)
  80f66c:	dc400117 	ldw	r17,4(sp)
  80f670:	dc000017 	ldw	r16,0(sp)
  80f674:	dec00604 	addi	sp,sp,24
  80f678:	f800283a 	ret
  80f67c:	000b883a 	mov	r5,zero
  80f680:	080eb9c0 	call	80eb9c <_Balloc>
  80f684:	00c00044 	movi	r3,1
  80f688:	10c00415 	stw	r3,16(r2)
  80f68c:	10000515 	stw	zero,20(r2)
  80f690:	003ff206 	br	80f65c <__alt_mem_onchip_mem+0xff80765c>
  80f694:	8023883a 	mov	r17,r16
  80f698:	0029883a 	mov	r20,zero
  80f69c:	4021883a 	mov	r16,r8
  80f6a0:	003fad06 	br	80f558 <__alt_mem_onchip_mem+0xff807558>
  80f6a4:	9005883a 	mov	r2,r18
  80f6a8:	94400504 	addi	r17,r18,20
  80f6ac:	9c000504 	addi	r16,r19,20
  80f6b0:	9825883a 	mov	r18,r19
  80f6b4:	05000044 	movi	r20,1
  80f6b8:	1027883a 	mov	r19,r2
  80f6bc:	003fa606 	br	80f558 <__alt_mem_onchip_mem+0xff807558>

0080f6c0 <__ulp>:
  80f6c0:	295ffc2c 	andhi	r5,r5,32752
  80f6c4:	00bf3034 	movhi	r2,64704
  80f6c8:	2887883a 	add	r3,r5,r2
  80f6cc:	00c0020e 	bge	zero,r3,80f6d8 <__ulp+0x18>
  80f6d0:	0005883a 	mov	r2,zero
  80f6d4:	f800283a 	ret
  80f6d8:	00c7c83a 	sub	r3,zero,r3
  80f6dc:	1807d53a 	srai	r3,r3,20
  80f6e0:	008004c4 	movi	r2,19
  80f6e4:	10c00b0e 	bge	r2,r3,80f714 <__ulp+0x54>
  80f6e8:	18bffb04 	addi	r2,r3,-20
  80f6ec:	01000784 	movi	r4,30
  80f6f0:	0007883a 	mov	r3,zero
  80f6f4:	20800516 	blt	r4,r2,80f70c <__ulp+0x4c>
  80f6f8:	010007c4 	movi	r4,31
  80f6fc:	2089c83a 	sub	r4,r4,r2
  80f700:	00800044 	movi	r2,1
  80f704:	1104983a 	sll	r2,r2,r4
  80f708:	f800283a 	ret
  80f70c:	00800044 	movi	r2,1
  80f710:	f800283a 	ret
  80f714:	01400234 	movhi	r5,8
  80f718:	28c7d83a 	sra	r3,r5,r3
  80f71c:	0005883a 	mov	r2,zero
  80f720:	f800283a 	ret

0080f724 <__b2d>:
  80f724:	defffa04 	addi	sp,sp,-24
  80f728:	dc000015 	stw	r16,0(sp)
  80f72c:	24000417 	ldw	r16,16(r4)
  80f730:	dc400115 	stw	r17,4(sp)
  80f734:	24400504 	addi	r17,r4,20
  80f738:	8421883a 	add	r16,r16,r16
  80f73c:	8421883a 	add	r16,r16,r16
  80f740:	8c21883a 	add	r16,r17,r16
  80f744:	dc800215 	stw	r18,8(sp)
  80f748:	84bfff17 	ldw	r18,-4(r16)
  80f74c:	dd000415 	stw	r20,16(sp)
  80f750:	dcc00315 	stw	r19,12(sp)
  80f754:	9009883a 	mov	r4,r18
  80f758:	2829883a 	mov	r20,r5
  80f75c:	dfc00515 	stw	ra,20(sp)
  80f760:	080ee900 	call	80ee90 <__hi0bits>
  80f764:	00c00804 	movi	r3,32
  80f768:	1889c83a 	sub	r4,r3,r2
  80f76c:	a1000015 	stw	r4,0(r20)
  80f770:	01000284 	movi	r4,10
  80f774:	84ffff04 	addi	r19,r16,-4
  80f778:	20801216 	blt	r4,r2,80f7c4 <__b2d+0xa0>
  80f77c:	018002c4 	movi	r6,11
  80f780:	308dc83a 	sub	r6,r6,r2
  80f784:	9186d83a 	srl	r3,r18,r6
  80f788:	18cffc34 	orhi	r3,r3,16368
  80f78c:	8cc0212e 	bgeu	r17,r19,80f814 <__b2d+0xf0>
  80f790:	813ffe17 	ldw	r4,-8(r16)
  80f794:	218cd83a 	srl	r6,r4,r6
  80f798:	10800544 	addi	r2,r2,21
  80f79c:	9084983a 	sll	r2,r18,r2
  80f7a0:	1184b03a 	or	r2,r2,r6
  80f7a4:	dfc00517 	ldw	ra,20(sp)
  80f7a8:	dd000417 	ldw	r20,16(sp)
  80f7ac:	dcc00317 	ldw	r19,12(sp)
  80f7b0:	dc800217 	ldw	r18,8(sp)
  80f7b4:	dc400117 	ldw	r17,4(sp)
  80f7b8:	dc000017 	ldw	r16,0(sp)
  80f7bc:	dec00604 	addi	sp,sp,24
  80f7c0:	f800283a 	ret
  80f7c4:	8cc00f2e 	bgeu	r17,r19,80f804 <__b2d+0xe0>
  80f7c8:	117ffd44 	addi	r5,r2,-11
  80f7cc:	80bffe17 	ldw	r2,-8(r16)
  80f7d0:	28000e26 	beq	r5,zero,80f80c <__b2d+0xe8>
  80f7d4:	1949c83a 	sub	r4,r3,r5
  80f7d8:	9164983a 	sll	r18,r18,r5
  80f7dc:	1106d83a 	srl	r3,r2,r4
  80f7e0:	81bffe04 	addi	r6,r16,-8
  80f7e4:	948ffc34 	orhi	r18,r18,16368
  80f7e8:	90c6b03a 	or	r3,r18,r3
  80f7ec:	89800e2e 	bgeu	r17,r6,80f828 <__b2d+0x104>
  80f7f0:	81bffd17 	ldw	r6,-12(r16)
  80f7f4:	1144983a 	sll	r2,r2,r5
  80f7f8:	310ad83a 	srl	r5,r6,r4
  80f7fc:	2884b03a 	or	r2,r5,r2
  80f800:	003fe806 	br	80f7a4 <__alt_mem_onchip_mem+0xff8077a4>
  80f804:	10bffd44 	addi	r2,r2,-11
  80f808:	1000041e 	bne	r2,zero,80f81c <__b2d+0xf8>
  80f80c:	90cffc34 	orhi	r3,r18,16368
  80f810:	003fe406 	br	80f7a4 <__alt_mem_onchip_mem+0xff8077a4>
  80f814:	000d883a 	mov	r6,zero
  80f818:	003fdf06 	br	80f798 <__alt_mem_onchip_mem+0xff807798>
  80f81c:	90a4983a 	sll	r18,r18,r2
  80f820:	0005883a 	mov	r2,zero
  80f824:	003ff906 	br	80f80c <__alt_mem_onchip_mem+0xff80780c>
  80f828:	1144983a 	sll	r2,r2,r5
  80f82c:	003fdd06 	br	80f7a4 <__alt_mem_onchip_mem+0xff8077a4>

0080f830 <__d2b>:
  80f830:	defff804 	addi	sp,sp,-32
  80f834:	dc000215 	stw	r16,8(sp)
  80f838:	3021883a 	mov	r16,r6
  80f83c:	dc400315 	stw	r17,12(sp)
  80f840:	8022907a 	slli	r17,r16,1
  80f844:	dd000615 	stw	r20,24(sp)
  80f848:	2829883a 	mov	r20,r5
  80f84c:	01400044 	movi	r5,1
  80f850:	dcc00515 	stw	r19,20(sp)
  80f854:	dc800415 	stw	r18,16(sp)
  80f858:	dfc00715 	stw	ra,28(sp)
  80f85c:	3825883a 	mov	r18,r7
  80f860:	8822d57a 	srli	r17,r17,21
  80f864:	080eb9c0 	call	80eb9c <_Balloc>
  80f868:	1027883a 	mov	r19,r2
  80f86c:	00800434 	movhi	r2,16
  80f870:	10bfffc4 	addi	r2,r2,-1
  80f874:	808c703a 	and	r6,r16,r2
  80f878:	88000126 	beq	r17,zero,80f880 <__d2b+0x50>
  80f87c:	31800434 	orhi	r6,r6,16
  80f880:	d9800015 	stw	r6,0(sp)
  80f884:	a0002426 	beq	r20,zero,80f918 <__d2b+0xe8>
  80f888:	d9000104 	addi	r4,sp,4
  80f88c:	dd000115 	stw	r20,4(sp)
  80f890:	080eef80 	call	80eef8 <__lo0bits>
  80f894:	d8c00017 	ldw	r3,0(sp)
  80f898:	10002f1e 	bne	r2,zero,80f958 <__d2b+0x128>
  80f89c:	d9000117 	ldw	r4,4(sp)
  80f8a0:	99000515 	stw	r4,20(r19)
  80f8a4:	1821003a 	cmpeq	r16,r3,zero
  80f8a8:	01000084 	movi	r4,2
  80f8ac:	2421c83a 	sub	r16,r4,r16
  80f8b0:	98c00615 	stw	r3,24(r19)
  80f8b4:	9c000415 	stw	r16,16(r19)
  80f8b8:	88001f1e 	bne	r17,zero,80f938 <__d2b+0x108>
  80f8bc:	10bef384 	addi	r2,r2,-1074
  80f8c0:	90800015 	stw	r2,0(r18)
  80f8c4:	00900034 	movhi	r2,16384
  80f8c8:	10bfffc4 	addi	r2,r2,-1
  80f8cc:	8085883a 	add	r2,r16,r2
  80f8d0:	1085883a 	add	r2,r2,r2
  80f8d4:	1085883a 	add	r2,r2,r2
  80f8d8:	9885883a 	add	r2,r19,r2
  80f8dc:	11000517 	ldw	r4,20(r2)
  80f8e0:	8020917a 	slli	r16,r16,5
  80f8e4:	080ee900 	call	80ee90 <__hi0bits>
  80f8e8:	d8c00817 	ldw	r3,32(sp)
  80f8ec:	8085c83a 	sub	r2,r16,r2
  80f8f0:	18800015 	stw	r2,0(r3)
  80f8f4:	9805883a 	mov	r2,r19
  80f8f8:	dfc00717 	ldw	ra,28(sp)
  80f8fc:	dd000617 	ldw	r20,24(sp)
  80f900:	dcc00517 	ldw	r19,20(sp)
  80f904:	dc800417 	ldw	r18,16(sp)
  80f908:	dc400317 	ldw	r17,12(sp)
  80f90c:	dc000217 	ldw	r16,8(sp)
  80f910:	dec00804 	addi	sp,sp,32
  80f914:	f800283a 	ret
  80f918:	d809883a 	mov	r4,sp
  80f91c:	080eef80 	call	80eef8 <__lo0bits>
  80f920:	d8c00017 	ldw	r3,0(sp)
  80f924:	04000044 	movi	r16,1
  80f928:	9c000415 	stw	r16,16(r19)
  80f92c:	98c00515 	stw	r3,20(r19)
  80f930:	10800804 	addi	r2,r2,32
  80f934:	883fe126 	beq	r17,zero,80f8bc <__alt_mem_onchip_mem+0xff8078bc>
  80f938:	00c00d44 	movi	r3,53
  80f93c:	8c7ef344 	addi	r17,r17,-1075
  80f940:	88a3883a 	add	r17,r17,r2
  80f944:	1885c83a 	sub	r2,r3,r2
  80f948:	d8c00817 	ldw	r3,32(sp)
  80f94c:	94400015 	stw	r17,0(r18)
  80f950:	18800015 	stw	r2,0(r3)
  80f954:	003fe706 	br	80f8f4 <__alt_mem_onchip_mem+0xff8078f4>
  80f958:	01000804 	movi	r4,32
  80f95c:	2089c83a 	sub	r4,r4,r2
  80f960:	1908983a 	sll	r4,r3,r4
  80f964:	d9400117 	ldw	r5,4(sp)
  80f968:	1886d83a 	srl	r3,r3,r2
  80f96c:	2148b03a 	or	r4,r4,r5
  80f970:	99000515 	stw	r4,20(r19)
  80f974:	d8c00015 	stw	r3,0(sp)
  80f978:	003fca06 	br	80f8a4 <__alt_mem_onchip_mem+0xff8078a4>

0080f97c <__ratio>:
  80f97c:	defff904 	addi	sp,sp,-28
  80f980:	dc400315 	stw	r17,12(sp)
  80f984:	2823883a 	mov	r17,r5
  80f988:	d9400104 	addi	r5,sp,4
  80f98c:	dfc00615 	stw	ra,24(sp)
  80f990:	dcc00515 	stw	r19,20(sp)
  80f994:	dc800415 	stw	r18,16(sp)
  80f998:	2027883a 	mov	r19,r4
  80f99c:	dc000215 	stw	r16,8(sp)
  80f9a0:	080f7240 	call	80f724 <__b2d>
  80f9a4:	d80b883a 	mov	r5,sp
  80f9a8:	8809883a 	mov	r4,r17
  80f9ac:	1025883a 	mov	r18,r2
  80f9b0:	1821883a 	mov	r16,r3
  80f9b4:	080f7240 	call	80f724 <__b2d>
  80f9b8:	8a000417 	ldw	r8,16(r17)
  80f9bc:	99000417 	ldw	r4,16(r19)
  80f9c0:	d9400117 	ldw	r5,4(sp)
  80f9c4:	2209c83a 	sub	r4,r4,r8
  80f9c8:	2010917a 	slli	r8,r4,5
  80f9cc:	d9000017 	ldw	r4,0(sp)
  80f9d0:	2909c83a 	sub	r4,r5,r4
  80f9d4:	4109883a 	add	r4,r8,r4
  80f9d8:	01000e0e 	bge	zero,r4,80fa14 <__ratio+0x98>
  80f9dc:	2008953a 	slli	r4,r4,20
  80f9e0:	2421883a 	add	r16,r4,r16
  80f9e4:	100d883a 	mov	r6,r2
  80f9e8:	180f883a 	mov	r7,r3
  80f9ec:	9009883a 	mov	r4,r18
  80f9f0:	800b883a 	mov	r5,r16
  80f9f4:	081366c0 	call	81366c <__divdf3>
  80f9f8:	dfc00617 	ldw	ra,24(sp)
  80f9fc:	dcc00517 	ldw	r19,20(sp)
  80fa00:	dc800417 	ldw	r18,16(sp)
  80fa04:	dc400317 	ldw	r17,12(sp)
  80fa08:	dc000217 	ldw	r16,8(sp)
  80fa0c:	dec00704 	addi	sp,sp,28
  80fa10:	f800283a 	ret
  80fa14:	2008953a 	slli	r4,r4,20
  80fa18:	1907c83a 	sub	r3,r3,r4
  80fa1c:	003ff106 	br	80f9e4 <__alt_mem_onchip_mem+0xff8079e4>

0080fa20 <_mprec_log10>:
  80fa20:	defffe04 	addi	sp,sp,-8
  80fa24:	dc000015 	stw	r16,0(sp)
  80fa28:	dfc00115 	stw	ra,4(sp)
  80fa2c:	008005c4 	movi	r2,23
  80fa30:	2021883a 	mov	r16,r4
  80fa34:	11000d0e 	bge	r2,r4,80fa6c <_mprec_log10+0x4c>
  80fa38:	0005883a 	mov	r2,zero
  80fa3c:	00cffc34 	movhi	r3,16368
  80fa40:	843fffc4 	addi	r16,r16,-1
  80fa44:	000d883a 	mov	r6,zero
  80fa48:	01d00934 	movhi	r7,16420
  80fa4c:	1009883a 	mov	r4,r2
  80fa50:	180b883a 	mov	r5,r3
  80fa54:	080828c0 	call	80828c <__muldf3>
  80fa58:	803ff91e 	bne	r16,zero,80fa40 <__alt_mem_onchip_mem+0xff807a40>
  80fa5c:	dfc00117 	ldw	ra,4(sp)
  80fa60:	dc000017 	ldw	r16,0(sp)
  80fa64:	dec00204 	addi	sp,sp,8
  80fa68:	f800283a 	ret
  80fa6c:	202090fa 	slli	r16,r4,3
  80fa70:	008020b4 	movhi	r2,130
  80fa74:	10a0e004 	addi	r2,r2,-31872
  80fa78:	1421883a 	add	r16,r2,r16
  80fa7c:	80800017 	ldw	r2,0(r16)
  80fa80:	80c00117 	ldw	r3,4(r16)
  80fa84:	dfc00117 	ldw	ra,4(sp)
  80fa88:	dc000017 	ldw	r16,0(sp)
  80fa8c:	dec00204 	addi	sp,sp,8
  80fa90:	f800283a 	ret

0080fa94 <__copybits>:
  80fa94:	297fffc4 	addi	r5,r5,-1
  80fa98:	280fd17a 	srai	r7,r5,5
  80fa9c:	30c00417 	ldw	r3,16(r6)
  80faa0:	30800504 	addi	r2,r6,20
  80faa4:	39c00044 	addi	r7,r7,1
  80faa8:	18c7883a 	add	r3,r3,r3
  80faac:	39cf883a 	add	r7,r7,r7
  80fab0:	18c7883a 	add	r3,r3,r3
  80fab4:	39cf883a 	add	r7,r7,r7
  80fab8:	10c7883a 	add	r3,r2,r3
  80fabc:	21cf883a 	add	r7,r4,r7
  80fac0:	10c00d2e 	bgeu	r2,r3,80faf8 <__copybits+0x64>
  80fac4:	200b883a 	mov	r5,r4
  80fac8:	12000017 	ldw	r8,0(r2)
  80facc:	29400104 	addi	r5,r5,4
  80fad0:	10800104 	addi	r2,r2,4
  80fad4:	2a3fff15 	stw	r8,-4(r5)
  80fad8:	10fffb36 	bltu	r2,r3,80fac8 <__alt_mem_onchip_mem+0xff807ac8>
  80fadc:	1985c83a 	sub	r2,r3,r6
  80fae0:	10bffac4 	addi	r2,r2,-21
  80fae4:	1004d0ba 	srli	r2,r2,2
  80fae8:	10800044 	addi	r2,r2,1
  80faec:	1085883a 	add	r2,r2,r2
  80faf0:	1085883a 	add	r2,r2,r2
  80faf4:	2089883a 	add	r4,r4,r2
  80faf8:	21c0032e 	bgeu	r4,r7,80fb08 <__copybits+0x74>
  80fafc:	20000015 	stw	zero,0(r4)
  80fb00:	21000104 	addi	r4,r4,4
  80fb04:	21fffd36 	bltu	r4,r7,80fafc <__alt_mem_onchip_mem+0xff807afc>
  80fb08:	f800283a 	ret

0080fb0c <__any_on>:
  80fb0c:	20c00417 	ldw	r3,16(r4)
  80fb10:	2805d17a 	srai	r2,r5,5
  80fb14:	21000504 	addi	r4,r4,20
  80fb18:	18800d0e 	bge	r3,r2,80fb50 <__any_on+0x44>
  80fb1c:	18c7883a 	add	r3,r3,r3
  80fb20:	18c7883a 	add	r3,r3,r3
  80fb24:	20c7883a 	add	r3,r4,r3
  80fb28:	20c0192e 	bgeu	r4,r3,80fb90 <__any_on+0x84>
  80fb2c:	18bfff17 	ldw	r2,-4(r3)
  80fb30:	18ffff04 	addi	r3,r3,-4
  80fb34:	1000041e 	bne	r2,zero,80fb48 <__any_on+0x3c>
  80fb38:	20c0142e 	bgeu	r4,r3,80fb8c <__any_on+0x80>
  80fb3c:	18ffff04 	addi	r3,r3,-4
  80fb40:	19400017 	ldw	r5,0(r3)
  80fb44:	283ffc26 	beq	r5,zero,80fb38 <__alt_mem_onchip_mem+0xff807b38>
  80fb48:	00800044 	movi	r2,1
  80fb4c:	f800283a 	ret
  80fb50:	10c00a0e 	bge	r2,r3,80fb7c <__any_on+0x70>
  80fb54:	1085883a 	add	r2,r2,r2
  80fb58:	1085883a 	add	r2,r2,r2
  80fb5c:	294007cc 	andi	r5,r5,31
  80fb60:	2087883a 	add	r3,r4,r2
  80fb64:	283ff026 	beq	r5,zero,80fb28 <__alt_mem_onchip_mem+0xff807b28>
  80fb68:	19800017 	ldw	r6,0(r3)
  80fb6c:	3144d83a 	srl	r2,r6,r5
  80fb70:	114a983a 	sll	r5,r2,r5
  80fb74:	317ff41e 	bne	r6,r5,80fb48 <__alt_mem_onchip_mem+0xff807b48>
  80fb78:	003feb06 	br	80fb28 <__alt_mem_onchip_mem+0xff807b28>
  80fb7c:	1085883a 	add	r2,r2,r2
  80fb80:	1085883a 	add	r2,r2,r2
  80fb84:	2087883a 	add	r3,r4,r2
  80fb88:	003fe706 	br	80fb28 <__alt_mem_onchip_mem+0xff807b28>
  80fb8c:	f800283a 	ret
  80fb90:	0005883a 	mov	r2,zero
  80fb94:	f800283a 	ret

0080fb98 <__fpclassifyd>:
  80fb98:	00a00034 	movhi	r2,32768
  80fb9c:	10bfffc4 	addi	r2,r2,-1
  80fba0:	2884703a 	and	r2,r5,r2
  80fba4:	10000726 	beq	r2,zero,80fbc4 <__fpclassifyd+0x2c>
  80fba8:	00fffc34 	movhi	r3,65520
  80fbac:	019ff834 	movhi	r6,32736
  80fbb0:	28c7883a 	add	r3,r5,r3
  80fbb4:	31bfffc4 	addi	r6,r6,-1
  80fbb8:	30c00536 	bltu	r6,r3,80fbd0 <__fpclassifyd+0x38>
  80fbbc:	00800104 	movi	r2,4
  80fbc0:	f800283a 	ret
  80fbc4:	2000021e 	bne	r4,zero,80fbd0 <__fpclassifyd+0x38>
  80fbc8:	00800084 	movi	r2,2
  80fbcc:	f800283a 	ret
  80fbd0:	00dffc34 	movhi	r3,32752
  80fbd4:	019ff834 	movhi	r6,32736
  80fbd8:	28cb883a 	add	r5,r5,r3
  80fbdc:	31bfffc4 	addi	r6,r6,-1
  80fbe0:	317ff62e 	bgeu	r6,r5,80fbbc <__alt_mem_onchip_mem+0xff807bbc>
  80fbe4:	01400434 	movhi	r5,16
  80fbe8:	297fffc4 	addi	r5,r5,-1
  80fbec:	28800236 	bltu	r5,r2,80fbf8 <__fpclassifyd+0x60>
  80fbf0:	008000c4 	movi	r2,3
  80fbf4:	f800283a 	ret
  80fbf8:	10c00226 	beq	r2,r3,80fc04 <__fpclassifyd+0x6c>
  80fbfc:	0005883a 	mov	r2,zero
  80fc00:	f800283a 	ret
  80fc04:	2005003a 	cmpeq	r2,r4,zero
  80fc08:	f800283a 	ret

0080fc0c <_sbrk_r>:
  80fc0c:	defffd04 	addi	sp,sp,-12
  80fc10:	dc000015 	stw	r16,0(sp)
  80fc14:	040020b4 	movhi	r16,130
  80fc18:	dc400115 	stw	r17,4(sp)
  80fc1c:	84304104 	addi	r16,r16,-16124
  80fc20:	2023883a 	mov	r17,r4
  80fc24:	2809883a 	mov	r4,r5
  80fc28:	dfc00215 	stw	ra,8(sp)
  80fc2c:	80000015 	stw	zero,0(r16)
  80fc30:	08147bc0 	call	8147bc <sbrk>
  80fc34:	00ffffc4 	movi	r3,-1
  80fc38:	10c00526 	beq	r2,r3,80fc50 <_sbrk_r+0x44>
  80fc3c:	dfc00217 	ldw	ra,8(sp)
  80fc40:	dc400117 	ldw	r17,4(sp)
  80fc44:	dc000017 	ldw	r16,0(sp)
  80fc48:	dec00304 	addi	sp,sp,12
  80fc4c:	f800283a 	ret
  80fc50:	80c00017 	ldw	r3,0(r16)
  80fc54:	183ff926 	beq	r3,zero,80fc3c <__alt_mem_onchip_mem+0xff807c3c>
  80fc58:	88c00015 	stw	r3,0(r17)
  80fc5c:	003ff706 	br	80fc3c <__alt_mem_onchip_mem+0xff807c3c>

0080fc60 <__sread>:
  80fc60:	defffe04 	addi	sp,sp,-8
  80fc64:	dc000015 	stw	r16,0(sp)
  80fc68:	2821883a 	mov	r16,r5
  80fc6c:	2940038f 	ldh	r5,14(r5)
  80fc70:	dfc00115 	stw	ra,4(sp)
  80fc74:	08121040 	call	812104 <_read_r>
  80fc78:	10000716 	blt	r2,zero,80fc98 <__sread+0x38>
  80fc7c:	80c01417 	ldw	r3,80(r16)
  80fc80:	1887883a 	add	r3,r3,r2
  80fc84:	80c01415 	stw	r3,80(r16)
  80fc88:	dfc00117 	ldw	ra,4(sp)
  80fc8c:	dc000017 	ldw	r16,0(sp)
  80fc90:	dec00204 	addi	sp,sp,8
  80fc94:	f800283a 	ret
  80fc98:	80c0030b 	ldhu	r3,12(r16)
  80fc9c:	18fbffcc 	andi	r3,r3,61439
  80fca0:	80c0030d 	sth	r3,12(r16)
  80fca4:	dfc00117 	ldw	ra,4(sp)
  80fca8:	dc000017 	ldw	r16,0(sp)
  80fcac:	dec00204 	addi	sp,sp,8
  80fcb0:	f800283a 	ret

0080fcb4 <__seofread>:
  80fcb4:	0005883a 	mov	r2,zero
  80fcb8:	f800283a 	ret

0080fcbc <__swrite>:
  80fcbc:	2880030b 	ldhu	r2,12(r5)
  80fcc0:	defffb04 	addi	sp,sp,-20
  80fcc4:	dcc00315 	stw	r19,12(sp)
  80fcc8:	dc800215 	stw	r18,8(sp)
  80fccc:	dc400115 	stw	r17,4(sp)
  80fcd0:	dc000015 	stw	r16,0(sp)
  80fcd4:	dfc00415 	stw	ra,16(sp)
  80fcd8:	10c0400c 	andi	r3,r2,256
  80fcdc:	2821883a 	mov	r16,r5
  80fce0:	2023883a 	mov	r17,r4
  80fce4:	3025883a 	mov	r18,r6
  80fce8:	3827883a 	mov	r19,r7
  80fcec:	18000526 	beq	r3,zero,80fd04 <__swrite+0x48>
  80fcf0:	2940038f 	ldh	r5,14(r5)
  80fcf4:	01c00084 	movi	r7,2
  80fcf8:	000d883a 	mov	r6,zero
  80fcfc:	0811f480 	call	811f48 <_lseek_r>
  80fd00:	8080030b 	ldhu	r2,12(r16)
  80fd04:	8140038f 	ldh	r5,14(r16)
  80fd08:	10bbffcc 	andi	r2,r2,61439
  80fd0c:	980f883a 	mov	r7,r19
  80fd10:	900d883a 	mov	r6,r18
  80fd14:	8809883a 	mov	r4,r17
  80fd18:	8080030d 	sth	r2,12(r16)
  80fd1c:	dfc00417 	ldw	ra,16(sp)
  80fd20:	dcc00317 	ldw	r19,12(sp)
  80fd24:	dc800217 	ldw	r18,8(sp)
  80fd28:	dc400117 	ldw	r17,4(sp)
  80fd2c:	dc000017 	ldw	r16,0(sp)
  80fd30:	dec00504 	addi	sp,sp,20
  80fd34:	08115581 	jmpi	811558 <_write_r>

0080fd38 <__sseek>:
  80fd38:	defffe04 	addi	sp,sp,-8
  80fd3c:	dc000015 	stw	r16,0(sp)
  80fd40:	2821883a 	mov	r16,r5
  80fd44:	2940038f 	ldh	r5,14(r5)
  80fd48:	dfc00115 	stw	ra,4(sp)
  80fd4c:	0811f480 	call	811f48 <_lseek_r>
  80fd50:	00ffffc4 	movi	r3,-1
  80fd54:	10c00826 	beq	r2,r3,80fd78 <__sseek+0x40>
  80fd58:	80c0030b 	ldhu	r3,12(r16)
  80fd5c:	80801415 	stw	r2,80(r16)
  80fd60:	18c40014 	ori	r3,r3,4096
  80fd64:	80c0030d 	sth	r3,12(r16)
  80fd68:	dfc00117 	ldw	ra,4(sp)
  80fd6c:	dc000017 	ldw	r16,0(sp)
  80fd70:	dec00204 	addi	sp,sp,8
  80fd74:	f800283a 	ret
  80fd78:	80c0030b 	ldhu	r3,12(r16)
  80fd7c:	18fbffcc 	andi	r3,r3,61439
  80fd80:	80c0030d 	sth	r3,12(r16)
  80fd84:	dfc00117 	ldw	ra,4(sp)
  80fd88:	dc000017 	ldw	r16,0(sp)
  80fd8c:	dec00204 	addi	sp,sp,8
  80fd90:	f800283a 	ret

0080fd94 <__sclose>:
  80fd94:	2940038f 	ldh	r5,14(r5)
  80fd98:	08115b81 	jmpi	8115b8 <_close_r>

0080fd9c <strcmp>:
  80fd9c:	2144b03a 	or	r2,r4,r5
  80fda0:	108000cc 	andi	r2,r2,3
  80fda4:	1000171e 	bne	r2,zero,80fe04 <strcmp+0x68>
  80fda8:	20800017 	ldw	r2,0(r4)
  80fdac:	28c00017 	ldw	r3,0(r5)
  80fdb0:	10c0141e 	bne	r2,r3,80fe04 <strcmp+0x68>
  80fdb4:	027fbff4 	movhi	r9,65279
  80fdb8:	4a7fbfc4 	addi	r9,r9,-257
  80fdbc:	0086303a 	nor	r3,zero,r2
  80fdc0:	02202074 	movhi	r8,32897
  80fdc4:	1245883a 	add	r2,r2,r9
  80fdc8:	42202004 	addi	r8,r8,-32640
  80fdcc:	10c4703a 	and	r2,r2,r3
  80fdd0:	1204703a 	and	r2,r2,r8
  80fdd4:	10000226 	beq	r2,zero,80fde0 <strcmp+0x44>
  80fdd8:	00002306 	br	80fe68 <strcmp+0xcc>
  80fddc:	1000221e 	bne	r2,zero,80fe68 <strcmp+0xcc>
  80fde0:	21000104 	addi	r4,r4,4
  80fde4:	20c00017 	ldw	r3,0(r4)
  80fde8:	29400104 	addi	r5,r5,4
  80fdec:	29800017 	ldw	r6,0(r5)
  80fdf0:	1a4f883a 	add	r7,r3,r9
  80fdf4:	00c4303a 	nor	r2,zero,r3
  80fdf8:	3884703a 	and	r2,r7,r2
  80fdfc:	1204703a 	and	r2,r2,r8
  80fe00:	19bff626 	beq	r3,r6,80fddc <__alt_mem_onchip_mem+0xff807ddc>
  80fe04:	20800003 	ldbu	r2,0(r4)
  80fe08:	10c03fcc 	andi	r3,r2,255
  80fe0c:	18c0201c 	xori	r3,r3,128
  80fe10:	18ffe004 	addi	r3,r3,-128
  80fe14:	18000c26 	beq	r3,zero,80fe48 <strcmp+0xac>
  80fe18:	29800007 	ldb	r6,0(r5)
  80fe1c:	19800326 	beq	r3,r6,80fe2c <strcmp+0x90>
  80fe20:	00001306 	br	80fe70 <strcmp+0xd4>
  80fe24:	29800007 	ldb	r6,0(r5)
  80fe28:	11800b1e 	bne	r2,r6,80fe58 <strcmp+0xbc>
  80fe2c:	21000044 	addi	r4,r4,1
  80fe30:	20c00003 	ldbu	r3,0(r4)
  80fe34:	29400044 	addi	r5,r5,1
  80fe38:	18803fcc 	andi	r2,r3,255
  80fe3c:	1080201c 	xori	r2,r2,128
  80fe40:	10bfe004 	addi	r2,r2,-128
  80fe44:	103ff71e 	bne	r2,zero,80fe24 <__alt_mem_onchip_mem+0xff807e24>
  80fe48:	0007883a 	mov	r3,zero
  80fe4c:	28800003 	ldbu	r2,0(r5)
  80fe50:	1885c83a 	sub	r2,r3,r2
  80fe54:	f800283a 	ret
  80fe58:	28800003 	ldbu	r2,0(r5)
  80fe5c:	18c03fcc 	andi	r3,r3,255
  80fe60:	1885c83a 	sub	r2,r3,r2
  80fe64:	f800283a 	ret
  80fe68:	0005883a 	mov	r2,zero
  80fe6c:	f800283a 	ret
  80fe70:	10c03fcc 	andi	r3,r2,255
  80fe74:	003ff506 	br	80fe4c <__alt_mem_onchip_mem+0xff807e4c>

0080fe78 <strlen>:
  80fe78:	208000cc 	andi	r2,r4,3
  80fe7c:	10002026 	beq	r2,zero,80ff00 <strlen+0x88>
  80fe80:	20800007 	ldb	r2,0(r4)
  80fe84:	10002026 	beq	r2,zero,80ff08 <strlen+0x90>
  80fe88:	2005883a 	mov	r2,r4
  80fe8c:	00000206 	br	80fe98 <strlen+0x20>
  80fe90:	10c00007 	ldb	r3,0(r2)
  80fe94:	18001826 	beq	r3,zero,80fef8 <strlen+0x80>
  80fe98:	10800044 	addi	r2,r2,1
  80fe9c:	10c000cc 	andi	r3,r2,3
  80fea0:	183ffb1e 	bne	r3,zero,80fe90 <__alt_mem_onchip_mem+0xff807e90>
  80fea4:	10c00017 	ldw	r3,0(r2)
  80fea8:	01ffbff4 	movhi	r7,65279
  80feac:	39ffbfc4 	addi	r7,r7,-257
  80feb0:	00ca303a 	nor	r5,zero,r3
  80feb4:	01a02074 	movhi	r6,32897
  80feb8:	19c7883a 	add	r3,r3,r7
  80febc:	31a02004 	addi	r6,r6,-32640
  80fec0:	1946703a 	and	r3,r3,r5
  80fec4:	1986703a 	and	r3,r3,r6
  80fec8:	1800091e 	bne	r3,zero,80fef0 <strlen+0x78>
  80fecc:	10800104 	addi	r2,r2,4
  80fed0:	10c00017 	ldw	r3,0(r2)
  80fed4:	19cb883a 	add	r5,r3,r7
  80fed8:	00c6303a 	nor	r3,zero,r3
  80fedc:	28c6703a 	and	r3,r5,r3
  80fee0:	1986703a 	and	r3,r3,r6
  80fee4:	183ff926 	beq	r3,zero,80fecc <__alt_mem_onchip_mem+0xff807ecc>
  80fee8:	00000106 	br	80fef0 <strlen+0x78>
  80feec:	10800044 	addi	r2,r2,1
  80fef0:	10c00007 	ldb	r3,0(r2)
  80fef4:	183ffd1e 	bne	r3,zero,80feec <__alt_mem_onchip_mem+0xff807eec>
  80fef8:	1105c83a 	sub	r2,r2,r4
  80fefc:	f800283a 	ret
  80ff00:	2005883a 	mov	r2,r4
  80ff04:	003fe706 	br	80fea4 <__alt_mem_onchip_mem+0xff807ea4>
  80ff08:	0005883a 	mov	r2,zero
  80ff0c:	f800283a 	ret

0080ff10 <__sprint_r.part.0>:
  80ff10:	28801917 	ldw	r2,100(r5)
  80ff14:	defff604 	addi	sp,sp,-40
  80ff18:	dd400515 	stw	r21,20(sp)
  80ff1c:	dfc00915 	stw	ra,36(sp)
  80ff20:	df000815 	stw	fp,32(sp)
  80ff24:	ddc00715 	stw	r23,28(sp)
  80ff28:	dd800615 	stw	r22,24(sp)
  80ff2c:	dd000415 	stw	r20,16(sp)
  80ff30:	dcc00315 	stw	r19,12(sp)
  80ff34:	dc800215 	stw	r18,8(sp)
  80ff38:	dc400115 	stw	r17,4(sp)
  80ff3c:	dc000015 	stw	r16,0(sp)
  80ff40:	1088000c 	andi	r2,r2,8192
  80ff44:	302b883a 	mov	r21,r6
  80ff48:	10002e26 	beq	r2,zero,810004 <__sprint_r.part.0+0xf4>
  80ff4c:	30800217 	ldw	r2,8(r6)
  80ff50:	35800017 	ldw	r22,0(r6)
  80ff54:	10002926 	beq	r2,zero,80fffc <__sprint_r.part.0+0xec>
  80ff58:	2827883a 	mov	r19,r5
  80ff5c:	2029883a 	mov	r20,r4
  80ff60:	b5c00104 	addi	r23,r22,4
  80ff64:	04bfffc4 	movi	r18,-1
  80ff68:	bc400017 	ldw	r17,0(r23)
  80ff6c:	b4000017 	ldw	r16,0(r22)
  80ff70:	0039883a 	mov	fp,zero
  80ff74:	8822d0ba 	srli	r17,r17,2
  80ff78:	8800031e 	bne	r17,zero,80ff88 <__sprint_r.part.0+0x78>
  80ff7c:	00001806 	br	80ffe0 <__sprint_r.part.0+0xd0>
  80ff80:	84000104 	addi	r16,r16,4
  80ff84:	8f001526 	beq	r17,fp,80ffdc <__sprint_r.part.0+0xcc>
  80ff88:	81400017 	ldw	r5,0(r16)
  80ff8c:	980d883a 	mov	r6,r19
  80ff90:	a009883a 	mov	r4,r20
  80ff94:	08119380 	call	811938 <_fputwc_r>
  80ff98:	e7000044 	addi	fp,fp,1
  80ff9c:	14bff81e 	bne	r2,r18,80ff80 <__alt_mem_onchip_mem+0xff807f80>
  80ffa0:	9005883a 	mov	r2,r18
  80ffa4:	a8000215 	stw	zero,8(r21)
  80ffa8:	a8000115 	stw	zero,4(r21)
  80ffac:	dfc00917 	ldw	ra,36(sp)
  80ffb0:	df000817 	ldw	fp,32(sp)
  80ffb4:	ddc00717 	ldw	r23,28(sp)
  80ffb8:	dd800617 	ldw	r22,24(sp)
  80ffbc:	dd400517 	ldw	r21,20(sp)
  80ffc0:	dd000417 	ldw	r20,16(sp)
  80ffc4:	dcc00317 	ldw	r19,12(sp)
  80ffc8:	dc800217 	ldw	r18,8(sp)
  80ffcc:	dc400117 	ldw	r17,4(sp)
  80ffd0:	dc000017 	ldw	r16,0(sp)
  80ffd4:	dec00a04 	addi	sp,sp,40
  80ffd8:	f800283a 	ret
  80ffdc:	a8800217 	ldw	r2,8(r21)
  80ffe0:	8c63883a 	add	r17,r17,r17
  80ffe4:	8c63883a 	add	r17,r17,r17
  80ffe8:	1445c83a 	sub	r2,r2,r17
  80ffec:	a8800215 	stw	r2,8(r21)
  80fff0:	b5800204 	addi	r22,r22,8
  80fff4:	bdc00204 	addi	r23,r23,8
  80fff8:	103fdb1e 	bne	r2,zero,80ff68 <__alt_mem_onchip_mem+0xff807f68>
  80fffc:	0005883a 	mov	r2,zero
  810000:	003fe806 	br	80ffa4 <__alt_mem_onchip_mem+0xff807fa4>
  810004:	0811a380 	call	811a38 <__sfvwrite_r>
  810008:	003fe606 	br	80ffa4 <__alt_mem_onchip_mem+0xff807fa4>

0081000c <__sprint_r>:
  81000c:	30c00217 	ldw	r3,8(r6)
  810010:	18000126 	beq	r3,zero,810018 <__sprint_r+0xc>
  810014:	080ff101 	jmpi	80ff10 <__sprint_r.part.0>
  810018:	30000115 	stw	zero,4(r6)
  81001c:	0005883a 	mov	r2,zero
  810020:	f800283a 	ret

00810024 <___vfiprintf_internal_r>:
  810024:	deffc904 	addi	sp,sp,-220
  810028:	df003515 	stw	fp,212(sp)
  81002c:	dd003115 	stw	r20,196(sp)
  810030:	dfc03615 	stw	ra,216(sp)
  810034:	ddc03415 	stw	r23,208(sp)
  810038:	dd803315 	stw	r22,204(sp)
  81003c:	dd403215 	stw	r21,200(sp)
  810040:	dcc03015 	stw	r19,192(sp)
  810044:	dc802f15 	stw	r18,188(sp)
  810048:	dc402e15 	stw	r17,184(sp)
  81004c:	dc002d15 	stw	r16,180(sp)
  810050:	d9002015 	stw	r4,128(sp)
  810054:	d9c02215 	stw	r7,136(sp)
  810058:	2829883a 	mov	r20,r5
  81005c:	3039883a 	mov	fp,r6
  810060:	20000226 	beq	r4,zero,81006c <___vfiprintf_internal_r+0x48>
  810064:	20800e17 	ldw	r2,56(r4)
  810068:	1000cf26 	beq	r2,zero,8103a8 <___vfiprintf_internal_r+0x384>
  81006c:	a080030b 	ldhu	r2,12(r20)
  810070:	10c8000c 	andi	r3,r2,8192
  810074:	1800061e 	bne	r3,zero,810090 <___vfiprintf_internal_r+0x6c>
  810078:	a1001917 	ldw	r4,100(r20)
  81007c:	00f7ffc4 	movi	r3,-8193
  810080:	10880014 	ori	r2,r2,8192
  810084:	20c6703a 	and	r3,r4,r3
  810088:	a080030d 	sth	r2,12(r20)
  81008c:	a0c01915 	stw	r3,100(r20)
  810090:	10c0020c 	andi	r3,r2,8
  810094:	1800a926 	beq	r3,zero,81033c <___vfiprintf_internal_r+0x318>
  810098:	a0c00417 	ldw	r3,16(r20)
  81009c:	1800a726 	beq	r3,zero,81033c <___vfiprintf_internal_r+0x318>
  8100a0:	1080068c 	andi	r2,r2,26
  8100a4:	00c00284 	movi	r3,10
  8100a8:	10c0ac26 	beq	r2,r3,81035c <___vfiprintf_internal_r+0x338>
  8100ac:	da801a04 	addi	r10,sp,104
  8100b0:	da801e15 	stw	r10,120(sp)
  8100b4:	d8801e17 	ldw	r2,120(sp)
  8100b8:	da8019c4 	addi	r10,sp,103
  8100bc:	058020b4 	movhi	r22,130
  8100c0:	05c020b4 	movhi	r23,130
  8100c4:	da801f15 	stw	r10,124(sp)
  8100c8:	1295c83a 	sub	r10,r2,r10
  8100cc:	b5a11604 	addi	r22,r22,-31656
  8100d0:	bde11204 	addi	r23,r23,-31672
  8100d4:	dec01a15 	stw	sp,104(sp)
  8100d8:	d8001c15 	stw	zero,112(sp)
  8100dc:	d8001b15 	stw	zero,108(sp)
  8100e0:	d8002615 	stw	zero,152(sp)
  8100e4:	d8002315 	stw	zero,140(sp)
  8100e8:	da802715 	stw	r10,156(sp)
  8100ec:	d811883a 	mov	r8,sp
  8100f0:	dd002115 	stw	r20,132(sp)
  8100f4:	e021883a 	mov	r16,fp
  8100f8:	80800007 	ldb	r2,0(r16)
  8100fc:	1003ea26 	beq	r2,zero,8110a8 <___vfiprintf_internal_r+0x1084>
  810100:	00c00944 	movi	r3,37
  810104:	8025883a 	mov	r18,r16
  810108:	10c0021e 	bne	r2,r3,810114 <___vfiprintf_internal_r+0xf0>
  81010c:	00001606 	br	810168 <___vfiprintf_internal_r+0x144>
  810110:	10c00326 	beq	r2,r3,810120 <___vfiprintf_internal_r+0xfc>
  810114:	94800044 	addi	r18,r18,1
  810118:	90800007 	ldb	r2,0(r18)
  81011c:	103ffc1e 	bne	r2,zero,810110 <__alt_mem_onchip_mem+0xff808110>
  810120:	9423c83a 	sub	r17,r18,r16
  810124:	88001026 	beq	r17,zero,810168 <___vfiprintf_internal_r+0x144>
  810128:	d8c01c17 	ldw	r3,112(sp)
  81012c:	d8801b17 	ldw	r2,108(sp)
  810130:	44000015 	stw	r16,0(r8)
  810134:	88c7883a 	add	r3,r17,r3
  810138:	10800044 	addi	r2,r2,1
  81013c:	44400115 	stw	r17,4(r8)
  810140:	d8c01c15 	stw	r3,112(sp)
  810144:	d8801b15 	stw	r2,108(sp)
  810148:	010001c4 	movi	r4,7
  81014c:	2080760e 	bge	r4,r2,810328 <___vfiprintf_internal_r+0x304>
  810150:	1803821e 	bne	r3,zero,810f5c <___vfiprintf_internal_r+0xf38>
  810154:	da802317 	ldw	r10,140(sp)
  810158:	d8001b15 	stw	zero,108(sp)
  81015c:	d811883a 	mov	r8,sp
  810160:	5455883a 	add	r10,r10,r17
  810164:	da802315 	stw	r10,140(sp)
  810168:	90800007 	ldb	r2,0(r18)
  81016c:	10044626 	beq	r2,zero,811288 <___vfiprintf_internal_r+0x1264>
  810170:	90c00047 	ldb	r3,1(r18)
  810174:	94000044 	addi	r16,r18,1
  810178:	d8001d85 	stb	zero,118(sp)
  81017c:	0009883a 	mov	r4,zero
  810180:	000f883a 	mov	r7,zero
  810184:	027fffc4 	movi	r9,-1
  810188:	0023883a 	mov	r17,zero
  81018c:	0029883a 	mov	r20,zero
  810190:	01401604 	movi	r5,88
  810194:	01800244 	movi	r6,9
  810198:	03400a84 	movi	r13,42
  81019c:	03001b04 	movi	r12,108
  8101a0:	84000044 	addi	r16,r16,1
  8101a4:	18bff804 	addi	r2,r3,-32
  8101a8:	28827336 	bltu	r5,r2,810b78 <___vfiprintf_internal_r+0xb54>
  8101ac:	100490ba 	slli	r2,r2,2
  8101b0:	02802074 	movhi	r10,129
  8101b4:	52807104 	addi	r10,r10,452
  8101b8:	1285883a 	add	r2,r2,r10
  8101bc:	10800017 	ldw	r2,0(r2)
  8101c0:	1000683a 	jmp	r2
  8101c4:	008108ac 	andhi	r2,zero,1058
  8101c8:	00810b78 	rdprs	r2,zero,1069
  8101cc:	00810b78 	rdprs	r2,zero,1069
  8101d0:	008108cc 	andi	r2,zero,1059
  8101d4:	00810b78 	rdprs	r2,zero,1069
  8101d8:	00810b78 	rdprs	r2,zero,1069
  8101dc:	00810b78 	rdprs	r2,zero,1069
  8101e0:	00810b78 	rdprs	r2,zero,1069
  8101e4:	00810b78 	rdprs	r2,zero,1069
  8101e8:	00810b78 	rdprs	r2,zero,1069
  8101ec:	00810ab4 	movhi	r2,1066
  8101f0:	00810ad0 	cmplti	r2,zero,1067
  8101f4:	00810b78 	rdprs	r2,zero,1069
  8101f8:	008103b8 	rdprs	r2,zero,1038
  8101fc:	00810ae0 	cmpeqi	r2,zero,1067
  810200:	00810b78 	rdprs	r2,zero,1069
  810204:	008108d8 	cmpnei	r2,zero,1059
  810208:	008108e4 	muli	r2,zero,1059
  81020c:	008108e4 	muli	r2,zero,1059
  810210:	008108e4 	muli	r2,zero,1059
  810214:	008108e4 	muli	r2,zero,1059
  810218:	008108e4 	muli	r2,zero,1059
  81021c:	008108e4 	muli	r2,zero,1059
  810220:	008108e4 	muli	r2,zero,1059
  810224:	008108e4 	muli	r2,zero,1059
  810228:	008108e4 	muli	r2,zero,1059
  81022c:	00810b78 	rdprs	r2,zero,1069
  810230:	00810b78 	rdprs	r2,zero,1069
  810234:	00810b78 	rdprs	r2,zero,1069
  810238:	00810b78 	rdprs	r2,zero,1069
  81023c:	00810b78 	rdprs	r2,zero,1069
  810240:	00810b78 	rdprs	r2,zero,1069
  810244:	00810b78 	rdprs	r2,zero,1069
  810248:	00810b78 	rdprs	r2,zero,1069
  81024c:	00810b78 	rdprs	r2,zero,1069
  810250:	00810b78 	rdprs	r2,zero,1069
  810254:	00810910 	cmplti	r2,zero,1060
  810258:	00810b78 	rdprs	r2,zero,1069
  81025c:	00810b78 	rdprs	r2,zero,1069
  810260:	00810b78 	rdprs	r2,zero,1069
  810264:	00810b78 	rdprs	r2,zero,1069
  810268:	00810b78 	rdprs	r2,zero,1069
  81026c:	00810b78 	rdprs	r2,zero,1069
  810270:	00810b78 	rdprs	r2,zero,1069
  810274:	00810b78 	rdprs	r2,zero,1069
  810278:	00810b78 	rdprs	r2,zero,1069
  81027c:	00810b78 	rdprs	r2,zero,1069
  810280:	00810948 	cmpgei	r2,zero,1061
  810284:	00810b78 	rdprs	r2,zero,1069
  810288:	00810b78 	rdprs	r2,zero,1069
  81028c:	00810b78 	rdprs	r2,zero,1069
  810290:	00810b78 	rdprs	r2,zero,1069
  810294:	00810b78 	rdprs	r2,zero,1069
  810298:	008109a0 	cmpeqi	r2,zero,1062
  81029c:	00810b78 	rdprs	r2,zero,1069
  8102a0:	00810b78 	rdprs	r2,zero,1069
  8102a4:	00810a10 	cmplti	r2,zero,1064
  8102a8:	00810b78 	rdprs	r2,zero,1069
  8102ac:	00810b78 	rdprs	r2,zero,1069
  8102b0:	00810b78 	rdprs	r2,zero,1069
  8102b4:	00810b78 	rdprs	r2,zero,1069
  8102b8:	00810b78 	rdprs	r2,zero,1069
  8102bc:	00810b78 	rdprs	r2,zero,1069
  8102c0:	00810b78 	rdprs	r2,zero,1069
  8102c4:	00810b78 	rdprs	r2,zero,1069
  8102c8:	00810b78 	rdprs	r2,zero,1069
  8102cc:	00810b78 	rdprs	r2,zero,1069
  8102d0:	008107bc 	xorhi	r2,zero,1054
  8102d4:	008107e8 	cmpgeui	r2,zero,1055
  8102d8:	00810b78 	rdprs	r2,zero,1069
  8102dc:	00810b78 	rdprs	r2,zero,1069
  8102e0:	00810b78 	rdprs	r2,zero,1069
  8102e4:	00810b20 	cmpeqi	r2,zero,1068
  8102e8:	008107e8 	cmpgeui	r2,zero,1055
  8102ec:	00810b78 	rdprs	r2,zero,1069
  8102f0:	00810b78 	rdprs	r2,zero,1069
  8102f4:	0081067c 	xorhi	r2,zero,1049
  8102f8:	00810b78 	rdprs	r2,zero,1069
  8102fc:	0081068c 	andi	r2,zero,1050
  810300:	008106c8 	cmpgei	r2,zero,1051
  810304:	008103c4 	movi	r2,1039
  810308:	00810670 	cmpltui	r2,zero,1049
  81030c:	00810b78 	rdprs	r2,zero,1069
  810310:	00810a4c 	andi	r2,zero,1065
  810314:	00810b78 	rdprs	r2,zero,1069
  810318:	00810aa4 	muli	r2,zero,1066
  81031c:	00810b78 	rdprs	r2,zero,1069
  810320:	00810b78 	rdprs	r2,zero,1069
  810324:	00810768 	cmpgeui	r2,zero,1053
  810328:	42000204 	addi	r8,r8,8
  81032c:	da802317 	ldw	r10,140(sp)
  810330:	5455883a 	add	r10,r10,r17
  810334:	da802315 	stw	r10,140(sp)
  810338:	003f8b06 	br	810168 <__alt_mem_onchip_mem+0xff808168>
  81033c:	d9002017 	ldw	r4,128(sp)
  810340:	a00b883a 	mov	r5,r20
  810344:	080b7c40 	call	80b7c4 <__swsetup_r>
  810348:	1003b11e 	bne	r2,zero,811210 <___vfiprintf_internal_r+0x11ec>
  81034c:	a080030b 	ldhu	r2,12(r20)
  810350:	00c00284 	movi	r3,10
  810354:	1080068c 	andi	r2,r2,26
  810358:	10ff541e 	bne	r2,r3,8100ac <__alt_mem_onchip_mem+0xff8080ac>
  81035c:	a080038f 	ldh	r2,14(r20)
  810360:	103f5216 	blt	r2,zero,8100ac <__alt_mem_onchip_mem+0xff8080ac>
  810364:	d9c02217 	ldw	r7,136(sp)
  810368:	d9002017 	ldw	r4,128(sp)
  81036c:	e00d883a 	mov	r6,fp
  810370:	a00b883a 	mov	r5,r20
  810374:	081149c0 	call	81149c <__sbprintf>
  810378:	dfc03617 	ldw	ra,216(sp)
  81037c:	df003517 	ldw	fp,212(sp)
  810380:	ddc03417 	ldw	r23,208(sp)
  810384:	dd803317 	ldw	r22,204(sp)
  810388:	dd403217 	ldw	r21,200(sp)
  81038c:	dd003117 	ldw	r20,196(sp)
  810390:	dcc03017 	ldw	r19,192(sp)
  810394:	dc802f17 	ldw	r18,188(sp)
  810398:	dc402e17 	ldw	r17,184(sp)
  81039c:	dc002d17 	ldw	r16,180(sp)
  8103a0:	dec03704 	addi	sp,sp,220
  8103a4:	f800283a 	ret
  8103a8:	080d7980 	call	80d798 <__sinit>
  8103ac:	003f2f06 	br	81006c <__alt_mem_onchip_mem+0xff80806c>
  8103b0:	0463c83a 	sub	r17,zero,r17
  8103b4:	d8802215 	stw	r2,136(sp)
  8103b8:	a5000114 	ori	r20,r20,4
  8103bc:	80c00007 	ldb	r3,0(r16)
  8103c0:	003f7706 	br	8101a0 <__alt_mem_onchip_mem+0xff8081a0>
  8103c4:	00800c04 	movi	r2,48
  8103c8:	da802217 	ldw	r10,136(sp)
  8103cc:	d8801d05 	stb	r2,116(sp)
  8103d0:	00801e04 	movi	r2,120
  8103d4:	d8801d45 	stb	r2,117(sp)
  8103d8:	d8001d85 	stb	zero,118(sp)
  8103dc:	50c00104 	addi	r3,r10,4
  8103e0:	54800017 	ldw	r18,0(r10)
  8103e4:	0027883a 	mov	r19,zero
  8103e8:	a0800094 	ori	r2,r20,2
  8103ec:	48030b16 	blt	r9,zero,81101c <___vfiprintf_internal_r+0xff8>
  8103f0:	00bfdfc4 	movi	r2,-129
  8103f4:	a096703a 	and	r11,r20,r2
  8103f8:	d8c02215 	stw	r3,136(sp)
  8103fc:	5d000094 	ori	r20,r11,2
  810400:	90032b1e 	bne	r18,zero,8110b0 <___vfiprintf_internal_r+0x108c>
  810404:	008020b4 	movhi	r2,130
  810408:	10a0b104 	addi	r2,r2,-32060
  81040c:	d8802615 	stw	r2,152(sp)
  810410:	0039883a 	mov	fp,zero
  810414:	48017b1e 	bne	r9,zero,810a04 <___vfiprintf_internal_r+0x9e0>
  810418:	0013883a 	mov	r9,zero
  81041c:	0027883a 	mov	r19,zero
  810420:	dd401a04 	addi	r21,sp,104
  810424:	4825883a 	mov	r18,r9
  810428:	4cc0010e 	bge	r9,r19,810430 <___vfiprintf_internal_r+0x40c>
  81042c:	9825883a 	mov	r18,r19
  810430:	e7003fcc 	andi	fp,fp,255
  810434:	e700201c 	xori	fp,fp,128
  810438:	e73fe004 	addi	fp,fp,-128
  81043c:	e0000126 	beq	fp,zero,810444 <___vfiprintf_internal_r+0x420>
  810440:	94800044 	addi	r18,r18,1
  810444:	a380008c 	andi	r14,r20,2
  810448:	70000126 	beq	r14,zero,810450 <___vfiprintf_internal_r+0x42c>
  81044c:	94800084 	addi	r18,r18,2
  810450:	a700210c 	andi	fp,r20,132
  810454:	e001df1e 	bne	fp,zero,810bd4 <___vfiprintf_internal_r+0xbb0>
  810458:	8c87c83a 	sub	r3,r17,r18
  81045c:	00c1dd0e 	bge	zero,r3,810bd4 <___vfiprintf_internal_r+0xbb0>
  810460:	01c00404 	movi	r7,16
  810464:	d8801c17 	ldw	r2,112(sp)
  810468:	38c3ad0e 	bge	r7,r3,811320 <___vfiprintf_internal_r+0x12fc>
  81046c:	028020b4 	movhi	r10,130
  810470:	52a11604 	addi	r10,r10,-31656
  810474:	dc002915 	stw	r16,164(sp)
  810478:	d9801b17 	ldw	r6,108(sp)
  81047c:	da802415 	stw	r10,144(sp)
  810480:	03c001c4 	movi	r15,7
  810484:	da402515 	stw	r9,148(sp)
  810488:	db802815 	stw	r14,160(sp)
  81048c:	1821883a 	mov	r16,r3
  810490:	00000506 	br	8104a8 <___vfiprintf_internal_r+0x484>
  810494:	31400084 	addi	r5,r6,2
  810498:	42000204 	addi	r8,r8,8
  81049c:	200d883a 	mov	r6,r4
  8104a0:	843ffc04 	addi	r16,r16,-16
  8104a4:	3c000d0e 	bge	r7,r16,8104dc <___vfiprintf_internal_r+0x4b8>
  8104a8:	10800404 	addi	r2,r2,16
  8104ac:	31000044 	addi	r4,r6,1
  8104b0:	45800015 	stw	r22,0(r8)
  8104b4:	41c00115 	stw	r7,4(r8)
  8104b8:	d8801c15 	stw	r2,112(sp)
  8104bc:	d9001b15 	stw	r4,108(sp)
  8104c0:	793ff40e 	bge	r15,r4,810494 <__alt_mem_onchip_mem+0xff808494>
  8104c4:	1001b51e 	bne	r2,zero,810b9c <___vfiprintf_internal_r+0xb78>
  8104c8:	843ffc04 	addi	r16,r16,-16
  8104cc:	000d883a 	mov	r6,zero
  8104d0:	01400044 	movi	r5,1
  8104d4:	d811883a 	mov	r8,sp
  8104d8:	3c3ff316 	blt	r7,r16,8104a8 <__alt_mem_onchip_mem+0xff8084a8>
  8104dc:	8007883a 	mov	r3,r16
  8104e0:	da402517 	ldw	r9,148(sp)
  8104e4:	db802817 	ldw	r14,160(sp)
  8104e8:	dc002917 	ldw	r16,164(sp)
  8104ec:	da802417 	ldw	r10,144(sp)
  8104f0:	1885883a 	add	r2,r3,r2
  8104f4:	40c00115 	stw	r3,4(r8)
  8104f8:	42800015 	stw	r10,0(r8)
  8104fc:	d8801c15 	stw	r2,112(sp)
  810500:	d9401b15 	stw	r5,108(sp)
  810504:	00c001c4 	movi	r3,7
  810508:	19426016 	blt	r3,r5,810e8c <___vfiprintf_internal_r+0xe68>
  81050c:	d8c01d87 	ldb	r3,118(sp)
  810510:	42000204 	addi	r8,r8,8
  810514:	29000044 	addi	r4,r5,1
  810518:	1801b31e 	bne	r3,zero,810be8 <___vfiprintf_internal_r+0xbc4>
  81051c:	7001c026 	beq	r14,zero,810c20 <___vfiprintf_internal_r+0xbfc>
  810520:	d8c01d04 	addi	r3,sp,116
  810524:	10800084 	addi	r2,r2,2
  810528:	40c00015 	stw	r3,0(r8)
  81052c:	00c00084 	movi	r3,2
  810530:	40c00115 	stw	r3,4(r8)
  810534:	d8801c15 	stw	r2,112(sp)
  810538:	d9001b15 	stw	r4,108(sp)
  81053c:	00c001c4 	movi	r3,7
  810540:	1902650e 	bge	r3,r4,810ed8 <___vfiprintf_internal_r+0xeb4>
  810544:	10029a1e 	bne	r2,zero,810fb0 <___vfiprintf_internal_r+0xf8c>
  810548:	00c02004 	movi	r3,128
  81054c:	01000044 	movi	r4,1
  810550:	000b883a 	mov	r5,zero
  810554:	d811883a 	mov	r8,sp
  810558:	e0c1b31e 	bne	fp,r3,810c28 <___vfiprintf_internal_r+0xc04>
  81055c:	8cb9c83a 	sub	fp,r17,r18
  810560:	0701b10e 	bge	zero,fp,810c28 <___vfiprintf_internal_r+0xc04>
  810564:	01c00404 	movi	r7,16
  810568:	3f03890e 	bge	r7,fp,811390 <___vfiprintf_internal_r+0x136c>
  81056c:	00c020b4 	movhi	r3,130
  810570:	18e11204 	addi	r3,r3,-31672
  810574:	d8c02415 	stw	r3,144(sp)
  810578:	8007883a 	mov	r3,r16
  81057c:	034001c4 	movi	r13,7
  810580:	e021883a 	mov	r16,fp
  810584:	da402515 	stw	r9,148(sp)
  810588:	1839883a 	mov	fp,r3
  81058c:	00000506 	br	8105a4 <___vfiprintf_internal_r+0x580>
  810590:	29800084 	addi	r6,r5,2
  810594:	42000204 	addi	r8,r8,8
  810598:	180b883a 	mov	r5,r3
  81059c:	843ffc04 	addi	r16,r16,-16
  8105a0:	3c000d0e 	bge	r7,r16,8105d8 <___vfiprintf_internal_r+0x5b4>
  8105a4:	10800404 	addi	r2,r2,16
  8105a8:	28c00044 	addi	r3,r5,1
  8105ac:	45c00015 	stw	r23,0(r8)
  8105b0:	41c00115 	stw	r7,4(r8)
  8105b4:	d8801c15 	stw	r2,112(sp)
  8105b8:	d8c01b15 	stw	r3,108(sp)
  8105bc:	68fff40e 	bge	r13,r3,810590 <__alt_mem_onchip_mem+0xff808590>
  8105c0:	1002241e 	bne	r2,zero,810e54 <___vfiprintf_internal_r+0xe30>
  8105c4:	843ffc04 	addi	r16,r16,-16
  8105c8:	01800044 	movi	r6,1
  8105cc:	000b883a 	mov	r5,zero
  8105d0:	d811883a 	mov	r8,sp
  8105d4:	3c3ff316 	blt	r7,r16,8105a4 <__alt_mem_onchip_mem+0xff8085a4>
  8105d8:	da402517 	ldw	r9,148(sp)
  8105dc:	e007883a 	mov	r3,fp
  8105e0:	8039883a 	mov	fp,r16
  8105e4:	1821883a 	mov	r16,r3
  8105e8:	d8c02417 	ldw	r3,144(sp)
  8105ec:	1705883a 	add	r2,r2,fp
  8105f0:	47000115 	stw	fp,4(r8)
  8105f4:	40c00015 	stw	r3,0(r8)
  8105f8:	d8801c15 	stw	r2,112(sp)
  8105fc:	d9801b15 	stw	r6,108(sp)
  810600:	00c001c4 	movi	r3,7
  810604:	19827616 	blt	r3,r6,810fe0 <___vfiprintf_internal_r+0xfbc>
  810608:	4cf9c83a 	sub	fp,r9,r19
  81060c:	42000204 	addi	r8,r8,8
  810610:	31000044 	addi	r4,r6,1
  810614:	300b883a 	mov	r5,r6
  810618:	07018516 	blt	zero,fp,810c30 <___vfiprintf_internal_r+0xc0c>
  81061c:	9885883a 	add	r2,r19,r2
  810620:	45400015 	stw	r21,0(r8)
  810624:	44c00115 	stw	r19,4(r8)
  810628:	d8801c15 	stw	r2,112(sp)
  81062c:	d9001b15 	stw	r4,108(sp)
  810630:	00c001c4 	movi	r3,7
  810634:	1901dd0e 	bge	r3,r4,810dac <___vfiprintf_internal_r+0xd88>
  810638:	1002401e 	bne	r2,zero,810f3c <___vfiprintf_internal_r+0xf18>
  81063c:	d8001b15 	stw	zero,108(sp)
  810640:	a2c0010c 	andi	r11,r20,4
  810644:	58000226 	beq	r11,zero,810650 <___vfiprintf_internal_r+0x62c>
  810648:	8ca7c83a 	sub	r19,r17,r18
  81064c:	04c2f216 	blt	zero,r19,811218 <___vfiprintf_internal_r+0x11f4>
  810650:	8c80010e 	bge	r17,r18,810658 <___vfiprintf_internal_r+0x634>
  810654:	9023883a 	mov	r17,r18
  810658:	da802317 	ldw	r10,140(sp)
  81065c:	5455883a 	add	r10,r10,r17
  810660:	da802315 	stw	r10,140(sp)
  810664:	d8001b15 	stw	zero,108(sp)
  810668:	d811883a 	mov	r8,sp
  81066c:	003ea206 	br	8100f8 <__alt_mem_onchip_mem+0xff8080f8>
  810670:	a5000814 	ori	r20,r20,32
  810674:	80c00007 	ldb	r3,0(r16)
  810678:	003ec906 	br	8101a0 <__alt_mem_onchip_mem+0xff8081a0>
  81067c:	80c00007 	ldb	r3,0(r16)
  810680:	1b030926 	beq	r3,r12,8112a8 <___vfiprintf_internal_r+0x1284>
  810684:	a5000414 	ori	r20,r20,16
  810688:	003ec506 	br	8101a0 <__alt_mem_onchip_mem+0xff8081a0>
  81068c:	21003fcc 	andi	r4,r4,255
  810690:	20035e1e 	bne	r4,zero,81140c <___vfiprintf_internal_r+0x13e8>
  810694:	a080080c 	andi	r2,r20,32
  810698:	1002a526 	beq	r2,zero,811130 <___vfiprintf_internal_r+0x110c>
  81069c:	da802217 	ldw	r10,136(sp)
  8106a0:	50800017 	ldw	r2,0(r10)
  8106a4:	da802317 	ldw	r10,140(sp)
  8106a8:	5007d7fa 	srai	r3,r10,31
  8106ac:	da802217 	ldw	r10,136(sp)
  8106b0:	10c00115 	stw	r3,4(r2)
  8106b4:	52800104 	addi	r10,r10,4
  8106b8:	da802215 	stw	r10,136(sp)
  8106bc:	da802317 	ldw	r10,140(sp)
  8106c0:	12800015 	stw	r10,0(r2)
  8106c4:	003e8c06 	br	8100f8 <__alt_mem_onchip_mem+0xff8080f8>
  8106c8:	21003fcc 	andi	r4,r4,255
  8106cc:	2003511e 	bne	r4,zero,811414 <___vfiprintf_internal_r+0x13f0>
  8106d0:	a080080c 	andi	r2,r20,32
  8106d4:	1000a126 	beq	r2,zero,81095c <___vfiprintf_internal_r+0x938>
  8106d8:	da802217 	ldw	r10,136(sp)
  8106dc:	d8001d85 	stb	zero,118(sp)
  8106e0:	50800204 	addi	r2,r10,8
  8106e4:	54800017 	ldw	r18,0(r10)
  8106e8:	54c00117 	ldw	r19,4(r10)
  8106ec:	4802b416 	blt	r9,zero,8111c0 <___vfiprintf_internal_r+0x119c>
  8106f0:	013fdfc4 	movi	r4,-129
  8106f4:	94c6b03a 	or	r3,r18,r19
  8106f8:	d8802215 	stw	r2,136(sp)
  8106fc:	a128703a 	and	r20,r20,r4
  810700:	1800a226 	beq	r3,zero,81098c <___vfiprintf_internal_r+0x968>
  810704:	0039883a 	mov	fp,zero
  810708:	dd401a04 	addi	r21,sp,104
  81070c:	9006d0fa 	srli	r3,r18,3
  810710:	9808977a 	slli	r4,r19,29
  810714:	9826d0fa 	srli	r19,r19,3
  810718:	948001cc 	andi	r18,r18,7
  81071c:	90800c04 	addi	r2,r18,48
  810720:	ad7fffc4 	addi	r21,r21,-1
  810724:	20e4b03a 	or	r18,r4,r3
  810728:	a8800005 	stb	r2,0(r21)
  81072c:	94c6b03a 	or	r3,r18,r19
  810730:	183ff61e 	bne	r3,zero,81070c <__alt_mem_onchip_mem+0xff80870c>
  810734:	a0c0004c 	andi	r3,r20,1
  810738:	18005926 	beq	r3,zero,8108a0 <___vfiprintf_internal_r+0x87c>
  81073c:	10803fcc 	andi	r2,r2,255
  810740:	1080201c 	xori	r2,r2,128
  810744:	10bfe004 	addi	r2,r2,-128
  810748:	00c00c04 	movi	r3,48
  81074c:	10c05426 	beq	r2,r3,8108a0 <___vfiprintf_internal_r+0x87c>
  810750:	da801e17 	ldw	r10,120(sp)
  810754:	a8bfffc4 	addi	r2,r21,-1
  810758:	a8ffffc5 	stb	r3,-1(r21)
  81075c:	50a7c83a 	sub	r19,r10,r2
  810760:	102b883a 	mov	r21,r2
  810764:	003f2f06 	br	810424 <__alt_mem_onchip_mem+0xff808424>
  810768:	21003fcc 	andi	r4,r4,255
  81076c:	2003421e 	bne	r4,zero,811478 <___vfiprintf_internal_r+0x1454>
  810770:	008020b4 	movhi	r2,130
  810774:	10a0b104 	addi	r2,r2,-32060
  810778:	d8802615 	stw	r2,152(sp)
  81077c:	a080080c 	andi	r2,r20,32
  810780:	1000aa26 	beq	r2,zero,810a2c <___vfiprintf_internal_r+0xa08>
  810784:	da802217 	ldw	r10,136(sp)
  810788:	54800017 	ldw	r18,0(r10)
  81078c:	54c00117 	ldw	r19,4(r10)
  810790:	52800204 	addi	r10,r10,8
  810794:	da802215 	stw	r10,136(sp)
  810798:	a080004c 	andi	r2,r20,1
  81079c:	1001d226 	beq	r2,zero,810ee8 <___vfiprintf_internal_r+0xec4>
  8107a0:	94c4b03a 	or	r2,r18,r19
  8107a4:	1002351e 	bne	r2,zero,81107c <___vfiprintf_internal_r+0x1058>
  8107a8:	d8001d85 	stb	zero,118(sp)
  8107ac:	48022216 	blt	r9,zero,811038 <___vfiprintf_internal_r+0x1014>
  8107b0:	00bfdfc4 	movi	r2,-129
  8107b4:	a0a8703a 	and	r20,r20,r2
  8107b8:	003f1506 	br	810410 <__alt_mem_onchip_mem+0xff808410>
  8107bc:	da802217 	ldw	r10,136(sp)
  8107c0:	04800044 	movi	r18,1
  8107c4:	d8001d85 	stb	zero,118(sp)
  8107c8:	50800017 	ldw	r2,0(r10)
  8107cc:	52800104 	addi	r10,r10,4
  8107d0:	da802215 	stw	r10,136(sp)
  8107d4:	d8801005 	stb	r2,64(sp)
  8107d8:	9027883a 	mov	r19,r18
  8107dc:	dd401004 	addi	r21,sp,64
  8107e0:	0013883a 	mov	r9,zero
  8107e4:	003f1706 	br	810444 <__alt_mem_onchip_mem+0xff808444>
  8107e8:	21003fcc 	andi	r4,r4,255
  8107ec:	2003201e 	bne	r4,zero,811470 <___vfiprintf_internal_r+0x144c>
  8107f0:	a080080c 	andi	r2,r20,32
  8107f4:	10004b26 	beq	r2,zero,810924 <___vfiprintf_internal_r+0x900>
  8107f8:	da802217 	ldw	r10,136(sp)
  8107fc:	50800117 	ldw	r2,4(r10)
  810800:	54800017 	ldw	r18,0(r10)
  810804:	52800204 	addi	r10,r10,8
  810808:	da802215 	stw	r10,136(sp)
  81080c:	1027883a 	mov	r19,r2
  810810:	10022c16 	blt	r2,zero,8110c4 <___vfiprintf_internal_r+0x10a0>
  810814:	df001d83 	ldbu	fp,118(sp)
  810818:	48007216 	blt	r9,zero,8109e4 <___vfiprintf_internal_r+0x9c0>
  81081c:	00ffdfc4 	movi	r3,-129
  810820:	94c4b03a 	or	r2,r18,r19
  810824:	a0e8703a 	and	r20,r20,r3
  810828:	1000cc26 	beq	r2,zero,810b5c <___vfiprintf_internal_r+0xb38>
  81082c:	98021026 	beq	r19,zero,811070 <___vfiprintf_internal_r+0x104c>
  810830:	dc402415 	stw	r17,144(sp)
  810834:	dc002515 	stw	r16,148(sp)
  810838:	9823883a 	mov	r17,r19
  81083c:	9021883a 	mov	r16,r18
  810840:	dd401a04 	addi	r21,sp,104
  810844:	4825883a 	mov	r18,r9
  810848:	4027883a 	mov	r19,r8
  81084c:	8009883a 	mov	r4,r16
  810850:	880b883a 	mov	r5,r17
  810854:	01800284 	movi	r6,10
  810858:	000f883a 	mov	r7,zero
  81085c:	0812f800 	call	812f80 <__umoddi3>
  810860:	10800c04 	addi	r2,r2,48
  810864:	ad7fffc4 	addi	r21,r21,-1
  810868:	8009883a 	mov	r4,r16
  81086c:	880b883a 	mov	r5,r17
  810870:	a8800005 	stb	r2,0(r21)
  810874:	01800284 	movi	r6,10
  810878:	000f883a 	mov	r7,zero
  81087c:	0812a080 	call	812a08 <__udivdi3>
  810880:	1021883a 	mov	r16,r2
  810884:	10c4b03a 	or	r2,r2,r3
  810888:	1823883a 	mov	r17,r3
  81088c:	103fef1e 	bne	r2,zero,81084c <__alt_mem_onchip_mem+0xff80884c>
  810890:	dc402417 	ldw	r17,144(sp)
  810894:	dc002517 	ldw	r16,148(sp)
  810898:	9013883a 	mov	r9,r18
  81089c:	9811883a 	mov	r8,r19
  8108a0:	da801e17 	ldw	r10,120(sp)
  8108a4:	5567c83a 	sub	r19,r10,r21
  8108a8:	003ede06 	br	810424 <__alt_mem_onchip_mem+0xff808424>
  8108ac:	38803fcc 	andi	r2,r7,255
  8108b0:	1080201c 	xori	r2,r2,128
  8108b4:	10bfe004 	addi	r2,r2,-128
  8108b8:	1002371e 	bne	r2,zero,811198 <___vfiprintf_internal_r+0x1174>
  8108bc:	01000044 	movi	r4,1
  8108c0:	01c00804 	movi	r7,32
  8108c4:	80c00007 	ldb	r3,0(r16)
  8108c8:	003e3506 	br	8101a0 <__alt_mem_onchip_mem+0xff8081a0>
  8108cc:	a5000054 	ori	r20,r20,1
  8108d0:	80c00007 	ldb	r3,0(r16)
  8108d4:	003e3206 	br	8101a0 <__alt_mem_onchip_mem+0xff8081a0>
  8108d8:	a5002014 	ori	r20,r20,128
  8108dc:	80c00007 	ldb	r3,0(r16)
  8108e0:	003e2f06 	br	8101a0 <__alt_mem_onchip_mem+0xff8081a0>
  8108e4:	8015883a 	mov	r10,r16
  8108e8:	0023883a 	mov	r17,zero
  8108ec:	18bff404 	addi	r2,r3,-48
  8108f0:	50c00007 	ldb	r3,0(r10)
  8108f4:	8c4002a4 	muli	r17,r17,10
  8108f8:	84000044 	addi	r16,r16,1
  8108fc:	8015883a 	mov	r10,r16
  810900:	1463883a 	add	r17,r2,r17
  810904:	18bff404 	addi	r2,r3,-48
  810908:	30bff92e 	bgeu	r6,r2,8108f0 <__alt_mem_onchip_mem+0xff8088f0>
  81090c:	003e2506 	br	8101a4 <__alt_mem_onchip_mem+0xff8081a4>
  810910:	21003fcc 	andi	r4,r4,255
  810914:	2002d41e 	bne	r4,zero,811468 <___vfiprintf_internal_r+0x1444>
  810918:	a5000414 	ori	r20,r20,16
  81091c:	a080080c 	andi	r2,r20,32
  810920:	103fb51e 	bne	r2,zero,8107f8 <__alt_mem_onchip_mem+0xff8087f8>
  810924:	a080040c 	andi	r2,r20,16
  810928:	1001f826 	beq	r2,zero,81110c <___vfiprintf_internal_r+0x10e8>
  81092c:	da802217 	ldw	r10,136(sp)
  810930:	54800017 	ldw	r18,0(r10)
  810934:	52800104 	addi	r10,r10,4
  810938:	da802215 	stw	r10,136(sp)
  81093c:	9027d7fa 	srai	r19,r18,31
  810940:	9805883a 	mov	r2,r19
  810944:	003fb206 	br	810810 <__alt_mem_onchip_mem+0xff808810>
  810948:	21003fcc 	andi	r4,r4,255
  81094c:	2002c41e 	bne	r4,zero,811460 <___vfiprintf_internal_r+0x143c>
  810950:	a5000414 	ori	r20,r20,16
  810954:	a080080c 	andi	r2,r20,32
  810958:	103f5f1e 	bne	r2,zero,8106d8 <__alt_mem_onchip_mem+0xff8086d8>
  81095c:	a080040c 	andi	r2,r20,16
  810960:	10020f26 	beq	r2,zero,8111a0 <___vfiprintf_internal_r+0x117c>
  810964:	da802217 	ldw	r10,136(sp)
  810968:	d8001d85 	stb	zero,118(sp)
  81096c:	0027883a 	mov	r19,zero
  810970:	50800104 	addi	r2,r10,4
  810974:	54800017 	ldw	r18,0(r10)
  810978:	48021116 	blt	r9,zero,8111c0 <___vfiprintf_internal_r+0x119c>
  81097c:	00ffdfc4 	movi	r3,-129
  810980:	d8802215 	stw	r2,136(sp)
  810984:	a0e8703a 	and	r20,r20,r3
  810988:	903f5e1e 	bne	r18,zero,810704 <__alt_mem_onchip_mem+0xff808704>
  81098c:	0039883a 	mov	fp,zero
  810990:	4802a626 	beq	r9,zero,81142c <___vfiprintf_internal_r+0x1408>
  810994:	0025883a 	mov	r18,zero
  810998:	0027883a 	mov	r19,zero
  81099c:	003f5a06 	br	810708 <__alt_mem_onchip_mem+0xff808708>
  8109a0:	21003fcc 	andi	r4,r4,255
  8109a4:	20029f1e 	bne	r4,zero,811424 <___vfiprintf_internal_r+0x1400>
  8109a8:	a5000414 	ori	r20,r20,16
  8109ac:	a080080c 	andi	r2,r20,32
  8109b0:	10005e1e 	bne	r2,zero,810b2c <___vfiprintf_internal_r+0xb08>
  8109b4:	a080040c 	andi	r2,r20,16
  8109b8:	1001a21e 	bne	r2,zero,811044 <___vfiprintf_internal_r+0x1020>
  8109bc:	a080100c 	andi	r2,r20,64
  8109c0:	d8001d85 	stb	zero,118(sp)
  8109c4:	da802217 	ldw	r10,136(sp)
  8109c8:	1002231e 	bne	r2,zero,811258 <___vfiprintf_internal_r+0x1234>
  8109cc:	50800104 	addi	r2,r10,4
  8109d0:	54800017 	ldw	r18,0(r10)
  8109d4:	0027883a 	mov	r19,zero
  8109d8:	4801a00e 	bge	r9,zero,81105c <___vfiprintf_internal_r+0x1038>
  8109dc:	d8802215 	stw	r2,136(sp)
  8109e0:	0039883a 	mov	fp,zero
  8109e4:	94c4b03a 	or	r2,r18,r19
  8109e8:	103f901e 	bne	r2,zero,81082c <__alt_mem_onchip_mem+0xff80882c>
  8109ec:	00800044 	movi	r2,1
  8109f0:	10803fcc 	andi	r2,r2,255
  8109f4:	00c00044 	movi	r3,1
  8109f8:	10c05926 	beq	r2,r3,810b60 <___vfiprintf_internal_r+0xb3c>
  8109fc:	00c00084 	movi	r3,2
  810a00:	10ffe41e 	bne	r2,r3,810994 <__alt_mem_onchip_mem+0xff808994>
  810a04:	0025883a 	mov	r18,zero
  810a08:	0027883a 	mov	r19,zero
  810a0c:	00013d06 	br	810f04 <___vfiprintf_internal_r+0xee0>
  810a10:	21003fcc 	andi	r4,r4,255
  810a14:	2002811e 	bne	r4,zero,81141c <___vfiprintf_internal_r+0x13f8>
  810a18:	008020b4 	movhi	r2,130
  810a1c:	10a0ac04 	addi	r2,r2,-32080
  810a20:	d8802615 	stw	r2,152(sp)
  810a24:	a080080c 	andi	r2,r20,32
  810a28:	103f561e 	bne	r2,zero,810784 <__alt_mem_onchip_mem+0xff808784>
  810a2c:	a080040c 	andi	r2,r20,16
  810a30:	1001d126 	beq	r2,zero,811178 <___vfiprintf_internal_r+0x1154>
  810a34:	da802217 	ldw	r10,136(sp)
  810a38:	0027883a 	mov	r19,zero
  810a3c:	54800017 	ldw	r18,0(r10)
  810a40:	52800104 	addi	r10,r10,4
  810a44:	da802215 	stw	r10,136(sp)
  810a48:	003f5306 	br	810798 <__alt_mem_onchip_mem+0xff808798>
  810a4c:	da802217 	ldw	r10,136(sp)
  810a50:	d8001d85 	stb	zero,118(sp)
  810a54:	55400017 	ldw	r21,0(r10)
  810a58:	50c00104 	addi	r3,r10,4
  810a5c:	a8024226 	beq	r21,zero,811368 <___vfiprintf_internal_r+0x1344>
  810a60:	48021816 	blt	r9,zero,8112c4 <___vfiprintf_internal_r+0x12a0>
  810a64:	480d883a 	mov	r6,r9
  810a68:	000b883a 	mov	r5,zero
  810a6c:	a809883a 	mov	r4,r21
  810a70:	d8c02a15 	stw	r3,168(sp)
  810a74:	da002b15 	stw	r8,172(sp)
  810a78:	da402c15 	stw	r9,176(sp)
  810a7c:	080e8480 	call	80e848 <memchr>
  810a80:	d8c02a17 	ldw	r3,168(sp)
  810a84:	da002b17 	ldw	r8,172(sp)
  810a88:	da402c17 	ldw	r9,176(sp)
  810a8c:	10024826 	beq	r2,zero,8113b0 <___vfiprintf_internal_r+0x138c>
  810a90:	1567c83a 	sub	r19,r2,r21
  810a94:	df001d83 	ldbu	fp,118(sp)
  810a98:	d8c02215 	stw	r3,136(sp)
  810a9c:	0013883a 	mov	r9,zero
  810aa0:	003e6006 	br	810424 <__alt_mem_onchip_mem+0xff808424>
  810aa4:	21003fcc 	andi	r4,r4,255
  810aa8:	203fc026 	beq	r4,zero,8109ac <__alt_mem_onchip_mem+0xff8089ac>
  810aac:	d9c01d85 	stb	r7,118(sp)
  810ab0:	003fbe06 	br	8109ac <__alt_mem_onchip_mem+0xff8089ac>
  810ab4:	da802217 	ldw	r10,136(sp)
  810ab8:	54400017 	ldw	r17,0(r10)
  810abc:	50800104 	addi	r2,r10,4
  810ac0:	883e3b16 	blt	r17,zero,8103b0 <__alt_mem_onchip_mem+0xff8083b0>
  810ac4:	d8802215 	stw	r2,136(sp)
  810ac8:	80c00007 	ldb	r3,0(r16)
  810acc:	003db406 	br	8101a0 <__alt_mem_onchip_mem+0xff8081a0>
  810ad0:	01000044 	movi	r4,1
  810ad4:	01c00ac4 	movi	r7,43
  810ad8:	80c00007 	ldb	r3,0(r16)
  810adc:	003db006 	br	8101a0 <__alt_mem_onchip_mem+0xff8081a0>
  810ae0:	80c00007 	ldb	r3,0(r16)
  810ae4:	82800044 	addi	r10,r16,1
  810ae8:	1b423c26 	beq	r3,r13,8113dc <___vfiprintf_internal_r+0x13b8>
  810aec:	18bff404 	addi	r2,r3,-48
  810af0:	0013883a 	mov	r9,zero
  810af4:	30822b36 	bltu	r6,r2,8113a4 <___vfiprintf_internal_r+0x1380>
  810af8:	50c00007 	ldb	r3,0(r10)
  810afc:	4a4002a4 	muli	r9,r9,10
  810b00:	54000044 	addi	r16,r10,1
  810b04:	8015883a 	mov	r10,r16
  810b08:	4893883a 	add	r9,r9,r2
  810b0c:	18bff404 	addi	r2,r3,-48
  810b10:	30bff92e 	bgeu	r6,r2,810af8 <__alt_mem_onchip_mem+0xff808af8>
  810b14:	483da30e 	bge	r9,zero,8101a4 <__alt_mem_onchip_mem+0xff8081a4>
  810b18:	027fffc4 	movi	r9,-1
  810b1c:	003da106 	br	8101a4 <__alt_mem_onchip_mem+0xff8081a4>
  810b20:	a5001014 	ori	r20,r20,64
  810b24:	80c00007 	ldb	r3,0(r16)
  810b28:	003d9d06 	br	8101a0 <__alt_mem_onchip_mem+0xff8081a0>
  810b2c:	da802217 	ldw	r10,136(sp)
  810b30:	d8001d85 	stb	zero,118(sp)
  810b34:	50c00204 	addi	r3,r10,8
  810b38:	54800017 	ldw	r18,0(r10)
  810b3c:	54c00117 	ldw	r19,4(r10)
  810b40:	4801ca16 	blt	r9,zero,81126c <___vfiprintf_internal_r+0x1248>
  810b44:	013fdfc4 	movi	r4,-129
  810b48:	94c4b03a 	or	r2,r18,r19
  810b4c:	d8c02215 	stw	r3,136(sp)
  810b50:	a128703a 	and	r20,r20,r4
  810b54:	0039883a 	mov	fp,zero
  810b58:	103f341e 	bne	r2,zero,81082c <__alt_mem_onchip_mem+0xff80882c>
  810b5c:	483e2e26 	beq	r9,zero,810418 <__alt_mem_onchip_mem+0xff808418>
  810b60:	0025883a 	mov	r18,zero
  810b64:	94800c04 	addi	r18,r18,48
  810b68:	dc8019c5 	stb	r18,103(sp)
  810b6c:	dcc02717 	ldw	r19,156(sp)
  810b70:	dd4019c4 	addi	r21,sp,103
  810b74:	003e2b06 	br	810424 <__alt_mem_onchip_mem+0xff808424>
  810b78:	21003fcc 	andi	r4,r4,255
  810b7c:	2002361e 	bne	r4,zero,811458 <___vfiprintf_internal_r+0x1434>
  810b80:	1801c126 	beq	r3,zero,811288 <___vfiprintf_internal_r+0x1264>
  810b84:	04800044 	movi	r18,1
  810b88:	d8c01005 	stb	r3,64(sp)
  810b8c:	d8001d85 	stb	zero,118(sp)
  810b90:	9027883a 	mov	r19,r18
  810b94:	dd401004 	addi	r21,sp,64
  810b98:	003f1106 	br	8107e0 <__alt_mem_onchip_mem+0xff8087e0>
  810b9c:	d9402117 	ldw	r5,132(sp)
  810ba0:	d9002017 	ldw	r4,128(sp)
  810ba4:	d9801a04 	addi	r6,sp,104
  810ba8:	d9c02b15 	stw	r7,172(sp)
  810bac:	dbc02a15 	stw	r15,168(sp)
  810bb0:	080ff100 	call	80ff10 <__sprint_r.part.0>
  810bb4:	d9c02b17 	ldw	r7,172(sp)
  810bb8:	dbc02a17 	ldw	r15,168(sp)
  810bbc:	10006d1e 	bne	r2,zero,810d74 <___vfiprintf_internal_r+0xd50>
  810bc0:	d9801b17 	ldw	r6,108(sp)
  810bc4:	d8801c17 	ldw	r2,112(sp)
  810bc8:	d811883a 	mov	r8,sp
  810bcc:	31400044 	addi	r5,r6,1
  810bd0:	003e3306 	br	8104a0 <__alt_mem_onchip_mem+0xff8084a0>
  810bd4:	d9401b17 	ldw	r5,108(sp)
  810bd8:	d8801c17 	ldw	r2,112(sp)
  810bdc:	29000044 	addi	r4,r5,1
  810be0:	d8c01d87 	ldb	r3,118(sp)
  810be4:	183e4d26 	beq	r3,zero,81051c <__alt_mem_onchip_mem+0xff80851c>
  810be8:	00c00044 	movi	r3,1
  810bec:	d9401d84 	addi	r5,sp,118
  810bf0:	10c5883a 	add	r2,r2,r3
  810bf4:	41400015 	stw	r5,0(r8)
  810bf8:	40c00115 	stw	r3,4(r8)
  810bfc:	d8801c15 	stw	r2,112(sp)
  810c00:	d9001b15 	stw	r4,108(sp)
  810c04:	014001c4 	movi	r5,7
  810c08:	2900a90e 	bge	r5,r4,810eb0 <___vfiprintf_internal_r+0xe8c>
  810c0c:	1000da1e 	bne	r2,zero,810f78 <___vfiprintf_internal_r+0xf54>
  810c10:	7000ab1e 	bne	r14,zero,810ec0 <___vfiprintf_internal_r+0xe9c>
  810c14:	000b883a 	mov	r5,zero
  810c18:	1809883a 	mov	r4,r3
  810c1c:	d811883a 	mov	r8,sp
  810c20:	00c02004 	movi	r3,128
  810c24:	e0fe4d26 	beq	fp,r3,81055c <__alt_mem_onchip_mem+0xff80855c>
  810c28:	4cf9c83a 	sub	fp,r9,r19
  810c2c:	073e7b0e 	bge	zero,fp,81061c <__alt_mem_onchip_mem+0xff80861c>
  810c30:	01c00404 	movi	r7,16
  810c34:	3f01900e 	bge	r7,fp,811278 <___vfiprintf_internal_r+0x1254>
  810c38:	00c020b4 	movhi	r3,130
  810c3c:	18e11204 	addi	r3,r3,-31672
  810c40:	d8c02415 	stw	r3,144(sp)
  810c44:	034001c4 	movi	r13,7
  810c48:	00000506 	br	810c60 <___vfiprintf_internal_r+0xc3c>
  810c4c:	29000084 	addi	r4,r5,2
  810c50:	42000204 	addi	r8,r8,8
  810c54:	180b883a 	mov	r5,r3
  810c58:	e73ffc04 	addi	fp,fp,-16
  810c5c:	3f000d0e 	bge	r7,fp,810c94 <___vfiprintf_internal_r+0xc70>
  810c60:	10800404 	addi	r2,r2,16
  810c64:	28c00044 	addi	r3,r5,1
  810c68:	45c00015 	stw	r23,0(r8)
  810c6c:	41c00115 	stw	r7,4(r8)
  810c70:	d8801c15 	stw	r2,112(sp)
  810c74:	d8c01b15 	stw	r3,108(sp)
  810c78:	68fff40e 	bge	r13,r3,810c4c <__alt_mem_onchip_mem+0xff808c4c>
  810c7c:	1000101e 	bne	r2,zero,810cc0 <___vfiprintf_internal_r+0xc9c>
  810c80:	e73ffc04 	addi	fp,fp,-16
  810c84:	01000044 	movi	r4,1
  810c88:	000b883a 	mov	r5,zero
  810c8c:	d811883a 	mov	r8,sp
  810c90:	3f3ff316 	blt	r7,fp,810c60 <__alt_mem_onchip_mem+0xff808c60>
  810c94:	da802417 	ldw	r10,144(sp)
  810c98:	1705883a 	add	r2,r2,fp
  810c9c:	47000115 	stw	fp,4(r8)
  810ca0:	42800015 	stw	r10,0(r8)
  810ca4:	d8801c15 	stw	r2,112(sp)
  810ca8:	d9001b15 	stw	r4,108(sp)
  810cac:	00c001c4 	movi	r3,7
  810cb0:	19003616 	blt	r3,r4,810d8c <___vfiprintf_internal_r+0xd68>
  810cb4:	42000204 	addi	r8,r8,8
  810cb8:	21000044 	addi	r4,r4,1
  810cbc:	003e5706 	br	81061c <__alt_mem_onchip_mem+0xff80861c>
  810cc0:	d9402117 	ldw	r5,132(sp)
  810cc4:	d9002017 	ldw	r4,128(sp)
  810cc8:	d9801a04 	addi	r6,sp,104
  810ccc:	d9c02b15 	stw	r7,172(sp)
  810cd0:	db402a15 	stw	r13,168(sp)
  810cd4:	080ff100 	call	80ff10 <__sprint_r.part.0>
  810cd8:	d9c02b17 	ldw	r7,172(sp)
  810cdc:	db402a17 	ldw	r13,168(sp)
  810ce0:	1000241e 	bne	r2,zero,810d74 <___vfiprintf_internal_r+0xd50>
  810ce4:	d9401b17 	ldw	r5,108(sp)
  810ce8:	d8801c17 	ldw	r2,112(sp)
  810cec:	d811883a 	mov	r8,sp
  810cf0:	29000044 	addi	r4,r5,1
  810cf4:	003fd806 	br	810c58 <__alt_mem_onchip_mem+0xff808c58>
  810cf8:	d9401b17 	ldw	r5,108(sp)
  810cfc:	00c020b4 	movhi	r3,130
  810d00:	18e11604 	addi	r3,r3,-31656
  810d04:	d8c02415 	stw	r3,144(sp)
  810d08:	29400044 	addi	r5,r5,1
  810d0c:	d8c02417 	ldw	r3,144(sp)
  810d10:	14c5883a 	add	r2,r2,r19
  810d14:	44c00115 	stw	r19,4(r8)
  810d18:	40c00015 	stw	r3,0(r8)
  810d1c:	d8801c15 	stw	r2,112(sp)
  810d20:	d9401b15 	stw	r5,108(sp)
  810d24:	00c001c4 	movi	r3,7
  810d28:	1940070e 	bge	r3,r5,810d48 <___vfiprintf_internal_r+0xd24>
  810d2c:	103e4826 	beq	r2,zero,810650 <__alt_mem_onchip_mem+0xff808650>
  810d30:	d9402117 	ldw	r5,132(sp)
  810d34:	d9002017 	ldw	r4,128(sp)
  810d38:	d9801a04 	addi	r6,sp,104
  810d3c:	080ff100 	call	80ff10 <__sprint_r.part.0>
  810d40:	10000c1e 	bne	r2,zero,810d74 <___vfiprintf_internal_r+0xd50>
  810d44:	d8801c17 	ldw	r2,112(sp)
  810d48:	8c80010e 	bge	r17,r18,810d50 <___vfiprintf_internal_r+0xd2c>
  810d4c:	9023883a 	mov	r17,r18
  810d50:	da802317 	ldw	r10,140(sp)
  810d54:	5455883a 	add	r10,r10,r17
  810d58:	da802315 	stw	r10,140(sp)
  810d5c:	103e4126 	beq	r2,zero,810664 <__alt_mem_onchip_mem+0xff808664>
  810d60:	d9402117 	ldw	r5,132(sp)
  810d64:	d9002017 	ldw	r4,128(sp)
  810d68:	d9801a04 	addi	r6,sp,104
  810d6c:	080ff100 	call	80ff10 <__sprint_r.part.0>
  810d70:	103e3c26 	beq	r2,zero,810664 <__alt_mem_onchip_mem+0xff808664>
  810d74:	dd002117 	ldw	r20,132(sp)
  810d78:	a080030b 	ldhu	r2,12(r20)
  810d7c:	1080100c 	andi	r2,r2,64
  810d80:	1001231e 	bne	r2,zero,811210 <___vfiprintf_internal_r+0x11ec>
  810d84:	d8802317 	ldw	r2,140(sp)
  810d88:	003d7b06 	br	810378 <__alt_mem_onchip_mem+0xff808378>
  810d8c:	1000991e 	bne	r2,zero,810ff4 <___vfiprintf_internal_r+0xfd0>
  810d90:	00c00044 	movi	r3,1
  810d94:	9805883a 	mov	r2,r19
  810d98:	dd400015 	stw	r21,0(sp)
  810d9c:	dcc00115 	stw	r19,4(sp)
  810da0:	dcc01c15 	stw	r19,112(sp)
  810da4:	d8c01b15 	stw	r3,108(sp)
  810da8:	d811883a 	mov	r8,sp
  810dac:	42000204 	addi	r8,r8,8
  810db0:	a2c0010c 	andi	r11,r20,4
  810db4:	583fe426 	beq	r11,zero,810d48 <__alt_mem_onchip_mem+0xff808d48>
  810db8:	8ca7c83a 	sub	r19,r17,r18
  810dbc:	04ffe20e 	bge	zero,r19,810d48 <__alt_mem_onchip_mem+0xff808d48>
  810dc0:	01c00404 	movi	r7,16
  810dc4:	3cffcc0e 	bge	r7,r19,810cf8 <__alt_mem_onchip_mem+0xff808cf8>
  810dc8:	028020b4 	movhi	r10,130
  810dcc:	52a11604 	addi	r10,r10,-31656
  810dd0:	d9001b17 	ldw	r4,108(sp)
  810dd4:	da802415 	stw	r10,144(sp)
  810dd8:	382b883a 	mov	r21,r7
  810ddc:	050001c4 	movi	r20,7
  810de0:	df002017 	ldw	fp,128(sp)
  810de4:	00000506 	br	810dfc <___vfiprintf_internal_r+0xdd8>
  810de8:	21400084 	addi	r5,r4,2
  810dec:	42000204 	addi	r8,r8,8
  810df0:	1809883a 	mov	r4,r3
  810df4:	9cfffc04 	addi	r19,r19,-16
  810df8:	acffc40e 	bge	r21,r19,810d0c <__alt_mem_onchip_mem+0xff808d0c>
  810dfc:	10800404 	addi	r2,r2,16
  810e00:	20c00044 	addi	r3,r4,1
  810e04:	45800015 	stw	r22,0(r8)
  810e08:	45400115 	stw	r21,4(r8)
  810e0c:	d8801c15 	stw	r2,112(sp)
  810e10:	d8c01b15 	stw	r3,108(sp)
  810e14:	a0fff40e 	bge	r20,r3,810de8 <__alt_mem_onchip_mem+0xff808de8>
  810e18:	1000041e 	bne	r2,zero,810e2c <___vfiprintf_internal_r+0xe08>
  810e1c:	01400044 	movi	r5,1
  810e20:	0009883a 	mov	r4,zero
  810e24:	d811883a 	mov	r8,sp
  810e28:	003ff206 	br	810df4 <__alt_mem_onchip_mem+0xff808df4>
  810e2c:	d9402117 	ldw	r5,132(sp)
  810e30:	d9801a04 	addi	r6,sp,104
  810e34:	e009883a 	mov	r4,fp
  810e38:	080ff100 	call	80ff10 <__sprint_r.part.0>
  810e3c:	103fcd1e 	bne	r2,zero,810d74 <__alt_mem_onchip_mem+0xff808d74>
  810e40:	d9001b17 	ldw	r4,108(sp)
  810e44:	d8801c17 	ldw	r2,112(sp)
  810e48:	d811883a 	mov	r8,sp
  810e4c:	21400044 	addi	r5,r4,1
  810e50:	003fe806 	br	810df4 <__alt_mem_onchip_mem+0xff808df4>
  810e54:	d9402117 	ldw	r5,132(sp)
  810e58:	d9002017 	ldw	r4,128(sp)
  810e5c:	d9801a04 	addi	r6,sp,104
  810e60:	d9c02b15 	stw	r7,172(sp)
  810e64:	db402a15 	stw	r13,168(sp)
  810e68:	080ff100 	call	80ff10 <__sprint_r.part.0>
  810e6c:	d9c02b17 	ldw	r7,172(sp)
  810e70:	db402a17 	ldw	r13,168(sp)
  810e74:	103fbf1e 	bne	r2,zero,810d74 <__alt_mem_onchip_mem+0xff808d74>
  810e78:	d9401b17 	ldw	r5,108(sp)
  810e7c:	d8801c17 	ldw	r2,112(sp)
  810e80:	d811883a 	mov	r8,sp
  810e84:	29800044 	addi	r6,r5,1
  810e88:	003dc406 	br	81059c <__alt_mem_onchip_mem+0xff80859c>
  810e8c:	1000d21e 	bne	r2,zero,8111d8 <___vfiprintf_internal_r+0x11b4>
  810e90:	d8c01d87 	ldb	r3,118(sp)
  810e94:	18009526 	beq	r3,zero,8110ec <___vfiprintf_internal_r+0x10c8>
  810e98:	00800044 	movi	r2,1
  810e9c:	d8c01d84 	addi	r3,sp,118
  810ea0:	1009883a 	mov	r4,r2
  810ea4:	d8c00015 	stw	r3,0(sp)
  810ea8:	d8800115 	stw	r2,4(sp)
  810eac:	d811883a 	mov	r8,sp
  810eb0:	200b883a 	mov	r5,r4
  810eb4:	42000204 	addi	r8,r8,8
  810eb8:	21000044 	addi	r4,r4,1
  810ebc:	003d9706 	br	81051c <__alt_mem_onchip_mem+0xff80851c>
  810ec0:	d9001d04 	addi	r4,sp,116
  810ec4:	00800084 	movi	r2,2
  810ec8:	d9000015 	stw	r4,0(sp)
  810ecc:	d8800115 	stw	r2,4(sp)
  810ed0:	1809883a 	mov	r4,r3
  810ed4:	d811883a 	mov	r8,sp
  810ed8:	200b883a 	mov	r5,r4
  810edc:	42000204 	addi	r8,r8,8
  810ee0:	21000044 	addi	r4,r4,1
  810ee4:	003f4e06 	br	810c20 <__alt_mem_onchip_mem+0xff808c20>
  810ee8:	d8001d85 	stb	zero,118(sp)
  810eec:	48005016 	blt	r9,zero,811030 <___vfiprintf_internal_r+0x100c>
  810ef0:	00ffdfc4 	movi	r3,-129
  810ef4:	94c4b03a 	or	r2,r18,r19
  810ef8:	a0e8703a 	and	r20,r20,r3
  810efc:	103d4426 	beq	r2,zero,810410 <__alt_mem_onchip_mem+0xff808410>
  810f00:	0039883a 	mov	fp,zero
  810f04:	d9002617 	ldw	r4,152(sp)
  810f08:	dd401a04 	addi	r21,sp,104
  810f0c:	908003cc 	andi	r2,r18,15
  810f10:	9806973a 	slli	r3,r19,28
  810f14:	2085883a 	add	r2,r4,r2
  810f18:	9024d13a 	srli	r18,r18,4
  810f1c:	10800003 	ldbu	r2,0(r2)
  810f20:	9826d13a 	srli	r19,r19,4
  810f24:	ad7fffc4 	addi	r21,r21,-1
  810f28:	1ca4b03a 	or	r18,r3,r18
  810f2c:	a8800005 	stb	r2,0(r21)
  810f30:	94c4b03a 	or	r2,r18,r19
  810f34:	103ff51e 	bne	r2,zero,810f0c <__alt_mem_onchip_mem+0xff808f0c>
  810f38:	003e5906 	br	8108a0 <__alt_mem_onchip_mem+0xff8088a0>
  810f3c:	d9402117 	ldw	r5,132(sp)
  810f40:	d9002017 	ldw	r4,128(sp)
  810f44:	d9801a04 	addi	r6,sp,104
  810f48:	080ff100 	call	80ff10 <__sprint_r.part.0>
  810f4c:	103f891e 	bne	r2,zero,810d74 <__alt_mem_onchip_mem+0xff808d74>
  810f50:	d8801c17 	ldw	r2,112(sp)
  810f54:	d811883a 	mov	r8,sp
  810f58:	003f9506 	br	810db0 <__alt_mem_onchip_mem+0xff808db0>
  810f5c:	d9402117 	ldw	r5,132(sp)
  810f60:	d9002017 	ldw	r4,128(sp)
  810f64:	d9801a04 	addi	r6,sp,104
  810f68:	080ff100 	call	80ff10 <__sprint_r.part.0>
  810f6c:	103f811e 	bne	r2,zero,810d74 <__alt_mem_onchip_mem+0xff808d74>
  810f70:	d811883a 	mov	r8,sp
  810f74:	003ced06 	br	81032c <__alt_mem_onchip_mem+0xff80832c>
  810f78:	d9402117 	ldw	r5,132(sp)
  810f7c:	d9002017 	ldw	r4,128(sp)
  810f80:	d9801a04 	addi	r6,sp,104
  810f84:	da402c15 	stw	r9,176(sp)
  810f88:	db802a15 	stw	r14,168(sp)
  810f8c:	080ff100 	call	80ff10 <__sprint_r.part.0>
  810f90:	da402c17 	ldw	r9,176(sp)
  810f94:	db802a17 	ldw	r14,168(sp)
  810f98:	103f761e 	bne	r2,zero,810d74 <__alt_mem_onchip_mem+0xff808d74>
  810f9c:	d9401b17 	ldw	r5,108(sp)
  810fa0:	d8801c17 	ldw	r2,112(sp)
  810fa4:	d811883a 	mov	r8,sp
  810fa8:	29000044 	addi	r4,r5,1
  810fac:	003d5b06 	br	81051c <__alt_mem_onchip_mem+0xff80851c>
  810fb0:	d9402117 	ldw	r5,132(sp)
  810fb4:	d9002017 	ldw	r4,128(sp)
  810fb8:	d9801a04 	addi	r6,sp,104
  810fbc:	da402c15 	stw	r9,176(sp)
  810fc0:	080ff100 	call	80ff10 <__sprint_r.part.0>
  810fc4:	da402c17 	ldw	r9,176(sp)
  810fc8:	103f6a1e 	bne	r2,zero,810d74 <__alt_mem_onchip_mem+0xff808d74>
  810fcc:	d9401b17 	ldw	r5,108(sp)
  810fd0:	d8801c17 	ldw	r2,112(sp)
  810fd4:	d811883a 	mov	r8,sp
  810fd8:	29000044 	addi	r4,r5,1
  810fdc:	003f1006 	br	810c20 <__alt_mem_onchip_mem+0xff808c20>
  810fe0:	1000c31e 	bne	r2,zero,8112f0 <___vfiprintf_internal_r+0x12cc>
  810fe4:	01000044 	movi	r4,1
  810fe8:	000b883a 	mov	r5,zero
  810fec:	d811883a 	mov	r8,sp
  810ff0:	003f0d06 	br	810c28 <__alt_mem_onchip_mem+0xff808c28>
  810ff4:	d9402117 	ldw	r5,132(sp)
  810ff8:	d9002017 	ldw	r4,128(sp)
  810ffc:	d9801a04 	addi	r6,sp,104
  811000:	080ff100 	call	80ff10 <__sprint_r.part.0>
  811004:	103f5b1e 	bne	r2,zero,810d74 <__alt_mem_onchip_mem+0xff808d74>
  811008:	d9001b17 	ldw	r4,108(sp)
  81100c:	d8801c17 	ldw	r2,112(sp)
  811010:	d811883a 	mov	r8,sp
  811014:	21000044 	addi	r4,r4,1
  811018:	003d8006 	br	81061c <__alt_mem_onchip_mem+0xff80861c>
  81101c:	010020b4 	movhi	r4,130
  811020:	2120b104 	addi	r4,r4,-32060
  811024:	d9002615 	stw	r4,152(sp)
  811028:	d8c02215 	stw	r3,136(sp)
  81102c:	1029883a 	mov	r20,r2
  811030:	94c4b03a 	or	r2,r18,r19
  811034:	103fb21e 	bne	r2,zero,810f00 <__alt_mem_onchip_mem+0xff808f00>
  811038:	0039883a 	mov	fp,zero
  81103c:	00800084 	movi	r2,2
  811040:	003e6b06 	br	8109f0 <__alt_mem_onchip_mem+0xff8089f0>
  811044:	da802217 	ldw	r10,136(sp)
  811048:	d8001d85 	stb	zero,118(sp)
  81104c:	0027883a 	mov	r19,zero
  811050:	50800104 	addi	r2,r10,4
  811054:	54800017 	ldw	r18,0(r10)
  811058:	483e6016 	blt	r9,zero,8109dc <__alt_mem_onchip_mem+0xff8089dc>
  81105c:	00ffdfc4 	movi	r3,-129
  811060:	d8802215 	stw	r2,136(sp)
  811064:	a0e8703a 	and	r20,r20,r3
  811068:	0039883a 	mov	fp,zero
  81106c:	903ebb26 	beq	r18,zero,810b5c <__alt_mem_onchip_mem+0xff808b5c>
  811070:	00800244 	movi	r2,9
  811074:	14bdee36 	bltu	r2,r18,810830 <__alt_mem_onchip_mem+0xff808830>
  811078:	003eba06 	br	810b64 <__alt_mem_onchip_mem+0xff808b64>
  81107c:	00800c04 	movi	r2,48
  811080:	d8c01d45 	stb	r3,117(sp)
  811084:	d8801d05 	stb	r2,116(sp)
  811088:	d8001d85 	stb	zero,118(sp)
  81108c:	a0c00094 	ori	r3,r20,2
  811090:	4800a916 	blt	r9,zero,811338 <___vfiprintf_internal_r+0x1314>
  811094:	00bfdfc4 	movi	r2,-129
  811098:	a096703a 	and	r11,r20,r2
  81109c:	5d000094 	ori	r20,r11,2
  8110a0:	0039883a 	mov	fp,zero
  8110a4:	003f9706 	br	810f04 <__alt_mem_onchip_mem+0xff808f04>
  8110a8:	8025883a 	mov	r18,r16
  8110ac:	003c2e06 	br	810168 <__alt_mem_onchip_mem+0xff808168>
  8110b0:	008020b4 	movhi	r2,130
  8110b4:	10a0b104 	addi	r2,r2,-32060
  8110b8:	0039883a 	mov	fp,zero
  8110bc:	d8802615 	stw	r2,152(sp)
  8110c0:	003f9006 	br	810f04 <__alt_mem_onchip_mem+0xff808f04>
  8110c4:	04a5c83a 	sub	r18,zero,r18
  8110c8:	07000b44 	movi	fp,45
  8110cc:	9004c03a 	cmpne	r2,r18,zero
  8110d0:	04e7c83a 	sub	r19,zero,r19
  8110d4:	df001d85 	stb	fp,118(sp)
  8110d8:	98a7c83a 	sub	r19,r19,r2
  8110dc:	48009f16 	blt	r9,zero,81135c <___vfiprintf_internal_r+0x1338>
  8110e0:	00bfdfc4 	movi	r2,-129
  8110e4:	a0a8703a 	and	r20,r20,r2
  8110e8:	003dd006 	br	81082c <__alt_mem_onchip_mem+0xff80882c>
  8110ec:	70004c26 	beq	r14,zero,811220 <___vfiprintf_internal_r+0x11fc>
  8110f0:	00800084 	movi	r2,2
  8110f4:	d8c01d04 	addi	r3,sp,116
  8110f8:	d8c00015 	stw	r3,0(sp)
  8110fc:	d8800115 	stw	r2,4(sp)
  811100:	01000044 	movi	r4,1
  811104:	d811883a 	mov	r8,sp
  811108:	003f7306 	br	810ed8 <__alt_mem_onchip_mem+0xff808ed8>
  81110c:	a080100c 	andi	r2,r20,64
  811110:	da802217 	ldw	r10,136(sp)
  811114:	103e0626 	beq	r2,zero,810930 <__alt_mem_onchip_mem+0xff808930>
  811118:	5480000f 	ldh	r18,0(r10)
  81111c:	52800104 	addi	r10,r10,4
  811120:	da802215 	stw	r10,136(sp)
  811124:	9027d7fa 	srai	r19,r18,31
  811128:	9805883a 	mov	r2,r19
  81112c:	003db806 	br	810810 <__alt_mem_onchip_mem+0xff808810>
  811130:	a080040c 	andi	r2,r20,16
  811134:	1000091e 	bne	r2,zero,81115c <___vfiprintf_internal_r+0x1138>
  811138:	a2c0100c 	andi	r11,r20,64
  81113c:	58000726 	beq	r11,zero,81115c <___vfiprintf_internal_r+0x1138>
  811140:	da802217 	ldw	r10,136(sp)
  811144:	50800017 	ldw	r2,0(r10)
  811148:	52800104 	addi	r10,r10,4
  81114c:	da802215 	stw	r10,136(sp)
  811150:	da802317 	ldw	r10,140(sp)
  811154:	1280000d 	sth	r10,0(r2)
  811158:	003be706 	br	8100f8 <__alt_mem_onchip_mem+0xff8080f8>
  81115c:	da802217 	ldw	r10,136(sp)
  811160:	50800017 	ldw	r2,0(r10)
  811164:	52800104 	addi	r10,r10,4
  811168:	da802215 	stw	r10,136(sp)
  81116c:	da802317 	ldw	r10,140(sp)
  811170:	12800015 	stw	r10,0(r2)
  811174:	003be006 	br	8100f8 <__alt_mem_onchip_mem+0xff8080f8>
  811178:	a080100c 	andi	r2,r20,64
  81117c:	da802217 	ldw	r10,136(sp)
  811180:	10003026 	beq	r2,zero,811244 <___vfiprintf_internal_r+0x1220>
  811184:	5480000b 	ldhu	r18,0(r10)
  811188:	52800104 	addi	r10,r10,4
  81118c:	0027883a 	mov	r19,zero
  811190:	da802215 	stw	r10,136(sp)
  811194:	003d8006 	br	810798 <__alt_mem_onchip_mem+0xff808798>
  811198:	80c00007 	ldb	r3,0(r16)
  81119c:	003c0006 	br	8101a0 <__alt_mem_onchip_mem+0xff8081a0>
  8111a0:	a080100c 	andi	r2,r20,64
  8111a4:	d8001d85 	stb	zero,118(sp)
  8111a8:	da802217 	ldw	r10,136(sp)
  8111ac:	1000201e 	bne	r2,zero,811230 <___vfiprintf_internal_r+0x120c>
  8111b0:	50800104 	addi	r2,r10,4
  8111b4:	54800017 	ldw	r18,0(r10)
  8111b8:	0027883a 	mov	r19,zero
  8111bc:	483def0e 	bge	r9,zero,81097c <__alt_mem_onchip_mem+0xff80897c>
  8111c0:	94c6b03a 	or	r3,r18,r19
  8111c4:	d8802215 	stw	r2,136(sp)
  8111c8:	183d4e1e 	bne	r3,zero,810704 <__alt_mem_onchip_mem+0xff808704>
  8111cc:	0039883a 	mov	fp,zero
  8111d0:	0005883a 	mov	r2,zero
  8111d4:	003e0606 	br	8109f0 <__alt_mem_onchip_mem+0xff8089f0>
  8111d8:	d9402117 	ldw	r5,132(sp)
  8111dc:	d9002017 	ldw	r4,128(sp)
  8111e0:	d9801a04 	addi	r6,sp,104
  8111e4:	da402c15 	stw	r9,176(sp)
  8111e8:	db802a15 	stw	r14,168(sp)
  8111ec:	080ff100 	call	80ff10 <__sprint_r.part.0>
  8111f0:	da402c17 	ldw	r9,176(sp)
  8111f4:	db802a17 	ldw	r14,168(sp)
  8111f8:	103ede1e 	bne	r2,zero,810d74 <__alt_mem_onchip_mem+0xff808d74>
  8111fc:	d9401b17 	ldw	r5,108(sp)
  811200:	d8801c17 	ldw	r2,112(sp)
  811204:	d811883a 	mov	r8,sp
  811208:	29000044 	addi	r4,r5,1
  81120c:	003e7406 	br	810be0 <__alt_mem_onchip_mem+0xff808be0>
  811210:	00bfffc4 	movi	r2,-1
  811214:	003c5806 	br	810378 <__alt_mem_onchip_mem+0xff808378>
  811218:	d811883a 	mov	r8,sp
  81121c:	003ee806 	br	810dc0 <__alt_mem_onchip_mem+0xff808dc0>
  811220:	000b883a 	mov	r5,zero
  811224:	01000044 	movi	r4,1
  811228:	d811883a 	mov	r8,sp
  81122c:	003e7c06 	br	810c20 <__alt_mem_onchip_mem+0xff808c20>
  811230:	50800104 	addi	r2,r10,4
  811234:	5480000b 	ldhu	r18,0(r10)
  811238:	0027883a 	mov	r19,zero
  81123c:	483dcf0e 	bge	r9,zero,81097c <__alt_mem_onchip_mem+0xff80897c>
  811240:	003fdf06 	br	8111c0 <__alt_mem_onchip_mem+0xff8091c0>
  811244:	54800017 	ldw	r18,0(r10)
  811248:	52800104 	addi	r10,r10,4
  81124c:	0027883a 	mov	r19,zero
  811250:	da802215 	stw	r10,136(sp)
  811254:	003d5006 	br	810798 <__alt_mem_onchip_mem+0xff808798>
  811258:	50800104 	addi	r2,r10,4
  81125c:	5480000b 	ldhu	r18,0(r10)
  811260:	0027883a 	mov	r19,zero
  811264:	483f7d0e 	bge	r9,zero,81105c <__alt_mem_onchip_mem+0xff80905c>
  811268:	003ddc06 	br	8109dc <__alt_mem_onchip_mem+0xff8089dc>
  81126c:	d8c02215 	stw	r3,136(sp)
  811270:	0039883a 	mov	fp,zero
  811274:	003ddb06 	br	8109e4 <__alt_mem_onchip_mem+0xff8089e4>
  811278:	028020b4 	movhi	r10,130
  81127c:	52a11204 	addi	r10,r10,-31672
  811280:	da802415 	stw	r10,144(sp)
  811284:	003e8306 	br	810c94 <__alt_mem_onchip_mem+0xff808c94>
  811288:	d8801c17 	ldw	r2,112(sp)
  81128c:	dd002117 	ldw	r20,132(sp)
  811290:	103eb926 	beq	r2,zero,810d78 <__alt_mem_onchip_mem+0xff808d78>
  811294:	d9002017 	ldw	r4,128(sp)
  811298:	d9801a04 	addi	r6,sp,104
  81129c:	a00b883a 	mov	r5,r20
  8112a0:	080ff100 	call	80ff10 <__sprint_r.part.0>
  8112a4:	003eb406 	br	810d78 <__alt_mem_onchip_mem+0xff808d78>
  8112a8:	80c00043 	ldbu	r3,1(r16)
  8112ac:	a5000814 	ori	r20,r20,32
  8112b0:	84000044 	addi	r16,r16,1
  8112b4:	18c03fcc 	andi	r3,r3,255
  8112b8:	18c0201c 	xori	r3,r3,128
  8112bc:	18ffe004 	addi	r3,r3,-128
  8112c0:	003bb706 	br	8101a0 <__alt_mem_onchip_mem+0xff8081a0>
  8112c4:	a809883a 	mov	r4,r21
  8112c8:	d8c02a15 	stw	r3,168(sp)
  8112cc:	da002b15 	stw	r8,172(sp)
  8112d0:	080fe780 	call	80fe78 <strlen>
  8112d4:	d8c02a17 	ldw	r3,168(sp)
  8112d8:	1027883a 	mov	r19,r2
  8112dc:	df001d83 	ldbu	fp,118(sp)
  8112e0:	d8c02215 	stw	r3,136(sp)
  8112e4:	0013883a 	mov	r9,zero
  8112e8:	da002b17 	ldw	r8,172(sp)
  8112ec:	003c4d06 	br	810424 <__alt_mem_onchip_mem+0xff808424>
  8112f0:	d9402117 	ldw	r5,132(sp)
  8112f4:	d9002017 	ldw	r4,128(sp)
  8112f8:	d9801a04 	addi	r6,sp,104
  8112fc:	da402c15 	stw	r9,176(sp)
  811300:	080ff100 	call	80ff10 <__sprint_r.part.0>
  811304:	da402c17 	ldw	r9,176(sp)
  811308:	103e9a1e 	bne	r2,zero,810d74 <__alt_mem_onchip_mem+0xff808d74>
  81130c:	d9401b17 	ldw	r5,108(sp)
  811310:	d8801c17 	ldw	r2,112(sp)
  811314:	d811883a 	mov	r8,sp
  811318:	29000044 	addi	r4,r5,1
  81131c:	003e4206 	br	810c28 <__alt_mem_onchip_mem+0xff808c28>
  811320:	d9401b17 	ldw	r5,108(sp)
  811324:	010020b4 	movhi	r4,130
  811328:	21211604 	addi	r4,r4,-31656
  81132c:	d9002415 	stw	r4,144(sp)
  811330:	29400044 	addi	r5,r5,1
  811334:	003c6d06 	br	8104ec <__alt_mem_onchip_mem+0xff8084ec>
  811338:	0039883a 	mov	fp,zero
  81133c:	00800084 	movi	r2,2
  811340:	10803fcc 	andi	r2,r2,255
  811344:	01000044 	movi	r4,1
  811348:	11001e26 	beq	r2,r4,8113c4 <___vfiprintf_internal_r+0x13a0>
  81134c:	01000084 	movi	r4,2
  811350:	11001e1e 	bne	r2,r4,8113cc <___vfiprintf_internal_r+0x13a8>
  811354:	1829883a 	mov	r20,r3
  811358:	003eea06 	br	810f04 <__alt_mem_onchip_mem+0xff808f04>
  81135c:	a007883a 	mov	r3,r20
  811360:	00800044 	movi	r2,1
  811364:	003ff606 	br	811340 <__alt_mem_onchip_mem+0xff809340>
  811368:	00800184 	movi	r2,6
  81136c:	1240012e 	bgeu	r2,r9,811374 <___vfiprintf_internal_r+0x1350>
  811370:	1013883a 	mov	r9,r2
  811374:	4827883a 	mov	r19,r9
  811378:	4825883a 	mov	r18,r9
  81137c:	48001516 	blt	r9,zero,8113d4 <___vfiprintf_internal_r+0x13b0>
  811380:	054020b4 	movhi	r21,130
  811384:	d8c02215 	stw	r3,136(sp)
  811388:	ad60b604 	addi	r21,r21,-32040
  81138c:	003d1406 	br	8107e0 <__alt_mem_onchip_mem+0xff8087e0>
  811390:	028020b4 	movhi	r10,130
  811394:	52a11204 	addi	r10,r10,-31672
  811398:	da802415 	stw	r10,144(sp)
  81139c:	200d883a 	mov	r6,r4
  8113a0:	003c9106 	br	8105e8 <__alt_mem_onchip_mem+0xff8085e8>
  8113a4:	5021883a 	mov	r16,r10
  8113a8:	0013883a 	mov	r9,zero
  8113ac:	003b7d06 	br	8101a4 <__alt_mem_onchip_mem+0xff8081a4>
  8113b0:	4827883a 	mov	r19,r9
  8113b4:	df001d83 	ldbu	fp,118(sp)
  8113b8:	d8c02215 	stw	r3,136(sp)
  8113bc:	0013883a 	mov	r9,zero
  8113c0:	003c1806 	br	810424 <__alt_mem_onchip_mem+0xff808424>
  8113c4:	1829883a 	mov	r20,r3
  8113c8:	003d1806 	br	81082c <__alt_mem_onchip_mem+0xff80882c>
  8113cc:	1829883a 	mov	r20,r3
  8113d0:	003ccd06 	br	810708 <__alt_mem_onchip_mem+0xff808708>
  8113d4:	0025883a 	mov	r18,zero
  8113d8:	003fe906 	br	811380 <__alt_mem_onchip_mem+0xff809380>
  8113dc:	d8802217 	ldw	r2,136(sp)
  8113e0:	80c00043 	ldbu	r3,1(r16)
  8113e4:	5021883a 	mov	r16,r10
  8113e8:	12400017 	ldw	r9,0(r2)
  8113ec:	10800104 	addi	r2,r2,4
  8113f0:	d8802215 	stw	r2,136(sp)
  8113f4:	483faf0e 	bge	r9,zero,8112b4 <__alt_mem_onchip_mem+0xff8092b4>
  8113f8:	18c03fcc 	andi	r3,r3,255
  8113fc:	18c0201c 	xori	r3,r3,128
  811400:	027fffc4 	movi	r9,-1
  811404:	18ffe004 	addi	r3,r3,-128
  811408:	003b6506 	br	8101a0 <__alt_mem_onchip_mem+0xff8081a0>
  81140c:	d9c01d85 	stb	r7,118(sp)
  811410:	003ca006 	br	810694 <__alt_mem_onchip_mem+0xff808694>
  811414:	d9c01d85 	stb	r7,118(sp)
  811418:	003cad06 	br	8106d0 <__alt_mem_onchip_mem+0xff8086d0>
  81141c:	d9c01d85 	stb	r7,118(sp)
  811420:	003d7d06 	br	810a18 <__alt_mem_onchip_mem+0xff808a18>
  811424:	d9c01d85 	stb	r7,118(sp)
  811428:	003d5f06 	br	8109a8 <__alt_mem_onchip_mem+0xff8089a8>
  81142c:	a080004c 	andi	r2,r20,1
  811430:	0039883a 	mov	fp,zero
  811434:	10000526 	beq	r2,zero,81144c <___vfiprintf_internal_r+0x1428>
  811438:	00800c04 	movi	r2,48
  81143c:	d88019c5 	stb	r2,103(sp)
  811440:	dcc02717 	ldw	r19,156(sp)
  811444:	dd4019c4 	addi	r21,sp,103
  811448:	003bf606 	br	810424 <__alt_mem_onchip_mem+0xff808424>
  81144c:	0027883a 	mov	r19,zero
  811450:	dd401a04 	addi	r21,sp,104
  811454:	003bf306 	br	810424 <__alt_mem_onchip_mem+0xff808424>
  811458:	d9c01d85 	stb	r7,118(sp)
  81145c:	003dc806 	br	810b80 <__alt_mem_onchip_mem+0xff808b80>
  811460:	d9c01d85 	stb	r7,118(sp)
  811464:	003d3a06 	br	810950 <__alt_mem_onchip_mem+0xff808950>
  811468:	d9c01d85 	stb	r7,118(sp)
  81146c:	003d2a06 	br	810918 <__alt_mem_onchip_mem+0xff808918>
  811470:	d9c01d85 	stb	r7,118(sp)
  811474:	003cde06 	br	8107f0 <__alt_mem_onchip_mem+0xff8087f0>
  811478:	d9c01d85 	stb	r7,118(sp)
  81147c:	003cbc06 	br	810770 <__alt_mem_onchip_mem+0xff808770>

00811480 <__vfiprintf_internal>:
  811480:	008020b4 	movhi	r2,130
  811484:	10a8f004 	addi	r2,r2,-23616
  811488:	300f883a 	mov	r7,r6
  81148c:	280d883a 	mov	r6,r5
  811490:	200b883a 	mov	r5,r4
  811494:	11000017 	ldw	r4,0(r2)
  811498:	08100241 	jmpi	810024 <___vfiprintf_internal_r>

0081149c <__sbprintf>:
  81149c:	2880030b 	ldhu	r2,12(r5)
  8114a0:	2ac01917 	ldw	r11,100(r5)
  8114a4:	2a80038b 	ldhu	r10,14(r5)
  8114a8:	2a400717 	ldw	r9,28(r5)
  8114ac:	2a000917 	ldw	r8,36(r5)
  8114b0:	defee204 	addi	sp,sp,-1144
  8114b4:	00c10004 	movi	r3,1024
  8114b8:	dc011a15 	stw	r16,1128(sp)
  8114bc:	10bfff4c 	andi	r2,r2,65533
  8114c0:	2821883a 	mov	r16,r5
  8114c4:	d8cb883a 	add	r5,sp,r3
  8114c8:	dc811c15 	stw	r18,1136(sp)
  8114cc:	dc411b15 	stw	r17,1132(sp)
  8114d0:	dfc11d15 	stw	ra,1140(sp)
  8114d4:	2025883a 	mov	r18,r4
  8114d8:	d881030d 	sth	r2,1036(sp)
  8114dc:	dac11915 	stw	r11,1124(sp)
  8114e0:	da81038d 	sth	r10,1038(sp)
  8114e4:	da410715 	stw	r9,1052(sp)
  8114e8:	da010915 	stw	r8,1060(sp)
  8114ec:	dec10015 	stw	sp,1024(sp)
  8114f0:	dec10415 	stw	sp,1040(sp)
  8114f4:	d8c10215 	stw	r3,1032(sp)
  8114f8:	d8c10515 	stw	r3,1044(sp)
  8114fc:	d8010615 	stw	zero,1048(sp)
  811500:	08100240 	call	810024 <___vfiprintf_internal_r>
  811504:	1023883a 	mov	r17,r2
  811508:	10000416 	blt	r2,zero,81151c <__sbprintf+0x80>
  81150c:	d9410004 	addi	r5,sp,1024
  811510:	9009883a 	mov	r4,r18
  811514:	080d3bc0 	call	80d3bc <_fflush_r>
  811518:	10000d1e 	bne	r2,zero,811550 <__sbprintf+0xb4>
  81151c:	d881030b 	ldhu	r2,1036(sp)
  811520:	1080100c 	andi	r2,r2,64
  811524:	10000326 	beq	r2,zero,811534 <__sbprintf+0x98>
  811528:	8080030b 	ldhu	r2,12(r16)
  81152c:	10801014 	ori	r2,r2,64
  811530:	8080030d 	sth	r2,12(r16)
  811534:	8805883a 	mov	r2,r17
  811538:	dfc11d17 	ldw	ra,1140(sp)
  81153c:	dc811c17 	ldw	r18,1136(sp)
  811540:	dc411b17 	ldw	r17,1132(sp)
  811544:	dc011a17 	ldw	r16,1128(sp)
  811548:	dec11e04 	addi	sp,sp,1144
  81154c:	f800283a 	ret
  811550:	047fffc4 	movi	r17,-1
  811554:	003ff106 	br	81151c <__alt_mem_onchip_mem+0xff80951c>

00811558 <_write_r>:
  811558:	defffd04 	addi	sp,sp,-12
  81155c:	2805883a 	mov	r2,r5
  811560:	dc000015 	stw	r16,0(sp)
  811564:	040020b4 	movhi	r16,130
  811568:	dc400115 	stw	r17,4(sp)
  81156c:	300b883a 	mov	r5,r6
  811570:	84304104 	addi	r16,r16,-16124
  811574:	2023883a 	mov	r17,r4
  811578:	380d883a 	mov	r6,r7
  81157c:	1009883a 	mov	r4,r2
  811580:	dfc00215 	stw	ra,8(sp)
  811584:	80000015 	stw	zero,0(r16)
  811588:	08148a80 	call	8148a8 <write>
  81158c:	00ffffc4 	movi	r3,-1
  811590:	10c00526 	beq	r2,r3,8115a8 <_write_r+0x50>
  811594:	dfc00217 	ldw	ra,8(sp)
  811598:	dc400117 	ldw	r17,4(sp)
  81159c:	dc000017 	ldw	r16,0(sp)
  8115a0:	dec00304 	addi	sp,sp,12
  8115a4:	f800283a 	ret
  8115a8:	80c00017 	ldw	r3,0(r16)
  8115ac:	183ff926 	beq	r3,zero,811594 <__alt_mem_onchip_mem+0xff809594>
  8115b0:	88c00015 	stw	r3,0(r17)
  8115b4:	003ff706 	br	811594 <__alt_mem_onchip_mem+0xff809594>

008115b8 <_close_r>:
  8115b8:	defffd04 	addi	sp,sp,-12
  8115bc:	dc000015 	stw	r16,0(sp)
  8115c0:	040020b4 	movhi	r16,130
  8115c4:	dc400115 	stw	r17,4(sp)
  8115c8:	84304104 	addi	r16,r16,-16124
  8115cc:	2023883a 	mov	r17,r4
  8115d0:	2809883a 	mov	r4,r5
  8115d4:	dfc00215 	stw	ra,8(sp)
  8115d8:	80000015 	stw	zero,0(r16)
  8115dc:	08140980 	call	814098 <close>
  8115e0:	00ffffc4 	movi	r3,-1
  8115e4:	10c00526 	beq	r2,r3,8115fc <_close_r+0x44>
  8115e8:	dfc00217 	ldw	ra,8(sp)
  8115ec:	dc400117 	ldw	r17,4(sp)
  8115f0:	dc000017 	ldw	r16,0(sp)
  8115f4:	dec00304 	addi	sp,sp,12
  8115f8:	f800283a 	ret
  8115fc:	80c00017 	ldw	r3,0(r16)
  811600:	183ff926 	beq	r3,zero,8115e8 <__alt_mem_onchip_mem+0xff8095e8>
  811604:	88c00015 	stw	r3,0(r17)
  811608:	003ff706 	br	8115e8 <__alt_mem_onchip_mem+0xff8095e8>

0081160c <_calloc_r>:
  81160c:	298b383a 	mul	r5,r5,r6
  811610:	defffe04 	addi	sp,sp,-8
  811614:	dfc00115 	stw	ra,4(sp)
  811618:	dc000015 	stw	r16,0(sp)
  81161c:	080e03c0 	call	80e03c <_malloc_r>
  811620:	10002926 	beq	r2,zero,8116c8 <_calloc_r+0xbc>
  811624:	11bfff17 	ldw	r6,-4(r2)
  811628:	1021883a 	mov	r16,r2
  81162c:	00bfff04 	movi	r2,-4
  811630:	308c703a 	and	r6,r6,r2
  811634:	00c00904 	movi	r3,36
  811638:	308d883a 	add	r6,r6,r2
  81163c:	19801636 	bltu	r3,r6,811698 <_calloc_r+0x8c>
  811640:	008004c4 	movi	r2,19
  811644:	11800b2e 	bgeu	r2,r6,811674 <_calloc_r+0x68>
  811648:	80000015 	stw	zero,0(r16)
  81164c:	80000115 	stw	zero,4(r16)
  811650:	008006c4 	movi	r2,27
  811654:	11801a2e 	bgeu	r2,r6,8116c0 <_calloc_r+0xb4>
  811658:	80000215 	stw	zero,8(r16)
  81165c:	80000315 	stw	zero,12(r16)
  811660:	30c0151e 	bne	r6,r3,8116b8 <_calloc_r+0xac>
  811664:	80000415 	stw	zero,16(r16)
  811668:	80800604 	addi	r2,r16,24
  81166c:	80000515 	stw	zero,20(r16)
  811670:	00000106 	br	811678 <_calloc_r+0x6c>
  811674:	8005883a 	mov	r2,r16
  811678:	10000015 	stw	zero,0(r2)
  81167c:	10000115 	stw	zero,4(r2)
  811680:	10000215 	stw	zero,8(r2)
  811684:	8005883a 	mov	r2,r16
  811688:	dfc00117 	ldw	ra,4(sp)
  81168c:	dc000017 	ldw	r16,0(sp)
  811690:	dec00204 	addi	sp,sp,8
  811694:	f800283a 	ret
  811698:	000b883a 	mov	r5,zero
  81169c:	8009883a 	mov	r4,r16
  8116a0:	080ea740 	call	80ea74 <memset>
  8116a4:	8005883a 	mov	r2,r16
  8116a8:	dfc00117 	ldw	ra,4(sp)
  8116ac:	dc000017 	ldw	r16,0(sp)
  8116b0:	dec00204 	addi	sp,sp,8
  8116b4:	f800283a 	ret
  8116b8:	80800404 	addi	r2,r16,16
  8116bc:	003fee06 	br	811678 <__alt_mem_onchip_mem+0xff809678>
  8116c0:	80800204 	addi	r2,r16,8
  8116c4:	003fec06 	br	811678 <__alt_mem_onchip_mem+0xff809678>
  8116c8:	0005883a 	mov	r2,zero
  8116cc:	003fee06 	br	811688 <__alt_mem_onchip_mem+0xff809688>

008116d0 <_fclose_r>:
  8116d0:	28003926 	beq	r5,zero,8117b8 <_fclose_r+0xe8>
  8116d4:	defffc04 	addi	sp,sp,-16
  8116d8:	dc400115 	stw	r17,4(sp)
  8116dc:	dc000015 	stw	r16,0(sp)
  8116e0:	dfc00315 	stw	ra,12(sp)
  8116e4:	dc800215 	stw	r18,8(sp)
  8116e8:	2023883a 	mov	r17,r4
  8116ec:	2821883a 	mov	r16,r5
  8116f0:	20000226 	beq	r4,zero,8116fc <_fclose_r+0x2c>
  8116f4:	20800e17 	ldw	r2,56(r4)
  8116f8:	10002726 	beq	r2,zero,811798 <_fclose_r+0xc8>
  8116fc:	8080030f 	ldh	r2,12(r16)
  811700:	1000071e 	bne	r2,zero,811720 <_fclose_r+0x50>
  811704:	0005883a 	mov	r2,zero
  811708:	dfc00317 	ldw	ra,12(sp)
  81170c:	dc800217 	ldw	r18,8(sp)
  811710:	dc400117 	ldw	r17,4(sp)
  811714:	dc000017 	ldw	r16,0(sp)
  811718:	dec00404 	addi	sp,sp,16
  81171c:	f800283a 	ret
  811720:	800b883a 	mov	r5,r16
  811724:	8809883a 	mov	r4,r17
  811728:	080d1a00 	call	80d1a0 <__sflush_r>
  81172c:	1025883a 	mov	r18,r2
  811730:	80800b17 	ldw	r2,44(r16)
  811734:	10000426 	beq	r2,zero,811748 <_fclose_r+0x78>
  811738:	81400717 	ldw	r5,28(r16)
  81173c:	8809883a 	mov	r4,r17
  811740:	103ee83a 	callr	r2
  811744:	10001616 	blt	r2,zero,8117a0 <_fclose_r+0xd0>
  811748:	8080030b 	ldhu	r2,12(r16)
  81174c:	1080200c 	andi	r2,r2,128
  811750:	1000151e 	bne	r2,zero,8117a8 <_fclose_r+0xd8>
  811754:	81400c17 	ldw	r5,48(r16)
  811758:	28000526 	beq	r5,zero,811770 <_fclose_r+0xa0>
  81175c:	80801004 	addi	r2,r16,64
  811760:	28800226 	beq	r5,r2,81176c <_fclose_r+0x9c>
  811764:	8809883a 	mov	r4,r17
  811768:	080d90c0 	call	80d90c <_free_r>
  81176c:	80000c15 	stw	zero,48(r16)
  811770:	81401117 	ldw	r5,68(r16)
  811774:	28000326 	beq	r5,zero,811784 <_fclose_r+0xb4>
  811778:	8809883a 	mov	r4,r17
  81177c:	080d90c0 	call	80d90c <_free_r>
  811780:	80001115 	stw	zero,68(r16)
  811784:	080d7a80 	call	80d7a8 <__sfp_lock_acquire>
  811788:	8000030d 	sth	zero,12(r16)
  81178c:	080d7ac0 	call	80d7ac <__sfp_lock_release>
  811790:	9005883a 	mov	r2,r18
  811794:	003fdc06 	br	811708 <__alt_mem_onchip_mem+0xff809708>
  811798:	080d7980 	call	80d798 <__sinit>
  81179c:	003fd706 	br	8116fc <__alt_mem_onchip_mem+0xff8096fc>
  8117a0:	04bfffc4 	movi	r18,-1
  8117a4:	003fe806 	br	811748 <__alt_mem_onchip_mem+0xff809748>
  8117a8:	81400417 	ldw	r5,16(r16)
  8117ac:	8809883a 	mov	r4,r17
  8117b0:	080d90c0 	call	80d90c <_free_r>
  8117b4:	003fe706 	br	811754 <__alt_mem_onchip_mem+0xff809754>
  8117b8:	0005883a 	mov	r2,zero
  8117bc:	f800283a 	ret

008117c0 <fclose>:
  8117c0:	008020b4 	movhi	r2,130
  8117c4:	10a8f004 	addi	r2,r2,-23616
  8117c8:	200b883a 	mov	r5,r4
  8117cc:	11000017 	ldw	r4,0(r2)
  8117d0:	08116d01 	jmpi	8116d0 <_fclose_r>

008117d4 <__fputwc>:
  8117d4:	defff804 	addi	sp,sp,-32
  8117d8:	dcc00415 	stw	r19,16(sp)
  8117dc:	dc800315 	stw	r18,12(sp)
  8117e0:	dc000115 	stw	r16,4(sp)
  8117e4:	dfc00715 	stw	ra,28(sp)
  8117e8:	dd400615 	stw	r21,24(sp)
  8117ec:	dd000515 	stw	r20,20(sp)
  8117f0:	dc400215 	stw	r17,8(sp)
  8117f4:	2027883a 	mov	r19,r4
  8117f8:	2825883a 	mov	r18,r5
  8117fc:	3021883a 	mov	r16,r6
  811800:	080de2c0 	call	80de2c <__locale_mb_cur_max>
  811804:	00c00044 	movi	r3,1
  811808:	10c03e26 	beq	r2,r3,811904 <__fputwc+0x130>
  81180c:	81c01704 	addi	r7,r16,92
  811810:	900d883a 	mov	r6,r18
  811814:	d80b883a 	mov	r5,sp
  811818:	9809883a 	mov	r4,r19
  81181c:	08128200 	call	812820 <_wcrtomb_r>
  811820:	1029883a 	mov	r20,r2
  811824:	00bfffc4 	movi	r2,-1
  811828:	a0802026 	beq	r20,r2,8118ac <__fputwc+0xd8>
  81182c:	d9400003 	ldbu	r5,0(sp)
  811830:	a0001c26 	beq	r20,zero,8118a4 <__fputwc+0xd0>
  811834:	0023883a 	mov	r17,zero
  811838:	05400284 	movi	r21,10
  81183c:	00000906 	br	811864 <__fputwc+0x90>
  811840:	80800017 	ldw	r2,0(r16)
  811844:	11400005 	stb	r5,0(r2)
  811848:	80c00017 	ldw	r3,0(r16)
  81184c:	18c00044 	addi	r3,r3,1
  811850:	80c00015 	stw	r3,0(r16)
  811854:	8c400044 	addi	r17,r17,1
  811858:	dc45883a 	add	r2,sp,r17
  81185c:	8d00112e 	bgeu	r17,r20,8118a4 <__fputwc+0xd0>
  811860:	11400003 	ldbu	r5,0(r2)
  811864:	80c00217 	ldw	r3,8(r16)
  811868:	18ffffc4 	addi	r3,r3,-1
  81186c:	80c00215 	stw	r3,8(r16)
  811870:	183ff30e 	bge	r3,zero,811840 <__alt_mem_onchip_mem+0xff809840>
  811874:	80800617 	ldw	r2,24(r16)
  811878:	18801916 	blt	r3,r2,8118e0 <__fputwc+0x10c>
  81187c:	80800017 	ldw	r2,0(r16)
  811880:	11400005 	stb	r5,0(r2)
  811884:	80800017 	ldw	r2,0(r16)
  811888:	10c00003 	ldbu	r3,0(r2)
  81188c:	10800044 	addi	r2,r2,1
  811890:	1d402326 	beq	r3,r21,811920 <__fputwc+0x14c>
  811894:	80800015 	stw	r2,0(r16)
  811898:	8c400044 	addi	r17,r17,1
  81189c:	dc45883a 	add	r2,sp,r17
  8118a0:	8d3fef36 	bltu	r17,r20,811860 <__alt_mem_onchip_mem+0xff809860>
  8118a4:	9005883a 	mov	r2,r18
  8118a8:	00000406 	br	8118bc <__fputwc+0xe8>
  8118ac:	80c0030b 	ldhu	r3,12(r16)
  8118b0:	a005883a 	mov	r2,r20
  8118b4:	18c01014 	ori	r3,r3,64
  8118b8:	80c0030d 	sth	r3,12(r16)
  8118bc:	dfc00717 	ldw	ra,28(sp)
  8118c0:	dd400617 	ldw	r21,24(sp)
  8118c4:	dd000517 	ldw	r20,20(sp)
  8118c8:	dcc00417 	ldw	r19,16(sp)
  8118cc:	dc800317 	ldw	r18,12(sp)
  8118d0:	dc400217 	ldw	r17,8(sp)
  8118d4:	dc000117 	ldw	r16,4(sp)
  8118d8:	dec00804 	addi	sp,sp,32
  8118dc:	f800283a 	ret
  8118e0:	800d883a 	mov	r6,r16
  8118e4:	29403fcc 	andi	r5,r5,255
  8118e8:	9809883a 	mov	r4,r19
  8118ec:	08126c80 	call	8126c8 <__swbuf_r>
  8118f0:	10bfffe0 	cmpeqi	r2,r2,-1
  8118f4:	10803fcc 	andi	r2,r2,255
  8118f8:	103fd626 	beq	r2,zero,811854 <__alt_mem_onchip_mem+0xff809854>
  8118fc:	00bfffc4 	movi	r2,-1
  811900:	003fee06 	br	8118bc <__alt_mem_onchip_mem+0xff8098bc>
  811904:	90ffffc4 	addi	r3,r18,-1
  811908:	01003f84 	movi	r4,254
  81190c:	20ffbf36 	bltu	r4,r3,81180c <__alt_mem_onchip_mem+0xff80980c>
  811910:	900b883a 	mov	r5,r18
  811914:	dc800005 	stb	r18,0(sp)
  811918:	1029883a 	mov	r20,r2
  81191c:	003fc506 	br	811834 <__alt_mem_onchip_mem+0xff809834>
  811920:	800d883a 	mov	r6,r16
  811924:	a80b883a 	mov	r5,r21
  811928:	9809883a 	mov	r4,r19
  81192c:	08126c80 	call	8126c8 <__swbuf_r>
  811930:	10bfffe0 	cmpeqi	r2,r2,-1
  811934:	003fef06 	br	8118f4 <__alt_mem_onchip_mem+0xff8098f4>

00811938 <_fputwc_r>:
  811938:	3080030b 	ldhu	r2,12(r6)
  81193c:	10c8000c 	andi	r3,r2,8192
  811940:	1800051e 	bne	r3,zero,811958 <_fputwc_r+0x20>
  811944:	30c01917 	ldw	r3,100(r6)
  811948:	10880014 	ori	r2,r2,8192
  81194c:	3080030d 	sth	r2,12(r6)
  811950:	18880014 	ori	r2,r3,8192
  811954:	30801915 	stw	r2,100(r6)
  811958:	08117d41 	jmpi	8117d4 <__fputwc>

0081195c <fputwc>:
  81195c:	008020b4 	movhi	r2,130
  811960:	defffc04 	addi	sp,sp,-16
  811964:	10a8f004 	addi	r2,r2,-23616
  811968:	dc000115 	stw	r16,4(sp)
  81196c:	14000017 	ldw	r16,0(r2)
  811970:	dc400215 	stw	r17,8(sp)
  811974:	dfc00315 	stw	ra,12(sp)
  811978:	2023883a 	mov	r17,r4
  81197c:	80000226 	beq	r16,zero,811988 <fputwc+0x2c>
  811980:	80800e17 	ldw	r2,56(r16)
  811984:	10001026 	beq	r2,zero,8119c8 <fputwc+0x6c>
  811988:	2880030b 	ldhu	r2,12(r5)
  81198c:	10c8000c 	andi	r3,r2,8192
  811990:	1800051e 	bne	r3,zero,8119a8 <fputwc+0x4c>
  811994:	28c01917 	ldw	r3,100(r5)
  811998:	10880014 	ori	r2,r2,8192
  81199c:	2880030d 	sth	r2,12(r5)
  8119a0:	18880014 	ori	r2,r3,8192
  8119a4:	28801915 	stw	r2,100(r5)
  8119a8:	280d883a 	mov	r6,r5
  8119ac:	8009883a 	mov	r4,r16
  8119b0:	880b883a 	mov	r5,r17
  8119b4:	dfc00317 	ldw	ra,12(sp)
  8119b8:	dc400217 	ldw	r17,8(sp)
  8119bc:	dc000117 	ldw	r16,4(sp)
  8119c0:	dec00404 	addi	sp,sp,16
  8119c4:	08117d41 	jmpi	8117d4 <__fputwc>
  8119c8:	8009883a 	mov	r4,r16
  8119cc:	d9400015 	stw	r5,0(sp)
  8119d0:	080d7980 	call	80d798 <__sinit>
  8119d4:	d9400017 	ldw	r5,0(sp)
  8119d8:	003feb06 	br	811988 <__alt_mem_onchip_mem+0xff809988>

008119dc <_fstat_r>:
  8119dc:	defffd04 	addi	sp,sp,-12
  8119e0:	2805883a 	mov	r2,r5
  8119e4:	dc000015 	stw	r16,0(sp)
  8119e8:	040020b4 	movhi	r16,130
  8119ec:	dc400115 	stw	r17,4(sp)
  8119f0:	84304104 	addi	r16,r16,-16124
  8119f4:	2023883a 	mov	r17,r4
  8119f8:	300b883a 	mov	r5,r6
  8119fc:	1009883a 	mov	r4,r2
  811a00:	dfc00215 	stw	ra,8(sp)
  811a04:	80000015 	stw	zero,0(r16)
  811a08:	08141d00 	call	8141d0 <fstat>
  811a0c:	00ffffc4 	movi	r3,-1
  811a10:	10c00526 	beq	r2,r3,811a28 <_fstat_r+0x4c>
  811a14:	dfc00217 	ldw	ra,8(sp)
  811a18:	dc400117 	ldw	r17,4(sp)
  811a1c:	dc000017 	ldw	r16,0(sp)
  811a20:	dec00304 	addi	sp,sp,12
  811a24:	f800283a 	ret
  811a28:	80c00017 	ldw	r3,0(r16)
  811a2c:	183ff926 	beq	r3,zero,811a14 <__alt_mem_onchip_mem+0xff809a14>
  811a30:	88c00015 	stw	r3,0(r17)
  811a34:	003ff706 	br	811a14 <__alt_mem_onchip_mem+0xff809a14>

00811a38 <__sfvwrite_r>:
  811a38:	30800217 	ldw	r2,8(r6)
  811a3c:	10006726 	beq	r2,zero,811bdc <__sfvwrite_r+0x1a4>
  811a40:	28c0030b 	ldhu	r3,12(r5)
  811a44:	defff404 	addi	sp,sp,-48
  811a48:	dd400715 	stw	r21,28(sp)
  811a4c:	dd000615 	stw	r20,24(sp)
  811a50:	dc000215 	stw	r16,8(sp)
  811a54:	dfc00b15 	stw	ra,44(sp)
  811a58:	df000a15 	stw	fp,40(sp)
  811a5c:	ddc00915 	stw	r23,36(sp)
  811a60:	dd800815 	stw	r22,32(sp)
  811a64:	dcc00515 	stw	r19,20(sp)
  811a68:	dc800415 	stw	r18,16(sp)
  811a6c:	dc400315 	stw	r17,12(sp)
  811a70:	1880020c 	andi	r2,r3,8
  811a74:	2821883a 	mov	r16,r5
  811a78:	202b883a 	mov	r21,r4
  811a7c:	3029883a 	mov	r20,r6
  811a80:	10002726 	beq	r2,zero,811b20 <__sfvwrite_r+0xe8>
  811a84:	28800417 	ldw	r2,16(r5)
  811a88:	10002526 	beq	r2,zero,811b20 <__sfvwrite_r+0xe8>
  811a8c:	1880008c 	andi	r2,r3,2
  811a90:	a4400017 	ldw	r17,0(r20)
  811a94:	10002a26 	beq	r2,zero,811b40 <__sfvwrite_r+0x108>
  811a98:	05a00034 	movhi	r22,32768
  811a9c:	0027883a 	mov	r19,zero
  811aa0:	0025883a 	mov	r18,zero
  811aa4:	b5bf0004 	addi	r22,r22,-1024
  811aa8:	980d883a 	mov	r6,r19
  811aac:	a809883a 	mov	r4,r21
  811ab0:	90004626 	beq	r18,zero,811bcc <__sfvwrite_r+0x194>
  811ab4:	900f883a 	mov	r7,r18
  811ab8:	b480022e 	bgeu	r22,r18,811ac4 <__sfvwrite_r+0x8c>
  811abc:	01e00034 	movhi	r7,32768
  811ac0:	39ff0004 	addi	r7,r7,-1024
  811ac4:	80800917 	ldw	r2,36(r16)
  811ac8:	81400717 	ldw	r5,28(r16)
  811acc:	103ee83a 	callr	r2
  811ad0:	0080570e 	bge	zero,r2,811c30 <__sfvwrite_r+0x1f8>
  811ad4:	a0c00217 	ldw	r3,8(r20)
  811ad8:	98a7883a 	add	r19,r19,r2
  811adc:	90a5c83a 	sub	r18,r18,r2
  811ae0:	1885c83a 	sub	r2,r3,r2
  811ae4:	a0800215 	stw	r2,8(r20)
  811ae8:	103fef1e 	bne	r2,zero,811aa8 <__alt_mem_onchip_mem+0xff809aa8>
  811aec:	0005883a 	mov	r2,zero
  811af0:	dfc00b17 	ldw	ra,44(sp)
  811af4:	df000a17 	ldw	fp,40(sp)
  811af8:	ddc00917 	ldw	r23,36(sp)
  811afc:	dd800817 	ldw	r22,32(sp)
  811b00:	dd400717 	ldw	r21,28(sp)
  811b04:	dd000617 	ldw	r20,24(sp)
  811b08:	dcc00517 	ldw	r19,20(sp)
  811b0c:	dc800417 	ldw	r18,16(sp)
  811b10:	dc400317 	ldw	r17,12(sp)
  811b14:	dc000217 	ldw	r16,8(sp)
  811b18:	dec00c04 	addi	sp,sp,48
  811b1c:	f800283a 	ret
  811b20:	800b883a 	mov	r5,r16
  811b24:	a809883a 	mov	r4,r21
  811b28:	080b7c40 	call	80b7c4 <__swsetup_r>
  811b2c:	1000eb1e 	bne	r2,zero,811edc <__sfvwrite_r+0x4a4>
  811b30:	80c0030b 	ldhu	r3,12(r16)
  811b34:	a4400017 	ldw	r17,0(r20)
  811b38:	1880008c 	andi	r2,r3,2
  811b3c:	103fd61e 	bne	r2,zero,811a98 <__alt_mem_onchip_mem+0xff809a98>
  811b40:	1880004c 	andi	r2,r3,1
  811b44:	10003f1e 	bne	r2,zero,811c44 <__sfvwrite_r+0x20c>
  811b48:	0039883a 	mov	fp,zero
  811b4c:	0025883a 	mov	r18,zero
  811b50:	90001a26 	beq	r18,zero,811bbc <__sfvwrite_r+0x184>
  811b54:	1880800c 	andi	r2,r3,512
  811b58:	84c00217 	ldw	r19,8(r16)
  811b5c:	10002126 	beq	r2,zero,811be4 <__sfvwrite_r+0x1ac>
  811b60:	982f883a 	mov	r23,r19
  811b64:	94c09336 	bltu	r18,r19,811db4 <__sfvwrite_r+0x37c>
  811b68:	1881200c 	andi	r2,r3,1152
  811b6c:	10009e1e 	bne	r2,zero,811de8 <__sfvwrite_r+0x3b0>
  811b70:	81000017 	ldw	r4,0(r16)
  811b74:	b80d883a 	mov	r6,r23
  811b78:	e00b883a 	mov	r5,fp
  811b7c:	0811fa80 	call	811fa8 <memmove>
  811b80:	80c00217 	ldw	r3,8(r16)
  811b84:	81000017 	ldw	r4,0(r16)
  811b88:	9005883a 	mov	r2,r18
  811b8c:	1ce7c83a 	sub	r19,r3,r19
  811b90:	25cf883a 	add	r7,r4,r23
  811b94:	84c00215 	stw	r19,8(r16)
  811b98:	81c00015 	stw	r7,0(r16)
  811b9c:	a0c00217 	ldw	r3,8(r20)
  811ba0:	e0b9883a 	add	fp,fp,r2
  811ba4:	90a5c83a 	sub	r18,r18,r2
  811ba8:	18a7c83a 	sub	r19,r3,r2
  811bac:	a4c00215 	stw	r19,8(r20)
  811bb0:	983fce26 	beq	r19,zero,811aec <__alt_mem_onchip_mem+0xff809aec>
  811bb4:	80c0030b 	ldhu	r3,12(r16)
  811bb8:	903fe61e 	bne	r18,zero,811b54 <__alt_mem_onchip_mem+0xff809b54>
  811bbc:	8f000017 	ldw	fp,0(r17)
  811bc0:	8c800117 	ldw	r18,4(r17)
  811bc4:	8c400204 	addi	r17,r17,8
  811bc8:	003fe106 	br	811b50 <__alt_mem_onchip_mem+0xff809b50>
  811bcc:	8cc00017 	ldw	r19,0(r17)
  811bd0:	8c800117 	ldw	r18,4(r17)
  811bd4:	8c400204 	addi	r17,r17,8
  811bd8:	003fb306 	br	811aa8 <__alt_mem_onchip_mem+0xff809aa8>
  811bdc:	0005883a 	mov	r2,zero
  811be0:	f800283a 	ret
  811be4:	81000017 	ldw	r4,0(r16)
  811be8:	80800417 	ldw	r2,16(r16)
  811bec:	11005736 	bltu	r2,r4,811d4c <__sfvwrite_r+0x314>
  811bf0:	85c00517 	ldw	r23,20(r16)
  811bf4:	95c05536 	bltu	r18,r23,811d4c <__sfvwrite_r+0x314>
  811bf8:	00a00034 	movhi	r2,32768
  811bfc:	10bfffc4 	addi	r2,r2,-1
  811c00:	9009883a 	mov	r4,r18
  811c04:	1480012e 	bgeu	r2,r18,811c0c <__sfvwrite_r+0x1d4>
  811c08:	1009883a 	mov	r4,r2
  811c0c:	b80b883a 	mov	r5,r23
  811c10:	08134b80 	call	8134b8 <__divsi3>
  811c14:	15cf383a 	mul	r7,r2,r23
  811c18:	81400717 	ldw	r5,28(r16)
  811c1c:	80800917 	ldw	r2,36(r16)
  811c20:	e00d883a 	mov	r6,fp
  811c24:	a809883a 	mov	r4,r21
  811c28:	103ee83a 	callr	r2
  811c2c:	00bfdb16 	blt	zero,r2,811b9c <__alt_mem_onchip_mem+0xff809b9c>
  811c30:	8080030b 	ldhu	r2,12(r16)
  811c34:	10801014 	ori	r2,r2,64
  811c38:	8080030d 	sth	r2,12(r16)
  811c3c:	00bfffc4 	movi	r2,-1
  811c40:	003fab06 	br	811af0 <__alt_mem_onchip_mem+0xff809af0>
  811c44:	0027883a 	mov	r19,zero
  811c48:	0011883a 	mov	r8,zero
  811c4c:	0039883a 	mov	fp,zero
  811c50:	0025883a 	mov	r18,zero
  811c54:	90001f26 	beq	r18,zero,811cd4 <__sfvwrite_r+0x29c>
  811c58:	40005a26 	beq	r8,zero,811dc4 <__sfvwrite_r+0x38c>
  811c5c:	982d883a 	mov	r22,r19
  811c60:	94c0012e 	bgeu	r18,r19,811c68 <__sfvwrite_r+0x230>
  811c64:	902d883a 	mov	r22,r18
  811c68:	81000017 	ldw	r4,0(r16)
  811c6c:	80800417 	ldw	r2,16(r16)
  811c70:	b02f883a 	mov	r23,r22
  811c74:	81c00517 	ldw	r7,20(r16)
  811c78:	1100032e 	bgeu	r2,r4,811c88 <__sfvwrite_r+0x250>
  811c7c:	80c00217 	ldw	r3,8(r16)
  811c80:	38c7883a 	add	r3,r7,r3
  811c84:	1d801816 	blt	r3,r22,811ce8 <__sfvwrite_r+0x2b0>
  811c88:	b1c03e16 	blt	r22,r7,811d84 <__sfvwrite_r+0x34c>
  811c8c:	80800917 	ldw	r2,36(r16)
  811c90:	81400717 	ldw	r5,28(r16)
  811c94:	e00d883a 	mov	r6,fp
  811c98:	da000115 	stw	r8,4(sp)
  811c9c:	a809883a 	mov	r4,r21
  811ca0:	103ee83a 	callr	r2
  811ca4:	102f883a 	mov	r23,r2
  811ca8:	da000117 	ldw	r8,4(sp)
  811cac:	00bfe00e 	bge	zero,r2,811c30 <__alt_mem_onchip_mem+0xff809c30>
  811cb0:	9de7c83a 	sub	r19,r19,r23
  811cb4:	98001f26 	beq	r19,zero,811d34 <__sfvwrite_r+0x2fc>
  811cb8:	a0800217 	ldw	r2,8(r20)
  811cbc:	e5f9883a 	add	fp,fp,r23
  811cc0:	95e5c83a 	sub	r18,r18,r23
  811cc4:	15efc83a 	sub	r23,r2,r23
  811cc8:	a5c00215 	stw	r23,8(r20)
  811ccc:	b83f8726 	beq	r23,zero,811aec <__alt_mem_onchip_mem+0xff809aec>
  811cd0:	903fe11e 	bne	r18,zero,811c58 <__alt_mem_onchip_mem+0xff809c58>
  811cd4:	8f000017 	ldw	fp,0(r17)
  811cd8:	8c800117 	ldw	r18,4(r17)
  811cdc:	0011883a 	mov	r8,zero
  811ce0:	8c400204 	addi	r17,r17,8
  811ce4:	003fdb06 	br	811c54 <__alt_mem_onchip_mem+0xff809c54>
  811ce8:	180d883a 	mov	r6,r3
  811cec:	e00b883a 	mov	r5,fp
  811cf0:	da000115 	stw	r8,4(sp)
  811cf4:	d8c00015 	stw	r3,0(sp)
  811cf8:	0811fa80 	call	811fa8 <memmove>
  811cfc:	d8c00017 	ldw	r3,0(sp)
  811d00:	80800017 	ldw	r2,0(r16)
  811d04:	800b883a 	mov	r5,r16
  811d08:	a809883a 	mov	r4,r21
  811d0c:	10c5883a 	add	r2,r2,r3
  811d10:	80800015 	stw	r2,0(r16)
  811d14:	d8c00015 	stw	r3,0(sp)
  811d18:	080d3bc0 	call	80d3bc <_fflush_r>
  811d1c:	d8c00017 	ldw	r3,0(sp)
  811d20:	da000117 	ldw	r8,4(sp)
  811d24:	103fc21e 	bne	r2,zero,811c30 <__alt_mem_onchip_mem+0xff809c30>
  811d28:	182f883a 	mov	r23,r3
  811d2c:	9de7c83a 	sub	r19,r19,r23
  811d30:	983fe11e 	bne	r19,zero,811cb8 <__alt_mem_onchip_mem+0xff809cb8>
  811d34:	800b883a 	mov	r5,r16
  811d38:	a809883a 	mov	r4,r21
  811d3c:	080d3bc0 	call	80d3bc <_fflush_r>
  811d40:	103fbb1e 	bne	r2,zero,811c30 <__alt_mem_onchip_mem+0xff809c30>
  811d44:	0011883a 	mov	r8,zero
  811d48:	003fdb06 	br	811cb8 <__alt_mem_onchip_mem+0xff809cb8>
  811d4c:	94c0012e 	bgeu	r18,r19,811d54 <__sfvwrite_r+0x31c>
  811d50:	9027883a 	mov	r19,r18
  811d54:	980d883a 	mov	r6,r19
  811d58:	e00b883a 	mov	r5,fp
  811d5c:	0811fa80 	call	811fa8 <memmove>
  811d60:	80800217 	ldw	r2,8(r16)
  811d64:	80c00017 	ldw	r3,0(r16)
  811d68:	14c5c83a 	sub	r2,r2,r19
  811d6c:	1cc7883a 	add	r3,r3,r19
  811d70:	80800215 	stw	r2,8(r16)
  811d74:	80c00015 	stw	r3,0(r16)
  811d78:	10004326 	beq	r2,zero,811e88 <__sfvwrite_r+0x450>
  811d7c:	9805883a 	mov	r2,r19
  811d80:	003f8606 	br	811b9c <__alt_mem_onchip_mem+0xff809b9c>
  811d84:	b00d883a 	mov	r6,r22
  811d88:	e00b883a 	mov	r5,fp
  811d8c:	da000115 	stw	r8,4(sp)
  811d90:	0811fa80 	call	811fa8 <memmove>
  811d94:	80800217 	ldw	r2,8(r16)
  811d98:	80c00017 	ldw	r3,0(r16)
  811d9c:	da000117 	ldw	r8,4(sp)
  811da0:	1585c83a 	sub	r2,r2,r22
  811da4:	1dad883a 	add	r22,r3,r22
  811da8:	80800215 	stw	r2,8(r16)
  811dac:	85800015 	stw	r22,0(r16)
  811db0:	003fbf06 	br	811cb0 <__alt_mem_onchip_mem+0xff809cb0>
  811db4:	81000017 	ldw	r4,0(r16)
  811db8:	9027883a 	mov	r19,r18
  811dbc:	902f883a 	mov	r23,r18
  811dc0:	003f6c06 	br	811b74 <__alt_mem_onchip_mem+0xff809b74>
  811dc4:	900d883a 	mov	r6,r18
  811dc8:	01400284 	movi	r5,10
  811dcc:	e009883a 	mov	r4,fp
  811dd0:	080e8480 	call	80e848 <memchr>
  811dd4:	10003e26 	beq	r2,zero,811ed0 <__sfvwrite_r+0x498>
  811dd8:	10800044 	addi	r2,r2,1
  811ddc:	1727c83a 	sub	r19,r2,fp
  811de0:	02000044 	movi	r8,1
  811de4:	003f9d06 	br	811c5c <__alt_mem_onchip_mem+0xff809c5c>
  811de8:	80800517 	ldw	r2,20(r16)
  811dec:	81400417 	ldw	r5,16(r16)
  811df0:	81c00017 	ldw	r7,0(r16)
  811df4:	10a7883a 	add	r19,r2,r2
  811df8:	9885883a 	add	r2,r19,r2
  811dfc:	1026d7fa 	srli	r19,r2,31
  811e00:	396dc83a 	sub	r22,r7,r5
  811e04:	b1000044 	addi	r4,r22,1
  811e08:	9885883a 	add	r2,r19,r2
  811e0c:	1027d07a 	srai	r19,r2,1
  811e10:	2485883a 	add	r2,r4,r18
  811e14:	980d883a 	mov	r6,r19
  811e18:	9880022e 	bgeu	r19,r2,811e24 <__sfvwrite_r+0x3ec>
  811e1c:	1027883a 	mov	r19,r2
  811e20:	100d883a 	mov	r6,r2
  811e24:	18c1000c 	andi	r3,r3,1024
  811e28:	18001c26 	beq	r3,zero,811e9c <__sfvwrite_r+0x464>
  811e2c:	300b883a 	mov	r5,r6
  811e30:	a809883a 	mov	r4,r21
  811e34:	080e03c0 	call	80e03c <_malloc_r>
  811e38:	102f883a 	mov	r23,r2
  811e3c:	10002926 	beq	r2,zero,811ee4 <__sfvwrite_r+0x4ac>
  811e40:	81400417 	ldw	r5,16(r16)
  811e44:	b00d883a 	mov	r6,r22
  811e48:	1009883a 	mov	r4,r2
  811e4c:	080e92c0 	call	80e92c <memcpy>
  811e50:	8080030b 	ldhu	r2,12(r16)
  811e54:	00fedfc4 	movi	r3,-1153
  811e58:	10c4703a 	and	r2,r2,r3
  811e5c:	10802014 	ori	r2,r2,128
  811e60:	8080030d 	sth	r2,12(r16)
  811e64:	bd89883a 	add	r4,r23,r22
  811e68:	9d8fc83a 	sub	r7,r19,r22
  811e6c:	85c00415 	stw	r23,16(r16)
  811e70:	84c00515 	stw	r19,20(r16)
  811e74:	81000015 	stw	r4,0(r16)
  811e78:	9027883a 	mov	r19,r18
  811e7c:	81c00215 	stw	r7,8(r16)
  811e80:	902f883a 	mov	r23,r18
  811e84:	003f3b06 	br	811b74 <__alt_mem_onchip_mem+0xff809b74>
  811e88:	800b883a 	mov	r5,r16
  811e8c:	a809883a 	mov	r4,r21
  811e90:	080d3bc0 	call	80d3bc <_fflush_r>
  811e94:	103fb926 	beq	r2,zero,811d7c <__alt_mem_onchip_mem+0xff809d7c>
  811e98:	003f6506 	br	811c30 <__alt_mem_onchip_mem+0xff809c30>
  811e9c:	a809883a 	mov	r4,r21
  811ea0:	08121640 	call	812164 <_realloc_r>
  811ea4:	102f883a 	mov	r23,r2
  811ea8:	103fee1e 	bne	r2,zero,811e64 <__alt_mem_onchip_mem+0xff809e64>
  811eac:	81400417 	ldw	r5,16(r16)
  811eb0:	a809883a 	mov	r4,r21
  811eb4:	080d90c0 	call	80d90c <_free_r>
  811eb8:	8080030b 	ldhu	r2,12(r16)
  811ebc:	00ffdfc4 	movi	r3,-129
  811ec0:	1884703a 	and	r2,r3,r2
  811ec4:	00c00304 	movi	r3,12
  811ec8:	a8c00015 	stw	r3,0(r21)
  811ecc:	003f5906 	br	811c34 <__alt_mem_onchip_mem+0xff809c34>
  811ed0:	94c00044 	addi	r19,r18,1
  811ed4:	02000044 	movi	r8,1
  811ed8:	003f6006 	br	811c5c <__alt_mem_onchip_mem+0xff809c5c>
  811edc:	00bfffc4 	movi	r2,-1
  811ee0:	003f0306 	br	811af0 <__alt_mem_onchip_mem+0xff809af0>
  811ee4:	00800304 	movi	r2,12
  811ee8:	a8800015 	stw	r2,0(r21)
  811eec:	8080030b 	ldhu	r2,12(r16)
  811ef0:	003f5006 	br	811c34 <__alt_mem_onchip_mem+0xff809c34>

00811ef4 <_isatty_r>:
  811ef4:	defffd04 	addi	sp,sp,-12
  811ef8:	dc000015 	stw	r16,0(sp)
  811efc:	040020b4 	movhi	r16,130
  811f00:	dc400115 	stw	r17,4(sp)
  811f04:	84304104 	addi	r16,r16,-16124
  811f08:	2023883a 	mov	r17,r4
  811f0c:	2809883a 	mov	r4,r5
  811f10:	dfc00215 	stw	ra,8(sp)
  811f14:	80000015 	stw	zero,0(r16)
  811f18:	08142bc0 	call	8142bc <isatty>
  811f1c:	00ffffc4 	movi	r3,-1
  811f20:	10c00526 	beq	r2,r3,811f38 <_isatty_r+0x44>
  811f24:	dfc00217 	ldw	ra,8(sp)
  811f28:	dc400117 	ldw	r17,4(sp)
  811f2c:	dc000017 	ldw	r16,0(sp)
  811f30:	dec00304 	addi	sp,sp,12
  811f34:	f800283a 	ret
  811f38:	80c00017 	ldw	r3,0(r16)
  811f3c:	183ff926 	beq	r3,zero,811f24 <__alt_mem_onchip_mem+0xff809f24>
  811f40:	88c00015 	stw	r3,0(r17)
  811f44:	003ff706 	br	811f24 <__alt_mem_onchip_mem+0xff809f24>

00811f48 <_lseek_r>:
  811f48:	defffd04 	addi	sp,sp,-12
  811f4c:	2805883a 	mov	r2,r5
  811f50:	dc000015 	stw	r16,0(sp)
  811f54:	040020b4 	movhi	r16,130
  811f58:	dc400115 	stw	r17,4(sp)
  811f5c:	300b883a 	mov	r5,r6
  811f60:	84304104 	addi	r16,r16,-16124
  811f64:	2023883a 	mov	r17,r4
  811f68:	380d883a 	mov	r6,r7
  811f6c:	1009883a 	mov	r4,r2
  811f70:	dfc00215 	stw	ra,8(sp)
  811f74:	80000015 	stw	zero,0(r16)
  811f78:	08144880 	call	814488 <lseek>
  811f7c:	00ffffc4 	movi	r3,-1
  811f80:	10c00526 	beq	r2,r3,811f98 <_lseek_r+0x50>
  811f84:	dfc00217 	ldw	ra,8(sp)
  811f88:	dc400117 	ldw	r17,4(sp)
  811f8c:	dc000017 	ldw	r16,0(sp)
  811f90:	dec00304 	addi	sp,sp,12
  811f94:	f800283a 	ret
  811f98:	80c00017 	ldw	r3,0(r16)
  811f9c:	183ff926 	beq	r3,zero,811f84 <__alt_mem_onchip_mem+0xff809f84>
  811fa0:	88c00015 	stw	r3,0(r17)
  811fa4:	003ff706 	br	811f84 <__alt_mem_onchip_mem+0xff809f84>

00811fa8 <memmove>:
  811fa8:	2005883a 	mov	r2,r4
  811fac:	29000b2e 	bgeu	r5,r4,811fdc <memmove+0x34>
  811fb0:	298f883a 	add	r7,r5,r6
  811fb4:	21c0092e 	bgeu	r4,r7,811fdc <memmove+0x34>
  811fb8:	2187883a 	add	r3,r4,r6
  811fbc:	198bc83a 	sub	r5,r3,r6
  811fc0:	30004826 	beq	r6,zero,8120e4 <memmove+0x13c>
  811fc4:	39ffffc4 	addi	r7,r7,-1
  811fc8:	39000003 	ldbu	r4,0(r7)
  811fcc:	18ffffc4 	addi	r3,r3,-1
  811fd0:	19000005 	stb	r4,0(r3)
  811fd4:	28fffb1e 	bne	r5,r3,811fc4 <__alt_mem_onchip_mem+0xff809fc4>
  811fd8:	f800283a 	ret
  811fdc:	00c003c4 	movi	r3,15
  811fe0:	1980412e 	bgeu	r3,r6,8120e8 <memmove+0x140>
  811fe4:	2886b03a 	or	r3,r5,r2
  811fe8:	18c000cc 	andi	r3,r3,3
  811fec:	1800401e 	bne	r3,zero,8120f0 <memmove+0x148>
  811ff0:	33fffc04 	addi	r15,r6,-16
  811ff4:	781ed13a 	srli	r15,r15,4
  811ff8:	28c00104 	addi	r3,r5,4
  811ffc:	13400104 	addi	r13,r2,4
  812000:	781c913a 	slli	r14,r15,4
  812004:	2b000204 	addi	r12,r5,8
  812008:	12c00204 	addi	r11,r2,8
  81200c:	73800504 	addi	r14,r14,20
  812010:	2a800304 	addi	r10,r5,12
  812014:	12400304 	addi	r9,r2,12
  812018:	2b9d883a 	add	r14,r5,r14
  81201c:	2811883a 	mov	r8,r5
  812020:	100f883a 	mov	r7,r2
  812024:	41000017 	ldw	r4,0(r8)
  812028:	39c00404 	addi	r7,r7,16
  81202c:	18c00404 	addi	r3,r3,16
  812030:	393ffc15 	stw	r4,-16(r7)
  812034:	193ffc17 	ldw	r4,-16(r3)
  812038:	6b400404 	addi	r13,r13,16
  81203c:	5ac00404 	addi	r11,r11,16
  812040:	693ffc15 	stw	r4,-16(r13)
  812044:	61000017 	ldw	r4,0(r12)
  812048:	4a400404 	addi	r9,r9,16
  81204c:	42000404 	addi	r8,r8,16
  812050:	593ffc15 	stw	r4,-16(r11)
  812054:	51000017 	ldw	r4,0(r10)
  812058:	63000404 	addi	r12,r12,16
  81205c:	52800404 	addi	r10,r10,16
  812060:	493ffc15 	stw	r4,-16(r9)
  812064:	1bbfef1e 	bne	r3,r14,812024 <__alt_mem_onchip_mem+0xff80a024>
  812068:	79000044 	addi	r4,r15,1
  81206c:	2008913a 	slli	r4,r4,4
  812070:	328003cc 	andi	r10,r6,15
  812074:	02c000c4 	movi	r11,3
  812078:	1107883a 	add	r3,r2,r4
  81207c:	290b883a 	add	r5,r5,r4
  812080:	5a801e2e 	bgeu	r11,r10,8120fc <memmove+0x154>
  812084:	1813883a 	mov	r9,r3
  812088:	2811883a 	mov	r8,r5
  81208c:	500f883a 	mov	r7,r10
  812090:	41000017 	ldw	r4,0(r8)
  812094:	4a400104 	addi	r9,r9,4
  812098:	39ffff04 	addi	r7,r7,-4
  81209c:	493fff15 	stw	r4,-4(r9)
  8120a0:	42000104 	addi	r8,r8,4
  8120a4:	59fffa36 	bltu	r11,r7,812090 <__alt_mem_onchip_mem+0xff80a090>
  8120a8:	513fff04 	addi	r4,r10,-4
  8120ac:	2008d0ba 	srli	r4,r4,2
  8120b0:	318000cc 	andi	r6,r6,3
  8120b4:	21000044 	addi	r4,r4,1
  8120b8:	2109883a 	add	r4,r4,r4
  8120bc:	2109883a 	add	r4,r4,r4
  8120c0:	1907883a 	add	r3,r3,r4
  8120c4:	290b883a 	add	r5,r5,r4
  8120c8:	30000b26 	beq	r6,zero,8120f8 <memmove+0x150>
  8120cc:	198d883a 	add	r6,r3,r6
  8120d0:	29c00003 	ldbu	r7,0(r5)
  8120d4:	18c00044 	addi	r3,r3,1
  8120d8:	29400044 	addi	r5,r5,1
  8120dc:	19ffffc5 	stb	r7,-1(r3)
  8120e0:	19bffb1e 	bne	r3,r6,8120d0 <__alt_mem_onchip_mem+0xff80a0d0>
  8120e4:	f800283a 	ret
  8120e8:	1007883a 	mov	r3,r2
  8120ec:	003ff606 	br	8120c8 <__alt_mem_onchip_mem+0xff80a0c8>
  8120f0:	1007883a 	mov	r3,r2
  8120f4:	003ff506 	br	8120cc <__alt_mem_onchip_mem+0xff80a0cc>
  8120f8:	f800283a 	ret
  8120fc:	500d883a 	mov	r6,r10
  812100:	003ff106 	br	8120c8 <__alt_mem_onchip_mem+0xff80a0c8>

00812104 <_read_r>:
  812104:	defffd04 	addi	sp,sp,-12
  812108:	2805883a 	mov	r2,r5
  81210c:	dc000015 	stw	r16,0(sp)
  812110:	040020b4 	movhi	r16,130
  812114:	dc400115 	stw	r17,4(sp)
  812118:	300b883a 	mov	r5,r6
  81211c:	84304104 	addi	r16,r16,-16124
  812120:	2023883a 	mov	r17,r4
  812124:	380d883a 	mov	r6,r7
  812128:	1009883a 	mov	r4,r2
  81212c:	dfc00215 	stw	ra,8(sp)
  812130:	80000015 	stw	zero,0(r16)
  812134:	081465c0 	call	81465c <read>
  812138:	00ffffc4 	movi	r3,-1
  81213c:	10c00526 	beq	r2,r3,812154 <_read_r+0x50>
  812140:	dfc00217 	ldw	ra,8(sp)
  812144:	dc400117 	ldw	r17,4(sp)
  812148:	dc000017 	ldw	r16,0(sp)
  81214c:	dec00304 	addi	sp,sp,12
  812150:	f800283a 	ret
  812154:	80c00017 	ldw	r3,0(r16)
  812158:	183ff926 	beq	r3,zero,812140 <__alt_mem_onchip_mem+0xff80a140>
  81215c:	88c00015 	stw	r3,0(r17)
  812160:	003ff706 	br	812140 <__alt_mem_onchip_mem+0xff80a140>

00812164 <_realloc_r>:
  812164:	defff604 	addi	sp,sp,-40
  812168:	dc800215 	stw	r18,8(sp)
  81216c:	dfc00915 	stw	ra,36(sp)
  812170:	df000815 	stw	fp,32(sp)
  812174:	ddc00715 	stw	r23,28(sp)
  812178:	dd800615 	stw	r22,24(sp)
  81217c:	dd400515 	stw	r21,20(sp)
  812180:	dd000415 	stw	r20,16(sp)
  812184:	dcc00315 	stw	r19,12(sp)
  812188:	dc400115 	stw	r17,4(sp)
  81218c:	dc000015 	stw	r16,0(sp)
  812190:	3025883a 	mov	r18,r6
  812194:	2800b726 	beq	r5,zero,812474 <_realloc_r+0x310>
  812198:	282b883a 	mov	r21,r5
  81219c:	2029883a 	mov	r20,r4
  8121a0:	08145d80 	call	8145d8 <__malloc_lock>
  8121a4:	a8bfff17 	ldw	r2,-4(r21)
  8121a8:	043fff04 	movi	r16,-4
  8121ac:	90c002c4 	addi	r3,r18,11
  8121b0:	01000584 	movi	r4,22
  8121b4:	acfffe04 	addi	r19,r21,-8
  8121b8:	1420703a 	and	r16,r2,r16
  8121bc:	20c0332e 	bgeu	r4,r3,81228c <_realloc_r+0x128>
  8121c0:	047ffe04 	movi	r17,-8
  8121c4:	1c62703a 	and	r17,r3,r17
  8121c8:	8807883a 	mov	r3,r17
  8121cc:	88005816 	blt	r17,zero,812330 <_realloc_r+0x1cc>
  8121d0:	8c805736 	bltu	r17,r18,812330 <_realloc_r+0x1cc>
  8121d4:	80c0300e 	bge	r16,r3,812298 <_realloc_r+0x134>
  8121d8:	070020b4 	movhi	fp,130
  8121dc:	e722f204 	addi	fp,fp,-29752
  8121e0:	e1c00217 	ldw	r7,8(fp)
  8121e4:	9c09883a 	add	r4,r19,r16
  8121e8:	22000117 	ldw	r8,4(r4)
  8121ec:	21c06326 	beq	r4,r7,81237c <_realloc_r+0x218>
  8121f0:	017fff84 	movi	r5,-2
  8121f4:	414a703a 	and	r5,r8,r5
  8121f8:	214b883a 	add	r5,r4,r5
  8121fc:	29800117 	ldw	r6,4(r5)
  812200:	3180004c 	andi	r6,r6,1
  812204:	30003f26 	beq	r6,zero,812304 <_realloc_r+0x1a0>
  812208:	1080004c 	andi	r2,r2,1
  81220c:	10008326 	beq	r2,zero,81241c <_realloc_r+0x2b8>
  812210:	900b883a 	mov	r5,r18
  812214:	a009883a 	mov	r4,r20
  812218:	080e03c0 	call	80e03c <_malloc_r>
  81221c:	1025883a 	mov	r18,r2
  812220:	10011e26 	beq	r2,zero,81269c <_realloc_r+0x538>
  812224:	a93fff17 	ldw	r4,-4(r21)
  812228:	10fffe04 	addi	r3,r2,-8
  81222c:	00bfff84 	movi	r2,-2
  812230:	2084703a 	and	r2,r4,r2
  812234:	9885883a 	add	r2,r19,r2
  812238:	1880ee26 	beq	r3,r2,8125f4 <_realloc_r+0x490>
  81223c:	81bfff04 	addi	r6,r16,-4
  812240:	00800904 	movi	r2,36
  812244:	1180b836 	bltu	r2,r6,812528 <_realloc_r+0x3c4>
  812248:	00c004c4 	movi	r3,19
  81224c:	19809636 	bltu	r3,r6,8124a8 <_realloc_r+0x344>
  812250:	9005883a 	mov	r2,r18
  812254:	a807883a 	mov	r3,r21
  812258:	19000017 	ldw	r4,0(r3)
  81225c:	11000015 	stw	r4,0(r2)
  812260:	19000117 	ldw	r4,4(r3)
  812264:	11000115 	stw	r4,4(r2)
  812268:	18c00217 	ldw	r3,8(r3)
  81226c:	10c00215 	stw	r3,8(r2)
  812270:	a80b883a 	mov	r5,r21
  812274:	a009883a 	mov	r4,r20
  812278:	080d90c0 	call	80d90c <_free_r>
  81227c:	a009883a 	mov	r4,r20
  812280:	08145fc0 	call	8145fc <__malloc_unlock>
  812284:	9005883a 	mov	r2,r18
  812288:	00001206 	br	8122d4 <_realloc_r+0x170>
  81228c:	00c00404 	movi	r3,16
  812290:	1823883a 	mov	r17,r3
  812294:	003fce06 	br	8121d0 <__alt_mem_onchip_mem+0xff80a1d0>
  812298:	a825883a 	mov	r18,r21
  81229c:	8445c83a 	sub	r2,r16,r17
  8122a0:	00c003c4 	movi	r3,15
  8122a4:	18802636 	bltu	r3,r2,812340 <_realloc_r+0x1dc>
  8122a8:	99800117 	ldw	r6,4(r19)
  8122ac:	9c07883a 	add	r3,r19,r16
  8122b0:	3180004c 	andi	r6,r6,1
  8122b4:	3420b03a 	or	r16,r6,r16
  8122b8:	9c000115 	stw	r16,4(r19)
  8122bc:	18800117 	ldw	r2,4(r3)
  8122c0:	10800054 	ori	r2,r2,1
  8122c4:	18800115 	stw	r2,4(r3)
  8122c8:	a009883a 	mov	r4,r20
  8122cc:	08145fc0 	call	8145fc <__malloc_unlock>
  8122d0:	9005883a 	mov	r2,r18
  8122d4:	dfc00917 	ldw	ra,36(sp)
  8122d8:	df000817 	ldw	fp,32(sp)
  8122dc:	ddc00717 	ldw	r23,28(sp)
  8122e0:	dd800617 	ldw	r22,24(sp)
  8122e4:	dd400517 	ldw	r21,20(sp)
  8122e8:	dd000417 	ldw	r20,16(sp)
  8122ec:	dcc00317 	ldw	r19,12(sp)
  8122f0:	dc800217 	ldw	r18,8(sp)
  8122f4:	dc400117 	ldw	r17,4(sp)
  8122f8:	dc000017 	ldw	r16,0(sp)
  8122fc:	dec00a04 	addi	sp,sp,40
  812300:	f800283a 	ret
  812304:	017fff04 	movi	r5,-4
  812308:	414a703a 	and	r5,r8,r5
  81230c:	814d883a 	add	r6,r16,r5
  812310:	30c01f16 	blt	r6,r3,812390 <_realloc_r+0x22c>
  812314:	20800317 	ldw	r2,12(r4)
  812318:	20c00217 	ldw	r3,8(r4)
  81231c:	a825883a 	mov	r18,r21
  812320:	3021883a 	mov	r16,r6
  812324:	18800315 	stw	r2,12(r3)
  812328:	10c00215 	stw	r3,8(r2)
  81232c:	003fdb06 	br	81229c <__alt_mem_onchip_mem+0xff80a29c>
  812330:	00800304 	movi	r2,12
  812334:	a0800015 	stw	r2,0(r20)
  812338:	0005883a 	mov	r2,zero
  81233c:	003fe506 	br	8122d4 <__alt_mem_onchip_mem+0xff80a2d4>
  812340:	98c00117 	ldw	r3,4(r19)
  812344:	9c4b883a 	add	r5,r19,r17
  812348:	11000054 	ori	r4,r2,1
  81234c:	18c0004c 	andi	r3,r3,1
  812350:	1c62b03a 	or	r17,r3,r17
  812354:	9c400115 	stw	r17,4(r19)
  812358:	29000115 	stw	r4,4(r5)
  81235c:	2885883a 	add	r2,r5,r2
  812360:	10c00117 	ldw	r3,4(r2)
  812364:	29400204 	addi	r5,r5,8
  812368:	a009883a 	mov	r4,r20
  81236c:	18c00054 	ori	r3,r3,1
  812370:	10c00115 	stw	r3,4(r2)
  812374:	080d90c0 	call	80d90c <_free_r>
  812378:	003fd306 	br	8122c8 <__alt_mem_onchip_mem+0xff80a2c8>
  81237c:	017fff04 	movi	r5,-4
  812380:	414a703a 	and	r5,r8,r5
  812384:	89800404 	addi	r6,r17,16
  812388:	8151883a 	add	r8,r16,r5
  81238c:	4180590e 	bge	r8,r6,8124f4 <_realloc_r+0x390>
  812390:	1080004c 	andi	r2,r2,1
  812394:	103f9e1e 	bne	r2,zero,812210 <__alt_mem_onchip_mem+0xff80a210>
  812398:	adbffe17 	ldw	r22,-8(r21)
  81239c:	00bfff04 	movi	r2,-4
  8123a0:	9dadc83a 	sub	r22,r19,r22
  8123a4:	b1800117 	ldw	r6,4(r22)
  8123a8:	3084703a 	and	r2,r6,r2
  8123ac:	20002026 	beq	r4,zero,812430 <_realloc_r+0x2cc>
  8123b0:	80af883a 	add	r23,r16,r2
  8123b4:	b96f883a 	add	r23,r23,r5
  8123b8:	21c05f26 	beq	r4,r7,812538 <_realloc_r+0x3d4>
  8123bc:	b8c01c16 	blt	r23,r3,812430 <_realloc_r+0x2cc>
  8123c0:	20800317 	ldw	r2,12(r4)
  8123c4:	20c00217 	ldw	r3,8(r4)
  8123c8:	81bfff04 	addi	r6,r16,-4
  8123cc:	01000904 	movi	r4,36
  8123d0:	18800315 	stw	r2,12(r3)
  8123d4:	10c00215 	stw	r3,8(r2)
  8123d8:	b0c00217 	ldw	r3,8(r22)
  8123dc:	b0800317 	ldw	r2,12(r22)
  8123e0:	b4800204 	addi	r18,r22,8
  8123e4:	18800315 	stw	r2,12(r3)
  8123e8:	10c00215 	stw	r3,8(r2)
  8123ec:	21801b36 	bltu	r4,r6,81245c <_realloc_r+0x2f8>
  8123f0:	008004c4 	movi	r2,19
  8123f4:	1180352e 	bgeu	r2,r6,8124cc <_realloc_r+0x368>
  8123f8:	a8800017 	ldw	r2,0(r21)
  8123fc:	b0800215 	stw	r2,8(r22)
  812400:	a8800117 	ldw	r2,4(r21)
  812404:	b0800315 	stw	r2,12(r22)
  812408:	008006c4 	movi	r2,27
  81240c:	11807f36 	bltu	r2,r6,81260c <_realloc_r+0x4a8>
  812410:	b0800404 	addi	r2,r22,16
  812414:	ad400204 	addi	r21,r21,8
  812418:	00002d06 	br	8124d0 <_realloc_r+0x36c>
  81241c:	adbffe17 	ldw	r22,-8(r21)
  812420:	00bfff04 	movi	r2,-4
  812424:	9dadc83a 	sub	r22,r19,r22
  812428:	b1000117 	ldw	r4,4(r22)
  81242c:	2084703a 	and	r2,r4,r2
  812430:	b03f7726 	beq	r22,zero,812210 <__alt_mem_onchip_mem+0xff80a210>
  812434:	80af883a 	add	r23,r16,r2
  812438:	b8ff7516 	blt	r23,r3,812210 <__alt_mem_onchip_mem+0xff80a210>
  81243c:	b0800317 	ldw	r2,12(r22)
  812440:	b0c00217 	ldw	r3,8(r22)
  812444:	81bfff04 	addi	r6,r16,-4
  812448:	01000904 	movi	r4,36
  81244c:	18800315 	stw	r2,12(r3)
  812450:	10c00215 	stw	r3,8(r2)
  812454:	b4800204 	addi	r18,r22,8
  812458:	21bfe52e 	bgeu	r4,r6,8123f0 <__alt_mem_onchip_mem+0xff80a3f0>
  81245c:	a80b883a 	mov	r5,r21
  812460:	9009883a 	mov	r4,r18
  812464:	0811fa80 	call	811fa8 <memmove>
  812468:	b821883a 	mov	r16,r23
  81246c:	b027883a 	mov	r19,r22
  812470:	003f8a06 	br	81229c <__alt_mem_onchip_mem+0xff80a29c>
  812474:	300b883a 	mov	r5,r6
  812478:	dfc00917 	ldw	ra,36(sp)
  81247c:	df000817 	ldw	fp,32(sp)
  812480:	ddc00717 	ldw	r23,28(sp)
  812484:	dd800617 	ldw	r22,24(sp)
  812488:	dd400517 	ldw	r21,20(sp)
  81248c:	dd000417 	ldw	r20,16(sp)
  812490:	dcc00317 	ldw	r19,12(sp)
  812494:	dc800217 	ldw	r18,8(sp)
  812498:	dc400117 	ldw	r17,4(sp)
  81249c:	dc000017 	ldw	r16,0(sp)
  8124a0:	dec00a04 	addi	sp,sp,40
  8124a4:	080e03c1 	jmpi	80e03c <_malloc_r>
  8124a8:	a8c00017 	ldw	r3,0(r21)
  8124ac:	90c00015 	stw	r3,0(r18)
  8124b0:	a8c00117 	ldw	r3,4(r21)
  8124b4:	90c00115 	stw	r3,4(r18)
  8124b8:	00c006c4 	movi	r3,27
  8124bc:	19804536 	bltu	r3,r6,8125d4 <_realloc_r+0x470>
  8124c0:	90800204 	addi	r2,r18,8
  8124c4:	a8c00204 	addi	r3,r21,8
  8124c8:	003f6306 	br	812258 <__alt_mem_onchip_mem+0xff80a258>
  8124cc:	9005883a 	mov	r2,r18
  8124d0:	a8c00017 	ldw	r3,0(r21)
  8124d4:	b821883a 	mov	r16,r23
  8124d8:	b027883a 	mov	r19,r22
  8124dc:	10c00015 	stw	r3,0(r2)
  8124e0:	a8c00117 	ldw	r3,4(r21)
  8124e4:	10c00115 	stw	r3,4(r2)
  8124e8:	a8c00217 	ldw	r3,8(r21)
  8124ec:	10c00215 	stw	r3,8(r2)
  8124f0:	003f6a06 	br	81229c <__alt_mem_onchip_mem+0xff80a29c>
  8124f4:	9c67883a 	add	r19,r19,r17
  8124f8:	4445c83a 	sub	r2,r8,r17
  8124fc:	e4c00215 	stw	r19,8(fp)
  812500:	10800054 	ori	r2,r2,1
  812504:	98800115 	stw	r2,4(r19)
  812508:	a8bfff17 	ldw	r2,-4(r21)
  81250c:	a009883a 	mov	r4,r20
  812510:	1080004c 	andi	r2,r2,1
  812514:	1462b03a 	or	r17,r2,r17
  812518:	ac7fff15 	stw	r17,-4(r21)
  81251c:	08145fc0 	call	8145fc <__malloc_unlock>
  812520:	a805883a 	mov	r2,r21
  812524:	003f6b06 	br	8122d4 <__alt_mem_onchip_mem+0xff80a2d4>
  812528:	a80b883a 	mov	r5,r21
  81252c:	9009883a 	mov	r4,r18
  812530:	0811fa80 	call	811fa8 <memmove>
  812534:	003f4e06 	br	812270 <__alt_mem_onchip_mem+0xff80a270>
  812538:	89000404 	addi	r4,r17,16
  81253c:	b93fbc16 	blt	r23,r4,812430 <__alt_mem_onchip_mem+0xff80a430>
  812540:	b0800317 	ldw	r2,12(r22)
  812544:	b0c00217 	ldw	r3,8(r22)
  812548:	81bfff04 	addi	r6,r16,-4
  81254c:	01000904 	movi	r4,36
  812550:	18800315 	stw	r2,12(r3)
  812554:	10c00215 	stw	r3,8(r2)
  812558:	b4800204 	addi	r18,r22,8
  81255c:	21804336 	bltu	r4,r6,81266c <_realloc_r+0x508>
  812560:	008004c4 	movi	r2,19
  812564:	11803f2e 	bgeu	r2,r6,812664 <_realloc_r+0x500>
  812568:	a8800017 	ldw	r2,0(r21)
  81256c:	b0800215 	stw	r2,8(r22)
  812570:	a8800117 	ldw	r2,4(r21)
  812574:	b0800315 	stw	r2,12(r22)
  812578:	008006c4 	movi	r2,27
  81257c:	11803f36 	bltu	r2,r6,81267c <_realloc_r+0x518>
  812580:	b0800404 	addi	r2,r22,16
  812584:	ad400204 	addi	r21,r21,8
  812588:	a8c00017 	ldw	r3,0(r21)
  81258c:	10c00015 	stw	r3,0(r2)
  812590:	a8c00117 	ldw	r3,4(r21)
  812594:	10c00115 	stw	r3,4(r2)
  812598:	a8c00217 	ldw	r3,8(r21)
  81259c:	10c00215 	stw	r3,8(r2)
  8125a0:	b447883a 	add	r3,r22,r17
  8125a4:	bc45c83a 	sub	r2,r23,r17
  8125a8:	e0c00215 	stw	r3,8(fp)
  8125ac:	10800054 	ori	r2,r2,1
  8125b0:	18800115 	stw	r2,4(r3)
  8125b4:	b0800117 	ldw	r2,4(r22)
  8125b8:	a009883a 	mov	r4,r20
  8125bc:	1080004c 	andi	r2,r2,1
  8125c0:	1462b03a 	or	r17,r2,r17
  8125c4:	b4400115 	stw	r17,4(r22)
  8125c8:	08145fc0 	call	8145fc <__malloc_unlock>
  8125cc:	9005883a 	mov	r2,r18
  8125d0:	003f4006 	br	8122d4 <__alt_mem_onchip_mem+0xff80a2d4>
  8125d4:	a8c00217 	ldw	r3,8(r21)
  8125d8:	90c00215 	stw	r3,8(r18)
  8125dc:	a8c00317 	ldw	r3,12(r21)
  8125e0:	90c00315 	stw	r3,12(r18)
  8125e4:	30801126 	beq	r6,r2,81262c <_realloc_r+0x4c8>
  8125e8:	90800404 	addi	r2,r18,16
  8125ec:	a8c00404 	addi	r3,r21,16
  8125f0:	003f1906 	br	812258 <__alt_mem_onchip_mem+0xff80a258>
  8125f4:	90ffff17 	ldw	r3,-4(r18)
  8125f8:	00bfff04 	movi	r2,-4
  8125fc:	a825883a 	mov	r18,r21
  812600:	1884703a 	and	r2,r3,r2
  812604:	80a1883a 	add	r16,r16,r2
  812608:	003f2406 	br	81229c <__alt_mem_onchip_mem+0xff80a29c>
  81260c:	a8800217 	ldw	r2,8(r21)
  812610:	b0800415 	stw	r2,16(r22)
  812614:	a8800317 	ldw	r2,12(r21)
  812618:	b0800515 	stw	r2,20(r22)
  81261c:	31000a26 	beq	r6,r4,812648 <_realloc_r+0x4e4>
  812620:	b0800604 	addi	r2,r22,24
  812624:	ad400404 	addi	r21,r21,16
  812628:	003fa906 	br	8124d0 <__alt_mem_onchip_mem+0xff80a4d0>
  81262c:	a9000417 	ldw	r4,16(r21)
  812630:	90800604 	addi	r2,r18,24
  812634:	a8c00604 	addi	r3,r21,24
  812638:	91000415 	stw	r4,16(r18)
  81263c:	a9000517 	ldw	r4,20(r21)
  812640:	91000515 	stw	r4,20(r18)
  812644:	003f0406 	br	812258 <__alt_mem_onchip_mem+0xff80a258>
  812648:	a8c00417 	ldw	r3,16(r21)
  81264c:	ad400604 	addi	r21,r21,24
  812650:	b0800804 	addi	r2,r22,32
  812654:	b0c00615 	stw	r3,24(r22)
  812658:	a8ffff17 	ldw	r3,-4(r21)
  81265c:	b0c00715 	stw	r3,28(r22)
  812660:	003f9b06 	br	8124d0 <__alt_mem_onchip_mem+0xff80a4d0>
  812664:	9005883a 	mov	r2,r18
  812668:	003fc706 	br	812588 <__alt_mem_onchip_mem+0xff80a588>
  81266c:	a80b883a 	mov	r5,r21
  812670:	9009883a 	mov	r4,r18
  812674:	0811fa80 	call	811fa8 <memmove>
  812678:	003fc906 	br	8125a0 <__alt_mem_onchip_mem+0xff80a5a0>
  81267c:	a8800217 	ldw	r2,8(r21)
  812680:	b0800415 	stw	r2,16(r22)
  812684:	a8800317 	ldw	r2,12(r21)
  812688:	b0800515 	stw	r2,20(r22)
  81268c:	31000726 	beq	r6,r4,8126ac <_realloc_r+0x548>
  812690:	b0800604 	addi	r2,r22,24
  812694:	ad400404 	addi	r21,r21,16
  812698:	003fbb06 	br	812588 <__alt_mem_onchip_mem+0xff80a588>
  81269c:	a009883a 	mov	r4,r20
  8126a0:	08145fc0 	call	8145fc <__malloc_unlock>
  8126a4:	0005883a 	mov	r2,zero
  8126a8:	003f0a06 	br	8122d4 <__alt_mem_onchip_mem+0xff80a2d4>
  8126ac:	a8c00417 	ldw	r3,16(r21)
  8126b0:	ad400604 	addi	r21,r21,24
  8126b4:	b0800804 	addi	r2,r22,32
  8126b8:	b0c00615 	stw	r3,24(r22)
  8126bc:	a8ffff17 	ldw	r3,-4(r21)
  8126c0:	b0c00715 	stw	r3,28(r22)
  8126c4:	003fb006 	br	812588 <__alt_mem_onchip_mem+0xff80a588>

008126c8 <__swbuf_r>:
  8126c8:	defffb04 	addi	sp,sp,-20
  8126cc:	dcc00315 	stw	r19,12(sp)
  8126d0:	dc800215 	stw	r18,8(sp)
  8126d4:	dc000015 	stw	r16,0(sp)
  8126d8:	dfc00415 	stw	ra,16(sp)
  8126dc:	dc400115 	stw	r17,4(sp)
  8126e0:	2025883a 	mov	r18,r4
  8126e4:	2827883a 	mov	r19,r5
  8126e8:	3021883a 	mov	r16,r6
  8126ec:	20000226 	beq	r4,zero,8126f8 <__swbuf_r+0x30>
  8126f0:	20800e17 	ldw	r2,56(r4)
  8126f4:	10004226 	beq	r2,zero,812800 <__swbuf_r+0x138>
  8126f8:	80800617 	ldw	r2,24(r16)
  8126fc:	8100030b 	ldhu	r4,12(r16)
  812700:	80800215 	stw	r2,8(r16)
  812704:	2080020c 	andi	r2,r4,8
  812708:	10003626 	beq	r2,zero,8127e4 <__swbuf_r+0x11c>
  81270c:	80c00417 	ldw	r3,16(r16)
  812710:	18003426 	beq	r3,zero,8127e4 <__swbuf_r+0x11c>
  812714:	2088000c 	andi	r2,r4,8192
  812718:	9c403fcc 	andi	r17,r19,255
  81271c:	10001a26 	beq	r2,zero,812788 <__swbuf_r+0xc0>
  812720:	80800017 	ldw	r2,0(r16)
  812724:	81000517 	ldw	r4,20(r16)
  812728:	10c7c83a 	sub	r3,r2,r3
  81272c:	1900200e 	bge	r3,r4,8127b0 <__swbuf_r+0xe8>
  812730:	18c00044 	addi	r3,r3,1
  812734:	81000217 	ldw	r4,8(r16)
  812738:	11400044 	addi	r5,r2,1
  81273c:	81400015 	stw	r5,0(r16)
  812740:	213fffc4 	addi	r4,r4,-1
  812744:	81000215 	stw	r4,8(r16)
  812748:	14c00005 	stb	r19,0(r2)
  81274c:	80800517 	ldw	r2,20(r16)
  812750:	10c01e26 	beq	r2,r3,8127cc <__swbuf_r+0x104>
  812754:	8080030b 	ldhu	r2,12(r16)
  812758:	1080004c 	andi	r2,r2,1
  81275c:	10000226 	beq	r2,zero,812768 <__swbuf_r+0xa0>
  812760:	00800284 	movi	r2,10
  812764:	88801926 	beq	r17,r2,8127cc <__swbuf_r+0x104>
  812768:	8805883a 	mov	r2,r17
  81276c:	dfc00417 	ldw	ra,16(sp)
  812770:	dcc00317 	ldw	r19,12(sp)
  812774:	dc800217 	ldw	r18,8(sp)
  812778:	dc400117 	ldw	r17,4(sp)
  81277c:	dc000017 	ldw	r16,0(sp)
  812780:	dec00504 	addi	sp,sp,20
  812784:	f800283a 	ret
  812788:	81401917 	ldw	r5,100(r16)
  81278c:	00b7ffc4 	movi	r2,-8193
  812790:	21080014 	ori	r4,r4,8192
  812794:	2884703a 	and	r2,r5,r2
  812798:	80801915 	stw	r2,100(r16)
  81279c:	80800017 	ldw	r2,0(r16)
  8127a0:	8100030d 	sth	r4,12(r16)
  8127a4:	81000517 	ldw	r4,20(r16)
  8127a8:	10c7c83a 	sub	r3,r2,r3
  8127ac:	193fe016 	blt	r3,r4,812730 <__alt_mem_onchip_mem+0xff80a730>
  8127b0:	800b883a 	mov	r5,r16
  8127b4:	9009883a 	mov	r4,r18
  8127b8:	080d3bc0 	call	80d3bc <_fflush_r>
  8127bc:	1000071e 	bne	r2,zero,8127dc <__swbuf_r+0x114>
  8127c0:	80800017 	ldw	r2,0(r16)
  8127c4:	00c00044 	movi	r3,1
  8127c8:	003fda06 	br	812734 <__alt_mem_onchip_mem+0xff80a734>
  8127cc:	800b883a 	mov	r5,r16
  8127d0:	9009883a 	mov	r4,r18
  8127d4:	080d3bc0 	call	80d3bc <_fflush_r>
  8127d8:	103fe326 	beq	r2,zero,812768 <__alt_mem_onchip_mem+0xff80a768>
  8127dc:	00bfffc4 	movi	r2,-1
  8127e0:	003fe206 	br	81276c <__alt_mem_onchip_mem+0xff80a76c>
  8127e4:	800b883a 	mov	r5,r16
  8127e8:	9009883a 	mov	r4,r18
  8127ec:	080b7c40 	call	80b7c4 <__swsetup_r>
  8127f0:	103ffa1e 	bne	r2,zero,8127dc <__alt_mem_onchip_mem+0xff80a7dc>
  8127f4:	8100030b 	ldhu	r4,12(r16)
  8127f8:	80c00417 	ldw	r3,16(r16)
  8127fc:	003fc506 	br	812714 <__alt_mem_onchip_mem+0xff80a714>
  812800:	080d7980 	call	80d798 <__sinit>
  812804:	003fbc06 	br	8126f8 <__alt_mem_onchip_mem+0xff80a6f8>

00812808 <__swbuf>:
  812808:	008020b4 	movhi	r2,130
  81280c:	10a8f004 	addi	r2,r2,-23616
  812810:	280d883a 	mov	r6,r5
  812814:	200b883a 	mov	r5,r4
  812818:	11000017 	ldw	r4,0(r2)
  81281c:	08126c81 	jmpi	8126c8 <__swbuf_r>

00812820 <_wcrtomb_r>:
  812820:	defff604 	addi	sp,sp,-40
  812824:	008020b4 	movhi	r2,130
  812828:	dc800815 	stw	r18,32(sp)
  81282c:	dc400715 	stw	r17,28(sp)
  812830:	dc000615 	stw	r16,24(sp)
  812834:	10a8f404 	addi	r2,r2,-23600
  812838:	dfc00915 	stw	ra,36(sp)
  81283c:	2021883a 	mov	r16,r4
  812840:	3823883a 	mov	r17,r7
  812844:	14800017 	ldw	r18,0(r2)
  812848:	28001426 	beq	r5,zero,81289c <_wcrtomb_r+0x7c>
  81284c:	d9400415 	stw	r5,16(sp)
  812850:	d9800515 	stw	r6,20(sp)
  812854:	080de200 	call	80de20 <__locale_charset>
  812858:	d9800517 	ldw	r6,20(sp)
  81285c:	d9400417 	ldw	r5,16(sp)
  812860:	100f883a 	mov	r7,r2
  812864:	dc400015 	stw	r17,0(sp)
  812868:	8009883a 	mov	r4,r16
  81286c:	903ee83a 	callr	r18
  812870:	00ffffc4 	movi	r3,-1
  812874:	10c0031e 	bne	r2,r3,812884 <_wcrtomb_r+0x64>
  812878:	88000015 	stw	zero,0(r17)
  81287c:	00c02284 	movi	r3,138
  812880:	80c00015 	stw	r3,0(r16)
  812884:	dfc00917 	ldw	ra,36(sp)
  812888:	dc800817 	ldw	r18,32(sp)
  81288c:	dc400717 	ldw	r17,28(sp)
  812890:	dc000617 	ldw	r16,24(sp)
  812894:	dec00a04 	addi	sp,sp,40
  812898:	f800283a 	ret
  81289c:	080de200 	call	80de20 <__locale_charset>
  8128a0:	100f883a 	mov	r7,r2
  8128a4:	dc400015 	stw	r17,0(sp)
  8128a8:	000d883a 	mov	r6,zero
  8128ac:	d9400104 	addi	r5,sp,4
  8128b0:	8009883a 	mov	r4,r16
  8128b4:	903ee83a 	callr	r18
  8128b8:	003fed06 	br	812870 <__alt_mem_onchip_mem+0xff80a870>

008128bc <wcrtomb>:
  8128bc:	defff604 	addi	sp,sp,-40
  8128c0:	008020b4 	movhi	r2,130
  8128c4:	dc800615 	stw	r18,24(sp)
  8128c8:	dc400515 	stw	r17,20(sp)
  8128cc:	10a8f004 	addi	r2,r2,-23616
  8128d0:	dfc00915 	stw	ra,36(sp)
  8128d4:	dd000815 	stw	r20,32(sp)
  8128d8:	dcc00715 	stw	r19,28(sp)
  8128dc:	dc000415 	stw	r16,16(sp)
  8128e0:	3025883a 	mov	r18,r6
  8128e4:	14400017 	ldw	r17,0(r2)
  8128e8:	20001926 	beq	r4,zero,812950 <wcrtomb+0x94>
  8128ec:	008020b4 	movhi	r2,130
  8128f0:	10a8f404 	addi	r2,r2,-23600
  8128f4:	15000017 	ldw	r20,0(r2)
  8128f8:	2021883a 	mov	r16,r4
  8128fc:	2827883a 	mov	r19,r5
  812900:	080de200 	call	80de20 <__locale_charset>
  812904:	100f883a 	mov	r7,r2
  812908:	dc800015 	stw	r18,0(sp)
  81290c:	980d883a 	mov	r6,r19
  812910:	800b883a 	mov	r5,r16
  812914:	8809883a 	mov	r4,r17
  812918:	a03ee83a 	callr	r20
  81291c:	00ffffc4 	movi	r3,-1
  812920:	10c0031e 	bne	r2,r3,812930 <wcrtomb+0x74>
  812924:	90000015 	stw	zero,0(r18)
  812928:	00c02284 	movi	r3,138
  81292c:	88c00015 	stw	r3,0(r17)
  812930:	dfc00917 	ldw	ra,36(sp)
  812934:	dd000817 	ldw	r20,32(sp)
  812938:	dcc00717 	ldw	r19,28(sp)
  81293c:	dc800617 	ldw	r18,24(sp)
  812940:	dc400517 	ldw	r17,20(sp)
  812944:	dc000417 	ldw	r16,16(sp)
  812948:	dec00a04 	addi	sp,sp,40
  81294c:	f800283a 	ret
  812950:	008020b4 	movhi	r2,130
  812954:	10a8f404 	addi	r2,r2,-23600
  812958:	14000017 	ldw	r16,0(r2)
  81295c:	080de200 	call	80de20 <__locale_charset>
  812960:	100f883a 	mov	r7,r2
  812964:	dc800015 	stw	r18,0(sp)
  812968:	000d883a 	mov	r6,zero
  81296c:	d9400104 	addi	r5,sp,4
  812970:	8809883a 	mov	r4,r17
  812974:	803ee83a 	callr	r16
  812978:	003fe806 	br	81291c <__alt_mem_onchip_mem+0xff80a91c>

0081297c <__ascii_wctomb>:
  81297c:	28000526 	beq	r5,zero,812994 <__ascii_wctomb+0x18>
  812980:	00803fc4 	movi	r2,255
  812984:	11800536 	bltu	r2,r6,81299c <__ascii_wctomb+0x20>
  812988:	29800005 	stb	r6,0(r5)
  81298c:	00800044 	movi	r2,1
  812990:	f800283a 	ret
  812994:	0005883a 	mov	r2,zero
  812998:	f800283a 	ret
  81299c:	00802284 	movi	r2,138
  8129a0:	20800015 	stw	r2,0(r4)
  8129a4:	00bfffc4 	movi	r2,-1
  8129a8:	f800283a 	ret

008129ac <_wctomb_r>:
  8129ac:	008020b4 	movhi	r2,130
  8129b0:	defff904 	addi	sp,sp,-28
  8129b4:	10a8f404 	addi	r2,r2,-23600
  8129b8:	dfc00615 	stw	ra,24(sp)
  8129bc:	dc400515 	stw	r17,20(sp)
  8129c0:	dc000415 	stw	r16,16(sp)
  8129c4:	3823883a 	mov	r17,r7
  8129c8:	14000017 	ldw	r16,0(r2)
  8129cc:	d9000115 	stw	r4,4(sp)
  8129d0:	d9400215 	stw	r5,8(sp)
  8129d4:	d9800315 	stw	r6,12(sp)
  8129d8:	080de200 	call	80de20 <__locale_charset>
  8129dc:	d9800317 	ldw	r6,12(sp)
  8129e0:	d9400217 	ldw	r5,8(sp)
  8129e4:	d9000117 	ldw	r4,4(sp)
  8129e8:	100f883a 	mov	r7,r2
  8129ec:	dc400015 	stw	r17,0(sp)
  8129f0:	803ee83a 	callr	r16
  8129f4:	dfc00617 	ldw	ra,24(sp)
  8129f8:	dc400517 	ldw	r17,20(sp)
  8129fc:	dc000417 	ldw	r16,16(sp)
  812a00:	dec00704 	addi	sp,sp,28
  812a04:	f800283a 	ret

00812a08 <__udivdi3>:
  812a08:	defff504 	addi	sp,sp,-44
  812a0c:	dcc00415 	stw	r19,16(sp)
  812a10:	dc000115 	stw	r16,4(sp)
  812a14:	dfc00a15 	stw	ra,40(sp)
  812a18:	df000915 	stw	fp,36(sp)
  812a1c:	ddc00815 	stw	r23,32(sp)
  812a20:	dd800715 	stw	r22,28(sp)
  812a24:	dd400615 	stw	r21,24(sp)
  812a28:	dd000515 	stw	r20,20(sp)
  812a2c:	dc800315 	stw	r18,12(sp)
  812a30:	dc400215 	stw	r17,8(sp)
  812a34:	2027883a 	mov	r19,r4
  812a38:	2821883a 	mov	r16,r5
  812a3c:	3800411e 	bne	r7,zero,812b44 <__udivdi3+0x13c>
  812a40:	3023883a 	mov	r17,r6
  812a44:	2025883a 	mov	r18,r4
  812a48:	2980522e 	bgeu	r5,r6,812b94 <__udivdi3+0x18c>
  812a4c:	00bfffd4 	movui	r2,65535
  812a50:	282d883a 	mov	r22,r5
  812a54:	1180a836 	bltu	r2,r6,812cf8 <__udivdi3+0x2f0>
  812a58:	00803fc4 	movi	r2,255
  812a5c:	1185803a 	cmpltu	r2,r2,r6
  812a60:	100490fa 	slli	r2,r2,3
  812a64:	3086d83a 	srl	r3,r6,r2
  812a68:	010020b4 	movhi	r4,130
  812a6c:	21206804 	addi	r4,r4,-32352
  812a70:	20c7883a 	add	r3,r4,r3
  812a74:	18c00003 	ldbu	r3,0(r3)
  812a78:	1885883a 	add	r2,r3,r2
  812a7c:	00c00804 	movi	r3,32
  812a80:	1887c83a 	sub	r3,r3,r2
  812a84:	18000526 	beq	r3,zero,812a9c <__udivdi3+0x94>
  812a88:	80e0983a 	sll	r16,r16,r3
  812a8c:	9884d83a 	srl	r2,r19,r2
  812a90:	30e2983a 	sll	r17,r6,r3
  812a94:	98e4983a 	sll	r18,r19,r3
  812a98:	142cb03a 	or	r22,r2,r16
  812a9c:	882ad43a 	srli	r21,r17,16
  812aa0:	b009883a 	mov	r4,r22
  812aa4:	8d3fffcc 	andi	r20,r17,65535
  812aa8:	a80b883a 	mov	r5,r21
  812aac:	08136140 	call	813614 <__umodsi3>
  812ab0:	b009883a 	mov	r4,r22
  812ab4:	a80b883a 	mov	r5,r21
  812ab8:	1027883a 	mov	r19,r2
  812abc:	08135b00 	call	8135b0 <__udivsi3>
  812ac0:	102d883a 	mov	r22,r2
  812ac4:	9826943a 	slli	r19,r19,16
  812ac8:	9004d43a 	srli	r2,r18,16
  812acc:	a5a1383a 	mul	r16,r20,r22
  812ad0:	14c4b03a 	or	r2,r2,r19
  812ad4:	1400052e 	bgeu	r2,r16,812aec <__udivdi3+0xe4>
  812ad8:	1445883a 	add	r2,r2,r17
  812adc:	b0ffffc4 	addi	r3,r22,-1
  812ae0:	14400136 	bltu	r2,r17,812ae8 <__udivdi3+0xe0>
  812ae4:	14012336 	bltu	r2,r16,812f74 <__udivdi3+0x56c>
  812ae8:	182d883a 	mov	r22,r3
  812aec:	1421c83a 	sub	r16,r2,r16
  812af0:	a80b883a 	mov	r5,r21
  812af4:	8009883a 	mov	r4,r16
  812af8:	08136140 	call	813614 <__umodsi3>
  812afc:	1027883a 	mov	r19,r2
  812b00:	a80b883a 	mov	r5,r21
  812b04:	8009883a 	mov	r4,r16
  812b08:	08135b00 	call	8135b0 <__udivsi3>
  812b0c:	9826943a 	slli	r19,r19,16
  812b10:	a0a9383a 	mul	r20,r20,r2
  812b14:	94bfffcc 	andi	r18,r18,65535
  812b18:	94e4b03a 	or	r18,r18,r19
  812b1c:	9500052e 	bgeu	r18,r20,812b34 <__udivdi3+0x12c>
  812b20:	8ca5883a 	add	r18,r17,r18
  812b24:	10ffffc4 	addi	r3,r2,-1
  812b28:	9440f136 	bltu	r18,r17,812ef0 <__udivdi3+0x4e8>
  812b2c:	9500f02e 	bgeu	r18,r20,812ef0 <__udivdi3+0x4e8>
  812b30:	10bfff84 	addi	r2,r2,-2
  812b34:	b00c943a 	slli	r6,r22,16
  812b38:	0007883a 	mov	r3,zero
  812b3c:	3084b03a 	or	r2,r6,r2
  812b40:	00005906 	br	812ca8 <__udivdi3+0x2a0>
  812b44:	29c05636 	bltu	r5,r7,812ca0 <__udivdi3+0x298>
  812b48:	00bfffd4 	movui	r2,65535
  812b4c:	11c0622e 	bgeu	r2,r7,812cd8 <__udivdi3+0x2d0>
  812b50:	00804034 	movhi	r2,256
  812b54:	10bfffc4 	addi	r2,r2,-1
  812b58:	11c0ee36 	bltu	r2,r7,812f14 <__udivdi3+0x50c>
  812b5c:	00800404 	movi	r2,16
  812b60:	3886d83a 	srl	r3,r7,r2
  812b64:	010020b4 	movhi	r4,130
  812b68:	21206804 	addi	r4,r4,-32352
  812b6c:	20c7883a 	add	r3,r4,r3
  812b70:	18c00003 	ldbu	r3,0(r3)
  812b74:	05400804 	movi	r21,32
  812b78:	1885883a 	add	r2,r3,r2
  812b7c:	a8abc83a 	sub	r21,r21,r2
  812b80:	a800621e 	bne	r21,zero,812d0c <__udivdi3+0x304>
  812b84:	3c00e936 	bltu	r7,r16,812f2c <__udivdi3+0x524>
  812b88:	9985403a 	cmpgeu	r2,r19,r6
  812b8c:	0007883a 	mov	r3,zero
  812b90:	00004506 	br	812ca8 <__udivdi3+0x2a0>
  812b94:	3000041e 	bne	r6,zero,812ba8 <__udivdi3+0x1a0>
  812b98:	000b883a 	mov	r5,zero
  812b9c:	01000044 	movi	r4,1
  812ba0:	08135b00 	call	8135b0 <__udivsi3>
  812ba4:	1023883a 	mov	r17,r2
  812ba8:	00bfffd4 	movui	r2,65535
  812bac:	14404e2e 	bgeu	r2,r17,812ce8 <__udivdi3+0x2e0>
  812bb0:	00804034 	movhi	r2,256
  812bb4:	10bfffc4 	addi	r2,r2,-1
  812bb8:	1440d836 	bltu	r2,r17,812f1c <__udivdi3+0x514>
  812bbc:	00800404 	movi	r2,16
  812bc0:	8886d83a 	srl	r3,r17,r2
  812bc4:	010020b4 	movhi	r4,130
  812bc8:	21206804 	addi	r4,r4,-32352
  812bcc:	20c7883a 	add	r3,r4,r3
  812bd0:	18c00003 	ldbu	r3,0(r3)
  812bd4:	1885883a 	add	r2,r3,r2
  812bd8:	00c00804 	movi	r3,32
  812bdc:	1887c83a 	sub	r3,r3,r2
  812be0:	18008f1e 	bne	r3,zero,812e20 <__udivdi3+0x418>
  812be4:	882ad43a 	srli	r21,r17,16
  812be8:	8461c83a 	sub	r16,r16,r17
  812bec:	8d3fffcc 	andi	r20,r17,65535
  812bf0:	00c00044 	movi	r3,1
  812bf4:	8009883a 	mov	r4,r16
  812bf8:	a80b883a 	mov	r5,r21
  812bfc:	d8c00015 	stw	r3,0(sp)
  812c00:	08136140 	call	813614 <__umodsi3>
  812c04:	8009883a 	mov	r4,r16
  812c08:	a80b883a 	mov	r5,r21
  812c0c:	1027883a 	mov	r19,r2
  812c10:	08135b00 	call	8135b0 <__udivsi3>
  812c14:	9826943a 	slli	r19,r19,16
  812c18:	9008d43a 	srli	r4,r18,16
  812c1c:	1521383a 	mul	r16,r2,r20
  812c20:	102d883a 	mov	r22,r2
  812c24:	24c8b03a 	or	r4,r4,r19
  812c28:	d8c00017 	ldw	r3,0(sp)
  812c2c:	2400052e 	bgeu	r4,r16,812c44 <__udivdi3+0x23c>
  812c30:	2449883a 	add	r4,r4,r17
  812c34:	b0bfffc4 	addi	r2,r22,-1
  812c38:	24400136 	bltu	r4,r17,812c40 <__udivdi3+0x238>
  812c3c:	2400ca36 	bltu	r4,r16,812f68 <__udivdi3+0x560>
  812c40:	102d883a 	mov	r22,r2
  812c44:	2421c83a 	sub	r16,r4,r16
  812c48:	a80b883a 	mov	r5,r21
  812c4c:	8009883a 	mov	r4,r16
  812c50:	d8c00015 	stw	r3,0(sp)
  812c54:	08136140 	call	813614 <__umodsi3>
  812c58:	1027883a 	mov	r19,r2
  812c5c:	a80b883a 	mov	r5,r21
  812c60:	8009883a 	mov	r4,r16
  812c64:	08135b00 	call	8135b0 <__udivsi3>
  812c68:	9826943a 	slli	r19,r19,16
  812c6c:	1529383a 	mul	r20,r2,r20
  812c70:	94bfffcc 	andi	r18,r18,65535
  812c74:	94e4b03a 	or	r18,r18,r19
  812c78:	d8c00017 	ldw	r3,0(sp)
  812c7c:	9500052e 	bgeu	r18,r20,812c94 <__udivdi3+0x28c>
  812c80:	8ca5883a 	add	r18,r17,r18
  812c84:	113fffc4 	addi	r4,r2,-1
  812c88:	94409736 	bltu	r18,r17,812ee8 <__udivdi3+0x4e0>
  812c8c:	9500962e 	bgeu	r18,r20,812ee8 <__udivdi3+0x4e0>
  812c90:	10bfff84 	addi	r2,r2,-2
  812c94:	b00c943a 	slli	r6,r22,16
  812c98:	3084b03a 	or	r2,r6,r2
  812c9c:	00000206 	br	812ca8 <__udivdi3+0x2a0>
  812ca0:	0007883a 	mov	r3,zero
  812ca4:	0005883a 	mov	r2,zero
  812ca8:	dfc00a17 	ldw	ra,40(sp)
  812cac:	df000917 	ldw	fp,36(sp)
  812cb0:	ddc00817 	ldw	r23,32(sp)
  812cb4:	dd800717 	ldw	r22,28(sp)
  812cb8:	dd400617 	ldw	r21,24(sp)
  812cbc:	dd000517 	ldw	r20,20(sp)
  812cc0:	dcc00417 	ldw	r19,16(sp)
  812cc4:	dc800317 	ldw	r18,12(sp)
  812cc8:	dc400217 	ldw	r17,8(sp)
  812ccc:	dc000117 	ldw	r16,4(sp)
  812cd0:	dec00b04 	addi	sp,sp,44
  812cd4:	f800283a 	ret
  812cd8:	00803fc4 	movi	r2,255
  812cdc:	11c5803a 	cmpltu	r2,r2,r7
  812ce0:	100490fa 	slli	r2,r2,3
  812ce4:	003f9e06 	br	812b60 <__alt_mem_onchip_mem+0xff80ab60>
  812ce8:	00803fc4 	movi	r2,255
  812cec:	1445803a 	cmpltu	r2,r2,r17
  812cf0:	100490fa 	slli	r2,r2,3
  812cf4:	003fb206 	br	812bc0 <__alt_mem_onchip_mem+0xff80abc0>
  812cf8:	00804034 	movhi	r2,256
  812cfc:	10bfffc4 	addi	r2,r2,-1
  812d00:	11808836 	bltu	r2,r6,812f24 <__udivdi3+0x51c>
  812d04:	00800404 	movi	r2,16
  812d08:	003f5606 	br	812a64 <__alt_mem_onchip_mem+0xff80aa64>
  812d0c:	30aed83a 	srl	r23,r6,r2
  812d10:	3d4e983a 	sll	r7,r7,r21
  812d14:	80acd83a 	srl	r22,r16,r2
  812d18:	9884d83a 	srl	r2,r19,r2
  812d1c:	3deeb03a 	or	r23,r7,r23
  812d20:	b824d43a 	srli	r18,r23,16
  812d24:	8560983a 	sll	r16,r16,r21
  812d28:	b009883a 	mov	r4,r22
  812d2c:	900b883a 	mov	r5,r18
  812d30:	3568983a 	sll	r20,r6,r21
  812d34:	1420b03a 	or	r16,r2,r16
  812d38:	08136140 	call	813614 <__umodsi3>
  812d3c:	b009883a 	mov	r4,r22
  812d40:	900b883a 	mov	r5,r18
  812d44:	1023883a 	mov	r17,r2
  812d48:	08135b00 	call	8135b0 <__udivsi3>
  812d4c:	8808943a 	slli	r4,r17,16
  812d50:	bf3fffcc 	andi	fp,r23,65535
  812d54:	8006d43a 	srli	r3,r16,16
  812d58:	e0a3383a 	mul	r17,fp,r2
  812d5c:	100d883a 	mov	r6,r2
  812d60:	1906b03a 	or	r3,r3,r4
  812d64:	1c40042e 	bgeu	r3,r17,812d78 <__udivdi3+0x370>
  812d68:	1dc7883a 	add	r3,r3,r23
  812d6c:	10bfffc4 	addi	r2,r2,-1
  812d70:	1dc0752e 	bgeu	r3,r23,812f48 <__udivdi3+0x540>
  812d74:	100d883a 	mov	r6,r2
  812d78:	1c63c83a 	sub	r17,r3,r17
  812d7c:	900b883a 	mov	r5,r18
  812d80:	8809883a 	mov	r4,r17
  812d84:	d9800015 	stw	r6,0(sp)
  812d88:	08136140 	call	813614 <__umodsi3>
  812d8c:	102d883a 	mov	r22,r2
  812d90:	8809883a 	mov	r4,r17
  812d94:	900b883a 	mov	r5,r18
  812d98:	08135b00 	call	8135b0 <__udivsi3>
  812d9c:	b02c943a 	slli	r22,r22,16
  812da0:	e089383a 	mul	r4,fp,r2
  812da4:	843fffcc 	andi	r16,r16,65535
  812da8:	85a0b03a 	or	r16,r16,r22
  812dac:	d9800017 	ldw	r6,0(sp)
  812db0:	8100042e 	bgeu	r16,r4,812dc4 <__udivdi3+0x3bc>
  812db4:	85e1883a 	add	r16,r16,r23
  812db8:	10ffffc4 	addi	r3,r2,-1
  812dbc:	85c05e2e 	bgeu	r16,r23,812f38 <__udivdi3+0x530>
  812dc0:	1805883a 	mov	r2,r3
  812dc4:	300c943a 	slli	r6,r6,16
  812dc8:	a17fffcc 	andi	r5,r20,65535
  812dcc:	a028d43a 	srli	r20,r20,16
  812dd0:	3084b03a 	or	r2,r6,r2
  812dd4:	10ffffcc 	andi	r3,r2,65535
  812dd8:	100cd43a 	srli	r6,r2,16
  812ddc:	194f383a 	mul	r7,r3,r5
  812de0:	1d07383a 	mul	r3,r3,r20
  812de4:	314b383a 	mul	r5,r6,r5
  812de8:	3810d43a 	srli	r8,r7,16
  812dec:	8121c83a 	sub	r16,r16,r4
  812df0:	1947883a 	add	r3,r3,r5
  812df4:	40c7883a 	add	r3,r8,r3
  812df8:	350d383a 	mul	r6,r6,r20
  812dfc:	1940022e 	bgeu	r3,r5,812e08 <__udivdi3+0x400>
  812e00:	01000074 	movhi	r4,1
  812e04:	310d883a 	add	r6,r6,r4
  812e08:	1828d43a 	srli	r20,r3,16
  812e0c:	a18d883a 	add	r6,r20,r6
  812e10:	81803e36 	bltu	r16,r6,812f0c <__udivdi3+0x504>
  812e14:	81803826 	beq	r16,r6,812ef8 <__udivdi3+0x4f0>
  812e18:	0007883a 	mov	r3,zero
  812e1c:	003fa206 	br	812ca8 <__alt_mem_onchip_mem+0xff80aca8>
  812e20:	88e2983a 	sll	r17,r17,r3
  812e24:	80a8d83a 	srl	r20,r16,r2
  812e28:	80e0983a 	sll	r16,r16,r3
  812e2c:	882ad43a 	srli	r21,r17,16
  812e30:	9884d83a 	srl	r2,r19,r2
  812e34:	a009883a 	mov	r4,r20
  812e38:	a80b883a 	mov	r5,r21
  812e3c:	142eb03a 	or	r23,r2,r16
  812e40:	98e4983a 	sll	r18,r19,r3
  812e44:	08136140 	call	813614 <__umodsi3>
  812e48:	a009883a 	mov	r4,r20
  812e4c:	a80b883a 	mov	r5,r21
  812e50:	1021883a 	mov	r16,r2
  812e54:	08135b00 	call	8135b0 <__udivsi3>
  812e58:	1039883a 	mov	fp,r2
  812e5c:	8d3fffcc 	andi	r20,r17,65535
  812e60:	8020943a 	slli	r16,r16,16
  812e64:	b804d43a 	srli	r2,r23,16
  812e68:	a72d383a 	mul	r22,r20,fp
  812e6c:	1404b03a 	or	r2,r2,r16
  812e70:	1580062e 	bgeu	r2,r22,812e8c <__udivdi3+0x484>
  812e74:	1445883a 	add	r2,r2,r17
  812e78:	e0ffffc4 	addi	r3,fp,-1
  812e7c:	14403836 	bltu	r2,r17,812f60 <__udivdi3+0x558>
  812e80:	1580372e 	bgeu	r2,r22,812f60 <__udivdi3+0x558>
  812e84:	e73fff84 	addi	fp,fp,-2
  812e88:	1445883a 	add	r2,r2,r17
  812e8c:	15adc83a 	sub	r22,r2,r22
  812e90:	a80b883a 	mov	r5,r21
  812e94:	b009883a 	mov	r4,r22
  812e98:	08136140 	call	813614 <__umodsi3>
  812e9c:	1027883a 	mov	r19,r2
  812ea0:	b009883a 	mov	r4,r22
  812ea4:	a80b883a 	mov	r5,r21
  812ea8:	08135b00 	call	8135b0 <__udivsi3>
  812eac:	9826943a 	slli	r19,r19,16
  812eb0:	a0a1383a 	mul	r16,r20,r2
  812eb4:	b93fffcc 	andi	r4,r23,65535
  812eb8:	24c8b03a 	or	r4,r4,r19
  812ebc:	2400062e 	bgeu	r4,r16,812ed8 <__udivdi3+0x4d0>
  812ec0:	2449883a 	add	r4,r4,r17
  812ec4:	10ffffc4 	addi	r3,r2,-1
  812ec8:	24402336 	bltu	r4,r17,812f58 <__udivdi3+0x550>
  812ecc:	2400222e 	bgeu	r4,r16,812f58 <__udivdi3+0x550>
  812ed0:	10bfff84 	addi	r2,r2,-2
  812ed4:	2449883a 	add	r4,r4,r17
  812ed8:	e038943a 	slli	fp,fp,16
  812edc:	2421c83a 	sub	r16,r4,r16
  812ee0:	e086b03a 	or	r3,fp,r2
  812ee4:	003f4306 	br	812bf4 <__alt_mem_onchip_mem+0xff80abf4>
  812ee8:	2005883a 	mov	r2,r4
  812eec:	003f6906 	br	812c94 <__alt_mem_onchip_mem+0xff80ac94>
  812ef0:	1805883a 	mov	r2,r3
  812ef4:	003f0f06 	br	812b34 <__alt_mem_onchip_mem+0xff80ab34>
  812ef8:	1806943a 	slli	r3,r3,16
  812efc:	9d66983a 	sll	r19,r19,r21
  812f00:	39ffffcc 	andi	r7,r7,65535
  812f04:	19c7883a 	add	r3,r3,r7
  812f08:	98ffc32e 	bgeu	r19,r3,812e18 <__alt_mem_onchip_mem+0xff80ae18>
  812f0c:	10bfffc4 	addi	r2,r2,-1
  812f10:	003fc106 	br	812e18 <__alt_mem_onchip_mem+0xff80ae18>
  812f14:	00800604 	movi	r2,24
  812f18:	003f1106 	br	812b60 <__alt_mem_onchip_mem+0xff80ab60>
  812f1c:	00800604 	movi	r2,24
  812f20:	003f2706 	br	812bc0 <__alt_mem_onchip_mem+0xff80abc0>
  812f24:	00800604 	movi	r2,24
  812f28:	003ece06 	br	812a64 <__alt_mem_onchip_mem+0xff80aa64>
  812f2c:	0007883a 	mov	r3,zero
  812f30:	00800044 	movi	r2,1
  812f34:	003f5c06 	br	812ca8 <__alt_mem_onchip_mem+0xff80aca8>
  812f38:	813fa12e 	bgeu	r16,r4,812dc0 <__alt_mem_onchip_mem+0xff80adc0>
  812f3c:	10bfff84 	addi	r2,r2,-2
  812f40:	85e1883a 	add	r16,r16,r23
  812f44:	003f9f06 	br	812dc4 <__alt_mem_onchip_mem+0xff80adc4>
  812f48:	1c7f8a2e 	bgeu	r3,r17,812d74 <__alt_mem_onchip_mem+0xff80ad74>
  812f4c:	31bfff84 	addi	r6,r6,-2
  812f50:	1dc7883a 	add	r3,r3,r23
  812f54:	003f8806 	br	812d78 <__alt_mem_onchip_mem+0xff80ad78>
  812f58:	1805883a 	mov	r2,r3
  812f5c:	003fde06 	br	812ed8 <__alt_mem_onchip_mem+0xff80aed8>
  812f60:	1839883a 	mov	fp,r3
  812f64:	003fc906 	br	812e8c <__alt_mem_onchip_mem+0xff80ae8c>
  812f68:	b5bfff84 	addi	r22,r22,-2
  812f6c:	2449883a 	add	r4,r4,r17
  812f70:	003f3406 	br	812c44 <__alt_mem_onchip_mem+0xff80ac44>
  812f74:	b5bfff84 	addi	r22,r22,-2
  812f78:	1445883a 	add	r2,r2,r17
  812f7c:	003edb06 	br	812aec <__alt_mem_onchip_mem+0xff80aaec>

00812f80 <__umoddi3>:
  812f80:	defff404 	addi	sp,sp,-48
  812f84:	df000a15 	stw	fp,40(sp)
  812f88:	dc400315 	stw	r17,12(sp)
  812f8c:	dc000215 	stw	r16,8(sp)
  812f90:	dfc00b15 	stw	ra,44(sp)
  812f94:	ddc00915 	stw	r23,36(sp)
  812f98:	dd800815 	stw	r22,32(sp)
  812f9c:	dd400715 	stw	r21,28(sp)
  812fa0:	dd000615 	stw	r20,24(sp)
  812fa4:	dcc00515 	stw	r19,20(sp)
  812fa8:	dc800415 	stw	r18,16(sp)
  812fac:	2021883a 	mov	r16,r4
  812fb0:	2823883a 	mov	r17,r5
  812fb4:	2839883a 	mov	fp,r5
  812fb8:	38003c1e 	bne	r7,zero,8130ac <__umoddi3+0x12c>
  812fbc:	3027883a 	mov	r19,r6
  812fc0:	2029883a 	mov	r20,r4
  812fc4:	2980512e 	bgeu	r5,r6,81310c <__umoddi3+0x18c>
  812fc8:	00bfffd4 	movui	r2,65535
  812fcc:	11809a36 	bltu	r2,r6,813238 <__umoddi3+0x2b8>
  812fd0:	01003fc4 	movi	r4,255
  812fd4:	2189803a 	cmpltu	r4,r4,r6
  812fd8:	200890fa 	slli	r4,r4,3
  812fdc:	3104d83a 	srl	r2,r6,r4
  812fe0:	00c020b4 	movhi	r3,130
  812fe4:	18e06804 	addi	r3,r3,-32352
  812fe8:	1885883a 	add	r2,r3,r2
  812fec:	10c00003 	ldbu	r3,0(r2)
  812ff0:	00800804 	movi	r2,32
  812ff4:	1909883a 	add	r4,r3,r4
  812ff8:	1125c83a 	sub	r18,r2,r4
  812ffc:	90000526 	beq	r18,zero,813014 <__umoddi3+0x94>
  813000:	8ca2983a 	sll	r17,r17,r18
  813004:	8108d83a 	srl	r4,r16,r4
  813008:	34a6983a 	sll	r19,r6,r18
  81300c:	84a8983a 	sll	r20,r16,r18
  813010:	2478b03a 	or	fp,r4,r17
  813014:	982ed43a 	srli	r23,r19,16
  813018:	e009883a 	mov	r4,fp
  81301c:	9dbfffcc 	andi	r22,r19,65535
  813020:	b80b883a 	mov	r5,r23
  813024:	08136140 	call	813614 <__umodsi3>
  813028:	e009883a 	mov	r4,fp
  81302c:	b80b883a 	mov	r5,r23
  813030:	102b883a 	mov	r21,r2
  813034:	08135b00 	call	8135b0 <__udivsi3>
  813038:	a806943a 	slli	r3,r21,16
  81303c:	a008d43a 	srli	r4,r20,16
  813040:	b085383a 	mul	r2,r22,r2
  813044:	20c8b03a 	or	r4,r4,r3
  813048:	2080032e 	bgeu	r4,r2,813058 <__umoddi3+0xd8>
  81304c:	24c9883a 	add	r4,r4,r19
  813050:	24c00136 	bltu	r4,r19,813058 <__umoddi3+0xd8>
  813054:	20811036 	bltu	r4,r2,813498 <__umoddi3+0x518>
  813058:	20abc83a 	sub	r21,r4,r2
  81305c:	b80b883a 	mov	r5,r23
  813060:	a809883a 	mov	r4,r21
  813064:	08136140 	call	813614 <__umodsi3>
  813068:	1023883a 	mov	r17,r2
  81306c:	b80b883a 	mov	r5,r23
  813070:	a809883a 	mov	r4,r21
  813074:	08135b00 	call	8135b0 <__udivsi3>
  813078:	8822943a 	slli	r17,r17,16
  81307c:	b085383a 	mul	r2,r22,r2
  813080:	a0ffffcc 	andi	r3,r20,65535
  813084:	1c46b03a 	or	r3,r3,r17
  813088:	1880042e 	bgeu	r3,r2,81309c <__umoddi3+0x11c>
  81308c:	1cc7883a 	add	r3,r3,r19
  813090:	1cc00236 	bltu	r3,r19,81309c <__umoddi3+0x11c>
  813094:	1880012e 	bgeu	r3,r2,81309c <__umoddi3+0x11c>
  813098:	1cc7883a 	add	r3,r3,r19
  81309c:	1885c83a 	sub	r2,r3,r2
  8130a0:	1484d83a 	srl	r2,r2,r18
  8130a4:	0007883a 	mov	r3,zero
  8130a8:	00004f06 	br	8131e8 <__umoddi3+0x268>
  8130ac:	29c04c36 	bltu	r5,r7,8131e0 <__umoddi3+0x260>
  8130b0:	00bfffd4 	movui	r2,65535
  8130b4:	11c0582e 	bgeu	r2,r7,813218 <__umoddi3+0x298>
  8130b8:	00804034 	movhi	r2,256
  8130bc:	10bfffc4 	addi	r2,r2,-1
  8130c0:	11c0e736 	bltu	r2,r7,813460 <__umoddi3+0x4e0>
  8130c4:	01000404 	movi	r4,16
  8130c8:	3904d83a 	srl	r2,r7,r4
  8130cc:	00c020b4 	movhi	r3,130
  8130d0:	18e06804 	addi	r3,r3,-32352
  8130d4:	1885883a 	add	r2,r3,r2
  8130d8:	14c00003 	ldbu	r19,0(r2)
  8130dc:	00c00804 	movi	r3,32
  8130e0:	9927883a 	add	r19,r19,r4
  8130e4:	1ce9c83a 	sub	r20,r3,r19
  8130e8:	a000581e 	bne	r20,zero,81324c <__umoddi3+0x2cc>
  8130ec:	3c400136 	bltu	r7,r17,8130f4 <__umoddi3+0x174>
  8130f0:	8180eb36 	bltu	r16,r6,8134a0 <__umoddi3+0x520>
  8130f4:	8185c83a 	sub	r2,r16,r6
  8130f8:	89e3c83a 	sub	r17,r17,r7
  8130fc:	8089803a 	cmpltu	r4,r16,r2
  813100:	8939c83a 	sub	fp,r17,r4
  813104:	e007883a 	mov	r3,fp
  813108:	00003706 	br	8131e8 <__umoddi3+0x268>
  81310c:	3000041e 	bne	r6,zero,813120 <__umoddi3+0x1a0>
  813110:	000b883a 	mov	r5,zero
  813114:	01000044 	movi	r4,1
  813118:	08135b00 	call	8135b0 <__udivsi3>
  81311c:	1027883a 	mov	r19,r2
  813120:	00bfffd4 	movui	r2,65535
  813124:	14c0402e 	bgeu	r2,r19,813228 <__umoddi3+0x2a8>
  813128:	00804034 	movhi	r2,256
  81312c:	10bfffc4 	addi	r2,r2,-1
  813130:	14c0cd36 	bltu	r2,r19,813468 <__umoddi3+0x4e8>
  813134:	00800404 	movi	r2,16
  813138:	9886d83a 	srl	r3,r19,r2
  81313c:	010020b4 	movhi	r4,130
  813140:	21206804 	addi	r4,r4,-32352
  813144:	20c7883a 	add	r3,r4,r3
  813148:	18c00003 	ldbu	r3,0(r3)
  81314c:	1887883a 	add	r3,r3,r2
  813150:	00800804 	movi	r2,32
  813154:	10e5c83a 	sub	r18,r2,r3
  813158:	9000901e 	bne	r18,zero,81339c <__umoddi3+0x41c>
  81315c:	982cd43a 	srli	r22,r19,16
  813160:	8ce3c83a 	sub	r17,r17,r19
  813164:	9d7fffcc 	andi	r21,r19,65535
  813168:	b00b883a 	mov	r5,r22
  81316c:	8809883a 	mov	r4,r17
  813170:	08136140 	call	813614 <__umodsi3>
  813174:	8809883a 	mov	r4,r17
  813178:	b00b883a 	mov	r5,r22
  81317c:	1021883a 	mov	r16,r2
  813180:	08135b00 	call	8135b0 <__udivsi3>
  813184:	8006943a 	slli	r3,r16,16
  813188:	a008d43a 	srli	r4,r20,16
  81318c:	1545383a 	mul	r2,r2,r21
  813190:	20c8b03a 	or	r4,r4,r3
  813194:	2080042e 	bgeu	r4,r2,8131a8 <__umoddi3+0x228>
  813198:	24c9883a 	add	r4,r4,r19
  81319c:	24c00236 	bltu	r4,r19,8131a8 <__umoddi3+0x228>
  8131a0:	2080012e 	bgeu	r4,r2,8131a8 <__umoddi3+0x228>
  8131a4:	24c9883a 	add	r4,r4,r19
  8131a8:	20a1c83a 	sub	r16,r4,r2
  8131ac:	b00b883a 	mov	r5,r22
  8131b0:	8009883a 	mov	r4,r16
  8131b4:	08136140 	call	813614 <__umodsi3>
  8131b8:	1023883a 	mov	r17,r2
  8131bc:	b00b883a 	mov	r5,r22
  8131c0:	8009883a 	mov	r4,r16
  8131c4:	08135b00 	call	8135b0 <__udivsi3>
  8131c8:	8822943a 	slli	r17,r17,16
  8131cc:	1545383a 	mul	r2,r2,r21
  8131d0:	a53fffcc 	andi	r20,r20,65535
  8131d4:	a446b03a 	or	r3,r20,r17
  8131d8:	18bfb02e 	bgeu	r3,r2,81309c <__alt_mem_onchip_mem+0xff80b09c>
  8131dc:	003fab06 	br	81308c <__alt_mem_onchip_mem+0xff80b08c>
  8131e0:	2005883a 	mov	r2,r4
  8131e4:	2807883a 	mov	r3,r5
  8131e8:	dfc00b17 	ldw	ra,44(sp)
  8131ec:	df000a17 	ldw	fp,40(sp)
  8131f0:	ddc00917 	ldw	r23,36(sp)
  8131f4:	dd800817 	ldw	r22,32(sp)
  8131f8:	dd400717 	ldw	r21,28(sp)
  8131fc:	dd000617 	ldw	r20,24(sp)
  813200:	dcc00517 	ldw	r19,20(sp)
  813204:	dc800417 	ldw	r18,16(sp)
  813208:	dc400317 	ldw	r17,12(sp)
  81320c:	dc000217 	ldw	r16,8(sp)
  813210:	dec00c04 	addi	sp,sp,48
  813214:	f800283a 	ret
  813218:	04c03fc4 	movi	r19,255
  81321c:	99c9803a 	cmpltu	r4,r19,r7
  813220:	200890fa 	slli	r4,r4,3
  813224:	003fa806 	br	8130c8 <__alt_mem_onchip_mem+0xff80b0c8>
  813228:	00803fc4 	movi	r2,255
  81322c:	14c5803a 	cmpltu	r2,r2,r19
  813230:	100490fa 	slli	r2,r2,3
  813234:	003fc006 	br	813138 <__alt_mem_onchip_mem+0xff80b138>
  813238:	00804034 	movhi	r2,256
  81323c:	10bfffc4 	addi	r2,r2,-1
  813240:	11808b36 	bltu	r2,r6,813470 <__umoddi3+0x4f0>
  813244:	01000404 	movi	r4,16
  813248:	003f6406 	br	812fdc <__alt_mem_onchip_mem+0xff80afdc>
  81324c:	34c4d83a 	srl	r2,r6,r19
  813250:	3d0e983a 	sll	r7,r7,r20
  813254:	8cf8d83a 	srl	fp,r17,r19
  813258:	8d10983a 	sll	r8,r17,r20
  81325c:	38aab03a 	or	r21,r7,r2
  813260:	a82cd43a 	srli	r22,r21,16
  813264:	84e2d83a 	srl	r17,r16,r19
  813268:	e009883a 	mov	r4,fp
  81326c:	b00b883a 	mov	r5,r22
  813270:	8a22b03a 	or	r17,r17,r8
  813274:	3524983a 	sll	r18,r6,r20
  813278:	08136140 	call	813614 <__umodsi3>
  81327c:	e009883a 	mov	r4,fp
  813280:	b00b883a 	mov	r5,r22
  813284:	102f883a 	mov	r23,r2
  813288:	08135b00 	call	8135b0 <__udivsi3>
  81328c:	100d883a 	mov	r6,r2
  813290:	b808943a 	slli	r4,r23,16
  813294:	aa3fffcc 	andi	r8,r21,65535
  813298:	8804d43a 	srli	r2,r17,16
  81329c:	41af383a 	mul	r23,r8,r6
  8132a0:	8520983a 	sll	r16,r16,r20
  8132a4:	1104b03a 	or	r2,r2,r4
  8132a8:	15c0042e 	bgeu	r2,r23,8132bc <__umoddi3+0x33c>
  8132ac:	1545883a 	add	r2,r2,r21
  8132b0:	30ffffc4 	addi	r3,r6,-1
  8132b4:	1540742e 	bgeu	r2,r21,813488 <__umoddi3+0x508>
  8132b8:	180d883a 	mov	r6,r3
  8132bc:	15efc83a 	sub	r23,r2,r23
  8132c0:	b00b883a 	mov	r5,r22
  8132c4:	b809883a 	mov	r4,r23
  8132c8:	d9800115 	stw	r6,4(sp)
  8132cc:	da000015 	stw	r8,0(sp)
  8132d0:	08136140 	call	813614 <__umodsi3>
  8132d4:	b00b883a 	mov	r5,r22
  8132d8:	b809883a 	mov	r4,r23
  8132dc:	1039883a 	mov	fp,r2
  8132e0:	08135b00 	call	8135b0 <__udivsi3>
  8132e4:	da000017 	ldw	r8,0(sp)
  8132e8:	e038943a 	slli	fp,fp,16
  8132ec:	100b883a 	mov	r5,r2
  8132f0:	4089383a 	mul	r4,r8,r2
  8132f4:	8a3fffcc 	andi	r8,r17,65535
  8132f8:	4710b03a 	or	r8,r8,fp
  8132fc:	d9800117 	ldw	r6,4(sp)
  813300:	4100042e 	bgeu	r8,r4,813314 <__umoddi3+0x394>
  813304:	4551883a 	add	r8,r8,r21
  813308:	10bfffc4 	addi	r2,r2,-1
  81330c:	45405a2e 	bgeu	r8,r21,813478 <__umoddi3+0x4f8>
  813310:	100b883a 	mov	r5,r2
  813314:	300c943a 	slli	r6,r6,16
  813318:	91ffffcc 	andi	r7,r18,65535
  81331c:	9004d43a 	srli	r2,r18,16
  813320:	314cb03a 	or	r6,r6,r5
  813324:	317fffcc 	andi	r5,r6,65535
  813328:	300cd43a 	srli	r6,r6,16
  81332c:	29d3383a 	mul	r9,r5,r7
  813330:	288b383a 	mul	r5,r5,r2
  813334:	31cf383a 	mul	r7,r6,r7
  813338:	4806d43a 	srli	r3,r9,16
  81333c:	4111c83a 	sub	r8,r8,r4
  813340:	29cb883a 	add	r5,r5,r7
  813344:	194b883a 	add	r5,r3,r5
  813348:	3085383a 	mul	r2,r6,r2
  81334c:	29c0022e 	bgeu	r5,r7,813358 <__umoddi3+0x3d8>
  813350:	00c00074 	movhi	r3,1
  813354:	10c5883a 	add	r2,r2,r3
  813358:	2808d43a 	srli	r4,r5,16
  81335c:	280a943a 	slli	r5,r5,16
  813360:	4a7fffcc 	andi	r9,r9,65535
  813364:	2085883a 	add	r2,r4,r2
  813368:	2a4b883a 	add	r5,r5,r9
  81336c:	40803636 	bltu	r8,r2,813448 <__umoddi3+0x4c8>
  813370:	40804d26 	beq	r8,r2,8134a8 <__umoddi3+0x528>
  813374:	4089c83a 	sub	r4,r8,r2
  813378:	280f883a 	mov	r7,r5
  81337c:	81cfc83a 	sub	r7,r16,r7
  813380:	81c7803a 	cmpltu	r3,r16,r7
  813384:	20c7c83a 	sub	r3,r4,r3
  813388:	1cc4983a 	sll	r2,r3,r19
  81338c:	3d0ed83a 	srl	r7,r7,r20
  813390:	1d06d83a 	srl	r3,r3,r20
  813394:	11c4b03a 	or	r2,r2,r7
  813398:	003f9306 	br	8131e8 <__alt_mem_onchip_mem+0xff80b1e8>
  81339c:	9ca6983a 	sll	r19,r19,r18
  8133a0:	88e8d83a 	srl	r20,r17,r3
  8133a4:	80c4d83a 	srl	r2,r16,r3
  8133a8:	982cd43a 	srli	r22,r19,16
  8133ac:	8ca2983a 	sll	r17,r17,r18
  8133b0:	a009883a 	mov	r4,r20
  8133b4:	b00b883a 	mov	r5,r22
  8133b8:	1478b03a 	or	fp,r2,r17
  8133bc:	08136140 	call	813614 <__umodsi3>
  8133c0:	a009883a 	mov	r4,r20
  8133c4:	b00b883a 	mov	r5,r22
  8133c8:	1023883a 	mov	r17,r2
  8133cc:	08135b00 	call	8135b0 <__udivsi3>
  8133d0:	9d7fffcc 	andi	r21,r19,65535
  8133d4:	880a943a 	slli	r5,r17,16
  8133d8:	e008d43a 	srli	r4,fp,16
  8133dc:	a885383a 	mul	r2,r21,r2
  8133e0:	84a8983a 	sll	r20,r16,r18
  8133e4:	2148b03a 	or	r4,r4,r5
  8133e8:	2080042e 	bgeu	r4,r2,8133fc <__umoddi3+0x47c>
  8133ec:	24c9883a 	add	r4,r4,r19
  8133f0:	24c00236 	bltu	r4,r19,8133fc <__umoddi3+0x47c>
  8133f4:	2080012e 	bgeu	r4,r2,8133fc <__umoddi3+0x47c>
  8133f8:	24c9883a 	add	r4,r4,r19
  8133fc:	20a3c83a 	sub	r17,r4,r2
  813400:	b00b883a 	mov	r5,r22
  813404:	8809883a 	mov	r4,r17
  813408:	08136140 	call	813614 <__umodsi3>
  81340c:	102f883a 	mov	r23,r2
  813410:	8809883a 	mov	r4,r17
  813414:	b00b883a 	mov	r5,r22
  813418:	08135b00 	call	8135b0 <__udivsi3>
  81341c:	b82e943a 	slli	r23,r23,16
  813420:	a885383a 	mul	r2,r21,r2
  813424:	e13fffcc 	andi	r4,fp,65535
  813428:	25c8b03a 	or	r4,r4,r23
  81342c:	2080042e 	bgeu	r4,r2,813440 <__umoddi3+0x4c0>
  813430:	24c9883a 	add	r4,r4,r19
  813434:	24c00236 	bltu	r4,r19,813440 <__umoddi3+0x4c0>
  813438:	2080012e 	bgeu	r4,r2,813440 <__umoddi3+0x4c0>
  81343c:	24c9883a 	add	r4,r4,r19
  813440:	20a3c83a 	sub	r17,r4,r2
  813444:	003f4806 	br	813168 <__alt_mem_onchip_mem+0xff80b168>
  813448:	2c8fc83a 	sub	r7,r5,r18
  81344c:	1545c83a 	sub	r2,r2,r21
  813450:	29cb803a 	cmpltu	r5,r5,r7
  813454:	1145c83a 	sub	r2,r2,r5
  813458:	4089c83a 	sub	r4,r8,r2
  81345c:	003fc706 	br	81337c <__alt_mem_onchip_mem+0xff80b37c>
  813460:	01000604 	movi	r4,24
  813464:	003f1806 	br	8130c8 <__alt_mem_onchip_mem+0xff80b0c8>
  813468:	00800604 	movi	r2,24
  81346c:	003f3206 	br	813138 <__alt_mem_onchip_mem+0xff80b138>
  813470:	01000604 	movi	r4,24
  813474:	003ed906 	br	812fdc <__alt_mem_onchip_mem+0xff80afdc>
  813478:	413fa52e 	bgeu	r8,r4,813310 <__alt_mem_onchip_mem+0xff80b310>
  81347c:	297fff84 	addi	r5,r5,-2
  813480:	4551883a 	add	r8,r8,r21
  813484:	003fa306 	br	813314 <__alt_mem_onchip_mem+0xff80b314>
  813488:	15ff8b2e 	bgeu	r2,r23,8132b8 <__alt_mem_onchip_mem+0xff80b2b8>
  81348c:	31bfff84 	addi	r6,r6,-2
  813490:	1545883a 	add	r2,r2,r21
  813494:	003f8906 	br	8132bc <__alt_mem_onchip_mem+0xff80b2bc>
  813498:	24c9883a 	add	r4,r4,r19
  81349c:	003eee06 	br	813058 <__alt_mem_onchip_mem+0xff80b058>
  8134a0:	8005883a 	mov	r2,r16
  8134a4:	003f1706 	br	813104 <__alt_mem_onchip_mem+0xff80b104>
  8134a8:	817fe736 	bltu	r16,r5,813448 <__alt_mem_onchip_mem+0xff80b448>
  8134ac:	280f883a 	mov	r7,r5
  8134b0:	0009883a 	mov	r4,zero
  8134b4:	003fb106 	br	81337c <__alt_mem_onchip_mem+0xff80b37c>

008134b8 <__divsi3>:
  8134b8:	20001b16 	blt	r4,zero,813528 <__divsi3+0x70>
  8134bc:	000f883a 	mov	r7,zero
  8134c0:	28001616 	blt	r5,zero,81351c <__divsi3+0x64>
  8134c4:	200d883a 	mov	r6,r4
  8134c8:	29001a2e 	bgeu	r5,r4,813534 <__divsi3+0x7c>
  8134cc:	00800804 	movi	r2,32
  8134d0:	00c00044 	movi	r3,1
  8134d4:	00000106 	br	8134dc <__divsi3+0x24>
  8134d8:	10000d26 	beq	r2,zero,813510 <__divsi3+0x58>
  8134dc:	294b883a 	add	r5,r5,r5
  8134e0:	10bfffc4 	addi	r2,r2,-1
  8134e4:	18c7883a 	add	r3,r3,r3
  8134e8:	293ffb36 	bltu	r5,r4,8134d8 <__alt_mem_onchip_mem+0xff80b4d8>
  8134ec:	0005883a 	mov	r2,zero
  8134f0:	18000726 	beq	r3,zero,813510 <__divsi3+0x58>
  8134f4:	0005883a 	mov	r2,zero
  8134f8:	31400236 	bltu	r6,r5,813504 <__divsi3+0x4c>
  8134fc:	314dc83a 	sub	r6,r6,r5
  813500:	10c4b03a 	or	r2,r2,r3
  813504:	1806d07a 	srli	r3,r3,1
  813508:	280ad07a 	srli	r5,r5,1
  81350c:	183ffa1e 	bne	r3,zero,8134f8 <__alt_mem_onchip_mem+0xff80b4f8>
  813510:	38000126 	beq	r7,zero,813518 <__divsi3+0x60>
  813514:	0085c83a 	sub	r2,zero,r2
  813518:	f800283a 	ret
  81351c:	014bc83a 	sub	r5,zero,r5
  813520:	39c0005c 	xori	r7,r7,1
  813524:	003fe706 	br	8134c4 <__alt_mem_onchip_mem+0xff80b4c4>
  813528:	0109c83a 	sub	r4,zero,r4
  81352c:	01c00044 	movi	r7,1
  813530:	003fe306 	br	8134c0 <__alt_mem_onchip_mem+0xff80b4c0>
  813534:	00c00044 	movi	r3,1
  813538:	003fee06 	br	8134f4 <__alt_mem_onchip_mem+0xff80b4f4>

0081353c <__modsi3>:
  81353c:	20001716 	blt	r4,zero,81359c <__modsi3+0x60>
  813540:	000f883a 	mov	r7,zero
  813544:	2005883a 	mov	r2,r4
  813548:	28001216 	blt	r5,zero,813594 <__modsi3+0x58>
  81354c:	2900162e 	bgeu	r5,r4,8135a8 <__modsi3+0x6c>
  813550:	01800804 	movi	r6,32
  813554:	00c00044 	movi	r3,1
  813558:	00000106 	br	813560 <__modsi3+0x24>
  81355c:	30000a26 	beq	r6,zero,813588 <__modsi3+0x4c>
  813560:	294b883a 	add	r5,r5,r5
  813564:	31bfffc4 	addi	r6,r6,-1
  813568:	18c7883a 	add	r3,r3,r3
  81356c:	293ffb36 	bltu	r5,r4,81355c <__alt_mem_onchip_mem+0xff80b55c>
  813570:	18000526 	beq	r3,zero,813588 <__modsi3+0x4c>
  813574:	1806d07a 	srli	r3,r3,1
  813578:	11400136 	bltu	r2,r5,813580 <__modsi3+0x44>
  81357c:	1145c83a 	sub	r2,r2,r5
  813580:	280ad07a 	srli	r5,r5,1
  813584:	183ffb1e 	bne	r3,zero,813574 <__alt_mem_onchip_mem+0xff80b574>
  813588:	38000126 	beq	r7,zero,813590 <__modsi3+0x54>
  81358c:	0085c83a 	sub	r2,zero,r2
  813590:	f800283a 	ret
  813594:	014bc83a 	sub	r5,zero,r5
  813598:	003fec06 	br	81354c <__alt_mem_onchip_mem+0xff80b54c>
  81359c:	0109c83a 	sub	r4,zero,r4
  8135a0:	01c00044 	movi	r7,1
  8135a4:	003fe706 	br	813544 <__alt_mem_onchip_mem+0xff80b544>
  8135a8:	00c00044 	movi	r3,1
  8135ac:	003ff106 	br	813574 <__alt_mem_onchip_mem+0xff80b574>

008135b0 <__udivsi3>:
  8135b0:	200d883a 	mov	r6,r4
  8135b4:	2900152e 	bgeu	r5,r4,81360c <__udivsi3+0x5c>
  8135b8:	28001416 	blt	r5,zero,81360c <__udivsi3+0x5c>
  8135bc:	00800804 	movi	r2,32
  8135c0:	00c00044 	movi	r3,1
  8135c4:	00000206 	br	8135d0 <__udivsi3+0x20>
  8135c8:	10000e26 	beq	r2,zero,813604 <__udivsi3+0x54>
  8135cc:	28000516 	blt	r5,zero,8135e4 <__udivsi3+0x34>
  8135d0:	294b883a 	add	r5,r5,r5
  8135d4:	10bfffc4 	addi	r2,r2,-1
  8135d8:	18c7883a 	add	r3,r3,r3
  8135dc:	293ffa36 	bltu	r5,r4,8135c8 <__alt_mem_onchip_mem+0xff80b5c8>
  8135e0:	18000826 	beq	r3,zero,813604 <__udivsi3+0x54>
  8135e4:	0005883a 	mov	r2,zero
  8135e8:	31400236 	bltu	r6,r5,8135f4 <__udivsi3+0x44>
  8135ec:	314dc83a 	sub	r6,r6,r5
  8135f0:	10c4b03a 	or	r2,r2,r3
  8135f4:	1806d07a 	srli	r3,r3,1
  8135f8:	280ad07a 	srli	r5,r5,1
  8135fc:	183ffa1e 	bne	r3,zero,8135e8 <__alt_mem_onchip_mem+0xff80b5e8>
  813600:	f800283a 	ret
  813604:	0005883a 	mov	r2,zero
  813608:	f800283a 	ret
  81360c:	00c00044 	movi	r3,1
  813610:	003ff406 	br	8135e4 <__alt_mem_onchip_mem+0xff80b5e4>

00813614 <__umodsi3>:
  813614:	2005883a 	mov	r2,r4
  813618:	2900122e 	bgeu	r5,r4,813664 <__umodsi3+0x50>
  81361c:	28001116 	blt	r5,zero,813664 <__umodsi3+0x50>
  813620:	01800804 	movi	r6,32
  813624:	00c00044 	movi	r3,1
  813628:	00000206 	br	813634 <__umodsi3+0x20>
  81362c:	30000c26 	beq	r6,zero,813660 <__umodsi3+0x4c>
  813630:	28000516 	blt	r5,zero,813648 <__umodsi3+0x34>
  813634:	294b883a 	add	r5,r5,r5
  813638:	31bfffc4 	addi	r6,r6,-1
  81363c:	18c7883a 	add	r3,r3,r3
  813640:	293ffa36 	bltu	r5,r4,81362c <__alt_mem_onchip_mem+0xff80b62c>
  813644:	18000626 	beq	r3,zero,813660 <__umodsi3+0x4c>
  813648:	1806d07a 	srli	r3,r3,1
  81364c:	11400136 	bltu	r2,r5,813654 <__umodsi3+0x40>
  813650:	1145c83a 	sub	r2,r2,r5
  813654:	280ad07a 	srli	r5,r5,1
  813658:	183ffb1e 	bne	r3,zero,813648 <__alt_mem_onchip_mem+0xff80b648>
  81365c:	f800283a 	ret
  813660:	f800283a 	ret
  813664:	00c00044 	movi	r3,1
  813668:	003ff706 	br	813648 <__alt_mem_onchip_mem+0xff80b648>

0081366c <__divdf3>:
  81366c:	defff204 	addi	sp,sp,-56
  813670:	dd400915 	stw	r21,36(sp)
  813674:	282ad53a 	srli	r21,r5,20
  813678:	dd000815 	stw	r20,32(sp)
  81367c:	2828d7fa 	srli	r20,r5,31
  813680:	dc000415 	stw	r16,16(sp)
  813684:	04000434 	movhi	r16,16
  813688:	df000c15 	stw	fp,48(sp)
  81368c:	843fffc4 	addi	r16,r16,-1
  813690:	dfc00d15 	stw	ra,52(sp)
  813694:	ddc00b15 	stw	r23,44(sp)
  813698:	dd800a15 	stw	r22,40(sp)
  81369c:	dcc00715 	stw	r19,28(sp)
  8136a0:	dc800615 	stw	r18,24(sp)
  8136a4:	dc400515 	stw	r17,20(sp)
  8136a8:	ad41ffcc 	andi	r21,r21,2047
  8136ac:	2c20703a 	and	r16,r5,r16
  8136b0:	a7003fcc 	andi	fp,r20,255
  8136b4:	a8006126 	beq	r21,zero,81383c <__divdf3+0x1d0>
  8136b8:	0081ffc4 	movi	r2,2047
  8136bc:	2025883a 	mov	r18,r4
  8136c0:	a8803726 	beq	r21,r2,8137a0 <__divdf3+0x134>
  8136c4:	80800434 	orhi	r2,r16,16
  8136c8:	100490fa 	slli	r2,r2,3
  8136cc:	2020d77a 	srli	r16,r4,29
  8136d0:	202490fa 	slli	r18,r4,3
  8136d4:	ad7f0044 	addi	r21,r21,-1023
  8136d8:	80a0b03a 	or	r16,r16,r2
  8136dc:	0027883a 	mov	r19,zero
  8136e0:	0013883a 	mov	r9,zero
  8136e4:	3804d53a 	srli	r2,r7,20
  8136e8:	382cd7fa 	srli	r22,r7,31
  8136ec:	04400434 	movhi	r17,16
  8136f0:	8c7fffc4 	addi	r17,r17,-1
  8136f4:	1081ffcc 	andi	r2,r2,2047
  8136f8:	3011883a 	mov	r8,r6
  8136fc:	3c62703a 	and	r17,r7,r17
  813700:	b5c03fcc 	andi	r23,r22,255
  813704:	10006c26 	beq	r2,zero,8138b8 <__divdf3+0x24c>
  813708:	00c1ffc4 	movi	r3,2047
  81370c:	10c06426 	beq	r2,r3,8138a0 <__divdf3+0x234>
  813710:	88c00434 	orhi	r3,r17,16
  813714:	180690fa 	slli	r3,r3,3
  813718:	3022d77a 	srli	r17,r6,29
  81371c:	301090fa 	slli	r8,r6,3
  813720:	10bf0044 	addi	r2,r2,-1023
  813724:	88e2b03a 	or	r17,r17,r3
  813728:	000f883a 	mov	r7,zero
  81372c:	a58cf03a 	xor	r6,r20,r22
  813730:	3cc8b03a 	or	r4,r7,r19
  813734:	a8abc83a 	sub	r21,r21,r2
  813738:	008003c4 	movi	r2,15
  81373c:	3007883a 	mov	r3,r6
  813740:	34c03fcc 	andi	r19,r6,255
  813744:	11009036 	bltu	r2,r4,813988 <__divdf3+0x31c>
  813748:	200890ba 	slli	r4,r4,2
  81374c:	00802074 	movhi	r2,129
  813750:	108dd804 	addi	r2,r2,14176
  813754:	2089883a 	add	r4,r4,r2
  813758:	20800017 	ldw	r2,0(r4)
  81375c:	1000683a 	jmp	r2
  813760:	00813988 	cmpgei	r2,zero,1254
  813764:	008137d8 	cmpnei	r2,zero,1247
  813768:	00813978 	rdprs	r2,zero,1253
  81376c:	008137cc 	andi	r2,zero,1247
  813770:	00813978 	rdprs	r2,zero,1253
  813774:	0081394c 	andi	r2,zero,1253
  813778:	00813978 	rdprs	r2,zero,1253
  81377c:	008137cc 	andi	r2,zero,1247
  813780:	008137d8 	cmpnei	r2,zero,1247
  813784:	008137d8 	cmpnei	r2,zero,1247
  813788:	0081394c 	andi	r2,zero,1253
  81378c:	008137cc 	andi	r2,zero,1247
  813790:	008137bc 	xorhi	r2,zero,1246
  813794:	008137bc 	xorhi	r2,zero,1246
  813798:	008137bc 	xorhi	r2,zero,1246
  81379c:	00813c6c 	andhi	r2,zero,1265
  8137a0:	2404b03a 	or	r2,r4,r16
  8137a4:	1000661e 	bne	r2,zero,813940 <__divdf3+0x2d4>
  8137a8:	04c00204 	movi	r19,8
  8137ac:	0021883a 	mov	r16,zero
  8137b0:	0025883a 	mov	r18,zero
  8137b4:	02400084 	movi	r9,2
  8137b8:	003fca06 	br	8136e4 <__alt_mem_onchip_mem+0xff80b6e4>
  8137bc:	8023883a 	mov	r17,r16
  8137c0:	9011883a 	mov	r8,r18
  8137c4:	e02f883a 	mov	r23,fp
  8137c8:	480f883a 	mov	r7,r9
  8137cc:	00800084 	movi	r2,2
  8137d0:	3881311e 	bne	r7,r2,813c98 <__divdf3+0x62c>
  8137d4:	b827883a 	mov	r19,r23
  8137d8:	98c0004c 	andi	r3,r19,1
  8137dc:	0081ffc4 	movi	r2,2047
  8137e0:	000b883a 	mov	r5,zero
  8137e4:	0025883a 	mov	r18,zero
  8137e8:	1004953a 	slli	r2,r2,20
  8137ec:	18c03fcc 	andi	r3,r3,255
  8137f0:	04400434 	movhi	r17,16
  8137f4:	8c7fffc4 	addi	r17,r17,-1
  8137f8:	180697fa 	slli	r3,r3,31
  8137fc:	2c4a703a 	and	r5,r5,r17
  813800:	288ab03a 	or	r5,r5,r2
  813804:	28c6b03a 	or	r3,r5,r3
  813808:	9005883a 	mov	r2,r18
  81380c:	dfc00d17 	ldw	ra,52(sp)
  813810:	df000c17 	ldw	fp,48(sp)
  813814:	ddc00b17 	ldw	r23,44(sp)
  813818:	dd800a17 	ldw	r22,40(sp)
  81381c:	dd400917 	ldw	r21,36(sp)
  813820:	dd000817 	ldw	r20,32(sp)
  813824:	dcc00717 	ldw	r19,28(sp)
  813828:	dc800617 	ldw	r18,24(sp)
  81382c:	dc400517 	ldw	r17,20(sp)
  813830:	dc000417 	ldw	r16,16(sp)
  813834:	dec00e04 	addi	sp,sp,56
  813838:	f800283a 	ret
  81383c:	2404b03a 	or	r2,r4,r16
  813840:	2027883a 	mov	r19,r4
  813844:	10003926 	beq	r2,zero,81392c <__divdf3+0x2c0>
  813848:	80012e26 	beq	r16,zero,813d04 <__divdf3+0x698>
  81384c:	8009883a 	mov	r4,r16
  813850:	d9800315 	stw	r6,12(sp)
  813854:	d9c00215 	stw	r7,8(sp)
  813858:	08094240 	call	809424 <__clzsi2>
  81385c:	d9800317 	ldw	r6,12(sp)
  813860:	d9c00217 	ldw	r7,8(sp)
  813864:	113ffd44 	addi	r4,r2,-11
  813868:	00c00704 	movi	r3,28
  81386c:	19012116 	blt	r3,r4,813cf4 <__divdf3+0x688>
  813870:	00c00744 	movi	r3,29
  813874:	147ffe04 	addi	r17,r2,-8
  813878:	1907c83a 	sub	r3,r3,r4
  81387c:	8460983a 	sll	r16,r16,r17
  813880:	98c6d83a 	srl	r3,r19,r3
  813884:	9c64983a 	sll	r18,r19,r17
  813888:	1c20b03a 	or	r16,r3,r16
  81388c:	1080fcc4 	addi	r2,r2,1011
  813890:	00abc83a 	sub	r21,zero,r2
  813894:	0027883a 	mov	r19,zero
  813898:	0013883a 	mov	r9,zero
  81389c:	003f9106 	br	8136e4 <__alt_mem_onchip_mem+0xff80b6e4>
  8138a0:	3446b03a 	or	r3,r6,r17
  8138a4:	18001f1e 	bne	r3,zero,813924 <__divdf3+0x2b8>
  8138a8:	0023883a 	mov	r17,zero
  8138ac:	0011883a 	mov	r8,zero
  8138b0:	01c00084 	movi	r7,2
  8138b4:	003f9d06 	br	81372c <__alt_mem_onchip_mem+0xff80b72c>
  8138b8:	3446b03a 	or	r3,r6,r17
  8138bc:	18001526 	beq	r3,zero,813914 <__divdf3+0x2a8>
  8138c0:	88011b26 	beq	r17,zero,813d30 <__divdf3+0x6c4>
  8138c4:	8809883a 	mov	r4,r17
  8138c8:	d9800315 	stw	r6,12(sp)
  8138cc:	da400115 	stw	r9,4(sp)
  8138d0:	08094240 	call	809424 <__clzsi2>
  8138d4:	d9800317 	ldw	r6,12(sp)
  8138d8:	da400117 	ldw	r9,4(sp)
  8138dc:	113ffd44 	addi	r4,r2,-11
  8138e0:	00c00704 	movi	r3,28
  8138e4:	19010e16 	blt	r3,r4,813d20 <__divdf3+0x6b4>
  8138e8:	00c00744 	movi	r3,29
  8138ec:	123ffe04 	addi	r8,r2,-8
  8138f0:	1907c83a 	sub	r3,r3,r4
  8138f4:	8a22983a 	sll	r17,r17,r8
  8138f8:	30c6d83a 	srl	r3,r6,r3
  8138fc:	3210983a 	sll	r8,r6,r8
  813900:	1c62b03a 	or	r17,r3,r17
  813904:	1080fcc4 	addi	r2,r2,1011
  813908:	0085c83a 	sub	r2,zero,r2
  81390c:	000f883a 	mov	r7,zero
  813910:	003f8606 	br	81372c <__alt_mem_onchip_mem+0xff80b72c>
  813914:	0023883a 	mov	r17,zero
  813918:	0011883a 	mov	r8,zero
  81391c:	01c00044 	movi	r7,1
  813920:	003f8206 	br	81372c <__alt_mem_onchip_mem+0xff80b72c>
  813924:	01c000c4 	movi	r7,3
  813928:	003f8006 	br	81372c <__alt_mem_onchip_mem+0xff80b72c>
  81392c:	04c00104 	movi	r19,4
  813930:	0021883a 	mov	r16,zero
  813934:	0025883a 	mov	r18,zero
  813938:	02400044 	movi	r9,1
  81393c:	003f6906 	br	8136e4 <__alt_mem_onchip_mem+0xff80b6e4>
  813940:	04c00304 	movi	r19,12
  813944:	024000c4 	movi	r9,3
  813948:	003f6606 	br	8136e4 <__alt_mem_onchip_mem+0xff80b6e4>
  81394c:	01400434 	movhi	r5,16
  813950:	0007883a 	mov	r3,zero
  813954:	297fffc4 	addi	r5,r5,-1
  813958:	04bfffc4 	movi	r18,-1
  81395c:	0081ffc4 	movi	r2,2047
  813960:	003fa106 	br	8137e8 <__alt_mem_onchip_mem+0xff80b7e8>
  813964:	00c00044 	movi	r3,1
  813968:	1887c83a 	sub	r3,r3,r2
  81396c:	01000e04 	movi	r4,56
  813970:	20c1210e 	bge	r4,r3,813df8 <__divdf3+0x78c>
  813974:	98c0004c 	andi	r3,r19,1
  813978:	0005883a 	mov	r2,zero
  81397c:	000b883a 	mov	r5,zero
  813980:	0025883a 	mov	r18,zero
  813984:	003f9806 	br	8137e8 <__alt_mem_onchip_mem+0xff80b7e8>
  813988:	8c00fd36 	bltu	r17,r16,813d80 <__divdf3+0x714>
  81398c:	8440fb26 	beq	r16,r17,813d7c <__divdf3+0x710>
  813990:	8007883a 	mov	r3,r16
  813994:	ad7fffc4 	addi	r21,r21,-1
  813998:	0021883a 	mov	r16,zero
  81399c:	4004d63a 	srli	r2,r8,24
  8139a0:	8822923a 	slli	r17,r17,8
  8139a4:	1809883a 	mov	r4,r3
  8139a8:	402c923a 	slli	r22,r8,8
  8139ac:	88b8b03a 	or	fp,r17,r2
  8139b0:	e028d43a 	srli	r20,fp,16
  8139b4:	d8c00015 	stw	r3,0(sp)
  8139b8:	e5ffffcc 	andi	r23,fp,65535
  8139bc:	a00b883a 	mov	r5,r20
  8139c0:	08135b00 	call	8135b0 <__udivsi3>
  8139c4:	d8c00017 	ldw	r3,0(sp)
  8139c8:	a00b883a 	mov	r5,r20
  8139cc:	d8800315 	stw	r2,12(sp)
  8139d0:	1809883a 	mov	r4,r3
  8139d4:	08136140 	call	813614 <__umodsi3>
  8139d8:	d9800317 	ldw	r6,12(sp)
  8139dc:	1006943a 	slli	r3,r2,16
  8139e0:	9004d43a 	srli	r2,r18,16
  8139e4:	b9a3383a 	mul	r17,r23,r6
  8139e8:	10c4b03a 	or	r2,r2,r3
  8139ec:	1440062e 	bgeu	r2,r17,813a08 <__divdf3+0x39c>
  8139f0:	1705883a 	add	r2,r2,fp
  8139f4:	30ffffc4 	addi	r3,r6,-1
  8139f8:	1700ee36 	bltu	r2,fp,813db4 <__divdf3+0x748>
  8139fc:	1440ed2e 	bgeu	r2,r17,813db4 <__divdf3+0x748>
  813a00:	31bfff84 	addi	r6,r6,-2
  813a04:	1705883a 	add	r2,r2,fp
  813a08:	1463c83a 	sub	r17,r2,r17
  813a0c:	a00b883a 	mov	r5,r20
  813a10:	8809883a 	mov	r4,r17
  813a14:	d9800315 	stw	r6,12(sp)
  813a18:	08135b00 	call	8135b0 <__udivsi3>
  813a1c:	a00b883a 	mov	r5,r20
  813a20:	8809883a 	mov	r4,r17
  813a24:	d8800215 	stw	r2,8(sp)
  813a28:	08136140 	call	813614 <__umodsi3>
  813a2c:	d9c00217 	ldw	r7,8(sp)
  813a30:	1004943a 	slli	r2,r2,16
  813a34:	94bfffcc 	andi	r18,r18,65535
  813a38:	b9d1383a 	mul	r8,r23,r7
  813a3c:	90a4b03a 	or	r18,r18,r2
  813a40:	d9800317 	ldw	r6,12(sp)
  813a44:	9200062e 	bgeu	r18,r8,813a60 <__divdf3+0x3f4>
  813a48:	9725883a 	add	r18,r18,fp
  813a4c:	38bfffc4 	addi	r2,r7,-1
  813a50:	9700d636 	bltu	r18,fp,813dac <__divdf3+0x740>
  813a54:	9200d52e 	bgeu	r18,r8,813dac <__divdf3+0x740>
  813a58:	39ffff84 	addi	r7,r7,-2
  813a5c:	9725883a 	add	r18,r18,fp
  813a60:	3004943a 	slli	r2,r6,16
  813a64:	b012d43a 	srli	r9,r22,16
  813a68:	b1bfffcc 	andi	r6,r22,65535
  813a6c:	11e2b03a 	or	r17,r2,r7
  813a70:	8806d43a 	srli	r3,r17,16
  813a74:	893fffcc 	andi	r4,r17,65535
  813a78:	218b383a 	mul	r5,r4,r6
  813a7c:	30c5383a 	mul	r2,r6,r3
  813a80:	2249383a 	mul	r4,r4,r9
  813a84:	280ed43a 	srli	r7,r5,16
  813a88:	9225c83a 	sub	r18,r18,r8
  813a8c:	2089883a 	add	r4,r4,r2
  813a90:	3909883a 	add	r4,r7,r4
  813a94:	1a47383a 	mul	r3,r3,r9
  813a98:	2080022e 	bgeu	r4,r2,813aa4 <__divdf3+0x438>
  813a9c:	00800074 	movhi	r2,1
  813aa0:	1887883a 	add	r3,r3,r2
  813aa4:	2004d43a 	srli	r2,r4,16
  813aa8:	2008943a 	slli	r4,r4,16
  813aac:	297fffcc 	andi	r5,r5,65535
  813ab0:	10c7883a 	add	r3,r2,r3
  813ab4:	2149883a 	add	r4,r4,r5
  813ab8:	90c0a536 	bltu	r18,r3,813d50 <__divdf3+0x6e4>
  813abc:	90c0bf26 	beq	r18,r3,813dbc <__divdf3+0x750>
  813ac0:	90c7c83a 	sub	r3,r18,r3
  813ac4:	810fc83a 	sub	r7,r16,r4
  813ac8:	81e5803a 	cmpltu	r18,r16,r7
  813acc:	1ca5c83a 	sub	r18,r3,r18
  813ad0:	e480c126 	beq	fp,r18,813dd8 <__divdf3+0x76c>
  813ad4:	a00b883a 	mov	r5,r20
  813ad8:	9009883a 	mov	r4,r18
  813adc:	d9800315 	stw	r6,12(sp)
  813ae0:	d9c00215 	stw	r7,8(sp)
  813ae4:	da400115 	stw	r9,4(sp)
  813ae8:	08135b00 	call	8135b0 <__udivsi3>
  813aec:	a00b883a 	mov	r5,r20
  813af0:	9009883a 	mov	r4,r18
  813af4:	d8800015 	stw	r2,0(sp)
  813af8:	08136140 	call	813614 <__umodsi3>
  813afc:	d9c00217 	ldw	r7,8(sp)
  813b00:	da000017 	ldw	r8,0(sp)
  813b04:	1006943a 	slli	r3,r2,16
  813b08:	3804d43a 	srli	r2,r7,16
  813b0c:	ba21383a 	mul	r16,r23,r8
  813b10:	d9800317 	ldw	r6,12(sp)
  813b14:	10c4b03a 	or	r2,r2,r3
  813b18:	da400117 	ldw	r9,4(sp)
  813b1c:	1400062e 	bgeu	r2,r16,813b38 <__divdf3+0x4cc>
  813b20:	1705883a 	add	r2,r2,fp
  813b24:	40ffffc4 	addi	r3,r8,-1
  813b28:	1700ad36 	bltu	r2,fp,813de0 <__divdf3+0x774>
  813b2c:	1400ac2e 	bgeu	r2,r16,813de0 <__divdf3+0x774>
  813b30:	423fff84 	addi	r8,r8,-2
  813b34:	1705883a 	add	r2,r2,fp
  813b38:	1421c83a 	sub	r16,r2,r16
  813b3c:	a00b883a 	mov	r5,r20
  813b40:	8009883a 	mov	r4,r16
  813b44:	d9800315 	stw	r6,12(sp)
  813b48:	d9c00215 	stw	r7,8(sp)
  813b4c:	da000015 	stw	r8,0(sp)
  813b50:	da400115 	stw	r9,4(sp)
  813b54:	08135b00 	call	8135b0 <__udivsi3>
  813b58:	8009883a 	mov	r4,r16
  813b5c:	a00b883a 	mov	r5,r20
  813b60:	1025883a 	mov	r18,r2
  813b64:	08136140 	call	813614 <__umodsi3>
  813b68:	d9c00217 	ldw	r7,8(sp)
  813b6c:	1004943a 	slli	r2,r2,16
  813b70:	bcaf383a 	mul	r23,r23,r18
  813b74:	393fffcc 	andi	r4,r7,65535
  813b78:	2088b03a 	or	r4,r4,r2
  813b7c:	d9800317 	ldw	r6,12(sp)
  813b80:	da000017 	ldw	r8,0(sp)
  813b84:	da400117 	ldw	r9,4(sp)
  813b88:	25c0062e 	bgeu	r4,r23,813ba4 <__divdf3+0x538>
  813b8c:	2709883a 	add	r4,r4,fp
  813b90:	90bfffc4 	addi	r2,r18,-1
  813b94:	27009436 	bltu	r4,fp,813de8 <__divdf3+0x77c>
  813b98:	25c0932e 	bgeu	r4,r23,813de8 <__divdf3+0x77c>
  813b9c:	94bfff84 	addi	r18,r18,-2
  813ba0:	2709883a 	add	r4,r4,fp
  813ba4:	4004943a 	slli	r2,r8,16
  813ba8:	25efc83a 	sub	r23,r4,r23
  813bac:	1490b03a 	or	r8,r2,r18
  813bb0:	4008d43a 	srli	r4,r8,16
  813bb4:	40ffffcc 	andi	r3,r8,65535
  813bb8:	30c5383a 	mul	r2,r6,r3
  813bbc:	1a47383a 	mul	r3,r3,r9
  813bc0:	310d383a 	mul	r6,r6,r4
  813bc4:	100ad43a 	srli	r5,r2,16
  813bc8:	4913383a 	mul	r9,r9,r4
  813bcc:	1987883a 	add	r3,r3,r6
  813bd0:	28c7883a 	add	r3,r5,r3
  813bd4:	1980022e 	bgeu	r3,r6,813be0 <__divdf3+0x574>
  813bd8:	01000074 	movhi	r4,1
  813bdc:	4913883a 	add	r9,r9,r4
  813be0:	1808d43a 	srli	r4,r3,16
  813be4:	1806943a 	slli	r3,r3,16
  813be8:	10bfffcc 	andi	r2,r2,65535
  813bec:	2253883a 	add	r9,r4,r9
  813bf0:	1887883a 	add	r3,r3,r2
  813bf4:	ba403836 	bltu	r23,r9,813cd8 <__divdf3+0x66c>
  813bf8:	ba403626 	beq	r23,r9,813cd4 <__divdf3+0x668>
  813bfc:	42000054 	ori	r8,r8,1
  813c00:	a880ffc4 	addi	r2,r21,1023
  813c04:	00bf570e 	bge	zero,r2,813964 <__alt_mem_onchip_mem+0xff80b964>
  813c08:	40c001cc 	andi	r3,r8,7
  813c0c:	18000726 	beq	r3,zero,813c2c <__divdf3+0x5c0>
  813c10:	40c003cc 	andi	r3,r8,15
  813c14:	01000104 	movi	r4,4
  813c18:	19000426 	beq	r3,r4,813c2c <__divdf3+0x5c0>
  813c1c:	4107883a 	add	r3,r8,r4
  813c20:	1a11803a 	cmpltu	r8,r3,r8
  813c24:	8a23883a 	add	r17,r17,r8
  813c28:	1811883a 	mov	r8,r3
  813c2c:	88c0402c 	andhi	r3,r17,256
  813c30:	18000426 	beq	r3,zero,813c44 <__divdf3+0x5d8>
  813c34:	00ffc034 	movhi	r3,65280
  813c38:	18ffffc4 	addi	r3,r3,-1
  813c3c:	a8810004 	addi	r2,r21,1024
  813c40:	88e2703a 	and	r17,r17,r3
  813c44:	00c1ff84 	movi	r3,2046
  813c48:	18bee316 	blt	r3,r2,8137d8 <__alt_mem_onchip_mem+0xff80b7d8>
  813c4c:	8824977a 	slli	r18,r17,29
  813c50:	4010d0fa 	srli	r8,r8,3
  813c54:	8822927a 	slli	r17,r17,9
  813c58:	1081ffcc 	andi	r2,r2,2047
  813c5c:	9224b03a 	or	r18,r18,r8
  813c60:	880ad33a 	srli	r5,r17,12
  813c64:	98c0004c 	andi	r3,r19,1
  813c68:	003edf06 	br	8137e8 <__alt_mem_onchip_mem+0xff80b7e8>
  813c6c:	8080022c 	andhi	r2,r16,8
  813c70:	10001226 	beq	r2,zero,813cbc <__divdf3+0x650>
  813c74:	8880022c 	andhi	r2,r17,8
  813c78:	1000101e 	bne	r2,zero,813cbc <__divdf3+0x650>
  813c7c:	00800434 	movhi	r2,16
  813c80:	89400234 	orhi	r5,r17,8
  813c84:	10bfffc4 	addi	r2,r2,-1
  813c88:	b007883a 	mov	r3,r22
  813c8c:	288a703a 	and	r5,r5,r2
  813c90:	4025883a 	mov	r18,r8
  813c94:	003f3106 	br	81395c <__alt_mem_onchip_mem+0xff80b95c>
  813c98:	008000c4 	movi	r2,3
  813c9c:	3880a626 	beq	r7,r2,813f38 <__divdf3+0x8cc>
  813ca0:	00800044 	movi	r2,1
  813ca4:	3880521e 	bne	r7,r2,813df0 <__divdf3+0x784>
  813ca8:	b807883a 	mov	r3,r23
  813cac:	0005883a 	mov	r2,zero
  813cb0:	000b883a 	mov	r5,zero
  813cb4:	0025883a 	mov	r18,zero
  813cb8:	003ecb06 	br	8137e8 <__alt_mem_onchip_mem+0xff80b7e8>
  813cbc:	00800434 	movhi	r2,16
  813cc0:	81400234 	orhi	r5,r16,8
  813cc4:	10bfffc4 	addi	r2,r2,-1
  813cc8:	a007883a 	mov	r3,r20
  813ccc:	288a703a 	and	r5,r5,r2
  813cd0:	003f2206 	br	81395c <__alt_mem_onchip_mem+0xff80b95c>
  813cd4:	183fca26 	beq	r3,zero,813c00 <__alt_mem_onchip_mem+0xff80bc00>
  813cd8:	e5ef883a 	add	r23,fp,r23
  813cdc:	40bfffc4 	addi	r2,r8,-1
  813ce0:	bf00392e 	bgeu	r23,fp,813dc8 <__divdf3+0x75c>
  813ce4:	1011883a 	mov	r8,r2
  813ce8:	ba7fc41e 	bne	r23,r9,813bfc <__alt_mem_onchip_mem+0xff80bbfc>
  813cec:	b0ffc31e 	bne	r22,r3,813bfc <__alt_mem_onchip_mem+0xff80bbfc>
  813cf0:	003fc306 	br	813c00 <__alt_mem_onchip_mem+0xff80bc00>
  813cf4:	143ff604 	addi	r16,r2,-40
  813cf8:	9c20983a 	sll	r16,r19,r16
  813cfc:	0025883a 	mov	r18,zero
  813d00:	003ee206 	br	81388c <__alt_mem_onchip_mem+0xff80b88c>
  813d04:	d9800315 	stw	r6,12(sp)
  813d08:	d9c00215 	stw	r7,8(sp)
  813d0c:	08094240 	call	809424 <__clzsi2>
  813d10:	10800804 	addi	r2,r2,32
  813d14:	d9c00217 	ldw	r7,8(sp)
  813d18:	d9800317 	ldw	r6,12(sp)
  813d1c:	003ed106 	br	813864 <__alt_mem_onchip_mem+0xff80b864>
  813d20:	147ff604 	addi	r17,r2,-40
  813d24:	3462983a 	sll	r17,r6,r17
  813d28:	0011883a 	mov	r8,zero
  813d2c:	003ef506 	br	813904 <__alt_mem_onchip_mem+0xff80b904>
  813d30:	3009883a 	mov	r4,r6
  813d34:	d9800315 	stw	r6,12(sp)
  813d38:	da400115 	stw	r9,4(sp)
  813d3c:	08094240 	call	809424 <__clzsi2>
  813d40:	10800804 	addi	r2,r2,32
  813d44:	da400117 	ldw	r9,4(sp)
  813d48:	d9800317 	ldw	r6,12(sp)
  813d4c:	003ee306 	br	8138dc <__alt_mem_onchip_mem+0xff80b8dc>
  813d50:	85a1883a 	add	r16,r16,r22
  813d54:	8585803a 	cmpltu	r2,r16,r22
  813d58:	1705883a 	add	r2,r2,fp
  813d5c:	14a5883a 	add	r18,r2,r18
  813d60:	88bfffc4 	addi	r2,r17,-1
  813d64:	e4800c2e 	bgeu	fp,r18,813d98 <__divdf3+0x72c>
  813d68:	90c03e36 	bltu	r18,r3,813e64 <__divdf3+0x7f8>
  813d6c:	1c806926 	beq	r3,r18,813f14 <__divdf3+0x8a8>
  813d70:	90c7c83a 	sub	r3,r18,r3
  813d74:	1023883a 	mov	r17,r2
  813d78:	003f5206 	br	813ac4 <__alt_mem_onchip_mem+0xff80bac4>
  813d7c:	923f0436 	bltu	r18,r8,813990 <__alt_mem_onchip_mem+0xff80b990>
  813d80:	800897fa 	slli	r4,r16,31
  813d84:	9004d07a 	srli	r2,r18,1
  813d88:	8006d07a 	srli	r3,r16,1
  813d8c:	902097fa 	slli	r16,r18,31
  813d90:	20a4b03a 	or	r18,r4,r2
  813d94:	003f0106 	br	81399c <__alt_mem_onchip_mem+0xff80b99c>
  813d98:	e4bff51e 	bne	fp,r18,813d70 <__alt_mem_onchip_mem+0xff80bd70>
  813d9c:	85bff22e 	bgeu	r16,r22,813d68 <__alt_mem_onchip_mem+0xff80bd68>
  813da0:	e0c7c83a 	sub	r3,fp,r3
  813da4:	1023883a 	mov	r17,r2
  813da8:	003f4606 	br	813ac4 <__alt_mem_onchip_mem+0xff80bac4>
  813dac:	100f883a 	mov	r7,r2
  813db0:	003f2b06 	br	813a60 <__alt_mem_onchip_mem+0xff80ba60>
  813db4:	180d883a 	mov	r6,r3
  813db8:	003f1306 	br	813a08 <__alt_mem_onchip_mem+0xff80ba08>
  813dbc:	813fe436 	bltu	r16,r4,813d50 <__alt_mem_onchip_mem+0xff80bd50>
  813dc0:	0007883a 	mov	r3,zero
  813dc4:	003f3f06 	br	813ac4 <__alt_mem_onchip_mem+0xff80bac4>
  813dc8:	ba402c36 	bltu	r23,r9,813e7c <__divdf3+0x810>
  813dcc:	4dc05426 	beq	r9,r23,813f20 <__divdf3+0x8b4>
  813dd0:	1011883a 	mov	r8,r2
  813dd4:	003f8906 	br	813bfc <__alt_mem_onchip_mem+0xff80bbfc>
  813dd8:	023fffc4 	movi	r8,-1
  813ddc:	003f8806 	br	813c00 <__alt_mem_onchip_mem+0xff80bc00>
  813de0:	1811883a 	mov	r8,r3
  813de4:	003f5406 	br	813b38 <__alt_mem_onchip_mem+0xff80bb38>
  813de8:	1025883a 	mov	r18,r2
  813dec:	003f6d06 	br	813ba4 <__alt_mem_onchip_mem+0xff80bba4>
  813df0:	b827883a 	mov	r19,r23
  813df4:	003f8206 	br	813c00 <__alt_mem_onchip_mem+0xff80bc00>
  813df8:	010007c4 	movi	r4,31
  813dfc:	20c02616 	blt	r4,r3,813e98 <__divdf3+0x82c>
  813e00:	00800804 	movi	r2,32
  813e04:	10c5c83a 	sub	r2,r2,r3
  813e08:	888a983a 	sll	r5,r17,r2
  813e0c:	40c8d83a 	srl	r4,r8,r3
  813e10:	4084983a 	sll	r2,r8,r2
  813e14:	88e2d83a 	srl	r17,r17,r3
  813e18:	2906b03a 	or	r3,r5,r4
  813e1c:	1004c03a 	cmpne	r2,r2,zero
  813e20:	1886b03a 	or	r3,r3,r2
  813e24:	188001cc 	andi	r2,r3,7
  813e28:	10000726 	beq	r2,zero,813e48 <__divdf3+0x7dc>
  813e2c:	188003cc 	andi	r2,r3,15
  813e30:	01000104 	movi	r4,4
  813e34:	11000426 	beq	r2,r4,813e48 <__divdf3+0x7dc>
  813e38:	1805883a 	mov	r2,r3
  813e3c:	10c00104 	addi	r3,r2,4
  813e40:	1885803a 	cmpltu	r2,r3,r2
  813e44:	88a3883a 	add	r17,r17,r2
  813e48:	8880202c 	andhi	r2,r17,128
  813e4c:	10002726 	beq	r2,zero,813eec <__divdf3+0x880>
  813e50:	98c0004c 	andi	r3,r19,1
  813e54:	00800044 	movi	r2,1
  813e58:	000b883a 	mov	r5,zero
  813e5c:	0025883a 	mov	r18,zero
  813e60:	003e6106 	br	8137e8 <__alt_mem_onchip_mem+0xff80b7e8>
  813e64:	85a1883a 	add	r16,r16,r22
  813e68:	8585803a 	cmpltu	r2,r16,r22
  813e6c:	1705883a 	add	r2,r2,fp
  813e70:	14a5883a 	add	r18,r2,r18
  813e74:	8c7fff84 	addi	r17,r17,-2
  813e78:	003f1106 	br	813ac0 <__alt_mem_onchip_mem+0xff80bac0>
  813e7c:	b589883a 	add	r4,r22,r22
  813e80:	25ad803a 	cmpltu	r22,r4,r22
  813e84:	b739883a 	add	fp,r22,fp
  813e88:	40bfff84 	addi	r2,r8,-2
  813e8c:	bf2f883a 	add	r23,r23,fp
  813e90:	202d883a 	mov	r22,r4
  813e94:	003f9306 	br	813ce4 <__alt_mem_onchip_mem+0xff80bce4>
  813e98:	013ff844 	movi	r4,-31
  813e9c:	2085c83a 	sub	r2,r4,r2
  813ea0:	8888d83a 	srl	r4,r17,r2
  813ea4:	00800804 	movi	r2,32
  813ea8:	18802126 	beq	r3,r2,813f30 <__divdf3+0x8c4>
  813eac:	00801004 	movi	r2,64
  813eb0:	10c5c83a 	sub	r2,r2,r3
  813eb4:	8884983a 	sll	r2,r17,r2
  813eb8:	1204b03a 	or	r2,r2,r8
  813ebc:	1004c03a 	cmpne	r2,r2,zero
  813ec0:	2084b03a 	or	r2,r4,r2
  813ec4:	144001cc 	andi	r17,r2,7
  813ec8:	88000d1e 	bne	r17,zero,813f00 <__divdf3+0x894>
  813ecc:	000b883a 	mov	r5,zero
  813ed0:	1024d0fa 	srli	r18,r2,3
  813ed4:	98c0004c 	andi	r3,r19,1
  813ed8:	0005883a 	mov	r2,zero
  813edc:	9464b03a 	or	r18,r18,r17
  813ee0:	003e4106 	br	8137e8 <__alt_mem_onchip_mem+0xff80b7e8>
  813ee4:	1007883a 	mov	r3,r2
  813ee8:	0023883a 	mov	r17,zero
  813eec:	880a927a 	slli	r5,r17,9
  813ef0:	1805883a 	mov	r2,r3
  813ef4:	8822977a 	slli	r17,r17,29
  813ef8:	280ad33a 	srli	r5,r5,12
  813efc:	003ff406 	br	813ed0 <__alt_mem_onchip_mem+0xff80bed0>
  813f00:	10c003cc 	andi	r3,r2,15
  813f04:	01000104 	movi	r4,4
  813f08:	193ff626 	beq	r3,r4,813ee4 <__alt_mem_onchip_mem+0xff80bee4>
  813f0c:	0023883a 	mov	r17,zero
  813f10:	003fca06 	br	813e3c <__alt_mem_onchip_mem+0xff80be3c>
  813f14:	813fd336 	bltu	r16,r4,813e64 <__alt_mem_onchip_mem+0xff80be64>
  813f18:	1023883a 	mov	r17,r2
  813f1c:	003fa806 	br	813dc0 <__alt_mem_onchip_mem+0xff80bdc0>
  813f20:	b0ffd636 	bltu	r22,r3,813e7c <__alt_mem_onchip_mem+0xff80be7c>
  813f24:	1011883a 	mov	r8,r2
  813f28:	b0ff341e 	bne	r22,r3,813bfc <__alt_mem_onchip_mem+0xff80bbfc>
  813f2c:	003f3406 	br	813c00 <__alt_mem_onchip_mem+0xff80bc00>
  813f30:	0005883a 	mov	r2,zero
  813f34:	003fe006 	br	813eb8 <__alt_mem_onchip_mem+0xff80beb8>
  813f38:	00800434 	movhi	r2,16
  813f3c:	89400234 	orhi	r5,r17,8
  813f40:	10bfffc4 	addi	r2,r2,-1
  813f44:	b807883a 	mov	r3,r23
  813f48:	288a703a 	and	r5,r5,r2
  813f4c:	4025883a 	mov	r18,r8
  813f50:	003e8206 	br	81395c <__alt_mem_onchip_mem+0xff80b95c>

00813f54 <__eqdf2>:
  813f54:	2804d53a 	srli	r2,r5,20
  813f58:	3806d53a 	srli	r3,r7,20
  813f5c:	02000434 	movhi	r8,16
  813f60:	423fffc4 	addi	r8,r8,-1
  813f64:	1081ffcc 	andi	r2,r2,2047
  813f68:	0281ffc4 	movi	r10,2047
  813f6c:	2a12703a 	and	r9,r5,r8
  813f70:	18c1ffcc 	andi	r3,r3,2047
  813f74:	3a10703a 	and	r8,r7,r8
  813f78:	280ad7fa 	srli	r5,r5,31
  813f7c:	380ed7fa 	srli	r7,r7,31
  813f80:	12801026 	beq	r2,r10,813fc4 <__eqdf2+0x70>
  813f84:	0281ffc4 	movi	r10,2047
  813f88:	1a800a26 	beq	r3,r10,813fb4 <__eqdf2+0x60>
  813f8c:	10c00226 	beq	r2,r3,813f98 <__eqdf2+0x44>
  813f90:	00800044 	movi	r2,1
  813f94:	f800283a 	ret
  813f98:	4a3ffd1e 	bne	r9,r8,813f90 <__alt_mem_onchip_mem+0xff80bf90>
  813f9c:	21bffc1e 	bne	r4,r6,813f90 <__alt_mem_onchip_mem+0xff80bf90>
  813fa0:	29c00c26 	beq	r5,r7,813fd4 <__eqdf2+0x80>
  813fa4:	103ffa1e 	bne	r2,zero,813f90 <__alt_mem_onchip_mem+0xff80bf90>
  813fa8:	2244b03a 	or	r2,r4,r9
  813fac:	1004c03a 	cmpne	r2,r2,zero
  813fb0:	f800283a 	ret
  813fb4:	3214b03a 	or	r10,r6,r8
  813fb8:	503ff426 	beq	r10,zero,813f8c <__alt_mem_onchip_mem+0xff80bf8c>
  813fbc:	00800044 	movi	r2,1
  813fc0:	f800283a 	ret
  813fc4:	2254b03a 	or	r10,r4,r9
  813fc8:	503fee26 	beq	r10,zero,813f84 <__alt_mem_onchip_mem+0xff80bf84>
  813fcc:	00800044 	movi	r2,1
  813fd0:	f800283a 	ret
  813fd4:	0005883a 	mov	r2,zero
  813fd8:	f800283a 	ret

00813fdc <__fixdfsi>:
  813fdc:	280cd53a 	srli	r6,r5,20
  813fe0:	00c00434 	movhi	r3,16
  813fe4:	18ffffc4 	addi	r3,r3,-1
  813fe8:	3181ffcc 	andi	r6,r6,2047
  813fec:	01c0ff84 	movi	r7,1022
  813ff0:	28c6703a 	and	r3,r5,r3
  813ff4:	280ad7fa 	srli	r5,r5,31
  813ff8:	3980120e 	bge	r7,r6,814044 <__fixdfsi+0x68>
  813ffc:	00810744 	movi	r2,1053
  814000:	11800c16 	blt	r2,r6,814034 <__fixdfsi+0x58>
  814004:	00810cc4 	movi	r2,1075
  814008:	1185c83a 	sub	r2,r2,r6
  81400c:	01c007c4 	movi	r7,31
  814010:	18c00434 	orhi	r3,r3,16
  814014:	38800d16 	blt	r7,r2,81404c <__fixdfsi+0x70>
  814018:	31befb44 	addi	r6,r6,-1043
  81401c:	2084d83a 	srl	r2,r4,r2
  814020:	1986983a 	sll	r3,r3,r6
  814024:	1884b03a 	or	r2,r3,r2
  814028:	28000726 	beq	r5,zero,814048 <__fixdfsi+0x6c>
  81402c:	0085c83a 	sub	r2,zero,r2
  814030:	f800283a 	ret
  814034:	00a00034 	movhi	r2,32768
  814038:	10bfffc4 	addi	r2,r2,-1
  81403c:	2885883a 	add	r2,r5,r2
  814040:	f800283a 	ret
  814044:	0005883a 	mov	r2,zero
  814048:	f800283a 	ret
  81404c:	008104c4 	movi	r2,1043
  814050:	1185c83a 	sub	r2,r2,r6
  814054:	1884d83a 	srl	r2,r3,r2
  814058:	003ff306 	br	814028 <__alt_mem_onchip_mem+0xff80c028>

0081405c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81405c:	defffe04 	addi	sp,sp,-8
  814060:	dfc00115 	stw	ra,4(sp)
  814064:	df000015 	stw	fp,0(sp)
  814068:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  81406c:	d0a00b17 	ldw	r2,-32724(gp)
  814070:	10000326 	beq	r2,zero,814080 <alt_get_errno+0x24>
  814074:	d0a00b17 	ldw	r2,-32724(gp)
  814078:	103ee83a 	callr	r2
  81407c:	00000106 	br	814084 <alt_get_errno+0x28>
  814080:	d0a75204 	addi	r2,gp,-25272
}
  814084:	e037883a 	mov	sp,fp
  814088:	dfc00117 	ldw	ra,4(sp)
  81408c:	df000017 	ldw	fp,0(sp)
  814090:	dec00204 	addi	sp,sp,8
  814094:	f800283a 	ret

00814098 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  814098:	defffb04 	addi	sp,sp,-20
  81409c:	dfc00415 	stw	ra,16(sp)
  8140a0:	df000315 	stw	fp,12(sp)
  8140a4:	df000304 	addi	fp,sp,12
  8140a8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  8140ac:	e0bfff17 	ldw	r2,-4(fp)
  8140b0:	10000616 	blt	r2,zero,8140cc <close+0x34>
  8140b4:	e0bfff17 	ldw	r2,-4(fp)
  8140b8:	10c00324 	muli	r3,r2,12
  8140bc:	008020b4 	movhi	r2,130
  8140c0:	10a3fe04 	addi	r2,r2,-28680
  8140c4:	1885883a 	add	r2,r3,r2
  8140c8:	00000106 	br	8140d0 <close+0x38>
  8140cc:	0005883a 	mov	r2,zero
  8140d0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  8140d4:	e0bffd17 	ldw	r2,-12(fp)
  8140d8:	10001926 	beq	r2,zero,814140 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  8140dc:	e0bffd17 	ldw	r2,-12(fp)
  8140e0:	10800017 	ldw	r2,0(r2)
  8140e4:	10800417 	ldw	r2,16(r2)
  8140e8:	10000626 	beq	r2,zero,814104 <close+0x6c>
  8140ec:	e0bffd17 	ldw	r2,-12(fp)
  8140f0:	10800017 	ldw	r2,0(r2)
  8140f4:	10800417 	ldw	r2,16(r2)
  8140f8:	e13ffd17 	ldw	r4,-12(fp)
  8140fc:	103ee83a 	callr	r2
  814100:	00000106 	br	814108 <close+0x70>
  814104:	0005883a 	mov	r2,zero
  814108:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  81410c:	e13fff17 	ldw	r4,-4(fp)
  814110:	08147580 	call	814758 <alt_release_fd>
    if (rval < 0)
  814114:	e0bffe17 	ldw	r2,-8(fp)
  814118:	1000070e 	bge	r2,zero,814138 <close+0xa0>
    {
      ALT_ERRNO = -rval;
  81411c:	081405c0 	call	81405c <alt_get_errno>
  814120:	1007883a 	mov	r3,r2
  814124:	e0bffe17 	ldw	r2,-8(fp)
  814128:	0085c83a 	sub	r2,zero,r2
  81412c:	18800015 	stw	r2,0(r3)
      return -1;
  814130:	00bfffc4 	movi	r2,-1
  814134:	00000706 	br	814154 <close+0xbc>
    }
    return 0;
  814138:	0005883a 	mov	r2,zero
  81413c:	00000506 	br	814154 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  814140:	081405c0 	call	81405c <alt_get_errno>
  814144:	1007883a 	mov	r3,r2
  814148:	00801444 	movi	r2,81
  81414c:	18800015 	stw	r2,0(r3)
    return -1;
  814150:	00bfffc4 	movi	r2,-1
  }
}
  814154:	e037883a 	mov	sp,fp
  814158:	dfc00117 	ldw	ra,4(sp)
  81415c:	df000017 	ldw	fp,0(sp)
  814160:	dec00204 	addi	sp,sp,8
  814164:	f800283a 	ret

00814168 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  814168:	defffc04 	addi	sp,sp,-16
  81416c:	df000315 	stw	fp,12(sp)
  814170:	df000304 	addi	fp,sp,12
  814174:	e13ffd15 	stw	r4,-12(fp)
  814178:	e17ffe15 	stw	r5,-8(fp)
  81417c:	e1bfff15 	stw	r6,-4(fp)
  return len;
  814180:	e0bfff17 	ldw	r2,-4(fp)
}
  814184:	e037883a 	mov	sp,fp
  814188:	df000017 	ldw	fp,0(sp)
  81418c:	dec00104 	addi	sp,sp,4
  814190:	f800283a 	ret

00814194 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  814194:	defffe04 	addi	sp,sp,-8
  814198:	dfc00115 	stw	ra,4(sp)
  81419c:	df000015 	stw	fp,0(sp)
  8141a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8141a4:	d0a00b17 	ldw	r2,-32724(gp)
  8141a8:	10000326 	beq	r2,zero,8141b8 <alt_get_errno+0x24>
  8141ac:	d0a00b17 	ldw	r2,-32724(gp)
  8141b0:	103ee83a 	callr	r2
  8141b4:	00000106 	br	8141bc <alt_get_errno+0x28>
  8141b8:	d0a75204 	addi	r2,gp,-25272
}
  8141bc:	e037883a 	mov	sp,fp
  8141c0:	dfc00117 	ldw	ra,4(sp)
  8141c4:	df000017 	ldw	fp,0(sp)
  8141c8:	dec00204 	addi	sp,sp,8
  8141cc:	f800283a 	ret

008141d0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  8141d0:	defffb04 	addi	sp,sp,-20
  8141d4:	dfc00415 	stw	ra,16(sp)
  8141d8:	df000315 	stw	fp,12(sp)
  8141dc:	df000304 	addi	fp,sp,12
  8141e0:	e13ffe15 	stw	r4,-8(fp)
  8141e4:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8141e8:	e0bffe17 	ldw	r2,-8(fp)
  8141ec:	10000616 	blt	r2,zero,814208 <fstat+0x38>
  8141f0:	e0bffe17 	ldw	r2,-8(fp)
  8141f4:	10c00324 	muli	r3,r2,12
  8141f8:	008020b4 	movhi	r2,130
  8141fc:	10a3fe04 	addi	r2,r2,-28680
  814200:	1885883a 	add	r2,r3,r2
  814204:	00000106 	br	81420c <fstat+0x3c>
  814208:	0005883a 	mov	r2,zero
  81420c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
  814210:	e0bffd17 	ldw	r2,-12(fp)
  814214:	10001026 	beq	r2,zero,814258 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  814218:	e0bffd17 	ldw	r2,-12(fp)
  81421c:	10800017 	ldw	r2,0(r2)
  814220:	10800817 	ldw	r2,32(r2)
  814224:	10000726 	beq	r2,zero,814244 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
  814228:	e0bffd17 	ldw	r2,-12(fp)
  81422c:	10800017 	ldw	r2,0(r2)
  814230:	10800817 	ldw	r2,32(r2)
  814234:	e17fff17 	ldw	r5,-4(fp)
  814238:	e13ffd17 	ldw	r4,-12(fp)
  81423c:	103ee83a 	callr	r2
  814240:	00000a06 	br	81426c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  814244:	e0bfff17 	ldw	r2,-4(fp)
  814248:	00c80004 	movi	r3,8192
  81424c:	10c00115 	stw	r3,4(r2)
      return 0;
  814250:	0005883a 	mov	r2,zero
  814254:	00000506 	br	81426c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  814258:	08141940 	call	814194 <alt_get_errno>
  81425c:	1007883a 	mov	r3,r2
  814260:	00801444 	movi	r2,81
  814264:	18800015 	stw	r2,0(r3)
    return -1;
  814268:	00bfffc4 	movi	r2,-1
  }
}
  81426c:	e037883a 	mov	sp,fp
  814270:	dfc00117 	ldw	ra,4(sp)
  814274:	df000017 	ldw	fp,0(sp)
  814278:	dec00204 	addi	sp,sp,8
  81427c:	f800283a 	ret

00814280 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  814280:	defffe04 	addi	sp,sp,-8
  814284:	dfc00115 	stw	ra,4(sp)
  814288:	df000015 	stw	fp,0(sp)
  81428c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  814290:	d0a00b17 	ldw	r2,-32724(gp)
  814294:	10000326 	beq	r2,zero,8142a4 <alt_get_errno+0x24>
  814298:	d0a00b17 	ldw	r2,-32724(gp)
  81429c:	103ee83a 	callr	r2
  8142a0:	00000106 	br	8142a8 <alt_get_errno+0x28>
  8142a4:	d0a75204 	addi	r2,gp,-25272
}
  8142a8:	e037883a 	mov	sp,fp
  8142ac:	dfc00117 	ldw	ra,4(sp)
  8142b0:	df000017 	ldw	fp,0(sp)
  8142b4:	dec00204 	addi	sp,sp,8
  8142b8:	f800283a 	ret

008142bc <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  8142bc:	deffed04 	addi	sp,sp,-76
  8142c0:	dfc01215 	stw	ra,72(sp)
  8142c4:	df001115 	stw	fp,68(sp)
  8142c8:	df001104 	addi	fp,sp,68
  8142cc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8142d0:	e0bfff17 	ldw	r2,-4(fp)
  8142d4:	10000616 	blt	r2,zero,8142f0 <isatty+0x34>
  8142d8:	e0bfff17 	ldw	r2,-4(fp)
  8142dc:	10c00324 	muli	r3,r2,12
  8142e0:	008020b4 	movhi	r2,130
  8142e4:	10a3fe04 	addi	r2,r2,-28680
  8142e8:	1885883a 	add	r2,r3,r2
  8142ec:	00000106 	br	8142f4 <isatty+0x38>
  8142f0:	0005883a 	mov	r2,zero
  8142f4:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
  8142f8:	e0bfef17 	ldw	r2,-68(fp)
  8142fc:	10000e26 	beq	r2,zero,814338 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  814300:	e0bfef17 	ldw	r2,-68(fp)
  814304:	10800017 	ldw	r2,0(r2)
  814308:	10800817 	ldw	r2,32(r2)
  81430c:	1000021e 	bne	r2,zero,814318 <isatty+0x5c>
    {
      return 1;
  814310:	00800044 	movi	r2,1
  814314:	00000d06 	br	81434c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  814318:	e0bff004 	addi	r2,fp,-64
  81431c:	100b883a 	mov	r5,r2
  814320:	e13fff17 	ldw	r4,-4(fp)
  814324:	08141d00 	call	8141d0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  814328:	e0bff117 	ldw	r2,-60(fp)
  81432c:	10880020 	cmpeqi	r2,r2,8192
  814330:	10803fcc 	andi	r2,r2,255
  814334:	00000506 	br	81434c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  814338:	08142800 	call	814280 <alt_get_errno>
  81433c:	1007883a 	mov	r3,r2
  814340:	00801444 	movi	r2,81
  814344:	18800015 	stw	r2,0(r3)
    return 0;
  814348:	0005883a 	mov	r2,zero
  }
}
  81434c:	e037883a 	mov	sp,fp
  814350:	dfc00117 	ldw	ra,4(sp)
  814354:	df000017 	ldw	fp,0(sp)
  814358:	dec00204 	addi	sp,sp,8
  81435c:	f800283a 	ret

00814360 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  814360:	defffc04 	addi	sp,sp,-16
  814364:	df000315 	stw	fp,12(sp)
  814368:	df000304 	addi	fp,sp,12
  81436c:	e13ffd15 	stw	r4,-12(fp)
  814370:	e17ffe15 	stw	r5,-8(fp)
  814374:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  814378:	e0fffe17 	ldw	r3,-8(fp)
  81437c:	e0bffd17 	ldw	r2,-12(fp)
  814380:	18800c26 	beq	r3,r2,8143b4 <alt_load_section+0x54>
  {
    while( to != end )
  814384:	00000806 	br	8143a8 <alt_load_section+0x48>
    {
      *to++ = *from++;
  814388:	e0bffe17 	ldw	r2,-8(fp)
  81438c:	10c00104 	addi	r3,r2,4
  814390:	e0fffe15 	stw	r3,-8(fp)
  814394:	e0fffd17 	ldw	r3,-12(fp)
  814398:	19000104 	addi	r4,r3,4
  81439c:	e13ffd15 	stw	r4,-12(fp)
  8143a0:	18c00017 	ldw	r3,0(r3)
  8143a4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  8143a8:	e0fffe17 	ldw	r3,-8(fp)
  8143ac:	e0bfff17 	ldw	r2,-4(fp)
  8143b0:	18bff51e 	bne	r3,r2,814388 <__alt_mem_onchip_mem+0xff80c388>
    {
      *to++ = *from++;
    }
  }
}
  8143b4:	0001883a 	nop
  8143b8:	e037883a 	mov	sp,fp
  8143bc:	df000017 	ldw	fp,0(sp)
  8143c0:	dec00104 	addi	sp,sp,4
  8143c4:	f800283a 	ret

008143c8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  8143c8:	defffe04 	addi	sp,sp,-8
  8143cc:	dfc00115 	stw	ra,4(sp)
  8143d0:	df000015 	stw	fp,0(sp)
  8143d4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  8143d8:	018020b4 	movhi	r6,130
  8143dc:	31a90104 	addi	r6,r6,-23548
  8143e0:	014020b4 	movhi	r5,130
  8143e4:	2961cb04 	addi	r5,r5,-30932
  8143e8:	010020b4 	movhi	r4,130
  8143ec:	21290104 	addi	r4,r4,-23548
  8143f0:	08143600 	call	814360 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  8143f4:	01802034 	movhi	r6,128
  8143f8:	31809104 	addi	r6,r6,580
  8143fc:	01402034 	movhi	r5,128
  814400:	29400804 	addi	r5,r5,32
  814404:	01002034 	movhi	r4,128
  814408:	21000804 	addi	r4,r4,32
  81440c:	08143600 	call	814360 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  814410:	018020b4 	movhi	r6,130
  814414:	31a1cb04 	addi	r6,r6,-30932
  814418:	014020b4 	movhi	r5,130
  81441c:	29606004 	addi	r5,r5,-32384
  814420:	010020b4 	movhi	r4,130
  814424:	21206004 	addi	r4,r4,-32384
  814428:	08143600 	call	814360 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  81442c:	0816ee40 	call	816ee4 <alt_dcache_flush_all>
  alt_icache_flush_all();
  814430:	08170cc0 	call	8170cc <alt_icache_flush_all>
}
  814434:	0001883a 	nop
  814438:	e037883a 	mov	sp,fp
  81443c:	dfc00117 	ldw	ra,4(sp)
  814440:	df000017 	ldw	fp,0(sp)
  814444:	dec00204 	addi	sp,sp,8
  814448:	f800283a 	ret

0081444c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81444c:	defffe04 	addi	sp,sp,-8
  814450:	dfc00115 	stw	ra,4(sp)
  814454:	df000015 	stw	fp,0(sp)
  814458:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  81445c:	d0a00b17 	ldw	r2,-32724(gp)
  814460:	10000326 	beq	r2,zero,814470 <alt_get_errno+0x24>
  814464:	d0a00b17 	ldw	r2,-32724(gp)
  814468:	103ee83a 	callr	r2
  81446c:	00000106 	br	814474 <alt_get_errno+0x28>
  814470:	d0a75204 	addi	r2,gp,-25272
}
  814474:	e037883a 	mov	sp,fp
  814478:	dfc00117 	ldw	ra,4(sp)
  81447c:	df000017 	ldw	fp,0(sp)
  814480:	dec00204 	addi	sp,sp,8
  814484:	f800283a 	ret

00814488 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  814488:	defff904 	addi	sp,sp,-28
  81448c:	dfc00615 	stw	ra,24(sp)
  814490:	df000515 	stw	fp,20(sp)
  814494:	df000504 	addi	fp,sp,20
  814498:	e13ffd15 	stw	r4,-12(fp)
  81449c:	e17ffe15 	stw	r5,-8(fp)
  8144a0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  8144a4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8144a8:	e0bffd17 	ldw	r2,-12(fp)
  8144ac:	10000616 	blt	r2,zero,8144c8 <lseek+0x40>
  8144b0:	e0bffd17 	ldw	r2,-12(fp)
  8144b4:	10c00324 	muli	r3,r2,12
  8144b8:	008020b4 	movhi	r2,130
  8144bc:	10a3fe04 	addi	r2,r2,-28680
  8144c0:	1885883a 	add	r2,r3,r2
  8144c4:	00000106 	br	8144cc <lseek+0x44>
  8144c8:	0005883a 	mov	r2,zero
  8144cc:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
  8144d0:	e0bffc17 	ldw	r2,-16(fp)
  8144d4:	10001026 	beq	r2,zero,814518 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  8144d8:	e0bffc17 	ldw	r2,-16(fp)
  8144dc:	10800017 	ldw	r2,0(r2)
  8144e0:	10800717 	ldw	r2,28(r2)
  8144e4:	10000926 	beq	r2,zero,81450c <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  8144e8:	e0bffc17 	ldw	r2,-16(fp)
  8144ec:	10800017 	ldw	r2,0(r2)
  8144f0:	10800717 	ldw	r2,28(r2)
  8144f4:	e1bfff17 	ldw	r6,-4(fp)
  8144f8:	e17ffe17 	ldw	r5,-8(fp)
  8144fc:	e13ffc17 	ldw	r4,-16(fp)
  814500:	103ee83a 	callr	r2
  814504:	e0bffb15 	stw	r2,-20(fp)
  814508:	00000506 	br	814520 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  81450c:	00bfde84 	movi	r2,-134
  814510:	e0bffb15 	stw	r2,-20(fp)
  814514:	00000206 	br	814520 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
  814518:	00bfebc4 	movi	r2,-81
  81451c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
  814520:	e0bffb17 	ldw	r2,-20(fp)
  814524:	1000070e 	bge	r2,zero,814544 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
  814528:	081444c0 	call	81444c <alt_get_errno>
  81452c:	1007883a 	mov	r3,r2
  814530:	e0bffb17 	ldw	r2,-20(fp)
  814534:	0085c83a 	sub	r2,zero,r2
  814538:	18800015 	stw	r2,0(r3)
    rc = -1;
  81453c:	00bfffc4 	movi	r2,-1
  814540:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
  814544:	e0bffb17 	ldw	r2,-20(fp)
}
  814548:	e037883a 	mov	sp,fp
  81454c:	dfc00117 	ldw	ra,4(sp)
  814550:	df000017 	ldw	fp,0(sp)
  814554:	dec00204 	addi	sp,sp,8
  814558:	f800283a 	ret

0081455c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  81455c:	defffd04 	addi	sp,sp,-12
  814560:	dfc00215 	stw	ra,8(sp)
  814564:	df000115 	stw	fp,4(sp)
  814568:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  81456c:	0009883a 	mov	r4,zero
  814570:	08149d40 	call	8149d4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  814574:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  814578:	0814a0c0 	call	814a0c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  81457c:	018020b4 	movhi	r6,130
  814580:	31a11d04 	addi	r6,r6,-31628
  814584:	014020b4 	movhi	r5,130
  814588:	29611d04 	addi	r5,r5,-31628
  81458c:	010020b4 	movhi	r4,130
  814590:	21211d04 	addi	r4,r4,-31628
  814594:	08174640 	call	817464 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  814598:	081700c0 	call	81700c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  81459c:	01002074 	movhi	r4,129
  8145a0:	211c1b04 	addi	r4,r4,28780
  8145a4:	0817dec0 	call	817dec <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  8145a8:	d0a75317 	ldw	r2,-25268(gp)
  8145ac:	d0e75417 	ldw	r3,-25264(gp)
  8145b0:	d1275517 	ldw	r4,-25260(gp)
  8145b4:	200d883a 	mov	r6,r4
  8145b8:	180b883a 	mov	r5,r3
  8145bc:	1009883a 	mov	r4,r2
  8145c0:	08002900 	call	800290 <main>
  8145c4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  8145c8:	01000044 	movi	r4,1
  8145cc:	08140980 	call	814098 <close>
  exit (result);
  8145d0:	e13fff17 	ldw	r4,-4(fp)
  8145d4:	0817e000 	call	817e00 <exit>

008145d8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  8145d8:	defffe04 	addi	sp,sp,-8
  8145dc:	df000115 	stw	fp,4(sp)
  8145e0:	df000104 	addi	fp,sp,4
  8145e4:	e13fff15 	stw	r4,-4(fp)
}
  8145e8:	0001883a 	nop
  8145ec:	e037883a 	mov	sp,fp
  8145f0:	df000017 	ldw	fp,0(sp)
  8145f4:	dec00104 	addi	sp,sp,4
  8145f8:	f800283a 	ret

008145fc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  8145fc:	defffe04 	addi	sp,sp,-8
  814600:	df000115 	stw	fp,4(sp)
  814604:	df000104 	addi	fp,sp,4
  814608:	e13fff15 	stw	r4,-4(fp)
}
  81460c:	0001883a 	nop
  814610:	e037883a 	mov	sp,fp
  814614:	df000017 	ldw	fp,0(sp)
  814618:	dec00104 	addi	sp,sp,4
  81461c:	f800283a 	ret

00814620 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  814620:	defffe04 	addi	sp,sp,-8
  814624:	dfc00115 	stw	ra,4(sp)
  814628:	df000015 	stw	fp,0(sp)
  81462c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  814630:	d0a00b17 	ldw	r2,-32724(gp)
  814634:	10000326 	beq	r2,zero,814644 <alt_get_errno+0x24>
  814638:	d0a00b17 	ldw	r2,-32724(gp)
  81463c:	103ee83a 	callr	r2
  814640:	00000106 	br	814648 <alt_get_errno+0x28>
  814644:	d0a75204 	addi	r2,gp,-25272
}
  814648:	e037883a 	mov	sp,fp
  81464c:	dfc00117 	ldw	ra,4(sp)
  814650:	df000017 	ldw	fp,0(sp)
  814654:	dec00204 	addi	sp,sp,8
  814658:	f800283a 	ret

0081465c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  81465c:	defff904 	addi	sp,sp,-28
  814660:	dfc00615 	stw	ra,24(sp)
  814664:	df000515 	stw	fp,20(sp)
  814668:	df000504 	addi	fp,sp,20
  81466c:	e13ffd15 	stw	r4,-12(fp)
  814670:	e17ffe15 	stw	r5,-8(fp)
  814674:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  814678:	e0bffd17 	ldw	r2,-12(fp)
  81467c:	10000616 	blt	r2,zero,814698 <read+0x3c>
  814680:	e0bffd17 	ldw	r2,-12(fp)
  814684:	10c00324 	muli	r3,r2,12
  814688:	008020b4 	movhi	r2,130
  81468c:	10a3fe04 	addi	r2,r2,-28680
  814690:	1885883a 	add	r2,r3,r2
  814694:	00000106 	br	81469c <read+0x40>
  814698:	0005883a 	mov	r2,zero
  81469c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  8146a0:	e0bffb17 	ldw	r2,-20(fp)
  8146a4:	10002226 	beq	r2,zero,814730 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  8146a8:	e0bffb17 	ldw	r2,-20(fp)
  8146ac:	10800217 	ldw	r2,8(r2)
  8146b0:	108000cc 	andi	r2,r2,3
  8146b4:	10800060 	cmpeqi	r2,r2,1
  8146b8:	1000181e 	bne	r2,zero,81471c <read+0xc0>
        (fd->dev->read))
  8146bc:	e0bffb17 	ldw	r2,-20(fp)
  8146c0:	10800017 	ldw	r2,0(r2)
  8146c4:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  8146c8:	10001426 	beq	r2,zero,81471c <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  8146cc:	e0bffb17 	ldw	r2,-20(fp)
  8146d0:	10800017 	ldw	r2,0(r2)
  8146d4:	10800517 	ldw	r2,20(r2)
  8146d8:	e0ffff17 	ldw	r3,-4(fp)
  8146dc:	180d883a 	mov	r6,r3
  8146e0:	e17ffe17 	ldw	r5,-8(fp)
  8146e4:	e13ffb17 	ldw	r4,-20(fp)
  8146e8:	103ee83a 	callr	r2
  8146ec:	e0bffc15 	stw	r2,-16(fp)
  8146f0:	e0bffc17 	ldw	r2,-16(fp)
  8146f4:	1000070e 	bge	r2,zero,814714 <read+0xb8>
        {
          ALT_ERRNO = -rval;
  8146f8:	08146200 	call	814620 <alt_get_errno>
  8146fc:	1007883a 	mov	r3,r2
  814700:	e0bffc17 	ldw	r2,-16(fp)
  814704:	0085c83a 	sub	r2,zero,r2
  814708:	18800015 	stw	r2,0(r3)
          return -1;
  81470c:	00bfffc4 	movi	r2,-1
  814710:	00000c06 	br	814744 <read+0xe8>
        }
        return rval;
  814714:	e0bffc17 	ldw	r2,-16(fp)
  814718:	00000a06 	br	814744 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
  81471c:	08146200 	call	814620 <alt_get_errno>
  814720:	1007883a 	mov	r3,r2
  814724:	00800344 	movi	r2,13
  814728:	18800015 	stw	r2,0(r3)
  81472c:	00000406 	br	814740 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  814730:	08146200 	call	814620 <alt_get_errno>
  814734:	1007883a 	mov	r3,r2
  814738:	00801444 	movi	r2,81
  81473c:	18800015 	stw	r2,0(r3)
  }
  return -1;
  814740:	00bfffc4 	movi	r2,-1
}
  814744:	e037883a 	mov	sp,fp
  814748:	dfc00117 	ldw	ra,4(sp)
  81474c:	df000017 	ldw	fp,0(sp)
  814750:	dec00204 	addi	sp,sp,8
  814754:	f800283a 	ret

00814758 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  814758:	defffe04 	addi	sp,sp,-8
  81475c:	df000115 	stw	fp,4(sp)
  814760:	df000104 	addi	fp,sp,4
  814764:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  814768:	e0bfff17 	ldw	r2,-4(fp)
  81476c:	108000d0 	cmplti	r2,r2,3
  814770:	10000d1e 	bne	r2,zero,8147a8 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  814774:	008020b4 	movhi	r2,130
  814778:	10a3fe04 	addi	r2,r2,-28680
  81477c:	e0ffff17 	ldw	r3,-4(fp)
  814780:	18c00324 	muli	r3,r3,12
  814784:	10c5883a 	add	r2,r2,r3
  814788:	10800204 	addi	r2,r2,8
  81478c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  814790:	008020b4 	movhi	r2,130
  814794:	10a3fe04 	addi	r2,r2,-28680
  814798:	e0ffff17 	ldw	r3,-4(fp)
  81479c:	18c00324 	muli	r3,r3,12
  8147a0:	10c5883a 	add	r2,r2,r3
  8147a4:	10000015 	stw	zero,0(r2)
  }
}
  8147a8:	0001883a 	nop
  8147ac:	e037883a 	mov	sp,fp
  8147b0:	df000017 	ldw	fp,0(sp)
  8147b4:	dec00104 	addi	sp,sp,4
  8147b8:	f800283a 	ret

008147bc <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  8147bc:	defff904 	addi	sp,sp,-28
  8147c0:	df000615 	stw	fp,24(sp)
  8147c4:	df000604 	addi	fp,sp,24
  8147c8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8147cc:	0005303a 	rdctl	r2,status
  8147d0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8147d4:	e0fffe17 	ldw	r3,-8(fp)
  8147d8:	00bfff84 	movi	r2,-2
  8147dc:	1884703a 	and	r2,r3,r2
  8147e0:	1001703a 	wrctl	status,r2
  
  return context;
  8147e4:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  8147e8:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  8147ec:	d0a00c17 	ldw	r2,-32720(gp)
  8147f0:	10c000c4 	addi	r3,r2,3
  8147f4:	00bfff04 	movi	r2,-4
  8147f8:	1884703a 	and	r2,r3,r2
  8147fc:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  814800:	d0e00c17 	ldw	r3,-32720(gp)
  814804:	e0bfff17 	ldw	r2,-4(fp)
  814808:	1887883a 	add	r3,r3,r2
  81480c:	00804034 	movhi	r2,256
  814810:	10800004 	addi	r2,r2,0
  814814:	10c0062e 	bgeu	r2,r3,814830 <sbrk+0x74>
  814818:	e0bffb17 	ldw	r2,-20(fp)
  81481c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814820:	e0bffa17 	ldw	r2,-24(fp)
  814824:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  814828:	00bfffc4 	movi	r2,-1
  81482c:	00000b06 	br	81485c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
  814830:	d0a00c17 	ldw	r2,-32720(gp)
  814834:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
  814838:	d0e00c17 	ldw	r3,-32720(gp)
  81483c:	e0bfff17 	ldw	r2,-4(fp)
  814840:	1885883a 	add	r2,r3,r2
  814844:	d0a00c15 	stw	r2,-32720(gp)
  814848:	e0bffb17 	ldw	r2,-20(fp)
  81484c:	e0bffc15 	stw	r2,-16(fp)
  814850:	e0bffc17 	ldw	r2,-16(fp)
  814854:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  814858:	e0bffd17 	ldw	r2,-12(fp)
} 
  81485c:	e037883a 	mov	sp,fp
  814860:	df000017 	ldw	fp,0(sp)
  814864:	dec00104 	addi	sp,sp,4
  814868:	f800283a 	ret

0081486c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81486c:	defffe04 	addi	sp,sp,-8
  814870:	dfc00115 	stw	ra,4(sp)
  814874:	df000015 	stw	fp,0(sp)
  814878:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  81487c:	d0a00b17 	ldw	r2,-32724(gp)
  814880:	10000326 	beq	r2,zero,814890 <alt_get_errno+0x24>
  814884:	d0a00b17 	ldw	r2,-32724(gp)
  814888:	103ee83a 	callr	r2
  81488c:	00000106 	br	814894 <alt_get_errno+0x28>
  814890:	d0a75204 	addi	r2,gp,-25272
}
  814894:	e037883a 	mov	sp,fp
  814898:	dfc00117 	ldw	ra,4(sp)
  81489c:	df000017 	ldw	fp,0(sp)
  8148a0:	dec00204 	addi	sp,sp,8
  8148a4:	f800283a 	ret

008148a8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  8148a8:	defff904 	addi	sp,sp,-28
  8148ac:	dfc00615 	stw	ra,24(sp)
  8148b0:	df000515 	stw	fp,20(sp)
  8148b4:	df000504 	addi	fp,sp,20
  8148b8:	e13ffd15 	stw	r4,-12(fp)
  8148bc:	e17ffe15 	stw	r5,-8(fp)
  8148c0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8148c4:	e0bffd17 	ldw	r2,-12(fp)
  8148c8:	10000616 	blt	r2,zero,8148e4 <write+0x3c>
  8148cc:	e0bffd17 	ldw	r2,-12(fp)
  8148d0:	10c00324 	muli	r3,r2,12
  8148d4:	008020b4 	movhi	r2,130
  8148d8:	10a3fe04 	addi	r2,r2,-28680
  8148dc:	1885883a 	add	r2,r3,r2
  8148e0:	00000106 	br	8148e8 <write+0x40>
  8148e4:	0005883a 	mov	r2,zero
  8148e8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  8148ec:	e0bffb17 	ldw	r2,-20(fp)
  8148f0:	10002126 	beq	r2,zero,814978 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  8148f4:	e0bffb17 	ldw	r2,-20(fp)
  8148f8:	10800217 	ldw	r2,8(r2)
  8148fc:	108000cc 	andi	r2,r2,3
  814900:	10001826 	beq	r2,zero,814964 <write+0xbc>
  814904:	e0bffb17 	ldw	r2,-20(fp)
  814908:	10800017 	ldw	r2,0(r2)
  81490c:	10800617 	ldw	r2,24(r2)
  814910:	10001426 	beq	r2,zero,814964 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  814914:	e0bffb17 	ldw	r2,-20(fp)
  814918:	10800017 	ldw	r2,0(r2)
  81491c:	10800617 	ldw	r2,24(r2)
  814920:	e0ffff17 	ldw	r3,-4(fp)
  814924:	180d883a 	mov	r6,r3
  814928:	e17ffe17 	ldw	r5,-8(fp)
  81492c:	e13ffb17 	ldw	r4,-20(fp)
  814930:	103ee83a 	callr	r2
  814934:	e0bffc15 	stw	r2,-16(fp)
  814938:	e0bffc17 	ldw	r2,-16(fp)
  81493c:	1000070e 	bge	r2,zero,81495c <write+0xb4>
      {
        ALT_ERRNO = -rval;
  814940:	081486c0 	call	81486c <alt_get_errno>
  814944:	1007883a 	mov	r3,r2
  814948:	e0bffc17 	ldw	r2,-16(fp)
  81494c:	0085c83a 	sub	r2,zero,r2
  814950:	18800015 	stw	r2,0(r3)
        return -1;
  814954:	00bfffc4 	movi	r2,-1
  814958:	00000c06 	br	81498c <write+0xe4>
      }
      return rval;
  81495c:	e0bffc17 	ldw	r2,-16(fp)
  814960:	00000a06 	br	81498c <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
  814964:	081486c0 	call	81486c <alt_get_errno>
  814968:	1007883a 	mov	r3,r2
  81496c:	00800344 	movi	r2,13
  814970:	18800015 	stw	r2,0(r3)
  814974:	00000406 	br	814988 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  814978:	081486c0 	call	81486c <alt_get_errno>
  81497c:	1007883a 	mov	r3,r2
  814980:	00801444 	movi	r2,81
  814984:	18800015 	stw	r2,0(r3)
  }
  return -1;
  814988:	00bfffc4 	movi	r2,-1
}
  81498c:	e037883a 	mov	sp,fp
  814990:	dfc00117 	ldw	ra,4(sp)
  814994:	df000017 	ldw	fp,0(sp)
  814998:	dec00204 	addi	sp,sp,8
  81499c:	f800283a 	ret

008149a0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  8149a0:	defffd04 	addi	sp,sp,-12
  8149a4:	dfc00215 	stw	ra,8(sp)
  8149a8:	df000115 	stw	fp,4(sp)
  8149ac:	df000104 	addi	fp,sp,4
  8149b0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  8149b4:	d1600804 	addi	r5,gp,-32736
  8149b8:	e13fff17 	ldw	r4,-4(fp)
  8149bc:	0816f680 	call	816f68 <alt_dev_llist_insert>
}
  8149c0:	e037883a 	mov	sp,fp
  8149c4:	dfc00117 	ldw	ra,4(sp)
  8149c8:	df000017 	ldw	fp,0(sp)
  8149cc:	dec00204 	addi	sp,sp,8
  8149d0:	f800283a 	ret

008149d4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  8149d4:	defffd04 	addi	sp,sp,-12
  8149d8:	dfc00215 	stw	ra,8(sp)
  8149dc:	df000115 	stw	fp,4(sp)
  8149e0:	df000104 	addi	fp,sp,4
  8149e4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
  8149e8:	08179080 	call	817908 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  8149ec:	00800044 	movi	r2,1
  8149f0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  8149f4:	0001883a 	nop
  8149f8:	e037883a 	mov	sp,fp
  8149fc:	dfc00117 	ldw	ra,4(sp)
  814a00:	df000017 	ldw	fp,0(sp)
  814a04:	dec00204 	addi	sp,sp,8
  814a08:	f800283a 	ret

00814a0c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  814a0c:	defffe04 	addi	sp,sp,-8
  814a10:	dfc00115 	stw	ra,4(sp)
  814a14:	df000015 	stw	fp,0(sp)
  814a18:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  814a1c:	01c0fa04 	movi	r7,1000
  814a20:	01800084 	movi	r6,2
  814a24:	000b883a 	mov	r5,zero
  814a28:	01004074 	movhi	r4,257
  814a2c:	21040804 	addi	r4,r4,4128
  814a30:	08164640 	call	816464 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  814a34:	01800044 	movi	r6,1
  814a38:	000b883a 	mov	r5,zero
  814a3c:	010020b4 	movhi	r4,130
  814a40:	21246804 	addi	r4,r4,-28256
  814a44:	0814c0c0 	call	814c0c <altera_avalon_jtag_uart_init>
  814a48:	010020b4 	movhi	r4,130
  814a4c:	21245e04 	addi	r4,r4,-28296
  814a50:	08149a00 	call	8149a0 <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD, lcd);
  814a54:	010020b4 	movhi	r4,130
  814a58:	21288004 	addi	r4,r4,-24064
  814a5c:	08162580 	call	816258 <altera_avalon_lcd_16207_init>
  814a60:	010020b4 	movhi	r4,130
  814a64:	21287604 	addi	r4,r4,-24104
  814a68:	08149a00 	call	8149a0 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
  814a6c:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART, uart);
  814a70:	000d883a 	mov	r6,zero
  814a74:	000b883a 	mov	r5,zero
  814a78:	010020b4 	movhi	r4,130
  814a7c:	2128c804 	addi	r4,r4,-23776
  814a80:	08165f00 	call	8165f0 <altera_avalon_uart_init>
  814a84:	010020b4 	movhi	r4,130
  814a88:	2128be04 	addi	r4,r4,-23816
  814a8c:	08149a00 	call	8149a0 <alt_dev_reg>
}
  814a90:	0001883a 	nop
  814a94:	e037883a 	mov	sp,fp
  814a98:	dfc00117 	ldw	ra,4(sp)
  814a9c:	df000017 	ldw	fp,0(sp)
  814aa0:	dec00204 	addi	sp,sp,8
  814aa4:	f800283a 	ret

00814aa8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  814aa8:	defffa04 	addi	sp,sp,-24
  814aac:	dfc00515 	stw	ra,20(sp)
  814ab0:	df000415 	stw	fp,16(sp)
  814ab4:	df000404 	addi	fp,sp,16
  814ab8:	e13ffd15 	stw	r4,-12(fp)
  814abc:	e17ffe15 	stw	r5,-8(fp)
  814ac0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  814ac4:	e0bffd17 	ldw	r2,-12(fp)
  814ac8:	10800017 	ldw	r2,0(r2)
  814acc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  814ad0:	e0bffc17 	ldw	r2,-16(fp)
  814ad4:	10c00a04 	addi	r3,r2,40
  814ad8:	e0bffd17 	ldw	r2,-12(fp)
  814adc:	10800217 	ldw	r2,8(r2)
  814ae0:	100f883a 	mov	r7,r2
  814ae4:	e1bfff17 	ldw	r6,-4(fp)
  814ae8:	e17ffe17 	ldw	r5,-8(fp)
  814aec:	1809883a 	mov	r4,r3
  814af0:	08150d00 	call	8150d0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  814af4:	e037883a 	mov	sp,fp
  814af8:	dfc00117 	ldw	ra,4(sp)
  814afc:	df000017 	ldw	fp,0(sp)
  814b00:	dec00204 	addi	sp,sp,8
  814b04:	f800283a 	ret

00814b08 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  814b08:	defffa04 	addi	sp,sp,-24
  814b0c:	dfc00515 	stw	ra,20(sp)
  814b10:	df000415 	stw	fp,16(sp)
  814b14:	df000404 	addi	fp,sp,16
  814b18:	e13ffd15 	stw	r4,-12(fp)
  814b1c:	e17ffe15 	stw	r5,-8(fp)
  814b20:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  814b24:	e0bffd17 	ldw	r2,-12(fp)
  814b28:	10800017 	ldw	r2,0(r2)
  814b2c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  814b30:	e0bffc17 	ldw	r2,-16(fp)
  814b34:	10c00a04 	addi	r3,r2,40
  814b38:	e0bffd17 	ldw	r2,-12(fp)
  814b3c:	10800217 	ldw	r2,8(r2)
  814b40:	100f883a 	mov	r7,r2
  814b44:	e1bfff17 	ldw	r6,-4(fp)
  814b48:	e17ffe17 	ldw	r5,-8(fp)
  814b4c:	1809883a 	mov	r4,r3
  814b50:	08152ec0 	call	8152ec <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  814b54:	e037883a 	mov	sp,fp
  814b58:	dfc00117 	ldw	ra,4(sp)
  814b5c:	df000017 	ldw	fp,0(sp)
  814b60:	dec00204 	addi	sp,sp,8
  814b64:	f800283a 	ret

00814b68 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  814b68:	defffc04 	addi	sp,sp,-16
  814b6c:	dfc00315 	stw	ra,12(sp)
  814b70:	df000215 	stw	fp,8(sp)
  814b74:	df000204 	addi	fp,sp,8
  814b78:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  814b7c:	e0bfff17 	ldw	r2,-4(fp)
  814b80:	10800017 	ldw	r2,0(r2)
  814b84:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  814b88:	e0bffe17 	ldw	r2,-8(fp)
  814b8c:	10c00a04 	addi	r3,r2,40
  814b90:	e0bfff17 	ldw	r2,-4(fp)
  814b94:	10800217 	ldw	r2,8(r2)
  814b98:	100b883a 	mov	r5,r2
  814b9c:	1809883a 	mov	r4,r3
  814ba0:	0814f780 	call	814f78 <altera_avalon_jtag_uart_close>
}
  814ba4:	e037883a 	mov	sp,fp
  814ba8:	dfc00117 	ldw	ra,4(sp)
  814bac:	df000017 	ldw	fp,0(sp)
  814bb0:	dec00204 	addi	sp,sp,8
  814bb4:	f800283a 	ret

00814bb8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  814bb8:	defffa04 	addi	sp,sp,-24
  814bbc:	dfc00515 	stw	ra,20(sp)
  814bc0:	df000415 	stw	fp,16(sp)
  814bc4:	df000404 	addi	fp,sp,16
  814bc8:	e13ffd15 	stw	r4,-12(fp)
  814bcc:	e17ffe15 	stw	r5,-8(fp)
  814bd0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  814bd4:	e0bffd17 	ldw	r2,-12(fp)
  814bd8:	10800017 	ldw	r2,0(r2)
  814bdc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  814be0:	e0bffc17 	ldw	r2,-16(fp)
  814be4:	10800a04 	addi	r2,r2,40
  814be8:	e1bfff17 	ldw	r6,-4(fp)
  814bec:	e17ffe17 	ldw	r5,-8(fp)
  814bf0:	1009883a 	mov	r4,r2
  814bf4:	0814fe00 	call	814fe0 <altera_avalon_jtag_uart_ioctl>
}
  814bf8:	e037883a 	mov	sp,fp
  814bfc:	dfc00117 	ldw	ra,4(sp)
  814c00:	df000017 	ldw	fp,0(sp)
  814c04:	dec00204 	addi	sp,sp,8
  814c08:	f800283a 	ret

00814c0c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  814c0c:	defffa04 	addi	sp,sp,-24
  814c10:	dfc00515 	stw	ra,20(sp)
  814c14:	df000415 	stw	fp,16(sp)
  814c18:	df000404 	addi	fp,sp,16
  814c1c:	e13ffd15 	stw	r4,-12(fp)
  814c20:	e17ffe15 	stw	r5,-8(fp)
  814c24:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  814c28:	e0bffd17 	ldw	r2,-12(fp)
  814c2c:	00c00044 	movi	r3,1
  814c30:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  814c34:	e0bffd17 	ldw	r2,-12(fp)
  814c38:	10800017 	ldw	r2,0(r2)
  814c3c:	10800104 	addi	r2,r2,4
  814c40:	1007883a 	mov	r3,r2
  814c44:	e0bffd17 	ldw	r2,-12(fp)
  814c48:	10800817 	ldw	r2,32(r2)
  814c4c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  814c50:	e0bffe17 	ldw	r2,-8(fp)
  814c54:	e0ffff17 	ldw	r3,-4(fp)
  814c58:	d8000015 	stw	zero,0(sp)
  814c5c:	e1fffd17 	ldw	r7,-12(fp)
  814c60:	01802074 	movhi	r6,129
  814c64:	31933304 	addi	r6,r6,19660
  814c68:	180b883a 	mov	r5,r3
  814c6c:	1009883a 	mov	r4,r2
  814c70:	08171000 	call	817100 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  814c74:	e0bffd17 	ldw	r2,-12(fp)
  814c78:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  814c7c:	e0bffd17 	ldw	r2,-12(fp)
  814c80:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  814c84:	d0e75717 	ldw	r3,-25252(gp)
  814c88:	e1fffd17 	ldw	r7,-12(fp)
  814c8c:	01802074 	movhi	r6,129
  814c90:	3193b604 	addi	r6,r6,20184
  814c94:	180b883a 	mov	r5,r3
  814c98:	1009883a 	mov	r4,r2
  814c9c:	0816db80 	call	816db8 <alt_alarm_start>
  814ca0:	1000040e 	bge	r2,zero,814cb4 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  814ca4:	e0fffd17 	ldw	r3,-12(fp)
  814ca8:	00a00034 	movhi	r2,32768
  814cac:	10bfffc4 	addi	r2,r2,-1
  814cb0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  814cb4:	0001883a 	nop
  814cb8:	e037883a 	mov	sp,fp
  814cbc:	dfc00117 	ldw	ra,4(sp)
  814cc0:	df000017 	ldw	fp,0(sp)
  814cc4:	dec00204 	addi	sp,sp,8
  814cc8:	f800283a 	ret

00814ccc <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  814ccc:	defff804 	addi	sp,sp,-32
  814cd0:	df000715 	stw	fp,28(sp)
  814cd4:	df000704 	addi	fp,sp,28
  814cd8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  814cdc:	e0bfff17 	ldw	r2,-4(fp)
  814ce0:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
  814ce4:	e0bffb17 	ldw	r2,-20(fp)
  814ce8:	10800017 	ldw	r2,0(r2)
  814cec:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  814cf0:	e0bffc17 	ldw	r2,-16(fp)
  814cf4:	10800104 	addi	r2,r2,4
  814cf8:	10800037 	ldwio	r2,0(r2)
  814cfc:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  814d00:	e0bffd17 	ldw	r2,-12(fp)
  814d04:	1080c00c 	andi	r2,r2,768
  814d08:	10006d26 	beq	r2,zero,814ec0 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  814d0c:	e0bffd17 	ldw	r2,-12(fp)
  814d10:	1080400c 	andi	r2,r2,256
  814d14:	10003526 	beq	r2,zero,814dec <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  814d18:	00800074 	movhi	r2,1
  814d1c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  814d20:	e0bffb17 	ldw	r2,-20(fp)
  814d24:	10800a17 	ldw	r2,40(r2)
  814d28:	10800044 	addi	r2,r2,1
  814d2c:	1081ffcc 	andi	r2,r2,2047
  814d30:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
  814d34:	e0bffb17 	ldw	r2,-20(fp)
  814d38:	10c00b17 	ldw	r3,44(r2)
  814d3c:	e0bffe17 	ldw	r2,-8(fp)
  814d40:	18801526 	beq	r3,r2,814d98 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  814d44:	e0bffc17 	ldw	r2,-16(fp)
  814d48:	10800037 	ldwio	r2,0(r2)
  814d4c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  814d50:	e0bff917 	ldw	r2,-28(fp)
  814d54:	10a0000c 	andi	r2,r2,32768
  814d58:	10001126 	beq	r2,zero,814da0 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  814d5c:	e0bffb17 	ldw	r2,-20(fp)
  814d60:	10800a17 	ldw	r2,40(r2)
  814d64:	e0fff917 	ldw	r3,-28(fp)
  814d68:	1809883a 	mov	r4,r3
  814d6c:	e0fffb17 	ldw	r3,-20(fp)
  814d70:	1885883a 	add	r2,r3,r2
  814d74:	10800e04 	addi	r2,r2,56
  814d78:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  814d7c:	e0bffb17 	ldw	r2,-20(fp)
  814d80:	10800a17 	ldw	r2,40(r2)
  814d84:	10800044 	addi	r2,r2,1
  814d88:	10c1ffcc 	andi	r3,r2,2047
  814d8c:	e0bffb17 	ldw	r2,-20(fp)
  814d90:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  814d94:	003fe206 	br	814d20 <__alt_mem_onchip_mem+0xff80cd20>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
  814d98:	0001883a 	nop
  814d9c:	00000106 	br	814da4 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
  814da0:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  814da4:	e0bff917 	ldw	r2,-28(fp)
  814da8:	10bfffec 	andhi	r2,r2,65535
  814dac:	10000f26 	beq	r2,zero,814dec <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  814db0:	e0bffb17 	ldw	r2,-20(fp)
  814db4:	10c00817 	ldw	r3,32(r2)
  814db8:	00bfff84 	movi	r2,-2
  814dbc:	1886703a 	and	r3,r3,r2
  814dc0:	e0bffb17 	ldw	r2,-20(fp)
  814dc4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  814dc8:	e0bffc17 	ldw	r2,-16(fp)
  814dcc:	10800104 	addi	r2,r2,4
  814dd0:	1007883a 	mov	r3,r2
  814dd4:	e0bffb17 	ldw	r2,-20(fp)
  814dd8:	10800817 	ldw	r2,32(r2)
  814ddc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  814de0:	e0bffc17 	ldw	r2,-16(fp)
  814de4:	10800104 	addi	r2,r2,4
  814de8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  814dec:	e0bffd17 	ldw	r2,-12(fp)
  814df0:	1080800c 	andi	r2,r2,512
  814df4:	103fbe26 	beq	r2,zero,814cf0 <__alt_mem_onchip_mem+0xff80ccf0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  814df8:	e0bffd17 	ldw	r2,-12(fp)
  814dfc:	1004d43a 	srli	r2,r2,16
  814e00:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  814e04:	00001406 	br	814e58 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  814e08:	e0bffc17 	ldw	r2,-16(fp)
  814e0c:	e0fffb17 	ldw	r3,-20(fp)
  814e10:	18c00d17 	ldw	r3,52(r3)
  814e14:	e13ffb17 	ldw	r4,-20(fp)
  814e18:	20c7883a 	add	r3,r4,r3
  814e1c:	18c20e04 	addi	r3,r3,2104
  814e20:	18c00003 	ldbu	r3,0(r3)
  814e24:	18c03fcc 	andi	r3,r3,255
  814e28:	18c0201c 	xori	r3,r3,128
  814e2c:	18ffe004 	addi	r3,r3,-128
  814e30:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  814e34:	e0bffb17 	ldw	r2,-20(fp)
  814e38:	10800d17 	ldw	r2,52(r2)
  814e3c:	10800044 	addi	r2,r2,1
  814e40:	10c1ffcc 	andi	r3,r2,2047
  814e44:	e0bffb17 	ldw	r2,-20(fp)
  814e48:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  814e4c:	e0bffa17 	ldw	r2,-24(fp)
  814e50:	10bfffc4 	addi	r2,r2,-1
  814e54:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  814e58:	e0bffa17 	ldw	r2,-24(fp)
  814e5c:	10000526 	beq	r2,zero,814e74 <altera_avalon_jtag_uart_irq+0x1a8>
  814e60:	e0bffb17 	ldw	r2,-20(fp)
  814e64:	10c00d17 	ldw	r3,52(r2)
  814e68:	e0bffb17 	ldw	r2,-20(fp)
  814e6c:	10800c17 	ldw	r2,48(r2)
  814e70:	18bfe51e 	bne	r3,r2,814e08 <__alt_mem_onchip_mem+0xff80ce08>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  814e74:	e0bffa17 	ldw	r2,-24(fp)
  814e78:	103f9d26 	beq	r2,zero,814cf0 <__alt_mem_onchip_mem+0xff80ccf0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  814e7c:	e0bffb17 	ldw	r2,-20(fp)
  814e80:	10c00817 	ldw	r3,32(r2)
  814e84:	00bfff44 	movi	r2,-3
  814e88:	1886703a 	and	r3,r3,r2
  814e8c:	e0bffb17 	ldw	r2,-20(fp)
  814e90:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  814e94:	e0bffb17 	ldw	r2,-20(fp)
  814e98:	10800017 	ldw	r2,0(r2)
  814e9c:	10800104 	addi	r2,r2,4
  814ea0:	1007883a 	mov	r3,r2
  814ea4:	e0bffb17 	ldw	r2,-20(fp)
  814ea8:	10800817 	ldw	r2,32(r2)
  814eac:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  814eb0:	e0bffc17 	ldw	r2,-16(fp)
  814eb4:	10800104 	addi	r2,r2,4
  814eb8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  814ebc:	003f8c06 	br	814cf0 <__alt_mem_onchip_mem+0xff80ccf0>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
  814ec0:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
  814ec4:	0001883a 	nop
  814ec8:	e037883a 	mov	sp,fp
  814ecc:	df000017 	ldw	fp,0(sp)
  814ed0:	dec00104 	addi	sp,sp,4
  814ed4:	f800283a 	ret

00814ed8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  814ed8:	defff804 	addi	sp,sp,-32
  814edc:	df000715 	stw	fp,28(sp)
  814ee0:	df000704 	addi	fp,sp,28
  814ee4:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  814ee8:	e0bffb17 	ldw	r2,-20(fp)
  814eec:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  814ef0:	e0bff917 	ldw	r2,-28(fp)
  814ef4:	10800017 	ldw	r2,0(r2)
  814ef8:	10800104 	addi	r2,r2,4
  814efc:	10800037 	ldwio	r2,0(r2)
  814f00:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  814f04:	e0bffa17 	ldw	r2,-24(fp)
  814f08:	1081000c 	andi	r2,r2,1024
  814f0c:	10000b26 	beq	r2,zero,814f3c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  814f10:	e0bff917 	ldw	r2,-28(fp)
  814f14:	10800017 	ldw	r2,0(r2)
  814f18:	10800104 	addi	r2,r2,4
  814f1c:	1007883a 	mov	r3,r2
  814f20:	e0bff917 	ldw	r2,-28(fp)
  814f24:	10800817 	ldw	r2,32(r2)
  814f28:	10810014 	ori	r2,r2,1024
  814f2c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  814f30:	e0bff917 	ldw	r2,-28(fp)
  814f34:	10000915 	stw	zero,36(r2)
  814f38:	00000a06 	br	814f64 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  814f3c:	e0bff917 	ldw	r2,-28(fp)
  814f40:	10c00917 	ldw	r3,36(r2)
  814f44:	00a00034 	movhi	r2,32768
  814f48:	10bfff04 	addi	r2,r2,-4
  814f4c:	10c00536 	bltu	r2,r3,814f64 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
  814f50:	e0bff917 	ldw	r2,-28(fp)
  814f54:	10800917 	ldw	r2,36(r2)
  814f58:	10c00044 	addi	r3,r2,1
  814f5c:	e0bff917 	ldw	r2,-28(fp)
  814f60:	10c00915 	stw	r3,36(r2)
  814f64:	d0a75717 	ldw	r2,-25252(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  814f68:	e037883a 	mov	sp,fp
  814f6c:	df000017 	ldw	fp,0(sp)
  814f70:	dec00104 	addi	sp,sp,4
  814f74:	f800283a 	ret

00814f78 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  814f78:	defffd04 	addi	sp,sp,-12
  814f7c:	df000215 	stw	fp,8(sp)
  814f80:	df000204 	addi	fp,sp,8
  814f84:	e13ffe15 	stw	r4,-8(fp)
  814f88:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  814f8c:	00000506 	br	814fa4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  814f90:	e0bfff17 	ldw	r2,-4(fp)
  814f94:	1090000c 	andi	r2,r2,16384
  814f98:	10000226 	beq	r2,zero,814fa4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  814f9c:	00bffd44 	movi	r2,-11
  814fa0:	00000b06 	br	814fd0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  814fa4:	e0bffe17 	ldw	r2,-8(fp)
  814fa8:	10c00d17 	ldw	r3,52(r2)
  814fac:	e0bffe17 	ldw	r2,-8(fp)
  814fb0:	10800c17 	ldw	r2,48(r2)
  814fb4:	18800526 	beq	r3,r2,814fcc <altera_avalon_jtag_uart_close+0x54>
  814fb8:	e0bffe17 	ldw	r2,-8(fp)
  814fbc:	10c00917 	ldw	r3,36(r2)
  814fc0:	e0bffe17 	ldw	r2,-8(fp)
  814fc4:	10800117 	ldw	r2,4(r2)
  814fc8:	18bff136 	bltu	r3,r2,814f90 <__alt_mem_onchip_mem+0xff80cf90>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  814fcc:	0005883a 	mov	r2,zero
}
  814fd0:	e037883a 	mov	sp,fp
  814fd4:	df000017 	ldw	fp,0(sp)
  814fd8:	dec00104 	addi	sp,sp,4
  814fdc:	f800283a 	ret

00814fe0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  814fe0:	defffa04 	addi	sp,sp,-24
  814fe4:	df000515 	stw	fp,20(sp)
  814fe8:	df000504 	addi	fp,sp,20
  814fec:	e13ffd15 	stw	r4,-12(fp)
  814ff0:	e17ffe15 	stw	r5,-8(fp)
  814ff4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
  814ff8:	00bff9c4 	movi	r2,-25
  814ffc:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
  815000:	e0bffe17 	ldw	r2,-8(fp)
  815004:	10da8060 	cmpeqi	r3,r2,27137
  815008:	1800031e 	bne	r3,zero,815018 <altera_avalon_jtag_uart_ioctl+0x38>
  81500c:	109a80a0 	cmpeqi	r2,r2,27138
  815010:	1000181e 	bne	r2,zero,815074 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
  815014:	00002906 	br	8150bc <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  815018:	e0bffd17 	ldw	r2,-12(fp)
  81501c:	10c00117 	ldw	r3,4(r2)
  815020:	00a00034 	movhi	r2,32768
  815024:	10bfffc4 	addi	r2,r2,-1
  815028:	18802126 	beq	r3,r2,8150b0 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
  81502c:	e0bfff17 	ldw	r2,-4(fp)
  815030:	10800017 	ldw	r2,0(r2)
  815034:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  815038:	e0bffc17 	ldw	r2,-16(fp)
  81503c:	10800090 	cmplti	r2,r2,2
  815040:	1000061e 	bne	r2,zero,81505c <altera_avalon_jtag_uart_ioctl+0x7c>
  815044:	e0fffc17 	ldw	r3,-16(fp)
  815048:	00a00034 	movhi	r2,32768
  81504c:	10bfffc4 	addi	r2,r2,-1
  815050:	18800226 	beq	r3,r2,81505c <altera_avalon_jtag_uart_ioctl+0x7c>
  815054:	e0bffc17 	ldw	r2,-16(fp)
  815058:	00000206 	br	815064 <altera_avalon_jtag_uart_ioctl+0x84>
  81505c:	00a00034 	movhi	r2,32768
  815060:	10bfff84 	addi	r2,r2,-2
  815064:	e0fffd17 	ldw	r3,-12(fp)
  815068:	18800115 	stw	r2,4(r3)
      rc = 0;
  81506c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  815070:	00000f06 	br	8150b0 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  815074:	e0bffd17 	ldw	r2,-12(fp)
  815078:	10c00117 	ldw	r3,4(r2)
  81507c:	00a00034 	movhi	r2,32768
  815080:	10bfffc4 	addi	r2,r2,-1
  815084:	18800c26 	beq	r3,r2,8150b8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  815088:	e0bffd17 	ldw	r2,-12(fp)
  81508c:	10c00917 	ldw	r3,36(r2)
  815090:	e0bffd17 	ldw	r2,-12(fp)
  815094:	10800117 	ldw	r2,4(r2)
  815098:	1885803a 	cmpltu	r2,r3,r2
  81509c:	10c03fcc 	andi	r3,r2,255
  8150a0:	e0bfff17 	ldw	r2,-4(fp)
  8150a4:	10c00015 	stw	r3,0(r2)
      rc = 0;
  8150a8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  8150ac:	00000206 	br	8150b8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
  8150b0:	0001883a 	nop
  8150b4:	00000106 	br	8150bc <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
  8150b8:	0001883a 	nop

  default:
    break;
  }

  return rc;
  8150bc:	e0bffb17 	ldw	r2,-20(fp)
}
  8150c0:	e037883a 	mov	sp,fp
  8150c4:	df000017 	ldw	fp,0(sp)
  8150c8:	dec00104 	addi	sp,sp,4
  8150cc:	f800283a 	ret

008150d0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  8150d0:	defff304 	addi	sp,sp,-52
  8150d4:	dfc00c15 	stw	ra,48(sp)
  8150d8:	df000b15 	stw	fp,44(sp)
  8150dc:	df000b04 	addi	fp,sp,44
  8150e0:	e13ffc15 	stw	r4,-16(fp)
  8150e4:	e17ffd15 	stw	r5,-12(fp)
  8150e8:	e1bffe15 	stw	r6,-8(fp)
  8150ec:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
  8150f0:	e0bffd17 	ldw	r2,-12(fp)
  8150f4:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  8150f8:	00004706 	br	815218 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  8150fc:	e0bffc17 	ldw	r2,-16(fp)
  815100:	10800a17 	ldw	r2,40(r2)
  815104:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  815108:	e0bffc17 	ldw	r2,-16(fp)
  81510c:	10800b17 	ldw	r2,44(r2)
  815110:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
  815114:	e0fff717 	ldw	r3,-36(fp)
  815118:	e0bff817 	ldw	r2,-32(fp)
  81511c:	18800536 	bltu	r3,r2,815134 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  815120:	e0fff717 	ldw	r3,-36(fp)
  815124:	e0bff817 	ldw	r2,-32(fp)
  815128:	1885c83a 	sub	r2,r3,r2
  81512c:	e0bff615 	stw	r2,-40(fp)
  815130:	00000406 	br	815144 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  815134:	00c20004 	movi	r3,2048
  815138:	e0bff817 	ldw	r2,-32(fp)
  81513c:	1885c83a 	sub	r2,r3,r2
  815140:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  815144:	e0bff617 	ldw	r2,-40(fp)
  815148:	10001e26 	beq	r2,zero,8151c4 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
  81514c:	e0fffe17 	ldw	r3,-8(fp)
  815150:	e0bff617 	ldw	r2,-40(fp)
  815154:	1880022e 	bgeu	r3,r2,815160 <altera_avalon_jtag_uart_read+0x90>
        n = space;
  815158:	e0bffe17 	ldw	r2,-8(fp)
  81515c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  815160:	e0bffc17 	ldw	r2,-16(fp)
  815164:	10c00e04 	addi	r3,r2,56
  815168:	e0bff817 	ldw	r2,-32(fp)
  81516c:	1885883a 	add	r2,r3,r2
  815170:	e1bff617 	ldw	r6,-40(fp)
  815174:	100b883a 	mov	r5,r2
  815178:	e13ff517 	ldw	r4,-44(fp)
  81517c:	080e92c0 	call	80e92c <memcpy>
      ptr   += n;
  815180:	e0fff517 	ldw	r3,-44(fp)
  815184:	e0bff617 	ldw	r2,-40(fp)
  815188:	1885883a 	add	r2,r3,r2
  81518c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
  815190:	e0fffe17 	ldw	r3,-8(fp)
  815194:	e0bff617 	ldw	r2,-40(fp)
  815198:	1885c83a 	sub	r2,r3,r2
  81519c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8151a0:	e0fff817 	ldw	r3,-32(fp)
  8151a4:	e0bff617 	ldw	r2,-40(fp)
  8151a8:	1885883a 	add	r2,r3,r2
  8151ac:	10c1ffcc 	andi	r3,r2,2047
  8151b0:	e0bffc17 	ldw	r2,-16(fp)
  8151b4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  8151b8:	e0bffe17 	ldw	r2,-8(fp)
  8151bc:	00bfcf16 	blt	zero,r2,8150fc <__alt_mem_onchip_mem+0xff80d0fc>
  8151c0:	00000106 	br	8151c8 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
  8151c4:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  8151c8:	e0fff517 	ldw	r3,-44(fp)
  8151cc:	e0bffd17 	ldw	r2,-12(fp)
  8151d0:	1880141e 	bne	r3,r2,815224 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  8151d4:	e0bfff17 	ldw	r2,-4(fp)
  8151d8:	1090000c 	andi	r2,r2,16384
  8151dc:	1000131e 	bne	r2,zero,81522c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  8151e0:	0001883a 	nop
  8151e4:	e0bffc17 	ldw	r2,-16(fp)
  8151e8:	10c00a17 	ldw	r3,40(r2)
  8151ec:	e0bff717 	ldw	r2,-36(fp)
  8151f0:	1880051e 	bne	r3,r2,815208 <altera_avalon_jtag_uart_read+0x138>
  8151f4:	e0bffc17 	ldw	r2,-16(fp)
  8151f8:	10c00917 	ldw	r3,36(r2)
  8151fc:	e0bffc17 	ldw	r2,-16(fp)
  815200:	10800117 	ldw	r2,4(r2)
  815204:	18bff736 	bltu	r3,r2,8151e4 <__alt_mem_onchip_mem+0xff80d1e4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  815208:	e0bffc17 	ldw	r2,-16(fp)
  81520c:	10c00a17 	ldw	r3,40(r2)
  815210:	e0bff717 	ldw	r2,-36(fp)
  815214:	18800726 	beq	r3,r2,815234 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  815218:	e0bffe17 	ldw	r2,-8(fp)
  81521c:	00bfb716 	blt	zero,r2,8150fc <__alt_mem_onchip_mem+0xff80d0fc>
  815220:	00000506 	br	815238 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
  815224:	0001883a 	nop
  815228:	00000306 	br	815238 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
  81522c:	0001883a 	nop
  815230:	00000106 	br	815238 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
  815234:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  815238:	e0fff517 	ldw	r3,-44(fp)
  81523c:	e0bffd17 	ldw	r2,-12(fp)
  815240:	18801826 	beq	r3,r2,8152a4 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  815244:	0005303a 	rdctl	r2,status
  815248:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81524c:	e0fffb17 	ldw	r3,-20(fp)
  815250:	00bfff84 	movi	r2,-2
  815254:	1884703a 	and	r2,r3,r2
  815258:	1001703a 	wrctl	status,r2
  
  return context;
  81525c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  815260:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  815264:	e0bffc17 	ldw	r2,-16(fp)
  815268:	10800817 	ldw	r2,32(r2)
  81526c:	10c00054 	ori	r3,r2,1
  815270:	e0bffc17 	ldw	r2,-16(fp)
  815274:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  815278:	e0bffc17 	ldw	r2,-16(fp)
  81527c:	10800017 	ldw	r2,0(r2)
  815280:	10800104 	addi	r2,r2,4
  815284:	1007883a 	mov	r3,r2
  815288:	e0bffc17 	ldw	r2,-16(fp)
  81528c:	10800817 	ldw	r2,32(r2)
  815290:	18800035 	stwio	r2,0(r3)
  815294:	e0bffa17 	ldw	r2,-24(fp)
  815298:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81529c:	e0bff917 	ldw	r2,-28(fp)
  8152a0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  8152a4:	e0fff517 	ldw	r3,-44(fp)
  8152a8:	e0bffd17 	ldw	r2,-12(fp)
  8152ac:	18800426 	beq	r3,r2,8152c0 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
  8152b0:	e0fff517 	ldw	r3,-44(fp)
  8152b4:	e0bffd17 	ldw	r2,-12(fp)
  8152b8:	1885c83a 	sub	r2,r3,r2
  8152bc:	00000606 	br	8152d8 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
  8152c0:	e0bfff17 	ldw	r2,-4(fp)
  8152c4:	1090000c 	andi	r2,r2,16384
  8152c8:	10000226 	beq	r2,zero,8152d4 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  8152cc:	00bffd44 	movi	r2,-11
  8152d0:	00000106 	br	8152d8 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
  8152d4:	00bffec4 	movi	r2,-5
}
  8152d8:	e037883a 	mov	sp,fp
  8152dc:	dfc00117 	ldw	ra,4(sp)
  8152e0:	df000017 	ldw	fp,0(sp)
  8152e4:	dec00204 	addi	sp,sp,8
  8152e8:	f800283a 	ret

008152ec <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  8152ec:	defff304 	addi	sp,sp,-52
  8152f0:	dfc00c15 	stw	ra,48(sp)
  8152f4:	df000b15 	stw	fp,44(sp)
  8152f8:	df000b04 	addi	fp,sp,44
  8152fc:	e13ffc15 	stw	r4,-16(fp)
  815300:	e17ffd15 	stw	r5,-12(fp)
  815304:	e1bffe15 	stw	r6,-8(fp)
  815308:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  81530c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  815310:	e0bffd17 	ldw	r2,-12(fp)
  815314:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  815318:	00003706 	br	8153f8 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  81531c:	e0bffc17 	ldw	r2,-16(fp)
  815320:	10800c17 	ldw	r2,48(r2)
  815324:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
  815328:	e0bffc17 	ldw	r2,-16(fp)
  81532c:	10800d17 	ldw	r2,52(r2)
  815330:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
  815334:	e0fff917 	ldw	r3,-28(fp)
  815338:	e0bff517 	ldw	r2,-44(fp)
  81533c:	1880062e 	bgeu	r3,r2,815358 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  815340:	e0fff517 	ldw	r3,-44(fp)
  815344:	e0bff917 	ldw	r2,-28(fp)
  815348:	1885c83a 	sub	r2,r3,r2
  81534c:	10bfffc4 	addi	r2,r2,-1
  815350:	e0bff615 	stw	r2,-40(fp)
  815354:	00000b06 	br	815384 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
  815358:	e0bff517 	ldw	r2,-44(fp)
  81535c:	10000526 	beq	r2,zero,815374 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  815360:	00c20004 	movi	r3,2048
  815364:	e0bff917 	ldw	r2,-28(fp)
  815368:	1885c83a 	sub	r2,r3,r2
  81536c:	e0bff615 	stw	r2,-40(fp)
  815370:	00000406 	br	815384 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  815374:	00c1ffc4 	movi	r3,2047
  815378:	e0bff917 	ldw	r2,-28(fp)
  81537c:	1885c83a 	sub	r2,r3,r2
  815380:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  815384:	e0bff617 	ldw	r2,-40(fp)
  815388:	10001e26 	beq	r2,zero,815404 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
  81538c:	e0fffe17 	ldw	r3,-8(fp)
  815390:	e0bff617 	ldw	r2,-40(fp)
  815394:	1880022e 	bgeu	r3,r2,8153a0 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
  815398:	e0bffe17 	ldw	r2,-8(fp)
  81539c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  8153a0:	e0bffc17 	ldw	r2,-16(fp)
  8153a4:	10c20e04 	addi	r3,r2,2104
  8153a8:	e0bff917 	ldw	r2,-28(fp)
  8153ac:	1885883a 	add	r2,r3,r2
  8153b0:	e1bff617 	ldw	r6,-40(fp)
  8153b4:	e17ffd17 	ldw	r5,-12(fp)
  8153b8:	1009883a 	mov	r4,r2
  8153bc:	080e92c0 	call	80e92c <memcpy>
      ptr   += n;
  8153c0:	e0fffd17 	ldw	r3,-12(fp)
  8153c4:	e0bff617 	ldw	r2,-40(fp)
  8153c8:	1885883a 	add	r2,r3,r2
  8153cc:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
  8153d0:	e0fffe17 	ldw	r3,-8(fp)
  8153d4:	e0bff617 	ldw	r2,-40(fp)
  8153d8:	1885c83a 	sub	r2,r3,r2
  8153dc:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8153e0:	e0fff917 	ldw	r3,-28(fp)
  8153e4:	e0bff617 	ldw	r2,-40(fp)
  8153e8:	1885883a 	add	r2,r3,r2
  8153ec:	10c1ffcc 	andi	r3,r2,2047
  8153f0:	e0bffc17 	ldw	r2,-16(fp)
  8153f4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  8153f8:	e0bffe17 	ldw	r2,-8(fp)
  8153fc:	00bfc716 	blt	zero,r2,81531c <__alt_mem_onchip_mem+0xff80d31c>
  815400:	00000106 	br	815408 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
  815404:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  815408:	0005303a 	rdctl	r2,status
  81540c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  815410:	e0fffb17 	ldw	r3,-20(fp)
  815414:	00bfff84 	movi	r2,-2
  815418:	1884703a 	and	r2,r3,r2
  81541c:	1001703a 	wrctl	status,r2
  
  return context;
  815420:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  815424:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  815428:	e0bffc17 	ldw	r2,-16(fp)
  81542c:	10800817 	ldw	r2,32(r2)
  815430:	10c00094 	ori	r3,r2,2
  815434:	e0bffc17 	ldw	r2,-16(fp)
  815438:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  81543c:	e0bffc17 	ldw	r2,-16(fp)
  815440:	10800017 	ldw	r2,0(r2)
  815444:	10800104 	addi	r2,r2,4
  815448:	1007883a 	mov	r3,r2
  81544c:	e0bffc17 	ldw	r2,-16(fp)
  815450:	10800817 	ldw	r2,32(r2)
  815454:	18800035 	stwio	r2,0(r3)
  815458:	e0bffa17 	ldw	r2,-24(fp)
  81545c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815460:	e0bff817 	ldw	r2,-32(fp)
  815464:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  815468:	e0bffe17 	ldw	r2,-8(fp)
  81546c:	0080100e 	bge	zero,r2,8154b0 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
  815470:	e0bfff17 	ldw	r2,-4(fp)
  815474:	1090000c 	andi	r2,r2,16384
  815478:	1000101e 	bne	r2,zero,8154bc <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  81547c:	0001883a 	nop
  815480:	e0bffc17 	ldw	r2,-16(fp)
  815484:	10c00d17 	ldw	r3,52(r2)
  815488:	e0bff517 	ldw	r2,-44(fp)
  81548c:	1880051e 	bne	r3,r2,8154a4 <altera_avalon_jtag_uart_write+0x1b8>
  815490:	e0bffc17 	ldw	r2,-16(fp)
  815494:	10c00917 	ldw	r3,36(r2)
  815498:	e0bffc17 	ldw	r2,-16(fp)
  81549c:	10800117 	ldw	r2,4(r2)
  8154a0:	18bff736 	bltu	r3,r2,815480 <__alt_mem_onchip_mem+0xff80d480>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  8154a4:	e0bffc17 	ldw	r2,-16(fp)
  8154a8:	10800917 	ldw	r2,36(r2)
  8154ac:	1000051e 	bne	r2,zero,8154c4 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
  8154b0:	e0bffe17 	ldw	r2,-8(fp)
  8154b4:	00bfd016 	blt	zero,r2,8153f8 <__alt_mem_onchip_mem+0xff80d3f8>
  8154b8:	00000306 	br	8154c8 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
  8154bc:	0001883a 	nop
  8154c0:	00000106 	br	8154c8 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
  8154c4:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  8154c8:	e0fffd17 	ldw	r3,-12(fp)
  8154cc:	e0bff717 	ldw	r2,-36(fp)
  8154d0:	18800426 	beq	r3,r2,8154e4 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
  8154d4:	e0fffd17 	ldw	r3,-12(fp)
  8154d8:	e0bff717 	ldw	r2,-36(fp)
  8154dc:	1885c83a 	sub	r2,r3,r2
  8154e0:	00000606 	br	8154fc <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
  8154e4:	e0bfff17 	ldw	r2,-4(fp)
  8154e8:	1090000c 	andi	r2,r2,16384
  8154ec:	10000226 	beq	r2,zero,8154f8 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
  8154f0:	00bffd44 	movi	r2,-11
  8154f4:	00000106 	br	8154fc <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  8154f8:	00bffec4 	movi	r2,-5
}
  8154fc:	e037883a 	mov	sp,fp
  815500:	dfc00117 	ldw	ra,4(sp)
  815504:	df000017 	ldw	fp,0(sp)
  815508:	dec00204 	addi	sp,sp,8
  81550c:	f800283a 	ret

00815510 <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
  815510:	defffa04 	addi	sp,sp,-24
  815514:	dfc00515 	stw	ra,20(sp)
  815518:	df000415 	stw	fp,16(sp)
  81551c:	df000404 	addi	fp,sp,16
  815520:	e13ffe15 	stw	r4,-8(fp)
  815524:	2805883a 	mov	r2,r5
  815528:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  81552c:	e0bffe17 	ldw	r2,-8(fp)
  815530:	10800017 	ldw	r2,0(r2)
  815534:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  815538:	008003f4 	movhi	r2,15
  81553c:	10909004 	addi	r2,r2,16960
  815540:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  815544:	e0bffe17 	ldw	r2,-8(fp)
  815548:	10800803 	ldbu	r2,32(r2)
  81554c:	10803fcc 	andi	r2,r2,255
  815550:	1080201c 	xori	r2,r2,128
  815554:	10bfe004 	addi	r2,r2,-128
  815558:	1000151e 	bne	r2,zero,8155b0 <lcd_write_command+0xa0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  81555c:	00000906 	br	815584 <lcd_write_command+0x74>
    if (--i == 0)
  815560:	e0bffc17 	ldw	r2,-16(fp)
  815564:	10bfffc4 	addi	r2,r2,-1
  815568:	e0bffc15 	stw	r2,-16(fp)
  81556c:	e0bffc17 	ldw	r2,-16(fp)
  815570:	1000041e 	bne	r2,zero,815584 <lcd_write_command+0x74>
    {
      sp->broken = 1;
  815574:	e0bffe17 	ldw	r2,-8(fp)
  815578:	00c00044 	movi	r3,1
  81557c:	10c00805 	stb	r3,32(r2)
      return;
  815580:	00000c06 	br	8155b4 <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  815584:	e0bffd17 	ldw	r2,-12(fp)
  815588:	10800104 	addi	r2,r2,4
  81558c:	10800037 	ldwio	r2,0(r2)
  815590:	1080200c 	andi	r2,r2,128
  815594:	103ff21e 	bne	r2,zero,815560 <__alt_mem_onchip_mem+0xff80d560>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  815598:	01001904 	movi	r4,100
  81559c:	08178d80 	call	8178d8 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
  8155a0:	e0bffd17 	ldw	r2,-12(fp)
  8155a4:	e0ffff03 	ldbu	r3,-4(fp)
  8155a8:	10c00035 	stwio	r3,0(r2)
  8155ac:	00000106 	br	8155b4 <lcd_write_command+0xa4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  8155b0:	0001883a 	nop
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
}
  8155b4:	e037883a 	mov	sp,fp
  8155b8:	dfc00117 	ldw	ra,4(sp)
  8155bc:	df000017 	ldw	fp,0(sp)
  8155c0:	dec00204 	addi	sp,sp,8
  8155c4:	f800283a 	ret

008155c8 <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
  8155c8:	defffa04 	addi	sp,sp,-24
  8155cc:	dfc00515 	stw	ra,20(sp)
  8155d0:	df000415 	stw	fp,16(sp)
  8155d4:	df000404 	addi	fp,sp,16
  8155d8:	e13ffe15 	stw	r4,-8(fp)
  8155dc:	2805883a 	mov	r2,r5
  8155e0:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  8155e4:	e0bffe17 	ldw	r2,-8(fp)
  8155e8:	10800017 	ldw	r2,0(r2)
  8155ec:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  8155f0:	008003f4 	movhi	r2,15
  8155f4:	10909004 	addi	r2,r2,16960
  8155f8:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  8155fc:	e0bffe17 	ldw	r2,-8(fp)
  815600:	10800803 	ldbu	r2,32(r2)
  815604:	10803fcc 	andi	r2,r2,255
  815608:	1080201c 	xori	r2,r2,128
  81560c:	10bfe004 	addi	r2,r2,-128
  815610:	10001d1e 	bne	r2,zero,815688 <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  815614:	00000906 	br	81563c <lcd_write_data+0x74>
    if (--i == 0)
  815618:	e0bffc17 	ldw	r2,-16(fp)
  81561c:	10bfffc4 	addi	r2,r2,-1
  815620:	e0bffc15 	stw	r2,-16(fp)
  815624:	e0bffc17 	ldw	r2,-16(fp)
  815628:	1000041e 	bne	r2,zero,81563c <lcd_write_data+0x74>
    {
      sp->broken = 1;
  81562c:	e0bffe17 	ldw	r2,-8(fp)
  815630:	00c00044 	movi	r3,1
  815634:	10c00805 	stb	r3,32(r2)
      return;
  815638:	00001406 	br	81568c <lcd_write_data+0xc4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  81563c:	e0bffd17 	ldw	r2,-12(fp)
  815640:	10800104 	addi	r2,r2,4
  815644:	10800037 	ldwio	r2,0(r2)
  815648:	1080200c 	andi	r2,r2,128
  81564c:	103ff21e 	bne	r2,zero,815618 <__alt_mem_onchip_mem+0xff80d618>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  815650:	01001904 	movi	r4,100
  815654:	08178d80 	call	8178d8 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
  815658:	e0bffd17 	ldw	r2,-12(fp)
  81565c:	10800204 	addi	r2,r2,8
  815660:	1007883a 	mov	r3,r2
  815664:	e0bfff03 	ldbu	r2,-4(fp)
  815668:	18800035 	stwio	r2,0(r3)

  sp->address++;
  81566c:	e0bffe17 	ldw	r2,-8(fp)
  815670:	108008c3 	ldbu	r2,35(r2)
  815674:	10800044 	addi	r2,r2,1
  815678:	1007883a 	mov	r3,r2
  81567c:	e0bffe17 	ldw	r2,-8(fp)
  815680:	10c008c5 	stb	r3,35(r2)
  815684:	00000106 	br	81568c <lcd_write_data+0xc4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  815688:	0001883a 	nop
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);

  sp->address++;
}
  81568c:	e037883a 	mov	sp,fp
  815690:	dfc00117 	ldw	ra,4(sp)
  815694:	df000017 	ldw	fp,0(sp)
  815698:	dec00204 	addi	sp,sp,8
  81569c:	f800283a 	ret

008156a0 <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
  8156a0:	defffc04 	addi	sp,sp,-16
  8156a4:	dfc00315 	stw	ra,12(sp)
  8156a8:	df000215 	stw	fp,8(sp)
  8156ac:	df000204 	addi	fp,sp,8
  8156b0:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
  8156b4:	01400044 	movi	r5,1
  8156b8:	e13fff17 	ldw	r4,-4(fp)
  8156bc:	08155100 	call	815510 <lcd_write_command>

  sp->x = 0;
  8156c0:	e0bfff17 	ldw	r2,-4(fp)
  8156c4:	10000845 	stb	zero,33(r2)
  sp->y = 0;
  8156c8:	e0bfff17 	ldw	r2,-4(fp)
  8156cc:	10000885 	stb	zero,34(r2)
  sp->address = 0;
  8156d0:	e0bfff17 	ldw	r2,-4(fp)
  8156d4:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8156d8:	e03ffe15 	stw	zero,-8(fp)
  8156dc:	00001b06 	br	81574c <lcd_clear_screen+0xac>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
  8156e0:	e0bffe17 	ldw	r2,-8(fp)
  8156e4:	108018e4 	muli	r2,r2,99
  8156e8:	10801004 	addi	r2,r2,64
  8156ec:	e0ffff17 	ldw	r3,-4(fp)
  8156f0:	1885883a 	add	r2,r3,r2
  8156f4:	01801444 	movi	r6,81
  8156f8:	01400804 	movi	r5,32
  8156fc:	1009883a 	mov	r4,r2
  815700:	080ea740 	call	80ea74 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
  815704:	e0bffe17 	ldw	r2,-8(fp)
  815708:	108018e4 	muli	r2,r2,99
  81570c:	10800c04 	addi	r2,r2,48
  815710:	e0ffff17 	ldw	r3,-4(fp)
  815714:	1885883a 	add	r2,r3,r2
  815718:	01800404 	movi	r6,16
  81571c:	01400804 	movi	r5,32
  815720:	1009883a 	mov	r4,r2
  815724:	080ea740 	call	80ea74 <memset>
    sp->line[y].width = 0;
  815728:	e0ffff17 	ldw	r3,-4(fp)
  81572c:	e0bffe17 	ldw	r2,-8(fp)
  815730:	108018e4 	muli	r2,r2,99
  815734:	1885883a 	add	r2,r3,r2
  815738:	10802444 	addi	r2,r2,145
  81573c:	10000005 	stb	zero,0(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  815740:	e0bffe17 	ldw	r2,-8(fp)
  815744:	10800044 	addi	r2,r2,1
  815748:	e0bffe15 	stw	r2,-8(fp)
  81574c:	e0bffe17 	ldw	r2,-8(fp)
  815750:	10800090 	cmplti	r2,r2,2
  815754:	103fe21e 	bne	r2,zero,8156e0 <__alt_mem_onchip_mem+0xff80d6e0>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
  815758:	0001883a 	nop
  81575c:	e037883a 	mov	sp,fp
  815760:	dfc00117 	ldw	ra,4(sp)
  815764:	df000017 	ldw	fp,0(sp)
  815768:	dec00204 	addi	sp,sp,8
  81576c:	f800283a 	ret

00815770 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
  815770:	defff704 	addi	sp,sp,-36
  815774:	dfc00815 	stw	ra,32(sp)
  815778:	df000715 	stw	fp,28(sp)
  81577c:	df000704 	addi	fp,sp,28
  815780:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
  815784:	e0bfff17 	ldw	r2,-4(fp)
  815788:	10800943 	ldbu	r2,37(r2)
  81578c:	10803fcc 	andi	r2,r2,255
  815790:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  815794:	e03ff915 	stw	zero,-28(fp)
  815798:	00006706 	br	815938 <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
  81579c:	e0ffff17 	ldw	r3,-4(fp)
  8157a0:	e0bff917 	ldw	r2,-28(fp)
  8157a4:	108018e4 	muli	r2,r2,99
  8157a8:	1885883a 	add	r2,r3,r2
  8157ac:	10802444 	addi	r2,r2,145
  8157b0:	10800003 	ldbu	r2,0(r2)
  8157b4:	10803fcc 	andi	r2,r2,255
  8157b8:	1080201c 	xori	r2,r2,128
  8157bc:	10bfe004 	addi	r2,r2,-128
  8157c0:	e0bffd15 	stw	r2,-12(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
  8157c4:	e0ffff17 	ldw	r3,-4(fp)
  8157c8:	e0bff917 	ldw	r2,-28(fp)
  8157cc:	108018e4 	muli	r2,r2,99
  8157d0:	1885883a 	add	r2,r3,r2
  8157d4:	10802484 	addi	r2,r2,146
  8157d8:	10800003 	ldbu	r2,0(r2)
  8157dc:	10c03fcc 	andi	r3,r2,255
  8157e0:	e0bffc17 	ldw	r2,-16(fp)
  8157e4:	1885383a 	mul	r2,r3,r2
  8157e8:	1005d23a 	srai	r2,r2,8
  8157ec:	e0bffb15 	stw	r2,-20(fp)
    if (offset >= width)
  8157f0:	e0fffb17 	ldw	r3,-20(fp)
  8157f4:	e0bffd17 	ldw	r2,-12(fp)
  8157f8:	18800116 	blt	r3,r2,815800 <lcd_repaint_screen+0x90>
      offset = 0;
  8157fc:	e03ffb15 	stw	zero,-20(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  815800:	e03ffa15 	stw	zero,-24(fp)
  815804:	00004606 	br	815920 <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
  815808:	e0fffa17 	ldw	r3,-24(fp)
  81580c:	e0bffb17 	ldw	r2,-20(fp)
  815810:	1885883a 	add	r2,r3,r2
  815814:	e17ffd17 	ldw	r5,-12(fp)
  815818:	1009883a 	mov	r4,r2
  81581c:	081353c0 	call	81353c <__modsi3>
  815820:	1009883a 	mov	r4,r2
  815824:	e0ffff17 	ldw	r3,-4(fp)
  815828:	e0bff917 	ldw	r2,-28(fp)
  81582c:	108018e4 	muli	r2,r2,99
  815830:	1885883a 	add	r2,r3,r2
  815834:	1105883a 	add	r2,r2,r4
  815838:	10801004 	addi	r2,r2,64
  81583c:	10800003 	ldbu	r2,0(r2)
  815840:	e0bffe05 	stb	r2,-8(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
  815844:	e0ffff17 	ldw	r3,-4(fp)
  815848:	e0bff917 	ldw	r2,-28(fp)
  81584c:	108018e4 	muli	r2,r2,99
  815850:	1887883a 	add	r3,r3,r2
  815854:	e0bffa17 	ldw	r2,-24(fp)
  815858:	1885883a 	add	r2,r3,r2
  81585c:	10800c04 	addi	r2,r2,48
  815860:	10800003 	ldbu	r2,0(r2)
  815864:	10c03fcc 	andi	r3,r2,255
  815868:	18c0201c 	xori	r3,r3,128
  81586c:	18ffe004 	addi	r3,r3,-128
  815870:	e0bffe07 	ldb	r2,-8(fp)
  815874:	18802726 	beq	r3,r2,815914 <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
  815878:	e0fff917 	ldw	r3,-28(fp)
  81587c:	d0a00d04 	addi	r2,gp,-32716
  815880:	1885883a 	add	r2,r3,r2
  815884:	10800003 	ldbu	r2,0(r2)
  815888:	1007883a 	mov	r3,r2
  81588c:	e0bffa17 	ldw	r2,-24(fp)
  815890:	1885883a 	add	r2,r3,r2
  815894:	e0bffe45 	stb	r2,-7(fp)

        if (address != sp->address)
  815898:	e0fffe43 	ldbu	r3,-7(fp)
  81589c:	e0bfff17 	ldw	r2,-4(fp)
  8158a0:	108008c3 	ldbu	r2,35(r2)
  8158a4:	10803fcc 	andi	r2,r2,255
  8158a8:	1080201c 	xori	r2,r2,128
  8158ac:	10bfe004 	addi	r2,r2,-128
  8158b0:	18800a26 	beq	r3,r2,8158dc <lcd_repaint_screen+0x16c>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
  8158b4:	e0fffe43 	ldbu	r3,-7(fp)
  8158b8:	00bfe004 	movi	r2,-128
  8158bc:	1884b03a 	or	r2,r3,r2
  8158c0:	10803fcc 	andi	r2,r2,255
  8158c4:	100b883a 	mov	r5,r2
  8158c8:	e13fff17 	ldw	r4,-4(fp)
  8158cc:	08155100 	call	815510 <lcd_write_command>
          sp->address = address;
  8158d0:	e0fffe43 	ldbu	r3,-7(fp)
  8158d4:	e0bfff17 	ldw	r2,-4(fp)
  8158d8:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
  8158dc:	e0bffe03 	ldbu	r2,-8(fp)
  8158e0:	10803fcc 	andi	r2,r2,255
  8158e4:	100b883a 	mov	r5,r2
  8158e8:	e13fff17 	ldw	r4,-4(fp)
  8158ec:	08155c80 	call	8155c8 <lcd_write_data>
        sp->line[y].visible[x] = c;
  8158f0:	e0ffff17 	ldw	r3,-4(fp)
  8158f4:	e0bff917 	ldw	r2,-28(fp)
  8158f8:	108018e4 	muli	r2,r2,99
  8158fc:	1887883a 	add	r3,r3,r2
  815900:	e0bffa17 	ldw	r2,-24(fp)
  815904:	1885883a 	add	r2,r3,r2
  815908:	10800c04 	addi	r2,r2,48
  81590c:	e0fffe03 	ldbu	r3,-8(fp)
  815910:	10c00005 	stb	r3,0(r2)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  815914:	e0bffa17 	ldw	r2,-24(fp)
  815918:	10800044 	addi	r2,r2,1
  81591c:	e0bffa15 	stw	r2,-24(fp)
  815920:	e0bffa17 	ldw	r2,-24(fp)
  815924:	10800410 	cmplti	r2,r2,16
  815928:	103fb71e 	bne	r2,zero,815808 <__alt_mem_onchip_mem+0xff80d808>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  81592c:	e0bff917 	ldw	r2,-28(fp)
  815930:	10800044 	addi	r2,r2,1
  815934:	e0bff915 	stw	r2,-28(fp)
  815938:	e0bff917 	ldw	r2,-28(fp)
  81593c:	10800090 	cmplti	r2,r2,2
  815940:	103f961e 	bne	r2,zero,81579c <__alt_mem_onchip_mem+0xff80d79c>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
  815944:	0001883a 	nop
  815948:	e037883a 	mov	sp,fp
  81594c:	dfc00117 	ldw	ra,4(sp)
  815950:	df000017 	ldw	fp,0(sp)
  815954:	dec00204 	addi	sp,sp,8
  815958:	f800283a 	ret

0081595c <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  81595c:	defffc04 	addi	sp,sp,-16
  815960:	dfc00315 	stw	ra,12(sp)
  815964:	df000215 	stw	fp,8(sp)
  815968:	df000204 	addi	fp,sp,8
  81596c:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  815970:	e03ffe15 	stw	zero,-8(fp)
  815974:	00001d06 	br	8159ec <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
  815978:	e0bffe17 	ldw	r2,-8(fp)
  81597c:	00800f16 	blt	zero,r2,8159bc <lcd_scroll_up+0x60>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
  815980:	e0bffe17 	ldw	r2,-8(fp)
  815984:	108018e4 	muli	r2,r2,99
  815988:	10801004 	addi	r2,r2,64
  81598c:	e0ffff17 	ldw	r3,-4(fp)
  815990:	1889883a 	add	r4,r3,r2
  815994:	e0bffe17 	ldw	r2,-8(fp)
  815998:	10800044 	addi	r2,r2,1
  81599c:	108018e4 	muli	r2,r2,99
  8159a0:	10801004 	addi	r2,r2,64
  8159a4:	e0ffff17 	ldw	r3,-4(fp)
  8159a8:	1885883a 	add	r2,r3,r2
  8159ac:	01801404 	movi	r6,80
  8159b0:	100b883a 	mov	r5,r2
  8159b4:	080e92c0 	call	80e92c <memcpy>
  8159b8:	00000906 	br	8159e0 <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  8159bc:	e0bffe17 	ldw	r2,-8(fp)
  8159c0:	108018e4 	muli	r2,r2,99
  8159c4:	10801004 	addi	r2,r2,64
  8159c8:	e0ffff17 	ldw	r3,-4(fp)
  8159cc:	1885883a 	add	r2,r3,r2
  8159d0:	01801404 	movi	r6,80
  8159d4:	01400804 	movi	r5,32
  8159d8:	1009883a 	mov	r4,r2
  8159dc:	080ea740 	call	80ea74 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8159e0:	e0bffe17 	ldw	r2,-8(fp)
  8159e4:	10800044 	addi	r2,r2,1
  8159e8:	e0bffe15 	stw	r2,-8(fp)
  8159ec:	e0bffe17 	ldw	r2,-8(fp)
  8159f0:	10800090 	cmplti	r2,r2,2
  8159f4:	103fe01e 	bne	r2,zero,815978 <__alt_mem_onchip_mem+0xff80d978>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
  8159f8:	e0bfff17 	ldw	r2,-4(fp)
  8159fc:	10800883 	ldbu	r2,34(r2)
  815a00:	10bfffc4 	addi	r2,r2,-1
  815a04:	1007883a 	mov	r3,r2
  815a08:	e0bfff17 	ldw	r2,-4(fp)
  815a0c:	10c00885 	stb	r3,34(r2)
}
  815a10:	0001883a 	nop
  815a14:	e037883a 	mov	sp,fp
  815a18:	dfc00117 	ldw	ra,4(sp)
  815a1c:	df000017 	ldw	fp,0(sp)
  815a20:	dec00204 	addi	sp,sp,8
  815a24:	f800283a 	ret

00815a28 <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
  815a28:	defff904 	addi	sp,sp,-28
  815a2c:	dfc00615 	stw	ra,24(sp)
  815a30:	df000515 	stw	fp,20(sp)
  815a34:	df000504 	addi	fp,sp,20
  815a38:	e13ffe15 	stw	r4,-8(fp)
  815a3c:	2805883a 	mov	r2,r5
  815a40:	e0bfff05 	stb	r2,-4(fp)
  int parm1 = 0, parm2 = 0;
  815a44:	e03ffb15 	stw	zero,-20(fp)
  815a48:	e03ffc15 	stw	zero,-16(fp)

  if (sp->escape[0] == '[')
  815a4c:	e0bffe17 	ldw	r2,-8(fp)
  815a50:	10800a03 	ldbu	r2,40(r2)
  815a54:	10803fcc 	andi	r2,r2,255
  815a58:	1080201c 	xori	r2,r2,128
  815a5c:	10bfe004 	addi	r2,r2,-128
  815a60:	108016d8 	cmpnei	r2,r2,91
  815a64:	1000411e 	bne	r2,zero,815b6c <lcd_handle_escape+0x144>
  {
    char * ptr = sp->escape+1;
  815a68:	e0bffe17 	ldw	r2,-8(fp)
  815a6c:	10800a04 	addi	r2,r2,40
  815a70:	10800044 	addi	r2,r2,1
  815a74:	e0bffd15 	stw	r2,-12(fp)
    while (isdigit(*ptr))
  815a78:	00000c06 	br	815aac <lcd_handle_escape+0x84>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
  815a7c:	e0bffb17 	ldw	r2,-20(fp)
  815a80:	10c002a4 	muli	r3,r2,10
  815a84:	e0bffd17 	ldw	r2,-12(fp)
  815a88:	11000044 	addi	r4,r2,1
  815a8c:	e13ffd15 	stw	r4,-12(fp)
  815a90:	10800003 	ldbu	r2,0(r2)
  815a94:	10803fcc 	andi	r2,r2,255
  815a98:	1080201c 	xori	r2,r2,128
  815a9c:	10bfe004 	addi	r2,r2,-128
  815aa0:	10bff404 	addi	r2,r2,-48
  815aa4:	1885883a 	add	r2,r3,r2
  815aa8:	e0bffb15 	stw	r2,-20(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
  815aac:	d0e01117 	ldw	r3,-32700(gp)
  815ab0:	e0bffd17 	ldw	r2,-12(fp)
  815ab4:	10800003 	ldbu	r2,0(r2)
  815ab8:	10803fcc 	andi	r2,r2,255
  815abc:	1080201c 	xori	r2,r2,128
  815ac0:	10bfe004 	addi	r2,r2,-128
  815ac4:	10800044 	addi	r2,r2,1
  815ac8:	1885883a 	add	r2,r3,r2
  815acc:	10800003 	ldbu	r2,0(r2)
  815ad0:	10803fcc 	andi	r2,r2,255
  815ad4:	1080010c 	andi	r2,r2,4
  815ad8:	103fe81e 	bne	r2,zero,815a7c <__alt_mem_onchip_mem+0xff80da7c>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
  815adc:	e0bffd17 	ldw	r2,-12(fp)
  815ae0:	10800003 	ldbu	r2,0(r2)
  815ae4:	10803fcc 	andi	r2,r2,255
  815ae8:	1080201c 	xori	r2,r2,128
  815aec:	10bfe004 	addi	r2,r2,-128
  815af0:	10800ed8 	cmpnei	r2,r2,59
  815af4:	10001f1e 	bne	r2,zero,815b74 <lcd_handle_escape+0x14c>
    {
      ptr++;
  815af8:	e0bffd17 	ldw	r2,-12(fp)
  815afc:	10800044 	addi	r2,r2,1
  815b00:	e0bffd15 	stw	r2,-12(fp)
      while (isdigit(*ptr))
  815b04:	00000c06 	br	815b38 <lcd_handle_escape+0x110>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
  815b08:	e0bffc17 	ldw	r2,-16(fp)
  815b0c:	10c002a4 	muli	r3,r2,10
  815b10:	e0bffd17 	ldw	r2,-12(fp)
  815b14:	11000044 	addi	r4,r2,1
  815b18:	e13ffd15 	stw	r4,-12(fp)
  815b1c:	10800003 	ldbu	r2,0(r2)
  815b20:	10803fcc 	andi	r2,r2,255
  815b24:	1080201c 	xori	r2,r2,128
  815b28:	10bfe004 	addi	r2,r2,-128
  815b2c:	10bff404 	addi	r2,r2,-48
  815b30:	1885883a 	add	r2,r3,r2
  815b34:	e0bffc15 	stw	r2,-16(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
  815b38:	d0e01117 	ldw	r3,-32700(gp)
  815b3c:	e0bffd17 	ldw	r2,-12(fp)
  815b40:	10800003 	ldbu	r2,0(r2)
  815b44:	10803fcc 	andi	r2,r2,255
  815b48:	1080201c 	xori	r2,r2,128
  815b4c:	10bfe004 	addi	r2,r2,-128
  815b50:	10800044 	addi	r2,r2,1
  815b54:	1885883a 	add	r2,r3,r2
  815b58:	10800003 	ldbu	r2,0(r2)
  815b5c:	10803fcc 	andi	r2,r2,255
  815b60:	1080010c 	andi	r2,r2,4
  815b64:	103fe81e 	bne	r2,zero,815b08 <__alt_mem_onchip_mem+0xff80db08>
  815b68:	00000206 	br	815b74 <lcd_handle_escape+0x14c>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
  815b6c:	00bfffc4 	movi	r2,-1
  815b70:	e0bffb15 	stw	r2,-20(fp)

  switch (c)
  815b74:	e0bfff07 	ldb	r2,-4(fp)
  815b78:	10c012a0 	cmpeqi	r3,r2,74
  815b7c:	1800291e 	bne	r3,zero,815c24 <lcd_handle_escape+0x1fc>
  815b80:	10c012c8 	cmpgei	r3,r2,75
  815b84:	1800031e 	bne	r3,zero,815b94 <lcd_handle_escape+0x16c>
  815b88:	10801220 	cmpeqi	r2,r2,72
  815b8c:	1000061e 	bne	r2,zero,815ba8 <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  815b90:	00004a06 	br	815cbc <lcd_handle_escape+0x294>
    }
  }
  else
    parm1 = -1;

  switch (c)
  815b94:	10c012e0 	cmpeqi	r3,r2,75
  815b98:	1800281e 	bne	r3,zero,815c3c <lcd_handle_escape+0x214>
  815b9c:	108019a0 	cmpeqi	r2,r2,102
  815ba0:	1000011e 	bne	r2,zero,815ba8 <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  815ba4:	00004506 	br	815cbc <lcd_handle_escape+0x294>

  switch (c)
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
  815ba8:	e0bffc17 	ldw	r2,-16(fp)
  815bac:	0080050e 	bge	zero,r2,815bc4 <lcd_handle_escape+0x19c>
      sp->x = parm2 - 1;
  815bb0:	e0bffc17 	ldw	r2,-16(fp)
  815bb4:	10bfffc4 	addi	r2,r2,-1
  815bb8:	1007883a 	mov	r3,r2
  815bbc:	e0bffe17 	ldw	r2,-8(fp)
  815bc0:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
  815bc4:	e0bffb17 	ldw	r2,-20(fp)
  815bc8:	0080370e 	bge	zero,r2,815ca8 <lcd_handle_escape+0x280>
    {
      sp->y = parm1 - 1;
  815bcc:	e0bffb17 	ldw	r2,-20(fp)
  815bd0:	10bfffc4 	addi	r2,r2,-1
  815bd4:	1007883a 	mov	r3,r2
  815bd8:	e0bffe17 	ldw	r2,-8(fp)
  815bdc:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
  815be0:	e0bffe17 	ldw	r2,-8(fp)
  815be4:	10800883 	ldbu	r2,34(r2)
  815be8:	10803fcc 	andi	r2,r2,255
  815bec:	10800170 	cmpltui	r2,r2,5
  815bf0:	1000061e 	bne	r2,zero,815c0c <lcd_handle_escape+0x1e4>
        sp->y = ALT_LCD_HEIGHT * 2;
  815bf4:	e0bffe17 	ldw	r2,-8(fp)
  815bf8:	00c00104 	movi	r3,4
  815bfc:	10c00885 	stb	r3,34(r2)
      while (sp->y > ALT_LCD_HEIGHT)
  815c00:	00000206 	br	815c0c <lcd_handle_escape+0x1e4>
        lcd_scroll_up(sp);
  815c04:	e13ffe17 	ldw	r4,-8(fp)
  815c08:	081595c0 	call	81595c <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
  815c0c:	e0bffe17 	ldw	r2,-8(fp)
  815c10:	10800883 	ldbu	r2,34(r2)
  815c14:	10803fcc 	andi	r2,r2,255
  815c18:	108000e8 	cmpgeui	r2,r2,3
  815c1c:	103ff91e 	bne	r2,zero,815c04 <__alt_mem_onchip_mem+0xff80dc04>
        lcd_scroll_up(sp);
    }
    break;
  815c20:	00002106 	br	815ca8 <lcd_handle_escape+0x280>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
  815c24:	e0bffb17 	ldw	r2,-20(fp)
  815c28:	10800098 	cmpnei	r2,r2,2
  815c2c:	1000201e 	bne	r2,zero,815cb0 <lcd_handle_escape+0x288>
      lcd_clear_screen(sp);
  815c30:	e13ffe17 	ldw	r4,-8(fp)
  815c34:	08156a00 	call	8156a0 <lcd_clear_screen>
    break;
  815c38:	00001d06 	br	815cb0 <lcd_handle_escape+0x288>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
  815c3c:	e0bffb17 	ldw	r2,-20(fp)
  815c40:	00801d16 	blt	zero,r2,815cb8 <lcd_handle_escape+0x290>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  815c44:	e0bffe17 	ldw	r2,-8(fp)
  815c48:	10800843 	ldbu	r2,33(r2)
  815c4c:	10803fcc 	andi	r2,r2,255
  815c50:	10801428 	cmpgeui	r2,r2,80
  815c54:	1000181e 	bne	r2,zero,815cb8 <lcd_handle_escape+0x290>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
  815c58:	e0bffe17 	ldw	r2,-8(fp)
  815c5c:	10800883 	ldbu	r2,34(r2)
  815c60:	10803fcc 	andi	r2,r2,255
  815c64:	108018e4 	muli	r2,r2,99
  815c68:	10801004 	addi	r2,r2,64
  815c6c:	e0fffe17 	ldw	r3,-8(fp)
  815c70:	1887883a 	add	r3,r3,r2
  815c74:	e0bffe17 	ldw	r2,-8(fp)
  815c78:	10800843 	ldbu	r2,33(r2)
  815c7c:	10803fcc 	andi	r2,r2,255
  815c80:	1889883a 	add	r4,r3,r2
  815c84:	e0bffe17 	ldw	r2,-8(fp)
  815c88:	10800843 	ldbu	r2,33(r2)
  815c8c:	10803fcc 	andi	r2,r2,255
  815c90:	00c01404 	movi	r3,80
  815c94:	1885c83a 	sub	r2,r3,r2
  815c98:	100d883a 	mov	r6,r2
  815c9c:	01400804 	movi	r5,32
  815ca0:	080ea740 	call	80ea74 <memset>
    }
    break;
  815ca4:	00000406 	br	815cb8 <lcd_handle_escape+0x290>
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
        lcd_scroll_up(sp);
    }
    break;
  815ca8:	0001883a 	nop
  815cac:	00000306 	br	815cbc <lcd_handle_escape+0x294>
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
      lcd_clear_screen(sp);
    break;
  815cb0:	0001883a 	nop
  815cb4:	00000106 	br	815cbc <lcd_handle_escape+0x294>
    if (parm1 < 1)
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  815cb8:	0001883a 	nop
  }
}
  815cbc:	0001883a 	nop
  815cc0:	e037883a 	mov	sp,fp
  815cc4:	dfc00117 	ldw	ra,4(sp)
  815cc8:	df000017 	ldw	fp,0(sp)
  815ccc:	dec00204 	addi	sp,sp,8
  815cd0:	f800283a 	ret

00815cd4 <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
  815cd4:	defff304 	addi	sp,sp,-52
  815cd8:	dfc00c15 	stw	ra,48(sp)
  815cdc:	df000b15 	stw	fp,44(sp)
  815ce0:	df000b04 	addi	fp,sp,44
  815ce4:	e13ffc15 	stw	r4,-16(fp)
  815ce8:	e17ffd15 	stw	r5,-12(fp)
  815cec:	e1bffe15 	stw	r6,-8(fp)
  815cf0:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
  815cf4:	e0bffe17 	ldw	r2,-8(fp)
  815cf8:	e0fffd17 	ldw	r3,-12(fp)
  815cfc:	1885883a 	add	r2,r3,r2
  815d00:	e0bff815 	stw	r2,-32(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
  815d04:	e0bffc17 	ldw	r2,-16(fp)
  815d08:	00c00044 	movi	r3,1
  815d0c:	10c009c5 	stb	r3,39(r2)

  for ( ; ptr < end ; ptr++)
  815d10:	00009906 	br	815f78 <altera_avalon_lcd_16207_write+0x2a4>
  {
    char c = *ptr;
  815d14:	e0bffd17 	ldw	r2,-12(fp)
  815d18:	10800003 	ldbu	r2,0(r2)
  815d1c:	e0bff905 	stb	r2,-28(fp)

    if (sp->esccount >= 0)
  815d20:	e0bffc17 	ldw	r2,-16(fp)
  815d24:	10800903 	ldbu	r2,36(r2)
  815d28:	10803fcc 	andi	r2,r2,255
  815d2c:	1080201c 	xori	r2,r2,128
  815d30:	10bfe004 	addi	r2,r2,-128
  815d34:	10003716 	blt	r2,zero,815e14 <altera_avalon_lcd_16207_write+0x140>
    {
      unsigned int esccount = sp->esccount;
  815d38:	e0bffc17 	ldw	r2,-16(fp)
  815d3c:	10800903 	ldbu	r2,36(r2)
  815d40:	10803fcc 	andi	r2,r2,255
  815d44:	1080201c 	xori	r2,r2,128
  815d48:	10bfe004 	addi	r2,r2,-128
  815d4c:	e0bffa15 	stw	r2,-24(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  815d50:	e0bffa17 	ldw	r2,-24(fp)
  815d54:	1000031e 	bne	r2,zero,815d64 <altera_avalon_lcd_16207_write+0x90>
  815d58:	e0bff907 	ldb	r2,-28(fp)
  815d5c:	108016d8 	cmpnei	r2,r2,91
  815d60:	10000d1e 	bne	r2,zero,815d98 <altera_avalon_lcd_16207_write+0xc4>
  815d64:	e0bffa17 	ldw	r2,-24(fp)
  815d68:	10001826 	beq	r2,zero,815dcc <altera_avalon_lcd_16207_write+0xf8>
          (esccount > 0 && !isdigit(c) && c != ';'))
  815d6c:	d0e01117 	ldw	r3,-32700(gp)
  815d70:	e0bff907 	ldb	r2,-28(fp)
  815d74:	10800044 	addi	r2,r2,1
  815d78:	1885883a 	add	r2,r3,r2
  815d7c:	10800003 	ldbu	r2,0(r2)
  815d80:	10803fcc 	andi	r2,r2,255
  815d84:	1080010c 	andi	r2,r2,4
  815d88:	1000101e 	bne	r2,zero,815dcc <altera_avalon_lcd_16207_write+0xf8>
  815d8c:	e0bff907 	ldb	r2,-28(fp)
  815d90:	10800ee0 	cmpeqi	r2,r2,59
  815d94:	10000d1e 	bne	r2,zero,815dcc <altera_avalon_lcd_16207_write+0xf8>
      {
        sp->escape[esccount] = 0;
  815d98:	e0fffc17 	ldw	r3,-16(fp)
  815d9c:	e0bffa17 	ldw	r2,-24(fp)
  815da0:	1885883a 	add	r2,r3,r2
  815da4:	10800a04 	addi	r2,r2,40
  815da8:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
  815dac:	e0bff907 	ldb	r2,-28(fp)
  815db0:	100b883a 	mov	r5,r2
  815db4:	e13ffc17 	ldw	r4,-16(fp)
  815db8:	0815a280 	call	815a28 <lcd_handle_escape>

        sp->esccount = -1;
  815dbc:	e0bffc17 	ldw	r2,-16(fp)
  815dc0:	00ffffc4 	movi	r3,-1
  815dc4:	10c00905 	stb	r3,36(r2)
  815dc8:	00006806 	br	815f6c <altera_avalon_lcd_16207_write+0x298>
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
  815dcc:	e0bffc17 	ldw	r2,-16(fp)
  815dd0:	10800903 	ldbu	r2,36(r2)
  815dd4:	10803fcc 	andi	r2,r2,255
  815dd8:	108001e8 	cmpgeui	r2,r2,7
  815ddc:	1000631e 	bne	r2,zero,815f6c <altera_avalon_lcd_16207_write+0x298>
      {
        sp->escape[esccount] = c;
  815de0:	e0fffc17 	ldw	r3,-16(fp)
  815de4:	e0bffa17 	ldw	r2,-24(fp)
  815de8:	1885883a 	add	r2,r3,r2
  815dec:	10800a04 	addi	r2,r2,40
  815df0:	e0fff903 	ldbu	r3,-28(fp)
  815df4:	10c00005 	stb	r3,0(r2)
        sp->esccount++;
  815df8:	e0bffc17 	ldw	r2,-16(fp)
  815dfc:	10800903 	ldbu	r2,36(r2)
  815e00:	10800044 	addi	r2,r2,1
  815e04:	1007883a 	mov	r3,r2
  815e08:	e0bffc17 	ldw	r2,-16(fp)
  815e0c:	10c00905 	stb	r3,36(r2)
  815e10:	00005606 	br	815f6c <altera_avalon_lcd_16207_write+0x298>
      }
    }
    else if (c == 27) /* ESC */
  815e14:	e0bff907 	ldb	r2,-28(fp)
  815e18:	108006d8 	cmpnei	r2,r2,27
  815e1c:	1000031e 	bne	r2,zero,815e2c <altera_avalon_lcd_16207_write+0x158>
    {
      sp->esccount = 0;
  815e20:	e0bffc17 	ldw	r2,-16(fp)
  815e24:	10000905 	stb	zero,36(r2)
  815e28:	00005006 	br	815f6c <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\r')
  815e2c:	e0bff907 	ldb	r2,-28(fp)
  815e30:	10800358 	cmpnei	r2,r2,13
  815e34:	1000031e 	bne	r2,zero,815e44 <altera_avalon_lcd_16207_write+0x170>
    {
      sp->x = 0;
  815e38:	e0bffc17 	ldw	r2,-16(fp)
  815e3c:	10000845 	stb	zero,33(r2)
  815e40:	00004a06 	br	815f6c <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\n')
  815e44:	e0bff907 	ldb	r2,-28(fp)
  815e48:	10800298 	cmpnei	r2,r2,10
  815e4c:	1000101e 	bne	r2,zero,815e90 <altera_avalon_lcd_16207_write+0x1bc>
    {
      sp->x = 0;
  815e50:	e0bffc17 	ldw	r2,-16(fp)
  815e54:	10000845 	stb	zero,33(r2)
      sp->y++;
  815e58:	e0bffc17 	ldw	r2,-16(fp)
  815e5c:	10800883 	ldbu	r2,34(r2)
  815e60:	10800044 	addi	r2,r2,1
  815e64:	1007883a 	mov	r3,r2
  815e68:	e0bffc17 	ldw	r2,-16(fp)
  815e6c:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
  815e70:	e0bffc17 	ldw	r2,-16(fp)
  815e74:	10800883 	ldbu	r2,34(r2)
  815e78:	10803fcc 	andi	r2,r2,255
  815e7c:	108000f0 	cmpltui	r2,r2,3
  815e80:	10003a1e 	bne	r2,zero,815f6c <altera_avalon_lcd_16207_write+0x298>
        lcd_scroll_up(sp);
  815e84:	e13ffc17 	ldw	r4,-16(fp)
  815e88:	081595c0 	call	81595c <lcd_scroll_up>
  815e8c:	00003706 	br	815f6c <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\b')
  815e90:	e0bff907 	ldb	r2,-28(fp)
  815e94:	10800218 	cmpnei	r2,r2,8
  815e98:	10000b1e 	bne	r2,zero,815ec8 <altera_avalon_lcd_16207_write+0x1f4>
    {
      if (sp->x > 0)
  815e9c:	e0bffc17 	ldw	r2,-16(fp)
  815ea0:	10800843 	ldbu	r2,33(r2)
  815ea4:	10803fcc 	andi	r2,r2,255
  815ea8:	10003026 	beq	r2,zero,815f6c <altera_avalon_lcd_16207_write+0x298>
        sp->x--;
  815eac:	e0bffc17 	ldw	r2,-16(fp)
  815eb0:	10800843 	ldbu	r2,33(r2)
  815eb4:	10bfffc4 	addi	r2,r2,-1
  815eb8:	1007883a 	mov	r3,r2
  815ebc:	e0bffc17 	ldw	r2,-16(fp)
  815ec0:	10c00845 	stb	r3,33(r2)
  815ec4:	00002906 	br	815f6c <altera_avalon_lcd_16207_write+0x298>
    }
    else if (isprint(c))
  815ec8:	d0e01117 	ldw	r3,-32700(gp)
  815ecc:	e0bff907 	ldb	r2,-28(fp)
  815ed0:	10800044 	addi	r2,r2,1
  815ed4:	1885883a 	add	r2,r3,r2
  815ed8:	10800003 	ldbu	r2,0(r2)
  815edc:	10803fcc 	andi	r2,r2,255
  815ee0:	1080201c 	xori	r2,r2,128
  815ee4:	10bfe004 	addi	r2,r2,-128
  815ee8:	108025cc 	andi	r2,r2,151
  815eec:	10001f26 	beq	r2,zero,815f6c <altera_avalon_lcd_16207_write+0x298>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
  815ef0:	e0bffc17 	ldw	r2,-16(fp)
  815ef4:	10800883 	ldbu	r2,34(r2)
  815ef8:	10803fcc 	andi	r2,r2,255
  815efc:	108000b0 	cmpltui	r2,r2,2
  815f00:	1000021e 	bne	r2,zero,815f0c <altera_avalon_lcd_16207_write+0x238>
        lcd_scroll_up(sp);
  815f04:	e13ffc17 	ldw	r4,-16(fp)
  815f08:	081595c0 	call	81595c <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  815f0c:	e0bffc17 	ldw	r2,-16(fp)
  815f10:	10800843 	ldbu	r2,33(r2)
  815f14:	10803fcc 	andi	r2,r2,255
  815f18:	10801428 	cmpgeui	r2,r2,80
  815f1c:	10000d1e 	bne	r2,zero,815f54 <altera_avalon_lcd_16207_write+0x280>
        sp->line[sp->y].data[sp->x] = c;
  815f20:	e0bffc17 	ldw	r2,-16(fp)
  815f24:	10800883 	ldbu	r2,34(r2)
  815f28:	10c03fcc 	andi	r3,r2,255
  815f2c:	e0bffc17 	ldw	r2,-16(fp)
  815f30:	10800843 	ldbu	r2,33(r2)
  815f34:	10803fcc 	andi	r2,r2,255
  815f38:	e13ffc17 	ldw	r4,-16(fp)
  815f3c:	18c018e4 	muli	r3,r3,99
  815f40:	20c7883a 	add	r3,r4,r3
  815f44:	1885883a 	add	r2,r3,r2
  815f48:	10801004 	addi	r2,r2,64
  815f4c:	e0fff903 	ldbu	r3,-28(fp)
  815f50:	10c00005 	stb	r3,0(r2)

      sp->x++;
  815f54:	e0bffc17 	ldw	r2,-16(fp)
  815f58:	10800843 	ldbu	r2,33(r2)
  815f5c:	10800044 	addi	r2,r2,1
  815f60:	1007883a 	mov	r3,r2
  815f64:	e0bffc17 	ldw	r2,-16(fp)
  815f68:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
  815f6c:	e0bffd17 	ldw	r2,-12(fp)
  815f70:	10800044 	addi	r2,r2,1
  815f74:	e0bffd15 	stw	r2,-12(fp)
  815f78:	e0fffd17 	ldw	r3,-12(fp)
  815f7c:	e0bff817 	ldw	r2,-32(fp)
  815f80:	18bf6436 	bltu	r3,r2,815d14 <__alt_mem_onchip_mem+0xff80dd14>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  815f84:	00800404 	movi	r2,16
  815f88:	e0bff615 	stw	r2,-40(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  815f8c:	e03ff515 	stw	zero,-44(fp)
  815f90:	00003706 	br	816070 <altera_avalon_lcd_16207_write+0x39c>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  815f94:	00801404 	movi	r2,80
  815f98:	e0bff715 	stw	r2,-36(fp)
  815f9c:	00001106 	br	815fe4 <altera_avalon_lcd_16207_write+0x310>
      if (sp->line[y].data[width-1] != ' ')
  815fa0:	e0bff717 	ldw	r2,-36(fp)
  815fa4:	10bfffc4 	addi	r2,r2,-1
  815fa8:	e13ffc17 	ldw	r4,-16(fp)
  815fac:	e0fff517 	ldw	r3,-44(fp)
  815fb0:	18c018e4 	muli	r3,r3,99
  815fb4:	20c7883a 	add	r3,r4,r3
  815fb8:	1885883a 	add	r2,r3,r2
  815fbc:	10801004 	addi	r2,r2,64
  815fc0:	10800003 	ldbu	r2,0(r2)
  815fc4:	10803fcc 	andi	r2,r2,255
  815fc8:	1080201c 	xori	r2,r2,128
  815fcc:	10bfe004 	addi	r2,r2,-128
  815fd0:	10800820 	cmpeqi	r2,r2,32
  815fd4:	10000626 	beq	r2,zero,815ff0 <altera_avalon_lcd_16207_write+0x31c>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  815fd8:	e0bff717 	ldw	r2,-36(fp)
  815fdc:	10bfffc4 	addi	r2,r2,-1
  815fe0:	e0bff715 	stw	r2,-36(fp)
  815fe4:	e0bff717 	ldw	r2,-36(fp)
  815fe8:	00bfed16 	blt	zero,r2,815fa0 <__alt_mem_onchip_mem+0xff80dfa0>
  815fec:	00000106 	br	815ff4 <altera_avalon_lcd_16207_write+0x320>
      if (sp->line[y].data[width-1] != ' ')
        break;
  815ff0:	0001883a 	nop

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
  815ff4:	e0bff717 	ldw	r2,-36(fp)
  815ff8:	10800448 	cmpgei	r2,r2,17
  815ffc:	1000031e 	bne	r2,zero,81600c <altera_avalon_lcd_16207_write+0x338>
      width = ALT_LCD_WIDTH;
  816000:	00800404 	movi	r2,16
  816004:	e0bff715 	stw	r2,-36(fp)
  816008:	00000306 	br	816018 <altera_avalon_lcd_16207_write+0x344>
    else
      width++;
  81600c:	e0bff717 	ldw	r2,-36(fp)
  816010:	10800044 	addi	r2,r2,1
  816014:	e0bff715 	stw	r2,-36(fp)

    sp->line[y].width = width;
  816018:	e0bff717 	ldw	r2,-36(fp)
  81601c:	1009883a 	mov	r4,r2
  816020:	e0fffc17 	ldw	r3,-16(fp)
  816024:	e0bff517 	ldw	r2,-44(fp)
  816028:	108018e4 	muli	r2,r2,99
  81602c:	1885883a 	add	r2,r3,r2
  816030:	10802444 	addi	r2,r2,145
  816034:	11000005 	stb	r4,0(r2)
    if (widthmax < width)
  816038:	e0fff617 	ldw	r3,-40(fp)
  81603c:	e0bff717 	ldw	r2,-36(fp)
  816040:	1880020e 	bge	r3,r2,81604c <altera_avalon_lcd_16207_write+0x378>
      widthmax = width;
  816044:	e0bff717 	ldw	r2,-36(fp)
  816048:	e0bff615 	stw	r2,-40(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
  81604c:	e0fffc17 	ldw	r3,-16(fp)
  816050:	e0bff517 	ldw	r2,-44(fp)
  816054:	108018e4 	muli	r2,r2,99
  816058:	1885883a 	add	r2,r3,r2
  81605c:	10802484 	addi	r2,r2,146
  816060:	10000005 	stb	zero,0(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  816064:	e0bff517 	ldw	r2,-44(fp)
  816068:	10800044 	addi	r2,r2,1
  81606c:	e0bff515 	stw	r2,-44(fp)
  816070:	e0bff517 	ldw	r2,-44(fp)
  816074:	10800090 	cmplti	r2,r2,2
  816078:	103fc61e 	bne	r2,zero,815f94 <__alt_mem_onchip_mem+0xff80df94>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
  81607c:	e0bff617 	ldw	r2,-40(fp)
  816080:	10800448 	cmpgei	r2,r2,17
  816084:	1000031e 	bne	r2,zero,816094 <altera_avalon_lcd_16207_write+0x3c0>
    sp->scrollmax = 0;
  816088:	e0bffc17 	ldw	r2,-16(fp)
  81608c:	10000985 	stb	zero,38(r2)
  816090:	00002e06 	br	81614c <altera_avalon_lcd_16207_write+0x478>
  else
  {
    widthmax *= 2;
  816094:	e0bff617 	ldw	r2,-40(fp)
  816098:	1085883a 	add	r2,r2,r2
  81609c:	e0bff615 	stw	r2,-40(fp)
    sp->scrollmax = widthmax;
  8160a0:	e0bff617 	ldw	r2,-40(fp)
  8160a4:	1007883a 	mov	r3,r2
  8160a8:	e0bffc17 	ldw	r2,-16(fp)
  8160ac:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8160b0:	e03ff515 	stw	zero,-44(fp)
  8160b4:	00002206 	br	816140 <altera_avalon_lcd_16207_write+0x46c>
      if (sp->line[y].width > ALT_LCD_WIDTH)
  8160b8:	e0fffc17 	ldw	r3,-16(fp)
  8160bc:	e0bff517 	ldw	r2,-44(fp)
  8160c0:	108018e4 	muli	r2,r2,99
  8160c4:	1885883a 	add	r2,r3,r2
  8160c8:	10802444 	addi	r2,r2,145
  8160cc:	10800003 	ldbu	r2,0(r2)
  8160d0:	10803fcc 	andi	r2,r2,255
  8160d4:	1080201c 	xori	r2,r2,128
  8160d8:	10bfe004 	addi	r2,r2,-128
  8160dc:	10800450 	cmplti	r2,r2,17
  8160e0:	1000141e 	bne	r2,zero,816134 <altera_avalon_lcd_16207_write+0x460>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
  8160e4:	e0fffc17 	ldw	r3,-16(fp)
  8160e8:	e0bff517 	ldw	r2,-44(fp)
  8160ec:	108018e4 	muli	r2,r2,99
  8160f0:	1885883a 	add	r2,r3,r2
  8160f4:	10802444 	addi	r2,r2,145
  8160f8:	10800003 	ldbu	r2,0(r2)
  8160fc:	10803fcc 	andi	r2,r2,255
  816100:	1080201c 	xori	r2,r2,128
  816104:	10bfe004 	addi	r2,r2,-128
  816108:	1004923a 	slli	r2,r2,8
  81610c:	e17ff617 	ldw	r5,-40(fp)
  816110:	1009883a 	mov	r4,r2
  816114:	08134b80 	call	8134b8 <__divsi3>
  816118:	1009883a 	mov	r4,r2
  81611c:	e0fffc17 	ldw	r3,-16(fp)
  816120:	e0bff517 	ldw	r2,-44(fp)
  816124:	108018e4 	muli	r2,r2,99
  816128:	1885883a 	add	r2,r3,r2
  81612c:	10802484 	addi	r2,r2,146
  816130:	11000005 	stb	r4,0(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  816134:	e0bff517 	ldw	r2,-44(fp)
  816138:	10800044 	addi	r2,r2,1
  81613c:	e0bff515 	stw	r2,-44(fp)
  816140:	e0bff517 	ldw	r2,-44(fp)
  816144:	10800090 	cmplti	r2,r2,2
  816148:	103fdb1e 	bne	r2,zero,8160b8 <__alt_mem_onchip_mem+0xff80e0b8>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
  81614c:	e0bffc17 	ldw	r2,-16(fp)
  816150:	10800943 	ldbu	r2,37(r2)
  816154:	10803fcc 	andi	r2,r2,255
  816158:	e0bffb15 	stw	r2,-20(fp)

    lcd_repaint_screen(sp);
  81615c:	e13ffc17 	ldw	r4,-16(fp)
  816160:	08157700 	call	815770 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
  816164:	e0bffc17 	ldw	r2,-16(fp)
  816168:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
  81616c:	e0bffc17 	ldw	r2,-16(fp)
  816170:	10800943 	ldbu	r2,37(r2)
  816174:	10c03fcc 	andi	r3,r2,255
  816178:	e0bffb17 	ldw	r2,-20(fp)
  81617c:	18800426 	beq	r3,r2,816190 <altera_avalon_lcd_16207_write+0x4bc>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
  816180:	e0bffc17 	ldw	r2,-16(fp)
  816184:	00c00044 	movi	r3,1
  816188:	10c009c5 	stb	r3,39(r2)
  }
  81618c:	003fef06 	br	81614c <__alt_mem_onchip_mem+0xff80e14c>
    sp->active = 0;

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
      break;
  816190:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
  816194:	e0bffe17 	ldw	r2,-8(fp)
}
  816198:	e037883a 	mov	sp,fp
  81619c:	dfc00117 	ldw	ra,4(sp)
  8161a0:	df000017 	ldw	fp,0(sp)
  8161a4:	dec00204 	addi	sp,sp,8
  8161a8:	f800283a 	ret

008161ac <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
  8161ac:	defffc04 	addi	sp,sp,-16
  8161b0:	dfc00315 	stw	ra,12(sp)
  8161b4:	df000215 	stw	fp,8(sp)
  8161b8:	df000204 	addi	fp,sp,8
  8161bc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
  8161c0:	e0bfff17 	ldw	r2,-4(fp)
  8161c4:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
  8161c8:	e0bffe17 	ldw	r2,-8(fp)
  8161cc:	10800943 	ldbu	r2,37(r2)
  8161d0:	10803fcc 	andi	r2,r2,255
  8161d4:	10c00044 	addi	r3,r2,1
  8161d8:	e0bffe17 	ldw	r2,-8(fp)
  8161dc:	10800983 	ldbu	r2,38(r2)
  8161e0:	10803fcc 	andi	r2,r2,255
  8161e4:	18800316 	blt	r3,r2,8161f4 <alt_lcd_16207_timeout+0x48>
    sp->scrollpos = 0;
  8161e8:	e0bffe17 	ldw	r2,-8(fp)
  8161ec:	10000945 	stb	zero,37(r2)
  8161f0:	00000606 	br	81620c <alt_lcd_16207_timeout+0x60>
  else
    sp->scrollpos = sp->scrollpos + 1;
  8161f4:	e0bffe17 	ldw	r2,-8(fp)
  8161f8:	10800943 	ldbu	r2,37(r2)
  8161fc:	10800044 	addi	r2,r2,1
  816200:	1007883a 	mov	r3,r2
  816204:	e0bffe17 	ldw	r2,-8(fp)
  816208:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
  81620c:	e0bffe17 	ldw	r2,-8(fp)
  816210:	10800983 	ldbu	r2,38(r2)
  816214:	10803fcc 	andi	r2,r2,255
  816218:	10000826 	beq	r2,zero,81623c <alt_lcd_16207_timeout+0x90>
  81621c:	e0bffe17 	ldw	r2,-8(fp)
  816220:	108009c3 	ldbu	r2,39(r2)
  816224:	10803fcc 	andi	r2,r2,255
  816228:	1080201c 	xori	r2,r2,128
  81622c:	10bfe004 	addi	r2,r2,-128
  816230:	1000021e 	bne	r2,zero,81623c <alt_lcd_16207_timeout+0x90>
    lcd_repaint_screen(sp);
  816234:	e13ffe17 	ldw	r4,-8(fp)
  816238:	08157700 	call	815770 <lcd_repaint_screen>

  return sp->period;
  81623c:	e0bffe17 	ldw	r2,-8(fp)
  816240:	10800717 	ldw	r2,28(r2)
}
  816244:	e037883a 	mov	sp,fp
  816248:	dfc00117 	ldw	ra,4(sp)
  81624c:	df000017 	ldw	fp,0(sp)
  816250:	dec00204 	addi	sp,sp,8
  816254:	f800283a 	ret

00816258 <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
  816258:	defffc04 	addi	sp,sp,-16
  81625c:	dfc00315 	stw	ra,12(sp)
  816260:	df000215 	stw	fp,8(sp)
  816264:	df000204 	addi	fp,sp,8
  816268:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
  81626c:	e0bfff17 	ldw	r2,-4(fp)
  816270:	10800017 	ldw	r2,0(r2)
  816274:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
  816278:	e0bfff17 	ldw	r2,-4(fp)
  81627c:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
  816280:	010ea604 	movi	r4,15000
  816284:	08178d80 	call	8178d8 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  816288:	e0bffe17 	ldw	r2,-8(fp)
  81628c:	00c00c04 	movi	r3,48
  816290:	10c00035 	stwio	r3,0(r2)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
  816294:	01040104 	movi	r4,4100
  816298:	08178d80 	call	8178d8 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  81629c:	e0bffe17 	ldw	r2,-8(fp)
  8162a0:	00c00c04 	movi	r3,48
  8162a4:	10c00035 	stwio	r3,0(r2)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
  8162a8:	0100fa04 	movi	r4,1000
  8162ac:	08178d80 	call	8178d8 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  8162b0:	e0bffe17 	ldw	r2,-8(fp)
  8162b4:	00c00c04 	movi	r3,48
  8162b8:	10c00035 	stwio	r3,0(r2)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
  8162bc:	01400e04 	movi	r5,56
  8162c0:	e13fff17 	ldw	r4,-4(fp)
  8162c4:	08155100 	call	815510 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
  8162c8:	01400204 	movi	r5,8
  8162cc:	e13fff17 	ldw	r4,-4(fp)
  8162d0:	08155100 	call	815510 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
  8162d4:	e13fff17 	ldw	r4,-4(fp)
  8162d8:	08156a00 	call	8156a0 <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
  8162dc:	01400184 	movi	r5,6
  8162e0:	e13fff17 	ldw	r4,-4(fp)
  8162e4:	08155100 	call	815510 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
  8162e8:	01400304 	movi	r5,12
  8162ec:	e13fff17 	ldw	r4,-4(fp)
  8162f0:	08155100 	call	815510 <lcd_write_command>

  sp->esccount = -1;
  8162f4:	e0bfff17 	ldw	r2,-4(fp)
  8162f8:	00ffffc4 	movi	r3,-1
  8162fc:	10c00905 	stb	r3,36(r2)
  memset(sp->escape, 0, sizeof(sp->escape));
  816300:	e0bfff17 	ldw	r2,-4(fp)
  816304:	10800a04 	addi	r2,r2,40
  816308:	01800204 	movi	r6,8
  81630c:	000b883a 	mov	r5,zero
  816310:	1009883a 	mov	r4,r2
  816314:	080ea740 	call	80ea74 <memset>

  sp->scrollpos = 0;
  816318:	e0bfff17 	ldw	r2,-4(fp)
  81631c:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
  816320:	e0bfff17 	ldw	r2,-4(fp)
  816324:	10000985 	stb	zero,38(r2)
  sp->active = 0;
  816328:	e0bfff17 	ldw	r2,-4(fp)
  81632c:	100009c5 	stb	zero,39(r2)
  816330:	d0a75717 	ldw	r2,-25252(gp)

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
  816334:	01400284 	movi	r5,10
  816338:	1009883a 	mov	r4,r2
  81633c:	08135b00 	call	8135b0 <__udivsi3>
  816340:	1007883a 	mov	r3,r2
  816344:	e0bfff17 	ldw	r2,-4(fp)
  816348:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
  81634c:	e0bfff17 	ldw	r2,-4(fp)
  816350:	10c00104 	addi	r3,r2,4
  816354:	e0bfff17 	ldw	r2,-4(fp)
  816358:	10800717 	ldw	r2,28(r2)
  81635c:	e1ffff17 	ldw	r7,-4(fp)
  816360:	01802074 	movhi	r6,129
  816364:	31986b04 	addi	r6,r6,25004
  816368:	100b883a 	mov	r5,r2
  81636c:	1809883a 	mov	r4,r3
  816370:	0816db80 	call	816db8 <alt_alarm_start>
}
  816374:	0001883a 	nop
  816378:	e037883a 	mov	sp,fp
  81637c:	dfc00117 	ldw	ra,4(sp)
  816380:	df000017 	ldw	fp,0(sp)
  816384:	dec00204 	addi	sp,sp,8
  816388:	f800283a 	ret

0081638c <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
  81638c:	defffa04 	addi	sp,sp,-24
  816390:	dfc00515 	stw	ra,20(sp)
  816394:	df000415 	stw	fp,16(sp)
  816398:	df000404 	addi	fp,sp,16
  81639c:	e13ffd15 	stw	r4,-12(fp)
  8163a0:	e17ffe15 	stw	r5,-8(fp)
  8163a4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
  8163a8:	e0bffd17 	ldw	r2,-12(fp)
  8163ac:	10800017 	ldw	r2,0(r2)
  8163b0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
  8163b4:	e0bffc17 	ldw	r2,-16(fp)
  8163b8:	10c00a04 	addi	r3,r2,40
  8163bc:	e0bffd17 	ldw	r2,-12(fp)
  8163c0:	10800217 	ldw	r2,8(r2)
  8163c4:	100f883a 	mov	r7,r2
  8163c8:	e1bfff17 	ldw	r6,-4(fp)
  8163cc:	e17ffe17 	ldw	r5,-8(fp)
  8163d0:	1809883a 	mov	r4,r3
  8163d4:	0815cd40 	call	815cd4 <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
  8163d8:	e037883a 	mov	sp,fp
  8163dc:	dfc00117 	ldw	ra,4(sp)
  8163e0:	df000017 	ldw	fp,0(sp)
  8163e4:	dec00204 	addi	sp,sp,8
  8163e8:	f800283a 	ret

008163ec <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  8163ec:	defffa04 	addi	sp,sp,-24
  8163f0:	dfc00515 	stw	ra,20(sp)
  8163f4:	df000415 	stw	fp,16(sp)
  8163f8:	df000404 	addi	fp,sp,16
  8163fc:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  816400:	0007883a 	mov	r3,zero
  816404:	e0bfff17 	ldw	r2,-4(fp)
  816408:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  81640c:	e0bfff17 	ldw	r2,-4(fp)
  816410:	10800104 	addi	r2,r2,4
  816414:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  816418:	0005303a 	rdctl	r2,status
  81641c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  816420:	e0fffd17 	ldw	r3,-12(fp)
  816424:	00bfff84 	movi	r2,-2
  816428:	1884703a 	and	r2,r3,r2
  81642c:	1001703a 	wrctl	status,r2
  
  return context;
  816430:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  816434:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
  816438:	08177d00 	call	8177d0 <alt_tick>
  81643c:	e0bffc17 	ldw	r2,-16(fp)
  816440:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  816444:	e0bffe17 	ldw	r2,-8(fp)
  816448:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  81644c:	0001883a 	nop
  816450:	e037883a 	mov	sp,fp
  816454:	dfc00117 	ldw	ra,4(sp)
  816458:	df000017 	ldw	fp,0(sp)
  81645c:	dec00204 	addi	sp,sp,8
  816460:	f800283a 	ret

00816464 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  816464:	defff804 	addi	sp,sp,-32
  816468:	dfc00715 	stw	ra,28(sp)
  81646c:	df000615 	stw	fp,24(sp)
  816470:	df000604 	addi	fp,sp,24
  816474:	e13ffc15 	stw	r4,-16(fp)
  816478:	e17ffd15 	stw	r5,-12(fp)
  81647c:	e1bffe15 	stw	r6,-8(fp)
  816480:	e1ffff15 	stw	r7,-4(fp)
  816484:	e0bfff17 	ldw	r2,-4(fp)
  816488:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  81648c:	d0a75717 	ldw	r2,-25252(gp)
  816490:	1000021e 	bne	r2,zero,81649c <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
  816494:	e0bffb17 	ldw	r2,-20(fp)
  816498:	d0a75715 	stw	r2,-25252(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  81649c:	e0bffc17 	ldw	r2,-16(fp)
  8164a0:	10800104 	addi	r2,r2,4
  8164a4:	00c001c4 	movi	r3,7
  8164a8:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  8164ac:	d8000015 	stw	zero,0(sp)
  8164b0:	e1fffc17 	ldw	r7,-16(fp)
  8164b4:	01802074 	movhi	r6,129
  8164b8:	3198fb04 	addi	r6,r6,25580
  8164bc:	e17ffe17 	ldw	r5,-8(fp)
  8164c0:	e13ffd17 	ldw	r4,-12(fp)
  8164c4:	08171000 	call	817100 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  8164c8:	0001883a 	nop
  8164cc:	e037883a 	mov	sp,fp
  8164d0:	dfc00117 	ldw	ra,4(sp)
  8164d4:	df000017 	ldw	fp,0(sp)
  8164d8:	dec00204 	addi	sp,sp,8
  8164dc:	f800283a 	ret

008164e0 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  8164e0:	defffa04 	addi	sp,sp,-24
  8164e4:	dfc00515 	stw	ra,20(sp)
  8164e8:	df000415 	stw	fp,16(sp)
  8164ec:	df000404 	addi	fp,sp,16
  8164f0:	e13ffd15 	stw	r4,-12(fp)
  8164f4:	e17ffe15 	stw	r5,-8(fp)
  8164f8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  8164fc:	e0bffd17 	ldw	r2,-12(fp)
  816500:	10800017 	ldw	r2,0(r2)
  816504:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  816508:	e0bffc17 	ldw	r2,-16(fp)
  81650c:	10c00a04 	addi	r3,r2,40
  816510:	e0bffd17 	ldw	r2,-12(fp)
  816514:	10800217 	ldw	r2,8(r2)
  816518:	100f883a 	mov	r7,r2
  81651c:	e1bfff17 	ldw	r6,-4(fp)
  816520:	e17ffe17 	ldw	r5,-8(fp)
  816524:	1809883a 	mov	r4,r3
  816528:	08169f40 	call	8169f4 <altera_avalon_uart_read>
      fd->fd_flags);
}
  81652c:	e037883a 	mov	sp,fp
  816530:	dfc00117 	ldw	ra,4(sp)
  816534:	df000017 	ldw	fp,0(sp)
  816538:	dec00204 	addi	sp,sp,8
  81653c:	f800283a 	ret

00816540 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  816540:	defffa04 	addi	sp,sp,-24
  816544:	dfc00515 	stw	ra,20(sp)
  816548:	df000415 	stw	fp,16(sp)
  81654c:	df000404 	addi	fp,sp,16
  816550:	e13ffd15 	stw	r4,-12(fp)
  816554:	e17ffe15 	stw	r5,-8(fp)
  816558:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  81655c:	e0bffd17 	ldw	r2,-12(fp)
  816560:	10800017 	ldw	r2,0(r2)
  816564:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  816568:	e0bffc17 	ldw	r2,-16(fp)
  81656c:	10c00a04 	addi	r3,r2,40
  816570:	e0bffd17 	ldw	r2,-12(fp)
  816574:	10800217 	ldw	r2,8(r2)
  816578:	100f883a 	mov	r7,r2
  81657c:	e1bfff17 	ldw	r6,-4(fp)
  816580:	e17ffe17 	ldw	r5,-8(fp)
  816584:	1809883a 	mov	r4,r3
  816588:	0816c0c0 	call	816c0c <altera_avalon_uart_write>
      fd->fd_flags);
}
  81658c:	e037883a 	mov	sp,fp
  816590:	dfc00117 	ldw	ra,4(sp)
  816594:	df000017 	ldw	fp,0(sp)
  816598:	dec00204 	addi	sp,sp,8
  81659c:	f800283a 	ret

008165a0 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  8165a0:	defffc04 	addi	sp,sp,-16
  8165a4:	dfc00315 	stw	ra,12(sp)
  8165a8:	df000215 	stw	fp,8(sp)
  8165ac:	df000204 	addi	fp,sp,8
  8165b0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  8165b4:	e0bfff17 	ldw	r2,-4(fp)
  8165b8:	10800017 	ldw	r2,0(r2)
  8165bc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  8165c0:	e0bffe17 	ldw	r2,-8(fp)
  8165c4:	10c00a04 	addi	r3,r2,40
  8165c8:	e0bfff17 	ldw	r2,-4(fp)
  8165cc:	10800217 	ldw	r2,8(r2)
  8165d0:	100b883a 	mov	r5,r2
  8165d4:	1809883a 	mov	r4,r3
  8165d8:	08169640 	call	816964 <altera_avalon_uart_close>
}
  8165dc:	e037883a 	mov	sp,fp
  8165e0:	dfc00117 	ldw	ra,4(sp)
  8165e4:	df000017 	ldw	fp,0(sp)
  8165e8:	dec00204 	addi	sp,sp,8
  8165ec:	f800283a 	ret

008165f0 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  8165f0:	defff804 	addi	sp,sp,-32
  8165f4:	dfc00715 	stw	ra,28(sp)
  8165f8:	df000615 	stw	fp,24(sp)
  8165fc:	df000604 	addi	fp,sp,24
  816600:	e13ffd15 	stw	r4,-12(fp)
  816604:	e17ffe15 	stw	r5,-8(fp)
  816608:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
  81660c:	e0bffd17 	ldw	r2,-12(fp)
  816610:	10800017 	ldw	r2,0(r2)
  816614:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  816618:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  81661c:	1000041e 	bne	r2,zero,816630 <altera_avalon_uart_init+0x40>
  816620:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  816624:	1000021e 	bne	r2,zero,816630 <altera_avalon_uart_init+0x40>
  816628:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  81662c:	10000226 	beq	r2,zero,816638 <altera_avalon_uart_init+0x48>
  816630:	00800044 	movi	r2,1
  816634:	00000106 	br	81663c <altera_avalon_uart_init+0x4c>
  816638:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  81663c:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  816640:	e0bffc17 	ldw	r2,-16(fp)
  816644:	10000f1e 	bne	r2,zero,816684 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  816648:	e0bffd17 	ldw	r2,-12(fp)
  81664c:	00c32004 	movi	r3,3200
  816650:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  816654:	e0bffb17 	ldw	r2,-20(fp)
  816658:	10800304 	addi	r2,r2,12
  81665c:	e0fffd17 	ldw	r3,-12(fp)
  816660:	18c00117 	ldw	r3,4(r3)
  816664:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
  816668:	d8000015 	stw	zero,0(sp)
  81666c:	e1fffd17 	ldw	r7,-12(fp)
  816670:	01802074 	movhi	r6,129
  816674:	3199a704 	addi	r6,r6,26268
  816678:	e17fff17 	ldw	r5,-4(fp)
  81667c:	e13ffe17 	ldw	r4,-8(fp)
  816680:	08171000 	call	817100 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
  816684:	0001883a 	nop
  816688:	e037883a 	mov	sp,fp
  81668c:	dfc00117 	ldw	ra,4(sp)
  816690:	df000017 	ldw	fp,0(sp)
  816694:	dec00204 	addi	sp,sp,8
  816698:	f800283a 	ret

0081669c <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  81669c:	defffa04 	addi	sp,sp,-24
  8166a0:	dfc00515 	stw	ra,20(sp)
  8166a4:	df000415 	stw	fp,16(sp)
  8166a8:	df000404 	addi	fp,sp,16
  8166ac:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  8166b0:	e0bfff17 	ldw	r2,-4(fp)
  8166b4:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
  8166b8:	e0bffc17 	ldw	r2,-16(fp)
  8166bc:	10800017 	ldw	r2,0(r2)
  8166c0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  8166c4:	e0bffd17 	ldw	r2,-12(fp)
  8166c8:	10800204 	addi	r2,r2,8
  8166cc:	10800037 	ldwio	r2,0(r2)
  8166d0:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  8166d4:	e0bffd17 	ldw	r2,-12(fp)
  8166d8:	10800204 	addi	r2,r2,8
  8166dc:	0007883a 	mov	r3,zero
  8166e0:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  8166e4:	e0bffd17 	ldw	r2,-12(fp)
  8166e8:	10800204 	addi	r2,r2,8
  8166ec:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  8166f0:	e0bffe17 	ldw	r2,-8(fp)
  8166f4:	1080200c 	andi	r2,r2,128
  8166f8:	10000326 	beq	r2,zero,816708 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
  8166fc:	e17ffe17 	ldw	r5,-8(fp)
  816700:	e13ffc17 	ldw	r4,-16(fp)
  816704:	08167380 	call	816738 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  816708:	e0bffe17 	ldw	r2,-8(fp)
  81670c:	1081100c 	andi	r2,r2,1088
  816710:	10000326 	beq	r2,zero,816720 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  816714:	e17ffe17 	ldw	r5,-8(fp)
  816718:	e13ffc17 	ldw	r4,-16(fp)
  81671c:	081681c0 	call	81681c <altera_avalon_uart_txirq>
  }
  

}
  816720:	0001883a 	nop
  816724:	e037883a 	mov	sp,fp
  816728:	dfc00117 	ldw	ra,4(sp)
  81672c:	df000017 	ldw	fp,0(sp)
  816730:	dec00204 	addi	sp,sp,8
  816734:	f800283a 	ret

00816738 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  816738:	defffc04 	addi	sp,sp,-16
  81673c:	df000315 	stw	fp,12(sp)
  816740:	df000304 	addi	fp,sp,12
  816744:	e13ffe15 	stw	r4,-8(fp)
  816748:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  81674c:	e0bfff17 	ldw	r2,-4(fp)
  816750:	108000cc 	andi	r2,r2,3
  816754:	10002c1e 	bne	r2,zero,816808 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  816758:	e0bffe17 	ldw	r2,-8(fp)
  81675c:	10800317 	ldw	r2,12(r2)
  816760:	e0bffe17 	ldw	r2,-8(fp)
  816764:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  816768:	e0bffe17 	ldw	r2,-8(fp)
  81676c:	10800317 	ldw	r2,12(r2)
  816770:	10800044 	addi	r2,r2,1
  816774:	10800fcc 	andi	r2,r2,63
  816778:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  81677c:	e0bffe17 	ldw	r2,-8(fp)
  816780:	10800317 	ldw	r2,12(r2)
  816784:	e0fffe17 	ldw	r3,-8(fp)
  816788:	18c00017 	ldw	r3,0(r3)
  81678c:	18c00037 	ldwio	r3,0(r3)
  816790:	1809883a 	mov	r4,r3
  816794:	e0fffe17 	ldw	r3,-8(fp)
  816798:	1885883a 	add	r2,r3,r2
  81679c:	10800704 	addi	r2,r2,28
  8167a0:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
  8167a4:	e0bffe17 	ldw	r2,-8(fp)
  8167a8:	e0fffd17 	ldw	r3,-12(fp)
  8167ac:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  8167b0:	e0bffe17 	ldw	r2,-8(fp)
  8167b4:	10800317 	ldw	r2,12(r2)
  8167b8:	10800044 	addi	r2,r2,1
  8167bc:	10800fcc 	andi	r2,r2,63
  8167c0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  8167c4:	e0bffe17 	ldw	r2,-8(fp)
  8167c8:	10c00217 	ldw	r3,8(r2)
  8167cc:	e0bffd17 	ldw	r2,-12(fp)
  8167d0:	18800e1e 	bne	r3,r2,81680c <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  8167d4:	e0bffe17 	ldw	r2,-8(fp)
  8167d8:	10c00117 	ldw	r3,4(r2)
  8167dc:	00bfdfc4 	movi	r2,-129
  8167e0:	1886703a 	and	r3,r3,r2
  8167e4:	e0bffe17 	ldw	r2,-8(fp)
  8167e8:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  8167ec:	e0bffe17 	ldw	r2,-8(fp)
  8167f0:	10800017 	ldw	r2,0(r2)
  8167f4:	10800304 	addi	r2,r2,12
  8167f8:	e0fffe17 	ldw	r3,-8(fp)
  8167fc:	18c00117 	ldw	r3,4(r3)
  816800:	10c00035 	stwio	r3,0(r2)
  816804:	00000106 	br	81680c <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
  816808:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
  81680c:	e037883a 	mov	sp,fp
  816810:	df000017 	ldw	fp,0(sp)
  816814:	dec00104 	addi	sp,sp,4
  816818:	f800283a 	ret

0081681c <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  81681c:	defffb04 	addi	sp,sp,-20
  816820:	df000415 	stw	fp,16(sp)
  816824:	df000404 	addi	fp,sp,16
  816828:	e13ffc15 	stw	r4,-16(fp)
  81682c:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  816830:	e0bffc17 	ldw	r2,-16(fp)
  816834:	10c00417 	ldw	r3,16(r2)
  816838:	e0bffc17 	ldw	r2,-16(fp)
  81683c:	10800517 	ldw	r2,20(r2)
  816840:	18803226 	beq	r3,r2,81690c <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  816844:	e0bffc17 	ldw	r2,-16(fp)
  816848:	10800617 	ldw	r2,24(r2)
  81684c:	1080008c 	andi	r2,r2,2
  816850:	10000326 	beq	r2,zero,816860 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  816854:	e0bffd17 	ldw	r2,-12(fp)
  816858:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  81685c:	10001d26 	beq	r2,zero,8168d4 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  816860:	e0bffc17 	ldw	r2,-16(fp)
  816864:	10800417 	ldw	r2,16(r2)
  816868:	e0bffc17 	ldw	r2,-16(fp)
  81686c:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  816870:	e0bffc17 	ldw	r2,-16(fp)
  816874:	10800017 	ldw	r2,0(r2)
  816878:	10800104 	addi	r2,r2,4
  81687c:	e0fffc17 	ldw	r3,-16(fp)
  816880:	18c00417 	ldw	r3,16(r3)
  816884:	e13ffc17 	ldw	r4,-16(fp)
  816888:	20c7883a 	add	r3,r4,r3
  81688c:	18c01704 	addi	r3,r3,92
  816890:	18c00003 	ldbu	r3,0(r3)
  816894:	18c03fcc 	andi	r3,r3,255
  816898:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  81689c:	e0bffc17 	ldw	r2,-16(fp)
  8168a0:	10800417 	ldw	r2,16(r2)
  8168a4:	10800044 	addi	r2,r2,1
  8168a8:	e0fffc17 	ldw	r3,-16(fp)
  8168ac:	18800415 	stw	r2,16(r3)
  8168b0:	10c00fcc 	andi	r3,r2,63
  8168b4:	e0bffc17 	ldw	r2,-16(fp)
  8168b8:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  8168bc:	e0bffc17 	ldw	r2,-16(fp)
  8168c0:	10800117 	ldw	r2,4(r2)
  8168c4:	10c01014 	ori	r3,r2,64
  8168c8:	e0bffc17 	ldw	r2,-16(fp)
  8168cc:	10c00115 	stw	r3,4(r2)
  8168d0:	00000e06 	br	81690c <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  8168d4:	e0bffc17 	ldw	r2,-16(fp)
  8168d8:	10800017 	ldw	r2,0(r2)
  8168dc:	10800204 	addi	r2,r2,8
  8168e0:	10800037 	ldwio	r2,0(r2)
  8168e4:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  8168e8:	e0bffd17 	ldw	r2,-12(fp)
  8168ec:	1082000c 	andi	r2,r2,2048
  8168f0:	1000061e 	bne	r2,zero,81690c <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  8168f4:	e0bffc17 	ldw	r2,-16(fp)
  8168f8:	10c00117 	ldw	r3,4(r2)
  8168fc:	00bfefc4 	movi	r2,-65
  816900:	1886703a 	and	r3,r3,r2
  816904:	e0bffc17 	ldw	r2,-16(fp)
  816908:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  81690c:	e0bffc17 	ldw	r2,-16(fp)
  816910:	10c00417 	ldw	r3,16(r2)
  816914:	e0bffc17 	ldw	r2,-16(fp)
  816918:	10800517 	ldw	r2,20(r2)
  81691c:	1880061e 	bne	r3,r2,816938 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  816920:	e0bffc17 	ldw	r2,-16(fp)
  816924:	10c00117 	ldw	r3,4(r2)
  816928:	00beefc4 	movi	r2,-1089
  81692c:	1886703a 	and	r3,r3,r2
  816930:	e0bffc17 	ldw	r2,-16(fp)
  816934:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  816938:	e0bffc17 	ldw	r2,-16(fp)
  81693c:	10800017 	ldw	r2,0(r2)
  816940:	10800304 	addi	r2,r2,12
  816944:	e0fffc17 	ldw	r3,-16(fp)
  816948:	18c00117 	ldw	r3,4(r3)
  81694c:	10c00035 	stwio	r3,0(r2)
}
  816950:	0001883a 	nop
  816954:	e037883a 	mov	sp,fp
  816958:	df000017 	ldw	fp,0(sp)
  81695c:	dec00104 	addi	sp,sp,4
  816960:	f800283a 	ret

00816964 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  816964:	defffd04 	addi	sp,sp,-12
  816968:	df000215 	stw	fp,8(sp)
  81696c:	df000204 	addi	fp,sp,8
  816970:	e13ffe15 	stw	r4,-8(fp)
  816974:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  816978:	00000506 	br	816990 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  81697c:	e0bfff17 	ldw	r2,-4(fp)
  816980:	1090000c 	andi	r2,r2,16384
  816984:	10000226 	beq	r2,zero,816990 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
  816988:	00bffd44 	movi	r2,-11
  81698c:	00000606 	br	8169a8 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  816990:	e0bffe17 	ldw	r2,-8(fp)
  816994:	10c00417 	ldw	r3,16(r2)
  816998:	e0bffe17 	ldw	r2,-8(fp)
  81699c:	10800517 	ldw	r2,20(r2)
  8169a0:	18bff61e 	bne	r3,r2,81697c <__alt_mem_onchip_mem+0xff80e97c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  8169a4:	0005883a 	mov	r2,zero
}
  8169a8:	e037883a 	mov	sp,fp
  8169ac:	df000017 	ldw	fp,0(sp)
  8169b0:	dec00104 	addi	sp,sp,4
  8169b4:	f800283a 	ret

008169b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8169b8:	defffe04 	addi	sp,sp,-8
  8169bc:	dfc00115 	stw	ra,4(sp)
  8169c0:	df000015 	stw	fp,0(sp)
  8169c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8169c8:	d0a00b17 	ldw	r2,-32724(gp)
  8169cc:	10000326 	beq	r2,zero,8169dc <alt_get_errno+0x24>
  8169d0:	d0a00b17 	ldw	r2,-32724(gp)
  8169d4:	103ee83a 	callr	r2
  8169d8:	00000106 	br	8169e0 <alt_get_errno+0x28>
  8169dc:	d0a75204 	addi	r2,gp,-25272
}
  8169e0:	e037883a 	mov	sp,fp
  8169e4:	dfc00117 	ldw	ra,4(sp)
  8169e8:	df000017 	ldw	fp,0(sp)
  8169ec:	dec00204 	addi	sp,sp,8
  8169f0:	f800283a 	ret

008169f4 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  8169f4:	defff204 	addi	sp,sp,-56
  8169f8:	dfc00d15 	stw	ra,52(sp)
  8169fc:	df000c15 	stw	fp,48(sp)
  816a00:	df000c04 	addi	fp,sp,48
  816a04:	e13ffc15 	stw	r4,-16(fp)
  816a08:	e17ffd15 	stw	r5,-12(fp)
  816a0c:	e1bffe15 	stw	r6,-8(fp)
  816a10:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
  816a14:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
  816a18:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  816a1c:	e0bfff17 	ldw	r2,-4(fp)
  816a20:	1090000c 	andi	r2,r2,16384
  816a24:	1005003a 	cmpeq	r2,r2,zero
  816a28:	10803fcc 	andi	r2,r2,255
  816a2c:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  816a30:	00001306 	br	816a80 <altera_avalon_uart_read+0x8c>
    {
      count++;
  816a34:	e0bff517 	ldw	r2,-44(fp)
  816a38:	10800044 	addi	r2,r2,1
  816a3c:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  816a40:	e0bffd17 	ldw	r2,-12(fp)
  816a44:	10c00044 	addi	r3,r2,1
  816a48:	e0fffd15 	stw	r3,-12(fp)
  816a4c:	e0fffc17 	ldw	r3,-16(fp)
  816a50:	18c00217 	ldw	r3,8(r3)
  816a54:	e13ffc17 	ldw	r4,-16(fp)
  816a58:	20c7883a 	add	r3,r4,r3
  816a5c:	18c00704 	addi	r3,r3,28
  816a60:	18c00003 	ldbu	r3,0(r3)
  816a64:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
  816a68:	e0bffc17 	ldw	r2,-16(fp)
  816a6c:	10800217 	ldw	r2,8(r2)
  816a70:	10800044 	addi	r2,r2,1
  816a74:	10c00fcc 	andi	r3,r2,63
  816a78:	e0bffc17 	ldw	r2,-16(fp)
  816a7c:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  816a80:	e0fff517 	ldw	r3,-44(fp)
  816a84:	e0bffe17 	ldw	r2,-8(fp)
  816a88:	1880050e 	bge	r3,r2,816aa0 <altera_avalon_uart_read+0xac>
  816a8c:	e0bffc17 	ldw	r2,-16(fp)
  816a90:	10c00217 	ldw	r3,8(r2)
  816a94:	e0bffc17 	ldw	r2,-16(fp)
  816a98:	10800317 	ldw	r2,12(r2)
  816a9c:	18bfe51e 	bne	r3,r2,816a34 <__alt_mem_onchip_mem+0xff80ea34>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  816aa0:	e0bff517 	ldw	r2,-44(fp)
  816aa4:	1000251e 	bne	r2,zero,816b3c <altera_avalon_uart_read+0x148>
  816aa8:	e0bffc17 	ldw	r2,-16(fp)
  816aac:	10c00217 	ldw	r3,8(r2)
  816ab0:	e0bffc17 	ldw	r2,-16(fp)
  816ab4:	10800317 	ldw	r2,12(r2)
  816ab8:	1880201e 	bne	r3,r2,816b3c <altera_avalon_uart_read+0x148>
    {
      if (!block)
  816abc:	e0bff617 	ldw	r2,-40(fp)
  816ac0:	1000071e 	bne	r2,zero,816ae0 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  816ac4:	08169b80 	call	8169b8 <alt_get_errno>
  816ac8:	1007883a 	mov	r3,r2
  816acc:	008002c4 	movi	r2,11
  816ad0:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
  816ad4:	00800044 	movi	r2,1
  816ad8:	e0bff405 	stb	r2,-48(fp)
        break;
  816adc:	00001b06 	br	816b4c <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  816ae0:	0005303a 	rdctl	r2,status
  816ae4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  816ae8:	e0fff917 	ldw	r3,-28(fp)
  816aec:	00bfff84 	movi	r2,-2
  816af0:	1884703a 	and	r2,r3,r2
  816af4:	1001703a 	wrctl	status,r2
  
  return context;
  816af8:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  816afc:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  816b00:	e0bffc17 	ldw	r2,-16(fp)
  816b04:	10800117 	ldw	r2,4(r2)
  816b08:	10c02014 	ori	r3,r2,128
  816b0c:	e0bffc17 	ldw	r2,-16(fp)
  816b10:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  816b14:	e0bffc17 	ldw	r2,-16(fp)
  816b18:	10800017 	ldw	r2,0(r2)
  816b1c:	10800304 	addi	r2,r2,12
  816b20:	e0fffc17 	ldw	r3,-16(fp)
  816b24:	18c00117 	ldw	r3,4(r3)
  816b28:	10c00035 	stwio	r3,0(r2)
  816b2c:	e0bff817 	ldw	r2,-32(fp)
  816b30:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  816b34:	e0bffa17 	ldw	r2,-24(fp)
  816b38:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  816b3c:	e0bff517 	ldw	r2,-44(fp)
  816b40:	1000021e 	bne	r2,zero,816b4c <altera_avalon_uart_read+0x158>
  816b44:	e0bffe17 	ldw	r2,-8(fp)
  816b48:	103fcd1e 	bne	r2,zero,816a80 <__alt_mem_onchip_mem+0xff80ea80>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  816b4c:	0005303a 	rdctl	r2,status
  816b50:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  816b54:	e0fffb17 	ldw	r3,-20(fp)
  816b58:	00bfff84 	movi	r2,-2
  816b5c:	1884703a 	and	r2,r3,r2
  816b60:	1001703a 	wrctl	status,r2
  
  return context;
  816b64:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  816b68:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  816b6c:	e0bffc17 	ldw	r2,-16(fp)
  816b70:	10800117 	ldw	r2,4(r2)
  816b74:	10c02014 	ori	r3,r2,128
  816b78:	e0bffc17 	ldw	r2,-16(fp)
  816b7c:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  816b80:	e0bffc17 	ldw	r2,-16(fp)
  816b84:	10800017 	ldw	r2,0(r2)
  816b88:	10800304 	addi	r2,r2,12
  816b8c:	e0fffc17 	ldw	r3,-16(fp)
  816b90:	18c00117 	ldw	r3,4(r3)
  816b94:	10c00035 	stwio	r3,0(r2)
  816b98:	e0bff817 	ldw	r2,-32(fp)
  816b9c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  816ba0:	e0bff717 	ldw	r2,-36(fp)
  816ba4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  816ba8:	e0bff403 	ldbu	r2,-48(fp)
  816bac:	10000226 	beq	r2,zero,816bb8 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
  816bb0:	00bffd44 	movi	r2,-11
  816bb4:	00000106 	br	816bbc <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
  816bb8:	e0bff517 	ldw	r2,-44(fp)
  }
}
  816bbc:	e037883a 	mov	sp,fp
  816bc0:	dfc00117 	ldw	ra,4(sp)
  816bc4:	df000017 	ldw	fp,0(sp)
  816bc8:	dec00204 	addi	sp,sp,8
  816bcc:	f800283a 	ret

00816bd0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  816bd0:	defffe04 	addi	sp,sp,-8
  816bd4:	dfc00115 	stw	ra,4(sp)
  816bd8:	df000015 	stw	fp,0(sp)
  816bdc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  816be0:	d0a00b17 	ldw	r2,-32724(gp)
  816be4:	10000326 	beq	r2,zero,816bf4 <alt_get_errno+0x24>
  816be8:	d0a00b17 	ldw	r2,-32724(gp)
  816bec:	103ee83a 	callr	r2
  816bf0:	00000106 	br	816bf8 <alt_get_errno+0x28>
  816bf4:	d0a75204 	addi	r2,gp,-25272
}
  816bf8:	e037883a 	mov	sp,fp
  816bfc:	dfc00117 	ldw	ra,4(sp)
  816c00:	df000017 	ldw	fp,0(sp)
  816c04:	dec00204 	addi	sp,sp,8
  816c08:	f800283a 	ret

00816c0c <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  816c0c:	defff204 	addi	sp,sp,-56
  816c10:	dfc00d15 	stw	ra,52(sp)
  816c14:	df000c15 	stw	fp,48(sp)
  816c18:	df000c04 	addi	fp,sp,48
  816c1c:	e13ffc15 	stw	r4,-16(fp)
  816c20:	e17ffd15 	stw	r5,-12(fp)
  816c24:	e1bffe15 	stw	r6,-8(fp)
  816c28:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  816c2c:	e0bffe17 	ldw	r2,-8(fp)
  816c30:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  816c34:	e0bfff17 	ldw	r2,-4(fp)
  816c38:	1090000c 	andi	r2,r2,16384
  816c3c:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  816c40:	00003c06 	br	816d34 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  816c44:	e0bffc17 	ldw	r2,-16(fp)
  816c48:	10800517 	ldw	r2,20(r2)
  816c4c:	10800044 	addi	r2,r2,1
  816c50:	10800fcc 	andi	r2,r2,63
  816c54:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  816c58:	e0bffc17 	ldw	r2,-16(fp)
  816c5c:	10c00417 	ldw	r3,16(r2)
  816c60:	e0bff717 	ldw	r2,-36(fp)
  816c64:	1880221e 	bne	r3,r2,816cf0 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
  816c68:	e0bff517 	ldw	r2,-44(fp)
  816c6c:	10000526 	beq	r2,zero,816c84 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  816c70:	0816bd00 	call	816bd0 <alt_get_errno>
  816c74:	1007883a 	mov	r3,r2
  816c78:	008002c4 	movi	r2,11
  816c7c:	18800015 	stw	r2,0(r3)
        break;
  816c80:	00002e06 	br	816d3c <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  816c84:	0005303a 	rdctl	r2,status
  816c88:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  816c8c:	e0fff917 	ldw	r3,-28(fp)
  816c90:	00bfff84 	movi	r2,-2
  816c94:	1884703a 	and	r2,r3,r2
  816c98:	1001703a 	wrctl	status,r2
  
  return context;
  816c9c:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  816ca0:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  816ca4:	e0bffc17 	ldw	r2,-16(fp)
  816ca8:	10800117 	ldw	r2,4(r2)
  816cac:	10c11014 	ori	r3,r2,1088
  816cb0:	e0bffc17 	ldw	r2,-16(fp)
  816cb4:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  816cb8:	e0bffc17 	ldw	r2,-16(fp)
  816cbc:	10800017 	ldw	r2,0(r2)
  816cc0:	10800304 	addi	r2,r2,12
  816cc4:	e0fffc17 	ldw	r3,-16(fp)
  816cc8:	18c00117 	ldw	r3,4(r3)
  816ccc:	10c00035 	stwio	r3,0(r2)
  816cd0:	e0bff817 	ldw	r2,-32(fp)
  816cd4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  816cd8:	e0bff617 	ldw	r2,-40(fp)
  816cdc:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  816ce0:	e0bffc17 	ldw	r2,-16(fp)
  816ce4:	10c00417 	ldw	r3,16(r2)
  816ce8:	e0bff717 	ldw	r2,-36(fp)
  816cec:	18bffc26 	beq	r3,r2,816ce0 <__alt_mem_onchip_mem+0xff80ece0>
      }
    }

    count--;
  816cf0:	e0bff417 	ldw	r2,-48(fp)
  816cf4:	10bfffc4 	addi	r2,r2,-1
  816cf8:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  816cfc:	e0bffc17 	ldw	r2,-16(fp)
  816d00:	10c00517 	ldw	r3,20(r2)
  816d04:	e0bffd17 	ldw	r2,-12(fp)
  816d08:	11000044 	addi	r4,r2,1
  816d0c:	e13ffd15 	stw	r4,-12(fp)
  816d10:	10800003 	ldbu	r2,0(r2)
  816d14:	1009883a 	mov	r4,r2
  816d18:	e0bffc17 	ldw	r2,-16(fp)
  816d1c:	10c5883a 	add	r2,r2,r3
  816d20:	10801704 	addi	r2,r2,92
  816d24:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
  816d28:	e0bffc17 	ldw	r2,-16(fp)
  816d2c:	e0fff717 	ldw	r3,-36(fp)
  816d30:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  816d34:	e0bff417 	ldw	r2,-48(fp)
  816d38:	103fc21e 	bne	r2,zero,816c44 <__alt_mem_onchip_mem+0xff80ec44>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  816d3c:	0005303a 	rdctl	r2,status
  816d40:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  816d44:	e0fffb17 	ldw	r3,-20(fp)
  816d48:	00bfff84 	movi	r2,-2
  816d4c:	1884703a 	and	r2,r3,r2
  816d50:	1001703a 	wrctl	status,r2
  
  return context;
  816d54:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  816d58:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  816d5c:	e0bffc17 	ldw	r2,-16(fp)
  816d60:	10800117 	ldw	r2,4(r2)
  816d64:	10c11014 	ori	r3,r2,1088
  816d68:	e0bffc17 	ldw	r2,-16(fp)
  816d6c:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  816d70:	e0bffc17 	ldw	r2,-16(fp)
  816d74:	10800017 	ldw	r2,0(r2)
  816d78:	10800304 	addi	r2,r2,12
  816d7c:	e0fffc17 	ldw	r3,-16(fp)
  816d80:	18c00117 	ldw	r3,4(r3)
  816d84:	10c00035 	stwio	r3,0(r2)
  816d88:	e0bff817 	ldw	r2,-32(fp)
  816d8c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  816d90:	e0bffa17 	ldw	r2,-24(fp)
  816d94:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  816d98:	e0fffe17 	ldw	r3,-8(fp)
  816d9c:	e0bff417 	ldw	r2,-48(fp)
  816da0:	1885c83a 	sub	r2,r3,r2
}
  816da4:	e037883a 	mov	sp,fp
  816da8:	dfc00117 	ldw	ra,4(sp)
  816dac:	df000017 	ldw	fp,0(sp)
  816db0:	dec00204 	addi	sp,sp,8
  816db4:	f800283a 	ret

00816db8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  816db8:	defff504 	addi	sp,sp,-44
  816dbc:	df000a15 	stw	fp,40(sp)
  816dc0:	df000a04 	addi	fp,sp,40
  816dc4:	e13ffc15 	stw	r4,-16(fp)
  816dc8:	e17ffd15 	stw	r5,-12(fp)
  816dcc:	e1bffe15 	stw	r6,-8(fp)
  816dd0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  816dd4:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  816dd8:	d0a75717 	ldw	r2,-25252(gp)
  
  if (alt_ticks_per_second ())
  816ddc:	10003c26 	beq	r2,zero,816ed0 <alt_alarm_start+0x118>
  {
    if (alarm)
  816de0:	e0bffc17 	ldw	r2,-16(fp)
  816de4:	10003826 	beq	r2,zero,816ec8 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
  816de8:	e0bffc17 	ldw	r2,-16(fp)
  816dec:	e0fffe17 	ldw	r3,-8(fp)
  816df0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  816df4:	e0bffc17 	ldw	r2,-16(fp)
  816df8:	e0ffff17 	ldw	r3,-4(fp)
  816dfc:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  816e00:	0005303a 	rdctl	r2,status
  816e04:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  816e08:	e0fff917 	ldw	r3,-28(fp)
  816e0c:	00bfff84 	movi	r2,-2
  816e10:	1884703a 	and	r2,r3,r2
  816e14:	1001703a 	wrctl	status,r2
  
  return context;
  816e18:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
  816e1c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  816e20:	d0a75817 	ldw	r2,-25248(gp)
      
      current_nticks = alt_nticks();
  816e24:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  816e28:	e0fffd17 	ldw	r3,-12(fp)
  816e2c:	e0bff617 	ldw	r2,-40(fp)
  816e30:	1885883a 	add	r2,r3,r2
  816e34:	10c00044 	addi	r3,r2,1
  816e38:	e0bffc17 	ldw	r2,-16(fp)
  816e3c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  816e40:	e0bffc17 	ldw	r2,-16(fp)
  816e44:	10c00217 	ldw	r3,8(r2)
  816e48:	e0bff617 	ldw	r2,-40(fp)
  816e4c:	1880042e 	bgeu	r3,r2,816e60 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
  816e50:	e0bffc17 	ldw	r2,-16(fp)
  816e54:	00c00044 	movi	r3,1
  816e58:	10c00405 	stb	r3,16(r2)
  816e5c:	00000206 	br	816e68 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
  816e60:	e0bffc17 	ldw	r2,-16(fp)
  816e64:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  816e68:	e0bffc17 	ldw	r2,-16(fp)
  816e6c:	d0e00f04 	addi	r3,gp,-32708
  816e70:	e0fffa15 	stw	r3,-24(fp)
  816e74:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  816e78:	e0bffb17 	ldw	r2,-20(fp)
  816e7c:	e0fffa17 	ldw	r3,-24(fp)
  816e80:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  816e84:	e0bffa17 	ldw	r2,-24(fp)
  816e88:	10c00017 	ldw	r3,0(r2)
  816e8c:	e0bffb17 	ldw	r2,-20(fp)
  816e90:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  816e94:	e0bffa17 	ldw	r2,-24(fp)
  816e98:	10800017 	ldw	r2,0(r2)
  816e9c:	e0fffb17 	ldw	r3,-20(fp)
  816ea0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  816ea4:	e0bffa17 	ldw	r2,-24(fp)
  816ea8:	e0fffb17 	ldw	r3,-20(fp)
  816eac:	10c00015 	stw	r3,0(r2)
  816eb0:	e0bff817 	ldw	r2,-32(fp)
  816eb4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  816eb8:	e0bff717 	ldw	r2,-36(fp)
  816ebc:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  816ec0:	0005883a 	mov	r2,zero
  816ec4:	00000306 	br	816ed4 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
  816ec8:	00bffa84 	movi	r2,-22
  816ecc:	00000106 	br	816ed4 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
  816ed0:	00bfde84 	movi	r2,-134
  }
}
  816ed4:	e037883a 	mov	sp,fp
  816ed8:	df000017 	ldw	fp,0(sp)
  816edc:	dec00104 	addi	sp,sp,4
  816ee0:	f800283a 	ret

00816ee4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  816ee4:	defffe04 	addi	sp,sp,-8
  816ee8:	df000115 	stw	fp,4(sp)
  816eec:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  816ef0:	e03fff15 	stw	zero,-4(fp)
  816ef4:	00000506 	br	816f0c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  816ef8:	e0bfff17 	ldw	r2,-4(fp)
  816efc:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  816f00:	e0bfff17 	ldw	r2,-4(fp)
  816f04:	10800804 	addi	r2,r2,32
  816f08:	e0bfff15 	stw	r2,-4(fp)
  816f0c:	e0bfff17 	ldw	r2,-4(fp)
  816f10:	10820030 	cmpltui	r2,r2,2048
  816f14:	103ff81e 	bne	r2,zero,816ef8 <__alt_mem_onchip_mem+0xff80eef8>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  816f18:	0001883a 	nop
  816f1c:	e037883a 	mov	sp,fp
  816f20:	df000017 	ldw	fp,0(sp)
  816f24:	dec00104 	addi	sp,sp,4
  816f28:	f800283a 	ret

00816f2c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  816f2c:	defffe04 	addi	sp,sp,-8
  816f30:	dfc00115 	stw	ra,4(sp)
  816f34:	df000015 	stw	fp,0(sp)
  816f38:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  816f3c:	d0a00b17 	ldw	r2,-32724(gp)
  816f40:	10000326 	beq	r2,zero,816f50 <alt_get_errno+0x24>
  816f44:	d0a00b17 	ldw	r2,-32724(gp)
  816f48:	103ee83a 	callr	r2
  816f4c:	00000106 	br	816f54 <alt_get_errno+0x28>
  816f50:	d0a75204 	addi	r2,gp,-25272
}
  816f54:	e037883a 	mov	sp,fp
  816f58:	dfc00117 	ldw	ra,4(sp)
  816f5c:	df000017 	ldw	fp,0(sp)
  816f60:	dec00204 	addi	sp,sp,8
  816f64:	f800283a 	ret

00816f68 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  816f68:	defffa04 	addi	sp,sp,-24
  816f6c:	dfc00515 	stw	ra,20(sp)
  816f70:	df000415 	stw	fp,16(sp)
  816f74:	df000404 	addi	fp,sp,16
  816f78:	e13ffe15 	stw	r4,-8(fp)
  816f7c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  816f80:	e0bffe17 	ldw	r2,-8(fp)
  816f84:	10000326 	beq	r2,zero,816f94 <alt_dev_llist_insert+0x2c>
  816f88:	e0bffe17 	ldw	r2,-8(fp)
  816f8c:	10800217 	ldw	r2,8(r2)
  816f90:	1000061e 	bne	r2,zero,816fac <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  816f94:	0816f2c0 	call	816f2c <alt_get_errno>
  816f98:	1007883a 	mov	r3,r2
  816f9c:	00800584 	movi	r2,22
  816fa0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  816fa4:	00bffa84 	movi	r2,-22
  816fa8:	00001306 	br	816ff8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  816fac:	e0bffe17 	ldw	r2,-8(fp)
  816fb0:	e0ffff17 	ldw	r3,-4(fp)
  816fb4:	e0fffc15 	stw	r3,-16(fp)
  816fb8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  816fbc:	e0bffd17 	ldw	r2,-12(fp)
  816fc0:	e0fffc17 	ldw	r3,-16(fp)
  816fc4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  816fc8:	e0bffc17 	ldw	r2,-16(fp)
  816fcc:	10c00017 	ldw	r3,0(r2)
  816fd0:	e0bffd17 	ldw	r2,-12(fp)
  816fd4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  816fd8:	e0bffc17 	ldw	r2,-16(fp)
  816fdc:	10800017 	ldw	r2,0(r2)
  816fe0:	e0fffd17 	ldw	r3,-12(fp)
  816fe4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  816fe8:	e0bffc17 	ldw	r2,-16(fp)
  816fec:	e0fffd17 	ldw	r3,-12(fp)
  816ff0:	10c00015 	stw	r3,0(r2)

  return 0;  
  816ff4:	0005883a 	mov	r2,zero
}
  816ff8:	e037883a 	mov	sp,fp
  816ffc:	dfc00117 	ldw	ra,4(sp)
  817000:	df000017 	ldw	fp,0(sp)
  817004:	dec00204 	addi	sp,sp,8
  817008:	f800283a 	ret

0081700c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  81700c:	defffd04 	addi	sp,sp,-12
  817010:	dfc00215 	stw	ra,8(sp)
  817014:	df000115 	stw	fp,4(sp)
  817018:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  81701c:	008020b4 	movhi	r2,130
  817020:	10a05f04 	addi	r2,r2,-32388
  817024:	e0bfff15 	stw	r2,-4(fp)
  817028:	00000606 	br	817044 <_do_ctors+0x38>
        (*ctor) (); 
  81702c:	e0bfff17 	ldw	r2,-4(fp)
  817030:	10800017 	ldw	r2,0(r2)
  817034:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  817038:	e0bfff17 	ldw	r2,-4(fp)
  81703c:	10bfff04 	addi	r2,r2,-4
  817040:	e0bfff15 	stw	r2,-4(fp)
  817044:	e0ffff17 	ldw	r3,-4(fp)
  817048:	008020b4 	movhi	r2,130
  81704c:	10a06004 	addi	r2,r2,-32384
  817050:	18bff62e 	bgeu	r3,r2,81702c <__alt_mem_onchip_mem+0xff80f02c>
        (*ctor) (); 
}
  817054:	0001883a 	nop
  817058:	e037883a 	mov	sp,fp
  81705c:	dfc00117 	ldw	ra,4(sp)
  817060:	df000017 	ldw	fp,0(sp)
  817064:	dec00204 	addi	sp,sp,8
  817068:	f800283a 	ret

0081706c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  81706c:	defffd04 	addi	sp,sp,-12
  817070:	dfc00215 	stw	ra,8(sp)
  817074:	df000115 	stw	fp,4(sp)
  817078:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  81707c:	008020b4 	movhi	r2,130
  817080:	10a05f04 	addi	r2,r2,-32388
  817084:	e0bfff15 	stw	r2,-4(fp)
  817088:	00000606 	br	8170a4 <_do_dtors+0x38>
        (*dtor) (); 
  81708c:	e0bfff17 	ldw	r2,-4(fp)
  817090:	10800017 	ldw	r2,0(r2)
  817094:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  817098:	e0bfff17 	ldw	r2,-4(fp)
  81709c:	10bfff04 	addi	r2,r2,-4
  8170a0:	e0bfff15 	stw	r2,-4(fp)
  8170a4:	e0ffff17 	ldw	r3,-4(fp)
  8170a8:	008020b4 	movhi	r2,130
  8170ac:	10a06004 	addi	r2,r2,-32384
  8170b0:	18bff62e 	bgeu	r3,r2,81708c <__alt_mem_onchip_mem+0xff80f08c>
        (*dtor) (); 
}
  8170b4:	0001883a 	nop
  8170b8:	e037883a 	mov	sp,fp
  8170bc:	dfc00117 	ldw	ra,4(sp)
  8170c0:	df000017 	ldw	fp,0(sp)
  8170c4:	dec00204 	addi	sp,sp,8
  8170c8:	f800283a 	ret

008170cc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  8170cc:	defffe04 	addi	sp,sp,-8
  8170d0:	dfc00115 	stw	ra,4(sp)
  8170d4:	df000015 	stw	fp,0(sp)
  8170d8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  8170dc:	01440004 	movi	r5,4096
  8170e0:	0009883a 	mov	r4,zero
  8170e4:	0817cc00 	call	817cc0 <alt_icache_flush>
#endif
}
  8170e8:	0001883a 	nop
  8170ec:	e037883a 	mov	sp,fp
  8170f0:	dfc00117 	ldw	ra,4(sp)
  8170f4:	df000017 	ldw	fp,0(sp)
  8170f8:	dec00204 	addi	sp,sp,8
  8170fc:	f800283a 	ret

00817100 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  817100:	defff904 	addi	sp,sp,-28
  817104:	dfc00615 	stw	ra,24(sp)
  817108:	df000515 	stw	fp,20(sp)
  81710c:	df000504 	addi	fp,sp,20
  817110:	e13ffc15 	stw	r4,-16(fp)
  817114:	e17ffd15 	stw	r5,-12(fp)
  817118:	e1bffe15 	stw	r6,-8(fp)
  81711c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  817120:	e0800217 	ldw	r2,8(fp)
  817124:	d8800015 	stw	r2,0(sp)
  817128:	e1ffff17 	ldw	r7,-4(fp)
  81712c:	e1bffe17 	ldw	r6,-8(fp)
  817130:	e17ffd17 	ldw	r5,-12(fp)
  817134:	e13ffc17 	ldw	r4,-16(fp)
  817138:	08172b00 	call	8172b0 <alt_iic_isr_register>
}  
  81713c:	e037883a 	mov	sp,fp
  817140:	dfc00117 	ldw	ra,4(sp)
  817144:	df000017 	ldw	fp,0(sp)
  817148:	dec00204 	addi	sp,sp,8
  81714c:	f800283a 	ret

00817150 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  817150:	defff904 	addi	sp,sp,-28
  817154:	df000615 	stw	fp,24(sp)
  817158:	df000604 	addi	fp,sp,24
  81715c:	e13ffe15 	stw	r4,-8(fp)
  817160:	e17fff15 	stw	r5,-4(fp)
  817164:	e0bfff17 	ldw	r2,-4(fp)
  817168:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81716c:	0005303a 	rdctl	r2,status
  817170:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  817174:	e0fffb17 	ldw	r3,-20(fp)
  817178:	00bfff84 	movi	r2,-2
  81717c:	1884703a 	and	r2,r3,r2
  817180:	1001703a 	wrctl	status,r2
  
  return context;
  817184:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  817188:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
  81718c:	00c00044 	movi	r3,1
  817190:	e0bffa17 	ldw	r2,-24(fp)
  817194:	1884983a 	sll	r2,r3,r2
  817198:	1007883a 	mov	r3,r2
  81719c:	d0a75617 	ldw	r2,-25256(gp)
  8171a0:	1884b03a 	or	r2,r3,r2
  8171a4:	d0a75615 	stw	r2,-25256(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  8171a8:	d0a75617 	ldw	r2,-25256(gp)
  8171ac:	100170fa 	wrctl	ienable,r2
  8171b0:	e0bffc17 	ldw	r2,-16(fp)
  8171b4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8171b8:	e0bffd17 	ldw	r2,-12(fp)
  8171bc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  8171c0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
  8171c4:	0001883a 	nop
}
  8171c8:	e037883a 	mov	sp,fp
  8171cc:	df000017 	ldw	fp,0(sp)
  8171d0:	dec00104 	addi	sp,sp,4
  8171d4:	f800283a 	ret

008171d8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  8171d8:	defff904 	addi	sp,sp,-28
  8171dc:	df000615 	stw	fp,24(sp)
  8171e0:	df000604 	addi	fp,sp,24
  8171e4:	e13ffe15 	stw	r4,-8(fp)
  8171e8:	e17fff15 	stw	r5,-4(fp)
  8171ec:	e0bfff17 	ldw	r2,-4(fp)
  8171f0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8171f4:	0005303a 	rdctl	r2,status
  8171f8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8171fc:	e0fffb17 	ldw	r3,-20(fp)
  817200:	00bfff84 	movi	r2,-2
  817204:	1884703a 	and	r2,r3,r2
  817208:	1001703a 	wrctl	status,r2
  
  return context;
  81720c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  817210:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
  817214:	00c00044 	movi	r3,1
  817218:	e0bffa17 	ldw	r2,-24(fp)
  81721c:	1884983a 	sll	r2,r3,r2
  817220:	0084303a 	nor	r2,zero,r2
  817224:	1007883a 	mov	r3,r2
  817228:	d0a75617 	ldw	r2,-25256(gp)
  81722c:	1884703a 	and	r2,r3,r2
  817230:	d0a75615 	stw	r2,-25256(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  817234:	d0a75617 	ldw	r2,-25256(gp)
  817238:	100170fa 	wrctl	ienable,r2
  81723c:	e0bffc17 	ldw	r2,-16(fp)
  817240:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  817244:	e0bffd17 	ldw	r2,-12(fp)
  817248:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  81724c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
  817250:	0001883a 	nop
}
  817254:	e037883a 	mov	sp,fp
  817258:	df000017 	ldw	fp,0(sp)
  81725c:	dec00104 	addi	sp,sp,4
  817260:	f800283a 	ret

00817264 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  817264:	defffc04 	addi	sp,sp,-16
  817268:	df000315 	stw	fp,12(sp)
  81726c:	df000304 	addi	fp,sp,12
  817270:	e13ffe15 	stw	r4,-8(fp)
  817274:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  817278:	000530fa 	rdctl	r2,ienable
  81727c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  817280:	00c00044 	movi	r3,1
  817284:	e0bfff17 	ldw	r2,-4(fp)
  817288:	1884983a 	sll	r2,r3,r2
  81728c:	1007883a 	mov	r3,r2
  817290:	e0bffd17 	ldw	r2,-12(fp)
  817294:	1884703a 	and	r2,r3,r2
  817298:	1004c03a 	cmpne	r2,r2,zero
  81729c:	10803fcc 	andi	r2,r2,255
}
  8172a0:	e037883a 	mov	sp,fp
  8172a4:	df000017 	ldw	fp,0(sp)
  8172a8:	dec00104 	addi	sp,sp,4
  8172ac:	f800283a 	ret

008172b0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  8172b0:	defff504 	addi	sp,sp,-44
  8172b4:	dfc00a15 	stw	ra,40(sp)
  8172b8:	df000915 	stw	fp,36(sp)
  8172bc:	df000904 	addi	fp,sp,36
  8172c0:	e13ffc15 	stw	r4,-16(fp)
  8172c4:	e17ffd15 	stw	r5,-12(fp)
  8172c8:	e1bffe15 	stw	r6,-8(fp)
  8172cc:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
  8172d0:	00bffa84 	movi	r2,-22
  8172d4:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  8172d8:	e0bffd17 	ldw	r2,-12(fp)
  8172dc:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  8172e0:	e0bff817 	ldw	r2,-32(fp)
  8172e4:	10800808 	cmpgei	r2,r2,32
  8172e8:	1000271e 	bne	r2,zero,817388 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8172ec:	0005303a 	rdctl	r2,status
  8172f0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8172f4:	e0fffb17 	ldw	r3,-20(fp)
  8172f8:	00bfff84 	movi	r2,-2
  8172fc:	1884703a 	and	r2,r3,r2
  817300:	1001703a 	wrctl	status,r2
  
  return context;
  817304:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  817308:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
  81730c:	008020b4 	movhi	r2,130
  817310:	10b05304 	addi	r2,r2,-16052
  817314:	e0fff817 	ldw	r3,-32(fp)
  817318:	180690fa 	slli	r3,r3,3
  81731c:	10c5883a 	add	r2,r2,r3
  817320:	e0fffe17 	ldw	r3,-8(fp)
  817324:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
  817328:	008020b4 	movhi	r2,130
  81732c:	10b05304 	addi	r2,r2,-16052
  817330:	e0fff817 	ldw	r3,-32(fp)
  817334:	180690fa 	slli	r3,r3,3
  817338:	10c5883a 	add	r2,r2,r3
  81733c:	10800104 	addi	r2,r2,4
  817340:	e0ffff17 	ldw	r3,-4(fp)
  817344:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  817348:	e0bffe17 	ldw	r2,-8(fp)
  81734c:	10000526 	beq	r2,zero,817364 <alt_iic_isr_register+0xb4>
  817350:	e0bff817 	ldw	r2,-32(fp)
  817354:	100b883a 	mov	r5,r2
  817358:	e13ffc17 	ldw	r4,-16(fp)
  81735c:	08171500 	call	817150 <alt_ic_irq_enable>
  817360:	00000406 	br	817374 <alt_iic_isr_register+0xc4>
  817364:	e0bff817 	ldw	r2,-32(fp)
  817368:	100b883a 	mov	r5,r2
  81736c:	e13ffc17 	ldw	r4,-16(fp)
  817370:	08171d80 	call	8171d8 <alt_ic_irq_disable>
  817374:	e0bff715 	stw	r2,-36(fp)
  817378:	e0bffa17 	ldw	r2,-24(fp)
  81737c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  817380:	e0bff917 	ldw	r2,-28(fp)
  817384:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  817388:	e0bff717 	ldw	r2,-36(fp)
}
  81738c:	e037883a 	mov	sp,fp
  817390:	dfc00117 	ldw	ra,4(sp)
  817394:	df000017 	ldw	fp,0(sp)
  817398:	dec00204 	addi	sp,sp,8
  81739c:	f800283a 	ret

008173a0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  8173a0:	defff904 	addi	sp,sp,-28
  8173a4:	dfc00615 	stw	ra,24(sp)
  8173a8:	df000515 	stw	fp,20(sp)
  8173ac:	df000504 	addi	fp,sp,20
  8173b0:	e13ffc15 	stw	r4,-16(fp)
  8173b4:	e17ffd15 	stw	r5,-12(fp)
  8173b8:	e1bffe15 	stw	r6,-8(fp)
  8173bc:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  8173c0:	e1bfff17 	ldw	r6,-4(fp)
  8173c4:	e17ffe17 	ldw	r5,-8(fp)
  8173c8:	e13ffd17 	ldw	r4,-12(fp)
  8173cc:	08175e00 	call	8175e0 <open>
  8173d0:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  8173d4:	e0bffb17 	ldw	r2,-20(fp)
  8173d8:	10001c16 	blt	r2,zero,81744c <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
  8173dc:	008020b4 	movhi	r2,130
  8173e0:	10a3fe04 	addi	r2,r2,-28680
  8173e4:	e0fffb17 	ldw	r3,-20(fp)
  8173e8:	18c00324 	muli	r3,r3,12
  8173ec:	10c5883a 	add	r2,r2,r3
  8173f0:	10c00017 	ldw	r3,0(r2)
  8173f4:	e0bffc17 	ldw	r2,-16(fp)
  8173f8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  8173fc:	008020b4 	movhi	r2,130
  817400:	10a3fe04 	addi	r2,r2,-28680
  817404:	e0fffb17 	ldw	r3,-20(fp)
  817408:	18c00324 	muli	r3,r3,12
  81740c:	10c5883a 	add	r2,r2,r3
  817410:	10800104 	addi	r2,r2,4
  817414:	10c00017 	ldw	r3,0(r2)
  817418:	e0bffc17 	ldw	r2,-16(fp)
  81741c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  817420:	008020b4 	movhi	r2,130
  817424:	10a3fe04 	addi	r2,r2,-28680
  817428:	e0fffb17 	ldw	r3,-20(fp)
  81742c:	18c00324 	muli	r3,r3,12
  817430:	10c5883a 	add	r2,r2,r3
  817434:	10800204 	addi	r2,r2,8
  817438:	10c00017 	ldw	r3,0(r2)
  81743c:	e0bffc17 	ldw	r2,-16(fp)
  817440:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  817444:	e13ffb17 	ldw	r4,-20(fp)
  817448:	08147580 	call	814758 <alt_release_fd>
  }
} 
  81744c:	0001883a 	nop
  817450:	e037883a 	mov	sp,fp
  817454:	dfc00117 	ldw	ra,4(sp)
  817458:	df000017 	ldw	fp,0(sp)
  81745c:	dec00204 	addi	sp,sp,8
  817460:	f800283a 	ret

00817464 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  817464:	defffb04 	addi	sp,sp,-20
  817468:	dfc00415 	stw	ra,16(sp)
  81746c:	df000315 	stw	fp,12(sp)
  817470:	df000304 	addi	fp,sp,12
  817474:	e13ffd15 	stw	r4,-12(fp)
  817478:	e17ffe15 	stw	r5,-8(fp)
  81747c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  817480:	01c07fc4 	movi	r7,511
  817484:	01800044 	movi	r6,1
  817488:	e17ffd17 	ldw	r5,-12(fp)
  81748c:	010020b4 	movhi	r4,130
  817490:	21240104 	addi	r4,r4,-28668
  817494:	08173a00 	call	8173a0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  817498:	01c07fc4 	movi	r7,511
  81749c:	000d883a 	mov	r6,zero
  8174a0:	e17ffe17 	ldw	r5,-8(fp)
  8174a4:	010020b4 	movhi	r4,130
  8174a8:	2123fe04 	addi	r4,r4,-28680
  8174ac:	08173a00 	call	8173a0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  8174b0:	01c07fc4 	movi	r7,511
  8174b4:	01800044 	movi	r6,1
  8174b8:	e17fff17 	ldw	r5,-4(fp)
  8174bc:	010020b4 	movhi	r4,130
  8174c0:	21240404 	addi	r4,r4,-28656
  8174c4:	08173a00 	call	8173a0 <alt_open_fd>
}  
  8174c8:	0001883a 	nop
  8174cc:	e037883a 	mov	sp,fp
  8174d0:	dfc00117 	ldw	ra,4(sp)
  8174d4:	df000017 	ldw	fp,0(sp)
  8174d8:	dec00204 	addi	sp,sp,8
  8174dc:	f800283a 	ret

008174e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8174e0:	defffe04 	addi	sp,sp,-8
  8174e4:	dfc00115 	stw	ra,4(sp)
  8174e8:	df000015 	stw	fp,0(sp)
  8174ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8174f0:	d0a00b17 	ldw	r2,-32724(gp)
  8174f4:	10000326 	beq	r2,zero,817504 <alt_get_errno+0x24>
  8174f8:	d0a00b17 	ldw	r2,-32724(gp)
  8174fc:	103ee83a 	callr	r2
  817500:	00000106 	br	817508 <alt_get_errno+0x28>
  817504:	d0a75204 	addi	r2,gp,-25272
}
  817508:	e037883a 	mov	sp,fp
  81750c:	dfc00117 	ldw	ra,4(sp)
  817510:	df000017 	ldw	fp,0(sp)
  817514:	dec00204 	addi	sp,sp,8
  817518:	f800283a 	ret

0081751c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  81751c:	defffd04 	addi	sp,sp,-12
  817520:	df000215 	stw	fp,8(sp)
  817524:	df000204 	addi	fp,sp,8
  817528:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  81752c:	e0bfff17 	ldw	r2,-4(fp)
  817530:	10800217 	ldw	r2,8(r2)
  817534:	10d00034 	orhi	r3,r2,16384
  817538:	e0bfff17 	ldw	r2,-4(fp)
  81753c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  817540:	e03ffe15 	stw	zero,-8(fp)
  817544:	00001d06 	br	8175bc <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  817548:	008020b4 	movhi	r2,130
  81754c:	10a3fe04 	addi	r2,r2,-28680
  817550:	e0fffe17 	ldw	r3,-8(fp)
  817554:	18c00324 	muli	r3,r3,12
  817558:	10c5883a 	add	r2,r2,r3
  81755c:	10c00017 	ldw	r3,0(r2)
  817560:	e0bfff17 	ldw	r2,-4(fp)
  817564:	10800017 	ldw	r2,0(r2)
  817568:	1880111e 	bne	r3,r2,8175b0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  81756c:	008020b4 	movhi	r2,130
  817570:	10a3fe04 	addi	r2,r2,-28680
  817574:	e0fffe17 	ldw	r3,-8(fp)
  817578:	18c00324 	muli	r3,r3,12
  81757c:	10c5883a 	add	r2,r2,r3
  817580:	10800204 	addi	r2,r2,8
  817584:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  817588:	1000090e 	bge	r2,zero,8175b0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  81758c:	e0bffe17 	ldw	r2,-8(fp)
  817590:	10c00324 	muli	r3,r2,12
  817594:	008020b4 	movhi	r2,130
  817598:	10a3fe04 	addi	r2,r2,-28680
  81759c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  8175a0:	e0bfff17 	ldw	r2,-4(fp)
  8175a4:	18800226 	beq	r3,r2,8175b0 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  8175a8:	00bffcc4 	movi	r2,-13
  8175ac:	00000806 	br	8175d0 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  8175b0:	e0bffe17 	ldw	r2,-8(fp)
  8175b4:	10800044 	addi	r2,r2,1
  8175b8:	e0bffe15 	stw	r2,-8(fp)
  8175bc:	d0a00a17 	ldw	r2,-32728(gp)
  8175c0:	1007883a 	mov	r3,r2
  8175c4:	e0bffe17 	ldw	r2,-8(fp)
  8175c8:	18bfdf2e 	bgeu	r3,r2,817548 <__alt_mem_onchip_mem+0xff80f548>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  8175cc:	0005883a 	mov	r2,zero
}
  8175d0:	e037883a 	mov	sp,fp
  8175d4:	df000017 	ldw	fp,0(sp)
  8175d8:	dec00104 	addi	sp,sp,4
  8175dc:	f800283a 	ret

008175e0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  8175e0:	defff604 	addi	sp,sp,-40
  8175e4:	dfc00915 	stw	ra,36(sp)
  8175e8:	df000815 	stw	fp,32(sp)
  8175ec:	df000804 	addi	fp,sp,32
  8175f0:	e13ffd15 	stw	r4,-12(fp)
  8175f4:	e17ffe15 	stw	r5,-8(fp)
  8175f8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  8175fc:	00bfffc4 	movi	r2,-1
  817600:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  817604:	00bffb44 	movi	r2,-19
  817608:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  81760c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  817610:	d1600804 	addi	r5,gp,-32736
  817614:	e13ffd17 	ldw	r4,-12(fp)
  817618:	0817a840 	call	817a84 <alt_find_dev>
  81761c:	e0bff815 	stw	r2,-32(fp)
  817620:	e0bff817 	ldw	r2,-32(fp)
  817624:	1000051e 	bne	r2,zero,81763c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  817628:	e13ffd17 	ldw	r4,-12(fp)
  81762c:	0817b140 	call	817b14 <alt_find_file>
  817630:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  817634:	00800044 	movi	r2,1
  817638:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  81763c:	e0bff817 	ldw	r2,-32(fp)
  817640:	10002926 	beq	r2,zero,8176e8 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
  817644:	e13ff817 	ldw	r4,-32(fp)
  817648:	0817c1c0 	call	817c1c <alt_get_fd>
  81764c:	e0bff915 	stw	r2,-28(fp)
  817650:	e0bff917 	ldw	r2,-28(fp)
  817654:	1000030e 	bge	r2,zero,817664 <open+0x84>
    {
      status = index;
  817658:	e0bff917 	ldw	r2,-28(fp)
  81765c:	e0bffa15 	stw	r2,-24(fp)
  817660:	00002306 	br	8176f0 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
  817664:	e0bff917 	ldw	r2,-28(fp)
  817668:	10c00324 	muli	r3,r2,12
  81766c:	008020b4 	movhi	r2,130
  817670:	10a3fe04 	addi	r2,r2,-28680
  817674:	1885883a 	add	r2,r3,r2
  817678:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  81767c:	e0fffe17 	ldw	r3,-8(fp)
  817680:	00900034 	movhi	r2,16384
  817684:	10bfffc4 	addi	r2,r2,-1
  817688:	1886703a 	and	r3,r3,r2
  81768c:	e0bffc17 	ldw	r2,-16(fp)
  817690:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  817694:	e0bffb17 	ldw	r2,-20(fp)
  817698:	1000051e 	bne	r2,zero,8176b0 <open+0xd0>
  81769c:	e13ffc17 	ldw	r4,-16(fp)
  8176a0:	081751c0 	call	81751c <alt_file_locked>
  8176a4:	e0bffa15 	stw	r2,-24(fp)
  8176a8:	e0bffa17 	ldw	r2,-24(fp)
  8176ac:	10001016 	blt	r2,zero,8176f0 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  8176b0:	e0bff817 	ldw	r2,-32(fp)
  8176b4:	10800317 	ldw	r2,12(r2)
  8176b8:	10000826 	beq	r2,zero,8176dc <open+0xfc>
  8176bc:	e0bff817 	ldw	r2,-32(fp)
  8176c0:	10800317 	ldw	r2,12(r2)
  8176c4:	e1ffff17 	ldw	r7,-4(fp)
  8176c8:	e1bffe17 	ldw	r6,-8(fp)
  8176cc:	e17ffd17 	ldw	r5,-12(fp)
  8176d0:	e13ffc17 	ldw	r4,-16(fp)
  8176d4:	103ee83a 	callr	r2
  8176d8:	00000106 	br	8176e0 <open+0x100>
  8176dc:	0005883a 	mov	r2,zero
  8176e0:	e0bffa15 	stw	r2,-24(fp)
  8176e4:	00000206 	br	8176f0 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
  8176e8:	00bffb44 	movi	r2,-19
  8176ec:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  8176f0:	e0bffa17 	ldw	r2,-24(fp)
  8176f4:	1000090e 	bge	r2,zero,81771c <open+0x13c>
  {
    alt_release_fd (index);  
  8176f8:	e13ff917 	ldw	r4,-28(fp)
  8176fc:	08147580 	call	814758 <alt_release_fd>
    ALT_ERRNO = -status;
  817700:	08174e00 	call	8174e0 <alt_get_errno>
  817704:	1007883a 	mov	r3,r2
  817708:	e0bffa17 	ldw	r2,-24(fp)
  81770c:	0085c83a 	sub	r2,zero,r2
  817710:	18800015 	stw	r2,0(r3)
    return -1;
  817714:	00bfffc4 	movi	r2,-1
  817718:	00000106 	br	817720 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
  81771c:	e0bff917 	ldw	r2,-28(fp)
}
  817720:	e037883a 	mov	sp,fp
  817724:	dfc00117 	ldw	ra,4(sp)
  817728:	df000017 	ldw	fp,0(sp)
  81772c:	dec00204 	addi	sp,sp,8
  817730:	f800283a 	ret

00817734 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  817734:	defffa04 	addi	sp,sp,-24
  817738:	df000515 	stw	fp,20(sp)
  81773c:	df000504 	addi	fp,sp,20
  817740:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  817744:	0005303a 	rdctl	r2,status
  817748:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81774c:	e0fffc17 	ldw	r3,-16(fp)
  817750:	00bfff84 	movi	r2,-2
  817754:	1884703a 	and	r2,r3,r2
  817758:	1001703a 	wrctl	status,r2
  
  return context;
  81775c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  817760:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  817764:	e0bfff17 	ldw	r2,-4(fp)
  817768:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  81776c:	e0bffd17 	ldw	r2,-12(fp)
  817770:	10800017 	ldw	r2,0(r2)
  817774:	e0fffd17 	ldw	r3,-12(fp)
  817778:	18c00117 	ldw	r3,4(r3)
  81777c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  817780:	e0bffd17 	ldw	r2,-12(fp)
  817784:	10800117 	ldw	r2,4(r2)
  817788:	e0fffd17 	ldw	r3,-12(fp)
  81778c:	18c00017 	ldw	r3,0(r3)
  817790:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  817794:	e0bffd17 	ldw	r2,-12(fp)
  817798:	e0fffd17 	ldw	r3,-12(fp)
  81779c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  8177a0:	e0bffd17 	ldw	r2,-12(fp)
  8177a4:	e0fffd17 	ldw	r3,-12(fp)
  8177a8:	10c00015 	stw	r3,0(r2)
  8177ac:	e0bffb17 	ldw	r2,-20(fp)
  8177b0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8177b4:	e0bffe17 	ldw	r2,-8(fp)
  8177b8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  8177bc:	0001883a 	nop
  8177c0:	e037883a 	mov	sp,fp
  8177c4:	df000017 	ldw	fp,0(sp)
  8177c8:	dec00104 	addi	sp,sp,4
  8177cc:	f800283a 	ret

008177d0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  8177d0:	defffb04 	addi	sp,sp,-20
  8177d4:	dfc00415 	stw	ra,16(sp)
  8177d8:	df000315 	stw	fp,12(sp)
  8177dc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  8177e0:	d0a00f17 	ldw	r2,-32708(gp)
  8177e4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  8177e8:	d0a75817 	ldw	r2,-25248(gp)
  8177ec:	10800044 	addi	r2,r2,1
  8177f0:	d0a75815 	stw	r2,-25248(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  8177f4:	00002e06 	br	8178b0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  8177f8:	e0bffd17 	ldw	r2,-12(fp)
  8177fc:	10800017 	ldw	r2,0(r2)
  817800:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  817804:	e0bffd17 	ldw	r2,-12(fp)
  817808:	10800403 	ldbu	r2,16(r2)
  81780c:	10803fcc 	andi	r2,r2,255
  817810:	10000426 	beq	r2,zero,817824 <alt_tick+0x54>
  817814:	d0a75817 	ldw	r2,-25248(gp)
  817818:	1000021e 	bne	r2,zero,817824 <alt_tick+0x54>
    {
      alarm->rollover = 0;
  81781c:	e0bffd17 	ldw	r2,-12(fp)
  817820:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  817824:	e0bffd17 	ldw	r2,-12(fp)
  817828:	10800217 	ldw	r2,8(r2)
  81782c:	d0e75817 	ldw	r3,-25248(gp)
  817830:	18801d36 	bltu	r3,r2,8178a8 <alt_tick+0xd8>
  817834:	e0bffd17 	ldw	r2,-12(fp)
  817838:	10800403 	ldbu	r2,16(r2)
  81783c:	10803fcc 	andi	r2,r2,255
  817840:	1000191e 	bne	r2,zero,8178a8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  817844:	e0bffd17 	ldw	r2,-12(fp)
  817848:	10800317 	ldw	r2,12(r2)
  81784c:	e0fffd17 	ldw	r3,-12(fp)
  817850:	18c00517 	ldw	r3,20(r3)
  817854:	1809883a 	mov	r4,r3
  817858:	103ee83a 	callr	r2
  81785c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  817860:	e0bfff17 	ldw	r2,-4(fp)
  817864:	1000031e 	bne	r2,zero,817874 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  817868:	e13ffd17 	ldw	r4,-12(fp)
  81786c:	08177340 	call	817734 <alt_alarm_stop>
  817870:	00000d06 	br	8178a8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  817874:	e0bffd17 	ldw	r2,-12(fp)
  817878:	10c00217 	ldw	r3,8(r2)
  81787c:	e0bfff17 	ldw	r2,-4(fp)
  817880:	1887883a 	add	r3,r3,r2
  817884:	e0bffd17 	ldw	r2,-12(fp)
  817888:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  81788c:	e0bffd17 	ldw	r2,-12(fp)
  817890:	10c00217 	ldw	r3,8(r2)
  817894:	d0a75817 	ldw	r2,-25248(gp)
  817898:	1880032e 	bgeu	r3,r2,8178a8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  81789c:	e0bffd17 	ldw	r2,-12(fp)
  8178a0:	00c00044 	movi	r3,1
  8178a4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  8178a8:	e0bffe17 	ldw	r2,-8(fp)
  8178ac:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  8178b0:	e0fffd17 	ldw	r3,-12(fp)
  8178b4:	d0a00f04 	addi	r2,gp,-32708
  8178b8:	18bfcf1e 	bne	r3,r2,8177f8 <__alt_mem_onchip_mem+0xff80f7f8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  8178bc:	0001883a 	nop
}
  8178c0:	0001883a 	nop
  8178c4:	e037883a 	mov	sp,fp
  8178c8:	dfc00117 	ldw	ra,4(sp)
  8178cc:	df000017 	ldw	fp,0(sp)
  8178d0:	dec00204 	addi	sp,sp,8
  8178d4:	f800283a 	ret

008178d8 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  8178d8:	defffd04 	addi	sp,sp,-12
  8178dc:	dfc00215 	stw	ra,8(sp)
  8178e0:	df000115 	stw	fp,4(sp)
  8178e4:	df000104 	addi	fp,sp,4
  8178e8:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  8178ec:	e13fff17 	ldw	r4,-4(fp)
  8178f0:	081792c0 	call	81792c <alt_busy_sleep>
}
  8178f4:	e037883a 	mov	sp,fp
  8178f8:	dfc00117 	ldw	ra,4(sp)
  8178fc:	df000017 	ldw	fp,0(sp)
  817900:	dec00204 	addi	sp,sp,8
  817904:	f800283a 	ret

00817908 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  817908:	deffff04 	addi	sp,sp,-4
  81790c:	df000015 	stw	fp,0(sp)
  817910:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  817914:	000170fa 	wrctl	ienable,zero
}
  817918:	0001883a 	nop
  81791c:	e037883a 	mov	sp,fp
  817920:	df000017 	ldw	fp,0(sp)
  817924:	dec00104 	addi	sp,sp,4
  817928:	f800283a 	ret

0081792c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  81792c:	defffa04 	addi	sp,sp,-24
  817930:	dfc00515 	stw	ra,20(sp)
  817934:	df000415 	stw	fp,16(sp)
  817938:	df000404 	addi	fp,sp,16
  81793c:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  817940:	008000c4 	movi	r2,3
  817944:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
  817948:	e0fffd17 	ldw	r3,-12(fp)
  81794c:	008003f4 	movhi	r2,15
  817950:	10909004 	addi	r2,r2,16960
  817954:	1885383a 	mul	r2,r3,r2
  817958:	100b883a 	mov	r5,r2
  81795c:	0100bef4 	movhi	r4,763
  817960:	213c2004 	addi	r4,r4,-3968
  817964:	08135b00 	call	8135b0 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  817968:	100b883a 	mov	r5,r2
  81796c:	01200034 	movhi	r4,32768
  817970:	213fffc4 	addi	r4,r4,-1
  817974:	08135b00 	call	8135b0 <__udivsi3>
  817978:	100b883a 	mov	r5,r2
  81797c:	e13fff17 	ldw	r4,-4(fp)
  817980:	08135b00 	call	8135b0 <__udivsi3>
  817984:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  817988:	e0bffe17 	ldw	r2,-8(fp)
  81798c:	10002a26 	beq	r2,zero,817a38 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
  817990:	e03ffc15 	stw	zero,-16(fp)
  817994:	00001706 	br	8179f4 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  817998:	00a00034 	movhi	r2,32768
  81799c:	10bfffc4 	addi	r2,r2,-1
  8179a0:	10bfffc4 	addi	r2,r2,-1
  8179a4:	103ffe1e 	bne	r2,zero,8179a0 <__alt_mem_onchip_mem+0xff80f9a0>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
  8179a8:	e0fffd17 	ldw	r3,-12(fp)
  8179ac:	008003f4 	movhi	r2,15
  8179b0:	10909004 	addi	r2,r2,16960
  8179b4:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  8179b8:	100b883a 	mov	r5,r2
  8179bc:	0100bef4 	movhi	r4,763
  8179c0:	213c2004 	addi	r4,r4,-3968
  8179c4:	08135b00 	call	8135b0 <__udivsi3>
  8179c8:	100b883a 	mov	r5,r2
  8179cc:	01200034 	movhi	r4,32768
  8179d0:	213fffc4 	addi	r4,r4,-1
  8179d4:	08135b00 	call	8135b0 <__udivsi3>
  8179d8:	1007883a 	mov	r3,r2
  8179dc:	e0bfff17 	ldw	r2,-4(fp)
  8179e0:	10c5c83a 	sub	r2,r2,r3
  8179e4:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  8179e8:	e0bffc17 	ldw	r2,-16(fp)
  8179ec:	10800044 	addi	r2,r2,1
  8179f0:	e0bffc15 	stw	r2,-16(fp)
  8179f4:	e0fffc17 	ldw	r3,-16(fp)
  8179f8:	e0bffe17 	ldw	r2,-8(fp)
  8179fc:	18bfe616 	blt	r3,r2,817998 <__alt_mem_onchip_mem+0xff80f998>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  817a00:	e0fffd17 	ldw	r3,-12(fp)
  817a04:	008003f4 	movhi	r2,15
  817a08:	10909004 	addi	r2,r2,16960
  817a0c:	1885383a 	mul	r2,r3,r2
  817a10:	100b883a 	mov	r5,r2
  817a14:	0100bef4 	movhi	r4,763
  817a18:	213c2004 	addi	r4,r4,-3968
  817a1c:	08135b00 	call	8135b0 <__udivsi3>
  817a20:	1007883a 	mov	r3,r2
  817a24:	e0bfff17 	ldw	r2,-4(fp)
  817a28:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  817a2c:	10bfffc4 	addi	r2,r2,-1
  817a30:	103ffe1e 	bne	r2,zero,817a2c <__alt_mem_onchip_mem+0xff80fa2c>
  817a34:	00000d06 	br	817a6c <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  817a38:	e0fffd17 	ldw	r3,-12(fp)
  817a3c:	008003f4 	movhi	r2,15
  817a40:	10909004 	addi	r2,r2,16960
  817a44:	1885383a 	mul	r2,r3,r2
  817a48:	100b883a 	mov	r5,r2
  817a4c:	0100bef4 	movhi	r4,763
  817a50:	213c2004 	addi	r4,r4,-3968
  817a54:	08135b00 	call	8135b0 <__udivsi3>
  817a58:	1007883a 	mov	r3,r2
  817a5c:	e0bfff17 	ldw	r2,-4(fp)
  817a60:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  817a64:	10bfffc4 	addi	r2,r2,-1
  817a68:	00bffe16 	blt	zero,r2,817a64 <__alt_mem_onchip_mem+0xff80fa64>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  817a6c:	0005883a 	mov	r2,zero
}
  817a70:	e037883a 	mov	sp,fp
  817a74:	dfc00117 	ldw	ra,4(sp)
  817a78:	df000017 	ldw	fp,0(sp)
  817a7c:	dec00204 	addi	sp,sp,8
  817a80:	f800283a 	ret

00817a84 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  817a84:	defffa04 	addi	sp,sp,-24
  817a88:	dfc00515 	stw	ra,20(sp)
  817a8c:	df000415 	stw	fp,16(sp)
  817a90:	df000404 	addi	fp,sp,16
  817a94:	e13ffe15 	stw	r4,-8(fp)
  817a98:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  817a9c:	e0bfff17 	ldw	r2,-4(fp)
  817aa0:	10800017 	ldw	r2,0(r2)
  817aa4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  817aa8:	e13ffe17 	ldw	r4,-8(fp)
  817aac:	080fe780 	call	80fe78 <strlen>
  817ab0:	10800044 	addi	r2,r2,1
  817ab4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  817ab8:	00000d06 	br	817af0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  817abc:	e0bffc17 	ldw	r2,-16(fp)
  817ac0:	10800217 	ldw	r2,8(r2)
  817ac4:	e0fffd17 	ldw	r3,-12(fp)
  817ac8:	180d883a 	mov	r6,r3
  817acc:	e17ffe17 	ldw	r5,-8(fp)
  817ad0:	1009883a 	mov	r4,r2
  817ad4:	0817e380 	call	817e38 <memcmp>
  817ad8:	1000021e 	bne	r2,zero,817ae4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  817adc:	e0bffc17 	ldw	r2,-16(fp)
  817ae0:	00000706 	br	817b00 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  817ae4:	e0bffc17 	ldw	r2,-16(fp)
  817ae8:	10800017 	ldw	r2,0(r2)
  817aec:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  817af0:	e0fffc17 	ldw	r3,-16(fp)
  817af4:	e0bfff17 	ldw	r2,-4(fp)
  817af8:	18bff01e 	bne	r3,r2,817abc <__alt_mem_onchip_mem+0xff80fabc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  817afc:	0005883a 	mov	r2,zero
}
  817b00:	e037883a 	mov	sp,fp
  817b04:	dfc00117 	ldw	ra,4(sp)
  817b08:	df000017 	ldw	fp,0(sp)
  817b0c:	dec00204 	addi	sp,sp,8
  817b10:	f800283a 	ret

00817b14 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  817b14:	defffb04 	addi	sp,sp,-20
  817b18:	dfc00415 	stw	ra,16(sp)
  817b1c:	df000315 	stw	fp,12(sp)
  817b20:	df000304 	addi	fp,sp,12
  817b24:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  817b28:	d0a00617 	ldw	r2,-32744(gp)
  817b2c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  817b30:	00003106 	br	817bf8 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
  817b34:	e0bffd17 	ldw	r2,-12(fp)
  817b38:	10800217 	ldw	r2,8(r2)
  817b3c:	1009883a 	mov	r4,r2
  817b40:	080fe780 	call	80fe78 <strlen>
  817b44:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  817b48:	e0bffd17 	ldw	r2,-12(fp)
  817b4c:	10c00217 	ldw	r3,8(r2)
  817b50:	e0bffe17 	ldw	r2,-8(fp)
  817b54:	10bfffc4 	addi	r2,r2,-1
  817b58:	1885883a 	add	r2,r3,r2
  817b5c:	10800003 	ldbu	r2,0(r2)
  817b60:	10803fcc 	andi	r2,r2,255
  817b64:	1080201c 	xori	r2,r2,128
  817b68:	10bfe004 	addi	r2,r2,-128
  817b6c:	10800bd8 	cmpnei	r2,r2,47
  817b70:	1000031e 	bne	r2,zero,817b80 <alt_find_file+0x6c>
    {
      len -= 1;
  817b74:	e0bffe17 	ldw	r2,-8(fp)
  817b78:	10bfffc4 	addi	r2,r2,-1
  817b7c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  817b80:	e0bffe17 	ldw	r2,-8(fp)
  817b84:	e0ffff17 	ldw	r3,-4(fp)
  817b88:	1885883a 	add	r2,r3,r2
  817b8c:	10800003 	ldbu	r2,0(r2)
  817b90:	10803fcc 	andi	r2,r2,255
  817b94:	1080201c 	xori	r2,r2,128
  817b98:	10bfe004 	addi	r2,r2,-128
  817b9c:	10800be0 	cmpeqi	r2,r2,47
  817ba0:	1000081e 	bne	r2,zero,817bc4 <alt_find_file+0xb0>
  817ba4:	e0bffe17 	ldw	r2,-8(fp)
  817ba8:	e0ffff17 	ldw	r3,-4(fp)
  817bac:	1885883a 	add	r2,r3,r2
  817bb0:	10800003 	ldbu	r2,0(r2)
  817bb4:	10803fcc 	andi	r2,r2,255
  817bb8:	1080201c 	xori	r2,r2,128
  817bbc:	10bfe004 	addi	r2,r2,-128
  817bc0:	10000a1e 	bne	r2,zero,817bec <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
  817bc4:	e0bffd17 	ldw	r2,-12(fp)
  817bc8:	10800217 	ldw	r2,8(r2)
  817bcc:	e0fffe17 	ldw	r3,-8(fp)
  817bd0:	180d883a 	mov	r6,r3
  817bd4:	e17fff17 	ldw	r5,-4(fp)
  817bd8:	1009883a 	mov	r4,r2
  817bdc:	0817e380 	call	817e38 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  817be0:	1000021e 	bne	r2,zero,817bec <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  817be4:	e0bffd17 	ldw	r2,-12(fp)
  817be8:	00000706 	br	817c08 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
  817bec:	e0bffd17 	ldw	r2,-12(fp)
  817bf0:	10800017 	ldw	r2,0(r2)
  817bf4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  817bf8:	e0fffd17 	ldw	r3,-12(fp)
  817bfc:	d0a00604 	addi	r2,gp,-32744
  817c00:	18bfcc1e 	bne	r3,r2,817b34 <__alt_mem_onchip_mem+0xff80fb34>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  817c04:	0005883a 	mov	r2,zero
}
  817c08:	e037883a 	mov	sp,fp
  817c0c:	dfc00117 	ldw	ra,4(sp)
  817c10:	df000017 	ldw	fp,0(sp)
  817c14:	dec00204 	addi	sp,sp,8
  817c18:	f800283a 	ret

00817c1c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  817c1c:	defffc04 	addi	sp,sp,-16
  817c20:	df000315 	stw	fp,12(sp)
  817c24:	df000304 	addi	fp,sp,12
  817c28:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  817c2c:	00bffa04 	movi	r2,-24
  817c30:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  817c34:	e03ffd15 	stw	zero,-12(fp)
  817c38:	00001906 	br	817ca0 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
  817c3c:	008020b4 	movhi	r2,130
  817c40:	10a3fe04 	addi	r2,r2,-28680
  817c44:	e0fffd17 	ldw	r3,-12(fp)
  817c48:	18c00324 	muli	r3,r3,12
  817c4c:	10c5883a 	add	r2,r2,r3
  817c50:	10800017 	ldw	r2,0(r2)
  817c54:	10000f1e 	bne	r2,zero,817c94 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
  817c58:	008020b4 	movhi	r2,130
  817c5c:	10a3fe04 	addi	r2,r2,-28680
  817c60:	e0fffd17 	ldw	r3,-12(fp)
  817c64:	18c00324 	muli	r3,r3,12
  817c68:	10c5883a 	add	r2,r2,r3
  817c6c:	e0ffff17 	ldw	r3,-4(fp)
  817c70:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  817c74:	d0e00a17 	ldw	r3,-32728(gp)
  817c78:	e0bffd17 	ldw	r2,-12(fp)
  817c7c:	1880020e 	bge	r3,r2,817c88 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
  817c80:	e0bffd17 	ldw	r2,-12(fp)
  817c84:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
  817c88:	e0bffd17 	ldw	r2,-12(fp)
  817c8c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
  817c90:	00000606 	br	817cac <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  817c94:	e0bffd17 	ldw	r2,-12(fp)
  817c98:	10800044 	addi	r2,r2,1
  817c9c:	e0bffd15 	stw	r2,-12(fp)
  817ca0:	e0bffd17 	ldw	r2,-12(fp)
  817ca4:	10800810 	cmplti	r2,r2,32
  817ca8:	103fe41e 	bne	r2,zero,817c3c <__alt_mem_onchip_mem+0xff80fc3c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  817cac:	e0bffe17 	ldw	r2,-8(fp)
}
  817cb0:	e037883a 	mov	sp,fp
  817cb4:	df000017 	ldw	fp,0(sp)
  817cb8:	dec00104 	addi	sp,sp,4
  817cbc:	f800283a 	ret

00817cc0 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  817cc0:	defffb04 	addi	sp,sp,-20
  817cc4:	df000415 	stw	fp,16(sp)
  817cc8:	df000404 	addi	fp,sp,16
  817ccc:	e13ffe15 	stw	r4,-8(fp)
  817cd0:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  817cd4:	e0bfff17 	ldw	r2,-4(fp)
  817cd8:	10840070 	cmpltui	r2,r2,4097
  817cdc:	1000021e 	bne	r2,zero,817ce8 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  817ce0:	00840004 	movi	r2,4096
  817ce4:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  817ce8:	e0fffe17 	ldw	r3,-8(fp)
  817cec:	e0bfff17 	ldw	r2,-4(fp)
  817cf0:	1885883a 	add	r2,r3,r2
  817cf4:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  817cf8:	e0bffe17 	ldw	r2,-8(fp)
  817cfc:	e0bffc15 	stw	r2,-16(fp)
  817d00:	00000506 	br	817d18 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  817d04:	e0bffc17 	ldw	r2,-16(fp)
  817d08:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  817d0c:	e0bffc17 	ldw	r2,-16(fp)
  817d10:	10800804 	addi	r2,r2,32
  817d14:	e0bffc15 	stw	r2,-16(fp)
  817d18:	e0fffc17 	ldw	r3,-16(fp)
  817d1c:	e0bffd17 	ldw	r2,-12(fp)
  817d20:	18bff836 	bltu	r3,r2,817d04 <__alt_mem_onchip_mem+0xff80fd04>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  817d24:	e0bffe17 	ldw	r2,-8(fp)
  817d28:	108007cc 	andi	r2,r2,31
  817d2c:	10000226 	beq	r2,zero,817d38 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  817d30:	e0bffc17 	ldw	r2,-16(fp)
  817d34:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  817d38:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  817d3c:	0001883a 	nop
  817d40:	e037883a 	mov	sp,fp
  817d44:	df000017 	ldw	fp,0(sp)
  817d48:	dec00104 	addi	sp,sp,4
  817d4c:	f800283a 	ret

00817d50 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  817d50:	defffe04 	addi	sp,sp,-8
  817d54:	df000115 	stw	fp,4(sp)
  817d58:	df000104 	addi	fp,sp,4
  817d5c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
  817d60:	e0bfff17 	ldw	r2,-4(fp)
  817d64:	10bffe84 	addi	r2,r2,-6
  817d68:	10c00428 	cmpgeui	r3,r2,16
  817d6c:	18001a1e 	bne	r3,zero,817dd8 <alt_exception_cause_generated_bad_addr+0x88>
  817d70:	100690ba 	slli	r3,r2,2
  817d74:	00802074 	movhi	r2,129
  817d78:	109f6204 	addi	r2,r2,32136
  817d7c:	1885883a 	add	r2,r3,r2
  817d80:	10800017 	ldw	r2,0(r2)
  817d84:	1000683a 	jmp	r2
  817d88:	00817dc8 	cmpgei	r2,zero,1527
  817d8c:	00817dc8 	cmpgei	r2,zero,1527
  817d90:	00817dd8 	cmpnei	r2,zero,1527
  817d94:	00817dd8 	cmpnei	r2,zero,1527
  817d98:	00817dd8 	cmpnei	r2,zero,1527
  817d9c:	00817dc8 	cmpgei	r2,zero,1527
  817da0:	00817dd0 	cmplti	r2,zero,1527
  817da4:	00817dd8 	cmpnei	r2,zero,1527
  817da8:	00817dc8 	cmpgei	r2,zero,1527
  817dac:	00817dc8 	cmpgei	r2,zero,1527
  817db0:	00817dd8 	cmpnei	r2,zero,1527
  817db4:	00817dc8 	cmpgei	r2,zero,1527
  817db8:	00817dd0 	cmplti	r2,zero,1527
  817dbc:	00817dd8 	cmpnei	r2,zero,1527
  817dc0:	00817dd8 	cmpnei	r2,zero,1527
  817dc4:	00817dc8 	cmpgei	r2,zero,1527
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  817dc8:	00800044 	movi	r2,1
  817dcc:	00000306 	br	817ddc <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  817dd0:	0005883a 	mov	r2,zero
  817dd4:	00000106 	br	817ddc <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
  817dd8:	0005883a 	mov	r2,zero
  }
}
  817ddc:	e037883a 	mov	sp,fp
  817de0:	df000017 	ldw	fp,0(sp)
  817de4:	dec00104 	addi	sp,sp,4
  817de8:	f800283a 	ret

00817dec <atexit>:
  817dec:	200b883a 	mov	r5,r4
  817df0:	000f883a 	mov	r7,zero
  817df4:	000d883a 	mov	r6,zero
  817df8:	0009883a 	mov	r4,zero
  817dfc:	0817eb41 	jmpi	817eb4 <__register_exitproc>

00817e00 <exit>:
  817e00:	defffe04 	addi	sp,sp,-8
  817e04:	000b883a 	mov	r5,zero
  817e08:	dc000015 	stw	r16,0(sp)
  817e0c:	dfc00115 	stw	ra,4(sp)
  817e10:	2021883a 	mov	r16,r4
  817e14:	0817fcc0 	call	817fcc <__call_exitprocs>
  817e18:	008020b4 	movhi	r2,130
  817e1c:	10a8ef04 	addi	r2,r2,-23620
  817e20:	11000017 	ldw	r4,0(r2)
  817e24:	20800f17 	ldw	r2,60(r4)
  817e28:	10000126 	beq	r2,zero,817e30 <exit+0x30>
  817e2c:	103ee83a 	callr	r2
  817e30:	8009883a 	mov	r4,r16
  817e34:	081814c0 	call	81814c <_exit>

00817e38 <memcmp>:
  817e38:	01c000c4 	movi	r7,3
  817e3c:	3980192e 	bgeu	r7,r6,817ea4 <memcmp+0x6c>
  817e40:	2144b03a 	or	r2,r4,r5
  817e44:	11c4703a 	and	r2,r2,r7
  817e48:	10000f26 	beq	r2,zero,817e88 <memcmp+0x50>
  817e4c:	20800003 	ldbu	r2,0(r4)
  817e50:	28c00003 	ldbu	r3,0(r5)
  817e54:	10c0151e 	bne	r2,r3,817eac <memcmp+0x74>
  817e58:	31bfff84 	addi	r6,r6,-2
  817e5c:	01ffffc4 	movi	r7,-1
  817e60:	00000406 	br	817e74 <memcmp+0x3c>
  817e64:	20800003 	ldbu	r2,0(r4)
  817e68:	28c00003 	ldbu	r3,0(r5)
  817e6c:	31bfffc4 	addi	r6,r6,-1
  817e70:	10c00e1e 	bne	r2,r3,817eac <memcmp+0x74>
  817e74:	21000044 	addi	r4,r4,1
  817e78:	29400044 	addi	r5,r5,1
  817e7c:	31fff91e 	bne	r6,r7,817e64 <__alt_mem_onchip_mem+0xff80fe64>
  817e80:	0005883a 	mov	r2,zero
  817e84:	f800283a 	ret
  817e88:	20c00017 	ldw	r3,0(r4)
  817e8c:	28800017 	ldw	r2,0(r5)
  817e90:	18bfee1e 	bne	r3,r2,817e4c <__alt_mem_onchip_mem+0xff80fe4c>
  817e94:	31bfff04 	addi	r6,r6,-4
  817e98:	21000104 	addi	r4,r4,4
  817e9c:	29400104 	addi	r5,r5,4
  817ea0:	39bff936 	bltu	r7,r6,817e88 <__alt_mem_onchip_mem+0xff80fe88>
  817ea4:	303fe91e 	bne	r6,zero,817e4c <__alt_mem_onchip_mem+0xff80fe4c>
  817ea8:	003ff506 	br	817e80 <__alt_mem_onchip_mem+0xff80fe80>
  817eac:	10c5c83a 	sub	r2,r2,r3
  817eb0:	f800283a 	ret

00817eb4 <__register_exitproc>:
  817eb4:	defffa04 	addi	sp,sp,-24
  817eb8:	dc000315 	stw	r16,12(sp)
  817ebc:	040020b4 	movhi	r16,130
  817ec0:	8428ef04 	addi	r16,r16,-23620
  817ec4:	80c00017 	ldw	r3,0(r16)
  817ec8:	dc400415 	stw	r17,16(sp)
  817ecc:	dfc00515 	stw	ra,20(sp)
  817ed0:	18805217 	ldw	r2,328(r3)
  817ed4:	2023883a 	mov	r17,r4
  817ed8:	10003726 	beq	r2,zero,817fb8 <__register_exitproc+0x104>
  817edc:	10c00117 	ldw	r3,4(r2)
  817ee0:	010007c4 	movi	r4,31
  817ee4:	20c00e16 	blt	r4,r3,817f20 <__register_exitproc+0x6c>
  817ee8:	1a000044 	addi	r8,r3,1
  817eec:	8800221e 	bne	r17,zero,817f78 <__register_exitproc+0xc4>
  817ef0:	18c00084 	addi	r3,r3,2
  817ef4:	18c7883a 	add	r3,r3,r3
  817ef8:	18c7883a 	add	r3,r3,r3
  817efc:	12000115 	stw	r8,4(r2)
  817f00:	10c7883a 	add	r3,r2,r3
  817f04:	19400015 	stw	r5,0(r3)
  817f08:	0005883a 	mov	r2,zero
  817f0c:	dfc00517 	ldw	ra,20(sp)
  817f10:	dc400417 	ldw	r17,16(sp)
  817f14:	dc000317 	ldw	r16,12(sp)
  817f18:	dec00604 	addi	sp,sp,24
  817f1c:	f800283a 	ret
  817f20:	00800034 	movhi	r2,0
  817f24:	10800004 	addi	r2,r2,0
  817f28:	10002626 	beq	r2,zero,817fc4 <__register_exitproc+0x110>
  817f2c:	01006404 	movi	r4,400
  817f30:	d9400015 	stw	r5,0(sp)
  817f34:	d9800115 	stw	r6,4(sp)
  817f38:	d9c00215 	stw	r7,8(sp)
  817f3c:	00000000 	call	0 <__alt_mem_sdram-0x800000>
  817f40:	d9400017 	ldw	r5,0(sp)
  817f44:	d9800117 	ldw	r6,4(sp)
  817f48:	d9c00217 	ldw	r7,8(sp)
  817f4c:	10001d26 	beq	r2,zero,817fc4 <__register_exitproc+0x110>
  817f50:	81000017 	ldw	r4,0(r16)
  817f54:	10000115 	stw	zero,4(r2)
  817f58:	02000044 	movi	r8,1
  817f5c:	22405217 	ldw	r9,328(r4)
  817f60:	0007883a 	mov	r3,zero
  817f64:	12400015 	stw	r9,0(r2)
  817f68:	20805215 	stw	r2,328(r4)
  817f6c:	10006215 	stw	zero,392(r2)
  817f70:	10006315 	stw	zero,396(r2)
  817f74:	883fde26 	beq	r17,zero,817ef0 <__alt_mem_onchip_mem+0xff80fef0>
  817f78:	18c9883a 	add	r4,r3,r3
  817f7c:	2109883a 	add	r4,r4,r4
  817f80:	1109883a 	add	r4,r2,r4
  817f84:	21802215 	stw	r6,136(r4)
  817f88:	01800044 	movi	r6,1
  817f8c:	12406217 	ldw	r9,392(r2)
  817f90:	30cc983a 	sll	r6,r6,r3
  817f94:	4992b03a 	or	r9,r9,r6
  817f98:	12406215 	stw	r9,392(r2)
  817f9c:	21c04215 	stw	r7,264(r4)
  817fa0:	01000084 	movi	r4,2
  817fa4:	893fd21e 	bne	r17,r4,817ef0 <__alt_mem_onchip_mem+0xff80fef0>
  817fa8:	11006317 	ldw	r4,396(r2)
  817fac:	218cb03a 	or	r6,r4,r6
  817fb0:	11806315 	stw	r6,396(r2)
  817fb4:	003fce06 	br	817ef0 <__alt_mem_onchip_mem+0xff80fef0>
  817fb8:	18805304 	addi	r2,r3,332
  817fbc:	18805215 	stw	r2,328(r3)
  817fc0:	003fc606 	br	817edc <__alt_mem_onchip_mem+0xff80fedc>
  817fc4:	00bfffc4 	movi	r2,-1
  817fc8:	003fd006 	br	817f0c <__alt_mem_onchip_mem+0xff80ff0c>

00817fcc <__call_exitprocs>:
  817fcc:	defff504 	addi	sp,sp,-44
  817fd0:	df000915 	stw	fp,36(sp)
  817fd4:	dd400615 	stw	r21,24(sp)
  817fd8:	dc800315 	stw	r18,12(sp)
  817fdc:	dfc00a15 	stw	ra,40(sp)
  817fe0:	ddc00815 	stw	r23,32(sp)
  817fe4:	dd800715 	stw	r22,28(sp)
  817fe8:	dd000515 	stw	r20,20(sp)
  817fec:	dcc00415 	stw	r19,16(sp)
  817ff0:	dc400215 	stw	r17,8(sp)
  817ff4:	dc000115 	stw	r16,4(sp)
  817ff8:	d9000015 	stw	r4,0(sp)
  817ffc:	2839883a 	mov	fp,r5
  818000:	04800044 	movi	r18,1
  818004:	057fffc4 	movi	r21,-1
  818008:	008020b4 	movhi	r2,130
  81800c:	10a8ef04 	addi	r2,r2,-23620
  818010:	12000017 	ldw	r8,0(r2)
  818014:	45005217 	ldw	r20,328(r8)
  818018:	44c05204 	addi	r19,r8,328
  81801c:	a0001c26 	beq	r20,zero,818090 <__call_exitprocs+0xc4>
  818020:	a0800117 	ldw	r2,4(r20)
  818024:	15ffffc4 	addi	r23,r2,-1
  818028:	b8000d16 	blt	r23,zero,818060 <__call_exitprocs+0x94>
  81802c:	14000044 	addi	r16,r2,1
  818030:	8421883a 	add	r16,r16,r16
  818034:	8421883a 	add	r16,r16,r16
  818038:	84402004 	addi	r17,r16,128
  81803c:	a463883a 	add	r17,r20,r17
  818040:	a421883a 	add	r16,r20,r16
  818044:	e0001e26 	beq	fp,zero,8180c0 <__call_exitprocs+0xf4>
  818048:	80804017 	ldw	r2,256(r16)
  81804c:	e0801c26 	beq	fp,r2,8180c0 <__call_exitprocs+0xf4>
  818050:	bdffffc4 	addi	r23,r23,-1
  818054:	843fff04 	addi	r16,r16,-4
  818058:	8c7fff04 	addi	r17,r17,-4
  81805c:	bd7ff91e 	bne	r23,r21,818044 <__alt_mem_onchip_mem+0xff810044>
  818060:	00800034 	movhi	r2,0
  818064:	10800004 	addi	r2,r2,0
  818068:	10000926 	beq	r2,zero,818090 <__call_exitprocs+0xc4>
  81806c:	a0800117 	ldw	r2,4(r20)
  818070:	1000301e 	bne	r2,zero,818134 <__call_exitprocs+0x168>
  818074:	a0800017 	ldw	r2,0(r20)
  818078:	10003226 	beq	r2,zero,818144 <__call_exitprocs+0x178>
  81807c:	a009883a 	mov	r4,r20
  818080:	98800015 	stw	r2,0(r19)
  818084:	00000000 	call	0 <__alt_mem_sdram-0x800000>
  818088:	9d000017 	ldw	r20,0(r19)
  81808c:	a03fe41e 	bne	r20,zero,818020 <__alt_mem_onchip_mem+0xff810020>
  818090:	dfc00a17 	ldw	ra,40(sp)
  818094:	df000917 	ldw	fp,36(sp)
  818098:	ddc00817 	ldw	r23,32(sp)
  81809c:	dd800717 	ldw	r22,28(sp)
  8180a0:	dd400617 	ldw	r21,24(sp)
  8180a4:	dd000517 	ldw	r20,20(sp)
  8180a8:	dcc00417 	ldw	r19,16(sp)
  8180ac:	dc800317 	ldw	r18,12(sp)
  8180b0:	dc400217 	ldw	r17,8(sp)
  8180b4:	dc000117 	ldw	r16,4(sp)
  8180b8:	dec00b04 	addi	sp,sp,44
  8180bc:	f800283a 	ret
  8180c0:	a0800117 	ldw	r2,4(r20)
  8180c4:	80c00017 	ldw	r3,0(r16)
  8180c8:	10bfffc4 	addi	r2,r2,-1
  8180cc:	15c01426 	beq	r2,r23,818120 <__call_exitprocs+0x154>
  8180d0:	80000015 	stw	zero,0(r16)
  8180d4:	183fde26 	beq	r3,zero,818050 <__alt_mem_onchip_mem+0xff810050>
  8180d8:	95c8983a 	sll	r4,r18,r23
  8180dc:	a0806217 	ldw	r2,392(r20)
  8180e0:	a5800117 	ldw	r22,4(r20)
  8180e4:	2084703a 	and	r2,r4,r2
  8180e8:	10000b26 	beq	r2,zero,818118 <__call_exitprocs+0x14c>
  8180ec:	a0806317 	ldw	r2,396(r20)
  8180f0:	2088703a 	and	r4,r4,r2
  8180f4:	20000c1e 	bne	r4,zero,818128 <__call_exitprocs+0x15c>
  8180f8:	89400017 	ldw	r5,0(r17)
  8180fc:	d9000017 	ldw	r4,0(sp)
  818100:	183ee83a 	callr	r3
  818104:	a0800117 	ldw	r2,4(r20)
  818108:	15bfbf1e 	bne	r2,r22,818008 <__alt_mem_onchip_mem+0xff810008>
  81810c:	98800017 	ldw	r2,0(r19)
  818110:	153fcf26 	beq	r2,r20,818050 <__alt_mem_onchip_mem+0xff810050>
  818114:	003fbc06 	br	818008 <__alt_mem_onchip_mem+0xff810008>
  818118:	183ee83a 	callr	r3
  81811c:	003ff906 	br	818104 <__alt_mem_onchip_mem+0xff810104>
  818120:	a5c00115 	stw	r23,4(r20)
  818124:	003feb06 	br	8180d4 <__alt_mem_onchip_mem+0xff8100d4>
  818128:	89000017 	ldw	r4,0(r17)
  81812c:	183ee83a 	callr	r3
  818130:	003ff406 	br	818104 <__alt_mem_onchip_mem+0xff810104>
  818134:	a0800017 	ldw	r2,0(r20)
  818138:	a027883a 	mov	r19,r20
  81813c:	1029883a 	mov	r20,r2
  818140:	003fb606 	br	81801c <__alt_mem_onchip_mem+0xff81001c>
  818144:	0005883a 	mov	r2,zero
  818148:	003ffb06 	br	818138 <__alt_mem_onchip_mem+0xff810138>

0081814c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  81814c:	defffd04 	addi	sp,sp,-12
  818150:	df000215 	stw	fp,8(sp)
  818154:	df000204 	addi	fp,sp,8
  818158:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  81815c:	0001883a 	nop
  818160:	e0bfff17 	ldw	r2,-4(fp)
  818164:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  818168:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  81816c:	10000226 	beq	r2,zero,818178 <_exit+0x2c>
    ALT_SIM_FAIL();
  818170:	002af070 	cmpltui	zero,zero,43969
  818174:	00000106 	br	81817c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  818178:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  81817c:	003fff06 	br	81817c <__alt_mem_onchip_mem+0xff81017c>
