
pacemaker.elf:     file format elf32-littlenios2
pacemaker.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800244

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x00018e98 memsz 0x00018e98 flags r-x
    LOAD off    0x00019eb8 vaddr 0x00818eb8 paddr 0x0081ab90 align 2**12
         filesz 0x00001cd8 memsz 0x00001cd8 flags rw-
    LOAD off    0x0001c868 vaddr 0x0081c868 paddr 0x0081c868 align 2**12
         filesz 0x00000000 memsz 0x00000190 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00018698  00800244  00800244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000005dc  008188dc  008188dc  000198dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001cd8  00818eb8  0081ab90  00019eb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000190  0081c868  0081c868  0001c868  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  0081c9f8  0081c9f8  0001bb90  2**0
                  CONTENTS
  7 .onchip_mem   00000000  01008000  01008000  0001bb90  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0001bb90  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000fe8  00000000  00000000  0001bbb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00026e25  00000000  00000000  0001cba0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00009a67  00000000  00000000  000439c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000dff7  00000000  00000000  0004d42c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002604  00000000  00000000  0005b424  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000048c2  00000000  00000000  0005da28  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00017791  00000000  00000000  000622ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  00079a7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000018c0  00000000  00000000  00079ae0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0007ec31  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  0007ec34  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0007ec37  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0007ec38  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000009  00000000  00000000  0007ec39  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000009  00000000  00000000  0007ec42  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000009  00000000  00000000  0007ec4b  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000c  00000000  00000000  0007ec54  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 0000002d  00000000  00000000  0007ec60  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0006b17b  00000000  00000000  0007ec8d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800244 l    d  .text	00000000 .text
008188dc l    d  .rodata	00000000 .rodata
00818eb8 l    d  .rwdata	00000000 .rwdata
0081c868 l    d  .bss	00000000 .bss
0081c9f8 l    d  .sdram	00000000 .sdram
01008000 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../pacemaker_bsp//obj/HAL/src/crt0.o
0080028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 sccharts.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
00818a6e l     O .rodata	00000010 zeroes.4404
0080be68 l     F .text	000000bc __sbprintf
00818a7e l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0080c078 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0080dba8 l     F .text	00000008 __fp_unlock
0080dbbc l     F .text	0000019c __sinit.part.1
0080dd58 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00818eb8 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
008192fc l     O .rwdata	00000020 lc_ctype_charset
008192dc l     O .rwdata	00000020 lc_message_charset
0081931c l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00818ab0 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00810670 l     F .text	000000fc __sprint_r.part.0
00818be4 l     O .rodata	00000010 blanks.4348
00818bd4 l     O .rodata	00000010 zeroes.4349
00811bfc l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
008148e8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
008149f4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00814a20 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00814dac l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00814e8c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00814f78 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0081514c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0081ab7c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
0081553c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00815670 l     F .text	00000034 alt_dev_reg
00819904 l     O .rwdata	00001060 jtag_uart
0081a964 l     O .rwdata	00000120 lcd
0081aa84 l     O .rwdata	000000c4 uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00815998 l     F .text	0000020c altera_avalon_jtag_uart_irq
00815ba4 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
0081ab88 l     O .rwdata	00000004 colstart
008161dc l     F .text	000000b8 lcd_write_command
00816294 l     F .text	000000d8 lcd_write_data
0081636c l     F .text	000000d0 lcd_clear_screen
0081643c l     F .text	000001ec lcd_repaint_screen
00816628 l     F .text	000000cc lcd_scroll_up
008166f4 l     F .text	000002ac lcd_handle_escape
00816e78 l     F .text	000000ac alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
008170b8 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
00817368 l     F .text	0000009c altera_avalon_uart_irq
00817404 l     F .text	000000e4 altera_avalon_uart_rxirq
008174e8 l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00817684 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0081789c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00817acc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00817d3c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00817e7c l     F .text	0000003c alt_get_errno
00817eb8 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
00818d37 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0081c8cc g     O .bss	00000004 alt_instruction_exception_handler
00810180 g     F .text	00000074 _mprec_log10
0081026c g     F .text	0000008c __any_on
00812654 g     F .text	00000054 _isatty_r
00818abc g     O .rodata	00000028 __mprec_tinytens
00815088 g     F .text	0000007c alt_main
0081c8f8 g     O .bss	00000100 alt_irq
008126a8 g     F .text	00000060 _lseek_r
0081ab90 g       *ABS*	00000000 __flash_rwdata_start
008146b4 g     F .text	00000088 .hidden __eqdf2
0081c9f8 g       *ABS*	00000000 __alt_heap_start
00809c18 g     F .text	0000003c printf
00812f80 g     F .text	0000009c _wcrtomb_r
00810498 g     F .text	0000005c __sseek
0080def8 g     F .text	00000010 __sinit
00812e28 g     F .text	00000140 __swbuf_r
0080e504 g     F .text	0000007c _setlocale_r
0080dd60 g     F .text	00000068 __sfmoreglue
00815128 g     F .text	00000024 __malloc_unlock
0081c868 g     O .bss	00000001 URI_state
00812708 g     F .text	0000015c memmove
0080dee0 g     F .text	00000018 _cleanup
0080f2fc g     F .text	000000a8 _Balloc
0080881c g     F .text	000000dc .hidden __gtdf2
00818100 g     F .text	00000024 altera_nios2_gen2_irq_init
00800000 g     F .entry	0000001c __reset
00800020 g       *ABS*	00000000 __flash_exceptions_start
0081213c g     F .text	0000005c _fstat_r
0081c8b0 g     O .bss	00000004 errno
00810414 g     F .text	00000008 __seofread
0081c8bc g     O .bss	00000004 alt_argv
00822b48 g       *ABS*	00000000 _gp
008180d0 g     F .text	00000030 usleep
00807a04 g     F .text	00000250 reset
00819784 g     O .rwdata	00000180 alt_fd_list
0081827c g     F .text	00000090 alt_find_dev
0080f08c g     F .text	00000148 memcpy
0080dbb0 g     F .text	0000000c _cleanup_r
00809a00 g     F .text	000000dc .hidden __floatsidf
00817e00 g     F .text	0000007c alt_io_redirect
008088f8 g     F .text	000000f4 .hidden __ltdf2
008188dc g       *ABS*	00000000 __DTOR_END__
0081c874 g     O .bss	00000001 VS_temp
00817ca0 g     F .text	0000009c alt_exception_cause_generated_bad_addr
008102f8 g     F .text	00000074 __fpclassifyd
008100dc g     F .text	000000a4 __ratio
00811be0 g     F .text	0000001c __vfiprintf_internal
00815d9c g     F .text	0000021c altera_avalon_jtag_uart_read
00809be8 g     F .text	00000030 _printf_r
00813d10 g     F .text	00000064 .hidden __udivsi3
00814de8 g     F .text	000000a4 isatty
00818b0c g     O .rodata	000000c8 __mprec_tens
0080e580 g     F .text	0000000c __locale_charset
008184b8 g     F .text	00000090 alt_icache_flush
0081c8ac g     O .bss	00000004 __malloc_top_pad
0081ab50 g     O .rwdata	00000004 __mb_cur_max
0080e5b0 g     F .text	0000000c _localeconv_r
00812198 g     F .text	000004bc __sfvwrite_r
0080f708 g     F .text	0000003c __i2b
0081c878 g     O .bss	00000004 PVARP_timer
0081036c g     F .text	00000054 _sbrk_r
00812864 g     F .text	00000060 _read_r
0081ab70 g     O .rwdata	00000004 alt_max_fd
00811e30 g     F .text	000000f0 _fclose_r
0080db78 g     F .text	00000030 fflush
0081c8a8 g     O .bss	00000004 __malloc_max_sbrked_mem
0081c87c g     O .bss	00000004 VRP_timer
00807f70 g     F .text	000008ac .hidden __adddf3
0080fe84 g     F .text	0000010c __b2d
008136e0 g     F .text	00000538 .hidden __umoddi3
00814fb4 g     F .text	000000d4 lseek
0081ab48 g     O .rwdata	00000004 _global_impure_ptr
008128c4 g     F .text	00000564 _realloc_r
0081c9f8 g       *ABS*	00000000 __bss_end
00814cbc g     F .text	000000f0 alt_iic_isr_register
00815434 g     F .text	00000108 alt_tick
00813168 g     F .text	00000578 .hidden __udivdi3
00812098 g     F .text	00000024 _fputwc_r
00818ae4 g     O .rodata	00000028 __mprec_bigtens
0080f4ec g     F .text	00000104 __s2b
00809adc g     F .text	000000a8 .hidden __floatunsidf
0080fbc4 g     F .text	00000060 __mcmp
008172bc g     F .text	000000ac altera_avalon_uart_init
0080df18 g     F .text	00000018 __fp_lock_all
00814c70 g     F .text	0000004c alt_ic_irq_enabled
00815398 g     F .text	0000009c alt_alarm_stop
0081c8b4 g     O .bss	00000004 alt_irq_active
01008000 g       *ABS*	00000000 __alt_mem_onchip_mem
008000fc g     F .exceptions	000000d4 alt_irq_handler
0081975c g     O .rwdata	00000028 alt_dev_null
00817a84 g     F .text	00000048 alt_dcache_flush_all
0080f5f0 g     F .text	00000068 __hi0bits
0081473c g     F .text	00000080 .hidden __fixdfsi
0081c880 g     O .bss	00000001 AP_output
0081ab90 g       *ABS*	00000000 __ram_rwdata_end
0081ab68 g     O .rwdata	00000008 alt_dev_list
00815578 g     F .text	000000f8 write
00800318 g     F .text	00000070 uart_isr
0081c881 g     O .bss	00000001 VS_input
00818eb8 g       *ABS*	00000000 __ram_rodata_end
00814a5c g     F .text	000000b0 fstat
008088f8 g     F .text	000000f4 .hidden __ledf2
0080f93c g     F .text	00000140 __pow5mult
00810784 g     F .text	0000145c ___vfiprintf_internal_r
0081c8a0 g     O .bss	00000004 __nlocale_changed
00813d74 g     F .text	00000058 .hidden __umodsi3
0081c9f8 g       *ABS*	00000000 end
008169a0 g     F .text	000004d8 altera_avalon_lcd_16207_write
008178d8 g     F .text	000001ac altera_avalon_uart_write
008003fc g     F .text	00000050 send_uart
008158d8 g     F .text	000000c0 altera_avalon_jtag_uart_init
008001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
008188dc g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
00817130 g     F .text	0000007c alt_avalon_timer_sc_init
0081720c g     F .text	00000060 altera_avalon_uart_write_fd
00809b84 g     F .text	00000064 .hidden __clzsi2
0081726c g     F .text	00000050 altera_avalon_uart_close_fd
00815fb8 g     F .text	00000224 altera_avalon_jtag_uart_write
00800388 g     F .text	00000074 uart_init
0080df08 g     F .text	00000004 __sfp_lock_acquire
0080efa8 g     F .text	000000e4 memchr
00809c54 g     F .text	000021f8 ___vfprintf_internal_r
0080e06c g     F .text	00000310 _free_r
0080e58c g     F .text	00000010 __locale_mb_cur_max
00818728 g     F .text	00000180 __call_exitprocs
0081c89c g     O .bss	00000004 __mlocale_changed
0081ab54 g     O .rwdata	00000004 __malloc_sbrk_base
00800244 g     F .text	0000004c _start
0081c8c4 g     O .bss	00000004 _alt_tick_rate
00807f00 g     F .text	00000070 .hidden __floatundidf
0080fa7c g     F .text	00000148 __lshift
0081c8c8 g     O .bss	00000004 _alt_nticks
00815188 g     F .text	000000fc read
0080044c g     F .text	00000044 resetHeartEvents
008156dc g     F .text	00000098 alt_sys_init
0081c86a g     O .bss	00000001 PVARP_state
00818610 g     F .text	00000118 __register_exitproc
0080f744 g     F .text	000001f8 __multiply
00815c44 g     F .text	00000068 altera_avalon_jtag_uart_close
0081c86c g     O .bss	00000001 VRP_state
00818eb8 g       *ABS*	00000000 __ram_rwdata_start
008188dc g       *ABS*	00000000 __ram_rodata_start
0081c8d0 g     O .bss	00000028 __malloc_current_mallinfo
0080ff90 g     F .text	0000014c __d2b
0081c884 g     O .bss	00000004 AVI_timer
0081c869 g     O .bss	00000001 URI_timeout
0081c888 g     O .bss	00000004 LRI_timer
00815774 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00818414 g     F .text	000000a4 alt_get_fd
00818124 g     F .text	00000158 alt_busy_sleep
00811d18 g     F .text	00000054 _close_r
00818594 g     F .text	0000007c memcmp
00815834 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0081c9f8 g       *ABS*	00000000 __alt_stack_base
00815884 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0080bf24 g     F .text	00000154 __swsetup_r
00807c54 g     F .text	000002ac tick
00813dcc g     F .text	000008e8 .hidden __divdf3
0080ddc8 g     F .text	00000118 __sfp
008101f4 g     F .text	00000078 __copybits
00819354 g     O .rwdata	00000408 __malloc_av_
0080df14 g     F .text	00000004 __sinit_lock_release
008089ec g     F .text	00000718 .hidden __muldf3
008103c0 g     F .text	00000054 __sread
0081c870 g     O .bss	00000004 AEI_timer
0081830c g     F .text	00000108 alt_find_file
00817b08 g     F .text	000000a4 alt_dev_llist_insert
00815104 g     F .text	00000024 __malloc_lock
008152e8 g     F .text	000000b0 sbrk
0081c88c g     O .bss	00000001 AS_input
0080db1c g     F .text	0000005c _fflush_r
00811d6c g     F .text	000000c4 _calloc_r
0081c88d g     O .bss	00000001 VP_output
0081c868 g       *ABS*	00000000 __bss_start
0080f1d4 g     F .text	00000128 memset
008006d4 g     F .text	00000488 main
0081c8c0 g     O .bss	00000004 alt_envp
0081c8a4 g     O .bss	00000004 __malloc_max_total_mem
008157d4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00812f68 g     F .text	00000018 __swbuf
00816f24 g     F .text	00000134 altera_avalon_lcd_16207_init
0081c890 g     O .bss	00000004 URI_timer
008104f4 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
00811f20 g     F .text	00000014 fclose
0080c278 g     F .text	00001688 _dtoa_r
0080e79c g     F .text	0000080c _malloc_r
008130dc g     F .text	00000030 __ascii_wctomb
0081c86f g     O .bss	00000001 AEI_state
0081ab74 g     O .rwdata	00000004 alt_errno
0080e37c g     F .text	000000c4 _fwalk
00813c18 g     F .text	00000084 .hidden __divsi3
0081c86b g     O .bss	00000001 PVARP_timeout
0080df48 g     F .text	00000124 _malloc_trim_r
008188dc g       *ABS*	00000000 __CTOR_END__
008104fc g     F .text	000000dc strcmp
008188dc g       *ABS*	00000000 __flash_rodata_start
008188dc g       *ABS*	00000000 __DTOR_LIST__
008146b4 g     F .text	00000088 .hidden __nedf2
008156a4 g     F .text	00000038 alt_irq_init
00815284 g     F .text	00000064 alt_release_fd
0081892c g     O .rodata	00000100 .hidden __clz_tab
0081c898 g     O .bss	00000004 _PathLocale
00818548 g     F .text	00000014 atexit
00811cb8 g     F .text	00000060 _write_r
0081c86d g     O .bss	00000001 VRP_timeout
0080e5bc g     F .text	00000018 setlocale
0081ab4c g     O .rwdata	00000004 _impure_ptr
0081c8b8 g     O .bss	00000004 alt_argc
0080d900 g     F .text	0000021c __sflush_r
00817c0c g     F .text	00000060 _do_dtors
0080e5a8 g     F .text	00000008 __locale_cjk_lang
00800020 g       .exceptions	00000000 alt_irq_entry
0080fe20 g     F .text	00000064 __ulp
0080df30 g     F .text	00000018 __fp_unlock_all
00817058 g     F .text	00000060 altera_avalon_lcd_16207_write_fd
0081ab60 g     O .rwdata	00000008 alt_fs_list
00800020 g       *ABS*	00000000 __ram_exceptions_start
0080e5d4 g     F .text	0000000c localeconv
00800290 g     F .text	00000088 timerISR
00814b0c g     F .text	00000050 alt_ic_isr_register
0081ab90 g       *ABS*	00000000 _edata
008171ac g     F .text	00000060 altera_avalon_uart_read_fd
0081c9f8 g       *ABS*	00000000 _end
00811f34 g     F .text	00000164 __fputwc
00800244 g       *ABS*	00000000 __ram_exceptions_end
00815cac g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00814be4 g     F .text	0000008c alt_ic_irq_disable
0081041c g     F .text	0000007c __swrite
0081ab58 g     O .rwdata	00000004 __malloc_trim_threshold
0080e59c g     F .text	0000000c __locale_msgcharset
0081855c g     F .text	00000038 exit
0080e440 g     F .text	000000c4 _fwalk_reent
0080fc24 g     F .text	000001fc __mdiff
00800490 g     F .text	00000244 c_implementation
00813c9c g     F .text	00000074 .hidden __modsi3
00800b5c g     F .text	00006ea8 logic
0081ab8c g     O .rwdata	00000004 __ctype_ptr__
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
0080df0c g     F .text	00000004 __sfp_lock_release
00800000 g       *ABS*	00000000 __alt_mem_sdram
00818c36 g     O .rodata	00000101 _ctype_
00817630 g     F .text	00000054 altera_avalon_uart_close
008188a8 g     F .text	00000034 _exit
008147bc g     F .text	0000012c alt_alarm_start
0080e5e0 g     F .text	000001bc __smakebuf_r
0081c86e g     O .bss	00000001 AVI_state
008105d8 g     F .text	00000098 strlen
00817f7c g     F .text	00000154 open
0080881c g     F .text	000000dc .hidden __gedf2
0081ab5c g     O .rwdata	00000004 __wctomb
0081076c g     F .text	00000018 __sprint_r
00817c6c g     F .text	00000034 alt_icache_flush_all
0081ab78 g     O .rwdata	00000004 alt_priority_mask
00814b5c g     F .text	00000088 alt_ic_irq_enable
0080be4c g     F .text	0000001c __vfprintf_internal
008176c0 g     F .text	000001dc altera_avalon_uart_read
0081310c g     F .text	0000005c _wctomb_r
00809104 g     F .text	000008fc .hidden __subdf3
0080f658 g     F .text	000000b0 __lo0bits
0081ab80 g     O .rwdata	00000008 alt_alarm_list
00817bac g     F .text	00000060 _do_ctors
0081c894 g     O .bss	00000001 AS_temp
0081301c g     F .text	000000c0 wcrtomb
00814924 g     F .text	000000d0 close
00814ef4 g     F .text	00000084 alt_load
008120bc g     F .text	00000080 fputwc
0080df10 g     F .text	00000004 __sinit_lock_acquire
0080f3cc g     F .text	00000120 __multadd
0080f3a4 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__alt_mem_onchip_mem+0xff7f8004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08409114 	ori	at,at,580
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__alt_mem_sdram-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000fc0 	call	8000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000706 	br	8000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  80008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  800094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  800098:	08001d00 	call	8001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  80009c:	1000021e 	bne	r2,zero,8000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  8000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  8000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  8000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  8000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000f8:	ef80083a 	eret

008000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000fc:	defff904 	addi	sp,sp,-28
  800100:	dfc00615 	stw	ra,24(sp)
  800104:	df000515 	stw	fp,20(sp)
  800108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  80010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800110:	0005313a 	rdctl	r2,ipending
  800114:	e0bffe15 	stw	r2,-8(fp)

  return active;
  800118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  80011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  800120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800124:	00800044 	movi	r2,1
  800128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80012c:	e0fffb17 	ldw	r3,-20(fp)
  800130:	e0bffc17 	ldw	r2,-16(fp)
  800134:	1884703a 	and	r2,r3,r2
  800138:	10001426 	beq	r2,zero,80018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80013c:	008020b4 	movhi	r2,130
  800140:	10b23e04 	addi	r2,r2,-14088
  800144:	e0fffd17 	ldw	r3,-12(fp)
  800148:	180690fa 	slli	r3,r3,3
  80014c:	10c5883a 	add	r2,r2,r3
  800150:	10c00017 	ldw	r3,0(r2)
  800154:	008020b4 	movhi	r2,130
  800158:	10b23e04 	addi	r2,r2,-14088
  80015c:	e13ffd17 	ldw	r4,-12(fp)
  800160:	200890fa 	slli	r4,r4,3
  800164:	1105883a 	add	r2,r2,r4
  800168:	10800104 	addi	r2,r2,4
  80016c:	10800017 	ldw	r2,0(r2)
  800170:	1009883a 	mov	r4,r2
  800174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
  800178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  80017c:	0005313a 	rdctl	r2,ipending
  800180:	e0bfff15 	stw	r2,-4(fp)

  return active;
  800184:	e0bfff17 	ldw	r2,-4(fp)
  800188:	00000706 	br	8001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
  80018c:	e0bffc17 	ldw	r2,-16(fp)
  800190:	1085883a 	add	r2,r2,r2
  800194:	e0bffc15 	stw	r2,-16(fp)
      i++;
  800198:	e0bffd17 	ldw	r2,-12(fp)
  80019c:	10800044 	addi	r2,r2,1
  8001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  8001a4:	003fe106 	br	80012c <__alt_mem_onchip_mem+0xff7f812c>

    active = alt_irq_pending ();
  8001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  8001ac:	e0bffb17 	ldw	r2,-20(fp)
  8001b0:	103fdb1e 	bne	r2,zero,800120 <__alt_mem_onchip_mem+0xff7f8120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  8001b4:	0001883a 	nop
}
  8001b8:	0001883a 	nop
  8001bc:	e037883a 	mov	sp,fp
  8001c0:	dfc00117 	ldw	ra,4(sp)
  8001c4:	df000017 	ldw	fp,0(sp)
  8001c8:	dec00204 	addi	sp,sp,8
  8001cc:	f800283a 	ret

008001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
  8001d0:	defffb04 	addi	sp,sp,-20
  8001d4:	dfc00415 	stw	ra,16(sp)
  8001d8:	df000315 	stw	fp,12(sp)
  8001dc:	df000304 	addi	fp,sp,12
  8001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  8001e4:	000531fa 	rdctl	r2,exception
  8001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
  8001ec:	e0bffd17 	ldw	r2,-12(fp)
  8001f0:	10801f0c 	andi	r2,r2,124
  8001f4:	1004d0ba 	srli	r2,r2,2
  8001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
  8001fc:	0005333a 	rdctl	r2,badaddr
  800200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  800204:	d0a76117 	ldw	r2,-25212(gp)
  800208:	10000726 	beq	r2,zero,800228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  80020c:	d0a76117 	ldw	r2,-25212(gp)
  800210:	e0fffd17 	ldw	r3,-12(fp)
  800214:	e1bffe17 	ldw	r6,-8(fp)
  800218:	e17fff17 	ldw	r5,-4(fp)
  80021c:	1809883a 	mov	r4,r3
  800220:	103ee83a 	callr	r2
  800224:	00000206 	br	800230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  800228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
  80022c:	0005883a 	mov	r2,zero
}
  800230:	e037883a 	mov	sp,fp
  800234:	dfc00117 	ldw	ra,4(sp)
  800238:	df000017 	ldw	fp,0(sp)
  80023c:	dec00204 	addi	sp,sp,8
  800240:	f800283a 	ret

Disassembly of section .text:

00800244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  800244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  800248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  80024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
  800250:	00bffd16 	blt	zero,r2,800248 <__alt_mem_onchip_mem+0xff7f8248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800254:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  80025c:	068020b4 	movhi	gp,130
    ori gp, gp, %lo(_gp)
  800260:	d68ad214 	ori	gp,gp,11080
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800264:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  800268:	10b21a14 	ori	r2,r2,51304

    movhi r3, %hi(__bss_end)
  80026c:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  800270:	18f27e14 	ori	r3,r3,51704

    beq r2, r3, 1f
  800274:	10c00326 	beq	r2,r3,800284 <_start+0x40>

0:
    stw zero, (r2)
  800278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  80027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  800280:	10fffd36 	bltu	r2,r3,800278 <__alt_mem_onchip_mem+0xff7f8278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  800284:	0814ef40 	call	814ef4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  800288:	08150880 	call	815088 <alt_main>

0080028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  80028c:	003fff06 	br	80028c <__alt_mem_onchip_mem+0xff7f828c>

00800290 <timerISR>:
volatile uint8_t AEI_state = 0;

volatile int LRI_timer, URI_timer, PVARP_timer, VRP_timer, AVI_timer, AEI_timer = 0;

// System time ISR
alt_u32 timerISR(void* context) {
  800290:	defffd04 	addi	sp,sp,-12
  800294:	df000215 	stw	fp,8(sp)
  800298:	df000204 	addi	fp,sp,8
  80029c:	e13fff15 	stw	r4,-4(fp)
    int* timecount = (int*)context;
  8002a0:	e0bfff17 	ldw	r2,-4(fp)
  8002a4:	e0bffe15 	stw	r2,-8(fp)
    (*timecount)++;
  8002a8:	e0bffe17 	ldw	r2,-8(fp)
  8002ac:	10800017 	ldw	r2,0(r2)
  8002b0:	10c00044 	addi	r3,r2,1
  8002b4:	e0bffe17 	ldw	r2,-8(fp)
  8002b8:	10c00015 	stw	r3,0(r2)

    LRI_timer++;
  8002bc:	d0a75017 	ldw	r2,-25280(gp)
  8002c0:	10800044 	addi	r2,r2,1
  8002c4:	d0a75015 	stw	r2,-25280(gp)
    URI_timer++;
  8002c8:	d0a75217 	ldw	r2,-25272(gp)
  8002cc:	10800044 	addi	r2,r2,1
  8002d0:	d0a75215 	stw	r2,-25272(gp)
    PVARP_timer++;
  8002d4:	d0a74c17 	ldw	r2,-25296(gp)
  8002d8:	10800044 	addi	r2,r2,1
  8002dc:	d0a74c15 	stw	r2,-25296(gp)
    VRP_timer++;
  8002e0:	d0a74d17 	ldw	r2,-25292(gp)
  8002e4:	10800044 	addi	r2,r2,1
  8002e8:	d0a74d15 	stw	r2,-25292(gp)
    AVI_timer++;
  8002ec:	d0a74f17 	ldw	r2,-25284(gp)
  8002f0:	10800044 	addi	r2,r2,1
  8002f4:	d0a74f15 	stw	r2,-25284(gp)
    AEI_timer++;
  8002f8:	d0a74a17 	ldw	r2,-25304(gp)
  8002fc:	10800044 	addi	r2,r2,1
  800300:	d0a74a15 	stw	r2,-25304(gp)

    return 1;
  800304:	00800044 	movi	r2,1
}
  800308:	e037883a 	mov	sp,fp
  80030c:	df000017 	ldw	fp,0(sp)
  800310:	dec00104 	addi	sp,sp,4
  800314:	f800283a 	ret

00800318 <uart_isr>:

void uart_isr() {
  800318:	defffe04 	addi	sp,sp,-8
  80031c:	df000115 	stw	fp,4(sp)
  800320:	df000104 	addi	fp,sp,4
	 if (IORD_ALTERA_AVALON_UART_STATUS(UART_BASE) & ALTERA_AVALON_UART_STATUS_RRDY_MSK) {
  800324:	00804074 	movhi	r2,257
  800328:	10841204 	addi	r2,r2,4168
  80032c:	10800037 	ldwio	r2,0(r2)
  800330:	1080200c 	andi	r2,r2,128
  800334:	10000f26 	beq	r2,zero,800374 <uart_isr+0x5c>
		 char received = IORD_ALTERA_AVALON_UART_RXDATA(UART_BASE);
  800338:	00804074 	movhi	r2,257
  80033c:	10841004 	addi	r2,r2,4160
  800340:	10800037 	ldwio	r2,0(r2)
  800344:	e0bfff05 	stb	r2,-4(fp)
		 if (received == 'A') {
  800348:	e0bfff07 	ldb	r2,-4(fp)
  80034c:	10801058 	cmpnei	r2,r2,65
  800350:	1000031e 	bne	r2,zero,800360 <uart_isr+0x48>
			 AS_temp = 1;
  800354:	00800044 	movi	r2,1
  800358:	d0a75305 	stb	r2,-25268(gp)
		 } else if (received == 'V') {
			 VS_temp = 1;
		 }
	 }
}
  80035c:	00000506 	br	800374 <uart_isr+0x5c>
void uart_isr() {
	 if (IORD_ALTERA_AVALON_UART_STATUS(UART_BASE) & ALTERA_AVALON_UART_STATUS_RRDY_MSK) {
		 char received = IORD_ALTERA_AVALON_UART_RXDATA(UART_BASE);
		 if (received == 'A') {
			 AS_temp = 1;
		 } else if (received == 'V') {
  800360:	e0bfff07 	ldb	r2,-4(fp)
  800364:	10801598 	cmpnei	r2,r2,86
  800368:	1000021e 	bne	r2,zero,800374 <uart_isr+0x5c>
			 VS_temp = 1;
  80036c:	00800044 	movi	r2,1
  800370:	d0a74b05 	stb	r2,-25300(gp)
		 }
	 }
}
  800374:	0001883a 	nop
  800378:	e037883a 	mov	sp,fp
  80037c:	df000017 	ldw	fp,0(sp)
  800380:	dec00104 	addi	sp,sp,4
  800384:	f800283a 	ret

00800388 <uart_init>:

void uart_init() { // register the UART
  800388:	defffd04 	addi	sp,sp,-12
  80038c:	dfc00215 	stw	ra,8(sp)
  800390:	df000115 	stw	fp,4(sp)
  800394:	df000104 	addi	fp,sp,4
    IOWR_ALTERA_AVALON_UART_CONTROL(UART_BASE,0);
  800398:	0007883a 	mov	r3,zero
  80039c:	00804074 	movhi	r2,257
  8003a0:	10841304 	addi	r2,r2,4172
  8003a4:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(UART_BASE, ALTERA_AVALON_UART_CONTROL_RRDY_MSK);
  8003a8:	00c02004 	movi	r3,128
  8003ac:	00804074 	movhi	r2,257
  8003b0:	10841304 	addi	r2,r2,4172
  8003b4:	10c00035 	stwio	r3,0(r2)
    alt_ic_isr_register(UART_IRQ_INTERRUPT_CONTROLLER_ID, UART_IRQ, uart_isr, NULL, NULL);
  8003b8:	d8000015 	stw	zero,0(sp)
  8003bc:	000f883a 	mov	r7,zero
  8003c0:	01802034 	movhi	r6,128
  8003c4:	3180c604 	addi	r6,r6,792
  8003c8:	000b883a 	mov	r5,zero
  8003cc:	0009883a 	mov	r4,zero
  8003d0:	0814b0c0 	call	814b0c <alt_ic_isr_register>
    IOWR_ALTERA_AVALON_UART_CONTROL(UART_BASE, ALTERA_AVALON_UART_CONTROL_RRDY_MSK);
  8003d4:	00c02004 	movi	r3,128
  8003d8:	00804074 	movhi	r2,257
  8003dc:	10841304 	addi	r2,r2,4172
  8003e0:	10c00035 	stwio	r3,0(r2)
}
  8003e4:	0001883a 	nop
  8003e8:	e037883a 	mov	sp,fp
  8003ec:	dfc00117 	ldw	ra,4(sp)
  8003f0:	df000017 	ldw	fp,0(sp)
  8003f4:	dec00204 	addi	sp,sp,8
  8003f8:	f800283a 	ret

008003fc <send_uart>:

void send_uart(char c) {
  8003fc:	defffe04 	addi	sp,sp,-8
  800400:	df000115 	stw	fp,4(sp)
  800404:	df000104 	addi	fp,sp,4
  800408:	2005883a 	mov	r2,r4
  80040c:	e0bfff05 	stb	r2,-4(fp)
	 while (!(IORD_ALTERA_AVALON_UART_STATUS(UART_BASE) & ALTERA_AVALON_UART_STATUS_TRDY_MSK));
  800410:	0001883a 	nop
  800414:	00804074 	movhi	r2,257
  800418:	10841204 	addi	r2,r2,4168
  80041c:	10800037 	ldwio	r2,0(r2)
  800420:	1080100c 	andi	r2,r2,64
  800424:	103ffb26 	beq	r2,zero,800414 <__alt_mem_onchip_mem+0xff7f8414>
	 IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, c);
  800428:	e0ffff07 	ldb	r3,-4(fp)
  80042c:	00804074 	movhi	r2,257
  800430:	10841104 	addi	r2,r2,4164
  800434:	10c00035 	stwio	r3,0(r2)
}
  800438:	0001883a 	nop
  80043c:	e037883a 	mov	sp,fp
  800440:	df000017 	ldw	fp,0(sp)
  800444:	dec00104 	addi	sp,sp,4
  800448:	f800283a 	ret

0080044c <resetHeartEvents>:


// Reset all signals at end of each tick in SCCharts
void resetHeartEvents(TickData* d) {
  80044c:	defffe04 	addi	sp,sp,-8
  800450:	df000115 	stw	fp,4(sp)
  800454:	df000104 	addi	fp,sp,4
  800458:	e13fff15 	stw	r4,-4(fp)

    d->AS = 0;
  80045c:	e0bfff17 	ldw	r2,-4(fp)
  800460:	10000a05 	stb	zero,40(r2)
    d->AP = 0;
  800464:	e0bfff17 	ldw	r2,-4(fp)
  800468:	10000a85 	stb	zero,42(r2)
    d->VS = 0;
  80046c:	e0bfff17 	ldw	r2,-4(fp)
  800470:	10000a45 	stb	zero,41(r2)
    d->VP = 0;
  800474:	e0bfff17 	ldw	r2,-4(fp)
  800478:	10000ac5 	stb	zero,43(r2)
}
  80047c:	0001883a 	nop
  800480:	e037883a 	mov	sp,fp
  800484:	df000017 	ldw	fp,0(sp)
  800488:	dec00104 	addi	sp,sp,4
  80048c:	f800283a 	ret

00800490 <c_implementation>:

void c_implementation() {
  800490:	deffff04 	addi	sp,sp,-4
  800494:	df000015 	stw	fp,0(sp)
  800498:	d839883a 	mov	fp,sp

	// LRI
	if ((LRI_timer < LRI_VALUE) && (VS_input || VP_output)) {
  80049c:	d0a75017 	ldw	r2,-25280(gp)
  8004a0:	1080ed88 	cmpgei	r2,r2,950
  8004a4:	1000081e 	bne	r2,zero,8004c8 <c_implementation+0x38>
  8004a8:	d0a74e43 	ldbu	r2,-25287(gp)
  8004ac:	10803fcc 	andi	r2,r2,255
  8004b0:	1000031e 	bne	r2,zero,8004c0 <c_implementation+0x30>
  8004b4:	d0a75143 	ldbu	r2,-25275(gp)
  8004b8:	10803fcc 	andi	r2,r2,255
  8004bc:	10000226 	beq	r2,zero,8004c8 <c_implementation+0x38>
		LRI_timer = 0;
  8004c0:	d0275015 	stw	zero,-25280(gp)
  8004c4:	00000606 	br	8004e0 <c_implementation+0x50>

	} else if (LRI_timer >= LRI_VALUE) {
  8004c8:	d0a75017 	ldw	r2,-25280(gp)
  8004cc:	1080ed90 	cmplti	r2,r2,950
  8004d0:	1000031e 	bne	r2,zero,8004e0 <c_implementation+0x50>
		VP_output = 1;
  8004d4:	00800044 	movi	r2,1
  8004d8:	d0a75145 	stb	r2,-25275(gp)
		LRI_timer = 0;
  8004dc:	d0275015 	stw	zero,-25280(gp)
	}

	//URI
	if (URI_state == 0) {
  8004e0:	d0a74803 	ldbu	r2,-25312(gp)
  8004e4:	10803fcc 	andi	r2,r2,255
  8004e8:	10000a1e 	bne	r2,zero,800514 <c_implementation+0x84>
		if (VS_input || VP_output) {
  8004ec:	d0a74e43 	ldbu	r2,-25287(gp)
  8004f0:	10803fcc 	andi	r2,r2,255
  8004f4:	1000031e 	bne	r2,zero,800504 <c_implementation+0x74>
  8004f8:	d0a75143 	ldbu	r2,-25275(gp)
  8004fc:	10803fcc 	andi	r2,r2,255
  800500:	10000c26 	beq	r2,zero,800534 <c_implementation+0xa4>
			URI_timer = 0;
  800504:	d0275215 	stw	zero,-25272(gp)
			URI_state = 1;
  800508:	00800044 	movi	r2,1
  80050c:	d0a74805 	stb	r2,-25312(gp)
  800510:	00000806 	br	800534 <c_implementation+0xa4>
		}
	} else {
		if (URI_timer < URI_VALUE) {
  800514:	d0a75217 	ldw	r2,-25272(gp)
  800518:	1080e108 	cmpgei	r2,r2,900
  80051c:	1000031e 	bne	r2,zero,80052c <c_implementation+0x9c>
			URI_timeout = 1;
  800520:	00800044 	movi	r2,1
  800524:	d0a74845 	stb	r2,-25311(gp)
  800528:	00000206 	br	800534 <c_implementation+0xa4>
		} else {
			URI_timeout = 0;
  80052c:	d0274845 	stb	zero,-25311(gp)
			URI_state = 0;
  800530:	d0274805 	stb	zero,-25312(gp)
		}
	}

	// PVARP
	if (PVARP_state == 0) {
  800534:	d0a74883 	ldbu	r2,-25310(gp)
  800538:	10803fcc 	andi	r2,r2,255
  80053c:	10000a1e 	bne	r2,zero,800568 <c_implementation+0xd8>
		if (VS_input || VP_output) {
  800540:	d0a74e43 	ldbu	r2,-25287(gp)
  800544:	10803fcc 	andi	r2,r2,255
  800548:	1000031e 	bne	r2,zero,800558 <c_implementation+0xc8>
  80054c:	d0a75143 	ldbu	r2,-25275(gp)
  800550:	10803fcc 	andi	r2,r2,255
  800554:	10000c26 	beq	r2,zero,800588 <c_implementation+0xf8>
			PVARP_timer = 0;
  800558:	d0274c15 	stw	zero,-25296(gp)
			PVARP_state = 1;
  80055c:	00800044 	movi	r2,1
  800560:	d0a74885 	stb	r2,-25310(gp)
  800564:	00000806 	br	800588 <c_implementation+0xf8>
		}
	} else {
		if (PVARP_timer < URI_VALUE) {
  800568:	d0a74c17 	ldw	r2,-25296(gp)
  80056c:	1080e108 	cmpgei	r2,r2,900
  800570:	1000031e 	bne	r2,zero,800580 <c_implementation+0xf0>
			PVARP_timeout = 1;
  800574:	00800044 	movi	r2,1
  800578:	d0a748c5 	stb	r2,-25309(gp)
  80057c:	00000206 	br	800588 <c_implementation+0xf8>
		} else {
			PVARP_timeout = 0;
  800580:	d02748c5 	stb	zero,-25309(gp)
			PVARP_state = 0;
  800584:	d0274885 	stb	zero,-25310(gp)
		}
	}

	// VRP
	if (VRP_state == 0) {
  800588:	d0a74903 	ldbu	r2,-25308(gp)
  80058c:	10803fcc 	andi	r2,r2,255
  800590:	10000a1e 	bne	r2,zero,8005bc <c_implementation+0x12c>
		if (VS_input || VP_output) {
  800594:	d0a74e43 	ldbu	r2,-25287(gp)
  800598:	10803fcc 	andi	r2,r2,255
  80059c:	1000031e 	bne	r2,zero,8005ac <c_implementation+0x11c>
  8005a0:	d0a75143 	ldbu	r2,-25275(gp)
  8005a4:	10803fcc 	andi	r2,r2,255
  8005a8:	10000c26 	beq	r2,zero,8005dc <c_implementation+0x14c>
			VRP_timer = 0;
  8005ac:	d0274d15 	stw	zero,-25292(gp)
			VRP_state = 1;
  8005b0:	00800044 	movi	r2,1
  8005b4:	d0a74905 	stb	r2,-25308(gp)
  8005b8:	00000806 	br	8005dc <c_implementation+0x14c>
		}
	} else {
		if (VRP_timer < URI_VALUE) {
  8005bc:	d0a74d17 	ldw	r2,-25292(gp)
  8005c0:	1080e108 	cmpgei	r2,r2,900
  8005c4:	1000031e 	bne	r2,zero,8005d4 <c_implementation+0x144>
			VRP_timeout = 1;
  8005c8:	00800044 	movi	r2,1
  8005cc:	d0a74945 	stb	r2,-25307(gp)
  8005d0:	00000206 	br	8005dc <c_implementation+0x14c>
		} else {
			VRP_timeout = 0;
  8005d4:	d0274945 	stb	zero,-25307(gp)
			VRP_state = 0;
  8005d8:	d0274905 	stb	zero,-25308(gp)
		}
	}

	// AVI
	if (AVI_state == 0) {
  8005dc:	d0a74983 	ldbu	r2,-25306(gp)
  8005e0:	10803fcc 	andi	r2,r2,255
  8005e4:	10000d1e 	bne	r2,zero,80061c <c_implementation+0x18c>
		if ((AS_input || AP_output) && (!PVARP_timeout)) {
  8005e8:	d0a75103 	ldbu	r2,-25276(gp)
  8005ec:	10803fcc 	andi	r2,r2,255
  8005f0:	1000031e 	bne	r2,zero,800600 <c_implementation+0x170>
  8005f4:	d0a74e03 	ldbu	r2,-25288(gp)
  8005f8:	10803fcc 	andi	r2,r2,255
  8005fc:	10001526 	beq	r2,zero,800654 <c_implementation+0x1c4>
  800600:	d0a748c3 	ldbu	r2,-25309(gp)
  800604:	10803fcc 	andi	r2,r2,255
  800608:	1000121e 	bne	r2,zero,800654 <c_implementation+0x1c4>
			AVI_timer = 0;
  80060c:	d0274f15 	stw	zero,-25284(gp)
			AVI_state = 1;
  800610:	00800044 	movi	r2,1
  800614:	d0a74985 	stb	r2,-25306(gp)
  800618:	00000e06 	br	800654 <c_implementation+0x1c4>
		}
	} else {
		if (VS_input) {
  80061c:	d0a74e43 	ldbu	r2,-25287(gp)
  800620:	10803fcc 	andi	r2,r2,255
  800624:	10000226 	beq	r2,zero,800630 <c_implementation+0x1a0>
			AVI_state = 0;
  800628:	d0274985 	stb	zero,-25306(gp)
  80062c:	00000906 	br	800654 <c_implementation+0x1c4>
		} else if ((AVI_timer >= AVI_VALUE) && !URI_timeout) {
  800630:	d0a74f17 	ldw	r2,-25284(gp)
  800634:	10804b10 	cmplti	r2,r2,300
  800638:	1000061e 	bne	r2,zero,800654 <c_implementation+0x1c4>
  80063c:	d0a74843 	ldbu	r2,-25311(gp)
  800640:	10803fcc 	andi	r2,r2,255
  800644:	1000031e 	bne	r2,zero,800654 <c_implementation+0x1c4>
			VP_output = 1;
  800648:	00800044 	movi	r2,1
  80064c:	d0a75145 	stb	r2,-25275(gp)
			AVI_state = 0;
  800650:	d0274985 	stb	zero,-25306(gp)
		}
	}

	// AEI
	if (AEI_state == 0) {
  800654:	d0a749c3 	ldbu	r2,-25305(gp)
  800658:	10803fcc 	andi	r2,r2,255
  80065c:	10000d1e 	bne	r2,zero,800694 <c_implementation+0x204>
		if ((VS_input || VP_output) && (!VRP_timeout)) {
  800660:	d0a74e43 	ldbu	r2,-25287(gp)
  800664:	10803fcc 	andi	r2,r2,255
  800668:	1000031e 	bne	r2,zero,800678 <c_implementation+0x1e8>
  80066c:	d0a75143 	ldbu	r2,-25275(gp)
  800670:	10803fcc 	andi	r2,r2,255
  800674:	10001226 	beq	r2,zero,8006c0 <c_implementation+0x230>
  800678:	d0a74943 	ldbu	r2,-25307(gp)
  80067c:	10803fcc 	andi	r2,r2,255
  800680:	10000f1e 	bne	r2,zero,8006c0 <c_implementation+0x230>
			AEI_timer = 0;
  800684:	d0274a15 	stw	zero,-25304(gp)
			AEI_state = 1;
  800688:	00800044 	movi	r2,1
  80068c:	d0a749c5 	stb	r2,-25305(gp)
		} else if (AEI_timer >= AEI_VALUE) {
			AP_output = 1;
			AEI_state = 0;
		}
	}
}
  800690:	00000b06 	br	8006c0 <c_implementation+0x230>
		if ((VS_input || VP_output) && (!VRP_timeout)) {
			AEI_timer = 0;
			AEI_state = 1;
		}
	} else {
		if (AS_input) {
  800694:	d0a75103 	ldbu	r2,-25276(gp)
  800698:	10803fcc 	andi	r2,r2,255
  80069c:	10000226 	beq	r2,zero,8006a8 <c_implementation+0x218>
			AEI_state = 0;
  8006a0:	d02749c5 	stb	zero,-25305(gp)
		} else if (AEI_timer >= AEI_VALUE) {
			AP_output = 1;
			AEI_state = 0;
		}
	}
}
  8006a4:	00000606 	br	8006c0 <c_implementation+0x230>
			AEI_state = 1;
		}
	} else {
		if (AS_input) {
			AEI_state = 0;
		} else if (AEI_timer >= AEI_VALUE) {
  8006a8:	d0a74a17 	ldw	r2,-25304(gp)
  8006ac:	1080c810 	cmplti	r2,r2,800
  8006b0:	1000031e 	bne	r2,zero,8006c0 <c_implementation+0x230>
			AP_output = 1;
  8006b4:	00800044 	movi	r2,1
  8006b8:	d0a74e05 	stb	r2,-25288(gp)
			AEI_state = 0;
  8006bc:	d02749c5 	stb	zero,-25305(gp)
		}
	}
}
  8006c0:	0001883a 	nop
  8006c4:	e037883a 	mov	sp,fp
  8006c8:	df000017 	ldw	fp,0(sp)
  8006cc:	dec00104 	addi	sp,sp,4
  8006d0:	f800283a 	ret

008006d4 <main>:



int main() {
  8006d4:	deff8604 	addi	sp,sp,-488
  8006d8:	dfc07915 	stw	ra,484(sp)
  8006dc:	df007815 	stw	fp,480(sp)
  8006e0:	df007804 	addi	fp,sp,480

	// Variable declarations
    alt_alarm ticker;
    uint64_t systemTime = 0;
  8006e4:	e03f9815 	stw	zero,-416(fp)
  8006e8:	e03f9915 	stw	zero,-412(fp)
    uint64_t prevTime = 0;
  8006ec:	e03f8915 	stw	zero,-476(fp)
  8006f0:	e03f8a15 	stw	zero,-472(fp)
    uint32_t led_reset = 0x00;
  8006f4:	e03f8e15 	stw	zero,-456(fp)
    uint8_t reset_button = 0;
  8006f8:	e03f8b05 	stb	zero,-468(fp)

    unsigned int uiSwitchValue = 0;
  8006fc:	e03f8f15 	stw	zero,-452(fp)

    uint8_t rled_output = 0x00;
  800700:	e03f8b45 	stb	zero,-467(fp)

    // Create the struct
    TickData data;

    // Initialize
    resetHeartEvents(&data);
  800704:	e0bf9a04 	addi	r2,fp,-408
  800708:	1009883a 	mov	r4,r2
  80070c:	080044c0 	call	80044c <resetHeartEvents>
    reset(&data);
  800710:	e0bf9a04 	addi	r2,fp,-408
  800714:	1009883a 	mov	r4,r2
  800718:	0807a040 	call	807a04 <reset>
    tick(&data);
  80071c:	e0bf9a04 	addi	r2,fp,-408
  800720:	1009883a 	mov	r4,r2
  800724:	0807c540 	call	807c54 <tick>

    uart_init();
  800728:	08003880 	call	800388 <uart_init>

    // Initialize the system time
    void* timerContext = (void*)&systemTime;
  80072c:	e0bf9804 	addi	r2,fp,-416
  800730:	e0bf9015 	stw	r2,-448(fp)
    alt_alarm_start(&ticker, 1, timerISR, timerContext);
  800734:	e0bf9204 	addi	r2,fp,-440
  800738:	e1ff9017 	ldw	r7,-448(fp)
  80073c:	01802034 	movhi	r6,128
  800740:	3180a404 	addi	r6,r6,656
  800744:	01400044 	movi	r5,1
  800748:	1009883a 	mov	r4,r2
  80074c:	08147bc0 	call	8147bc <alt_alarm_start>

    // Reset leds when starting
    IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, led_reset);
  800750:	e0ff8e17 	ldw	r3,-456(fp)
  800754:	00804074 	movhi	r2,257
  800758:	10841c04 	addi	r2,r2,4208
  80075c:	10c00035 	stwio	r3,0(r2)

    while (1) {

    	// read switches
    	uint8_t mode = (IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) & (1 << 0)) ? 1 : 0;
  800760:	00804074 	movhi	r2,257
  800764:	10842404 	addi	r2,r2,4240
  800768:	10800037 	ldwio	r2,0(r2)
  80076c:	1080004c 	andi	r2,r2,1
  800770:	1004c03a 	cmpne	r2,r2,zero
  800774:	e0bf9105 	stb	r2,-444(fp)
    	uint8_t implementation = (IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) & (1 << 1)) ? 1 : 0;
  800778:	00804074 	movhi	r2,257
  80077c:	10842404 	addi	r2,r2,4240
  800780:	10800037 	ldwio	r2,0(r2)
  800784:	1080008c 	andi	r2,r2,2
  800788:	1004c03a 	cmpne	r2,r2,zero
  80078c:	e0bf9145 	stb	r2,-443(fp)

//    	uiSwitchValue = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE);
//    	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, uiSwitchValue);

    	if (mode == 0) {
  800790:	e0bf9103 	ldbu	r2,-444(fp)
  800794:	1000371e 	bne	r2,zero,800874 <main+0x1a0>

    		// Set reset variable when reset button press is detected
    		if (~IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE) & (1 << 2)) {
  800798:	00804074 	movhi	r2,257
  80079c:	10842804 	addi	r2,r2,4256
  8007a0:	10800037 	ldwio	r2,0(r2)
  8007a4:	1080010c 	andi	r2,r2,4
  8007a8:	1000021e 	bne	r2,zero,8007b4 <main+0xe0>
    			reset_button = 1;
  8007ac:	00800044 	movi	r2,1
  8007b0:	e0bf8b05 	stb	r2,-468(fp)
    		}

    		// If reset is active reset leds and wait for heart sense input again
    		if (reset_button) {
  8007b4:	e0bf8b03 	ldbu	r2,-468(fp)
  8007b8:	10001826 	beq	r2,zero,80081c <main+0x148>
    			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, led_reset);
  8007bc:	e0ff8e17 	ldw	r3,-456(fp)
  8007c0:	00804074 	movhi	r2,257
  8007c4:	10841c04 	addi	r2,r2,4208
  8007c8:	10c00035 	stwio	r3,0(r2)
    			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, 0x08);
  8007cc:	00c00204 	movi	r3,8
  8007d0:	00804074 	movhi	r2,257
  8007d4:	10842004 	addi	r2,r2,4224
  8007d8:	10c00035 	stwio	r3,0(r2)
    			if ((~IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE) & (1 << 1)) ||
  8007dc:	00804074 	movhi	r2,257
  8007e0:	10842804 	addi	r2,r2,4256
  8007e4:	10800037 	ldwio	r2,0(r2)
  8007e8:	1080008c 	andi	r2,r2,2
  8007ec:	10000526 	beq	r2,zero,800804 <main+0x130>
    				(~IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE) & (1 << 0))) {
  8007f0:	00804074 	movhi	r2,257
  8007f4:	10842804 	addi	r2,r2,4256
  8007f8:	10800037 	ldwio	r2,0(r2)
  8007fc:	1080004c 	andi	r2,r2,1

    		// If reset is active reset leds and wait for heart sense input again
    		if (reset_button) {
    			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, led_reset);
    			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, 0x08);
    			if ((~IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE) & (1 << 1)) ||
  800800:	1000d41e 	bne	r2,zero,800b54 <main+0x480>
    				(~IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE) & (1 << 0))) {
    				reset_button = 0;
  800804:	e03f8b05 	stb	zero,-468(fp)
    				IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, led_reset);
  800808:	e0ff8e17 	ldw	r3,-456(fp)
  80080c:	00804074 	movhi	r2,257
  800810:	10842004 	addi	r2,r2,4224
  800814:	10c00035 	stwio	r3,0(r2)
    			}
    			continue; // skip rest of the loop until input is detected
  800818:	0000ce06 	br	800b54 <main+0x480>
    		}

    		rled_output = (rled_output & ~0x01) | 0x02;
  80081c:	e0ff8b43 	ldbu	r3,-467(fp)
  800820:	00bfff04 	movi	r2,-4
  800824:	1884703a 	and	r2,r3,r2
  800828:	10800094 	ori	r2,r2,2
  80082c:	e0bf8b45 	stb	r2,-467(fp)
    		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, rled_output);
  800830:	e0ff8b43 	ldbu	r3,-467(fp)
  800834:	00804074 	movhi	r2,257
  800838:	10842004 	addi	r2,r2,4224
  80083c:	10c00035 	stwio	r3,0(r2)

    		// Fetch button inputs (active low, so invert the bits)
    		AS_input = (~IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE) & (1 << 1)) ? 1 : 0;
  800840:	00804074 	movhi	r2,257
  800844:	10842804 	addi	r2,r2,4256
  800848:	10800037 	ldwio	r2,0(r2)
  80084c:	1080008c 	andi	r2,r2,2
  800850:	1005003a 	cmpeq	r2,r2,zero
  800854:	d0a75105 	stb	r2,-25276(gp)
    		VS_input = (~IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE) & (1 << 0)) ? 1 : 0;
  800858:	00804074 	movhi	r2,257
  80085c:	10842804 	addi	r2,r2,4256
  800860:	10800037 	ldwio	r2,0(r2)
  800864:	1080004c 	andi	r2,r2,1
  800868:	1005003a 	cmpeq	r2,r2,zero
  80086c:	d0a74e45 	stb	r2,-25287(gp)
  800870:	00000d06 	br	8008a8 <main+0x1d4>

    	}

    	else {

				rled_output |= 0x01;
  800874:	e0bf8b43 	ldbu	r2,-467(fp)
  800878:	10800054 	ori	r2,r2,1
  80087c:	e0bf8b45 	stb	r2,-467(fp)
				IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, rled_output);
  800880:	e0ff8b43 	ldbu	r3,-467(fp)
  800884:	00804074 	movhi	r2,257
  800888:	10842004 	addi	r2,r2,4224
  80088c:	10c00035 	stwio	r3,0(r2)

				AS_input = AS_temp;
  800890:	d0a75303 	ldbu	r2,-25268(gp)
  800894:	d0a75105 	stb	r2,-25276(gp)
				VS_input = VS_temp;
  800898:	d0a74b03 	ldbu	r2,-25300(gp)
  80089c:	d0a74e45 	stb	r2,-25287(gp)

				AS_temp = 0;
  8008a0:	d0275305 	stb	zero,-25268(gp)
				VS_temp = 0;
  8008a4:	d0274b05 	stb	zero,-25300(gp)
    	    	}

    	if(implementation == 0) {
  8008a8:	e0bf9143 	ldbu	r2,-443(fp)
  8008ac:	1000671e 	bne	r2,zero,800a4c <main+0x378>

    		rled_output = (rled_output & ~0x02);
  8008b0:	e0ff8b43 	ldbu	r3,-467(fp)
  8008b4:	00bfff44 	movi	r2,-3
  8008b8:	1884703a 	and	r2,r3,r2
  8008bc:	e0bf8b45 	stb	r2,-467(fp)
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, rled_output);
  8008c0:	e0ff8b43 	ldbu	r3,-467(fp)
  8008c4:	00804074 	movhi	r2,257
  8008c8:	10842004 	addi	r2,r2,4224
  8008cc:	10c00035 	stwio	r3,0(r2)
    		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, led_reset);
  8008d0:	e0ff8e17 	ldw	r3,-456(fp)
  8008d4:	00804074 	movhi	r2,257
  8008d8:	10841c04 	addi	r2,r2,4208
  8008dc:	10c00035 	stwio	r3,0(r2)

    		data.AS = AS_input;
  8008e0:	d0a75103 	ldbu	r2,-25276(gp)
  8008e4:	e0bfa405 	stb	r2,-368(fp)
    		data.VS = VS_input;
  8008e8:	d0a74e43 	ldbu	r2,-25287(gp)
  8008ec:	e0bfa445 	stb	r2,-367(fp)

        	// Move ticker along
    		data.deltaT = systemTime - prevTime;
  8008f0:	e13f9817 	ldw	r4,-416(fp)
  8008f4:	e17f9917 	ldw	r5,-412(fp)
  8008f8:	e1bf8917 	ldw	r6,-476(fp)
  8008fc:	e1ff8a17 	ldw	r7,-472(fp)
  800900:	2185c83a 	sub	r2,r4,r6
  800904:	2091803a 	cmpltu	r8,r4,r2
  800908:	29c7c83a 	sub	r3,r5,r7
  80090c:	1a09c83a 	sub	r4,r3,r8
  800910:	2007883a 	mov	r3,r4
  800914:	100b883a 	mov	r5,r2
  800918:	180d883a 	mov	r6,r3
  80091c:	2809883a 	mov	r4,r5
  800920:	300b883a 	mov	r5,r6
  800924:	0807f000 	call	807f00 <__floatundidf>
  800928:	1009883a 	mov	r4,r2
  80092c:	180b883a 	mov	r5,r3
  800930:	e13fa015 	stw	r4,-384(fp)
  800934:	e17fa115 	stw	r5,-380(fp)
    		prevTime = systemTime;
  800938:	e0bf9817 	ldw	r2,-416(fp)
  80093c:	e0bf8915 	stw	r2,-476(fp)
  800940:	e0bf9917 	ldw	r2,-412(fp)
  800944:	e0bf8a15 	stw	r2,-472(fp)
    		tick(&data);
  800948:	e0bf9a04 	addi	r2,fp,-408
  80094c:	1009883a 	mov	r4,r2
  800950:	0807c540 	call	807c54 <tick>

    		// LED output based on AP and VP
    		uint32_t gled_output = 0x00;
  800954:	e03f8c15 	stw	zero,-464(fp)
    		if (data.VP) {
  800958:	e0bfa4c3 	ldbu	r2,-365(fp)
  80095c:	10803fcc 	andi	r2,r2,255
  800960:	1080201c 	xori	r2,r2,128
  800964:	10bfe004 	addi	r2,r2,-128
  800968:	10000526 	beq	r2,zero,800980 <main+0x2ac>
    			gled_output |= 0x01;
  80096c:	e0bf8c17 	ldw	r2,-464(fp)
  800970:	10800054 	ori	r2,r2,1
  800974:	e0bf8c15 	stw	r2,-464(fp)
    			send_uart('V'); // VP -> LED 0
  800978:	01001584 	movi	r4,86
  80097c:	08003fc0 	call	8003fc <send_uart>
    		}
    		if (data.AP) {
  800980:	e0bfa483 	ldbu	r2,-366(fp)
  800984:	10803fcc 	andi	r2,r2,255
  800988:	1080201c 	xori	r2,r2,128
  80098c:	10bfe004 	addi	r2,r2,-128
  800990:	10000526 	beq	r2,zero,8009a8 <main+0x2d4>
    			gled_output |= 0x04;
  800994:	e0bf8c17 	ldw	r2,-464(fp)
  800998:	10800114 	ori	r2,r2,4
  80099c:	e0bf8c15 	stw	r2,-464(fp)
    			send_uart('A'); // AP -> LED 2
  8009a0:	01001044 	movi	r4,65
  8009a4:	08003fc0 	call	8003fc <send_uart>
    		}
    		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, gled_output);
  8009a8:	e0ff8c17 	ldw	r3,-464(fp)
  8009ac:	00804074 	movhi	r2,257
  8009b0:	10841c04 	addi	r2,r2,4208
  8009b4:	10c00035 	stwio	r3,0(r2)

    		// Short delay to make LED flashes visible
    		for (volatile int i = 0; i < 100000; i++);
  8009b8:	e03ffe15 	stw	zero,-8(fp)
  8009bc:	00000306 	br	8009cc <main+0x2f8>
  8009c0:	e0bffe17 	ldw	r2,-8(fp)
  8009c4:	10800044 	addi	r2,r2,1
  8009c8:	e0bffe15 	stw	r2,-8(fp)
  8009cc:	e0fffe17 	ldw	r3,-8(fp)
  8009d0:	008000b4 	movhi	r2,2
  8009d4:	10a1a7c4 	addi	r2,r2,-31073
  8009d8:	10fff90e 	bge	r2,r3,8009c0 <__alt_mem_onchip_mem+0xff7f89c0>

    		// Reset leds
    		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, led_reset);
  8009dc:	e0ff8e17 	ldw	r3,-456(fp)
  8009e0:	00804074 	movhi	r2,257
  8009e4:	10841c04 	addi	r2,r2,4208
  8009e8:	10c00035 	stwio	r3,0(r2)

    		 // Print the state to console
    		 printf("SCCHART - AS: %d, VS: %d, AP: %d, VP: %d\n", data.AS, data.VS, data.AP, data.VP);
  8009ec:	e0bfa403 	ldbu	r2,-368(fp)
  8009f0:	10c03fcc 	andi	r3,r2,255
  8009f4:	18c0201c 	xori	r3,r3,128
  8009f8:	18ffe004 	addi	r3,r3,-128
  8009fc:	e0bfa443 	ldbu	r2,-367(fp)
  800a00:	11003fcc 	andi	r4,r2,255
  800a04:	2100201c 	xori	r4,r4,128
  800a08:	213fe004 	addi	r4,r4,-128
  800a0c:	e0bfa483 	ldbu	r2,-366(fp)
  800a10:	11403fcc 	andi	r5,r2,255
  800a14:	2940201c 	xori	r5,r5,128
  800a18:	297fe004 	addi	r5,r5,-128
  800a1c:	e0bfa4c3 	ldbu	r2,-365(fp)
  800a20:	10803fcc 	andi	r2,r2,255
  800a24:	1080201c 	xori	r2,r2,128
  800a28:	10bfe004 	addi	r2,r2,-128
  800a2c:	d8800015 	stw	r2,0(sp)
  800a30:	280f883a 	mov	r7,r5
  800a34:	200d883a 	mov	r6,r4
  800a38:	180b883a 	mov	r5,r3
  800a3c:	010020b4 	movhi	r4,130
  800a40:	21223704 	addi	r4,r4,-30500
  800a44:	0809c180 	call	809c18 <printf>
  800a48:	00003f06 	br	800b48 <main+0x474>

    	}

    	else {
    		c_implementation();
  800a4c:	08004900 	call	800490 <c_implementation>
    		// LED output based on AP and VP

    		rled_output |= 0x02;
  800a50:	e0bf8b43 	ldbu	r2,-467(fp)
  800a54:	10800094 	ori	r2,r2,2
  800a58:	e0bf8b45 	stb	r2,-467(fp)
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, rled_output);
  800a5c:	e0ff8b43 	ldbu	r3,-467(fp)
  800a60:	00804074 	movhi	r2,257
  800a64:	10842004 	addi	r2,r2,4224
  800a68:	10c00035 	stwio	r3,0(r2)
    		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, led_reset);
  800a6c:	e0ff8e17 	ldw	r3,-456(fp)
  800a70:	00804074 	movhi	r2,257
  800a74:	10841c04 	addi	r2,r2,4208
  800a78:	10c00035 	stwio	r3,0(r2)
    		printf("C - AS: %d, VS: %d, AP: %d, VP: %d\n", AS_input, VS_input, AP_output, VP_output);
  800a7c:	d0a75103 	ldbu	r2,-25276(gp)
  800a80:	10c03fcc 	andi	r3,r2,255
  800a84:	d0a74e43 	ldbu	r2,-25287(gp)
  800a88:	11003fcc 	andi	r4,r2,255
  800a8c:	d0a74e03 	ldbu	r2,-25288(gp)
  800a90:	11403fcc 	andi	r5,r2,255
  800a94:	d0a75143 	ldbu	r2,-25275(gp)
  800a98:	10803fcc 	andi	r2,r2,255
  800a9c:	d8800015 	stw	r2,0(sp)
  800aa0:	280f883a 	mov	r7,r5
  800aa4:	200d883a 	mov	r6,r4
  800aa8:	180b883a 	mov	r5,r3
  800aac:	010020b4 	movhi	r4,130
  800ab0:	21224204 	addi	r4,r4,-30456
  800ab4:	0809c180 	call	809c18 <printf>

    		uint32_t gled_output = 0x00;
  800ab8:	e03f8d15 	stw	zero,-460(fp)
    		if (VP_output) {
  800abc:	d0a75143 	ldbu	r2,-25275(gp)
  800ac0:	10803fcc 	andi	r2,r2,255
  800ac4:	10000626 	beq	r2,zero,800ae0 <main+0x40c>
				gled_output |= 0x01;
  800ac8:	e0bf8d17 	ldw	r2,-460(fp)
  800acc:	10800054 	ori	r2,r2,1
  800ad0:	e0bf8d15 	stw	r2,-460(fp)
				send_uart('V');
  800ad4:	01001584 	movi	r4,86
  800ad8:	08003fc0 	call	8003fc <send_uart>
				VP_output = 0;// VP -> LED 0
  800adc:	d0275145 	stb	zero,-25275(gp)
			}
			if (AP_output) {
  800ae0:	d0a74e03 	ldbu	r2,-25288(gp)
  800ae4:	10803fcc 	andi	r2,r2,255
  800ae8:	10000626 	beq	r2,zero,800b04 <main+0x430>
				gled_output |= 0x04;
  800aec:	e0bf8d17 	ldw	r2,-460(fp)
  800af0:	10800114 	ori	r2,r2,4
  800af4:	e0bf8d15 	stw	r2,-460(fp)
				send_uart('A');
  800af8:	01001044 	movi	r4,65
  800afc:	08003fc0 	call	8003fc <send_uart>
				AP_output = 0;// AP -> LED 2
  800b00:	d0274e05 	stb	zero,-25288(gp)
			}
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, gled_output);
  800b04:	e0ff8d17 	ldw	r3,-460(fp)
  800b08:	00804074 	movhi	r2,257
  800b0c:	10841c04 	addi	r2,r2,4208
  800b10:	10c00035 	stwio	r3,0(r2)

			// Short delay to make LED flashes visible
			for (volatile int i = 0; i < 100000; i++);
  800b14:	e03fff15 	stw	zero,-4(fp)
  800b18:	00000306 	br	800b28 <main+0x454>
  800b1c:	e0bfff17 	ldw	r2,-4(fp)
  800b20:	10800044 	addi	r2,r2,1
  800b24:	e0bfff15 	stw	r2,-4(fp)
  800b28:	e0ffff17 	ldw	r3,-4(fp)
  800b2c:	008000b4 	movhi	r2,2
  800b30:	10a1a7c4 	addi	r2,r2,-31073
  800b34:	10fff90e 	bge	r2,r3,800b1c <__alt_mem_onchip_mem+0xff7f8b1c>

			// Reset leds
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, led_reset);
  800b38:	e0ff8e17 	ldw	r3,-456(fp)
  800b3c:	00804074 	movhi	r2,257
  800b40:	10841c04 	addi	r2,r2,4208
  800b44:	10c00035 	stwio	r3,0(r2)
    	}

    	AS_input = 0;
  800b48:	d0275105 	stb	zero,-25276(gp)
    	VS_input = 0;
  800b4c:	d0274e45 	stb	zero,-25287(gp)
  800b50:	003f0306 	br	800760 <__alt_mem_onchip_mem+0xff7f8760>
    			if ((~IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE) & (1 << 1)) ||
    				(~IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE) & (1 << 0))) {
    				reset_button = 0;
    				IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, led_reset);
    			}
    			continue; // skip rest of the loop until input is detected
  800b54:	0001883a 	nop
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, led_reset);
    	}

    	AS_input = 0;
    	VS_input = 0;
    }
  800b58:	003f0106 	br	800760 <__alt_mem_onchip_mem+0xff7f8760>

00800b5c <logic>:
#include "timing.h"
#include <stdio.h>

#include "sccharts.h"

void logic(TickData* d) {
  800b5c:	defffa04 	addi	sp,sp,-24
  800b60:	dfc00515 	stw	ra,20(sp)
  800b64:	df000415 	stw	fp,16(sp)
  800b68:	dc800315 	stw	r18,12(sp)
  800b6c:	dc400215 	stw	r17,8(sp)
  800b70:	dc000115 	stw	r16,4(sp)
  800b74:	df000404 	addi	fp,sp,16
  800b78:	e13ffc15 	stw	r4,-16(fp)
  d->_Pacemaker_local_iAP = 0;
  800b7c:	e0bffc17 	ldw	r2,-16(fp)
  800b80:	10001705 	stb	zero,92(r2)
  d->_Pacemaker_local_iVP = 0;
  800b84:	e0bffc17 	ldw	r2,-16(fp)
  800b88:	10001745 	stb	zero,93(r2)
  d->_Pacemaker_local_PVARP_timeout = 0;
  800b8c:	e0bffc17 	ldw	r2,-16(fp)
  800b90:	10001785 	stb	zero,94(r2)
  d->_Pacemaker_local_VRP_timeout = 0;
  800b94:	e0bffc17 	ldw	r2,-16(fp)
  800b98:	100017c5 	stb	zero,95(r2)
  d->_Pacemaker_local_URI_timeout = 0;
  800b9c:	e0bffc17 	ldw	r2,-16(fp)
  800ba0:	10001805 	stb	zero,96(r2)
  d->_g156 = d->_pg179;
  800ba4:	e0bffc17 	ldw	r2,-16(fp)
  800ba8:	10c059c3 	ldbu	r3,359(r2)
  800bac:	e0bffc17 	ldw	r2,-16(fp)
  800bb0:	10c03605 	stb	r3,216(r2)
  d->_g150 = d->_pg144;
  800bb4:	e0bffc17 	ldw	r2,-16(fp)
  800bb8:	10c05a03 	ldbu	r3,360(r2)
  800bbc:	e0bffc17 	ldw	r2,-16(fp)
  800bc0:	10c034c5 	stb	r3,211(r2)
  d->_g153_e1 = !(d->_g156 || d->_g150);
  800bc4:	e0bffc17 	ldw	r2,-16(fp)
  800bc8:	10803603 	ldbu	r2,216(r2)
  800bcc:	10803fcc 	andi	r2,r2,255
  800bd0:	1080201c 	xori	r2,r2,128
  800bd4:	10bfe004 	addi	r2,r2,-128
  800bd8:	1000081e 	bne	r2,zero,800bfc <logic+0xa0>
  800bdc:	e0bffc17 	ldw	r2,-16(fp)
  800be0:	108034c3 	ldbu	r2,211(r2)
  800be4:	10803fcc 	andi	r2,r2,255
  800be8:	1080201c 	xori	r2,r2,128
  800bec:	10bfe004 	addi	r2,r2,-128
  800bf0:	1000021e 	bne	r2,zero,800bfc <logic+0xa0>
  800bf4:	00800044 	movi	r2,1
  800bf8:	00000106 	br	800c00 <logic+0xa4>
  800bfc:	0005883a 	mov	r2,zero
  800c00:	1007883a 	mov	r3,r2
  800c04:	e0bffc17 	ldw	r2,-16(fp)
  800c08:	10c05845 	stb	r3,353(r2)
  d->_g171 = d->_pg163;
  800c0c:	e0bffc17 	ldw	r2,-16(fp)
  800c10:	10c05a43 	ldbu	r3,361(r2)
  800c14:	e0bffc17 	ldw	r2,-16(fp)
  800c18:	10c03885 	stb	r3,226(r2)
  d->_g172 = d->_g171 && d->VS;
  800c1c:	e0bffc17 	ldw	r2,-16(fp)
  800c20:	10803883 	ldbu	r2,226(r2)
  800c24:	10803fcc 	andi	r2,r2,255
  800c28:	1080201c 	xori	r2,r2,128
  800c2c:	10bfe004 	addi	r2,r2,-128
  800c30:	10000826 	beq	r2,zero,800c54 <logic+0xf8>
  800c34:	e0bffc17 	ldw	r2,-16(fp)
  800c38:	10800a43 	ldbu	r2,41(r2)
  800c3c:	10803fcc 	andi	r2,r2,255
  800c40:	1080201c 	xori	r2,r2,128
  800c44:	10bfe004 	addi	r2,r2,-128
  800c48:	10000226 	beq	r2,zero,800c54 <logic+0xf8>
  800c4c:	00800044 	movi	r2,1
  800c50:	00000106 	br	800c58 <logic+0xfc>
  800c54:	0005883a 	mov	r2,zero
  800c58:	1007883a 	mov	r3,r2
  800c5c:	e0bffc17 	ldw	r2,-16(fp)
  800c60:	10c038c5 	stb	r3,227(r2)
  if (d->_g172) {
  800c64:	e0bffc17 	ldw	r2,-16(fp)
  800c68:	108038c3 	ldbu	r2,227(r2)
  800c6c:	10803fcc 	andi	r2,r2,255
  800c70:	1080201c 	xori	r2,r2,128
  800c74:	10bfe004 	addi	r2,r2,-128
  800c78:	10000326 	beq	r2,zero,800c88 <logic+0x12c>
    d->_Pacemaker_local__Atrig8 = 1;
  800c7c:	e0bffc17 	ldw	r2,-16(fp)
  800c80:	00c00044 	movi	r3,1
  800c84:	10c01a45 	stb	r3,105(r2)
  }
  d->_g45 = d->_pg66;
  800c88:	e0bffc17 	ldw	r2,-16(fp)
  800c8c:	10c05a83 	ldbu	r3,362(r2)
  800c90:	e0bffc17 	ldw	r2,-16(fp)
  800c94:	10c02285 	stb	r3,138(r2)
  d->_g39 = d->_pg65;
  800c98:	e0bffc17 	ldw	r2,-16(fp)
  800c9c:	10c05ac3 	ldbu	r3,363(r2)
  800ca0:	e0bffc17 	ldw	r2,-16(fp)
  800ca4:	10c02145 	stb	r3,133(r2)
  d->_g42_e1 = !(d->_g45 || d->_g39);
  800ca8:	e0bffc17 	ldw	r2,-16(fp)
  800cac:	10802283 	ldbu	r2,138(r2)
  800cb0:	10803fcc 	andi	r2,r2,255
  800cb4:	1080201c 	xori	r2,r2,128
  800cb8:	10bfe004 	addi	r2,r2,-128
  800cbc:	1000081e 	bne	r2,zero,800ce0 <logic+0x184>
  800cc0:	e0bffc17 	ldw	r2,-16(fp)
  800cc4:	10802143 	ldbu	r2,133(r2)
  800cc8:	10803fcc 	andi	r2,r2,255
  800ccc:	1080201c 	xori	r2,r2,128
  800cd0:	10bfe004 	addi	r2,r2,-128
  800cd4:	1000021e 	bne	r2,zero,800ce0 <logic+0x184>
  800cd8:	00800044 	movi	r2,1
  800cdc:	00000106 	br	800ce4 <logic+0x188>
  800ce0:	0005883a 	mov	r2,zero
  800ce4:	1007883a 	mov	r3,r2
  800ce8:	e0bffc17 	ldw	r2,-16(fp)
  800cec:	10c05605 	stb	r3,344(r2)
  d->_g213 = d->_pg191;
  800cf0:	e0bffc17 	ldw	r2,-16(fp)
  800cf4:	10c05b03 	ldbu	r3,364(r2)
  800cf8:	e0bffc17 	ldw	r2,-16(fp)
  800cfc:	10c03f45 	stb	r3,253(r2)
  if (d->_g213) {
  800d00:	e0bffc17 	ldw	r2,-16(fp)
  800d04:	10803f43 	ldbu	r2,253(r2)
  800d08:	10803fcc 	andi	r2,r2,255
  800d0c:	1080201c 	xori	r2,r2,128
  800d10:	10bfe004 	addi	r2,r2,-128
  800d14:	10001226 	beq	r2,zero,800d60 <logic+0x204>
    d->_Pacemaker_local__region1_URI_x += d->deltaT;
  800d18:	e13ffc17 	ldw	r4,-16(fp)
  800d1c:	20800d17 	ldw	r2,52(r4)
  800d20:	20c00e17 	ldw	r3,56(r4)
  800d24:	e1bffc17 	ldw	r6,-16(fp)
  800d28:	31000617 	ldw	r4,24(r6)
  800d2c:	31400717 	ldw	r5,28(r6)
  800d30:	200d883a 	mov	r6,r4
  800d34:	280f883a 	mov	r7,r5
  800d38:	1009883a 	mov	r4,r2
  800d3c:	180b883a 	mov	r5,r3
  800d40:	0807f700 	call	807f70 <__adddf3>
  800d44:	1009883a 	mov	r4,r2
  800d48:	180b883a 	mov	r5,r3
  800d4c:	2005883a 	mov	r2,r4
  800d50:	2807883a 	mov	r3,r5
  800d54:	e13ffc17 	ldw	r4,-16(fp)
  800d58:	20800d15 	stw	r2,52(r4)
  800d5c:	20c00e15 	stw	r3,56(r4)
  }
  d->_g60 = d->_pg43;
  800d60:	e0bffc17 	ldw	r2,-16(fp)
  800d64:	10c05b43 	ldbu	r3,365(r2)
  800d68:	e0bffc17 	ldw	r2,-16(fp)
  800d6c:	10c02505 	stb	r3,148(r2)
  d->_cg60 = !(d->_Pacemaker_local__region1_URI_x >= d->URI);
  800d70:	e0bffc17 	ldw	r2,-16(fp)
  800d74:	14000d17 	ldw	r16,52(r2)
  800d78:	14400e17 	ldw	r17,56(r2)
  800d7c:	e0bffc17 	ldw	r2,-16(fp)
  800d80:	10800517 	ldw	r2,20(r2)
  800d84:	1009883a 	mov	r4,r2
  800d88:	0809a000 	call	809a00 <__floatsidf>
  800d8c:	1009883a 	mov	r4,r2
  800d90:	180b883a 	mov	r5,r3
  800d94:	04800044 	movi	r18,1
  800d98:	200d883a 	mov	r6,r4
  800d9c:	280f883a 	mov	r7,r5
  800da0:	8009883a 	mov	r4,r16
  800da4:	880b883a 	mov	r5,r17
  800da8:	080881c0 	call	80881c <__gedf2>
  800dac:	1000010e 	bge	r2,zero,800db4 <logic+0x258>
  800db0:	0025883a 	mov	r18,zero
  800db4:	9080005c 	xori	r2,r18,1
  800db8:	10803fcc 	andi	r2,r2,255
  800dbc:	1007883a 	mov	r3,r2
  800dc0:	e0bffc17 	ldw	r2,-16(fp)
  800dc4:	10c04645 	stb	r3,281(r2)
  d->_g61 = d->_g60 && d->_cg60;
  800dc8:	e0bffc17 	ldw	r2,-16(fp)
  800dcc:	10802503 	ldbu	r2,148(r2)
  800dd0:	10803fcc 	andi	r2,r2,255
  800dd4:	1080201c 	xori	r2,r2,128
  800dd8:	10bfe004 	addi	r2,r2,-128
  800ddc:	10000826 	beq	r2,zero,800e00 <logic+0x2a4>
  800de0:	e0bffc17 	ldw	r2,-16(fp)
  800de4:	10804643 	ldbu	r2,281(r2)
  800de8:	10803fcc 	andi	r2,r2,255
  800dec:	1080201c 	xori	r2,r2,128
  800df0:	10bfe004 	addi	r2,r2,-128
  800df4:	10000226 	beq	r2,zero,800e00 <logic+0x2a4>
  800df8:	00800044 	movi	r2,1
  800dfc:	00000106 	br	800e04 <logic+0x2a8>
  800e00:	0005883a 	mov	r2,zero
  800e04:	1007883a 	mov	r3,r2
  800e08:	e0bffc17 	ldw	r2,-16(fp)
  800e0c:	10c02545 	stb	r3,149(r2)
  if (d->_g61) {
  800e10:	e0bffc17 	ldw	r2,-16(fp)
  800e14:	10802543 	ldbu	r2,149(r2)
  800e18:	10803fcc 	andi	r2,r2,255
  800e1c:	1080201c 	xori	r2,r2,128
  800e20:	10bfe004 	addi	r2,r2,-128
  800e24:	10000326 	beq	r2,zero,800e34 <logic+0x2d8>
    d->_Pacemaker_local__Atrig2 = 1;
  800e28:	e0bffc17 	ldw	r2,-16(fp)
  800e2c:	00c00044 	movi	r3,1
  800e30:	10c018c5 	stb	r3,99(r2)
  }
  d->_g63 = d->_g60 && !d->_cg60;
  800e34:	e0bffc17 	ldw	r2,-16(fp)
  800e38:	10802503 	ldbu	r2,148(r2)
  800e3c:	10803fcc 	andi	r2,r2,255
  800e40:	1080201c 	xori	r2,r2,128
  800e44:	10bfe004 	addi	r2,r2,-128
  800e48:	10000826 	beq	r2,zero,800e6c <logic+0x310>
  800e4c:	e0bffc17 	ldw	r2,-16(fp)
  800e50:	10804643 	ldbu	r2,281(r2)
  800e54:	10803fcc 	andi	r2,r2,255
  800e58:	1080201c 	xori	r2,r2,128
  800e5c:	10bfe004 	addi	r2,r2,-128
  800e60:	1000021e 	bne	r2,zero,800e6c <logic+0x310>
  800e64:	00800044 	movi	r2,1
  800e68:	00000106 	br	800e70 <logic+0x314>
  800e6c:	0005883a 	mov	r2,zero
  800e70:	1007883a 	mov	r3,r2
  800e74:	e0bffc17 	ldw	r2,-16(fp)
  800e78:	10c025c5 	stb	r3,151(r2)
  d->_cg63 = d->_Pacemaker_local__region1_URI_x >= d->URI;
  800e7c:	e0bffc17 	ldw	r2,-16(fp)
  800e80:	14000d17 	ldw	r16,52(r2)
  800e84:	14400e17 	ldw	r17,56(r2)
  800e88:	e0bffc17 	ldw	r2,-16(fp)
  800e8c:	10800517 	ldw	r2,20(r2)
  800e90:	1009883a 	mov	r4,r2
  800e94:	0809a000 	call	809a00 <__floatsidf>
  800e98:	1009883a 	mov	r4,r2
  800e9c:	180b883a 	mov	r5,r3
  800ea0:	04800044 	movi	r18,1
  800ea4:	200d883a 	mov	r6,r4
  800ea8:	280f883a 	mov	r7,r5
  800eac:	8009883a 	mov	r4,r16
  800eb0:	880b883a 	mov	r5,r17
  800eb4:	080881c0 	call	80881c <__gedf2>
  800eb8:	1000010e 	bge	r2,zero,800ec0 <logic+0x364>
  800ebc:	0025883a 	mov	r18,zero
  800ec0:	9007883a 	mov	r3,r18
  800ec4:	e0bffc17 	ldw	r2,-16(fp)
  800ec8:	10c04605 	stb	r3,280(r2)
  d->_g64 = d->_g63 && d->_cg63;
  800ecc:	e0bffc17 	ldw	r2,-16(fp)
  800ed0:	108025c3 	ldbu	r2,151(r2)
  800ed4:	10803fcc 	andi	r2,r2,255
  800ed8:	1080201c 	xori	r2,r2,128
  800edc:	10bfe004 	addi	r2,r2,-128
  800ee0:	10000826 	beq	r2,zero,800f04 <logic+0x3a8>
  800ee4:	e0bffc17 	ldw	r2,-16(fp)
  800ee8:	10804603 	ldbu	r2,280(r2)
  800eec:	10803fcc 	andi	r2,r2,255
  800ef0:	1080201c 	xori	r2,r2,128
  800ef4:	10bfe004 	addi	r2,r2,-128
  800ef8:	10000226 	beq	r2,zero,800f04 <logic+0x3a8>
  800efc:	00800044 	movi	r2,1
  800f00:	00000106 	br	800f08 <logic+0x3ac>
  800f04:	0005883a 	mov	r2,zero
  800f08:	1007883a 	mov	r3,r2
  800f0c:	e0bffc17 	ldw	r2,-16(fp)
  800f10:	10c02605 	stb	r3,152(r2)
  if (d->_g64) {
  800f14:	e0bffc17 	ldw	r2,-16(fp)
  800f18:	10802603 	ldbu	r2,152(r2)
  800f1c:	10803fcc 	andi	r2,r2,255
  800f20:	1080201c 	xori	r2,r2,128
  800f24:	10bfe004 	addi	r2,r2,-128
  800f28:	10000326 	beq	r2,zero,800f38 <logic+0x3dc>
    d->_Pacemaker_local__Atrig3 = 1;
  800f2c:	e0bffc17 	ldw	r2,-16(fp)
  800f30:	00c00044 	movi	r3,1
  800f34:	10c01905 	stb	r3,100(r2)
  }
  d->sleepT = 1000.0;
  800f38:	e0fffc17 	ldw	r3,-16(fp)
  800f3c:	18000815 	stw	zero,32(r3)
  800f40:	009023f4 	movhi	r2,16527
  800f44:	10900004 	addi	r2,r2,16384
  800f48:	18800915 	stw	r2,36(r3)
  d->_g45 = d->_g39 || d->_g45;
  800f4c:	e0bffc17 	ldw	r2,-16(fp)
  800f50:	10802143 	ldbu	r2,133(r2)
  800f54:	10803fcc 	andi	r2,r2,255
  800f58:	1080201c 	xori	r2,r2,128
  800f5c:	10bfe004 	addi	r2,r2,-128
  800f60:	1000061e 	bne	r2,zero,800f7c <logic+0x420>
  800f64:	e0bffc17 	ldw	r2,-16(fp)
  800f68:	10802283 	ldbu	r2,138(r2)
  800f6c:	10803fcc 	andi	r2,r2,255
  800f70:	1080201c 	xori	r2,r2,128
  800f74:	10bfe004 	addi	r2,r2,-128
  800f78:	10000226 	beq	r2,zero,800f84 <logic+0x428>
  800f7c:	00800044 	movi	r2,1
  800f80:	00000106 	br	800f88 <logic+0x42c>
  800f84:	0005883a 	mov	r2,zero
  800f88:	1007883a 	mov	r3,r2
  800f8c:	e0bffc17 	ldw	r2,-16(fp)
  800f90:	10c02285 	stb	r3,138(r2)
  d->_cg40 = d->_Pacemaker_local__region1_URI_x < d->URI;
  800f94:	e0bffc17 	ldw	r2,-16(fp)
  800f98:	14000d17 	ldw	r16,52(r2)
  800f9c:	14400e17 	ldw	r17,56(r2)
  800fa0:	e0bffc17 	ldw	r2,-16(fp)
  800fa4:	10800517 	ldw	r2,20(r2)
  800fa8:	1009883a 	mov	r4,r2
  800fac:	0809a000 	call	809a00 <__floatsidf>
  800fb0:	1009883a 	mov	r4,r2
  800fb4:	180b883a 	mov	r5,r3
  800fb8:	04800044 	movi	r18,1
  800fbc:	200d883a 	mov	r6,r4
  800fc0:	280f883a 	mov	r7,r5
  800fc4:	8009883a 	mov	r4,r16
  800fc8:	880b883a 	mov	r5,r17
  800fcc:	08088f80 	call	8088f8 <__ledf2>
  800fd0:	10000116 	blt	r2,zero,800fd8 <logic+0x47c>
  800fd4:	0025883a 	mov	r18,zero
  800fd8:	9007883a 	mov	r3,r18
  800fdc:	e0bffc17 	ldw	r2,-16(fp)
  800fe0:	10c043c5 	stb	r3,271(r2)
  d->_g39 = d->_g45 && d->_cg40;
  800fe4:	e0bffc17 	ldw	r2,-16(fp)
  800fe8:	10802283 	ldbu	r2,138(r2)
  800fec:	10803fcc 	andi	r2,r2,255
  800ff0:	1080201c 	xori	r2,r2,128
  800ff4:	10bfe004 	addi	r2,r2,-128
  800ff8:	10000826 	beq	r2,zero,80101c <logic+0x4c0>
  800ffc:	e0bffc17 	ldw	r2,-16(fp)
  801000:	108043c3 	ldbu	r2,271(r2)
  801004:	10803fcc 	andi	r2,r2,255
  801008:	1080201c 	xori	r2,r2,128
  80100c:	10bfe004 	addi	r2,r2,-128
  801010:	10000226 	beq	r2,zero,80101c <logic+0x4c0>
  801014:	00800044 	movi	r2,1
  801018:	00000106 	br	801020 <logic+0x4c4>
  80101c:	0005883a 	mov	r2,zero
  801020:	1007883a 	mov	r3,r2
  801024:	e0bffc17 	ldw	r2,-16(fp)
  801028:	10c02145 	stb	r3,133(r2)
  if (d->_g39) {
  80102c:	e0bffc17 	ldw	r2,-16(fp)
  801030:	10802143 	ldbu	r2,133(r2)
  801034:	10803fcc 	andi	r2,r2,255
  801038:	1080201c 	xori	r2,r2,128
  80103c:	10bfe004 	addi	r2,r2,-128
  801040:	10003426 	beq	r2,zero,801114 <logic+0x5b8>
    d->sleepT = (d->sleepT < (d->URI - d->_Pacemaker_local__region1_URI_x)) ? d->sleepT : (d->URI - d->_Pacemaker_local__region1_URI_x);
  801044:	e0bffc17 	ldw	r2,-16(fp)
  801048:	14000817 	ldw	r16,32(r2)
  80104c:	14400917 	ldw	r17,36(r2)
  801050:	e0bffc17 	ldw	r2,-16(fp)
  801054:	10800517 	ldw	r2,20(r2)
  801058:	1009883a 	mov	r4,r2
  80105c:	0809a000 	call	809a00 <__floatsidf>
  801060:	1011883a 	mov	r8,r2
  801064:	1813883a 	mov	r9,r3
  801068:	e13ffc17 	ldw	r4,-16(fp)
  80106c:	20800d17 	ldw	r2,52(r4)
  801070:	20c00e17 	ldw	r3,56(r4)
  801074:	100d883a 	mov	r6,r2
  801078:	180f883a 	mov	r7,r3
  80107c:	4009883a 	mov	r4,r8
  801080:	480b883a 	mov	r5,r9
  801084:	08091040 	call	809104 <__subdf3>
  801088:	1009883a 	mov	r4,r2
  80108c:	180b883a 	mov	r5,r3
  801090:	2005883a 	mov	r2,r4
  801094:	2807883a 	mov	r3,r5
  801098:	100d883a 	mov	r6,r2
  80109c:	180f883a 	mov	r7,r3
  8010a0:	8009883a 	mov	r4,r16
  8010a4:	880b883a 	mov	r5,r17
  8010a8:	08088f80 	call	8088f8 <__ledf2>
  8010ac:	1000040e 	bge	r2,zero,8010c0 <logic+0x564>
  8010b0:	e13ffc17 	ldw	r4,-16(fp)
  8010b4:	20800817 	ldw	r2,32(r4)
  8010b8:	20c00917 	ldw	r3,36(r4)
  8010bc:	00001206 	br	801108 <logic+0x5ac>
  8010c0:	e0bffc17 	ldw	r2,-16(fp)
  8010c4:	10800517 	ldw	r2,20(r2)
  8010c8:	1009883a 	mov	r4,r2
  8010cc:	0809a000 	call	809a00 <__floatsidf>
  8010d0:	1011883a 	mov	r8,r2
  8010d4:	1813883a 	mov	r9,r3
  8010d8:	e13ffc17 	ldw	r4,-16(fp)
  8010dc:	20800d17 	ldw	r2,52(r4)
  8010e0:	20c00e17 	ldw	r3,56(r4)
  8010e4:	100d883a 	mov	r6,r2
  8010e8:	180f883a 	mov	r7,r3
  8010ec:	4009883a 	mov	r4,r8
  8010f0:	480b883a 	mov	r5,r9
  8010f4:	08091040 	call	809104 <__subdf3>
  8010f8:	1009883a 	mov	r4,r2
  8010fc:	180b883a 	mov	r5,r3
  801100:	2005883a 	mov	r2,r4
  801104:	2807883a 	mov	r3,r5
  801108:	e13ffc17 	ldw	r4,-16(fp)
  80110c:	20800815 	stw	r2,32(r4)
  801110:	20c00915 	stw	r3,36(r4)
  }
  d->_cg41 = d->_Pacemaker_local__Atrig2 || d->_Pacemaker_local__Atrig3;
  801114:	e0bffc17 	ldw	r2,-16(fp)
  801118:	108018c3 	ldbu	r2,99(r2)
  80111c:	10803fcc 	andi	r2,r2,255
  801120:	1080201c 	xori	r2,r2,128
  801124:	10bfe004 	addi	r2,r2,-128
  801128:	1000061e 	bne	r2,zero,801144 <logic+0x5e8>
  80112c:	e0bffc17 	ldw	r2,-16(fp)
  801130:	10801903 	ldbu	r2,100(r2)
  801134:	10803fcc 	andi	r2,r2,255
  801138:	1080201c 	xori	r2,r2,128
  80113c:	10bfe004 	addi	r2,r2,-128
  801140:	10000226 	beq	r2,zero,80114c <logic+0x5f0>
  801144:	00800044 	movi	r2,1
  801148:	00000106 	br	801150 <logic+0x5f4>
  80114c:	0005883a 	mov	r2,zero
  801150:	1007883a 	mov	r3,r2
  801154:	e0bffc17 	ldw	r2,-16(fp)
  801158:	10c04385 	stb	r3,270(r2)
  d->_g40 = d->_g45 && !d->_cg40;
  80115c:	e0bffc17 	ldw	r2,-16(fp)
  801160:	10802283 	ldbu	r2,138(r2)
  801164:	10803fcc 	andi	r2,r2,255
  801168:	1080201c 	xori	r2,r2,128
  80116c:	10bfe004 	addi	r2,r2,-128
  801170:	10000826 	beq	r2,zero,801194 <logic+0x638>
  801174:	e0bffc17 	ldw	r2,-16(fp)
  801178:	108043c3 	ldbu	r2,271(r2)
  80117c:	10803fcc 	andi	r2,r2,255
  801180:	1080201c 	xori	r2,r2,128
  801184:	10bfe004 	addi	r2,r2,-128
  801188:	1000021e 	bne	r2,zero,801194 <logic+0x638>
  80118c:	00800044 	movi	r2,1
  801190:	00000106 	br	801198 <logic+0x63c>
  801194:	0005883a 	mov	r2,zero
  801198:	1007883a 	mov	r3,r2
  80119c:	e0bffc17 	ldw	r2,-16(fp)
  8011a0:	10c02185 	stb	r3,134(r2)
  d->_cg43 = d->_Pacemaker_local__Atrig2 || d->_Pacemaker_local__Atrig3;
  8011a4:	e0bffc17 	ldw	r2,-16(fp)
  8011a8:	108018c3 	ldbu	r2,99(r2)
  8011ac:	10803fcc 	andi	r2,r2,255
  8011b0:	1080201c 	xori	r2,r2,128
  8011b4:	10bfe004 	addi	r2,r2,-128
  8011b8:	1000061e 	bne	r2,zero,8011d4 <logic+0x678>
  8011bc:	e0bffc17 	ldw	r2,-16(fp)
  8011c0:	10801903 	ldbu	r2,100(r2)
  8011c4:	10803fcc 	andi	r2,r2,255
  8011c8:	1080201c 	xori	r2,r2,128
  8011cc:	10bfe004 	addi	r2,r2,-128
  8011d0:	10000226 	beq	r2,zero,8011dc <logic+0x680>
  8011d4:	00800044 	movi	r2,1
  8011d8:	00000106 	br	8011e0 <logic+0x684>
  8011dc:	0005883a 	mov	r2,zero
  8011e0:	1007883a 	mov	r3,r2
  8011e4:	e0bffc17 	ldw	r2,-16(fp)
  8011e8:	10c04405 	stb	r3,272(r2)
  d->_g42 = (d->_g39 && d->_cg41) || (d->_g40 && d->_cg43);
  8011ec:	e0bffc17 	ldw	r2,-16(fp)
  8011f0:	10802143 	ldbu	r2,133(r2)
  8011f4:	10803fcc 	andi	r2,r2,255
  8011f8:	1080201c 	xori	r2,r2,128
  8011fc:	10bfe004 	addi	r2,r2,-128
  801200:	10000626 	beq	r2,zero,80121c <logic+0x6c0>
  801204:	e0bffc17 	ldw	r2,-16(fp)
  801208:	10804383 	ldbu	r2,270(r2)
  80120c:	10803fcc 	andi	r2,r2,255
  801210:	1080201c 	xori	r2,r2,128
  801214:	10bfe004 	addi	r2,r2,-128
  801218:	10000c1e 	bne	r2,zero,80124c <logic+0x6f0>
  80121c:	e0bffc17 	ldw	r2,-16(fp)
  801220:	10802183 	ldbu	r2,134(r2)
  801224:	10803fcc 	andi	r2,r2,255
  801228:	1080201c 	xori	r2,r2,128
  80122c:	10bfe004 	addi	r2,r2,-128
  801230:	10000826 	beq	r2,zero,801254 <logic+0x6f8>
  801234:	e0bffc17 	ldw	r2,-16(fp)
  801238:	10804403 	ldbu	r2,272(r2)
  80123c:	10803fcc 	andi	r2,r2,255
  801240:	1080201c 	xori	r2,r2,128
  801244:	10bfe004 	addi	r2,r2,-128
  801248:	10000226 	beq	r2,zero,801254 <logic+0x6f8>
  80124c:	00800044 	movi	r2,1
  801250:	00000106 	br	801258 <logic+0x6fc>
  801254:	0005883a 	mov	r2,zero
  801258:	1007883a 	mov	r3,r2
  80125c:	e0bffc17 	ldw	r2,-16(fp)
  801260:	10c02205 	stb	r3,136(r2)
  d->_g56 = d->_pg46;
  801264:	e0bffc17 	ldw	r2,-16(fp)
  801268:	10c05b83 	ldbu	r3,366(r2)
  80126c:	e0bffc17 	ldw	r2,-16(fp)
  801270:	10c02485 	stb	r3,146(r2)
  d->_g50 = d->_pg37;
  801274:	e0bffc17 	ldw	r2,-16(fp)
  801278:	10c05bc3 	ldbu	r3,367(r2)
  80127c:	e0bffc17 	ldw	r2,-16(fp)
  801280:	10c02345 	stb	r3,141(r2)
  d->_g53_e2 = !(d->_g56 || d->_g50);
  801284:	e0bffc17 	ldw	r2,-16(fp)
  801288:	10802483 	ldbu	r2,146(r2)
  80128c:	10803fcc 	andi	r2,r2,255
  801290:	1080201c 	xori	r2,r2,128
  801294:	10bfe004 	addi	r2,r2,-128
  801298:	1000081e 	bne	r2,zero,8012bc <logic+0x760>
  80129c:	e0bffc17 	ldw	r2,-16(fp)
  8012a0:	10802343 	ldbu	r2,141(r2)
  8012a4:	10803fcc 	andi	r2,r2,255
  8012a8:	1080201c 	xori	r2,r2,128
  8012ac:	10bfe004 	addi	r2,r2,-128
  8012b0:	1000021e 	bne	r2,zero,8012bc <logic+0x760>
  8012b4:	00800044 	movi	r2,1
  8012b8:	00000106 	br	8012c0 <logic+0x764>
  8012bc:	0005883a 	mov	r2,zero
  8012c0:	1007883a 	mov	r3,r2
  8012c4:	e0bffc17 	ldw	r2,-16(fp)
  8012c8:	10c05645 	stb	r3,345(r2)
  d->_g56 = d->_g50 || d->_g56;
  8012cc:	e0bffc17 	ldw	r2,-16(fp)
  8012d0:	10802343 	ldbu	r2,141(r2)
  8012d4:	10803fcc 	andi	r2,r2,255
  8012d8:	1080201c 	xori	r2,r2,128
  8012dc:	10bfe004 	addi	r2,r2,-128
  8012e0:	1000061e 	bne	r2,zero,8012fc <logic+0x7a0>
  8012e4:	e0bffc17 	ldw	r2,-16(fp)
  8012e8:	10802483 	ldbu	r2,146(r2)
  8012ec:	10803fcc 	andi	r2,r2,255
  8012f0:	1080201c 	xori	r2,r2,128
  8012f4:	10bfe004 	addi	r2,r2,-128
  8012f8:	10000226 	beq	r2,zero,801304 <logic+0x7a8>
  8012fc:	00800044 	movi	r2,1
  801300:	00000106 	br	801308 <logic+0x7ac>
  801304:	0005883a 	mov	r2,zero
  801308:	1007883a 	mov	r3,r2
  80130c:	e0bffc17 	ldw	r2,-16(fp)
  801310:	10c02485 	stb	r3,146(r2)
  d->_cg51 = d->_Pacemaker_local__region1_URI_x < d->URI;
  801314:	e0bffc17 	ldw	r2,-16(fp)
  801318:	14000d17 	ldw	r16,52(r2)
  80131c:	14400e17 	ldw	r17,56(r2)
  801320:	e0bffc17 	ldw	r2,-16(fp)
  801324:	10800517 	ldw	r2,20(r2)
  801328:	1009883a 	mov	r4,r2
  80132c:	0809a000 	call	809a00 <__floatsidf>
  801330:	1009883a 	mov	r4,r2
  801334:	180b883a 	mov	r5,r3
  801338:	04800044 	movi	r18,1
  80133c:	200d883a 	mov	r6,r4
  801340:	280f883a 	mov	r7,r5
  801344:	8009883a 	mov	r4,r16
  801348:	880b883a 	mov	r5,r17
  80134c:	08088f80 	call	8088f8 <__ledf2>
  801350:	10000116 	blt	r2,zero,801358 <logic+0x7fc>
  801354:	0025883a 	mov	r18,zero
  801358:	9007883a 	mov	r3,r18
  80135c:	e0bffc17 	ldw	r2,-16(fp)
  801360:	10c04545 	stb	r3,277(r2)
  d->_g50 = d->_g56 && d->_cg51;
  801364:	e0bffc17 	ldw	r2,-16(fp)
  801368:	10802483 	ldbu	r2,146(r2)
  80136c:	10803fcc 	andi	r2,r2,255
  801370:	1080201c 	xori	r2,r2,128
  801374:	10bfe004 	addi	r2,r2,-128
  801378:	10000826 	beq	r2,zero,80139c <logic+0x840>
  80137c:	e0bffc17 	ldw	r2,-16(fp)
  801380:	10804543 	ldbu	r2,277(r2)
  801384:	10803fcc 	andi	r2,r2,255
  801388:	1080201c 	xori	r2,r2,128
  80138c:	10bfe004 	addi	r2,r2,-128
  801390:	10000226 	beq	r2,zero,80139c <logic+0x840>
  801394:	00800044 	movi	r2,1
  801398:	00000106 	br	8013a0 <logic+0x844>
  80139c:	0005883a 	mov	r2,zero
  8013a0:	1007883a 	mov	r3,r2
  8013a4:	e0bffc17 	ldw	r2,-16(fp)
  8013a8:	10c02345 	stb	r3,141(r2)
  if (d->_g50) {
  8013ac:	e0bffc17 	ldw	r2,-16(fp)
  8013b0:	10802343 	ldbu	r2,141(r2)
  8013b4:	10803fcc 	andi	r2,r2,255
  8013b8:	1080201c 	xori	r2,r2,128
  8013bc:	10bfe004 	addi	r2,r2,-128
  8013c0:	10003426 	beq	r2,zero,801494 <logic+0x938>
    d->sleepT = (d->sleepT < (d->URI - d->_Pacemaker_local__region1_URI_x)) ? d->sleepT : (d->URI - d->_Pacemaker_local__region1_URI_x);
  8013c4:	e0bffc17 	ldw	r2,-16(fp)
  8013c8:	14000817 	ldw	r16,32(r2)
  8013cc:	14400917 	ldw	r17,36(r2)
  8013d0:	e0bffc17 	ldw	r2,-16(fp)
  8013d4:	10800517 	ldw	r2,20(r2)
  8013d8:	1009883a 	mov	r4,r2
  8013dc:	0809a000 	call	809a00 <__floatsidf>
  8013e0:	1011883a 	mov	r8,r2
  8013e4:	1813883a 	mov	r9,r3
  8013e8:	e13ffc17 	ldw	r4,-16(fp)
  8013ec:	20800d17 	ldw	r2,52(r4)
  8013f0:	20c00e17 	ldw	r3,56(r4)
  8013f4:	100d883a 	mov	r6,r2
  8013f8:	180f883a 	mov	r7,r3
  8013fc:	4009883a 	mov	r4,r8
  801400:	480b883a 	mov	r5,r9
  801404:	08091040 	call	809104 <__subdf3>
  801408:	1009883a 	mov	r4,r2
  80140c:	180b883a 	mov	r5,r3
  801410:	2005883a 	mov	r2,r4
  801414:	2807883a 	mov	r3,r5
  801418:	100d883a 	mov	r6,r2
  80141c:	180f883a 	mov	r7,r3
  801420:	8009883a 	mov	r4,r16
  801424:	880b883a 	mov	r5,r17
  801428:	08088f80 	call	8088f8 <__ledf2>
  80142c:	1000040e 	bge	r2,zero,801440 <logic+0x8e4>
  801430:	e13ffc17 	ldw	r4,-16(fp)
  801434:	20800817 	ldw	r2,32(r4)
  801438:	20c00917 	ldw	r3,36(r4)
  80143c:	00001206 	br	801488 <logic+0x92c>
  801440:	e0bffc17 	ldw	r2,-16(fp)
  801444:	10800517 	ldw	r2,20(r2)
  801448:	1009883a 	mov	r4,r2
  80144c:	0809a000 	call	809a00 <__floatsidf>
  801450:	1011883a 	mov	r8,r2
  801454:	1813883a 	mov	r9,r3
  801458:	e13ffc17 	ldw	r4,-16(fp)
  80145c:	20800d17 	ldw	r2,52(r4)
  801460:	20c00e17 	ldw	r3,56(r4)
  801464:	100d883a 	mov	r6,r2
  801468:	180f883a 	mov	r7,r3
  80146c:	4009883a 	mov	r4,r8
  801470:	480b883a 	mov	r5,r9
  801474:	08091040 	call	809104 <__subdf3>
  801478:	1009883a 	mov	r4,r2
  80147c:	180b883a 	mov	r5,r3
  801480:	2005883a 	mov	r2,r4
  801484:	2807883a 	mov	r3,r5
  801488:	e13ffc17 	ldw	r4,-16(fp)
  80148c:	20800815 	stw	r2,32(r4)
  801490:	20c00915 	stw	r3,36(r4)
  }
  d->_cg52 = d->_Pacemaker_local__Atrig2 || d->_Pacemaker_local__Atrig3;
  801494:	e0bffc17 	ldw	r2,-16(fp)
  801498:	108018c3 	ldbu	r2,99(r2)
  80149c:	10803fcc 	andi	r2,r2,255
  8014a0:	1080201c 	xori	r2,r2,128
  8014a4:	10bfe004 	addi	r2,r2,-128
  8014a8:	1000061e 	bne	r2,zero,8014c4 <logic+0x968>
  8014ac:	e0bffc17 	ldw	r2,-16(fp)
  8014b0:	10801903 	ldbu	r2,100(r2)
  8014b4:	10803fcc 	andi	r2,r2,255
  8014b8:	1080201c 	xori	r2,r2,128
  8014bc:	10bfe004 	addi	r2,r2,-128
  8014c0:	10000226 	beq	r2,zero,8014cc <logic+0x970>
  8014c4:	00800044 	movi	r2,1
  8014c8:	00000106 	br	8014d0 <logic+0x974>
  8014cc:	0005883a 	mov	r2,zero
  8014d0:	1007883a 	mov	r3,r2
  8014d4:	e0bffc17 	ldw	r2,-16(fp)
  8014d8:	10c04505 	stb	r3,276(r2)
  d->_g51 = d->_g56 && !d->_cg51;
  8014dc:	e0bffc17 	ldw	r2,-16(fp)
  8014e0:	10802483 	ldbu	r2,146(r2)
  8014e4:	10803fcc 	andi	r2,r2,255
  8014e8:	1080201c 	xori	r2,r2,128
  8014ec:	10bfe004 	addi	r2,r2,-128
  8014f0:	10000826 	beq	r2,zero,801514 <logic+0x9b8>
  8014f4:	e0bffc17 	ldw	r2,-16(fp)
  8014f8:	10804543 	ldbu	r2,277(r2)
  8014fc:	10803fcc 	andi	r2,r2,255
  801500:	1080201c 	xori	r2,r2,128
  801504:	10bfe004 	addi	r2,r2,-128
  801508:	1000021e 	bne	r2,zero,801514 <logic+0x9b8>
  80150c:	00800044 	movi	r2,1
  801510:	00000106 	br	801518 <logic+0x9bc>
  801514:	0005883a 	mov	r2,zero
  801518:	1007883a 	mov	r3,r2
  80151c:	e0bffc17 	ldw	r2,-16(fp)
  801520:	10c02385 	stb	r3,142(r2)
  d->_cg54 = d->_Pacemaker_local__Atrig2 || d->_Pacemaker_local__Atrig3;
  801524:	e0bffc17 	ldw	r2,-16(fp)
  801528:	108018c3 	ldbu	r2,99(r2)
  80152c:	10803fcc 	andi	r2,r2,255
  801530:	1080201c 	xori	r2,r2,128
  801534:	10bfe004 	addi	r2,r2,-128
  801538:	1000061e 	bne	r2,zero,801554 <logic+0x9f8>
  80153c:	e0bffc17 	ldw	r2,-16(fp)
  801540:	10801903 	ldbu	r2,100(r2)
  801544:	10803fcc 	andi	r2,r2,255
  801548:	1080201c 	xori	r2,r2,128
  80154c:	10bfe004 	addi	r2,r2,-128
  801550:	10000226 	beq	r2,zero,80155c <logic+0xa00>
  801554:	00800044 	movi	r2,1
  801558:	00000106 	br	801560 <logic+0xa04>
  80155c:	0005883a 	mov	r2,zero
  801560:	1007883a 	mov	r3,r2
  801564:	e0bffc17 	ldw	r2,-16(fp)
  801568:	10c04585 	stb	r3,278(r2)
  d->_g53 = (d->_g50 && d->_cg52) || (d->_g51 && d->_cg54);
  80156c:	e0bffc17 	ldw	r2,-16(fp)
  801570:	10802343 	ldbu	r2,141(r2)
  801574:	10803fcc 	andi	r2,r2,255
  801578:	1080201c 	xori	r2,r2,128
  80157c:	10bfe004 	addi	r2,r2,-128
  801580:	10000626 	beq	r2,zero,80159c <logic+0xa40>
  801584:	e0bffc17 	ldw	r2,-16(fp)
  801588:	10804503 	ldbu	r2,276(r2)
  80158c:	10803fcc 	andi	r2,r2,255
  801590:	1080201c 	xori	r2,r2,128
  801594:	10bfe004 	addi	r2,r2,-128
  801598:	10000c1e 	bne	r2,zero,8015cc <logic+0xa70>
  80159c:	e0bffc17 	ldw	r2,-16(fp)
  8015a0:	10802383 	ldbu	r2,142(r2)
  8015a4:	10803fcc 	andi	r2,r2,255
  8015a8:	1080201c 	xori	r2,r2,128
  8015ac:	10bfe004 	addi	r2,r2,-128
  8015b0:	10000826 	beq	r2,zero,8015d4 <logic+0xa78>
  8015b4:	e0bffc17 	ldw	r2,-16(fp)
  8015b8:	10804583 	ldbu	r2,278(r2)
  8015bc:	10803fcc 	andi	r2,r2,255
  8015c0:	1080201c 	xori	r2,r2,128
  8015c4:	10bfe004 	addi	r2,r2,-128
  8015c8:	10000226 	beq	r2,zero,8015d4 <logic+0xa78>
  8015cc:	00800044 	movi	r2,1
  8015d0:	00000106 	br	8015d8 <logic+0xa7c>
  8015d4:	0005883a 	mov	r2,zero
  8015d8:	1007883a 	mov	r3,r2
  8015dc:	e0bffc17 	ldw	r2,-16(fp)
  8015e0:	10c02405 	stb	r3,144(r2)
  d->_g60 = !d->_g60;
  8015e4:	e0bffc17 	ldw	r2,-16(fp)
  8015e8:	10802503 	ldbu	r2,148(r2)
  8015ec:	10803fcc 	andi	r2,r2,255
  8015f0:	1080201c 	xori	r2,r2,128
  8015f4:	10bfe004 	addi	r2,r2,-128
  8015f8:	1005003a 	cmpeq	r2,r2,zero
  8015fc:	1007883a 	mov	r3,r2
  801600:	e0bffc17 	ldw	r2,-16(fp)
  801604:	10c02505 	stb	r3,148(r2)
  d->_g64 = d->_g61 || d->_g64;
  801608:	e0bffc17 	ldw	r2,-16(fp)
  80160c:	10802543 	ldbu	r2,149(r2)
  801610:	10803fcc 	andi	r2,r2,255
  801614:	1080201c 	xori	r2,r2,128
  801618:	10bfe004 	addi	r2,r2,-128
  80161c:	1000061e 	bne	r2,zero,801638 <logic+0xadc>
  801620:	e0bffc17 	ldw	r2,-16(fp)
  801624:	10802603 	ldbu	r2,152(r2)
  801628:	10803fcc 	andi	r2,r2,255
  80162c:	1080201c 	xori	r2,r2,128
  801630:	10bfe004 	addi	r2,r2,-128
  801634:	10000226 	beq	r2,zero,801640 <logic+0xae4>
  801638:	00800044 	movi	r2,1
  80163c:	00000106 	br	801644 <logic+0xae8>
  801640:	0005883a 	mov	r2,zero
  801644:	1007883a 	mov	r3,r2
  801648:	e0bffc17 	ldw	r2,-16(fp)
  80164c:	10c02605 	stb	r3,152(r2)
  d->_g61 = (d->_g42_e1 || d->_g42) && (d->_g53_e2 || d->_g53) && (d->_g60 || d->_g64) && (d->_g42 || d->_g53 || d->_g64);
  801650:	e0bffc17 	ldw	r2,-16(fp)
  801654:	10805603 	ldbu	r2,344(r2)
  801658:	10803fcc 	andi	r2,r2,255
  80165c:	1080201c 	xori	r2,r2,128
  801660:	10bfe004 	addi	r2,r2,-128
  801664:	1000061e 	bne	r2,zero,801680 <logic+0xb24>
  801668:	e0bffc17 	ldw	r2,-16(fp)
  80166c:	10802203 	ldbu	r2,136(r2)
  801670:	10803fcc 	andi	r2,r2,255
  801674:	1080201c 	xori	r2,r2,128
  801678:	10bfe004 	addi	r2,r2,-128
  80167c:	10002c26 	beq	r2,zero,801730 <logic+0xbd4>
  801680:	e0bffc17 	ldw	r2,-16(fp)
  801684:	10805643 	ldbu	r2,345(r2)
  801688:	10803fcc 	andi	r2,r2,255
  80168c:	1080201c 	xori	r2,r2,128
  801690:	10bfe004 	addi	r2,r2,-128
  801694:	1000061e 	bne	r2,zero,8016b0 <logic+0xb54>
  801698:	e0bffc17 	ldw	r2,-16(fp)
  80169c:	10802403 	ldbu	r2,144(r2)
  8016a0:	10803fcc 	andi	r2,r2,255
  8016a4:	1080201c 	xori	r2,r2,128
  8016a8:	10bfe004 	addi	r2,r2,-128
  8016ac:	10002026 	beq	r2,zero,801730 <logic+0xbd4>
  8016b0:	e0bffc17 	ldw	r2,-16(fp)
  8016b4:	10802503 	ldbu	r2,148(r2)
  8016b8:	10803fcc 	andi	r2,r2,255
  8016bc:	1080201c 	xori	r2,r2,128
  8016c0:	10bfe004 	addi	r2,r2,-128
  8016c4:	1000061e 	bne	r2,zero,8016e0 <logic+0xb84>
  8016c8:	e0bffc17 	ldw	r2,-16(fp)
  8016cc:	10802603 	ldbu	r2,152(r2)
  8016d0:	10803fcc 	andi	r2,r2,255
  8016d4:	1080201c 	xori	r2,r2,128
  8016d8:	10bfe004 	addi	r2,r2,-128
  8016dc:	10001426 	beq	r2,zero,801730 <logic+0xbd4>
  8016e0:	e0bffc17 	ldw	r2,-16(fp)
  8016e4:	10802203 	ldbu	r2,136(r2)
  8016e8:	10803fcc 	andi	r2,r2,255
  8016ec:	1080201c 	xori	r2,r2,128
  8016f0:	10bfe004 	addi	r2,r2,-128
  8016f4:	10000c1e 	bne	r2,zero,801728 <logic+0xbcc>
  8016f8:	e0bffc17 	ldw	r2,-16(fp)
  8016fc:	10802403 	ldbu	r2,144(r2)
  801700:	10803fcc 	andi	r2,r2,255
  801704:	1080201c 	xori	r2,r2,128
  801708:	10bfe004 	addi	r2,r2,-128
  80170c:	1000061e 	bne	r2,zero,801728 <logic+0xbcc>
  801710:	e0bffc17 	ldw	r2,-16(fp)
  801714:	10802603 	ldbu	r2,152(r2)
  801718:	10803fcc 	andi	r2,r2,255
  80171c:	1080201c 	xori	r2,r2,128
  801720:	10bfe004 	addi	r2,r2,-128
  801724:	10000226 	beq	r2,zero,801730 <logic+0xbd4>
  801728:	00800044 	movi	r2,1
  80172c:	00000106 	br	801734 <logic+0xbd8>
  801730:	0005883a 	mov	r2,zero
  801734:	1007883a 	mov	r3,r2
  801738:	e0bffc17 	ldw	r2,-16(fp)
  80173c:	10c02545 	stb	r3,149(r2)
  d->_cg65 = d->_Pacemaker_local__Atrig2;
  801740:	e0bffc17 	ldw	r2,-16(fp)
  801744:	10c018c3 	ldbu	r3,99(r2)
  801748:	e0bffc17 	ldw	r2,-16(fp)
  80174c:	10c04285 	stb	r3,266(r2)
  d->_g62 = d->_g61 && d->_cg65;
  801750:	e0bffc17 	ldw	r2,-16(fp)
  801754:	10802543 	ldbu	r2,149(r2)
  801758:	10803fcc 	andi	r2,r2,255
  80175c:	1080201c 	xori	r2,r2,128
  801760:	10bfe004 	addi	r2,r2,-128
  801764:	10000826 	beq	r2,zero,801788 <logic+0xc2c>
  801768:	e0bffc17 	ldw	r2,-16(fp)
  80176c:	10804283 	ldbu	r2,266(r2)
  801770:	10803fcc 	andi	r2,r2,255
  801774:	1080201c 	xori	r2,r2,128
  801778:	10bfe004 	addi	r2,r2,-128
  80177c:	10000226 	beq	r2,zero,801788 <logic+0xc2c>
  801780:	00800044 	movi	r2,1
  801784:	00000106 	br	80178c <logic+0xc30>
  801788:	0005883a 	mov	r2,zero
  80178c:	1007883a 	mov	r3,r2
  801790:	e0bffc17 	ldw	r2,-16(fp)
  801794:	10c02585 	stb	r3,150(r2)
  if (d->_g62) {
  801798:	e0bffc17 	ldw	r2,-16(fp)
  80179c:	10802583 	ldbu	r2,150(r2)
  8017a0:	10803fcc 	andi	r2,r2,255
  8017a4:	1080201c 	xori	r2,r2,128
  8017a8:	10bfe004 	addi	r2,r2,-128
  8017ac:	10000626 	beq	r2,zero,8017c8 <logic+0xc6c>
    d->_Pacemaker_local_URI_timeout |= 1;
  8017b0:	e0bffc17 	ldw	r2,-16(fp)
  8017b4:	10801803 	ldbu	r2,96(r2)
  8017b8:	10800054 	ori	r2,r2,1
  8017bc:	1007883a 	mov	r3,r2
  8017c0:	e0bffc17 	ldw	r2,-16(fp)
  8017c4:	10c01805 	stb	r3,96(r2)
  }
  d->_g53_e2 = d->_pg185;
  8017c8:	e0bffc17 	ldw	r2,-16(fp)
  8017cc:	10c05c03 	ldbu	r3,368(r2)
  8017d0:	e0bffc17 	ldw	r2,-16(fp)
  8017d4:	10c05645 	stb	r3,345(r2)
  if (d->_g53_e2) {
  8017d8:	e0bffc17 	ldw	r2,-16(fp)
  8017dc:	10805643 	ldbu	r2,345(r2)
  8017e0:	10803fcc 	andi	r2,r2,255
  8017e4:	1080201c 	xori	r2,r2,128
  8017e8:	10bfe004 	addi	r2,r2,-128
  8017ec:	10001226 	beq	r2,zero,801838 <logic+0xcdc>
    d->_Pacemaker_local__region4_AVI_x += d->deltaT;
  8017f0:	e13ffc17 	ldw	r4,-16(fp)
  8017f4:	20801317 	ldw	r2,76(r4)
  8017f8:	20c01417 	ldw	r3,80(r4)
  8017fc:	e1bffc17 	ldw	r6,-16(fp)
  801800:	31000617 	ldw	r4,24(r6)
  801804:	31400717 	ldw	r5,28(r6)
  801808:	200d883a 	mov	r6,r4
  80180c:	280f883a 	mov	r7,r5
  801810:	1009883a 	mov	r4,r2
  801814:	180b883a 	mov	r5,r3
  801818:	0807f700 	call	807f70 <__adddf3>
  80181c:	1009883a 	mov	r4,r2
  801820:	180b883a 	mov	r5,r3
  801824:	2005883a 	mov	r2,r4
  801828:	2807883a 	mov	r3,r5
  80182c:	e13ffc17 	ldw	r4,-16(fp)
  801830:	20801315 	stw	r2,76(r4)
  801834:	20c01415 	stw	r3,80(r4)
  }
  d->_g42 = d->_g171 && !d->VS;
  801838:	e0bffc17 	ldw	r2,-16(fp)
  80183c:	10803883 	ldbu	r2,226(r2)
  801840:	10803fcc 	andi	r2,r2,255
  801844:	1080201c 	xori	r2,r2,128
  801848:	10bfe004 	addi	r2,r2,-128
  80184c:	10000826 	beq	r2,zero,801870 <logic+0xd14>
  801850:	e0bffc17 	ldw	r2,-16(fp)
  801854:	10800a43 	ldbu	r2,41(r2)
  801858:	10803fcc 	andi	r2,r2,255
  80185c:	1080201c 	xori	r2,r2,128
  801860:	10bfe004 	addi	r2,r2,-128
  801864:	1000021e 	bne	r2,zero,801870 <logic+0xd14>
  801868:	00800044 	movi	r2,1
  80186c:	00000106 	br	801874 <logic+0xd18>
  801870:	0005883a 	mov	r2,zero
  801874:	1007883a 	mov	r3,r2
  801878:	e0bffc17 	ldw	r2,-16(fp)
  80187c:	10c02205 	stb	r3,136(r2)
  d->_cg174 = d->_Pacemaker_local__region4_AVI_x >= d->AVI && d->_Pacemaker_local_URI_timeout;
  801880:	e0bffc17 	ldw	r2,-16(fp)
  801884:	14001317 	ldw	r16,76(r2)
  801888:	14401417 	ldw	r17,80(r2)
  80188c:	e0bffc17 	ldw	r2,-16(fp)
  801890:	10800017 	ldw	r2,0(r2)
  801894:	1009883a 	mov	r4,r2
  801898:	0809a000 	call	809a00 <__floatsidf>
  80189c:	1009883a 	mov	r4,r2
  8018a0:	180b883a 	mov	r5,r3
  8018a4:	200d883a 	mov	r6,r4
  8018a8:	280f883a 	mov	r7,r5
  8018ac:	8009883a 	mov	r4,r16
  8018b0:	880b883a 	mov	r5,r17
  8018b4:	080881c0 	call	80881c <__gedf2>
  8018b8:	10000816 	blt	r2,zero,8018dc <logic+0xd80>
  8018bc:	e0bffc17 	ldw	r2,-16(fp)
  8018c0:	10801803 	ldbu	r2,96(r2)
  8018c4:	10803fcc 	andi	r2,r2,255
  8018c8:	1080201c 	xori	r2,r2,128
  8018cc:	10bfe004 	addi	r2,r2,-128
  8018d0:	10000226 	beq	r2,zero,8018dc <logic+0xd80>
  8018d4:	00800044 	movi	r2,1
  8018d8:	00000106 	br	8018e0 <logic+0xd84>
  8018dc:	0005883a 	mov	r2,zero
  8018e0:	1007883a 	mov	r3,r2
  8018e4:	e0bffc17 	ldw	r2,-16(fp)
  8018e8:	10c052c5 	stb	r3,331(r2)
  d->_g53 = d->_g42 && d->_cg174;
  8018ec:	e0bffc17 	ldw	r2,-16(fp)
  8018f0:	10802203 	ldbu	r2,136(r2)
  8018f4:	10803fcc 	andi	r2,r2,255
  8018f8:	1080201c 	xori	r2,r2,128
  8018fc:	10bfe004 	addi	r2,r2,-128
  801900:	10000826 	beq	r2,zero,801924 <logic+0xdc8>
  801904:	e0bffc17 	ldw	r2,-16(fp)
  801908:	108052c3 	ldbu	r2,331(r2)
  80190c:	10803fcc 	andi	r2,r2,255
  801910:	1080201c 	xori	r2,r2,128
  801914:	10bfe004 	addi	r2,r2,-128
  801918:	10000226 	beq	r2,zero,801924 <logic+0xdc8>
  80191c:	00800044 	movi	r2,1
  801920:	00000106 	br	801928 <logic+0xdcc>
  801924:	0005883a 	mov	r2,zero
  801928:	1007883a 	mov	r3,r2
  80192c:	e0bffc17 	ldw	r2,-16(fp)
  801930:	10c02405 	stb	r3,144(r2)
  if (d->_g53) {
  801934:	e0bffc17 	ldw	r2,-16(fp)
  801938:	10802403 	ldbu	r2,144(r2)
  80193c:	10803fcc 	andi	r2,r2,255
  801940:	1080201c 	xori	r2,r2,128
  801944:	10bfe004 	addi	r2,r2,-128
  801948:	10000326 	beq	r2,zero,801958 <logic+0xdfc>
    d->_Pacemaker_local__Atrig9 = 1;
  80194c:	e0bffc17 	ldw	r2,-16(fp)
  801950:	00c00044 	movi	r3,1
  801954:	10c01a85 	stb	r3,106(r2)
  }
  d->_g42_e1 = d->_g42 && !d->_cg174;
  801958:	e0bffc17 	ldw	r2,-16(fp)
  80195c:	10802203 	ldbu	r2,136(r2)
  801960:	10803fcc 	andi	r2,r2,255
  801964:	1080201c 	xori	r2,r2,128
  801968:	10bfe004 	addi	r2,r2,-128
  80196c:	10000826 	beq	r2,zero,801990 <logic+0xe34>
  801970:	e0bffc17 	ldw	r2,-16(fp)
  801974:	108052c3 	ldbu	r2,331(r2)
  801978:	10803fcc 	andi	r2,r2,255
  80197c:	1080201c 	xori	r2,r2,128
  801980:	10bfe004 	addi	r2,r2,-128
  801984:	1000021e 	bne	r2,zero,801990 <logic+0xe34>
  801988:	00800044 	movi	r2,1
  80198c:	00000106 	br	801994 <logic+0xe38>
  801990:	0005883a 	mov	r2,zero
  801994:	1007883a 	mov	r3,r2
  801998:	e0bffc17 	ldw	r2,-16(fp)
  80199c:	10c05605 	stb	r3,344(r2)
  d->_cg176 = d->_Pacemaker_local__region4_AVI_x >= d->AVI && !d->_Pacemaker_local_URI_timeout;
  8019a0:	e0bffc17 	ldw	r2,-16(fp)
  8019a4:	14001317 	ldw	r16,76(r2)
  8019a8:	14401417 	ldw	r17,80(r2)
  8019ac:	e0bffc17 	ldw	r2,-16(fp)
  8019b0:	10800017 	ldw	r2,0(r2)
  8019b4:	1009883a 	mov	r4,r2
  8019b8:	0809a000 	call	809a00 <__floatsidf>
  8019bc:	1009883a 	mov	r4,r2
  8019c0:	180b883a 	mov	r5,r3
  8019c4:	200d883a 	mov	r6,r4
  8019c8:	280f883a 	mov	r7,r5
  8019cc:	8009883a 	mov	r4,r16
  8019d0:	880b883a 	mov	r5,r17
  8019d4:	080881c0 	call	80881c <__gedf2>
  8019d8:	10000816 	blt	r2,zero,8019fc <logic+0xea0>
  8019dc:	e0bffc17 	ldw	r2,-16(fp)
  8019e0:	10801803 	ldbu	r2,96(r2)
  8019e4:	10803fcc 	andi	r2,r2,255
  8019e8:	1080201c 	xori	r2,r2,128
  8019ec:	10bfe004 	addi	r2,r2,-128
  8019f0:	1000021e 	bne	r2,zero,8019fc <logic+0xea0>
  8019f4:	00800044 	movi	r2,1
  8019f8:	00000106 	br	801a00 <logic+0xea4>
  8019fc:	0005883a 	mov	r2,zero
  801a00:	1007883a 	mov	r3,r2
  801a04:	e0bffc17 	ldw	r2,-16(fp)
  801a08:	10c05245 	stb	r3,329(r2)
  d->_g62_e3 = d->_g42_e1 && d->_cg176;
  801a0c:	e0bffc17 	ldw	r2,-16(fp)
  801a10:	10805603 	ldbu	r2,344(r2)
  801a14:	10803fcc 	andi	r2,r2,255
  801a18:	1080201c 	xori	r2,r2,128
  801a1c:	10bfe004 	addi	r2,r2,-128
  801a20:	10000826 	beq	r2,zero,801a44 <logic+0xee8>
  801a24:	e0bffc17 	ldw	r2,-16(fp)
  801a28:	10805243 	ldbu	r2,329(r2)
  801a2c:	10803fcc 	andi	r2,r2,255
  801a30:	1080201c 	xori	r2,r2,128
  801a34:	10bfe004 	addi	r2,r2,-128
  801a38:	10000226 	beq	r2,zero,801a44 <logic+0xee8>
  801a3c:	00800044 	movi	r2,1
  801a40:	00000106 	br	801a48 <logic+0xeec>
  801a44:	0005883a 	mov	r2,zero
  801a48:	1007883a 	mov	r3,r2
  801a4c:	e0bffc17 	ldw	r2,-16(fp)
  801a50:	10c05685 	stb	r3,346(r2)
  if (d->_g62_e3) {
  801a54:	e0bffc17 	ldw	r2,-16(fp)
  801a58:	10805683 	ldbu	r2,346(r2)
  801a5c:	10803fcc 	andi	r2,r2,255
  801a60:	1080201c 	xori	r2,r2,128
  801a64:	10bfe004 	addi	r2,r2,-128
  801a68:	10000326 	beq	r2,zero,801a78 <logic+0xf1c>
    d->_Pacemaker_local__Atrig10 = 1;
  801a6c:	e0bffc17 	ldw	r2,-16(fp)
  801a70:	00c00044 	movi	r3,1
  801a74:	10c01ac5 	stb	r3,107(r2)
  }
  d->_g174 = d->_g150 || d->_g156;
  801a78:	e0bffc17 	ldw	r2,-16(fp)
  801a7c:	108034c3 	ldbu	r2,211(r2)
  801a80:	10803fcc 	andi	r2,r2,255
  801a84:	1080201c 	xori	r2,r2,128
  801a88:	10bfe004 	addi	r2,r2,-128
  801a8c:	1000061e 	bne	r2,zero,801aa8 <logic+0xf4c>
  801a90:	e0bffc17 	ldw	r2,-16(fp)
  801a94:	10803603 	ldbu	r2,216(r2)
  801a98:	10803fcc 	andi	r2,r2,255
  801a9c:	1080201c 	xori	r2,r2,128
  801aa0:	10bfe004 	addi	r2,r2,-128
  801aa4:	10000226 	beq	r2,zero,801ab0 <logic+0xf54>
  801aa8:	00800044 	movi	r2,1
  801aac:	00000106 	br	801ab4 <logic+0xf58>
  801ab0:	0005883a 	mov	r2,zero
  801ab4:	1007883a 	mov	r3,r2
  801ab8:	e0bffc17 	ldw	r2,-16(fp)
  801abc:	10c03945 	stb	r3,229(r2)
  d->_cg151 = d->_Pacemaker_local__region4_AVI_x < d->AVI;
  801ac0:	e0bffc17 	ldw	r2,-16(fp)
  801ac4:	14001317 	ldw	r16,76(r2)
  801ac8:	14401417 	ldw	r17,80(r2)
  801acc:	e0bffc17 	ldw	r2,-16(fp)
  801ad0:	10800017 	ldw	r2,0(r2)
  801ad4:	1009883a 	mov	r4,r2
  801ad8:	0809a000 	call	809a00 <__floatsidf>
  801adc:	1009883a 	mov	r4,r2
  801ae0:	180b883a 	mov	r5,r3
  801ae4:	04800044 	movi	r18,1
  801ae8:	200d883a 	mov	r6,r4
  801aec:	280f883a 	mov	r7,r5
  801af0:	8009883a 	mov	r4,r16
  801af4:	880b883a 	mov	r5,r17
  801af8:	08088f80 	call	8088f8 <__ledf2>
  801afc:	10000116 	blt	r2,zero,801b04 <logic+0xfa8>
  801b00:	0025883a 	mov	r18,zero
  801b04:	9007883a 	mov	r3,r18
  801b08:	e0bffc17 	ldw	r2,-16(fp)
  801b0c:	10c05005 	stb	r3,320(r2)
  d->_g156 = d->_g174 && d->_cg151;
  801b10:	e0bffc17 	ldw	r2,-16(fp)
  801b14:	10803943 	ldbu	r2,229(r2)
  801b18:	10803fcc 	andi	r2,r2,255
  801b1c:	1080201c 	xori	r2,r2,128
  801b20:	10bfe004 	addi	r2,r2,-128
  801b24:	10000826 	beq	r2,zero,801b48 <logic+0xfec>
  801b28:	e0bffc17 	ldw	r2,-16(fp)
  801b2c:	10805003 	ldbu	r2,320(r2)
  801b30:	10803fcc 	andi	r2,r2,255
  801b34:	1080201c 	xori	r2,r2,128
  801b38:	10bfe004 	addi	r2,r2,-128
  801b3c:	10000226 	beq	r2,zero,801b48 <logic+0xfec>
  801b40:	00800044 	movi	r2,1
  801b44:	00000106 	br	801b4c <logic+0xff0>
  801b48:	0005883a 	mov	r2,zero
  801b4c:	1007883a 	mov	r3,r2
  801b50:	e0bffc17 	ldw	r2,-16(fp)
  801b54:	10c03605 	stb	r3,216(r2)
  if (d->_g156) {
  801b58:	e0bffc17 	ldw	r2,-16(fp)
  801b5c:	10803603 	ldbu	r2,216(r2)
  801b60:	10803fcc 	andi	r2,r2,255
  801b64:	1080201c 	xori	r2,r2,128
  801b68:	10bfe004 	addi	r2,r2,-128
  801b6c:	10003426 	beq	r2,zero,801c40 <logic+0x10e4>
    d->sleepT = (d->sleepT < (d->AVI - d->_Pacemaker_local__region4_AVI_x)) ? d->sleepT : (d->AVI - d->_Pacemaker_local__region4_AVI_x);
  801b70:	e0bffc17 	ldw	r2,-16(fp)
  801b74:	14000817 	ldw	r16,32(r2)
  801b78:	14400917 	ldw	r17,36(r2)
  801b7c:	e0bffc17 	ldw	r2,-16(fp)
  801b80:	10800017 	ldw	r2,0(r2)
  801b84:	1009883a 	mov	r4,r2
  801b88:	0809a000 	call	809a00 <__floatsidf>
  801b8c:	1011883a 	mov	r8,r2
  801b90:	1813883a 	mov	r9,r3
  801b94:	e13ffc17 	ldw	r4,-16(fp)
  801b98:	20801317 	ldw	r2,76(r4)
  801b9c:	20c01417 	ldw	r3,80(r4)
  801ba0:	100d883a 	mov	r6,r2
  801ba4:	180f883a 	mov	r7,r3
  801ba8:	4009883a 	mov	r4,r8
  801bac:	480b883a 	mov	r5,r9
  801bb0:	08091040 	call	809104 <__subdf3>
  801bb4:	1009883a 	mov	r4,r2
  801bb8:	180b883a 	mov	r5,r3
  801bbc:	2005883a 	mov	r2,r4
  801bc0:	2807883a 	mov	r3,r5
  801bc4:	100d883a 	mov	r6,r2
  801bc8:	180f883a 	mov	r7,r3
  801bcc:	8009883a 	mov	r4,r16
  801bd0:	880b883a 	mov	r5,r17
  801bd4:	08088f80 	call	8088f8 <__ledf2>
  801bd8:	1000040e 	bge	r2,zero,801bec <logic+0x1090>
  801bdc:	e13ffc17 	ldw	r4,-16(fp)
  801be0:	20800817 	ldw	r2,32(r4)
  801be4:	20c00917 	ldw	r3,36(r4)
  801be8:	00001206 	br	801c34 <logic+0x10d8>
  801bec:	e0bffc17 	ldw	r2,-16(fp)
  801bf0:	10800017 	ldw	r2,0(r2)
  801bf4:	1009883a 	mov	r4,r2
  801bf8:	0809a000 	call	809a00 <__floatsidf>
  801bfc:	1011883a 	mov	r8,r2
  801c00:	1813883a 	mov	r9,r3
  801c04:	e13ffc17 	ldw	r4,-16(fp)
  801c08:	20801317 	ldw	r2,76(r4)
  801c0c:	20c01417 	ldw	r3,80(r4)
  801c10:	100d883a 	mov	r6,r2
  801c14:	180f883a 	mov	r7,r3
  801c18:	4009883a 	mov	r4,r8
  801c1c:	480b883a 	mov	r5,r9
  801c20:	08091040 	call	809104 <__subdf3>
  801c24:	1009883a 	mov	r4,r2
  801c28:	180b883a 	mov	r5,r3
  801c2c:	2005883a 	mov	r2,r4
  801c30:	2807883a 	mov	r3,r5
  801c34:	e13ffc17 	ldw	r4,-16(fp)
  801c38:	20800815 	stw	r2,32(r4)
  801c3c:	20c00915 	stw	r3,36(r4)
  }
  d->_cg152 = d->_Pacemaker_local__Atrig8 || d->_Pacemaker_local__Atrig9 || d->_Pacemaker_local__Atrig10;
  801c40:	e0bffc17 	ldw	r2,-16(fp)
  801c44:	10801a43 	ldbu	r2,105(r2)
  801c48:	10803fcc 	andi	r2,r2,255
  801c4c:	1080201c 	xori	r2,r2,128
  801c50:	10bfe004 	addi	r2,r2,-128
  801c54:	10000c1e 	bne	r2,zero,801c88 <logic+0x112c>
  801c58:	e0bffc17 	ldw	r2,-16(fp)
  801c5c:	10801a83 	ldbu	r2,106(r2)
  801c60:	10803fcc 	andi	r2,r2,255
  801c64:	1080201c 	xori	r2,r2,128
  801c68:	10bfe004 	addi	r2,r2,-128
  801c6c:	1000061e 	bne	r2,zero,801c88 <logic+0x112c>
  801c70:	e0bffc17 	ldw	r2,-16(fp)
  801c74:	10801ac3 	ldbu	r2,107(r2)
  801c78:	10803fcc 	andi	r2,r2,255
  801c7c:	1080201c 	xori	r2,r2,128
  801c80:	10bfe004 	addi	r2,r2,-128
  801c84:	10000226 	beq	r2,zero,801c90 <logic+0x1134>
  801c88:	00800044 	movi	r2,1
  801c8c:	00000106 	br	801c94 <logic+0x1138>
  801c90:	0005883a 	mov	r2,zero
  801c94:	1007883a 	mov	r3,r2
  801c98:	e0bffc17 	ldw	r2,-16(fp)
  801c9c:	10c04fc5 	stb	r3,319(r2)
  d->_g150 = d->_g174 && !d->_cg151;
  801ca0:	e0bffc17 	ldw	r2,-16(fp)
  801ca4:	10803943 	ldbu	r2,229(r2)
  801ca8:	10803fcc 	andi	r2,r2,255
  801cac:	1080201c 	xori	r2,r2,128
  801cb0:	10bfe004 	addi	r2,r2,-128
  801cb4:	10000826 	beq	r2,zero,801cd8 <logic+0x117c>
  801cb8:	e0bffc17 	ldw	r2,-16(fp)
  801cbc:	10805003 	ldbu	r2,320(r2)
  801cc0:	10803fcc 	andi	r2,r2,255
  801cc4:	1080201c 	xori	r2,r2,128
  801cc8:	10bfe004 	addi	r2,r2,-128
  801ccc:	1000021e 	bne	r2,zero,801cd8 <logic+0x117c>
  801cd0:	00800044 	movi	r2,1
  801cd4:	00000106 	br	801cdc <logic+0x1180>
  801cd8:	0005883a 	mov	r2,zero
  801cdc:	1007883a 	mov	r3,r2
  801ce0:	e0bffc17 	ldw	r2,-16(fp)
  801ce4:	10c034c5 	stb	r3,211(r2)
  d->_cg154 = d->_Pacemaker_local__Atrig8 || d->_Pacemaker_local__Atrig9 || d->_Pacemaker_local__Atrig10;
  801ce8:	e0bffc17 	ldw	r2,-16(fp)
  801cec:	10801a43 	ldbu	r2,105(r2)
  801cf0:	10803fcc 	andi	r2,r2,255
  801cf4:	1080201c 	xori	r2,r2,128
  801cf8:	10bfe004 	addi	r2,r2,-128
  801cfc:	10000c1e 	bne	r2,zero,801d30 <logic+0x11d4>
  801d00:	e0bffc17 	ldw	r2,-16(fp)
  801d04:	10801a83 	ldbu	r2,106(r2)
  801d08:	10803fcc 	andi	r2,r2,255
  801d0c:	1080201c 	xori	r2,r2,128
  801d10:	10bfe004 	addi	r2,r2,-128
  801d14:	1000061e 	bne	r2,zero,801d30 <logic+0x11d4>
  801d18:	e0bffc17 	ldw	r2,-16(fp)
  801d1c:	10801ac3 	ldbu	r2,107(r2)
  801d20:	10803fcc 	andi	r2,r2,255
  801d24:	1080201c 	xori	r2,r2,128
  801d28:	10bfe004 	addi	r2,r2,-128
  801d2c:	10000226 	beq	r2,zero,801d38 <logic+0x11dc>
  801d30:	00800044 	movi	r2,1
  801d34:	00000106 	br	801d3c <logic+0x11e0>
  801d38:	0005883a 	mov	r2,zero
  801d3c:	1007883a 	mov	r3,r2
  801d40:	e0bffc17 	ldw	r2,-16(fp)
  801d44:	10c05045 	stb	r3,321(r2)
  d->_g151 = (d->_g156 && d->_cg152) || (d->_g150 && d->_cg154);
  801d48:	e0bffc17 	ldw	r2,-16(fp)
  801d4c:	10803603 	ldbu	r2,216(r2)
  801d50:	10803fcc 	andi	r2,r2,255
  801d54:	1080201c 	xori	r2,r2,128
  801d58:	10bfe004 	addi	r2,r2,-128
  801d5c:	10000626 	beq	r2,zero,801d78 <logic+0x121c>
  801d60:	e0bffc17 	ldw	r2,-16(fp)
  801d64:	10804fc3 	ldbu	r2,319(r2)
  801d68:	10803fcc 	andi	r2,r2,255
  801d6c:	1080201c 	xori	r2,r2,128
  801d70:	10bfe004 	addi	r2,r2,-128
  801d74:	10000c1e 	bne	r2,zero,801da8 <logic+0x124c>
  801d78:	e0bffc17 	ldw	r2,-16(fp)
  801d7c:	108034c3 	ldbu	r2,211(r2)
  801d80:	10803fcc 	andi	r2,r2,255
  801d84:	1080201c 	xori	r2,r2,128
  801d88:	10bfe004 	addi	r2,r2,-128
  801d8c:	10000826 	beq	r2,zero,801db0 <logic+0x1254>
  801d90:	e0bffc17 	ldw	r2,-16(fp)
  801d94:	10805043 	ldbu	r2,321(r2)
  801d98:	10803fcc 	andi	r2,r2,255
  801d9c:	1080201c 	xori	r2,r2,128
  801da0:	10bfe004 	addi	r2,r2,-128
  801da4:	10000226 	beq	r2,zero,801db0 <logic+0x1254>
  801da8:	00800044 	movi	r2,1
  801dac:	00000106 	br	801db4 <logic+0x1258>
  801db0:	0005883a 	mov	r2,zero
  801db4:	1007883a 	mov	r3,r2
  801db8:	e0bffc17 	ldw	r2,-16(fp)
  801dbc:	10c03505 	stb	r3,212(r2)
  d->_g167 = d->_pg154;
  801dc0:	e0bffc17 	ldw	r2,-16(fp)
  801dc4:	10c05c43 	ldbu	r3,369(r2)
  801dc8:	e0bffc17 	ldw	r2,-16(fp)
  801dcc:	10c03805 	stb	r3,224(r2)
  d->_g161 = d->_pg148;
  801dd0:	e0bffc17 	ldw	r2,-16(fp)
  801dd4:	10c05c83 	ldbu	r3,370(r2)
  801dd8:	e0bffc17 	ldw	r2,-16(fp)
  801ddc:	10c036c5 	stb	r3,219(r2)
  d->_g164_e2 = !(d->_g167 || d->_g161);
  801de0:	e0bffc17 	ldw	r2,-16(fp)
  801de4:	10803803 	ldbu	r2,224(r2)
  801de8:	10803fcc 	andi	r2,r2,255
  801dec:	1080201c 	xori	r2,r2,128
  801df0:	10bfe004 	addi	r2,r2,-128
  801df4:	1000081e 	bne	r2,zero,801e18 <logic+0x12bc>
  801df8:	e0bffc17 	ldw	r2,-16(fp)
  801dfc:	108036c3 	ldbu	r2,219(r2)
  801e00:	10803fcc 	andi	r2,r2,255
  801e04:	1080201c 	xori	r2,r2,128
  801e08:	10bfe004 	addi	r2,r2,-128
  801e0c:	1000021e 	bne	r2,zero,801e18 <logic+0x12bc>
  801e10:	00800044 	movi	r2,1
  801e14:	00000106 	br	801e1c <logic+0x12c0>
  801e18:	0005883a 	mov	r2,zero
  801e1c:	1007883a 	mov	r3,r2
  801e20:	e0bffc17 	ldw	r2,-16(fp)
  801e24:	10c05885 	stb	r3,354(r2)
  d->_g167 = d->_g161 || d->_g167;
  801e28:	e0bffc17 	ldw	r2,-16(fp)
  801e2c:	108036c3 	ldbu	r2,219(r2)
  801e30:	10803fcc 	andi	r2,r2,255
  801e34:	1080201c 	xori	r2,r2,128
  801e38:	10bfe004 	addi	r2,r2,-128
  801e3c:	1000061e 	bne	r2,zero,801e58 <logic+0x12fc>
  801e40:	e0bffc17 	ldw	r2,-16(fp)
  801e44:	10803803 	ldbu	r2,224(r2)
  801e48:	10803fcc 	andi	r2,r2,255
  801e4c:	1080201c 	xori	r2,r2,128
  801e50:	10bfe004 	addi	r2,r2,-128
  801e54:	10000226 	beq	r2,zero,801e60 <logic+0x1304>
  801e58:	00800044 	movi	r2,1
  801e5c:	00000106 	br	801e64 <logic+0x1308>
  801e60:	0005883a 	mov	r2,zero
  801e64:	1007883a 	mov	r3,r2
  801e68:	e0bffc17 	ldw	r2,-16(fp)
  801e6c:	10c03805 	stb	r3,224(r2)
  d->_cg162 = d->_Pacemaker_local__region4_AVI_x < d->AVI;
  801e70:	e0bffc17 	ldw	r2,-16(fp)
  801e74:	14001317 	ldw	r16,76(r2)
  801e78:	14401417 	ldw	r17,80(r2)
  801e7c:	e0bffc17 	ldw	r2,-16(fp)
  801e80:	10800017 	ldw	r2,0(r2)
  801e84:	1009883a 	mov	r4,r2
  801e88:	0809a000 	call	809a00 <__floatsidf>
  801e8c:	1009883a 	mov	r4,r2
  801e90:	180b883a 	mov	r5,r3
  801e94:	04800044 	movi	r18,1
  801e98:	200d883a 	mov	r6,r4
  801e9c:	280f883a 	mov	r7,r5
  801ea0:	8009883a 	mov	r4,r16
  801ea4:	880b883a 	mov	r5,r17
  801ea8:	08088f80 	call	8088f8 <__ledf2>
  801eac:	10000116 	blt	r2,zero,801eb4 <logic+0x1358>
  801eb0:	0025883a 	mov	r18,zero
  801eb4:	9007883a 	mov	r3,r18
  801eb8:	e0bffc17 	ldw	r2,-16(fp)
  801ebc:	10c05185 	stb	r3,326(r2)
  d->_g161 = d->_g167 && d->_cg162;
  801ec0:	e0bffc17 	ldw	r2,-16(fp)
  801ec4:	10803803 	ldbu	r2,224(r2)
  801ec8:	10803fcc 	andi	r2,r2,255
  801ecc:	1080201c 	xori	r2,r2,128
  801ed0:	10bfe004 	addi	r2,r2,-128
  801ed4:	10000826 	beq	r2,zero,801ef8 <logic+0x139c>
  801ed8:	e0bffc17 	ldw	r2,-16(fp)
  801edc:	10805183 	ldbu	r2,326(r2)
  801ee0:	10803fcc 	andi	r2,r2,255
  801ee4:	1080201c 	xori	r2,r2,128
  801ee8:	10bfe004 	addi	r2,r2,-128
  801eec:	10000226 	beq	r2,zero,801ef8 <logic+0x139c>
  801ef0:	00800044 	movi	r2,1
  801ef4:	00000106 	br	801efc <logic+0x13a0>
  801ef8:	0005883a 	mov	r2,zero
  801efc:	1007883a 	mov	r3,r2
  801f00:	e0bffc17 	ldw	r2,-16(fp)
  801f04:	10c036c5 	stb	r3,219(r2)
  if (d->_g161) {
  801f08:	e0bffc17 	ldw	r2,-16(fp)
  801f0c:	108036c3 	ldbu	r2,219(r2)
  801f10:	10803fcc 	andi	r2,r2,255
  801f14:	1080201c 	xori	r2,r2,128
  801f18:	10bfe004 	addi	r2,r2,-128
  801f1c:	10003426 	beq	r2,zero,801ff0 <logic+0x1494>
    d->sleepT = (d->sleepT < (d->AVI - d->_Pacemaker_local__region4_AVI_x)) ? d->sleepT : (d->AVI - d->_Pacemaker_local__region4_AVI_x);
  801f20:	e0bffc17 	ldw	r2,-16(fp)
  801f24:	14000817 	ldw	r16,32(r2)
  801f28:	14400917 	ldw	r17,36(r2)
  801f2c:	e0bffc17 	ldw	r2,-16(fp)
  801f30:	10800017 	ldw	r2,0(r2)
  801f34:	1009883a 	mov	r4,r2
  801f38:	0809a000 	call	809a00 <__floatsidf>
  801f3c:	1011883a 	mov	r8,r2
  801f40:	1813883a 	mov	r9,r3
  801f44:	e13ffc17 	ldw	r4,-16(fp)
  801f48:	20801317 	ldw	r2,76(r4)
  801f4c:	20c01417 	ldw	r3,80(r4)
  801f50:	100d883a 	mov	r6,r2
  801f54:	180f883a 	mov	r7,r3
  801f58:	4009883a 	mov	r4,r8
  801f5c:	480b883a 	mov	r5,r9
  801f60:	08091040 	call	809104 <__subdf3>
  801f64:	1009883a 	mov	r4,r2
  801f68:	180b883a 	mov	r5,r3
  801f6c:	2005883a 	mov	r2,r4
  801f70:	2807883a 	mov	r3,r5
  801f74:	100d883a 	mov	r6,r2
  801f78:	180f883a 	mov	r7,r3
  801f7c:	8009883a 	mov	r4,r16
  801f80:	880b883a 	mov	r5,r17
  801f84:	08088f80 	call	8088f8 <__ledf2>
  801f88:	1000040e 	bge	r2,zero,801f9c <logic+0x1440>
  801f8c:	e13ffc17 	ldw	r4,-16(fp)
  801f90:	20800817 	ldw	r2,32(r4)
  801f94:	20c00917 	ldw	r3,36(r4)
  801f98:	00001206 	br	801fe4 <logic+0x1488>
  801f9c:	e0bffc17 	ldw	r2,-16(fp)
  801fa0:	10800017 	ldw	r2,0(r2)
  801fa4:	1009883a 	mov	r4,r2
  801fa8:	0809a000 	call	809a00 <__floatsidf>
  801fac:	1011883a 	mov	r8,r2
  801fb0:	1813883a 	mov	r9,r3
  801fb4:	e13ffc17 	ldw	r4,-16(fp)
  801fb8:	20801317 	ldw	r2,76(r4)
  801fbc:	20c01417 	ldw	r3,80(r4)
  801fc0:	100d883a 	mov	r6,r2
  801fc4:	180f883a 	mov	r7,r3
  801fc8:	4009883a 	mov	r4,r8
  801fcc:	480b883a 	mov	r5,r9
  801fd0:	08091040 	call	809104 <__subdf3>
  801fd4:	1009883a 	mov	r4,r2
  801fd8:	180b883a 	mov	r5,r3
  801fdc:	2005883a 	mov	r2,r4
  801fe0:	2807883a 	mov	r3,r5
  801fe4:	e13ffc17 	ldw	r4,-16(fp)
  801fe8:	20800815 	stw	r2,32(r4)
  801fec:	20c00915 	stw	r3,36(r4)
  }
  d->_cg163 = d->_Pacemaker_local__Atrig8 || d->_Pacemaker_local__Atrig9 || d->_Pacemaker_local__Atrig10;
  801ff0:	e0bffc17 	ldw	r2,-16(fp)
  801ff4:	10801a43 	ldbu	r2,105(r2)
  801ff8:	10803fcc 	andi	r2,r2,255
  801ffc:	1080201c 	xori	r2,r2,128
  802000:	10bfe004 	addi	r2,r2,-128
  802004:	10000c1e 	bne	r2,zero,802038 <logic+0x14dc>
  802008:	e0bffc17 	ldw	r2,-16(fp)
  80200c:	10801a83 	ldbu	r2,106(r2)
  802010:	10803fcc 	andi	r2,r2,255
  802014:	1080201c 	xori	r2,r2,128
  802018:	10bfe004 	addi	r2,r2,-128
  80201c:	1000061e 	bne	r2,zero,802038 <logic+0x14dc>
  802020:	e0bffc17 	ldw	r2,-16(fp)
  802024:	10801ac3 	ldbu	r2,107(r2)
  802028:	10803fcc 	andi	r2,r2,255
  80202c:	1080201c 	xori	r2,r2,128
  802030:	10bfe004 	addi	r2,r2,-128
  802034:	10000226 	beq	r2,zero,802040 <logic+0x14e4>
  802038:	00800044 	movi	r2,1
  80203c:	00000106 	br	802044 <logic+0x14e8>
  802040:	0005883a 	mov	r2,zero
  802044:	1007883a 	mov	r3,r2
  802048:	e0bffc17 	ldw	r2,-16(fp)
  80204c:	10c05145 	stb	r3,325(r2)
  d->_g162 = d->_g167 && !d->_cg162;
  802050:	e0bffc17 	ldw	r2,-16(fp)
  802054:	10803803 	ldbu	r2,224(r2)
  802058:	10803fcc 	andi	r2,r2,255
  80205c:	1080201c 	xori	r2,r2,128
  802060:	10bfe004 	addi	r2,r2,-128
  802064:	10000826 	beq	r2,zero,802088 <logic+0x152c>
  802068:	e0bffc17 	ldw	r2,-16(fp)
  80206c:	10805183 	ldbu	r2,326(r2)
  802070:	10803fcc 	andi	r2,r2,255
  802074:	1080201c 	xori	r2,r2,128
  802078:	10bfe004 	addi	r2,r2,-128
  80207c:	1000021e 	bne	r2,zero,802088 <logic+0x152c>
  802080:	00800044 	movi	r2,1
  802084:	00000106 	br	80208c <logic+0x1530>
  802088:	0005883a 	mov	r2,zero
  80208c:	1007883a 	mov	r3,r2
  802090:	e0bffc17 	ldw	r2,-16(fp)
  802094:	10c03705 	stb	r3,220(r2)
  d->_cg165 = d->_Pacemaker_local__Atrig8 || d->_Pacemaker_local__Atrig9 || d->_Pacemaker_local__Atrig10;
  802098:	e0bffc17 	ldw	r2,-16(fp)
  80209c:	10801a43 	ldbu	r2,105(r2)
  8020a0:	10803fcc 	andi	r2,r2,255
  8020a4:	1080201c 	xori	r2,r2,128
  8020a8:	10bfe004 	addi	r2,r2,-128
  8020ac:	10000c1e 	bne	r2,zero,8020e0 <logic+0x1584>
  8020b0:	e0bffc17 	ldw	r2,-16(fp)
  8020b4:	10801a83 	ldbu	r2,106(r2)
  8020b8:	10803fcc 	andi	r2,r2,255
  8020bc:	1080201c 	xori	r2,r2,128
  8020c0:	10bfe004 	addi	r2,r2,-128
  8020c4:	1000061e 	bne	r2,zero,8020e0 <logic+0x1584>
  8020c8:	e0bffc17 	ldw	r2,-16(fp)
  8020cc:	10801ac3 	ldbu	r2,107(r2)
  8020d0:	10803fcc 	andi	r2,r2,255
  8020d4:	1080201c 	xori	r2,r2,128
  8020d8:	10bfe004 	addi	r2,r2,-128
  8020dc:	10000226 	beq	r2,zero,8020e8 <logic+0x158c>
  8020e0:	00800044 	movi	r2,1
  8020e4:	00000106 	br	8020ec <logic+0x1590>
  8020e8:	0005883a 	mov	r2,zero
  8020ec:	1007883a 	mov	r3,r2
  8020f0:	e0bffc17 	ldw	r2,-16(fp)
  8020f4:	10c051c5 	stb	r3,327(r2)
  d->_g164 = (d->_g161 && d->_cg163) || (d->_g162 && d->_cg165);
  8020f8:	e0bffc17 	ldw	r2,-16(fp)
  8020fc:	108036c3 	ldbu	r2,219(r2)
  802100:	10803fcc 	andi	r2,r2,255
  802104:	1080201c 	xori	r2,r2,128
  802108:	10bfe004 	addi	r2,r2,-128
  80210c:	10000626 	beq	r2,zero,802128 <logic+0x15cc>
  802110:	e0bffc17 	ldw	r2,-16(fp)
  802114:	10805143 	ldbu	r2,325(r2)
  802118:	10803fcc 	andi	r2,r2,255
  80211c:	1080201c 	xori	r2,r2,128
  802120:	10bfe004 	addi	r2,r2,-128
  802124:	10000c1e 	bne	r2,zero,802158 <logic+0x15fc>
  802128:	e0bffc17 	ldw	r2,-16(fp)
  80212c:	10803703 	ldbu	r2,220(r2)
  802130:	10803fcc 	andi	r2,r2,255
  802134:	1080201c 	xori	r2,r2,128
  802138:	10bfe004 	addi	r2,r2,-128
  80213c:	10000826 	beq	r2,zero,802160 <logic+0x1604>
  802140:	e0bffc17 	ldw	r2,-16(fp)
  802144:	108051c3 	ldbu	r2,327(r2)
  802148:	10803fcc 	andi	r2,r2,255
  80214c:	1080201c 	xori	r2,r2,128
  802150:	10bfe004 	addi	r2,r2,-128
  802154:	10000226 	beq	r2,zero,802160 <logic+0x1604>
  802158:	00800044 	movi	r2,1
  80215c:	00000106 	br	802164 <logic+0x1608>
  802160:	0005883a 	mov	r2,zero
  802164:	1007883a 	mov	r3,r2
  802168:	e0bffc17 	ldw	r2,-16(fp)
  80216c:	10c03785 	stb	r3,222(r2)
  d->_g171 = !d->_g171;
  802170:	e0bffc17 	ldw	r2,-16(fp)
  802174:	10803883 	ldbu	r2,226(r2)
  802178:	10803fcc 	andi	r2,r2,255
  80217c:	1080201c 	xori	r2,r2,128
  802180:	10bfe004 	addi	r2,r2,-128
  802184:	1005003a 	cmpeq	r2,r2,zero
  802188:	1007883a 	mov	r3,r2
  80218c:	e0bffc17 	ldw	r2,-16(fp)
  802190:	10c03885 	stb	r3,226(r2)
  d->_g175 = d->_g172 || d->_g53 || d->_g62_e3;
  802194:	e0bffc17 	ldw	r2,-16(fp)
  802198:	108038c3 	ldbu	r2,227(r2)
  80219c:	10803fcc 	andi	r2,r2,255
  8021a0:	1080201c 	xori	r2,r2,128
  8021a4:	10bfe004 	addi	r2,r2,-128
  8021a8:	10000c1e 	bne	r2,zero,8021dc <logic+0x1680>
  8021ac:	e0bffc17 	ldw	r2,-16(fp)
  8021b0:	10802403 	ldbu	r2,144(r2)
  8021b4:	10803fcc 	andi	r2,r2,255
  8021b8:	1080201c 	xori	r2,r2,128
  8021bc:	10bfe004 	addi	r2,r2,-128
  8021c0:	1000061e 	bne	r2,zero,8021dc <logic+0x1680>
  8021c4:	e0bffc17 	ldw	r2,-16(fp)
  8021c8:	10805683 	ldbu	r2,346(r2)
  8021cc:	10803fcc 	andi	r2,r2,255
  8021d0:	1080201c 	xori	r2,r2,128
  8021d4:	10bfe004 	addi	r2,r2,-128
  8021d8:	10000226 	beq	r2,zero,8021e4 <logic+0x1688>
  8021dc:	00800044 	movi	r2,1
  8021e0:	00000106 	br	8021e8 <logic+0x168c>
  8021e4:	0005883a 	mov	r2,zero
  8021e8:	1007883a 	mov	r3,r2
  8021ec:	e0bffc17 	ldw	r2,-16(fp)
  8021f0:	10c03985 	stb	r3,230(r2)
  d->_g172 = (d->_g153_e1 || d->_g151) && (d->_g164_e2 || d->_g164) && (d->_g171 || d->_g175) && (d->_g151 || d->_g164 || d->_g175);
  8021f4:	e0bffc17 	ldw	r2,-16(fp)
  8021f8:	10805843 	ldbu	r2,353(r2)
  8021fc:	10803fcc 	andi	r2,r2,255
  802200:	1080201c 	xori	r2,r2,128
  802204:	10bfe004 	addi	r2,r2,-128
  802208:	1000061e 	bne	r2,zero,802224 <logic+0x16c8>
  80220c:	e0bffc17 	ldw	r2,-16(fp)
  802210:	10803503 	ldbu	r2,212(r2)
  802214:	10803fcc 	andi	r2,r2,255
  802218:	1080201c 	xori	r2,r2,128
  80221c:	10bfe004 	addi	r2,r2,-128
  802220:	10002c26 	beq	r2,zero,8022d4 <logic+0x1778>
  802224:	e0bffc17 	ldw	r2,-16(fp)
  802228:	10805883 	ldbu	r2,354(r2)
  80222c:	10803fcc 	andi	r2,r2,255
  802230:	1080201c 	xori	r2,r2,128
  802234:	10bfe004 	addi	r2,r2,-128
  802238:	1000061e 	bne	r2,zero,802254 <logic+0x16f8>
  80223c:	e0bffc17 	ldw	r2,-16(fp)
  802240:	10803783 	ldbu	r2,222(r2)
  802244:	10803fcc 	andi	r2,r2,255
  802248:	1080201c 	xori	r2,r2,128
  80224c:	10bfe004 	addi	r2,r2,-128
  802250:	10002026 	beq	r2,zero,8022d4 <logic+0x1778>
  802254:	e0bffc17 	ldw	r2,-16(fp)
  802258:	10803883 	ldbu	r2,226(r2)
  80225c:	10803fcc 	andi	r2,r2,255
  802260:	1080201c 	xori	r2,r2,128
  802264:	10bfe004 	addi	r2,r2,-128
  802268:	1000061e 	bne	r2,zero,802284 <logic+0x1728>
  80226c:	e0bffc17 	ldw	r2,-16(fp)
  802270:	10803983 	ldbu	r2,230(r2)
  802274:	10803fcc 	andi	r2,r2,255
  802278:	1080201c 	xori	r2,r2,128
  80227c:	10bfe004 	addi	r2,r2,-128
  802280:	10001426 	beq	r2,zero,8022d4 <logic+0x1778>
  802284:	e0bffc17 	ldw	r2,-16(fp)
  802288:	10803503 	ldbu	r2,212(r2)
  80228c:	10803fcc 	andi	r2,r2,255
  802290:	1080201c 	xori	r2,r2,128
  802294:	10bfe004 	addi	r2,r2,-128
  802298:	10000c1e 	bne	r2,zero,8022cc <logic+0x1770>
  80229c:	e0bffc17 	ldw	r2,-16(fp)
  8022a0:	10803783 	ldbu	r2,222(r2)
  8022a4:	10803fcc 	andi	r2,r2,255
  8022a8:	1080201c 	xori	r2,r2,128
  8022ac:	10bfe004 	addi	r2,r2,-128
  8022b0:	1000061e 	bne	r2,zero,8022cc <logic+0x1770>
  8022b4:	e0bffc17 	ldw	r2,-16(fp)
  8022b8:	10803983 	ldbu	r2,230(r2)
  8022bc:	10803fcc 	andi	r2,r2,255
  8022c0:	1080201c 	xori	r2,r2,128
  8022c4:	10bfe004 	addi	r2,r2,-128
  8022c8:	10000226 	beq	r2,zero,8022d4 <logic+0x1778>
  8022cc:	00800044 	movi	r2,1
  8022d0:	00000106 	br	8022d8 <logic+0x177c>
  8022d4:	0005883a 	mov	r2,zero
  8022d8:	1007883a 	mov	r3,r2
  8022dc:	e0bffc17 	ldw	r2,-16(fp)
  8022e0:	10c038c5 	stb	r3,227(r2)
  d->_cg178 = d->_Pacemaker_local__Atrig8;
  8022e4:	e0bffc17 	ldw	r2,-16(fp)
  8022e8:	10c01a43 	ldbu	r3,105(r2)
  8022ec:	e0bffc17 	ldw	r2,-16(fp)
  8022f0:	10c04e85 	stb	r3,314(r2)
  d->_g177 = d->_g172 && !d->_cg178;
  8022f4:	e0bffc17 	ldw	r2,-16(fp)
  8022f8:	108038c3 	ldbu	r2,227(r2)
  8022fc:	10803fcc 	andi	r2,r2,255
  802300:	1080201c 	xori	r2,r2,128
  802304:	10bfe004 	addi	r2,r2,-128
  802308:	10000826 	beq	r2,zero,80232c <logic+0x17d0>
  80230c:	e0bffc17 	ldw	r2,-16(fp)
  802310:	10804e83 	ldbu	r2,314(r2)
  802314:	10803fcc 	andi	r2,r2,255
  802318:	1080201c 	xori	r2,r2,128
  80231c:	10bfe004 	addi	r2,r2,-128
  802320:	1000021e 	bne	r2,zero,80232c <logic+0x17d0>
  802324:	00800044 	movi	r2,1
  802328:	00000106 	br	802330 <logic+0x17d4>
  80232c:	0005883a 	mov	r2,zero
  802330:	1007883a 	mov	r3,r2
  802334:	e0bffc17 	ldw	r2,-16(fp)
  802338:	10c03a05 	stb	r3,232(r2)
  d->_cg179 = d->_Pacemaker_local__Atrig9;
  80233c:	e0bffc17 	ldw	r2,-16(fp)
  802340:	10c01a83 	ldbu	r3,106(r2)
  802344:	e0bffc17 	ldw	r2,-16(fp)
  802348:	10c04f05 	stb	r3,316(r2)
  d->_g164_e2 = d->_g177 && !d->_cg179;
  80234c:	e0bffc17 	ldw	r2,-16(fp)
  802350:	10803a03 	ldbu	r2,232(r2)
  802354:	10803fcc 	andi	r2,r2,255
  802358:	1080201c 	xori	r2,r2,128
  80235c:	10bfe004 	addi	r2,r2,-128
  802360:	10000826 	beq	r2,zero,802384 <logic+0x1828>
  802364:	e0bffc17 	ldw	r2,-16(fp)
  802368:	10804f03 	ldbu	r2,316(r2)
  80236c:	10803fcc 	andi	r2,r2,255
  802370:	1080201c 	xori	r2,r2,128
  802374:	10bfe004 	addi	r2,r2,-128
  802378:	1000021e 	bne	r2,zero,802384 <logic+0x1828>
  80237c:	00800044 	movi	r2,1
  802380:	00000106 	br	802388 <logic+0x182c>
  802384:	0005883a 	mov	r2,zero
  802388:	1007883a 	mov	r3,r2
  80238c:	e0bffc17 	ldw	r2,-16(fp)
  802390:	10c05885 	stb	r3,354(r2)
  if (d->_g164_e2) {
  802394:	e0bffc17 	ldw	r2,-16(fp)
  802398:	10805883 	ldbu	r2,354(r2)
  80239c:	10803fcc 	andi	r2,r2,255
  8023a0:	1080201c 	xori	r2,r2,128
  8023a4:	10bfe004 	addi	r2,r2,-128
  8023a8:	10000626 	beq	r2,zero,8023c4 <logic+0x1868>
    d->_Pacemaker_local_iVP |= 1;
  8023ac:	e0bffc17 	ldw	r2,-16(fp)
  8023b0:	10801743 	ldbu	r2,93(r2)
  8023b4:	10800054 	ori	r2,r2,1
  8023b8:	1007883a 	mov	r3,r2
  8023bc:	e0bffc17 	ldw	r2,-16(fp)
  8023c0:	10c01745 	stb	r3,93(r2)
  }
  d->_g164 = d->_pg153;
  8023c4:	e0bffc17 	ldw	r2,-16(fp)
  8023c8:	10c05cc3 	ldbu	r3,371(r2)
  8023cc:	e0bffc17 	ldw	r2,-16(fp)
  8023d0:	10c03785 	stb	r3,222(r2)
  d->_cg6 = d->VS || d->_Pacemaker_local_iVP;
  8023d4:	e0bffc17 	ldw	r2,-16(fp)
  8023d8:	10800a43 	ldbu	r2,41(r2)
  8023dc:	10803fcc 	andi	r2,r2,255
  8023e0:	1080201c 	xori	r2,r2,128
  8023e4:	10bfe004 	addi	r2,r2,-128
  8023e8:	1000061e 	bne	r2,zero,802404 <logic+0x18a8>
  8023ec:	e0bffc17 	ldw	r2,-16(fp)
  8023f0:	10801743 	ldbu	r2,93(r2)
  8023f4:	10803fcc 	andi	r2,r2,255
  8023f8:	1080201c 	xori	r2,r2,128
  8023fc:	10bfe004 	addi	r2,r2,-128
  802400:	10000226 	beq	r2,zero,80240c <logic+0x18b0>
  802404:	00800044 	movi	r2,1
  802408:	00000106 	br	802410 <logic+0x18b4>
  80240c:	0005883a 	mov	r2,zero
  802410:	1007883a 	mov	r3,r2
  802414:	e0bffc17 	ldw	r2,-16(fp)
  802418:	10c04005 	stb	r3,256(r2)
  d->_g153 = d->_GO || (d->_g164 && !d->_cg6);
  80241c:	e0bffc17 	ldw	r2,-16(fp)
  802420:	10803fc3 	ldbu	r2,255(r2)
  802424:	10803fcc 	andi	r2,r2,255
  802428:	1080201c 	xori	r2,r2,128
  80242c:	10bfe004 	addi	r2,r2,-128
  802430:	10000c1e 	bne	r2,zero,802464 <logic+0x1908>
  802434:	e0bffc17 	ldw	r2,-16(fp)
  802438:	10803783 	ldbu	r2,222(r2)
  80243c:	10803fcc 	andi	r2,r2,255
  802440:	1080201c 	xori	r2,r2,128
  802444:	10bfe004 	addi	r2,r2,-128
  802448:	10000826 	beq	r2,zero,80246c <logic+0x1910>
  80244c:	e0bffc17 	ldw	r2,-16(fp)
  802450:	10804003 	ldbu	r2,256(r2)
  802454:	10803fcc 	andi	r2,r2,255
  802458:	1080201c 	xori	r2,r2,128
  80245c:	10bfe004 	addi	r2,r2,-128
  802460:	1000021e 	bne	r2,zero,80246c <logic+0x1910>
  802464:	00800044 	movi	r2,1
  802468:	00000106 	br	802470 <logic+0x1914>
  80246c:	0005883a 	mov	r2,zero
  802470:	1007883a 	mov	r3,r2
  802474:	e0bffc17 	ldw	r2,-16(fp)
  802478:	10c03585 	stb	r3,214(r2)
  d->_g173_e3 = d->_pg187;
  80247c:	e0bffc17 	ldw	r2,-16(fp)
  802480:	10c05d03 	ldbu	r3,372(r2)
  802484:	e0bffc17 	ldw	r2,-16(fp)
  802488:	10c058c5 	stb	r3,355(r2)
  if (d->_g173_e3) {
  80248c:	e0bffc17 	ldw	r2,-16(fp)
  802490:	108058c3 	ldbu	r2,355(r2)
  802494:	10803fcc 	andi	r2,r2,255
  802498:	1080201c 	xori	r2,r2,128
  80249c:	10bfe004 	addi	r2,r2,-128
  8024a0:	10001226 	beq	r2,zero,8024ec <logic+0x1990>
    d->_Pacemaker_local__region0_LRI_x += d->deltaT;
  8024a4:	e13ffc17 	ldw	r4,-16(fp)
  8024a8:	20800b17 	ldw	r2,44(r4)
  8024ac:	20c00c17 	ldw	r3,48(r4)
  8024b0:	e1bffc17 	ldw	r6,-16(fp)
  8024b4:	31000617 	ldw	r4,24(r6)
  8024b8:	31400717 	ldw	r5,28(r6)
  8024bc:	200d883a 	mov	r6,r4
  8024c0:	280f883a 	mov	r7,r5
  8024c4:	1009883a 	mov	r4,r2
  8024c8:	180b883a 	mov	r5,r3
  8024cc:	0807f700 	call	807f70 <__adddf3>
  8024d0:	1009883a 	mov	r4,r2
  8024d4:	180b883a 	mov	r5,r3
  8024d8:	2005883a 	mov	r2,r4
  8024dc:	2807883a 	mov	r3,r5
  8024e0:	e13ffc17 	ldw	r4,-16(fp)
  8024e4:	20800b15 	stw	r2,44(r4)
  8024e8:	20c00c15 	stw	r3,48(r4)
  }
  d->_g153_e1 = d->_g164 && d->_cg6;
  8024ec:	e0bffc17 	ldw	r2,-16(fp)
  8024f0:	10803783 	ldbu	r2,222(r2)
  8024f4:	10803fcc 	andi	r2,r2,255
  8024f8:	1080201c 	xori	r2,r2,128
  8024fc:	10bfe004 	addi	r2,r2,-128
  802500:	10000826 	beq	r2,zero,802524 <logic+0x19c8>
  802504:	e0bffc17 	ldw	r2,-16(fp)
  802508:	10804003 	ldbu	r2,256(r2)
  80250c:	10803fcc 	andi	r2,r2,255
  802510:	1080201c 	xori	r2,r2,128
  802514:	10bfe004 	addi	r2,r2,-128
  802518:	10000226 	beq	r2,zero,802524 <logic+0x19c8>
  80251c:	00800044 	movi	r2,1
  802520:	00000106 	br	802528 <logic+0x19cc>
  802524:	0005883a 	mov	r2,zero
  802528:	1007883a 	mov	r3,r2
  80252c:	e0bffc17 	ldw	r2,-16(fp)
  802530:	10c05845 	stb	r3,353(r2)
  if (d->_g153_e1) {
  802534:	e0bffc17 	ldw	r2,-16(fp)
  802538:	10805843 	ldbu	r2,353(r2)
  80253c:	10803fcc 	andi	r2,r2,255
  802540:	1080201c 	xori	r2,r2,128
  802544:	10bfe004 	addi	r2,r2,-128
  802548:	10000326 	beq	r2,zero,802558 <logic+0x19fc>
    d->_Pacemaker_local__region0_LRI_x = 0;
  80254c:	e0bffc17 	ldw	r2,-16(fp)
  802550:	10000b15 	stw	zero,44(r2)
  802554:	10000c15 	stw	zero,48(r2)
  }
  d->_g173 = d->_pg29;
  802558:	e0bffc17 	ldw	r2,-16(fp)
  80255c:	10c05d43 	ldbu	r3,373(r2)
  802560:	e0bffc17 	ldw	r2,-16(fp)
  802564:	10c03905 	stb	r3,228(r2)
  d->_g6 = d->_pg28;
  802568:	e0bffc17 	ldw	r2,-16(fp)
  80256c:	10c05d83 	ldbu	r3,374(r2)
  802570:	e0bffc17 	ldw	r2,-16(fp)
  802574:	10c01b85 	stb	r3,110(r2)
  d->_g15_e1 = !(d->_g173 || d->_g6);
  802578:	e0bffc17 	ldw	r2,-16(fp)
  80257c:	10803903 	ldbu	r2,228(r2)
  802580:	10803fcc 	andi	r2,r2,255
  802584:	1080201c 	xori	r2,r2,128
  802588:	10bfe004 	addi	r2,r2,-128
  80258c:	1000081e 	bne	r2,zero,8025b0 <logic+0x1a54>
  802590:	e0bffc17 	ldw	r2,-16(fp)
  802594:	10801b83 	ldbu	r2,110(r2)
  802598:	10803fcc 	andi	r2,r2,255
  80259c:	1080201c 	xori	r2,r2,128
  8025a0:	10bfe004 	addi	r2,r2,-128
  8025a4:	1000021e 	bne	r2,zero,8025b0 <logic+0x1a54>
  8025a8:	00800044 	movi	r2,1
  8025ac:	00000106 	br	8025b4 <logic+0x1a58>
  8025b0:	0005883a 	mov	r2,zero
  8025b4:	1007883a 	mov	r3,r2
  8025b8:	e0bffc17 	ldw	r2,-16(fp)
  8025bc:	10c05585 	stb	r3,342(r2)
  d->_g22 = d->_pg14;
  8025c0:	e0bffc17 	ldw	r2,-16(fp)
  8025c4:	10c05dc3 	ldbu	r3,375(r2)
  8025c8:	e0bffc17 	ldw	r2,-16(fp)
  8025cc:	10c01e45 	stb	r3,121(r2)
  d->_cg22 = d->VS || d->_Pacemaker_local_iVP;
  8025d0:	e0bffc17 	ldw	r2,-16(fp)
  8025d4:	10800a43 	ldbu	r2,41(r2)
  8025d8:	10803fcc 	andi	r2,r2,255
  8025dc:	1080201c 	xori	r2,r2,128
  8025e0:	10bfe004 	addi	r2,r2,-128
  8025e4:	1000061e 	bne	r2,zero,802600 <logic+0x1aa4>
  8025e8:	e0bffc17 	ldw	r2,-16(fp)
  8025ec:	10801743 	ldbu	r2,93(r2)
  8025f0:	10803fcc 	andi	r2,r2,255
  8025f4:	1080201c 	xori	r2,r2,128
  8025f8:	10bfe004 	addi	r2,r2,-128
  8025fc:	10000226 	beq	r2,zero,802608 <logic+0x1aac>
  802600:	00800044 	movi	r2,1
  802604:	00000106 	br	80260c <logic+0x1ab0>
  802608:	0005883a 	mov	r2,zero
  80260c:	1007883a 	mov	r3,r2
  802610:	e0bffc17 	ldw	r2,-16(fp)
  802614:	10c04205 	stb	r3,264(r2)
  d->_g23 = d->_g22 && d->_cg22;
  802618:	e0bffc17 	ldw	r2,-16(fp)
  80261c:	10801e43 	ldbu	r2,121(r2)
  802620:	10803fcc 	andi	r2,r2,255
  802624:	1080201c 	xori	r2,r2,128
  802628:	10bfe004 	addi	r2,r2,-128
  80262c:	10000826 	beq	r2,zero,802650 <logic+0x1af4>
  802630:	e0bffc17 	ldw	r2,-16(fp)
  802634:	10804203 	ldbu	r2,264(r2)
  802638:	10803fcc 	andi	r2,r2,255
  80263c:	1080201c 	xori	r2,r2,128
  802640:	10bfe004 	addi	r2,r2,-128
  802644:	10000226 	beq	r2,zero,802650 <logic+0x1af4>
  802648:	00800044 	movi	r2,1
  80264c:	00000106 	br	802654 <logic+0x1af8>
  802650:	0005883a 	mov	r2,zero
  802654:	1007883a 	mov	r3,r2
  802658:	e0bffc17 	ldw	r2,-16(fp)
  80265c:	10c01e85 	stb	r3,122(r2)
  if (d->_g23) {
  802660:	e0bffc17 	ldw	r2,-16(fp)
  802664:	10801e83 	ldbu	r2,122(r2)
  802668:	10803fcc 	andi	r2,r2,255
  80266c:	1080201c 	xori	r2,r2,128
  802670:	10bfe004 	addi	r2,r2,-128
  802674:	10000326 	beq	r2,zero,802684 <logic+0x1b28>
    d->_Pacemaker_local__Atrig = 1;
  802678:	e0bffc17 	ldw	r2,-16(fp)
  80267c:	00c00044 	movi	r3,1
  802680:	10c01845 	stb	r3,97(r2)
  }
  d->_g25 = d->_g22 && !d->_cg22;
  802684:	e0bffc17 	ldw	r2,-16(fp)
  802688:	10801e43 	ldbu	r2,121(r2)
  80268c:	10803fcc 	andi	r2,r2,255
  802690:	1080201c 	xori	r2,r2,128
  802694:	10bfe004 	addi	r2,r2,-128
  802698:	10000826 	beq	r2,zero,8026bc <logic+0x1b60>
  80269c:	e0bffc17 	ldw	r2,-16(fp)
  8026a0:	10804203 	ldbu	r2,264(r2)
  8026a4:	10803fcc 	andi	r2,r2,255
  8026a8:	1080201c 	xori	r2,r2,128
  8026ac:	10bfe004 	addi	r2,r2,-128
  8026b0:	1000021e 	bne	r2,zero,8026bc <logic+0x1b60>
  8026b4:	00800044 	movi	r2,1
  8026b8:	00000106 	br	8026c0 <logic+0x1b64>
  8026bc:	0005883a 	mov	r2,zero
  8026c0:	1007883a 	mov	r3,r2
  8026c4:	e0bffc17 	ldw	r2,-16(fp)
  8026c8:	10c01f05 	stb	r3,124(r2)
  d->_cg25 = d->_Pacemaker_local__region0_LRI_x >= d->LRI && !(d->VS || d->_Pacemaker_local_iVP);
  8026cc:	e0bffc17 	ldw	r2,-16(fp)
  8026d0:	14000b17 	ldw	r16,44(r2)
  8026d4:	14400c17 	ldw	r17,48(r2)
  8026d8:	e0bffc17 	ldw	r2,-16(fp)
  8026dc:	10800417 	ldw	r2,16(r2)
  8026e0:	1009883a 	mov	r4,r2
  8026e4:	0809a000 	call	809a00 <__floatsidf>
  8026e8:	1009883a 	mov	r4,r2
  8026ec:	180b883a 	mov	r5,r3
  8026f0:	200d883a 	mov	r6,r4
  8026f4:	280f883a 	mov	r7,r5
  8026f8:	8009883a 	mov	r4,r16
  8026fc:	880b883a 	mov	r5,r17
  802700:	080881c0 	call	80881c <__gedf2>
  802704:	10000e16 	blt	r2,zero,802740 <logic+0x1be4>
  802708:	e0bffc17 	ldw	r2,-16(fp)
  80270c:	10800a43 	ldbu	r2,41(r2)
  802710:	10803fcc 	andi	r2,r2,255
  802714:	1080201c 	xori	r2,r2,128
  802718:	10bfe004 	addi	r2,r2,-128
  80271c:	1000081e 	bne	r2,zero,802740 <logic+0x1be4>
  802720:	e0bffc17 	ldw	r2,-16(fp)
  802724:	10801743 	ldbu	r2,93(r2)
  802728:	10803fcc 	andi	r2,r2,255
  80272c:	1080201c 	xori	r2,r2,128
  802730:	10bfe004 	addi	r2,r2,-128
  802734:	1000021e 	bne	r2,zero,802740 <logic+0x1be4>
  802738:	00800044 	movi	r2,1
  80273c:	00000106 	br	802744 <logic+0x1be8>
  802740:	0005883a 	mov	r2,zero
  802744:	1007883a 	mov	r3,r2
  802748:	e0bffc17 	ldw	r2,-16(fp)
  80274c:	10c041c5 	stb	r3,263(r2)
  d->_g26 = d->_g25 && d->_cg25;
  802750:	e0bffc17 	ldw	r2,-16(fp)
  802754:	10801f03 	ldbu	r2,124(r2)
  802758:	10803fcc 	andi	r2,r2,255
  80275c:	1080201c 	xori	r2,r2,128
  802760:	10bfe004 	addi	r2,r2,-128
  802764:	10000826 	beq	r2,zero,802788 <logic+0x1c2c>
  802768:	e0bffc17 	ldw	r2,-16(fp)
  80276c:	108041c3 	ldbu	r2,263(r2)
  802770:	10803fcc 	andi	r2,r2,255
  802774:	1080201c 	xori	r2,r2,128
  802778:	10bfe004 	addi	r2,r2,-128
  80277c:	10000226 	beq	r2,zero,802788 <logic+0x1c2c>
  802780:	00800044 	movi	r2,1
  802784:	00000106 	br	80278c <logic+0x1c30>
  802788:	0005883a 	mov	r2,zero
  80278c:	1007883a 	mov	r3,r2
  802790:	e0bffc17 	ldw	r2,-16(fp)
  802794:	10c01f45 	stb	r3,125(r2)
  if (d->_g26) {
  802798:	e0bffc17 	ldw	r2,-16(fp)
  80279c:	10801f43 	ldbu	r2,125(r2)
  8027a0:	10803fcc 	andi	r2,r2,255
  8027a4:	1080201c 	xori	r2,r2,128
  8027a8:	10bfe004 	addi	r2,r2,-128
  8027ac:	10000326 	beq	r2,zero,8027bc <logic+0x1c60>
    d->_Pacemaker_local__Atrig1 = 1;
  8027b0:	e0bffc17 	ldw	r2,-16(fp)
  8027b4:	00c00044 	movi	r3,1
  8027b8:	10c01885 	stb	r3,98(r2)
  }
  d->_g12 = d->_g6 || d->_g173;
  8027bc:	e0bffc17 	ldw	r2,-16(fp)
  8027c0:	10801b83 	ldbu	r2,110(r2)
  8027c4:	10803fcc 	andi	r2,r2,255
  8027c8:	1080201c 	xori	r2,r2,128
  8027cc:	10bfe004 	addi	r2,r2,-128
  8027d0:	1000061e 	bne	r2,zero,8027ec <logic+0x1c90>
  8027d4:	e0bffc17 	ldw	r2,-16(fp)
  8027d8:	10803903 	ldbu	r2,228(r2)
  8027dc:	10803fcc 	andi	r2,r2,255
  8027e0:	1080201c 	xori	r2,r2,128
  8027e4:	10bfe004 	addi	r2,r2,-128
  8027e8:	10000226 	beq	r2,zero,8027f4 <logic+0x1c98>
  8027ec:	00800044 	movi	r2,1
  8027f0:	00000106 	br	8027f8 <logic+0x1c9c>
  8027f4:	0005883a 	mov	r2,zero
  8027f8:	1007883a 	mov	r3,r2
  8027fc:	e0bffc17 	ldw	r2,-16(fp)
  802800:	10c01c85 	stb	r3,114(r2)
  d->_cg13 = d->_Pacemaker_local__region0_LRI_x < d->LRI;
  802804:	e0bffc17 	ldw	r2,-16(fp)
  802808:	14000b17 	ldw	r16,44(r2)
  80280c:	14400c17 	ldw	r17,48(r2)
  802810:	e0bffc17 	ldw	r2,-16(fp)
  802814:	10800417 	ldw	r2,16(r2)
  802818:	1009883a 	mov	r4,r2
  80281c:	0809a000 	call	809a00 <__floatsidf>
  802820:	1009883a 	mov	r4,r2
  802824:	180b883a 	mov	r5,r3
  802828:	04800044 	movi	r18,1
  80282c:	200d883a 	mov	r6,r4
  802830:	280f883a 	mov	r7,r5
  802834:	8009883a 	mov	r4,r16
  802838:	880b883a 	mov	r5,r17
  80283c:	08088f80 	call	8088f8 <__ledf2>
  802840:	10000116 	blt	r2,zero,802848 <logic+0x1cec>
  802844:	0025883a 	mov	r18,zero
  802848:	9007883a 	mov	r3,r18
  80284c:	e0bffc17 	ldw	r2,-16(fp)
  802850:	10c04105 	stb	r3,260(r2)
  d->_g18 = d->_g12 && d->_cg13;
  802854:	e0bffc17 	ldw	r2,-16(fp)
  802858:	10801c83 	ldbu	r2,114(r2)
  80285c:	10803fcc 	andi	r2,r2,255
  802860:	1080201c 	xori	r2,r2,128
  802864:	10bfe004 	addi	r2,r2,-128
  802868:	10000826 	beq	r2,zero,80288c <logic+0x1d30>
  80286c:	e0bffc17 	ldw	r2,-16(fp)
  802870:	10804103 	ldbu	r2,260(r2)
  802874:	10803fcc 	andi	r2,r2,255
  802878:	1080201c 	xori	r2,r2,128
  80287c:	10bfe004 	addi	r2,r2,-128
  802880:	10000226 	beq	r2,zero,80288c <logic+0x1d30>
  802884:	00800044 	movi	r2,1
  802888:	00000106 	br	802890 <logic+0x1d34>
  80288c:	0005883a 	mov	r2,zero
  802890:	1007883a 	mov	r3,r2
  802894:	e0bffc17 	ldw	r2,-16(fp)
  802898:	10c01dc5 	stb	r3,119(r2)
  if (d->_g18) {
  80289c:	e0bffc17 	ldw	r2,-16(fp)
  8028a0:	10801dc3 	ldbu	r2,119(r2)
  8028a4:	10803fcc 	andi	r2,r2,255
  8028a8:	1080201c 	xori	r2,r2,128
  8028ac:	10bfe004 	addi	r2,r2,-128
  8028b0:	10003426 	beq	r2,zero,802984 <logic+0x1e28>
    d->sleepT = (d->sleepT < (d->LRI - d->_Pacemaker_local__region0_LRI_x)) ? d->sleepT : (d->LRI - d->_Pacemaker_local__region0_LRI_x);
  8028b4:	e0bffc17 	ldw	r2,-16(fp)
  8028b8:	14000817 	ldw	r16,32(r2)
  8028bc:	14400917 	ldw	r17,36(r2)
  8028c0:	e0bffc17 	ldw	r2,-16(fp)
  8028c4:	10800417 	ldw	r2,16(r2)
  8028c8:	1009883a 	mov	r4,r2
  8028cc:	0809a000 	call	809a00 <__floatsidf>
  8028d0:	1011883a 	mov	r8,r2
  8028d4:	1813883a 	mov	r9,r3
  8028d8:	e13ffc17 	ldw	r4,-16(fp)
  8028dc:	20800b17 	ldw	r2,44(r4)
  8028e0:	20c00c17 	ldw	r3,48(r4)
  8028e4:	100d883a 	mov	r6,r2
  8028e8:	180f883a 	mov	r7,r3
  8028ec:	4009883a 	mov	r4,r8
  8028f0:	480b883a 	mov	r5,r9
  8028f4:	08091040 	call	809104 <__subdf3>
  8028f8:	1009883a 	mov	r4,r2
  8028fc:	180b883a 	mov	r5,r3
  802900:	2005883a 	mov	r2,r4
  802904:	2807883a 	mov	r3,r5
  802908:	100d883a 	mov	r6,r2
  80290c:	180f883a 	mov	r7,r3
  802910:	8009883a 	mov	r4,r16
  802914:	880b883a 	mov	r5,r17
  802918:	08088f80 	call	8088f8 <__ledf2>
  80291c:	1000040e 	bge	r2,zero,802930 <logic+0x1dd4>
  802920:	e13ffc17 	ldw	r4,-16(fp)
  802924:	20800817 	ldw	r2,32(r4)
  802928:	20c00917 	ldw	r3,36(r4)
  80292c:	00001206 	br	802978 <logic+0x1e1c>
  802930:	e0bffc17 	ldw	r2,-16(fp)
  802934:	10800417 	ldw	r2,16(r2)
  802938:	1009883a 	mov	r4,r2
  80293c:	0809a000 	call	809a00 <__floatsidf>
  802940:	1011883a 	mov	r8,r2
  802944:	1813883a 	mov	r9,r3
  802948:	e13ffc17 	ldw	r4,-16(fp)
  80294c:	20800b17 	ldw	r2,44(r4)
  802950:	20c00c17 	ldw	r3,48(r4)
  802954:	100d883a 	mov	r6,r2
  802958:	180f883a 	mov	r7,r3
  80295c:	4009883a 	mov	r4,r8
  802960:	480b883a 	mov	r5,r9
  802964:	08091040 	call	809104 <__subdf3>
  802968:	1009883a 	mov	r4,r2
  80296c:	180b883a 	mov	r5,r3
  802970:	2005883a 	mov	r2,r4
  802974:	2807883a 	mov	r3,r5
  802978:	e13ffc17 	ldw	r4,-16(fp)
  80297c:	20800815 	stw	r2,32(r4)
  802980:	20c00915 	stw	r3,36(r4)
  }
  d->_cg14 = d->_Pacemaker_local__Atrig || d->_Pacemaker_local__Atrig1;
  802984:	e0bffc17 	ldw	r2,-16(fp)
  802988:	10801843 	ldbu	r2,97(r2)
  80298c:	10803fcc 	andi	r2,r2,255
  802990:	1080201c 	xori	r2,r2,128
  802994:	10bfe004 	addi	r2,r2,-128
  802998:	1000061e 	bne	r2,zero,8029b4 <logic+0x1e58>
  80299c:	e0bffc17 	ldw	r2,-16(fp)
  8029a0:	10801883 	ldbu	r2,98(r2)
  8029a4:	10803fcc 	andi	r2,r2,255
  8029a8:	1080201c 	xori	r2,r2,128
  8029ac:	10bfe004 	addi	r2,r2,-128
  8029b0:	10000226 	beq	r2,zero,8029bc <logic+0x1e60>
  8029b4:	00800044 	movi	r2,1
  8029b8:	00000106 	br	8029c0 <logic+0x1e64>
  8029bc:	0005883a 	mov	r2,zero
  8029c0:	1007883a 	mov	r3,r2
  8029c4:	e0bffc17 	ldw	r2,-16(fp)
  8029c8:	10c040c5 	stb	r3,259(r2)
  d->_g13 = d->_g12 && !d->_cg13;
  8029cc:	e0bffc17 	ldw	r2,-16(fp)
  8029d0:	10801c83 	ldbu	r2,114(r2)
  8029d4:	10803fcc 	andi	r2,r2,255
  8029d8:	1080201c 	xori	r2,r2,128
  8029dc:	10bfe004 	addi	r2,r2,-128
  8029e0:	10000826 	beq	r2,zero,802a04 <logic+0x1ea8>
  8029e4:	e0bffc17 	ldw	r2,-16(fp)
  8029e8:	10804103 	ldbu	r2,260(r2)
  8029ec:	10803fcc 	andi	r2,r2,255
  8029f0:	1080201c 	xori	r2,r2,128
  8029f4:	10bfe004 	addi	r2,r2,-128
  8029f8:	1000021e 	bne	r2,zero,802a04 <logic+0x1ea8>
  8029fc:	00800044 	movi	r2,1
  802a00:	00000106 	br	802a08 <logic+0x1eac>
  802a04:	0005883a 	mov	r2,zero
  802a08:	1007883a 	mov	r3,r2
  802a0c:	e0bffc17 	ldw	r2,-16(fp)
  802a10:	10c01cc5 	stb	r3,115(r2)
  d->_cg16 = d->_Pacemaker_local__Atrig || d->_Pacemaker_local__Atrig1;
  802a14:	e0bffc17 	ldw	r2,-16(fp)
  802a18:	10801843 	ldbu	r2,97(r2)
  802a1c:	10803fcc 	andi	r2,r2,255
  802a20:	1080201c 	xori	r2,r2,128
  802a24:	10bfe004 	addi	r2,r2,-128
  802a28:	1000061e 	bne	r2,zero,802a44 <logic+0x1ee8>
  802a2c:	e0bffc17 	ldw	r2,-16(fp)
  802a30:	10801883 	ldbu	r2,98(r2)
  802a34:	10803fcc 	andi	r2,r2,255
  802a38:	1080201c 	xori	r2,r2,128
  802a3c:	10bfe004 	addi	r2,r2,-128
  802a40:	10000226 	beq	r2,zero,802a4c <logic+0x1ef0>
  802a44:	00800044 	movi	r2,1
  802a48:	00000106 	br	802a50 <logic+0x1ef4>
  802a4c:	0005883a 	mov	r2,zero
  802a50:	1007883a 	mov	r3,r2
  802a54:	e0bffc17 	ldw	r2,-16(fp)
  802a58:	10c04145 	stb	r3,261(r2)
  d->_g15 = (d->_g18 && d->_cg14) || (d->_g13 && d->_cg16);
  802a5c:	e0bffc17 	ldw	r2,-16(fp)
  802a60:	10801dc3 	ldbu	r2,119(r2)
  802a64:	10803fcc 	andi	r2,r2,255
  802a68:	1080201c 	xori	r2,r2,128
  802a6c:	10bfe004 	addi	r2,r2,-128
  802a70:	10000626 	beq	r2,zero,802a8c <logic+0x1f30>
  802a74:	e0bffc17 	ldw	r2,-16(fp)
  802a78:	108040c3 	ldbu	r2,259(r2)
  802a7c:	10803fcc 	andi	r2,r2,255
  802a80:	1080201c 	xori	r2,r2,128
  802a84:	10bfe004 	addi	r2,r2,-128
  802a88:	10000c1e 	bne	r2,zero,802abc <logic+0x1f60>
  802a8c:	e0bffc17 	ldw	r2,-16(fp)
  802a90:	10801cc3 	ldbu	r2,115(r2)
  802a94:	10803fcc 	andi	r2,r2,255
  802a98:	1080201c 	xori	r2,r2,128
  802a9c:	10bfe004 	addi	r2,r2,-128
  802aa0:	10000826 	beq	r2,zero,802ac4 <logic+0x1f68>
  802aa4:	e0bffc17 	ldw	r2,-16(fp)
  802aa8:	10804143 	ldbu	r2,261(r2)
  802aac:	10803fcc 	andi	r2,r2,255
  802ab0:	1080201c 	xori	r2,r2,128
  802ab4:	10bfe004 	addi	r2,r2,-128
  802ab8:	10000226 	beq	r2,zero,802ac4 <logic+0x1f68>
  802abc:	00800044 	movi	r2,1
  802ac0:	00000106 	br	802ac8 <logic+0x1f6c>
  802ac4:	0005883a 	mov	r2,zero
  802ac8:	1007883a 	mov	r3,r2
  802acc:	e0bffc17 	ldw	r2,-16(fp)
  802ad0:	10c01d45 	stb	r3,117(r2)
  d->_g22 = !d->_g22;
  802ad4:	e0bffc17 	ldw	r2,-16(fp)
  802ad8:	10801e43 	ldbu	r2,121(r2)
  802adc:	10803fcc 	andi	r2,r2,255
  802ae0:	1080201c 	xori	r2,r2,128
  802ae4:	10bfe004 	addi	r2,r2,-128
  802ae8:	1005003a 	cmpeq	r2,r2,zero
  802aec:	1007883a 	mov	r3,r2
  802af0:	e0bffc17 	ldw	r2,-16(fp)
  802af4:	10c01e45 	stb	r3,121(r2)
  d->_g26 = d->_g23 || d->_g26;
  802af8:	e0bffc17 	ldw	r2,-16(fp)
  802afc:	10801e83 	ldbu	r2,122(r2)
  802b00:	10803fcc 	andi	r2,r2,255
  802b04:	1080201c 	xori	r2,r2,128
  802b08:	10bfe004 	addi	r2,r2,-128
  802b0c:	1000061e 	bne	r2,zero,802b28 <logic+0x1fcc>
  802b10:	e0bffc17 	ldw	r2,-16(fp)
  802b14:	10801f43 	ldbu	r2,125(r2)
  802b18:	10803fcc 	andi	r2,r2,255
  802b1c:	1080201c 	xori	r2,r2,128
  802b20:	10bfe004 	addi	r2,r2,-128
  802b24:	10000226 	beq	r2,zero,802b30 <logic+0x1fd4>
  802b28:	00800044 	movi	r2,1
  802b2c:	00000106 	br	802b34 <logic+0x1fd8>
  802b30:	0005883a 	mov	r2,zero
  802b34:	1007883a 	mov	r3,r2
  802b38:	e0bffc17 	ldw	r2,-16(fp)
  802b3c:	10c01f45 	stb	r3,125(r2)
  d->_g23 = (d->_g15_e1 || d->_g15) && (d->_g22 || d->_g26) && (d->_g15 || d->_g26);
  802b40:	e0bffc17 	ldw	r2,-16(fp)
  802b44:	10805583 	ldbu	r2,342(r2)
  802b48:	10803fcc 	andi	r2,r2,255
  802b4c:	1080201c 	xori	r2,r2,128
  802b50:	10bfe004 	addi	r2,r2,-128
  802b54:	1000061e 	bne	r2,zero,802b70 <logic+0x2014>
  802b58:	e0bffc17 	ldw	r2,-16(fp)
  802b5c:	10801d43 	ldbu	r2,117(r2)
  802b60:	10803fcc 	andi	r2,r2,255
  802b64:	1080201c 	xori	r2,r2,128
  802b68:	10bfe004 	addi	r2,r2,-128
  802b6c:	10001a26 	beq	r2,zero,802bd8 <logic+0x207c>
  802b70:	e0bffc17 	ldw	r2,-16(fp)
  802b74:	10801e43 	ldbu	r2,121(r2)
  802b78:	10803fcc 	andi	r2,r2,255
  802b7c:	1080201c 	xori	r2,r2,128
  802b80:	10bfe004 	addi	r2,r2,-128
  802b84:	1000061e 	bne	r2,zero,802ba0 <logic+0x2044>
  802b88:	e0bffc17 	ldw	r2,-16(fp)
  802b8c:	10801f43 	ldbu	r2,125(r2)
  802b90:	10803fcc 	andi	r2,r2,255
  802b94:	1080201c 	xori	r2,r2,128
  802b98:	10bfe004 	addi	r2,r2,-128
  802b9c:	10000e26 	beq	r2,zero,802bd8 <logic+0x207c>
  802ba0:	e0bffc17 	ldw	r2,-16(fp)
  802ba4:	10801d43 	ldbu	r2,117(r2)
  802ba8:	10803fcc 	andi	r2,r2,255
  802bac:	1080201c 	xori	r2,r2,128
  802bb0:	10bfe004 	addi	r2,r2,-128
  802bb4:	1000061e 	bne	r2,zero,802bd0 <logic+0x2074>
  802bb8:	e0bffc17 	ldw	r2,-16(fp)
  802bbc:	10801f43 	ldbu	r2,125(r2)
  802bc0:	10803fcc 	andi	r2,r2,255
  802bc4:	1080201c 	xori	r2,r2,128
  802bc8:	10bfe004 	addi	r2,r2,-128
  802bcc:	10000226 	beq	r2,zero,802bd8 <logic+0x207c>
  802bd0:	00800044 	movi	r2,1
  802bd4:	00000106 	br	802bdc <logic+0x2080>
  802bd8:	0005883a 	mov	r2,zero
  802bdc:	1007883a 	mov	r3,r2
  802be0:	e0bffc17 	ldw	r2,-16(fp)
  802be4:	10c01e85 	stb	r3,122(r2)
  d->_cg27 = d->_Pacemaker_local__Atrig;
  802be8:	e0bffc17 	ldw	r2,-16(fp)
  802bec:	10c01843 	ldbu	r3,97(r2)
  802bf0:	e0bffc17 	ldw	r2,-16(fp)
  802bf4:	10c04245 	stb	r3,265(r2)
  d->_g15 = d->_g23 && d->_cg27;
  802bf8:	e0bffc17 	ldw	r2,-16(fp)
  802bfc:	10801e83 	ldbu	r2,122(r2)
  802c00:	10803fcc 	andi	r2,r2,255
  802c04:	1080201c 	xori	r2,r2,128
  802c08:	10bfe004 	addi	r2,r2,-128
  802c0c:	10000826 	beq	r2,zero,802c30 <logic+0x20d4>
  802c10:	e0bffc17 	ldw	r2,-16(fp)
  802c14:	10804243 	ldbu	r2,265(r2)
  802c18:	10803fcc 	andi	r2,r2,255
  802c1c:	1080201c 	xori	r2,r2,128
  802c20:	10bfe004 	addi	r2,r2,-128
  802c24:	10000226 	beq	r2,zero,802c30 <logic+0x20d4>
  802c28:	00800044 	movi	r2,1
  802c2c:	00000106 	br	802c34 <logic+0x20d8>
  802c30:	0005883a 	mov	r2,zero
  802c34:	1007883a 	mov	r3,r2
  802c38:	e0bffc17 	ldw	r2,-16(fp)
  802c3c:	10c01d45 	stb	r3,117(r2)
  if (d->_g15) {
  802c40:	e0bffc17 	ldw	r2,-16(fp)
  802c44:	10801d43 	ldbu	r2,117(r2)
  802c48:	10803fcc 	andi	r2,r2,255
  802c4c:	1080201c 	xori	r2,r2,128
  802c50:	10bfe004 	addi	r2,r2,-128
  802c54:	10000326 	beq	r2,zero,802c64 <logic+0x2108>
    d->_Pacemaker_local__region0_LRI_x = 0;
  802c58:	e0bffc17 	ldw	r2,-16(fp)
  802c5c:	10000b15 	stw	zero,44(r2)
  802c60:	10000c15 	stw	zero,48(r2)
  }
  d->_g15_e1 = d->_pg24;
  802c64:	e0bffc17 	ldw	r2,-16(fp)
  802c68:	10c05e03 	ldbu	r3,376(r2)
  802c6c:	e0bffc17 	ldw	r2,-16(fp)
  802c70:	10c05585 	stb	r3,342(r2)
  d->_g24 = d->_GO || d->_g15_e1;
  802c74:	e0bffc17 	ldw	r2,-16(fp)
  802c78:	10803fc3 	ldbu	r2,255(r2)
  802c7c:	10803fcc 	andi	r2,r2,255
  802c80:	1080201c 	xori	r2,r2,128
  802c84:	10bfe004 	addi	r2,r2,-128
  802c88:	1000061e 	bne	r2,zero,802ca4 <logic+0x2148>
  802c8c:	e0bffc17 	ldw	r2,-16(fp)
  802c90:	10805583 	ldbu	r2,342(r2)
  802c94:	10803fcc 	andi	r2,r2,255
  802c98:	1080201c 	xori	r2,r2,128
  802c9c:	10bfe004 	addi	r2,r2,-128
  802ca0:	10000226 	beq	r2,zero,802cac <logic+0x2150>
  802ca4:	00800044 	movi	r2,1
  802ca8:	00000106 	br	802cb0 <logic+0x2154>
  802cac:	0005883a 	mov	r2,zero
  802cb0:	1007883a 	mov	r3,r2
  802cb4:	e0bffc17 	ldw	r2,-16(fp)
  802cb8:	10c01ec5 	stb	r3,123(r2)
  if (d->_g24) {
  802cbc:	e0bffc17 	ldw	r2,-16(fp)
  802cc0:	10801ec3 	ldbu	r2,123(r2)
  802cc4:	10803fcc 	andi	r2,r2,255
  802cc8:	1080201c 	xori	r2,r2,128
  802ccc:	10bfe004 	addi	r2,r2,-128
  802cd0:	10000426 	beq	r2,zero,802ce4 <logic+0x2188>
    d->AP = 0;
  802cd4:	e0bffc17 	ldw	r2,-16(fp)
  802cd8:	10000a85 	stb	zero,42(r2)
    d->VP = 0;
  802cdc:	e0bffc17 	ldw	r2,-16(fp)
  802ce0:	10000ac5 	stb	zero,43(r2)
  }
  d->_g24_e2 = d->_g23 && !d->_cg27;
  802ce4:	e0bffc17 	ldw	r2,-16(fp)
  802ce8:	10801e83 	ldbu	r2,122(r2)
  802cec:	10803fcc 	andi	r2,r2,255
  802cf0:	1080201c 	xori	r2,r2,128
  802cf4:	10bfe004 	addi	r2,r2,-128
  802cf8:	10000826 	beq	r2,zero,802d1c <logic+0x21c0>
  802cfc:	e0bffc17 	ldw	r2,-16(fp)
  802d00:	10804243 	ldbu	r2,265(r2)
  802d04:	10803fcc 	andi	r2,r2,255
  802d08:	1080201c 	xori	r2,r2,128
  802d0c:	10bfe004 	addi	r2,r2,-128
  802d10:	1000021e 	bne	r2,zero,802d1c <logic+0x21c0>
  802d14:	00800044 	movi	r2,1
  802d18:	00000106 	br	802d20 <logic+0x21c4>
  802d1c:	0005883a 	mov	r2,zero
  802d20:	1007883a 	mov	r3,r2
  802d24:	e0bffc17 	ldw	r2,-16(fp)
  802d28:	10c055c5 	stb	r3,343(r2)
  if (d->_g24_e2) {
  802d2c:	e0bffc17 	ldw	r2,-16(fp)
  802d30:	108055c3 	ldbu	r2,343(r2)
  802d34:	10803fcc 	andi	r2,r2,255
  802d38:	1080201c 	xori	r2,r2,128
  802d3c:	10bfe004 	addi	r2,r2,-128
  802d40:	10000f26 	beq	r2,zero,802d80 <logic+0x2224>
    d->_Pacemaker_local_iVP |= 1;
  802d44:	e0bffc17 	ldw	r2,-16(fp)
  802d48:	10801743 	ldbu	r2,93(r2)
  802d4c:	10800054 	ori	r2,r2,1
  802d50:	1007883a 	mov	r3,r2
  802d54:	e0bffc17 	ldw	r2,-16(fp)
  802d58:	10c01745 	stb	r3,93(r2)
    d->VP |= 1;
  802d5c:	e0bffc17 	ldw	r2,-16(fp)
  802d60:	10800ac3 	ldbu	r2,43(r2)
  802d64:	10800054 	ori	r2,r2,1
  802d68:	1007883a 	mov	r3,r2
  802d6c:	e0bffc17 	ldw	r2,-16(fp)
  802d70:	10c00ac5 	stb	r3,43(r2)
    d->_Pacemaker_local__region0_LRI_x = 0;
  802d74:	e0bffc17 	ldw	r2,-16(fp)
  802d78:	10000b15 	stw	zero,44(r2)
  802d7c:	10000c15 	stw	zero,48(r2)
  }
  d->_g247 = d->_g153_e1 || d->_g15 || d->_g24_e2;
  802d80:	e0bffc17 	ldw	r2,-16(fp)
  802d84:	10805843 	ldbu	r2,353(r2)
  802d88:	10803fcc 	andi	r2,r2,255
  802d8c:	1080201c 	xori	r2,r2,128
  802d90:	10bfe004 	addi	r2,r2,-128
  802d94:	10000c1e 	bne	r2,zero,802dc8 <logic+0x226c>
  802d98:	e0bffc17 	ldw	r2,-16(fp)
  802d9c:	10801d43 	ldbu	r2,117(r2)
  802da0:	10803fcc 	andi	r2,r2,255
  802da4:	1080201c 	xori	r2,r2,128
  802da8:	10bfe004 	addi	r2,r2,-128
  802dac:	1000061e 	bne	r2,zero,802dc8 <logic+0x226c>
  802db0:	e0bffc17 	ldw	r2,-16(fp)
  802db4:	108055c3 	ldbu	r2,343(r2)
  802db8:	10803fcc 	andi	r2,r2,255
  802dbc:	1080201c 	xori	r2,r2,128
  802dc0:	10bfe004 	addi	r2,r2,-128
  802dc4:	10000226 	beq	r2,zero,802dd0 <logic+0x2274>
  802dc8:	00800044 	movi	r2,1
  802dcc:	00000106 	br	802dd4 <logic+0x2278>
  802dd0:	0005883a 	mov	r2,zero
  802dd4:	1007883a 	mov	r3,r2
  802dd8:	e0bffc17 	ldw	r2,-16(fp)
  802ddc:	10c03f85 	stb	r3,254(r2)
  if (d->_g247) {
  802de0:	e0bffc17 	ldw	r2,-16(fp)
  802de4:	10803f83 	ldbu	r2,254(r2)
  802de8:	10803fcc 	andi	r2,r2,255
  802dec:	1080201c 	xori	r2,r2,128
  802df0:	10bfe004 	addi	r2,r2,-128
  802df4:	10000426 	beq	r2,zero,802e08 <logic+0x22ac>
    d->_Pacemaker_local__Atrig = 0;
  802df8:	e0bffc17 	ldw	r2,-16(fp)
  802dfc:	10001845 	stb	zero,97(r2)
    d->_Pacemaker_local__Atrig1 = 0;
  802e00:	e0bffc17 	ldw	r2,-16(fp)
  802e04:	10001885 	stb	zero,98(r2)
  }
  d->_cg9 = d->_Pacemaker_local__region0_LRI_x < d->LRI;
  802e08:	e0bffc17 	ldw	r2,-16(fp)
  802e0c:	14000b17 	ldw	r16,44(r2)
  802e10:	14400c17 	ldw	r17,48(r2)
  802e14:	e0bffc17 	ldw	r2,-16(fp)
  802e18:	10800417 	ldw	r2,16(r2)
  802e1c:	1009883a 	mov	r4,r2
  802e20:	0809a000 	call	809a00 <__floatsidf>
  802e24:	1009883a 	mov	r4,r2
  802e28:	180b883a 	mov	r5,r3
  802e2c:	04800044 	movi	r18,1
  802e30:	200d883a 	mov	r6,r4
  802e34:	280f883a 	mov	r7,r5
  802e38:	8009883a 	mov	r4,r16
  802e3c:	880b883a 	mov	r5,r17
  802e40:	08088f80 	call	8088f8 <__ledf2>
  802e44:	10000116 	blt	r2,zero,802e4c <logic+0x22f0>
  802e48:	0025883a 	mov	r18,zero
  802e4c:	9007883a 	mov	r3,r18
  802e50:	e0bffc17 	ldw	r2,-16(fp)
  802e54:	10c04045 	stb	r3,257(r2)
  d->_g27 = d->_g247 && d->_cg9;
  802e58:	e0bffc17 	ldw	r2,-16(fp)
  802e5c:	10803f83 	ldbu	r2,254(r2)
  802e60:	10803fcc 	andi	r2,r2,255
  802e64:	1080201c 	xori	r2,r2,128
  802e68:	10bfe004 	addi	r2,r2,-128
  802e6c:	10000826 	beq	r2,zero,802e90 <logic+0x2334>
  802e70:	e0bffc17 	ldw	r2,-16(fp)
  802e74:	10804043 	ldbu	r2,257(r2)
  802e78:	10803fcc 	andi	r2,r2,255
  802e7c:	1080201c 	xori	r2,r2,128
  802e80:	10bfe004 	addi	r2,r2,-128
  802e84:	10000226 	beq	r2,zero,802e90 <logic+0x2334>
  802e88:	00800044 	movi	r2,1
  802e8c:	00000106 	br	802e94 <logic+0x2338>
  802e90:	0005883a 	mov	r2,zero
  802e94:	1007883a 	mov	r3,r2
  802e98:	e0bffc17 	ldw	r2,-16(fp)
  802e9c:	10c01f85 	stb	r3,126(r2)
  if (d->_g27) {
  802ea0:	e0bffc17 	ldw	r2,-16(fp)
  802ea4:	10801f83 	ldbu	r2,126(r2)
  802ea8:	10803fcc 	andi	r2,r2,255
  802eac:	1080201c 	xori	r2,r2,128
  802eb0:	10bfe004 	addi	r2,r2,-128
  802eb4:	10003426 	beq	r2,zero,802f88 <logic+0x242c>
    d->sleepT = (d->sleepT < (d->LRI - d->_Pacemaker_local__region0_LRI_x)) ? d->sleepT : (d->LRI - d->_Pacemaker_local__region0_LRI_x);
  802eb8:	e0bffc17 	ldw	r2,-16(fp)
  802ebc:	14000817 	ldw	r16,32(r2)
  802ec0:	14400917 	ldw	r17,36(r2)
  802ec4:	e0bffc17 	ldw	r2,-16(fp)
  802ec8:	10800417 	ldw	r2,16(r2)
  802ecc:	1009883a 	mov	r4,r2
  802ed0:	0809a000 	call	809a00 <__floatsidf>
  802ed4:	1011883a 	mov	r8,r2
  802ed8:	1813883a 	mov	r9,r3
  802edc:	e13ffc17 	ldw	r4,-16(fp)
  802ee0:	20800b17 	ldw	r2,44(r4)
  802ee4:	20c00c17 	ldw	r3,48(r4)
  802ee8:	100d883a 	mov	r6,r2
  802eec:	180f883a 	mov	r7,r3
  802ef0:	4009883a 	mov	r4,r8
  802ef4:	480b883a 	mov	r5,r9
  802ef8:	08091040 	call	809104 <__subdf3>
  802efc:	1009883a 	mov	r4,r2
  802f00:	180b883a 	mov	r5,r3
  802f04:	2005883a 	mov	r2,r4
  802f08:	2807883a 	mov	r3,r5
  802f0c:	100d883a 	mov	r6,r2
  802f10:	180f883a 	mov	r7,r3
  802f14:	8009883a 	mov	r4,r16
  802f18:	880b883a 	mov	r5,r17
  802f1c:	08088f80 	call	8088f8 <__ledf2>
  802f20:	1000040e 	bge	r2,zero,802f34 <logic+0x23d8>
  802f24:	e13ffc17 	ldw	r4,-16(fp)
  802f28:	20800817 	ldw	r2,32(r4)
  802f2c:	20c00917 	ldw	r3,36(r4)
  802f30:	00001206 	br	802f7c <logic+0x2420>
  802f34:	e0bffc17 	ldw	r2,-16(fp)
  802f38:	10800417 	ldw	r2,16(r2)
  802f3c:	1009883a 	mov	r4,r2
  802f40:	0809a000 	call	809a00 <__floatsidf>
  802f44:	1011883a 	mov	r8,r2
  802f48:	1813883a 	mov	r9,r3
  802f4c:	e13ffc17 	ldw	r4,-16(fp)
  802f50:	20800b17 	ldw	r2,44(r4)
  802f54:	20c00c17 	ldw	r3,48(r4)
  802f58:	100d883a 	mov	r6,r2
  802f5c:	180f883a 	mov	r7,r3
  802f60:	4009883a 	mov	r4,r8
  802f64:	480b883a 	mov	r5,r9
  802f68:	08091040 	call	809104 <__subdf3>
  802f6c:	1009883a 	mov	r4,r2
  802f70:	180b883a 	mov	r5,r3
  802f74:	2005883a 	mov	r2,r4
  802f78:	2807883a 	mov	r3,r5
  802f7c:	e13ffc17 	ldw	r4,-16(fp)
  802f80:	20800815 	stw	r2,32(r4)
  802f84:	20c00915 	stw	r3,36(r4)
  }
  d->_cg10 = d->_Pacemaker_local__Atrig || d->_Pacemaker_local__Atrig1;
  802f88:	e0bffc17 	ldw	r2,-16(fp)
  802f8c:	10801843 	ldbu	r2,97(r2)
  802f90:	10803fcc 	andi	r2,r2,255
  802f94:	1080201c 	xori	r2,r2,128
  802f98:	10bfe004 	addi	r2,r2,-128
  802f9c:	1000061e 	bne	r2,zero,802fb8 <logic+0x245c>
  802fa0:	e0bffc17 	ldw	r2,-16(fp)
  802fa4:	10801883 	ldbu	r2,98(r2)
  802fa8:	10803fcc 	andi	r2,r2,255
  802fac:	1080201c 	xori	r2,r2,128
  802fb0:	10bfe004 	addi	r2,r2,-128
  802fb4:	10000226 	beq	r2,zero,802fc0 <logic+0x2464>
  802fb8:	00800044 	movi	r2,1
  802fbc:	00000106 	br	802fc4 <logic+0x2468>
  802fc0:	0005883a 	mov	r2,zero
  802fc4:	1007883a 	mov	r3,r2
  802fc8:	e0bffc17 	ldw	r2,-16(fp)
  802fcc:	10c04085 	stb	r3,258(r2)
  d->_g28 = (d->_g27 && !d->_cg10) || (d->_g18 && !d->_cg14);
  802fd0:	e0bffc17 	ldw	r2,-16(fp)
  802fd4:	10801f83 	ldbu	r2,126(r2)
  802fd8:	10803fcc 	andi	r2,r2,255
  802fdc:	1080201c 	xori	r2,r2,128
  802fe0:	10bfe004 	addi	r2,r2,-128
  802fe4:	10000626 	beq	r2,zero,803000 <logic+0x24a4>
  802fe8:	e0bffc17 	ldw	r2,-16(fp)
  802fec:	10804083 	ldbu	r2,258(r2)
  802ff0:	10803fcc 	andi	r2,r2,255
  802ff4:	1080201c 	xori	r2,r2,128
  802ff8:	10bfe004 	addi	r2,r2,-128
  802ffc:	10000c26 	beq	r2,zero,803030 <logic+0x24d4>
  803000:	e0bffc17 	ldw	r2,-16(fp)
  803004:	10801dc3 	ldbu	r2,119(r2)
  803008:	10803fcc 	andi	r2,r2,255
  80300c:	1080201c 	xori	r2,r2,128
  803010:	10bfe004 	addi	r2,r2,-128
  803014:	10000826 	beq	r2,zero,803038 <logic+0x24dc>
  803018:	e0bffc17 	ldw	r2,-16(fp)
  80301c:	108040c3 	ldbu	r2,259(r2)
  803020:	10803fcc 	andi	r2,r2,255
  803024:	1080201c 	xori	r2,r2,128
  803028:	10bfe004 	addi	r2,r2,-128
  80302c:	1000021e 	bne	r2,zero,803038 <logic+0x24dc>
  803030:	00800044 	movi	r2,1
  803034:	00000106 	br	80303c <logic+0x24e0>
  803038:	0005883a 	mov	r2,zero
  80303c:	1007883a 	mov	r3,r2
  803040:	e0bffc17 	ldw	r2,-16(fp)
  803044:	10c01fc5 	stb	r3,127(r2)
  d->_g7 = d->_g247 && !d->_cg9;
  803048:	e0bffc17 	ldw	r2,-16(fp)
  80304c:	10803f83 	ldbu	r2,254(r2)
  803050:	10803fcc 	andi	r2,r2,255
  803054:	1080201c 	xori	r2,r2,128
  803058:	10bfe004 	addi	r2,r2,-128
  80305c:	10000826 	beq	r2,zero,803080 <logic+0x2524>
  803060:	e0bffc17 	ldw	r2,-16(fp)
  803064:	10804043 	ldbu	r2,257(r2)
  803068:	10803fcc 	andi	r2,r2,255
  80306c:	1080201c 	xori	r2,r2,128
  803070:	10bfe004 	addi	r2,r2,-128
  803074:	1000021e 	bne	r2,zero,803080 <logic+0x2524>
  803078:	00800044 	movi	r2,1
  80307c:	00000106 	br	803084 <logic+0x2528>
  803080:	0005883a 	mov	r2,zero
  803084:	1007883a 	mov	r3,r2
  803088:	e0bffc17 	ldw	r2,-16(fp)
  80308c:	10c01bc5 	stb	r3,111(r2)
  d->_cg19 = d->_Pacemaker_local__Atrig || d->_Pacemaker_local__Atrig1;
  803090:	e0bffc17 	ldw	r2,-16(fp)
  803094:	10801843 	ldbu	r2,97(r2)
  803098:	10803fcc 	andi	r2,r2,255
  80309c:	1080201c 	xori	r2,r2,128
  8030a0:	10bfe004 	addi	r2,r2,-128
  8030a4:	1000061e 	bne	r2,zero,8030c0 <logic+0x2564>
  8030a8:	e0bffc17 	ldw	r2,-16(fp)
  8030ac:	10801883 	ldbu	r2,98(r2)
  8030b0:	10803fcc 	andi	r2,r2,255
  8030b4:	1080201c 	xori	r2,r2,128
  8030b8:	10bfe004 	addi	r2,r2,-128
  8030bc:	10000226 	beq	r2,zero,8030c8 <logic+0x256c>
  8030c0:	00800044 	movi	r2,1
  8030c4:	00000106 	br	8030cc <logic+0x2570>
  8030c8:	0005883a 	mov	r2,zero
  8030cc:	1007883a 	mov	r3,r2
  8030d0:	e0bffc17 	ldw	r2,-16(fp)
  8030d4:	10c04185 	stb	r3,262(r2)
  d->_g29 = (d->_g13 && !d->_cg16) || (d->_g7 && !d->_cg19);
  8030d8:	e0bffc17 	ldw	r2,-16(fp)
  8030dc:	10801cc3 	ldbu	r2,115(r2)
  8030e0:	10803fcc 	andi	r2,r2,255
  8030e4:	1080201c 	xori	r2,r2,128
  8030e8:	10bfe004 	addi	r2,r2,-128
  8030ec:	10000626 	beq	r2,zero,803108 <logic+0x25ac>
  8030f0:	e0bffc17 	ldw	r2,-16(fp)
  8030f4:	10804143 	ldbu	r2,261(r2)
  8030f8:	10803fcc 	andi	r2,r2,255
  8030fc:	1080201c 	xori	r2,r2,128
  803100:	10bfe004 	addi	r2,r2,-128
  803104:	10000c26 	beq	r2,zero,803138 <logic+0x25dc>
  803108:	e0bffc17 	ldw	r2,-16(fp)
  80310c:	10801bc3 	ldbu	r2,111(r2)
  803110:	10803fcc 	andi	r2,r2,255
  803114:	1080201c 	xori	r2,r2,128
  803118:	10bfe004 	addi	r2,r2,-128
  80311c:	10000826 	beq	r2,zero,803140 <logic+0x25e4>
  803120:	e0bffc17 	ldw	r2,-16(fp)
  803124:	10804183 	ldbu	r2,262(r2)
  803128:	10803fcc 	andi	r2,r2,255
  80312c:	1080201c 	xori	r2,r2,128
  803130:	10bfe004 	addi	r2,r2,-128
  803134:	1000021e 	bne	r2,zero,803140 <logic+0x25e4>
  803138:	00800044 	movi	r2,1
  80313c:	00000106 	br	803144 <logic+0x25e8>
  803140:	0005883a 	mov	r2,zero
  803144:	1007883a 	mov	r3,r2
  803148:	e0bffc17 	ldw	r2,-16(fp)
  80314c:	10c02005 	stb	r3,128(r2)
  d->_g14 = d->_g247 || (d->_g25 && !d->_cg25);
  803150:	e0bffc17 	ldw	r2,-16(fp)
  803154:	10803f83 	ldbu	r2,254(r2)
  803158:	10803fcc 	andi	r2,r2,255
  80315c:	1080201c 	xori	r2,r2,128
  803160:	10bfe004 	addi	r2,r2,-128
  803164:	10000c1e 	bne	r2,zero,803198 <logic+0x263c>
  803168:	e0bffc17 	ldw	r2,-16(fp)
  80316c:	10801f03 	ldbu	r2,124(r2)
  803170:	10803fcc 	andi	r2,r2,255
  803174:	1080201c 	xori	r2,r2,128
  803178:	10bfe004 	addi	r2,r2,-128
  80317c:	10000826 	beq	r2,zero,8031a0 <logic+0x2644>
  803180:	e0bffc17 	ldw	r2,-16(fp)
  803184:	108041c3 	ldbu	r2,263(r2)
  803188:	10803fcc 	andi	r2,r2,255
  80318c:	1080201c 	xori	r2,r2,128
  803190:	10bfe004 	addi	r2,r2,-128
  803194:	1000021e 	bne	r2,zero,8031a0 <logic+0x2644>
  803198:	00800044 	movi	r2,1
  80319c:	00000106 	br	8031a4 <logic+0x2648>
  8031a0:	0005883a 	mov	r2,zero
  8031a4:	1007883a 	mov	r3,r2
  8031a8:	e0bffc17 	ldw	r2,-16(fp)
  8031ac:	10c01d05 	stb	r3,116(r2)
  d->_g10 = d->_pg19;
  8031b0:	e0bffc17 	ldw	r2,-16(fp)
  8031b4:	10c05e43 	ldbu	r3,377(r2)
  8031b8:	e0bffc17 	ldw	r2,-16(fp)
  8031bc:	10c01c45 	stb	r3,113(r2)
  d->_cg33 = d->VS || d->_Pacemaker_local_iVP;
  8031c0:	e0bffc17 	ldw	r2,-16(fp)
  8031c4:	10800a43 	ldbu	r2,41(r2)
  8031c8:	10803fcc 	andi	r2,r2,255
  8031cc:	1080201c 	xori	r2,r2,128
  8031d0:	10bfe004 	addi	r2,r2,-128
  8031d4:	1000061e 	bne	r2,zero,8031f0 <logic+0x2694>
  8031d8:	e0bffc17 	ldw	r2,-16(fp)
  8031dc:	10801743 	ldbu	r2,93(r2)
  8031e0:	10803fcc 	andi	r2,r2,255
  8031e4:	1080201c 	xori	r2,r2,128
  8031e8:	10bfe004 	addi	r2,r2,-128
  8031ec:	10000226 	beq	r2,zero,8031f8 <logic+0x269c>
  8031f0:	00800044 	movi	r2,1
  8031f4:	00000106 	br	8031fc <logic+0x26a0>
  8031f8:	0005883a 	mov	r2,zero
  8031fc:	1007883a 	mov	r3,r2
  803200:	e0bffc17 	ldw	r2,-16(fp)
  803204:	10c042c5 	stb	r3,267(r2)
  d->_g19 = d->_GO || (d->_g61 && !d->_cg65) || (d->_g10 && !d->_cg33);
  803208:	e0bffc17 	ldw	r2,-16(fp)
  80320c:	10803fc3 	ldbu	r2,255(r2)
  803210:	10803fcc 	andi	r2,r2,255
  803214:	1080201c 	xori	r2,r2,128
  803218:	10bfe004 	addi	r2,r2,-128
  80321c:	1000181e 	bne	r2,zero,803280 <logic+0x2724>
  803220:	e0bffc17 	ldw	r2,-16(fp)
  803224:	10802543 	ldbu	r2,149(r2)
  803228:	10803fcc 	andi	r2,r2,255
  80322c:	1080201c 	xori	r2,r2,128
  803230:	10bfe004 	addi	r2,r2,-128
  803234:	10000626 	beq	r2,zero,803250 <logic+0x26f4>
  803238:	e0bffc17 	ldw	r2,-16(fp)
  80323c:	10804283 	ldbu	r2,266(r2)
  803240:	10803fcc 	andi	r2,r2,255
  803244:	1080201c 	xori	r2,r2,128
  803248:	10bfe004 	addi	r2,r2,-128
  80324c:	10000c26 	beq	r2,zero,803280 <logic+0x2724>
  803250:	e0bffc17 	ldw	r2,-16(fp)
  803254:	10801c43 	ldbu	r2,113(r2)
  803258:	10803fcc 	andi	r2,r2,255
  80325c:	1080201c 	xori	r2,r2,128
  803260:	10bfe004 	addi	r2,r2,-128
  803264:	10000826 	beq	r2,zero,803288 <logic+0x272c>
  803268:	e0bffc17 	ldw	r2,-16(fp)
  80326c:	108042c3 	ldbu	r2,267(r2)
  803270:	10803fcc 	andi	r2,r2,255
  803274:	1080201c 	xori	r2,r2,128
  803278:	10bfe004 	addi	r2,r2,-128
  80327c:	1000021e 	bne	r2,zero,803288 <logic+0x272c>
  803280:	00800044 	movi	r2,1
  803284:	00000106 	br	80328c <logic+0x2730>
  803288:	0005883a 	mov	r2,zero
  80328c:	1007883a 	mov	r3,r2
  803290:	e0bffc17 	ldw	r2,-16(fp)
  803294:	10c01e05 	stb	r3,120(r2)
  d->_g16 = d->_g10 && d->_cg33;
  803298:	e0bffc17 	ldw	r2,-16(fp)
  80329c:	10801c43 	ldbu	r2,113(r2)
  8032a0:	10803fcc 	andi	r2,r2,255
  8032a4:	1080201c 	xori	r2,r2,128
  8032a8:	10bfe004 	addi	r2,r2,-128
  8032ac:	10000826 	beq	r2,zero,8032d0 <logic+0x2774>
  8032b0:	e0bffc17 	ldw	r2,-16(fp)
  8032b4:	108042c3 	ldbu	r2,267(r2)
  8032b8:	10803fcc 	andi	r2,r2,255
  8032bc:	1080201c 	xori	r2,r2,128
  8032c0:	10bfe004 	addi	r2,r2,-128
  8032c4:	10000226 	beq	r2,zero,8032d0 <logic+0x2774>
  8032c8:	00800044 	movi	r2,1
  8032cc:	00000106 	br	8032d4 <logic+0x2778>
  8032d0:	0005883a 	mov	r2,zero
  8032d4:	1007883a 	mov	r3,r2
  8032d8:	e0bffc17 	ldw	r2,-16(fp)
  8032dc:	10c01d85 	stb	r3,118(r2)
  if (d->_g16) {
  8032e0:	e0bffc17 	ldw	r2,-16(fp)
  8032e4:	10801d83 	ldbu	r2,118(r2)
  8032e8:	10803fcc 	andi	r2,r2,255
  8032ec:	1080201c 	xori	r2,r2,128
  8032f0:	10bfe004 	addi	r2,r2,-128
  8032f4:	10000326 	beq	r2,zero,803304 <logic+0x27a8>
    d->_Pacemaker_local__region1_URI_x = 0;
  8032f8:	e0bffc17 	ldw	r2,-16(fp)
  8032fc:	10000d15 	stw	zero,52(r2)
  803300:	10000e15 	stw	zero,56(r2)
  }
  d->_g8 = d->_g16 || d->_g62;
  803304:	e0bffc17 	ldw	r2,-16(fp)
  803308:	10801d83 	ldbu	r2,118(r2)
  80330c:	10803fcc 	andi	r2,r2,255
  803310:	1080201c 	xori	r2,r2,128
  803314:	10bfe004 	addi	r2,r2,-128
  803318:	1000061e 	bne	r2,zero,803334 <logic+0x27d8>
  80331c:	e0bffc17 	ldw	r2,-16(fp)
  803320:	10802583 	ldbu	r2,150(r2)
  803324:	10803fcc 	andi	r2,r2,255
  803328:	1080201c 	xori	r2,r2,128
  80332c:	10bfe004 	addi	r2,r2,-128
  803330:	10000226 	beq	r2,zero,80333c <logic+0x27e0>
  803334:	00800044 	movi	r2,1
  803338:	00000106 	br	803340 <logic+0x27e4>
  80333c:	0005883a 	mov	r2,zero
  803340:	1007883a 	mov	r3,r2
  803344:	e0bffc17 	ldw	r2,-16(fp)
  803348:	10c01c05 	stb	r3,112(r2)
  if (d->_g8) {
  80334c:	e0bffc17 	ldw	r2,-16(fp)
  803350:	10801c03 	ldbu	r2,112(r2)
  803354:	10803fcc 	andi	r2,r2,255
  803358:	1080201c 	xori	r2,r2,128
  80335c:	10bfe004 	addi	r2,r2,-128
  803360:	10000426 	beq	r2,zero,803374 <logic+0x2818>
    d->_Pacemaker_local__Atrig2 = 0;
  803364:	e0bffc17 	ldw	r2,-16(fp)
  803368:	100018c5 	stb	zero,99(r2)
    d->_Pacemaker_local__Atrig3 = 0;
  80336c:	e0bffc17 	ldw	r2,-16(fp)
  803370:	10001905 	stb	zero,100(r2)
  }
  d->_cg36 = d->_Pacemaker_local__region1_URI_x < d->URI;
  803374:	e0bffc17 	ldw	r2,-16(fp)
  803378:	14000d17 	ldw	r16,52(r2)
  80337c:	14400e17 	ldw	r17,56(r2)
  803380:	e0bffc17 	ldw	r2,-16(fp)
  803384:	10800517 	ldw	r2,20(r2)
  803388:	1009883a 	mov	r4,r2
  80338c:	0809a000 	call	809a00 <__floatsidf>
  803390:	1009883a 	mov	r4,r2
  803394:	180b883a 	mov	r5,r3
  803398:	04800044 	movi	r18,1
  80339c:	200d883a 	mov	r6,r4
  8033a0:	280f883a 	mov	r7,r5
  8033a4:	8009883a 	mov	r4,r16
  8033a8:	880b883a 	mov	r5,r17
  8033ac:	08088f80 	call	8088f8 <__ledf2>
  8033b0:	10000116 	blt	r2,zero,8033b8 <logic+0x285c>
  8033b4:	0025883a 	mov	r18,zero
  8033b8:	9007883a 	mov	r3,r18
  8033bc:	e0bffc17 	ldw	r2,-16(fp)
  8033c0:	10c04305 	stb	r3,268(r2)
  d->_g25 = d->_g8 && d->_cg36;
  8033c4:	e0bffc17 	ldw	r2,-16(fp)
  8033c8:	10801c03 	ldbu	r2,112(r2)
  8033cc:	10803fcc 	andi	r2,r2,255
  8033d0:	1080201c 	xori	r2,r2,128
  8033d4:	10bfe004 	addi	r2,r2,-128
  8033d8:	10000826 	beq	r2,zero,8033fc <logic+0x28a0>
  8033dc:	e0bffc17 	ldw	r2,-16(fp)
  8033e0:	10804303 	ldbu	r2,268(r2)
  8033e4:	10803fcc 	andi	r2,r2,255
  8033e8:	1080201c 	xori	r2,r2,128
  8033ec:	10bfe004 	addi	r2,r2,-128
  8033f0:	10000226 	beq	r2,zero,8033fc <logic+0x28a0>
  8033f4:	00800044 	movi	r2,1
  8033f8:	00000106 	br	803400 <logic+0x28a4>
  8033fc:	0005883a 	mov	r2,zero
  803400:	1007883a 	mov	r3,r2
  803404:	e0bffc17 	ldw	r2,-16(fp)
  803408:	10c01f05 	stb	r3,124(r2)
  if (d->_g25) {
  80340c:	e0bffc17 	ldw	r2,-16(fp)
  803410:	10801f03 	ldbu	r2,124(r2)
  803414:	10803fcc 	andi	r2,r2,255
  803418:	1080201c 	xori	r2,r2,128
  80341c:	10bfe004 	addi	r2,r2,-128
  803420:	10003426 	beq	r2,zero,8034f4 <logic+0x2998>
    d->sleepT = (d->sleepT < (d->URI - d->_Pacemaker_local__region1_URI_x)) ? d->sleepT : (d->URI - d->_Pacemaker_local__region1_URI_x);
  803424:	e0bffc17 	ldw	r2,-16(fp)
  803428:	14000817 	ldw	r16,32(r2)
  80342c:	14400917 	ldw	r17,36(r2)
  803430:	e0bffc17 	ldw	r2,-16(fp)
  803434:	10800517 	ldw	r2,20(r2)
  803438:	1009883a 	mov	r4,r2
  80343c:	0809a000 	call	809a00 <__floatsidf>
  803440:	1011883a 	mov	r8,r2
  803444:	1813883a 	mov	r9,r3
  803448:	e13ffc17 	ldw	r4,-16(fp)
  80344c:	20800d17 	ldw	r2,52(r4)
  803450:	20c00e17 	ldw	r3,56(r4)
  803454:	100d883a 	mov	r6,r2
  803458:	180f883a 	mov	r7,r3
  80345c:	4009883a 	mov	r4,r8
  803460:	480b883a 	mov	r5,r9
  803464:	08091040 	call	809104 <__subdf3>
  803468:	1009883a 	mov	r4,r2
  80346c:	180b883a 	mov	r5,r3
  803470:	2005883a 	mov	r2,r4
  803474:	2807883a 	mov	r3,r5
  803478:	100d883a 	mov	r6,r2
  80347c:	180f883a 	mov	r7,r3
  803480:	8009883a 	mov	r4,r16
  803484:	880b883a 	mov	r5,r17
  803488:	08088f80 	call	8088f8 <__ledf2>
  80348c:	1000040e 	bge	r2,zero,8034a0 <logic+0x2944>
  803490:	e13ffc17 	ldw	r4,-16(fp)
  803494:	20800817 	ldw	r2,32(r4)
  803498:	20c00917 	ldw	r3,36(r4)
  80349c:	00001206 	br	8034e8 <logic+0x298c>
  8034a0:	e0bffc17 	ldw	r2,-16(fp)
  8034a4:	10800517 	ldw	r2,20(r2)
  8034a8:	1009883a 	mov	r4,r2
  8034ac:	0809a000 	call	809a00 <__floatsidf>
  8034b0:	1011883a 	mov	r8,r2
  8034b4:	1813883a 	mov	r9,r3
  8034b8:	e13ffc17 	ldw	r4,-16(fp)
  8034bc:	20800d17 	ldw	r2,52(r4)
  8034c0:	20c00e17 	ldw	r3,56(r4)
  8034c4:	100d883a 	mov	r6,r2
  8034c8:	180f883a 	mov	r7,r3
  8034cc:	4009883a 	mov	r4,r8
  8034d0:	480b883a 	mov	r5,r9
  8034d4:	08091040 	call	809104 <__subdf3>
  8034d8:	1009883a 	mov	r4,r2
  8034dc:	180b883a 	mov	r5,r3
  8034e0:	2005883a 	mov	r2,r4
  8034e4:	2807883a 	mov	r3,r5
  8034e8:	e13ffc17 	ldw	r4,-16(fp)
  8034ec:	20800815 	stw	r2,32(r4)
  8034f0:	20c00915 	stw	r3,36(r4)
  }
  d->_cg37 = d->_Pacemaker_local__Atrig2 || d->_Pacemaker_local__Atrig3;
  8034f4:	e0bffc17 	ldw	r2,-16(fp)
  8034f8:	108018c3 	ldbu	r2,99(r2)
  8034fc:	10803fcc 	andi	r2,r2,255
  803500:	1080201c 	xori	r2,r2,128
  803504:	10bfe004 	addi	r2,r2,-128
  803508:	1000061e 	bne	r2,zero,803524 <logic+0x29c8>
  80350c:	e0bffc17 	ldw	r2,-16(fp)
  803510:	10801903 	ldbu	r2,100(r2)
  803514:	10803fcc 	andi	r2,r2,255
  803518:	1080201c 	xori	r2,r2,128
  80351c:	10bfe004 	addi	r2,r2,-128
  803520:	10000226 	beq	r2,zero,80352c <logic+0x29d0>
  803524:	00800044 	movi	r2,1
  803528:	00000106 	br	803530 <logic+0x29d4>
  80352c:	0005883a 	mov	r2,zero
  803530:	1007883a 	mov	r3,r2
  803534:	e0bffc17 	ldw	r2,-16(fp)
  803538:	10c04345 	stb	r3,269(r2)
  d->_g65 = (d->_g25 && !d->_cg37) || (d->_g39 && !d->_cg41);
  80353c:	e0bffc17 	ldw	r2,-16(fp)
  803540:	10801f03 	ldbu	r2,124(r2)
  803544:	10803fcc 	andi	r2,r2,255
  803548:	1080201c 	xori	r2,r2,128
  80354c:	10bfe004 	addi	r2,r2,-128
  803550:	10000626 	beq	r2,zero,80356c <logic+0x2a10>
  803554:	e0bffc17 	ldw	r2,-16(fp)
  803558:	10804343 	ldbu	r2,269(r2)
  80355c:	10803fcc 	andi	r2,r2,255
  803560:	1080201c 	xori	r2,r2,128
  803564:	10bfe004 	addi	r2,r2,-128
  803568:	10000c26 	beq	r2,zero,80359c <logic+0x2a40>
  80356c:	e0bffc17 	ldw	r2,-16(fp)
  803570:	10802143 	ldbu	r2,133(r2)
  803574:	10803fcc 	andi	r2,r2,255
  803578:	1080201c 	xori	r2,r2,128
  80357c:	10bfe004 	addi	r2,r2,-128
  803580:	10000826 	beq	r2,zero,8035a4 <logic+0x2a48>
  803584:	e0bffc17 	ldw	r2,-16(fp)
  803588:	10804383 	ldbu	r2,270(r2)
  80358c:	10803fcc 	andi	r2,r2,255
  803590:	1080201c 	xori	r2,r2,128
  803594:	10bfe004 	addi	r2,r2,-128
  803598:	1000021e 	bne	r2,zero,8035a4 <logic+0x2a48>
  80359c:	00800044 	movi	r2,1
  8035a0:	00000106 	br	8035a8 <logic+0x2a4c>
  8035a4:	0005883a 	mov	r2,zero
  8035a8:	1007883a 	mov	r3,r2
  8035ac:	e0bffc17 	ldw	r2,-16(fp)
  8035b0:	10c02645 	stb	r3,153(r2)
  d->_g33 = d->_g8 && !d->_cg36;
  8035b4:	e0bffc17 	ldw	r2,-16(fp)
  8035b8:	10801c03 	ldbu	r2,112(r2)
  8035bc:	10803fcc 	andi	r2,r2,255
  8035c0:	1080201c 	xori	r2,r2,128
  8035c4:	10bfe004 	addi	r2,r2,-128
  8035c8:	10000826 	beq	r2,zero,8035ec <logic+0x2a90>
  8035cc:	e0bffc17 	ldw	r2,-16(fp)
  8035d0:	10804303 	ldbu	r2,268(r2)
  8035d4:	10803fcc 	andi	r2,r2,255
  8035d8:	1080201c 	xori	r2,r2,128
  8035dc:	10bfe004 	addi	r2,r2,-128
  8035e0:	1000021e 	bne	r2,zero,8035ec <logic+0x2a90>
  8035e4:	00800044 	movi	r2,1
  8035e8:	00000106 	br	8035f0 <logic+0x2a94>
  8035ec:	0005883a 	mov	r2,zero
  8035f0:	1007883a 	mov	r3,r2
  8035f4:	e0bffc17 	ldw	r2,-16(fp)
  8035f8:	10c02045 	stb	r3,129(r2)
  d->_cg46 = d->_Pacemaker_local__Atrig2 || d->_Pacemaker_local__Atrig3;
  8035fc:	e0bffc17 	ldw	r2,-16(fp)
  803600:	108018c3 	ldbu	r2,99(r2)
  803604:	10803fcc 	andi	r2,r2,255
  803608:	1080201c 	xori	r2,r2,128
  80360c:	10bfe004 	addi	r2,r2,-128
  803610:	1000061e 	bne	r2,zero,80362c <logic+0x2ad0>
  803614:	e0bffc17 	ldw	r2,-16(fp)
  803618:	10801903 	ldbu	r2,100(r2)
  80361c:	10803fcc 	andi	r2,r2,255
  803620:	1080201c 	xori	r2,r2,128
  803624:	10bfe004 	addi	r2,r2,-128
  803628:	10000226 	beq	r2,zero,803634 <logic+0x2ad8>
  80362c:	00800044 	movi	r2,1
  803630:	00000106 	br	803638 <logic+0x2adc>
  803634:	0005883a 	mov	r2,zero
  803638:	1007883a 	mov	r3,r2
  80363c:	e0bffc17 	ldw	r2,-16(fp)
  803640:	10c04445 	stb	r3,273(r2)
  d->_g66 = (d->_g40 && !d->_cg43) || (d->_g33 && !d->_cg46);
  803644:	e0bffc17 	ldw	r2,-16(fp)
  803648:	10802183 	ldbu	r2,134(r2)
  80364c:	10803fcc 	andi	r2,r2,255
  803650:	1080201c 	xori	r2,r2,128
  803654:	10bfe004 	addi	r2,r2,-128
  803658:	10000626 	beq	r2,zero,803674 <logic+0x2b18>
  80365c:	e0bffc17 	ldw	r2,-16(fp)
  803660:	10804403 	ldbu	r2,272(r2)
  803664:	10803fcc 	andi	r2,r2,255
  803668:	1080201c 	xori	r2,r2,128
  80366c:	10bfe004 	addi	r2,r2,-128
  803670:	10000c26 	beq	r2,zero,8036a4 <logic+0x2b48>
  803674:	e0bffc17 	ldw	r2,-16(fp)
  803678:	10802043 	ldbu	r2,129(r2)
  80367c:	10803fcc 	andi	r2,r2,255
  803680:	1080201c 	xori	r2,r2,128
  803684:	10bfe004 	addi	r2,r2,-128
  803688:	10000826 	beq	r2,zero,8036ac <logic+0x2b50>
  80368c:	e0bffc17 	ldw	r2,-16(fp)
  803690:	10804443 	ldbu	r2,273(r2)
  803694:	10803fcc 	andi	r2,r2,255
  803698:	1080201c 	xori	r2,r2,128
  80369c:	10bfe004 	addi	r2,r2,-128
  8036a0:	1000021e 	bne	r2,zero,8036ac <logic+0x2b50>
  8036a4:	00800044 	movi	r2,1
  8036a8:	00000106 	br	8036b0 <logic+0x2b54>
  8036ac:	0005883a 	mov	r2,zero
  8036b0:	1007883a 	mov	r3,r2
  8036b4:	e0bffc17 	ldw	r2,-16(fp)
  8036b8:	10c02685 	stb	r3,154(r2)
  d->_cg47 = d->_Pacemaker_local__region1_URI_x < d->URI;
  8036bc:	e0bffc17 	ldw	r2,-16(fp)
  8036c0:	14000d17 	ldw	r16,52(r2)
  8036c4:	14400e17 	ldw	r17,56(r2)
  8036c8:	e0bffc17 	ldw	r2,-16(fp)
  8036cc:	10800517 	ldw	r2,20(r2)
  8036d0:	1009883a 	mov	r4,r2
  8036d4:	0809a000 	call	809a00 <__floatsidf>
  8036d8:	1009883a 	mov	r4,r2
  8036dc:	180b883a 	mov	r5,r3
  8036e0:	04800044 	movi	r18,1
  8036e4:	200d883a 	mov	r6,r4
  8036e8:	280f883a 	mov	r7,r5
  8036ec:	8009883a 	mov	r4,r16
  8036f0:	880b883a 	mov	r5,r17
  8036f4:	08088f80 	call	8088f8 <__ledf2>
  8036f8:	10000116 	blt	r2,zero,803700 <logic+0x2ba4>
  8036fc:	0025883a 	mov	r18,zero
  803700:	9007883a 	mov	r3,r18
  803704:	e0bffc17 	ldw	r2,-16(fp)
  803708:	10c04485 	stb	r3,274(r2)
  d->_g34 = d->_g8 && d->_cg47;
  80370c:	e0bffc17 	ldw	r2,-16(fp)
  803710:	10801c03 	ldbu	r2,112(r2)
  803714:	10803fcc 	andi	r2,r2,255
  803718:	1080201c 	xori	r2,r2,128
  80371c:	10bfe004 	addi	r2,r2,-128
  803720:	10000826 	beq	r2,zero,803744 <logic+0x2be8>
  803724:	e0bffc17 	ldw	r2,-16(fp)
  803728:	10804483 	ldbu	r2,274(r2)
  80372c:	10803fcc 	andi	r2,r2,255
  803730:	1080201c 	xori	r2,r2,128
  803734:	10bfe004 	addi	r2,r2,-128
  803738:	10000226 	beq	r2,zero,803744 <logic+0x2be8>
  80373c:	00800044 	movi	r2,1
  803740:	00000106 	br	803748 <logic+0x2bec>
  803744:	0005883a 	mov	r2,zero
  803748:	1007883a 	mov	r3,r2
  80374c:	e0bffc17 	ldw	r2,-16(fp)
  803750:	10c02085 	stb	r3,130(r2)
  if (d->_g34) {
  803754:	e0bffc17 	ldw	r2,-16(fp)
  803758:	10802083 	ldbu	r2,130(r2)
  80375c:	10803fcc 	andi	r2,r2,255
  803760:	1080201c 	xori	r2,r2,128
  803764:	10bfe004 	addi	r2,r2,-128
  803768:	10003426 	beq	r2,zero,80383c <logic+0x2ce0>
    d->sleepT = (d->sleepT < (d->URI - d->_Pacemaker_local__region1_URI_x)) ? d->sleepT : (d->URI - d->_Pacemaker_local__region1_URI_x);
  80376c:	e0bffc17 	ldw	r2,-16(fp)
  803770:	14000817 	ldw	r16,32(r2)
  803774:	14400917 	ldw	r17,36(r2)
  803778:	e0bffc17 	ldw	r2,-16(fp)
  80377c:	10800517 	ldw	r2,20(r2)
  803780:	1009883a 	mov	r4,r2
  803784:	0809a000 	call	809a00 <__floatsidf>
  803788:	1011883a 	mov	r8,r2
  80378c:	1813883a 	mov	r9,r3
  803790:	e13ffc17 	ldw	r4,-16(fp)
  803794:	20800d17 	ldw	r2,52(r4)
  803798:	20c00e17 	ldw	r3,56(r4)
  80379c:	100d883a 	mov	r6,r2
  8037a0:	180f883a 	mov	r7,r3
  8037a4:	4009883a 	mov	r4,r8
  8037a8:	480b883a 	mov	r5,r9
  8037ac:	08091040 	call	809104 <__subdf3>
  8037b0:	1009883a 	mov	r4,r2
  8037b4:	180b883a 	mov	r5,r3
  8037b8:	2005883a 	mov	r2,r4
  8037bc:	2807883a 	mov	r3,r5
  8037c0:	100d883a 	mov	r6,r2
  8037c4:	180f883a 	mov	r7,r3
  8037c8:	8009883a 	mov	r4,r16
  8037cc:	880b883a 	mov	r5,r17
  8037d0:	08088f80 	call	8088f8 <__ledf2>
  8037d4:	1000040e 	bge	r2,zero,8037e8 <logic+0x2c8c>
  8037d8:	e13ffc17 	ldw	r4,-16(fp)
  8037dc:	20800817 	ldw	r2,32(r4)
  8037e0:	20c00917 	ldw	r3,36(r4)
  8037e4:	00001206 	br	803830 <logic+0x2cd4>
  8037e8:	e0bffc17 	ldw	r2,-16(fp)
  8037ec:	10800517 	ldw	r2,20(r2)
  8037f0:	1009883a 	mov	r4,r2
  8037f4:	0809a000 	call	809a00 <__floatsidf>
  8037f8:	1011883a 	mov	r8,r2
  8037fc:	1813883a 	mov	r9,r3
  803800:	e13ffc17 	ldw	r4,-16(fp)
  803804:	20800d17 	ldw	r2,52(r4)
  803808:	20c00e17 	ldw	r3,56(r4)
  80380c:	100d883a 	mov	r6,r2
  803810:	180f883a 	mov	r7,r3
  803814:	4009883a 	mov	r4,r8
  803818:	480b883a 	mov	r5,r9
  80381c:	08091040 	call	809104 <__subdf3>
  803820:	1009883a 	mov	r4,r2
  803824:	180b883a 	mov	r5,r3
  803828:	2005883a 	mov	r2,r4
  80382c:	2807883a 	mov	r3,r5
  803830:	e13ffc17 	ldw	r4,-16(fp)
  803834:	20800815 	stw	r2,32(r4)
  803838:	20c00915 	stw	r3,36(r4)
  }
  d->_cg48 = d->_Pacemaker_local__Atrig2 || d->_Pacemaker_local__Atrig3;
  80383c:	e0bffc17 	ldw	r2,-16(fp)
  803840:	108018c3 	ldbu	r2,99(r2)
  803844:	10803fcc 	andi	r2,r2,255
  803848:	1080201c 	xori	r2,r2,128
  80384c:	10bfe004 	addi	r2,r2,-128
  803850:	1000061e 	bne	r2,zero,80386c <logic+0x2d10>
  803854:	e0bffc17 	ldw	r2,-16(fp)
  803858:	10801903 	ldbu	r2,100(r2)
  80385c:	10803fcc 	andi	r2,r2,255
  803860:	1080201c 	xori	r2,r2,128
  803864:	10bfe004 	addi	r2,r2,-128
  803868:	10000226 	beq	r2,zero,803874 <logic+0x2d18>
  80386c:	00800044 	movi	r2,1
  803870:	00000106 	br	803878 <logic+0x2d1c>
  803874:	0005883a 	mov	r2,zero
  803878:	1007883a 	mov	r3,r2
  80387c:	e0bffc17 	ldw	r2,-16(fp)
  803880:	10c044c5 	stb	r3,275(r2)
  d->_g37 = (d->_g34 && !d->_cg48) || (d->_g50 && !d->_cg52);
  803884:	e0bffc17 	ldw	r2,-16(fp)
  803888:	10802083 	ldbu	r2,130(r2)
  80388c:	10803fcc 	andi	r2,r2,255
  803890:	1080201c 	xori	r2,r2,128
  803894:	10bfe004 	addi	r2,r2,-128
  803898:	10000626 	beq	r2,zero,8038b4 <logic+0x2d58>
  80389c:	e0bffc17 	ldw	r2,-16(fp)
  8038a0:	108044c3 	ldbu	r2,275(r2)
  8038a4:	10803fcc 	andi	r2,r2,255
  8038a8:	1080201c 	xori	r2,r2,128
  8038ac:	10bfe004 	addi	r2,r2,-128
  8038b0:	10000c26 	beq	r2,zero,8038e4 <logic+0x2d88>
  8038b4:	e0bffc17 	ldw	r2,-16(fp)
  8038b8:	10802343 	ldbu	r2,141(r2)
  8038bc:	10803fcc 	andi	r2,r2,255
  8038c0:	1080201c 	xori	r2,r2,128
  8038c4:	10bfe004 	addi	r2,r2,-128
  8038c8:	10000826 	beq	r2,zero,8038ec <logic+0x2d90>
  8038cc:	e0bffc17 	ldw	r2,-16(fp)
  8038d0:	10804503 	ldbu	r2,276(r2)
  8038d4:	10803fcc 	andi	r2,r2,255
  8038d8:	1080201c 	xori	r2,r2,128
  8038dc:	10bfe004 	addi	r2,r2,-128
  8038e0:	1000021e 	bne	r2,zero,8038ec <logic+0x2d90>
  8038e4:	00800044 	movi	r2,1
  8038e8:	00000106 	br	8038f0 <logic+0x2d94>
  8038ec:	0005883a 	mov	r2,zero
  8038f0:	1007883a 	mov	r3,r2
  8038f4:	e0bffc17 	ldw	r2,-16(fp)
  8038f8:	10c02105 	stb	r3,132(r2)
  d->_g41 = d->_g8 && !d->_cg47;
  8038fc:	e0bffc17 	ldw	r2,-16(fp)
  803900:	10801c03 	ldbu	r2,112(r2)
  803904:	10803fcc 	andi	r2,r2,255
  803908:	1080201c 	xori	r2,r2,128
  80390c:	10bfe004 	addi	r2,r2,-128
  803910:	10000826 	beq	r2,zero,803934 <logic+0x2dd8>
  803914:	e0bffc17 	ldw	r2,-16(fp)
  803918:	10804483 	ldbu	r2,274(r2)
  80391c:	10803fcc 	andi	r2,r2,255
  803920:	1080201c 	xori	r2,r2,128
  803924:	10bfe004 	addi	r2,r2,-128
  803928:	1000021e 	bne	r2,zero,803934 <logic+0x2dd8>
  80392c:	00800044 	movi	r2,1
  803930:	00000106 	br	803938 <logic+0x2ddc>
  803934:	0005883a 	mov	r2,zero
  803938:	1007883a 	mov	r3,r2
  80393c:	e0bffc17 	ldw	r2,-16(fp)
  803940:	10c021c5 	stb	r3,135(r2)
  d->_cg57 = d->_Pacemaker_local__Atrig2 || d->_Pacemaker_local__Atrig3;
  803944:	e0bffc17 	ldw	r2,-16(fp)
  803948:	108018c3 	ldbu	r2,99(r2)
  80394c:	10803fcc 	andi	r2,r2,255
  803950:	1080201c 	xori	r2,r2,128
  803954:	10bfe004 	addi	r2,r2,-128
  803958:	1000061e 	bne	r2,zero,803974 <logic+0x2e18>
  80395c:	e0bffc17 	ldw	r2,-16(fp)
  803960:	10801903 	ldbu	r2,100(r2)
  803964:	10803fcc 	andi	r2,r2,255
  803968:	1080201c 	xori	r2,r2,128
  80396c:	10bfe004 	addi	r2,r2,-128
  803970:	10000226 	beq	r2,zero,80397c <logic+0x2e20>
  803974:	00800044 	movi	r2,1
  803978:	00000106 	br	803980 <logic+0x2e24>
  80397c:	0005883a 	mov	r2,zero
  803980:	1007883a 	mov	r3,r2
  803984:	e0bffc17 	ldw	r2,-16(fp)
  803988:	10c045c5 	stb	r3,279(r2)
  d->_g46 = (d->_g51 && !d->_cg54) || (d->_g41 && !d->_cg57);
  80398c:	e0bffc17 	ldw	r2,-16(fp)
  803990:	10802383 	ldbu	r2,142(r2)
  803994:	10803fcc 	andi	r2,r2,255
  803998:	1080201c 	xori	r2,r2,128
  80399c:	10bfe004 	addi	r2,r2,-128
  8039a0:	10000626 	beq	r2,zero,8039bc <logic+0x2e60>
  8039a4:	e0bffc17 	ldw	r2,-16(fp)
  8039a8:	10804583 	ldbu	r2,278(r2)
  8039ac:	10803fcc 	andi	r2,r2,255
  8039b0:	1080201c 	xori	r2,r2,128
  8039b4:	10bfe004 	addi	r2,r2,-128
  8039b8:	10000c26 	beq	r2,zero,8039ec <logic+0x2e90>
  8039bc:	e0bffc17 	ldw	r2,-16(fp)
  8039c0:	108021c3 	ldbu	r2,135(r2)
  8039c4:	10803fcc 	andi	r2,r2,255
  8039c8:	1080201c 	xori	r2,r2,128
  8039cc:	10bfe004 	addi	r2,r2,-128
  8039d0:	10000826 	beq	r2,zero,8039f4 <logic+0x2e98>
  8039d4:	e0bffc17 	ldw	r2,-16(fp)
  8039d8:	108045c3 	ldbu	r2,279(r2)
  8039dc:	10803fcc 	andi	r2,r2,255
  8039e0:	1080201c 	xori	r2,r2,128
  8039e4:	10bfe004 	addi	r2,r2,-128
  8039e8:	1000021e 	bne	r2,zero,8039f4 <logic+0x2e98>
  8039ec:	00800044 	movi	r2,1
  8039f0:	00000106 	br	8039f8 <logic+0x2e9c>
  8039f4:	0005883a 	mov	r2,zero
  8039f8:	1007883a 	mov	r3,r2
  8039fc:	e0bffc17 	ldw	r2,-16(fp)
  803a00:	10c022c5 	stb	r3,139(r2)
  d->_g43 = d->_g8 || (d->_g63 && !d->_cg63);
  803a04:	e0bffc17 	ldw	r2,-16(fp)
  803a08:	10801c03 	ldbu	r2,112(r2)
  803a0c:	10803fcc 	andi	r2,r2,255
  803a10:	1080201c 	xori	r2,r2,128
  803a14:	10bfe004 	addi	r2,r2,-128
  803a18:	10000c1e 	bne	r2,zero,803a4c <logic+0x2ef0>
  803a1c:	e0bffc17 	ldw	r2,-16(fp)
  803a20:	108025c3 	ldbu	r2,151(r2)
  803a24:	10803fcc 	andi	r2,r2,255
  803a28:	1080201c 	xori	r2,r2,128
  803a2c:	10bfe004 	addi	r2,r2,-128
  803a30:	10000826 	beq	r2,zero,803a54 <logic+0x2ef8>
  803a34:	e0bffc17 	ldw	r2,-16(fp)
  803a38:	10804603 	ldbu	r2,280(r2)
  803a3c:	10803fcc 	andi	r2,r2,255
  803a40:	1080201c 	xori	r2,r2,128
  803a44:	10bfe004 	addi	r2,r2,-128
  803a48:	1000021e 	bne	r2,zero,803a54 <logic+0x2ef8>
  803a4c:	00800044 	movi	r2,1
  803a50:	00000106 	br	803a58 <logic+0x2efc>
  803a54:	0005883a 	mov	r2,zero
  803a58:	1007883a 	mov	r3,r2
  803a5c:	e0bffc17 	ldw	r2,-16(fp)
  803a60:	10c02245 	stb	r3,137(r2)
  d->_g48 = d->_pg103;
  803a64:	e0bffc17 	ldw	r2,-16(fp)
  803a68:	10c05e83 	ldbu	r3,378(r2)
  803a6c:	e0bffc17 	ldw	r2,-16(fp)
  803a70:	10c02305 	stb	r3,140(r2)
  d->_g52 = d->_pg70;
  803a74:	e0bffc17 	ldw	r2,-16(fp)
  803a78:	10c05ec3 	ldbu	r3,379(r2)
  803a7c:	e0bffc17 	ldw	r2,-16(fp)
  803a80:	10c023c5 	stb	r3,143(r2)
  d->_g57 = !(d->_g48 || d->_g52);
  803a84:	e0bffc17 	ldw	r2,-16(fp)
  803a88:	10802303 	ldbu	r2,140(r2)
  803a8c:	10803fcc 	andi	r2,r2,255
  803a90:	1080201c 	xori	r2,r2,128
  803a94:	10bfe004 	addi	r2,r2,-128
  803a98:	1000081e 	bne	r2,zero,803abc <logic+0x2f60>
  803a9c:	e0bffc17 	ldw	r2,-16(fp)
  803aa0:	108023c3 	ldbu	r2,143(r2)
  803aa4:	10803fcc 	andi	r2,r2,255
  803aa8:	1080201c 	xori	r2,r2,128
  803aac:	10bfe004 	addi	r2,r2,-128
  803ab0:	1000021e 	bne	r2,zero,803abc <logic+0x2f60>
  803ab4:	00800044 	movi	r2,1
  803ab8:	00000106 	br	803ac0 <logic+0x2f64>
  803abc:	0005883a 	mov	r2,zero
  803ac0:	1007883a 	mov	r3,r2
  803ac4:	e0bffc17 	ldw	r2,-16(fp)
  803ac8:	10c024c5 	stb	r3,147(r2)
  d->_g54 = d->_pg196;
  803acc:	e0bffc17 	ldw	r2,-16(fp)
  803ad0:	10c05f03 	ldbu	r3,380(r2)
  803ad4:	e0bffc17 	ldw	r2,-16(fp)
  803ad8:	10c02445 	stb	r3,145(r2)
  if (d->_g54) {
  803adc:	e0bffc17 	ldw	r2,-16(fp)
  803ae0:	10802443 	ldbu	r2,145(r2)
  803ae4:	10803fcc 	andi	r2,r2,255
  803ae8:	1080201c 	xori	r2,r2,128
  803aec:	10bfe004 	addi	r2,r2,-128
  803af0:	10001226 	beq	r2,zero,803b3c <logic+0x2fe0>
    d->_Pacemaker_local__region2_PVARP_x += d->deltaT;
  803af4:	e13ffc17 	ldw	r4,-16(fp)
  803af8:	20800f17 	ldw	r2,60(r4)
  803afc:	20c01017 	ldw	r3,64(r4)
  803b00:	e1bffc17 	ldw	r6,-16(fp)
  803b04:	31000617 	ldw	r4,24(r6)
  803b08:	31400717 	ldw	r5,28(r6)
  803b0c:	200d883a 	mov	r6,r4
  803b10:	280f883a 	mov	r7,r5
  803b14:	1009883a 	mov	r4,r2
  803b18:	180b883a 	mov	r5,r3
  803b1c:	0807f700 	call	807f70 <__adddf3>
  803b20:	1009883a 	mov	r4,r2
  803b24:	180b883a 	mov	r5,r3
  803b28:	2005883a 	mov	r2,r4
  803b2c:	2807883a 	mov	r3,r5
  803b30:	e13ffc17 	ldw	r4,-16(fp)
  803b34:	20800f15 	stw	r2,60(r4)
  803b38:	20c01015 	stw	r3,64(r4)
  }
  d->_g63 = d->_pg83;
  803b3c:	e0bffc17 	ldw	r2,-16(fp)
  803b40:	10c05f43 	ldbu	r3,381(r2)
  803b44:	e0bffc17 	ldw	r2,-16(fp)
  803b48:	10c025c5 	stb	r3,151(r2)
  d->_cg97 = !(d->_Pacemaker_local__region2_PVARP_x >= d->PVARP);
  803b4c:	e0bffc17 	ldw	r2,-16(fp)
  803b50:	14000f17 	ldw	r16,60(r2)
  803b54:	14401017 	ldw	r17,64(r2)
  803b58:	e0bffc17 	ldw	r2,-16(fp)
  803b5c:	10800217 	ldw	r2,8(r2)
  803b60:	1009883a 	mov	r4,r2
  803b64:	0809a000 	call	809a00 <__floatsidf>
  803b68:	1009883a 	mov	r4,r2
  803b6c:	180b883a 	mov	r5,r3
  803b70:	04800044 	movi	r18,1
  803b74:	200d883a 	mov	r6,r4
  803b78:	280f883a 	mov	r7,r5
  803b7c:	8009883a 	mov	r4,r16
  803b80:	880b883a 	mov	r5,r17
  803b84:	080881c0 	call	80881c <__gedf2>
  803b88:	1000010e 	bge	r2,zero,803b90 <logic+0x3034>
  803b8c:	0025883a 	mov	r18,zero
  803b90:	9080005c 	xori	r2,r18,1
  803b94:	10803fcc 	andi	r2,r2,255
  803b98:	1007883a 	mov	r3,r2
  803b9c:	e0bffc17 	ldw	r2,-16(fp)
  803ba0:	10c04a45 	stb	r3,297(r2)
  d->_g35 = d->_g63 && d->_cg97;
  803ba4:	e0bffc17 	ldw	r2,-16(fp)
  803ba8:	108025c3 	ldbu	r2,151(r2)
  803bac:	10803fcc 	andi	r2,r2,255
  803bb0:	1080201c 	xori	r2,r2,128
  803bb4:	10bfe004 	addi	r2,r2,-128
  803bb8:	10000826 	beq	r2,zero,803bdc <logic+0x3080>
  803bbc:	e0bffc17 	ldw	r2,-16(fp)
  803bc0:	10804a43 	ldbu	r2,297(r2)
  803bc4:	10803fcc 	andi	r2,r2,255
  803bc8:	1080201c 	xori	r2,r2,128
  803bcc:	10bfe004 	addi	r2,r2,-128
  803bd0:	10000226 	beq	r2,zero,803bdc <logic+0x3080>
  803bd4:	00800044 	movi	r2,1
  803bd8:	00000106 	br	803be0 <logic+0x3084>
  803bdc:	0005883a 	mov	r2,zero
  803be0:	1007883a 	mov	r3,r2
  803be4:	e0bffc17 	ldw	r2,-16(fp)
  803be8:	10c020c5 	stb	r3,131(r2)
  if (d->_g35) {
  803bec:	e0bffc17 	ldw	r2,-16(fp)
  803bf0:	108020c3 	ldbu	r2,131(r2)
  803bf4:	10803fcc 	andi	r2,r2,255
  803bf8:	1080201c 	xori	r2,r2,128
  803bfc:	10bfe004 	addi	r2,r2,-128
  803c00:	10000326 	beq	r2,zero,803c10 <logic+0x30b4>
    d->_Pacemaker_local__Atrig4 = 1;
  803c04:	e0bffc17 	ldw	r2,-16(fp)
  803c08:	00c00044 	movi	r3,1
  803c0c:	10c01945 	stb	r3,101(r2)
  }
  d->_g100 = d->_g63 && !d->_cg97;
  803c10:	e0bffc17 	ldw	r2,-16(fp)
  803c14:	108025c3 	ldbu	r2,151(r2)
  803c18:	10803fcc 	andi	r2,r2,255
  803c1c:	1080201c 	xori	r2,r2,128
  803c20:	10bfe004 	addi	r2,r2,-128
  803c24:	10000826 	beq	r2,zero,803c48 <logic+0x30ec>
  803c28:	e0bffc17 	ldw	r2,-16(fp)
  803c2c:	10804a43 	ldbu	r2,297(r2)
  803c30:	10803fcc 	andi	r2,r2,255
  803c34:	1080201c 	xori	r2,r2,128
  803c38:	10bfe004 	addi	r2,r2,-128
  803c3c:	1000021e 	bne	r2,zero,803c48 <logic+0x30ec>
  803c40:	00800044 	movi	r2,1
  803c44:	00000106 	br	803c4c <logic+0x30f0>
  803c48:	0005883a 	mov	r2,zero
  803c4c:	1007883a 	mov	r3,r2
  803c50:	e0bffc17 	ldw	r2,-16(fp)
  803c54:	10c02c45 	stb	r3,177(r2)
  d->_cg100 = d->_Pacemaker_local__region2_PVARP_x >= d->PVARP;
  803c58:	e0bffc17 	ldw	r2,-16(fp)
  803c5c:	14000f17 	ldw	r16,60(r2)
  803c60:	14401017 	ldw	r17,64(r2)
  803c64:	e0bffc17 	ldw	r2,-16(fp)
  803c68:	10800217 	ldw	r2,8(r2)
  803c6c:	1009883a 	mov	r4,r2
  803c70:	0809a000 	call	809a00 <__floatsidf>
  803c74:	1009883a 	mov	r4,r2
  803c78:	180b883a 	mov	r5,r3
  803c7c:	04800044 	movi	r18,1
  803c80:	200d883a 	mov	r6,r4
  803c84:	280f883a 	mov	r7,r5
  803c88:	8009883a 	mov	r4,r16
  803c8c:	880b883a 	mov	r5,r17
  803c90:	080881c0 	call	80881c <__gedf2>
  803c94:	1000010e 	bge	r2,zero,803c9c <logic+0x3140>
  803c98:	0025883a 	mov	r18,zero
  803c9c:	9007883a 	mov	r3,r18
  803ca0:	e0bffc17 	ldw	r2,-16(fp)
  803ca4:	10c04a05 	stb	r3,296(r2)
  d->_g101 = d->_g100 && d->_cg100;
  803ca8:	e0bffc17 	ldw	r2,-16(fp)
  803cac:	10802c43 	ldbu	r2,177(r2)
  803cb0:	10803fcc 	andi	r2,r2,255
  803cb4:	1080201c 	xori	r2,r2,128
  803cb8:	10bfe004 	addi	r2,r2,-128
  803cbc:	10000826 	beq	r2,zero,803ce0 <logic+0x3184>
  803cc0:	e0bffc17 	ldw	r2,-16(fp)
  803cc4:	10804a03 	ldbu	r2,296(r2)
  803cc8:	10803fcc 	andi	r2,r2,255
  803ccc:	1080201c 	xori	r2,r2,128
  803cd0:	10bfe004 	addi	r2,r2,-128
  803cd4:	10000226 	beq	r2,zero,803ce0 <logic+0x3184>
  803cd8:	00800044 	movi	r2,1
  803cdc:	00000106 	br	803ce4 <logic+0x3188>
  803ce0:	0005883a 	mov	r2,zero
  803ce4:	1007883a 	mov	r3,r2
  803ce8:	e0bffc17 	ldw	r2,-16(fp)
  803cec:	10c02c85 	stb	r3,178(r2)
  if (d->_g101) {
  803cf0:	e0bffc17 	ldw	r2,-16(fp)
  803cf4:	10802c83 	ldbu	r2,178(r2)
  803cf8:	10803fcc 	andi	r2,r2,255
  803cfc:	1080201c 	xori	r2,r2,128
  803d00:	10bfe004 	addi	r2,r2,-128
  803d04:	10000326 	beq	r2,zero,803d14 <logic+0x31b8>
    d->_Pacemaker_local__Atrig5 = 1;
  803d08:	e0bffc17 	ldw	r2,-16(fp)
  803d0c:	00c00044 	movi	r3,1
  803d10:	10c01985 	stb	r3,102(r2)
  }
  d->_g82 = d->_g52 || d->_g48;
  803d14:	e0bffc17 	ldw	r2,-16(fp)
  803d18:	108023c3 	ldbu	r2,143(r2)
  803d1c:	10803fcc 	andi	r2,r2,255
  803d20:	1080201c 	xori	r2,r2,128
  803d24:	10bfe004 	addi	r2,r2,-128
  803d28:	1000061e 	bne	r2,zero,803d44 <logic+0x31e8>
  803d2c:	e0bffc17 	ldw	r2,-16(fp)
  803d30:	10802303 	ldbu	r2,140(r2)
  803d34:	10803fcc 	andi	r2,r2,255
  803d38:	1080201c 	xori	r2,r2,128
  803d3c:	10bfe004 	addi	r2,r2,-128
  803d40:	10000226 	beq	r2,zero,803d4c <logic+0x31f0>
  803d44:	00800044 	movi	r2,1
  803d48:	00000106 	br	803d50 <logic+0x31f4>
  803d4c:	0005883a 	mov	r2,zero
  803d50:	1007883a 	mov	r3,r2
  803d54:	e0bffc17 	ldw	r2,-16(fp)
  803d58:	10c02905 	stb	r3,164(r2)
  d->_cg77 = d->_Pacemaker_local__region2_PVARP_x < d->PVARP;
  803d5c:	e0bffc17 	ldw	r2,-16(fp)
  803d60:	14000f17 	ldw	r16,60(r2)
  803d64:	14401017 	ldw	r17,64(r2)
  803d68:	e0bffc17 	ldw	r2,-16(fp)
  803d6c:	10800217 	ldw	r2,8(r2)
  803d70:	1009883a 	mov	r4,r2
  803d74:	0809a000 	call	809a00 <__floatsidf>
  803d78:	1009883a 	mov	r4,r2
  803d7c:	180b883a 	mov	r5,r3
  803d80:	04800044 	movi	r18,1
  803d84:	200d883a 	mov	r6,r4
  803d88:	280f883a 	mov	r7,r5
  803d8c:	8009883a 	mov	r4,r16
  803d90:	880b883a 	mov	r5,r17
  803d94:	08088f80 	call	8088f8 <__ledf2>
  803d98:	10000116 	blt	r2,zero,803da0 <logic+0x3244>
  803d9c:	0025883a 	mov	r18,zero
  803da0:	9007883a 	mov	r3,r18
  803da4:	e0bffc17 	ldw	r2,-16(fp)
  803da8:	10c047c5 	stb	r3,287(r2)
  d->_g76 = d->_g82 && d->_cg77;
  803dac:	e0bffc17 	ldw	r2,-16(fp)
  803db0:	10802903 	ldbu	r2,164(r2)
  803db4:	10803fcc 	andi	r2,r2,255
  803db8:	1080201c 	xori	r2,r2,128
  803dbc:	10bfe004 	addi	r2,r2,-128
  803dc0:	10000826 	beq	r2,zero,803de4 <logic+0x3288>
  803dc4:	e0bffc17 	ldw	r2,-16(fp)
  803dc8:	108047c3 	ldbu	r2,287(r2)
  803dcc:	10803fcc 	andi	r2,r2,255
  803dd0:	1080201c 	xori	r2,r2,128
  803dd4:	10bfe004 	addi	r2,r2,-128
  803dd8:	10000226 	beq	r2,zero,803de4 <logic+0x3288>
  803ddc:	00800044 	movi	r2,1
  803de0:	00000106 	br	803de8 <logic+0x328c>
  803de4:	0005883a 	mov	r2,zero
  803de8:	1007883a 	mov	r3,r2
  803dec:	e0bffc17 	ldw	r2,-16(fp)
  803df0:	10c027c5 	stb	r3,159(r2)
  if (d->_g76) {
  803df4:	e0bffc17 	ldw	r2,-16(fp)
  803df8:	108027c3 	ldbu	r2,159(r2)
  803dfc:	10803fcc 	andi	r2,r2,255
  803e00:	1080201c 	xori	r2,r2,128
  803e04:	10bfe004 	addi	r2,r2,-128
  803e08:	10003426 	beq	r2,zero,803edc <logic+0x3380>
    d->sleepT = (d->sleepT < (d->PVARP - d->_Pacemaker_local__region2_PVARP_x)) ? d->sleepT : (d->PVARP - d->_Pacemaker_local__region2_PVARP_x);
  803e0c:	e0bffc17 	ldw	r2,-16(fp)
  803e10:	14000817 	ldw	r16,32(r2)
  803e14:	14400917 	ldw	r17,36(r2)
  803e18:	e0bffc17 	ldw	r2,-16(fp)
  803e1c:	10800217 	ldw	r2,8(r2)
  803e20:	1009883a 	mov	r4,r2
  803e24:	0809a000 	call	809a00 <__floatsidf>
  803e28:	1011883a 	mov	r8,r2
  803e2c:	1813883a 	mov	r9,r3
  803e30:	e13ffc17 	ldw	r4,-16(fp)
  803e34:	20800f17 	ldw	r2,60(r4)
  803e38:	20c01017 	ldw	r3,64(r4)
  803e3c:	100d883a 	mov	r6,r2
  803e40:	180f883a 	mov	r7,r3
  803e44:	4009883a 	mov	r4,r8
  803e48:	480b883a 	mov	r5,r9
  803e4c:	08091040 	call	809104 <__subdf3>
  803e50:	1009883a 	mov	r4,r2
  803e54:	180b883a 	mov	r5,r3
  803e58:	2005883a 	mov	r2,r4
  803e5c:	2807883a 	mov	r3,r5
  803e60:	100d883a 	mov	r6,r2
  803e64:	180f883a 	mov	r7,r3
  803e68:	8009883a 	mov	r4,r16
  803e6c:	880b883a 	mov	r5,r17
  803e70:	08088f80 	call	8088f8 <__ledf2>
  803e74:	1000040e 	bge	r2,zero,803e88 <logic+0x332c>
  803e78:	e13ffc17 	ldw	r4,-16(fp)
  803e7c:	20800817 	ldw	r2,32(r4)
  803e80:	20c00917 	ldw	r3,36(r4)
  803e84:	00001206 	br	803ed0 <logic+0x3374>
  803e88:	e0bffc17 	ldw	r2,-16(fp)
  803e8c:	10800217 	ldw	r2,8(r2)
  803e90:	1009883a 	mov	r4,r2
  803e94:	0809a000 	call	809a00 <__floatsidf>
  803e98:	1011883a 	mov	r8,r2
  803e9c:	1813883a 	mov	r9,r3
  803ea0:	e13ffc17 	ldw	r4,-16(fp)
  803ea4:	20800f17 	ldw	r2,60(r4)
  803ea8:	20c01017 	ldw	r3,64(r4)
  803eac:	100d883a 	mov	r6,r2
  803eb0:	180f883a 	mov	r7,r3
  803eb4:	4009883a 	mov	r4,r8
  803eb8:	480b883a 	mov	r5,r9
  803ebc:	08091040 	call	809104 <__subdf3>
  803ec0:	1009883a 	mov	r4,r2
  803ec4:	180b883a 	mov	r5,r3
  803ec8:	2005883a 	mov	r2,r4
  803ecc:	2807883a 	mov	r3,r5
  803ed0:	e13ffc17 	ldw	r4,-16(fp)
  803ed4:	20800815 	stw	r2,32(r4)
  803ed8:	20c00915 	stw	r3,36(r4)
  }
  d->_cg78 = d->_Pacemaker_local__Atrig4 || d->_Pacemaker_local__Atrig5;
  803edc:	e0bffc17 	ldw	r2,-16(fp)
  803ee0:	10801943 	ldbu	r2,101(r2)
  803ee4:	10803fcc 	andi	r2,r2,255
  803ee8:	1080201c 	xori	r2,r2,128
  803eec:	10bfe004 	addi	r2,r2,-128
  803ef0:	1000061e 	bne	r2,zero,803f0c <logic+0x33b0>
  803ef4:	e0bffc17 	ldw	r2,-16(fp)
  803ef8:	10801983 	ldbu	r2,102(r2)
  803efc:	10803fcc 	andi	r2,r2,255
  803f00:	1080201c 	xori	r2,r2,128
  803f04:	10bfe004 	addi	r2,r2,-128
  803f08:	10000226 	beq	r2,zero,803f14 <logic+0x33b8>
  803f0c:	00800044 	movi	r2,1
  803f10:	00000106 	br	803f18 <logic+0x33bc>
  803f14:	0005883a 	mov	r2,zero
  803f18:	1007883a 	mov	r3,r2
  803f1c:	e0bffc17 	ldw	r2,-16(fp)
  803f20:	10c04785 	stb	r3,286(r2)
  d->_g77 = d->_g82 && !d->_cg77;
  803f24:	e0bffc17 	ldw	r2,-16(fp)
  803f28:	10802903 	ldbu	r2,164(r2)
  803f2c:	10803fcc 	andi	r2,r2,255
  803f30:	1080201c 	xori	r2,r2,128
  803f34:	10bfe004 	addi	r2,r2,-128
  803f38:	10000826 	beq	r2,zero,803f5c <logic+0x3400>
  803f3c:	e0bffc17 	ldw	r2,-16(fp)
  803f40:	108047c3 	ldbu	r2,287(r2)
  803f44:	10803fcc 	andi	r2,r2,255
  803f48:	1080201c 	xori	r2,r2,128
  803f4c:	10bfe004 	addi	r2,r2,-128
  803f50:	1000021e 	bne	r2,zero,803f5c <logic+0x3400>
  803f54:	00800044 	movi	r2,1
  803f58:	00000106 	br	803f60 <logic+0x3404>
  803f5c:	0005883a 	mov	r2,zero
  803f60:	1007883a 	mov	r3,r2
  803f64:	e0bffc17 	ldw	r2,-16(fp)
  803f68:	10c02805 	stb	r3,160(r2)
  d->_cg80 = d->_Pacemaker_local__Atrig4 || d->_Pacemaker_local__Atrig5;
  803f6c:	e0bffc17 	ldw	r2,-16(fp)
  803f70:	10801943 	ldbu	r2,101(r2)
  803f74:	10803fcc 	andi	r2,r2,255
  803f78:	1080201c 	xori	r2,r2,128
  803f7c:	10bfe004 	addi	r2,r2,-128
  803f80:	1000061e 	bne	r2,zero,803f9c <logic+0x3440>
  803f84:	e0bffc17 	ldw	r2,-16(fp)
  803f88:	10801983 	ldbu	r2,102(r2)
  803f8c:	10803fcc 	andi	r2,r2,255
  803f90:	1080201c 	xori	r2,r2,128
  803f94:	10bfe004 	addi	r2,r2,-128
  803f98:	10000226 	beq	r2,zero,803fa4 <logic+0x3448>
  803f9c:	00800044 	movi	r2,1
  803fa0:	00000106 	br	803fa8 <logic+0x344c>
  803fa4:	0005883a 	mov	r2,zero
  803fa8:	1007883a 	mov	r3,r2
  803fac:	e0bffc17 	ldw	r2,-16(fp)
  803fb0:	10c04805 	stb	r3,288(r2)
  d->_g79 = (d->_g76 && d->_cg78) || (d->_g77 && d->_cg80);
  803fb4:	e0bffc17 	ldw	r2,-16(fp)
  803fb8:	108027c3 	ldbu	r2,159(r2)
  803fbc:	10803fcc 	andi	r2,r2,255
  803fc0:	1080201c 	xori	r2,r2,128
  803fc4:	10bfe004 	addi	r2,r2,-128
  803fc8:	10000626 	beq	r2,zero,803fe4 <logic+0x3488>
  803fcc:	e0bffc17 	ldw	r2,-16(fp)
  803fd0:	10804783 	ldbu	r2,286(r2)
  803fd4:	10803fcc 	andi	r2,r2,255
  803fd8:	1080201c 	xori	r2,r2,128
  803fdc:	10bfe004 	addi	r2,r2,-128
  803fe0:	10000c1e 	bne	r2,zero,804014 <logic+0x34b8>
  803fe4:	e0bffc17 	ldw	r2,-16(fp)
  803fe8:	10802803 	ldbu	r2,160(r2)
  803fec:	10803fcc 	andi	r2,r2,255
  803ff0:	1080201c 	xori	r2,r2,128
  803ff4:	10bfe004 	addi	r2,r2,-128
  803ff8:	10000826 	beq	r2,zero,80401c <logic+0x34c0>
  803ffc:	e0bffc17 	ldw	r2,-16(fp)
  804000:	10804803 	ldbu	r2,288(r2)
  804004:	10803fcc 	andi	r2,r2,255
  804008:	1080201c 	xori	r2,r2,128
  80400c:	10bfe004 	addi	r2,r2,-128
  804010:	10000226 	beq	r2,zero,80401c <logic+0x34c0>
  804014:	00800044 	movi	r2,1
  804018:	00000106 	br	804020 <logic+0x34c4>
  80401c:	0005883a 	mov	r2,zero
  804020:	1007883a 	mov	r3,r2
  804024:	e0bffc17 	ldw	r2,-16(fp)
  804028:	10c02885 	stb	r3,162(r2)
  d->_g93 = d->_pg80;
  80402c:	e0bffc17 	ldw	r2,-16(fp)
  804030:	10c05f83 	ldbu	r3,382(r2)
  804034:	e0bffc17 	ldw	r2,-16(fp)
  804038:	10c02b05 	stb	r3,172(r2)
  d->_g87 = d->_pg78;
  80403c:	e0bffc17 	ldw	r2,-16(fp)
  804040:	10c05fc3 	ldbu	r3,383(r2)
  804044:	e0bffc17 	ldw	r2,-16(fp)
  804048:	10c029c5 	stb	r3,167(r2)
  d->_g90_e2 = !(d->_g93 || d->_g87);
  80404c:	e0bffc17 	ldw	r2,-16(fp)
  804050:	10802b03 	ldbu	r2,172(r2)
  804054:	10803fcc 	andi	r2,r2,255
  804058:	1080201c 	xori	r2,r2,128
  80405c:	10bfe004 	addi	r2,r2,-128
  804060:	1000081e 	bne	r2,zero,804084 <logic+0x3528>
  804064:	e0bffc17 	ldw	r2,-16(fp)
  804068:	108029c3 	ldbu	r2,167(r2)
  80406c:	10803fcc 	andi	r2,r2,255
  804070:	1080201c 	xori	r2,r2,128
  804074:	10bfe004 	addi	r2,r2,-128
  804078:	1000021e 	bne	r2,zero,804084 <logic+0x3528>
  80407c:	00800044 	movi	r2,1
  804080:	00000106 	br	804088 <logic+0x352c>
  804084:	0005883a 	mov	r2,zero
  804088:	1007883a 	mov	r3,r2
  80408c:	e0bffc17 	ldw	r2,-16(fp)
  804090:	10c05705 	stb	r3,348(r2)
  d->_g93 = d->_g87 || d->_g93;
  804094:	e0bffc17 	ldw	r2,-16(fp)
  804098:	108029c3 	ldbu	r2,167(r2)
  80409c:	10803fcc 	andi	r2,r2,255
  8040a0:	1080201c 	xori	r2,r2,128
  8040a4:	10bfe004 	addi	r2,r2,-128
  8040a8:	1000061e 	bne	r2,zero,8040c4 <logic+0x3568>
  8040ac:	e0bffc17 	ldw	r2,-16(fp)
  8040b0:	10802b03 	ldbu	r2,172(r2)
  8040b4:	10803fcc 	andi	r2,r2,255
  8040b8:	1080201c 	xori	r2,r2,128
  8040bc:	10bfe004 	addi	r2,r2,-128
  8040c0:	10000226 	beq	r2,zero,8040cc <logic+0x3570>
  8040c4:	00800044 	movi	r2,1
  8040c8:	00000106 	br	8040d0 <logic+0x3574>
  8040cc:	0005883a 	mov	r2,zero
  8040d0:	1007883a 	mov	r3,r2
  8040d4:	e0bffc17 	ldw	r2,-16(fp)
  8040d8:	10c02b05 	stb	r3,172(r2)
  d->_cg88 = d->_Pacemaker_local__region2_PVARP_x < d->PVARP;
  8040dc:	e0bffc17 	ldw	r2,-16(fp)
  8040e0:	14000f17 	ldw	r16,60(r2)
  8040e4:	14401017 	ldw	r17,64(r2)
  8040e8:	e0bffc17 	ldw	r2,-16(fp)
  8040ec:	10800217 	ldw	r2,8(r2)
  8040f0:	1009883a 	mov	r4,r2
  8040f4:	0809a000 	call	809a00 <__floatsidf>
  8040f8:	1009883a 	mov	r4,r2
  8040fc:	180b883a 	mov	r5,r3
  804100:	04800044 	movi	r18,1
  804104:	200d883a 	mov	r6,r4
  804108:	280f883a 	mov	r7,r5
  80410c:	8009883a 	mov	r4,r16
  804110:	880b883a 	mov	r5,r17
  804114:	08088f80 	call	8088f8 <__ledf2>
  804118:	10000116 	blt	r2,zero,804120 <logic+0x35c4>
  80411c:	0025883a 	mov	r18,zero
  804120:	9007883a 	mov	r3,r18
  804124:	e0bffc17 	ldw	r2,-16(fp)
  804128:	10c04945 	stb	r3,293(r2)
  d->_g87 = d->_g93 && d->_cg88;
  80412c:	e0bffc17 	ldw	r2,-16(fp)
  804130:	10802b03 	ldbu	r2,172(r2)
  804134:	10803fcc 	andi	r2,r2,255
  804138:	1080201c 	xori	r2,r2,128
  80413c:	10bfe004 	addi	r2,r2,-128
  804140:	10000826 	beq	r2,zero,804164 <logic+0x3608>
  804144:	e0bffc17 	ldw	r2,-16(fp)
  804148:	10804943 	ldbu	r2,293(r2)
  80414c:	10803fcc 	andi	r2,r2,255
  804150:	1080201c 	xori	r2,r2,128
  804154:	10bfe004 	addi	r2,r2,-128
  804158:	10000226 	beq	r2,zero,804164 <logic+0x3608>
  80415c:	00800044 	movi	r2,1
  804160:	00000106 	br	804168 <logic+0x360c>
  804164:	0005883a 	mov	r2,zero
  804168:	1007883a 	mov	r3,r2
  80416c:	e0bffc17 	ldw	r2,-16(fp)
  804170:	10c029c5 	stb	r3,167(r2)
  if (d->_g87) {
  804174:	e0bffc17 	ldw	r2,-16(fp)
  804178:	108029c3 	ldbu	r2,167(r2)
  80417c:	10803fcc 	andi	r2,r2,255
  804180:	1080201c 	xori	r2,r2,128
  804184:	10bfe004 	addi	r2,r2,-128
  804188:	10003426 	beq	r2,zero,80425c <logic+0x3700>
    d->sleepT = (d->sleepT < (d->PVARP - d->_Pacemaker_local__region2_PVARP_x)) ? d->sleepT : (d->PVARP - d->_Pacemaker_local__region2_PVARP_x);
  80418c:	e0bffc17 	ldw	r2,-16(fp)
  804190:	14000817 	ldw	r16,32(r2)
  804194:	14400917 	ldw	r17,36(r2)
  804198:	e0bffc17 	ldw	r2,-16(fp)
  80419c:	10800217 	ldw	r2,8(r2)
  8041a0:	1009883a 	mov	r4,r2
  8041a4:	0809a000 	call	809a00 <__floatsidf>
  8041a8:	1011883a 	mov	r8,r2
  8041ac:	1813883a 	mov	r9,r3
  8041b0:	e13ffc17 	ldw	r4,-16(fp)
  8041b4:	20800f17 	ldw	r2,60(r4)
  8041b8:	20c01017 	ldw	r3,64(r4)
  8041bc:	100d883a 	mov	r6,r2
  8041c0:	180f883a 	mov	r7,r3
  8041c4:	4009883a 	mov	r4,r8
  8041c8:	480b883a 	mov	r5,r9
  8041cc:	08091040 	call	809104 <__subdf3>
  8041d0:	1009883a 	mov	r4,r2
  8041d4:	180b883a 	mov	r5,r3
  8041d8:	2005883a 	mov	r2,r4
  8041dc:	2807883a 	mov	r3,r5
  8041e0:	100d883a 	mov	r6,r2
  8041e4:	180f883a 	mov	r7,r3
  8041e8:	8009883a 	mov	r4,r16
  8041ec:	880b883a 	mov	r5,r17
  8041f0:	08088f80 	call	8088f8 <__ledf2>
  8041f4:	1000040e 	bge	r2,zero,804208 <logic+0x36ac>
  8041f8:	e13ffc17 	ldw	r4,-16(fp)
  8041fc:	20800817 	ldw	r2,32(r4)
  804200:	20c00917 	ldw	r3,36(r4)
  804204:	00001206 	br	804250 <logic+0x36f4>
  804208:	e0bffc17 	ldw	r2,-16(fp)
  80420c:	10800217 	ldw	r2,8(r2)
  804210:	1009883a 	mov	r4,r2
  804214:	0809a000 	call	809a00 <__floatsidf>
  804218:	1011883a 	mov	r8,r2
  80421c:	1813883a 	mov	r9,r3
  804220:	e13ffc17 	ldw	r4,-16(fp)
  804224:	20800f17 	ldw	r2,60(r4)
  804228:	20c01017 	ldw	r3,64(r4)
  80422c:	100d883a 	mov	r6,r2
  804230:	180f883a 	mov	r7,r3
  804234:	4009883a 	mov	r4,r8
  804238:	480b883a 	mov	r5,r9
  80423c:	08091040 	call	809104 <__subdf3>
  804240:	1009883a 	mov	r4,r2
  804244:	180b883a 	mov	r5,r3
  804248:	2005883a 	mov	r2,r4
  80424c:	2807883a 	mov	r3,r5
  804250:	e13ffc17 	ldw	r4,-16(fp)
  804254:	20800815 	stw	r2,32(r4)
  804258:	20c00915 	stw	r3,36(r4)
  }
  d->_cg89 = d->_Pacemaker_local__Atrig4 || d->_Pacemaker_local__Atrig5;
  80425c:	e0bffc17 	ldw	r2,-16(fp)
  804260:	10801943 	ldbu	r2,101(r2)
  804264:	10803fcc 	andi	r2,r2,255
  804268:	1080201c 	xori	r2,r2,128
  80426c:	10bfe004 	addi	r2,r2,-128
  804270:	1000061e 	bne	r2,zero,80428c <logic+0x3730>
  804274:	e0bffc17 	ldw	r2,-16(fp)
  804278:	10801983 	ldbu	r2,102(r2)
  80427c:	10803fcc 	andi	r2,r2,255
  804280:	1080201c 	xori	r2,r2,128
  804284:	10bfe004 	addi	r2,r2,-128
  804288:	10000226 	beq	r2,zero,804294 <logic+0x3738>
  80428c:	00800044 	movi	r2,1
  804290:	00000106 	br	804298 <logic+0x373c>
  804294:	0005883a 	mov	r2,zero
  804298:	1007883a 	mov	r3,r2
  80429c:	e0bffc17 	ldw	r2,-16(fp)
  8042a0:	10c04905 	stb	r3,292(r2)
  d->_g88 = d->_g93 && !d->_cg88;
  8042a4:	e0bffc17 	ldw	r2,-16(fp)
  8042a8:	10802b03 	ldbu	r2,172(r2)
  8042ac:	10803fcc 	andi	r2,r2,255
  8042b0:	1080201c 	xori	r2,r2,128
  8042b4:	10bfe004 	addi	r2,r2,-128
  8042b8:	10000826 	beq	r2,zero,8042dc <logic+0x3780>
  8042bc:	e0bffc17 	ldw	r2,-16(fp)
  8042c0:	10804943 	ldbu	r2,293(r2)
  8042c4:	10803fcc 	andi	r2,r2,255
  8042c8:	1080201c 	xori	r2,r2,128
  8042cc:	10bfe004 	addi	r2,r2,-128
  8042d0:	1000021e 	bne	r2,zero,8042dc <logic+0x3780>
  8042d4:	00800044 	movi	r2,1
  8042d8:	00000106 	br	8042e0 <logic+0x3784>
  8042dc:	0005883a 	mov	r2,zero
  8042e0:	1007883a 	mov	r3,r2
  8042e4:	e0bffc17 	ldw	r2,-16(fp)
  8042e8:	10c02a05 	stb	r3,168(r2)
  d->_cg91 = d->_Pacemaker_local__Atrig4 || d->_Pacemaker_local__Atrig5;
  8042ec:	e0bffc17 	ldw	r2,-16(fp)
  8042f0:	10801943 	ldbu	r2,101(r2)
  8042f4:	10803fcc 	andi	r2,r2,255
  8042f8:	1080201c 	xori	r2,r2,128
  8042fc:	10bfe004 	addi	r2,r2,-128
  804300:	1000061e 	bne	r2,zero,80431c <logic+0x37c0>
  804304:	e0bffc17 	ldw	r2,-16(fp)
  804308:	10801983 	ldbu	r2,102(r2)
  80430c:	10803fcc 	andi	r2,r2,255
  804310:	1080201c 	xori	r2,r2,128
  804314:	10bfe004 	addi	r2,r2,-128
  804318:	10000226 	beq	r2,zero,804324 <logic+0x37c8>
  80431c:	00800044 	movi	r2,1
  804320:	00000106 	br	804328 <logic+0x37cc>
  804324:	0005883a 	mov	r2,zero
  804328:	1007883a 	mov	r3,r2
  80432c:	e0bffc17 	ldw	r2,-16(fp)
  804330:	10c04985 	stb	r3,294(r2)
  d->_g90 = (d->_g87 && d->_cg89) || (d->_g88 && d->_cg91);
  804334:	e0bffc17 	ldw	r2,-16(fp)
  804338:	108029c3 	ldbu	r2,167(r2)
  80433c:	10803fcc 	andi	r2,r2,255
  804340:	1080201c 	xori	r2,r2,128
  804344:	10bfe004 	addi	r2,r2,-128
  804348:	10000626 	beq	r2,zero,804364 <logic+0x3808>
  80434c:	e0bffc17 	ldw	r2,-16(fp)
  804350:	10804903 	ldbu	r2,292(r2)
  804354:	10803fcc 	andi	r2,r2,255
  804358:	1080201c 	xori	r2,r2,128
  80435c:	10bfe004 	addi	r2,r2,-128
  804360:	10000c1e 	bne	r2,zero,804394 <logic+0x3838>
  804364:	e0bffc17 	ldw	r2,-16(fp)
  804368:	10802a03 	ldbu	r2,168(r2)
  80436c:	10803fcc 	andi	r2,r2,255
  804370:	1080201c 	xori	r2,r2,128
  804374:	10bfe004 	addi	r2,r2,-128
  804378:	10000826 	beq	r2,zero,80439c <logic+0x3840>
  80437c:	e0bffc17 	ldw	r2,-16(fp)
  804380:	10804983 	ldbu	r2,294(r2)
  804384:	10803fcc 	andi	r2,r2,255
  804388:	1080201c 	xori	r2,r2,128
  80438c:	10bfe004 	addi	r2,r2,-128
  804390:	10000226 	beq	r2,zero,80439c <logic+0x3840>
  804394:	00800044 	movi	r2,1
  804398:	00000106 	br	8043a0 <logic+0x3844>
  80439c:	0005883a 	mov	r2,zero
  8043a0:	1007883a 	mov	r3,r2
  8043a4:	e0bffc17 	ldw	r2,-16(fp)
  8043a8:	10c02a85 	stb	r3,170(r2)
  d->_g97 = !d->_g63;
  8043ac:	e0bffc17 	ldw	r2,-16(fp)
  8043b0:	108025c3 	ldbu	r2,151(r2)
  8043b4:	10803fcc 	andi	r2,r2,255
  8043b8:	1080201c 	xori	r2,r2,128
  8043bc:	10bfe004 	addi	r2,r2,-128
  8043c0:	1005003a 	cmpeq	r2,r2,zero
  8043c4:	1007883a 	mov	r3,r2
  8043c8:	e0bffc17 	ldw	r2,-16(fp)
  8043cc:	10c02b85 	stb	r3,174(r2)
  d->_g101 = d->_g35 || d->_g101;
  8043d0:	e0bffc17 	ldw	r2,-16(fp)
  8043d4:	108020c3 	ldbu	r2,131(r2)
  8043d8:	10803fcc 	andi	r2,r2,255
  8043dc:	1080201c 	xori	r2,r2,128
  8043e0:	10bfe004 	addi	r2,r2,-128
  8043e4:	1000061e 	bne	r2,zero,804400 <logic+0x38a4>
  8043e8:	e0bffc17 	ldw	r2,-16(fp)
  8043ec:	10802c83 	ldbu	r2,178(r2)
  8043f0:	10803fcc 	andi	r2,r2,255
  8043f4:	1080201c 	xori	r2,r2,128
  8043f8:	10bfe004 	addi	r2,r2,-128
  8043fc:	10000226 	beq	r2,zero,804408 <logic+0x38ac>
  804400:	00800044 	movi	r2,1
  804404:	00000106 	br	80440c <logic+0x38b0>
  804408:	0005883a 	mov	r2,zero
  80440c:	1007883a 	mov	r3,r2
  804410:	e0bffc17 	ldw	r2,-16(fp)
  804414:	10c02c85 	stb	r3,178(r2)
  d->_g98 = (d->_g57 || d->_g79) && (d->_g90_e2 || d->_g90) && (d->_g97 || d->_g101) && (d->_g79 || d->_g90 || d->_g101);
  804418:	e0bffc17 	ldw	r2,-16(fp)
  80441c:	108024c3 	ldbu	r2,147(r2)
  804420:	10803fcc 	andi	r2,r2,255
  804424:	1080201c 	xori	r2,r2,128
  804428:	10bfe004 	addi	r2,r2,-128
  80442c:	1000061e 	bne	r2,zero,804448 <logic+0x38ec>
  804430:	e0bffc17 	ldw	r2,-16(fp)
  804434:	10802883 	ldbu	r2,162(r2)
  804438:	10803fcc 	andi	r2,r2,255
  80443c:	1080201c 	xori	r2,r2,128
  804440:	10bfe004 	addi	r2,r2,-128
  804444:	10002c26 	beq	r2,zero,8044f8 <logic+0x399c>
  804448:	e0bffc17 	ldw	r2,-16(fp)
  80444c:	10805703 	ldbu	r2,348(r2)
  804450:	10803fcc 	andi	r2,r2,255
  804454:	1080201c 	xori	r2,r2,128
  804458:	10bfe004 	addi	r2,r2,-128
  80445c:	1000061e 	bne	r2,zero,804478 <logic+0x391c>
  804460:	e0bffc17 	ldw	r2,-16(fp)
  804464:	10802a83 	ldbu	r2,170(r2)
  804468:	10803fcc 	andi	r2,r2,255
  80446c:	1080201c 	xori	r2,r2,128
  804470:	10bfe004 	addi	r2,r2,-128
  804474:	10002026 	beq	r2,zero,8044f8 <logic+0x399c>
  804478:	e0bffc17 	ldw	r2,-16(fp)
  80447c:	10802b83 	ldbu	r2,174(r2)
  804480:	10803fcc 	andi	r2,r2,255
  804484:	1080201c 	xori	r2,r2,128
  804488:	10bfe004 	addi	r2,r2,-128
  80448c:	1000061e 	bne	r2,zero,8044a8 <logic+0x394c>
  804490:	e0bffc17 	ldw	r2,-16(fp)
  804494:	10802c83 	ldbu	r2,178(r2)
  804498:	10803fcc 	andi	r2,r2,255
  80449c:	1080201c 	xori	r2,r2,128
  8044a0:	10bfe004 	addi	r2,r2,-128
  8044a4:	10001426 	beq	r2,zero,8044f8 <logic+0x399c>
  8044a8:	e0bffc17 	ldw	r2,-16(fp)
  8044ac:	10802883 	ldbu	r2,162(r2)
  8044b0:	10803fcc 	andi	r2,r2,255
  8044b4:	1080201c 	xori	r2,r2,128
  8044b8:	10bfe004 	addi	r2,r2,-128
  8044bc:	10000c1e 	bne	r2,zero,8044f0 <logic+0x3994>
  8044c0:	e0bffc17 	ldw	r2,-16(fp)
  8044c4:	10802a83 	ldbu	r2,170(r2)
  8044c8:	10803fcc 	andi	r2,r2,255
  8044cc:	1080201c 	xori	r2,r2,128
  8044d0:	10bfe004 	addi	r2,r2,-128
  8044d4:	1000061e 	bne	r2,zero,8044f0 <logic+0x3994>
  8044d8:	e0bffc17 	ldw	r2,-16(fp)
  8044dc:	10802c83 	ldbu	r2,178(r2)
  8044e0:	10803fcc 	andi	r2,r2,255
  8044e4:	1080201c 	xori	r2,r2,128
  8044e8:	10bfe004 	addi	r2,r2,-128
  8044ec:	10000226 	beq	r2,zero,8044f8 <logic+0x399c>
  8044f0:	00800044 	movi	r2,1
  8044f4:	00000106 	br	8044fc <logic+0x39a0>
  8044f8:	0005883a 	mov	r2,zero
  8044fc:	1007883a 	mov	r3,r2
  804500:	e0bffc17 	ldw	r2,-16(fp)
  804504:	10c02bc5 	stb	r3,175(r2)
  d->_cg102 = d->_Pacemaker_local__Atrig4;
  804508:	e0bffc17 	ldw	r2,-16(fp)
  80450c:	10c01943 	ldbu	r3,101(r2)
  804510:	e0bffc17 	ldw	r2,-16(fp)
  804514:	10c04685 	stb	r3,282(r2)
  d->_g90_e2 = d->_pg90;
  804518:	e0bffc17 	ldw	r2,-16(fp)
  80451c:	10c06003 	ldbu	r3,384(r2)
  804520:	e0bffc17 	ldw	r2,-16(fp)
  804524:	10c05705 	stb	r3,348(r2)
  d->_cg70 = d->VS || d->_Pacemaker_local_iVP;
  804528:	e0bffc17 	ldw	r2,-16(fp)
  80452c:	10800a43 	ldbu	r2,41(r2)
  804530:	10803fcc 	andi	r2,r2,255
  804534:	1080201c 	xori	r2,r2,128
  804538:	10bfe004 	addi	r2,r2,-128
  80453c:	1000061e 	bne	r2,zero,804558 <logic+0x39fc>
  804540:	e0bffc17 	ldw	r2,-16(fp)
  804544:	10801743 	ldbu	r2,93(r2)
  804548:	10803fcc 	andi	r2,r2,255
  80454c:	1080201c 	xori	r2,r2,128
  804550:	10bfe004 	addi	r2,r2,-128
  804554:	10000226 	beq	r2,zero,804560 <logic+0x3a04>
  804558:	00800044 	movi	r2,1
  80455c:	00000106 	br	804564 <logic+0x3a08>
  804560:	0005883a 	mov	r2,zero
  804564:	1007883a 	mov	r3,r2
  804568:	e0bffc17 	ldw	r2,-16(fp)
  80456c:	10c046c5 	stb	r3,283(r2)
  d->_g90 = d->_GO || (d->_g98 && !d->_cg102) || (d->_g90_e2 && !d->_cg70);
  804570:	e0bffc17 	ldw	r2,-16(fp)
  804574:	10803fc3 	ldbu	r2,255(r2)
  804578:	10803fcc 	andi	r2,r2,255
  80457c:	1080201c 	xori	r2,r2,128
  804580:	10bfe004 	addi	r2,r2,-128
  804584:	1000181e 	bne	r2,zero,8045e8 <logic+0x3a8c>
  804588:	e0bffc17 	ldw	r2,-16(fp)
  80458c:	10802bc3 	ldbu	r2,175(r2)
  804590:	10803fcc 	andi	r2,r2,255
  804594:	1080201c 	xori	r2,r2,128
  804598:	10bfe004 	addi	r2,r2,-128
  80459c:	10000626 	beq	r2,zero,8045b8 <logic+0x3a5c>
  8045a0:	e0bffc17 	ldw	r2,-16(fp)
  8045a4:	10804683 	ldbu	r2,282(r2)
  8045a8:	10803fcc 	andi	r2,r2,255
  8045ac:	1080201c 	xori	r2,r2,128
  8045b0:	10bfe004 	addi	r2,r2,-128
  8045b4:	10000c26 	beq	r2,zero,8045e8 <logic+0x3a8c>
  8045b8:	e0bffc17 	ldw	r2,-16(fp)
  8045bc:	10805703 	ldbu	r2,348(r2)
  8045c0:	10803fcc 	andi	r2,r2,255
  8045c4:	1080201c 	xori	r2,r2,128
  8045c8:	10bfe004 	addi	r2,r2,-128
  8045cc:	10000826 	beq	r2,zero,8045f0 <logic+0x3a94>
  8045d0:	e0bffc17 	ldw	r2,-16(fp)
  8045d4:	108046c3 	ldbu	r2,283(r2)
  8045d8:	10803fcc 	andi	r2,r2,255
  8045dc:	1080201c 	xori	r2,r2,128
  8045e0:	10bfe004 	addi	r2,r2,-128
  8045e4:	1000021e 	bne	r2,zero,8045f0 <logic+0x3a94>
  8045e8:	00800044 	movi	r2,1
  8045ec:	00000106 	br	8045f4 <logic+0x3a98>
  8045f0:	0005883a 	mov	r2,zero
  8045f4:	1007883a 	mov	r3,r2
  8045f8:	e0bffc17 	ldw	r2,-16(fp)
  8045fc:	10c02a85 	stb	r3,170(r2)
  d->_g79_e1 = d->_g90_e2 && d->_cg70;
  804600:	e0bffc17 	ldw	r2,-16(fp)
  804604:	10805703 	ldbu	r2,348(r2)
  804608:	10803fcc 	andi	r2,r2,255
  80460c:	1080201c 	xori	r2,r2,128
  804610:	10bfe004 	addi	r2,r2,-128
  804614:	10000826 	beq	r2,zero,804638 <logic+0x3adc>
  804618:	e0bffc17 	ldw	r2,-16(fp)
  80461c:	108046c3 	ldbu	r2,283(r2)
  804620:	10803fcc 	andi	r2,r2,255
  804624:	1080201c 	xori	r2,r2,128
  804628:	10bfe004 	addi	r2,r2,-128
  80462c:	10000226 	beq	r2,zero,804638 <logic+0x3adc>
  804630:	00800044 	movi	r2,1
  804634:	00000106 	br	80463c <logic+0x3ae0>
  804638:	0005883a 	mov	r2,zero
  80463c:	1007883a 	mov	r3,r2
  804640:	e0bffc17 	ldw	r2,-16(fp)
  804644:	10c056c5 	stb	r3,347(r2)
  if (d->_g79_e1) {
  804648:	e0bffc17 	ldw	r2,-16(fp)
  80464c:	108056c3 	ldbu	r2,347(r2)
  804650:	10803fcc 	andi	r2,r2,255
  804654:	1080201c 	xori	r2,r2,128
  804658:	10bfe004 	addi	r2,r2,-128
  80465c:	10000326 	beq	r2,zero,80466c <logic+0x3b10>
    d->_Pacemaker_local__region2_PVARP_x = 0;
  804660:	e0bffc17 	ldw	r2,-16(fp)
  804664:	10000f15 	stw	zero,60(r2)
  804668:	10001015 	stw	zero,64(r2)
  }
  d->_g99 = d->_g98 && d->_cg102;
  80466c:	e0bffc17 	ldw	r2,-16(fp)
  804670:	10802bc3 	ldbu	r2,175(r2)
  804674:	10803fcc 	andi	r2,r2,255
  804678:	1080201c 	xori	r2,r2,128
  80467c:	10bfe004 	addi	r2,r2,-128
  804680:	10000826 	beq	r2,zero,8046a4 <logic+0x3b48>
  804684:	e0bffc17 	ldw	r2,-16(fp)
  804688:	10804683 	ldbu	r2,282(r2)
  80468c:	10803fcc 	andi	r2,r2,255
  804690:	1080201c 	xori	r2,r2,128
  804694:	10bfe004 	addi	r2,r2,-128
  804698:	10000226 	beq	r2,zero,8046a4 <logic+0x3b48>
  80469c:	00800044 	movi	r2,1
  8046a0:	00000106 	br	8046a8 <logic+0x3b4c>
  8046a4:	0005883a 	mov	r2,zero
  8046a8:	1007883a 	mov	r3,r2
  8046ac:	e0bffc17 	ldw	r2,-16(fp)
  8046b0:	10c02c05 	stb	r3,176(r2)
  if (d->_g99) {
  8046b4:	e0bffc17 	ldw	r2,-16(fp)
  8046b8:	10802c03 	ldbu	r2,176(r2)
  8046bc:	10803fcc 	andi	r2,r2,255
  8046c0:	1080201c 	xori	r2,r2,128
  8046c4:	10bfe004 	addi	r2,r2,-128
  8046c8:	10000626 	beq	r2,zero,8046e4 <logic+0x3b88>
    d->_Pacemaker_local_PVARP_timeout |= 1;
  8046cc:	e0bffc17 	ldw	r2,-16(fp)
  8046d0:	10801783 	ldbu	r2,94(r2)
  8046d4:	10800054 	ori	r2,r2,1
  8046d8:	1007883a 	mov	r3,r2
  8046dc:	e0bffc17 	ldw	r2,-16(fp)
  8046e0:	10c01785 	stb	r3,94(r2)
  }
  d->_g99_e3 = d->_g79_e1 || d->_g99;
  8046e4:	e0bffc17 	ldw	r2,-16(fp)
  8046e8:	108056c3 	ldbu	r2,347(r2)
  8046ec:	10803fcc 	andi	r2,r2,255
  8046f0:	1080201c 	xori	r2,r2,128
  8046f4:	10bfe004 	addi	r2,r2,-128
  8046f8:	1000061e 	bne	r2,zero,804714 <logic+0x3bb8>
  8046fc:	e0bffc17 	ldw	r2,-16(fp)
  804700:	10802c03 	ldbu	r2,176(r2)
  804704:	10803fcc 	andi	r2,r2,255
  804708:	1080201c 	xori	r2,r2,128
  80470c:	10bfe004 	addi	r2,r2,-128
  804710:	10000226 	beq	r2,zero,80471c <logic+0x3bc0>
  804714:	00800044 	movi	r2,1
  804718:	00000106 	br	804720 <logic+0x3bc4>
  80471c:	0005883a 	mov	r2,zero
  804720:	1007883a 	mov	r3,r2
  804724:	e0bffc17 	ldw	r2,-16(fp)
  804728:	10c05745 	stb	r3,349(r2)
  if (d->_g99_e3) {
  80472c:	e0bffc17 	ldw	r2,-16(fp)
  804730:	10805743 	ldbu	r2,349(r2)
  804734:	10803fcc 	andi	r2,r2,255
  804738:	1080201c 	xori	r2,r2,128
  80473c:	10bfe004 	addi	r2,r2,-128
  804740:	10000426 	beq	r2,zero,804754 <logic+0x3bf8>
    d->_Pacemaker_local__Atrig4 = 0;
  804744:	e0bffc17 	ldw	r2,-16(fp)
  804748:	10001945 	stb	zero,101(r2)
    d->_Pacemaker_local__Atrig5 = 0;
  80474c:	e0bffc17 	ldw	r2,-16(fp)
  804750:	10001985 	stb	zero,102(r2)
  }
  d->_cg73 = d->_Pacemaker_local__region2_PVARP_x < d->PVARP;
  804754:	e0bffc17 	ldw	r2,-16(fp)
  804758:	14000f17 	ldw	r16,60(r2)
  80475c:	14401017 	ldw	r17,64(r2)
  804760:	e0bffc17 	ldw	r2,-16(fp)
  804764:	10800217 	ldw	r2,8(r2)
  804768:	1009883a 	mov	r4,r2
  80476c:	0809a000 	call	809a00 <__floatsidf>
  804770:	1009883a 	mov	r4,r2
  804774:	180b883a 	mov	r5,r3
  804778:	04800044 	movi	r18,1
  80477c:	200d883a 	mov	r6,r4
  804780:	280f883a 	mov	r7,r5
  804784:	8009883a 	mov	r4,r16
  804788:	880b883a 	mov	r5,r17
  80478c:	08088f80 	call	8088f8 <__ledf2>
  804790:	10000116 	blt	r2,zero,804798 <logic+0x3c3c>
  804794:	0025883a 	mov	r18,zero
  804798:	9007883a 	mov	r3,r18
  80479c:	e0bffc17 	ldw	r2,-16(fp)
  8047a0:	10c04705 	stb	r3,284(r2)
  d->_g79 = d->_g99_e3 && d->_cg73;
  8047a4:	e0bffc17 	ldw	r2,-16(fp)
  8047a8:	10805743 	ldbu	r2,349(r2)
  8047ac:	10803fcc 	andi	r2,r2,255
  8047b0:	1080201c 	xori	r2,r2,128
  8047b4:	10bfe004 	addi	r2,r2,-128
  8047b8:	10000826 	beq	r2,zero,8047dc <logic+0x3c80>
  8047bc:	e0bffc17 	ldw	r2,-16(fp)
  8047c0:	10804703 	ldbu	r2,284(r2)
  8047c4:	10803fcc 	andi	r2,r2,255
  8047c8:	1080201c 	xori	r2,r2,128
  8047cc:	10bfe004 	addi	r2,r2,-128
  8047d0:	10000226 	beq	r2,zero,8047dc <logic+0x3c80>
  8047d4:	00800044 	movi	r2,1
  8047d8:	00000106 	br	8047e0 <logic+0x3c84>
  8047dc:	0005883a 	mov	r2,zero
  8047e0:	1007883a 	mov	r3,r2
  8047e4:	e0bffc17 	ldw	r2,-16(fp)
  8047e8:	10c02885 	stb	r3,162(r2)
  if (d->_g79) {
  8047ec:	e0bffc17 	ldw	r2,-16(fp)
  8047f0:	10802883 	ldbu	r2,162(r2)
  8047f4:	10803fcc 	andi	r2,r2,255
  8047f8:	1080201c 	xori	r2,r2,128
  8047fc:	10bfe004 	addi	r2,r2,-128
  804800:	10003426 	beq	r2,zero,8048d4 <logic+0x3d78>
    d->sleepT = (d->sleepT < (d->PVARP - d->_Pacemaker_local__region2_PVARP_x)) ? d->sleepT : (d->PVARP - d->_Pacemaker_local__region2_PVARP_x);
  804804:	e0bffc17 	ldw	r2,-16(fp)
  804808:	14000817 	ldw	r16,32(r2)
  80480c:	14400917 	ldw	r17,36(r2)
  804810:	e0bffc17 	ldw	r2,-16(fp)
  804814:	10800217 	ldw	r2,8(r2)
  804818:	1009883a 	mov	r4,r2
  80481c:	0809a000 	call	809a00 <__floatsidf>
  804820:	1011883a 	mov	r8,r2
  804824:	1813883a 	mov	r9,r3
  804828:	e13ffc17 	ldw	r4,-16(fp)
  80482c:	20800f17 	ldw	r2,60(r4)
  804830:	20c01017 	ldw	r3,64(r4)
  804834:	100d883a 	mov	r6,r2
  804838:	180f883a 	mov	r7,r3
  80483c:	4009883a 	mov	r4,r8
  804840:	480b883a 	mov	r5,r9
  804844:	08091040 	call	809104 <__subdf3>
  804848:	1009883a 	mov	r4,r2
  80484c:	180b883a 	mov	r5,r3
  804850:	2005883a 	mov	r2,r4
  804854:	2807883a 	mov	r3,r5
  804858:	100d883a 	mov	r6,r2
  80485c:	180f883a 	mov	r7,r3
  804860:	8009883a 	mov	r4,r16
  804864:	880b883a 	mov	r5,r17
  804868:	08088f80 	call	8088f8 <__ledf2>
  80486c:	1000040e 	bge	r2,zero,804880 <logic+0x3d24>
  804870:	e13ffc17 	ldw	r4,-16(fp)
  804874:	20800817 	ldw	r2,32(r4)
  804878:	20c00917 	ldw	r3,36(r4)
  80487c:	00001206 	br	8048c8 <logic+0x3d6c>
  804880:	e0bffc17 	ldw	r2,-16(fp)
  804884:	10800217 	ldw	r2,8(r2)
  804888:	1009883a 	mov	r4,r2
  80488c:	0809a000 	call	809a00 <__floatsidf>
  804890:	1011883a 	mov	r8,r2
  804894:	1813883a 	mov	r9,r3
  804898:	e13ffc17 	ldw	r4,-16(fp)
  80489c:	20800f17 	ldw	r2,60(r4)
  8048a0:	20c01017 	ldw	r3,64(r4)
  8048a4:	100d883a 	mov	r6,r2
  8048a8:	180f883a 	mov	r7,r3
  8048ac:	4009883a 	mov	r4,r8
  8048b0:	480b883a 	mov	r5,r9
  8048b4:	08091040 	call	809104 <__subdf3>
  8048b8:	1009883a 	mov	r4,r2
  8048bc:	180b883a 	mov	r5,r3
  8048c0:	2005883a 	mov	r2,r4
  8048c4:	2807883a 	mov	r3,r5
  8048c8:	e13ffc17 	ldw	r4,-16(fp)
  8048cc:	20800815 	stw	r2,32(r4)
  8048d0:	20c00915 	stw	r3,36(r4)
  }
  d->_cg74 = d->_Pacemaker_local__Atrig4 || d->_Pacemaker_local__Atrig5;
  8048d4:	e0bffc17 	ldw	r2,-16(fp)
  8048d8:	10801943 	ldbu	r2,101(r2)
  8048dc:	10803fcc 	andi	r2,r2,255
  8048e0:	1080201c 	xori	r2,r2,128
  8048e4:	10bfe004 	addi	r2,r2,-128
  8048e8:	1000061e 	bne	r2,zero,804904 <logic+0x3da8>
  8048ec:	e0bffc17 	ldw	r2,-16(fp)
  8048f0:	10801983 	ldbu	r2,102(r2)
  8048f4:	10803fcc 	andi	r2,r2,255
  8048f8:	1080201c 	xori	r2,r2,128
  8048fc:	10bfe004 	addi	r2,r2,-128
  804900:	10000226 	beq	r2,zero,80490c <logic+0x3db0>
  804904:	00800044 	movi	r2,1
  804908:	00000106 	br	804910 <logic+0x3db4>
  80490c:	0005883a 	mov	r2,zero
  804910:	1007883a 	mov	r3,r2
  804914:	e0bffc17 	ldw	r2,-16(fp)
  804918:	10c04745 	stb	r3,285(r2)
  d->_g70 = (d->_g79 && !d->_cg74) || (d->_g76 && !d->_cg78);
  80491c:	e0bffc17 	ldw	r2,-16(fp)
  804920:	10802883 	ldbu	r2,162(r2)
  804924:	10803fcc 	andi	r2,r2,255
  804928:	1080201c 	xori	r2,r2,128
  80492c:	10bfe004 	addi	r2,r2,-128
  804930:	10000626 	beq	r2,zero,80494c <logic+0x3df0>
  804934:	e0bffc17 	ldw	r2,-16(fp)
  804938:	10804743 	ldbu	r2,285(r2)
  80493c:	10803fcc 	andi	r2,r2,255
  804940:	1080201c 	xori	r2,r2,128
  804944:	10bfe004 	addi	r2,r2,-128
  804948:	10000c26 	beq	r2,zero,80497c <logic+0x3e20>
  80494c:	e0bffc17 	ldw	r2,-16(fp)
  804950:	108027c3 	ldbu	r2,159(r2)
  804954:	10803fcc 	andi	r2,r2,255
  804958:	1080201c 	xori	r2,r2,128
  80495c:	10bfe004 	addi	r2,r2,-128
  804960:	10000826 	beq	r2,zero,804984 <logic+0x3e28>
  804964:	e0bffc17 	ldw	r2,-16(fp)
  804968:	10804783 	ldbu	r2,286(r2)
  80496c:	10803fcc 	andi	r2,r2,255
  804970:	1080201c 	xori	r2,r2,128
  804974:	10bfe004 	addi	r2,r2,-128
  804978:	1000021e 	bne	r2,zero,804984 <logic+0x3e28>
  80497c:	00800044 	movi	r2,1
  804980:	00000106 	br	804988 <logic+0x3e2c>
  804984:	0005883a 	mov	r2,zero
  804988:	1007883a 	mov	r3,r2
  80498c:	e0bffc17 	ldw	r2,-16(fp)
  804990:	10c026c5 	stb	r3,155(r2)
  d->_g102 = d->_g99_e3 && !d->_cg73;
  804994:	e0bffc17 	ldw	r2,-16(fp)
  804998:	10805743 	ldbu	r2,349(r2)
  80499c:	10803fcc 	andi	r2,r2,255
  8049a0:	1080201c 	xori	r2,r2,128
  8049a4:	10bfe004 	addi	r2,r2,-128
  8049a8:	10000826 	beq	r2,zero,8049cc <logic+0x3e70>
  8049ac:	e0bffc17 	ldw	r2,-16(fp)
  8049b0:	10804703 	ldbu	r2,284(r2)
  8049b4:	10803fcc 	andi	r2,r2,255
  8049b8:	1080201c 	xori	r2,r2,128
  8049bc:	10bfe004 	addi	r2,r2,-128
  8049c0:	1000021e 	bne	r2,zero,8049cc <logic+0x3e70>
  8049c4:	00800044 	movi	r2,1
  8049c8:	00000106 	br	8049d0 <logic+0x3e74>
  8049cc:	0005883a 	mov	r2,zero
  8049d0:	1007883a 	mov	r3,r2
  8049d4:	e0bffc17 	ldw	r2,-16(fp)
  8049d8:	10c02cc5 	stb	r3,179(r2)
  d->_cg83 = d->_Pacemaker_local__Atrig4 || d->_Pacemaker_local__Atrig5;
  8049dc:	e0bffc17 	ldw	r2,-16(fp)
  8049e0:	10801943 	ldbu	r2,101(r2)
  8049e4:	10803fcc 	andi	r2,r2,255
  8049e8:	1080201c 	xori	r2,r2,128
  8049ec:	10bfe004 	addi	r2,r2,-128
  8049f0:	1000061e 	bne	r2,zero,804a0c <logic+0x3eb0>
  8049f4:	e0bffc17 	ldw	r2,-16(fp)
  8049f8:	10801983 	ldbu	r2,102(r2)
  8049fc:	10803fcc 	andi	r2,r2,255
  804a00:	1080201c 	xori	r2,r2,128
  804a04:	10bfe004 	addi	r2,r2,-128
  804a08:	10000226 	beq	r2,zero,804a14 <logic+0x3eb8>
  804a0c:	00800044 	movi	r2,1
  804a10:	00000106 	br	804a18 <logic+0x3ebc>
  804a14:	0005883a 	mov	r2,zero
  804a18:	1007883a 	mov	r3,r2
  804a1c:	e0bffc17 	ldw	r2,-16(fp)
  804a20:	10c04845 	stb	r3,289(r2)
  d->_g103 = (d->_g77 && !d->_cg80) || (d->_g102 && !d->_cg83);
  804a24:	e0bffc17 	ldw	r2,-16(fp)
  804a28:	10802803 	ldbu	r2,160(r2)
  804a2c:	10803fcc 	andi	r2,r2,255
  804a30:	1080201c 	xori	r2,r2,128
  804a34:	10bfe004 	addi	r2,r2,-128
  804a38:	10000626 	beq	r2,zero,804a54 <logic+0x3ef8>
  804a3c:	e0bffc17 	ldw	r2,-16(fp)
  804a40:	10804803 	ldbu	r2,288(r2)
  804a44:	10803fcc 	andi	r2,r2,255
  804a48:	1080201c 	xori	r2,r2,128
  804a4c:	10bfe004 	addi	r2,r2,-128
  804a50:	10000c26 	beq	r2,zero,804a84 <logic+0x3f28>
  804a54:	e0bffc17 	ldw	r2,-16(fp)
  804a58:	10802cc3 	ldbu	r2,179(r2)
  804a5c:	10803fcc 	andi	r2,r2,255
  804a60:	1080201c 	xori	r2,r2,128
  804a64:	10bfe004 	addi	r2,r2,-128
  804a68:	10000826 	beq	r2,zero,804a8c <logic+0x3f30>
  804a6c:	e0bffc17 	ldw	r2,-16(fp)
  804a70:	10804843 	ldbu	r2,289(r2)
  804a74:	10803fcc 	andi	r2,r2,255
  804a78:	1080201c 	xori	r2,r2,128
  804a7c:	10bfe004 	addi	r2,r2,-128
  804a80:	1000021e 	bne	r2,zero,804a8c <logic+0x3f30>
  804a84:	00800044 	movi	r2,1
  804a88:	00000106 	br	804a90 <logic+0x3f34>
  804a8c:	0005883a 	mov	r2,zero
  804a90:	1007883a 	mov	r3,r2
  804a94:	e0bffc17 	ldw	r2,-16(fp)
  804a98:	10c02d05 	stb	r3,180(r2)
  d->_cg84 = d->_Pacemaker_local__region2_PVARP_x < d->PVARP;
  804a9c:	e0bffc17 	ldw	r2,-16(fp)
  804aa0:	14000f17 	ldw	r16,60(r2)
  804aa4:	14401017 	ldw	r17,64(r2)
  804aa8:	e0bffc17 	ldw	r2,-16(fp)
  804aac:	10800217 	ldw	r2,8(r2)
  804ab0:	1009883a 	mov	r4,r2
  804ab4:	0809a000 	call	809a00 <__floatsidf>
  804ab8:	1009883a 	mov	r4,r2
  804abc:	180b883a 	mov	r5,r3
  804ac0:	04800044 	movi	r18,1
  804ac4:	200d883a 	mov	r6,r4
  804ac8:	280f883a 	mov	r7,r5
  804acc:	8009883a 	mov	r4,r16
  804ad0:	880b883a 	mov	r5,r17
  804ad4:	08088f80 	call	8088f8 <__ledf2>
  804ad8:	10000116 	blt	r2,zero,804ae0 <logic+0x3f84>
  804adc:	0025883a 	mov	r18,zero
  804ae0:	9007883a 	mov	r3,r18
  804ae4:	e0bffc17 	ldw	r2,-16(fp)
  804ae8:	10c04885 	stb	r3,290(r2)
  d->_g71 = d->_g99_e3 && d->_cg84;
  804aec:	e0bffc17 	ldw	r2,-16(fp)
  804af0:	10805743 	ldbu	r2,349(r2)
  804af4:	10803fcc 	andi	r2,r2,255
  804af8:	1080201c 	xori	r2,r2,128
  804afc:	10bfe004 	addi	r2,r2,-128
  804b00:	10000826 	beq	r2,zero,804b24 <logic+0x3fc8>
  804b04:	e0bffc17 	ldw	r2,-16(fp)
  804b08:	10804883 	ldbu	r2,290(r2)
  804b0c:	10803fcc 	andi	r2,r2,255
  804b10:	1080201c 	xori	r2,r2,128
  804b14:	10bfe004 	addi	r2,r2,-128
  804b18:	10000226 	beq	r2,zero,804b24 <logic+0x3fc8>
  804b1c:	00800044 	movi	r2,1
  804b20:	00000106 	br	804b28 <logic+0x3fcc>
  804b24:	0005883a 	mov	r2,zero
  804b28:	1007883a 	mov	r3,r2
  804b2c:	e0bffc17 	ldw	r2,-16(fp)
  804b30:	10c02705 	stb	r3,156(r2)
  if (d->_g71) {
  804b34:	e0bffc17 	ldw	r2,-16(fp)
  804b38:	10802703 	ldbu	r2,156(r2)
  804b3c:	10803fcc 	andi	r2,r2,255
  804b40:	1080201c 	xori	r2,r2,128
  804b44:	10bfe004 	addi	r2,r2,-128
  804b48:	10003426 	beq	r2,zero,804c1c <logic+0x40c0>
    d->sleepT = (d->sleepT < (d->PVARP - d->_Pacemaker_local__region2_PVARP_x)) ? d->sleepT : (d->PVARP - d->_Pacemaker_local__region2_PVARP_x);
  804b4c:	e0bffc17 	ldw	r2,-16(fp)
  804b50:	14000817 	ldw	r16,32(r2)
  804b54:	14400917 	ldw	r17,36(r2)
  804b58:	e0bffc17 	ldw	r2,-16(fp)
  804b5c:	10800217 	ldw	r2,8(r2)
  804b60:	1009883a 	mov	r4,r2
  804b64:	0809a000 	call	809a00 <__floatsidf>
  804b68:	1011883a 	mov	r8,r2
  804b6c:	1813883a 	mov	r9,r3
  804b70:	e13ffc17 	ldw	r4,-16(fp)
  804b74:	20800f17 	ldw	r2,60(r4)
  804b78:	20c01017 	ldw	r3,64(r4)
  804b7c:	100d883a 	mov	r6,r2
  804b80:	180f883a 	mov	r7,r3
  804b84:	4009883a 	mov	r4,r8
  804b88:	480b883a 	mov	r5,r9
  804b8c:	08091040 	call	809104 <__subdf3>
  804b90:	1009883a 	mov	r4,r2
  804b94:	180b883a 	mov	r5,r3
  804b98:	2005883a 	mov	r2,r4
  804b9c:	2807883a 	mov	r3,r5
  804ba0:	100d883a 	mov	r6,r2
  804ba4:	180f883a 	mov	r7,r3
  804ba8:	8009883a 	mov	r4,r16
  804bac:	880b883a 	mov	r5,r17
  804bb0:	08088f80 	call	8088f8 <__ledf2>
  804bb4:	1000040e 	bge	r2,zero,804bc8 <logic+0x406c>
  804bb8:	e13ffc17 	ldw	r4,-16(fp)
  804bbc:	20800817 	ldw	r2,32(r4)
  804bc0:	20c00917 	ldw	r3,36(r4)
  804bc4:	00001206 	br	804c10 <logic+0x40b4>
  804bc8:	e0bffc17 	ldw	r2,-16(fp)
  804bcc:	10800217 	ldw	r2,8(r2)
  804bd0:	1009883a 	mov	r4,r2
  804bd4:	0809a000 	call	809a00 <__floatsidf>
  804bd8:	1011883a 	mov	r8,r2
  804bdc:	1813883a 	mov	r9,r3
  804be0:	e13ffc17 	ldw	r4,-16(fp)
  804be4:	20800f17 	ldw	r2,60(r4)
  804be8:	20c01017 	ldw	r3,64(r4)
  804bec:	100d883a 	mov	r6,r2
  804bf0:	180f883a 	mov	r7,r3
  804bf4:	4009883a 	mov	r4,r8
  804bf8:	480b883a 	mov	r5,r9
  804bfc:	08091040 	call	809104 <__subdf3>
  804c00:	1009883a 	mov	r4,r2
  804c04:	180b883a 	mov	r5,r3
  804c08:	2005883a 	mov	r2,r4
  804c0c:	2807883a 	mov	r3,r5
  804c10:	e13ffc17 	ldw	r4,-16(fp)
  804c14:	20800815 	stw	r2,32(r4)
  804c18:	20c00915 	stw	r3,36(r4)
  }
  d->_cg85 = d->_Pacemaker_local__Atrig4 || d->_Pacemaker_local__Atrig5;
  804c1c:	e0bffc17 	ldw	r2,-16(fp)
  804c20:	10801943 	ldbu	r2,101(r2)
  804c24:	10803fcc 	andi	r2,r2,255
  804c28:	1080201c 	xori	r2,r2,128
  804c2c:	10bfe004 	addi	r2,r2,-128
  804c30:	1000061e 	bne	r2,zero,804c4c <logic+0x40f0>
  804c34:	e0bffc17 	ldw	r2,-16(fp)
  804c38:	10801983 	ldbu	r2,102(r2)
  804c3c:	10803fcc 	andi	r2,r2,255
  804c40:	1080201c 	xori	r2,r2,128
  804c44:	10bfe004 	addi	r2,r2,-128
  804c48:	10000226 	beq	r2,zero,804c54 <logic+0x40f8>
  804c4c:	00800044 	movi	r2,1
  804c50:	00000106 	br	804c58 <logic+0x40fc>
  804c54:	0005883a 	mov	r2,zero
  804c58:	1007883a 	mov	r3,r2
  804c5c:	e0bffc17 	ldw	r2,-16(fp)
  804c60:	10c048c5 	stb	r3,291(r2)
  d->_g78 = (d->_g71 && !d->_cg85) || (d->_g87 && !d->_cg89);
  804c64:	e0bffc17 	ldw	r2,-16(fp)
  804c68:	10802703 	ldbu	r2,156(r2)
  804c6c:	10803fcc 	andi	r2,r2,255
  804c70:	1080201c 	xori	r2,r2,128
  804c74:	10bfe004 	addi	r2,r2,-128
  804c78:	10000626 	beq	r2,zero,804c94 <logic+0x4138>
  804c7c:	e0bffc17 	ldw	r2,-16(fp)
  804c80:	108048c3 	ldbu	r2,291(r2)
  804c84:	10803fcc 	andi	r2,r2,255
  804c88:	1080201c 	xori	r2,r2,128
  804c8c:	10bfe004 	addi	r2,r2,-128
  804c90:	10000c26 	beq	r2,zero,804cc4 <logic+0x4168>
  804c94:	e0bffc17 	ldw	r2,-16(fp)
  804c98:	108029c3 	ldbu	r2,167(r2)
  804c9c:	10803fcc 	andi	r2,r2,255
  804ca0:	1080201c 	xori	r2,r2,128
  804ca4:	10bfe004 	addi	r2,r2,-128
  804ca8:	10000826 	beq	r2,zero,804ccc <logic+0x4170>
  804cac:	e0bffc17 	ldw	r2,-16(fp)
  804cb0:	10804903 	ldbu	r2,292(r2)
  804cb4:	10803fcc 	andi	r2,r2,255
  804cb8:	1080201c 	xori	r2,r2,128
  804cbc:	10bfe004 	addi	r2,r2,-128
  804cc0:	1000021e 	bne	r2,zero,804ccc <logic+0x4170>
  804cc4:	00800044 	movi	r2,1
  804cc8:	00000106 	br	804cd0 <logic+0x4174>
  804ccc:	0005883a 	mov	r2,zero
  804cd0:	1007883a 	mov	r3,r2
  804cd4:	e0bffc17 	ldw	r2,-16(fp)
  804cd8:	10c02845 	stb	r3,161(r2)
  d->_g74 = d->_g99_e3 && !d->_cg84;
  804cdc:	e0bffc17 	ldw	r2,-16(fp)
  804ce0:	10805743 	ldbu	r2,349(r2)
  804ce4:	10803fcc 	andi	r2,r2,255
  804ce8:	1080201c 	xori	r2,r2,128
  804cec:	10bfe004 	addi	r2,r2,-128
  804cf0:	10000826 	beq	r2,zero,804d14 <logic+0x41b8>
  804cf4:	e0bffc17 	ldw	r2,-16(fp)
  804cf8:	10804883 	ldbu	r2,290(r2)
  804cfc:	10803fcc 	andi	r2,r2,255
  804d00:	1080201c 	xori	r2,r2,128
  804d04:	10bfe004 	addi	r2,r2,-128
  804d08:	1000021e 	bne	r2,zero,804d14 <logic+0x41b8>
  804d0c:	00800044 	movi	r2,1
  804d10:	00000106 	br	804d18 <logic+0x41bc>
  804d14:	0005883a 	mov	r2,zero
  804d18:	1007883a 	mov	r3,r2
  804d1c:	e0bffc17 	ldw	r2,-16(fp)
  804d20:	10c02785 	stb	r3,158(r2)
  d->_cg94 = d->_Pacemaker_local__Atrig4 || d->_Pacemaker_local__Atrig5;
  804d24:	e0bffc17 	ldw	r2,-16(fp)
  804d28:	10801943 	ldbu	r2,101(r2)
  804d2c:	10803fcc 	andi	r2,r2,255
  804d30:	1080201c 	xori	r2,r2,128
  804d34:	10bfe004 	addi	r2,r2,-128
  804d38:	1000061e 	bne	r2,zero,804d54 <logic+0x41f8>
  804d3c:	e0bffc17 	ldw	r2,-16(fp)
  804d40:	10801983 	ldbu	r2,102(r2)
  804d44:	10803fcc 	andi	r2,r2,255
  804d48:	1080201c 	xori	r2,r2,128
  804d4c:	10bfe004 	addi	r2,r2,-128
  804d50:	10000226 	beq	r2,zero,804d5c <logic+0x4200>
  804d54:	00800044 	movi	r2,1
  804d58:	00000106 	br	804d60 <logic+0x4204>
  804d5c:	0005883a 	mov	r2,zero
  804d60:	1007883a 	mov	r3,r2
  804d64:	e0bffc17 	ldw	r2,-16(fp)
  804d68:	10c049c5 	stb	r3,295(r2)
  d->_g80 = (d->_g88 && !d->_cg91) || (d->_g74 && !d->_cg94);
  804d6c:	e0bffc17 	ldw	r2,-16(fp)
  804d70:	10802a03 	ldbu	r2,168(r2)
  804d74:	10803fcc 	andi	r2,r2,255
  804d78:	1080201c 	xori	r2,r2,128
  804d7c:	10bfe004 	addi	r2,r2,-128
  804d80:	10000626 	beq	r2,zero,804d9c <logic+0x4240>
  804d84:	e0bffc17 	ldw	r2,-16(fp)
  804d88:	10804983 	ldbu	r2,294(r2)
  804d8c:	10803fcc 	andi	r2,r2,255
  804d90:	1080201c 	xori	r2,r2,128
  804d94:	10bfe004 	addi	r2,r2,-128
  804d98:	10000c26 	beq	r2,zero,804dcc <logic+0x4270>
  804d9c:	e0bffc17 	ldw	r2,-16(fp)
  804da0:	10802783 	ldbu	r2,158(r2)
  804da4:	10803fcc 	andi	r2,r2,255
  804da8:	1080201c 	xori	r2,r2,128
  804dac:	10bfe004 	addi	r2,r2,-128
  804db0:	10000826 	beq	r2,zero,804dd4 <logic+0x4278>
  804db4:	e0bffc17 	ldw	r2,-16(fp)
  804db8:	108049c3 	ldbu	r2,295(r2)
  804dbc:	10803fcc 	andi	r2,r2,255
  804dc0:	1080201c 	xori	r2,r2,128
  804dc4:	10bfe004 	addi	r2,r2,-128
  804dc8:	1000021e 	bne	r2,zero,804dd4 <logic+0x4278>
  804dcc:	00800044 	movi	r2,1
  804dd0:	00000106 	br	804dd8 <logic+0x427c>
  804dd4:	0005883a 	mov	r2,zero
  804dd8:	1007883a 	mov	r3,r2
  804ddc:	e0bffc17 	ldw	r2,-16(fp)
  804de0:	10c028c5 	stb	r3,163(r2)
  d->_g83 = d->_g99_e3 || (d->_g100 && !d->_cg100);
  804de4:	e0bffc17 	ldw	r2,-16(fp)
  804de8:	10805743 	ldbu	r2,349(r2)
  804dec:	10803fcc 	andi	r2,r2,255
  804df0:	1080201c 	xori	r2,r2,128
  804df4:	10bfe004 	addi	r2,r2,-128
  804df8:	10000c1e 	bne	r2,zero,804e2c <logic+0x42d0>
  804dfc:	e0bffc17 	ldw	r2,-16(fp)
  804e00:	10802c43 	ldbu	r2,177(r2)
  804e04:	10803fcc 	andi	r2,r2,255
  804e08:	1080201c 	xori	r2,r2,128
  804e0c:	10bfe004 	addi	r2,r2,-128
  804e10:	10000826 	beq	r2,zero,804e34 <logic+0x42d8>
  804e14:	e0bffc17 	ldw	r2,-16(fp)
  804e18:	10804a03 	ldbu	r2,296(r2)
  804e1c:	10803fcc 	andi	r2,r2,255
  804e20:	1080201c 	xori	r2,r2,128
  804e24:	10bfe004 	addi	r2,r2,-128
  804e28:	1000021e 	bne	r2,zero,804e34 <logic+0x42d8>
  804e2c:	00800044 	movi	r2,1
  804e30:	00000106 	br	804e38 <logic+0x42dc>
  804e34:	0005883a 	mov	r2,zero
  804e38:	1007883a 	mov	r3,r2
  804e3c:	e0bffc17 	ldw	r2,-16(fp)
  804e40:	10c02945 	stb	r3,165(r2)
  d->_g89 = d->_pg108;
  804e44:	e0bffc17 	ldw	r2,-16(fp)
  804e48:	10c06043 	ldbu	r3,385(r2)
  804e4c:	e0bffc17 	ldw	r2,-16(fp)
  804e50:	10c02a45 	stb	r3,169(r2)
  d->_g85 = d->_pg107;
  804e54:	e0bffc17 	ldw	r2,-16(fp)
  804e58:	10c06083 	ldbu	r3,386(r2)
  804e5c:	e0bffc17 	ldw	r2,-16(fp)
  804e60:	10c02985 	stb	r3,166(r2)
  d->_g91 = !(d->_g89 || d->_g85);
  804e64:	e0bffc17 	ldw	r2,-16(fp)
  804e68:	10802a43 	ldbu	r2,169(r2)
  804e6c:	10803fcc 	andi	r2,r2,255
  804e70:	1080201c 	xori	r2,r2,128
  804e74:	10bfe004 	addi	r2,r2,-128
  804e78:	1000081e 	bne	r2,zero,804e9c <logic+0x4340>
  804e7c:	e0bffc17 	ldw	r2,-16(fp)
  804e80:	10802983 	ldbu	r2,166(r2)
  804e84:	10803fcc 	andi	r2,r2,255
  804e88:	1080201c 	xori	r2,r2,128
  804e8c:	10bfe004 	addi	r2,r2,-128
  804e90:	1000021e 	bne	r2,zero,804e9c <logic+0x4340>
  804e94:	00800044 	movi	r2,1
  804e98:	00000106 	br	804ea0 <logic+0x4344>
  804e9c:	0005883a 	mov	r2,zero
  804ea0:	1007883a 	mov	r3,r2
  804ea4:	e0bffc17 	ldw	r2,-16(fp)
  804ea8:	10c02ac5 	stb	r3,171(r2)
  d->_g94 = d->_pg193;
  804eac:	e0bffc17 	ldw	r2,-16(fp)
  804eb0:	10c060c3 	ldbu	r3,387(r2)
  804eb4:	e0bffc17 	ldw	r2,-16(fp)
  804eb8:	10c02b45 	stb	r3,173(r2)
  if (d->_g94) {
  804ebc:	e0bffc17 	ldw	r2,-16(fp)
  804ec0:	10802b43 	ldbu	r2,173(r2)
  804ec4:	10803fcc 	andi	r2,r2,255
  804ec8:	1080201c 	xori	r2,r2,128
  804ecc:	10bfe004 	addi	r2,r2,-128
  804ed0:	10001226 	beq	r2,zero,804f1c <logic+0x43c0>
    d->_Pacemaker_local__region3_VRP_x += d->deltaT;
  804ed4:	e13ffc17 	ldw	r4,-16(fp)
  804ed8:	20801117 	ldw	r2,68(r4)
  804edc:	20c01217 	ldw	r3,72(r4)
  804ee0:	e1bffc17 	ldw	r6,-16(fp)
  804ee4:	31000617 	ldw	r4,24(r6)
  804ee8:	31400717 	ldw	r5,28(r6)
  804eec:	200d883a 	mov	r6,r4
  804ef0:	280f883a 	mov	r7,r5
  804ef4:	1009883a 	mov	r4,r2
  804ef8:	180b883a 	mov	r5,r3
  804efc:	0807f700 	call	807f70 <__adddf3>
  804f00:	1009883a 	mov	r4,r2
  804f04:	180b883a 	mov	r5,r3
  804f08:	2005883a 	mov	r2,r4
  804f0c:	2807883a 	mov	r3,r5
  804f10:	e13ffc17 	ldw	r4,-16(fp)
  804f14:	20801115 	stw	r2,68(r4)
  804f18:	20c01215 	stw	r3,72(r4)
  }
  d->_g100 = d->_pg117;
  804f1c:	e0bffc17 	ldw	r2,-16(fp)
  804f20:	10c06103 	ldbu	r3,388(r2)
  804f24:	e0bffc17 	ldw	r2,-16(fp)
  804f28:	10c02c45 	stb	r3,177(r2)
  d->_cg134 = !(d->_Pacemaker_local__region3_VRP_x >= d->VRP);
  804f2c:	e0bffc17 	ldw	r2,-16(fp)
  804f30:	14001117 	ldw	r16,68(r2)
  804f34:	14401217 	ldw	r17,72(r2)
  804f38:	e0bffc17 	ldw	r2,-16(fp)
  804f3c:	10800317 	ldw	r2,12(r2)
  804f40:	1009883a 	mov	r4,r2
  804f44:	0809a000 	call	809a00 <__floatsidf>
  804f48:	1009883a 	mov	r4,r2
  804f4c:	180b883a 	mov	r5,r3
  804f50:	04800044 	movi	r18,1
  804f54:	200d883a 	mov	r6,r4
  804f58:	280f883a 	mov	r7,r5
  804f5c:	8009883a 	mov	r4,r16
  804f60:	880b883a 	mov	r5,r17
  804f64:	080881c0 	call	80881c <__gedf2>
  804f68:	1000010e 	bge	r2,zero,804f70 <logic+0x4414>
  804f6c:	0025883a 	mov	r18,zero
  804f70:	9080005c 	xori	r2,r18,1
  804f74:	10803fcc 	andi	r2,r2,255
  804f78:	1007883a 	mov	r3,r2
  804f7c:	e0bffc17 	ldw	r2,-16(fp)
  804f80:	10c04e45 	stb	r3,313(r2)
  d->_g72 = d->_g100 && d->_cg134;
  804f84:	e0bffc17 	ldw	r2,-16(fp)
  804f88:	10802c43 	ldbu	r2,177(r2)
  804f8c:	10803fcc 	andi	r2,r2,255
  804f90:	1080201c 	xori	r2,r2,128
  804f94:	10bfe004 	addi	r2,r2,-128
  804f98:	10000826 	beq	r2,zero,804fbc <logic+0x4460>
  804f9c:	e0bffc17 	ldw	r2,-16(fp)
  804fa0:	10804e43 	ldbu	r2,313(r2)
  804fa4:	10803fcc 	andi	r2,r2,255
  804fa8:	1080201c 	xori	r2,r2,128
  804fac:	10bfe004 	addi	r2,r2,-128
  804fb0:	10000226 	beq	r2,zero,804fbc <logic+0x4460>
  804fb4:	00800044 	movi	r2,1
  804fb8:	00000106 	br	804fc0 <logic+0x4464>
  804fbc:	0005883a 	mov	r2,zero
  804fc0:	1007883a 	mov	r3,r2
  804fc4:	e0bffc17 	ldw	r2,-16(fp)
  804fc8:	10c02745 	stb	r3,157(r2)
  if (d->_g72) {
  804fcc:	e0bffc17 	ldw	r2,-16(fp)
  804fd0:	10802743 	ldbu	r2,157(r2)
  804fd4:	10803fcc 	andi	r2,r2,255
  804fd8:	1080201c 	xori	r2,r2,128
  804fdc:	10bfe004 	addi	r2,r2,-128
  804fe0:	10000326 	beq	r2,zero,804ff0 <logic+0x4494>
    d->_Pacemaker_local__Atrig6 = 1;
  804fe4:	e0bffc17 	ldw	r2,-16(fp)
  804fe8:	00c00044 	movi	r3,1
  804fec:	10c019c5 	stb	r3,103(r2)
  }
  d->_g137 = d->_g100 && !d->_cg134;
  804ff0:	e0bffc17 	ldw	r2,-16(fp)
  804ff4:	10802c43 	ldbu	r2,177(r2)
  804ff8:	10803fcc 	andi	r2,r2,255
  804ffc:	1080201c 	xori	r2,r2,128
  805000:	10bfe004 	addi	r2,r2,-128
  805004:	10000826 	beq	r2,zero,805028 <logic+0x44cc>
  805008:	e0bffc17 	ldw	r2,-16(fp)
  80500c:	10804e43 	ldbu	r2,313(r2)
  805010:	10803fcc 	andi	r2,r2,255
  805014:	1080201c 	xori	r2,r2,128
  805018:	10bfe004 	addi	r2,r2,-128
  80501c:	1000021e 	bne	r2,zero,805028 <logic+0x44cc>
  805020:	00800044 	movi	r2,1
  805024:	00000106 	br	80502c <logic+0x44d0>
  805028:	0005883a 	mov	r2,zero
  80502c:	1007883a 	mov	r3,r2
  805030:	e0bffc17 	ldw	r2,-16(fp)
  805034:	10c032c5 	stb	r3,203(r2)
  d->_cg137 = d->_Pacemaker_local__region3_VRP_x >= d->VRP;
  805038:	e0bffc17 	ldw	r2,-16(fp)
  80503c:	14001117 	ldw	r16,68(r2)
  805040:	14401217 	ldw	r17,72(r2)
  805044:	e0bffc17 	ldw	r2,-16(fp)
  805048:	10800317 	ldw	r2,12(r2)
  80504c:	1009883a 	mov	r4,r2
  805050:	0809a000 	call	809a00 <__floatsidf>
  805054:	1009883a 	mov	r4,r2
  805058:	180b883a 	mov	r5,r3
  80505c:	04800044 	movi	r18,1
  805060:	200d883a 	mov	r6,r4
  805064:	280f883a 	mov	r7,r5
  805068:	8009883a 	mov	r4,r16
  80506c:	880b883a 	mov	r5,r17
  805070:	080881c0 	call	80881c <__gedf2>
  805074:	1000010e 	bge	r2,zero,80507c <logic+0x4520>
  805078:	0025883a 	mov	r18,zero
  80507c:	9007883a 	mov	r3,r18
  805080:	e0bffc17 	ldw	r2,-16(fp)
  805084:	10c04e05 	stb	r3,312(r2)
  d->_g138 = d->_g137 && d->_cg137;
  805088:	e0bffc17 	ldw	r2,-16(fp)
  80508c:	108032c3 	ldbu	r2,203(r2)
  805090:	10803fcc 	andi	r2,r2,255
  805094:	1080201c 	xori	r2,r2,128
  805098:	10bfe004 	addi	r2,r2,-128
  80509c:	10000826 	beq	r2,zero,8050c0 <logic+0x4564>
  8050a0:	e0bffc17 	ldw	r2,-16(fp)
  8050a4:	10804e03 	ldbu	r2,312(r2)
  8050a8:	10803fcc 	andi	r2,r2,255
  8050ac:	1080201c 	xori	r2,r2,128
  8050b0:	10bfe004 	addi	r2,r2,-128
  8050b4:	10000226 	beq	r2,zero,8050c0 <logic+0x4564>
  8050b8:	00800044 	movi	r2,1
  8050bc:	00000106 	br	8050c4 <logic+0x4568>
  8050c0:	0005883a 	mov	r2,zero
  8050c4:	1007883a 	mov	r3,r2
  8050c8:	e0bffc17 	ldw	r2,-16(fp)
  8050cc:	10c03305 	stb	r3,204(r2)
  if (d->_g138) {
  8050d0:	e0bffc17 	ldw	r2,-16(fp)
  8050d4:	10803303 	ldbu	r2,204(r2)
  8050d8:	10803fcc 	andi	r2,r2,255
  8050dc:	1080201c 	xori	r2,r2,128
  8050e0:	10bfe004 	addi	r2,r2,-128
  8050e4:	10000326 	beq	r2,zero,8050f4 <logic+0x4598>
    d->_Pacemaker_local__Atrig7 = 1;
  8050e8:	e0bffc17 	ldw	r2,-16(fp)
  8050ec:	00c00044 	movi	r3,1
  8050f0:	10c01a05 	stb	r3,104(r2)
  }
  d->_g113 = d->_g85 || d->_g89;
  8050f4:	e0bffc17 	ldw	r2,-16(fp)
  8050f8:	10802983 	ldbu	r2,166(r2)
  8050fc:	10803fcc 	andi	r2,r2,255
  805100:	1080201c 	xori	r2,r2,128
  805104:	10bfe004 	addi	r2,r2,-128
  805108:	1000061e 	bne	r2,zero,805124 <logic+0x45c8>
  80510c:	e0bffc17 	ldw	r2,-16(fp)
  805110:	10802a43 	ldbu	r2,169(r2)
  805114:	10803fcc 	andi	r2,r2,255
  805118:	1080201c 	xori	r2,r2,128
  80511c:	10bfe004 	addi	r2,r2,-128
  805120:	10000226 	beq	r2,zero,80512c <logic+0x45d0>
  805124:	00800044 	movi	r2,1
  805128:	00000106 	br	805130 <logic+0x45d4>
  80512c:	0005883a 	mov	r2,zero
  805130:	1007883a 	mov	r3,r2
  805134:	e0bffc17 	ldw	r2,-16(fp)
  805138:	10c02e45 	stb	r3,185(r2)
  d->_cg114 = d->_Pacemaker_local__region3_VRP_x < d->VRP;
  80513c:	e0bffc17 	ldw	r2,-16(fp)
  805140:	14001117 	ldw	r16,68(r2)
  805144:	14401217 	ldw	r17,72(r2)
  805148:	e0bffc17 	ldw	r2,-16(fp)
  80514c:	10800317 	ldw	r2,12(r2)
  805150:	1009883a 	mov	r4,r2
  805154:	0809a000 	call	809a00 <__floatsidf>
  805158:	1009883a 	mov	r4,r2
  80515c:	180b883a 	mov	r5,r3
  805160:	04800044 	movi	r18,1
  805164:	200d883a 	mov	r6,r4
  805168:	280f883a 	mov	r7,r5
  80516c:	8009883a 	mov	r4,r16
  805170:	880b883a 	mov	r5,r17
  805174:	08088f80 	call	8088f8 <__ledf2>
  805178:	10000116 	blt	r2,zero,805180 <logic+0x4624>
  80517c:	0025883a 	mov	r18,zero
  805180:	9007883a 	mov	r3,r18
  805184:	e0bffc17 	ldw	r2,-16(fp)
  805188:	10c04bc5 	stb	r3,303(r2)
  d->_g119 = d->_g113 && d->_cg114;
  80518c:	e0bffc17 	ldw	r2,-16(fp)
  805190:	10802e43 	ldbu	r2,185(r2)
  805194:	10803fcc 	andi	r2,r2,255
  805198:	1080201c 	xori	r2,r2,128
  80519c:	10bfe004 	addi	r2,r2,-128
  8051a0:	10000826 	beq	r2,zero,8051c4 <logic+0x4668>
  8051a4:	e0bffc17 	ldw	r2,-16(fp)
  8051a8:	10804bc3 	ldbu	r2,303(r2)
  8051ac:	10803fcc 	andi	r2,r2,255
  8051b0:	1080201c 	xori	r2,r2,128
  8051b4:	10bfe004 	addi	r2,r2,-128
  8051b8:	10000226 	beq	r2,zero,8051c4 <logic+0x4668>
  8051bc:	00800044 	movi	r2,1
  8051c0:	00000106 	br	8051c8 <logic+0x466c>
  8051c4:	0005883a 	mov	r2,zero
  8051c8:	1007883a 	mov	r3,r2
  8051cc:	e0bffc17 	ldw	r2,-16(fp)
  8051d0:	10c02f85 	stb	r3,190(r2)
  if (d->_g119) {
  8051d4:	e0bffc17 	ldw	r2,-16(fp)
  8051d8:	10802f83 	ldbu	r2,190(r2)
  8051dc:	10803fcc 	andi	r2,r2,255
  8051e0:	1080201c 	xori	r2,r2,128
  8051e4:	10bfe004 	addi	r2,r2,-128
  8051e8:	10003426 	beq	r2,zero,8052bc <logic+0x4760>
    d->sleepT = (d->sleepT < (d->VRP - d->_Pacemaker_local__region3_VRP_x)) ? d->sleepT : (d->VRP - d->_Pacemaker_local__region3_VRP_x);
  8051ec:	e0bffc17 	ldw	r2,-16(fp)
  8051f0:	14000817 	ldw	r16,32(r2)
  8051f4:	14400917 	ldw	r17,36(r2)
  8051f8:	e0bffc17 	ldw	r2,-16(fp)
  8051fc:	10800317 	ldw	r2,12(r2)
  805200:	1009883a 	mov	r4,r2
  805204:	0809a000 	call	809a00 <__floatsidf>
  805208:	1011883a 	mov	r8,r2
  80520c:	1813883a 	mov	r9,r3
  805210:	e13ffc17 	ldw	r4,-16(fp)
  805214:	20801117 	ldw	r2,68(r4)
  805218:	20c01217 	ldw	r3,72(r4)
  80521c:	100d883a 	mov	r6,r2
  805220:	180f883a 	mov	r7,r3
  805224:	4009883a 	mov	r4,r8
  805228:	480b883a 	mov	r5,r9
  80522c:	08091040 	call	809104 <__subdf3>
  805230:	1009883a 	mov	r4,r2
  805234:	180b883a 	mov	r5,r3
  805238:	2005883a 	mov	r2,r4
  80523c:	2807883a 	mov	r3,r5
  805240:	100d883a 	mov	r6,r2
  805244:	180f883a 	mov	r7,r3
  805248:	8009883a 	mov	r4,r16
  80524c:	880b883a 	mov	r5,r17
  805250:	08088f80 	call	8088f8 <__ledf2>
  805254:	1000040e 	bge	r2,zero,805268 <logic+0x470c>
  805258:	e13ffc17 	ldw	r4,-16(fp)
  80525c:	20800817 	ldw	r2,32(r4)
  805260:	20c00917 	ldw	r3,36(r4)
  805264:	00001206 	br	8052b0 <logic+0x4754>
  805268:	e0bffc17 	ldw	r2,-16(fp)
  80526c:	10800317 	ldw	r2,12(r2)
  805270:	1009883a 	mov	r4,r2
  805274:	0809a000 	call	809a00 <__floatsidf>
  805278:	1011883a 	mov	r8,r2
  80527c:	1813883a 	mov	r9,r3
  805280:	e13ffc17 	ldw	r4,-16(fp)
  805284:	20801117 	ldw	r2,68(r4)
  805288:	20c01217 	ldw	r3,72(r4)
  80528c:	100d883a 	mov	r6,r2
  805290:	180f883a 	mov	r7,r3
  805294:	4009883a 	mov	r4,r8
  805298:	480b883a 	mov	r5,r9
  80529c:	08091040 	call	809104 <__subdf3>
  8052a0:	1009883a 	mov	r4,r2
  8052a4:	180b883a 	mov	r5,r3
  8052a8:	2005883a 	mov	r2,r4
  8052ac:	2807883a 	mov	r3,r5
  8052b0:	e13ffc17 	ldw	r4,-16(fp)
  8052b4:	20800815 	stw	r2,32(r4)
  8052b8:	20c00915 	stw	r3,36(r4)
  }
  d->_cg115 = d->_Pacemaker_local__Atrig6 || d->_Pacemaker_local__Atrig7;
  8052bc:	e0bffc17 	ldw	r2,-16(fp)
  8052c0:	108019c3 	ldbu	r2,103(r2)
  8052c4:	10803fcc 	andi	r2,r2,255
  8052c8:	1080201c 	xori	r2,r2,128
  8052cc:	10bfe004 	addi	r2,r2,-128
  8052d0:	1000061e 	bne	r2,zero,8052ec <logic+0x4790>
  8052d4:	e0bffc17 	ldw	r2,-16(fp)
  8052d8:	10801a03 	ldbu	r2,104(r2)
  8052dc:	10803fcc 	andi	r2,r2,255
  8052e0:	1080201c 	xori	r2,r2,128
  8052e4:	10bfe004 	addi	r2,r2,-128
  8052e8:	10000226 	beq	r2,zero,8052f4 <logic+0x4798>
  8052ec:	00800044 	movi	r2,1
  8052f0:	00000106 	br	8052f8 <logic+0x479c>
  8052f4:	0005883a 	mov	r2,zero
  8052f8:	1007883a 	mov	r3,r2
  8052fc:	e0bffc17 	ldw	r2,-16(fp)
  805300:	10c04b85 	stb	r3,302(r2)
  d->_g114 = d->_g113 && !d->_cg114;
  805304:	e0bffc17 	ldw	r2,-16(fp)
  805308:	10802e43 	ldbu	r2,185(r2)
  80530c:	10803fcc 	andi	r2,r2,255
  805310:	1080201c 	xori	r2,r2,128
  805314:	10bfe004 	addi	r2,r2,-128
  805318:	10000826 	beq	r2,zero,80533c <logic+0x47e0>
  80531c:	e0bffc17 	ldw	r2,-16(fp)
  805320:	10804bc3 	ldbu	r2,303(r2)
  805324:	10803fcc 	andi	r2,r2,255
  805328:	1080201c 	xori	r2,r2,128
  80532c:	10bfe004 	addi	r2,r2,-128
  805330:	1000021e 	bne	r2,zero,80533c <logic+0x47e0>
  805334:	00800044 	movi	r2,1
  805338:	00000106 	br	805340 <logic+0x47e4>
  80533c:	0005883a 	mov	r2,zero
  805340:	1007883a 	mov	r3,r2
  805344:	e0bffc17 	ldw	r2,-16(fp)
  805348:	10c02e85 	stb	r3,186(r2)
  d->_cg117 = d->_Pacemaker_local__Atrig6 || d->_Pacemaker_local__Atrig7;
  80534c:	e0bffc17 	ldw	r2,-16(fp)
  805350:	108019c3 	ldbu	r2,103(r2)
  805354:	10803fcc 	andi	r2,r2,255
  805358:	1080201c 	xori	r2,r2,128
  80535c:	10bfe004 	addi	r2,r2,-128
  805360:	1000061e 	bne	r2,zero,80537c <logic+0x4820>
  805364:	e0bffc17 	ldw	r2,-16(fp)
  805368:	10801a03 	ldbu	r2,104(r2)
  80536c:	10803fcc 	andi	r2,r2,255
  805370:	1080201c 	xori	r2,r2,128
  805374:	10bfe004 	addi	r2,r2,-128
  805378:	10000226 	beq	r2,zero,805384 <logic+0x4828>
  80537c:	00800044 	movi	r2,1
  805380:	00000106 	br	805388 <logic+0x482c>
  805384:	0005883a 	mov	r2,zero
  805388:	1007883a 	mov	r3,r2
  80538c:	e0bffc17 	ldw	r2,-16(fp)
  805390:	10c04c05 	stb	r3,304(r2)
  d->_g116 = (d->_g119 && d->_cg115) || (d->_g114 && d->_cg117);
  805394:	e0bffc17 	ldw	r2,-16(fp)
  805398:	10802f83 	ldbu	r2,190(r2)
  80539c:	10803fcc 	andi	r2,r2,255
  8053a0:	1080201c 	xori	r2,r2,128
  8053a4:	10bfe004 	addi	r2,r2,-128
  8053a8:	10000626 	beq	r2,zero,8053c4 <logic+0x4868>
  8053ac:	e0bffc17 	ldw	r2,-16(fp)
  8053b0:	10804b83 	ldbu	r2,302(r2)
  8053b4:	10803fcc 	andi	r2,r2,255
  8053b8:	1080201c 	xori	r2,r2,128
  8053bc:	10bfe004 	addi	r2,r2,-128
  8053c0:	10000c1e 	bne	r2,zero,8053f4 <logic+0x4898>
  8053c4:	e0bffc17 	ldw	r2,-16(fp)
  8053c8:	10802e83 	ldbu	r2,186(r2)
  8053cc:	10803fcc 	andi	r2,r2,255
  8053d0:	1080201c 	xori	r2,r2,128
  8053d4:	10bfe004 	addi	r2,r2,-128
  8053d8:	10000826 	beq	r2,zero,8053fc <logic+0x48a0>
  8053dc:	e0bffc17 	ldw	r2,-16(fp)
  8053e0:	10804c03 	ldbu	r2,304(r2)
  8053e4:	10803fcc 	andi	r2,r2,255
  8053e8:	1080201c 	xori	r2,r2,128
  8053ec:	10bfe004 	addi	r2,r2,-128
  8053f0:	10000226 	beq	r2,zero,8053fc <logic+0x48a0>
  8053f4:	00800044 	movi	r2,1
  8053f8:	00000106 	br	805400 <logic+0x48a4>
  8053fc:	0005883a 	mov	r2,zero
  805400:	1007883a 	mov	r3,r2
  805404:	e0bffc17 	ldw	r2,-16(fp)
  805408:	10c02f05 	stb	r3,188(r2)
  d->_g130 = d->_pg120;
  80540c:	e0bffc17 	ldw	r2,-16(fp)
  805410:	10c06143 	ldbu	r3,389(r2)
  805414:	e0bffc17 	ldw	r2,-16(fp)
  805418:	10c03185 	stb	r3,198(r2)
  d->_g124 = d->_pg111;
  80541c:	e0bffc17 	ldw	r2,-16(fp)
  805420:	10c06183 	ldbu	r3,390(r2)
  805424:	e0bffc17 	ldw	r2,-16(fp)
  805428:	10c03045 	stb	r3,193(r2)
  d->_g127_e2 = !(d->_g130 || d->_g124);
  80542c:	e0bffc17 	ldw	r2,-16(fp)
  805430:	10803183 	ldbu	r2,198(r2)
  805434:	10803fcc 	andi	r2,r2,255
  805438:	1080201c 	xori	r2,r2,128
  80543c:	10bfe004 	addi	r2,r2,-128
  805440:	1000081e 	bne	r2,zero,805464 <logic+0x4908>
  805444:	e0bffc17 	ldw	r2,-16(fp)
  805448:	10803043 	ldbu	r2,193(r2)
  80544c:	10803fcc 	andi	r2,r2,255
  805450:	1080201c 	xori	r2,r2,128
  805454:	10bfe004 	addi	r2,r2,-128
  805458:	1000021e 	bne	r2,zero,805464 <logic+0x4908>
  80545c:	00800044 	movi	r2,1
  805460:	00000106 	br	805468 <logic+0x490c>
  805464:	0005883a 	mov	r2,zero
  805468:	1007883a 	mov	r3,r2
  80546c:	e0bffc17 	ldw	r2,-16(fp)
  805470:	10c057c5 	stb	r3,351(r2)
  d->_g130 = d->_g124 || d->_g130;
  805474:	e0bffc17 	ldw	r2,-16(fp)
  805478:	10803043 	ldbu	r2,193(r2)
  80547c:	10803fcc 	andi	r2,r2,255
  805480:	1080201c 	xori	r2,r2,128
  805484:	10bfe004 	addi	r2,r2,-128
  805488:	1000061e 	bne	r2,zero,8054a4 <logic+0x4948>
  80548c:	e0bffc17 	ldw	r2,-16(fp)
  805490:	10803183 	ldbu	r2,198(r2)
  805494:	10803fcc 	andi	r2,r2,255
  805498:	1080201c 	xori	r2,r2,128
  80549c:	10bfe004 	addi	r2,r2,-128
  8054a0:	10000226 	beq	r2,zero,8054ac <logic+0x4950>
  8054a4:	00800044 	movi	r2,1
  8054a8:	00000106 	br	8054b0 <logic+0x4954>
  8054ac:	0005883a 	mov	r2,zero
  8054b0:	1007883a 	mov	r3,r2
  8054b4:	e0bffc17 	ldw	r2,-16(fp)
  8054b8:	10c03185 	stb	r3,198(r2)
  d->_cg125 = d->_Pacemaker_local__region3_VRP_x < d->VRP;
  8054bc:	e0bffc17 	ldw	r2,-16(fp)
  8054c0:	14001117 	ldw	r16,68(r2)
  8054c4:	14401217 	ldw	r17,72(r2)
  8054c8:	e0bffc17 	ldw	r2,-16(fp)
  8054cc:	10800317 	ldw	r2,12(r2)
  8054d0:	1009883a 	mov	r4,r2
  8054d4:	0809a000 	call	809a00 <__floatsidf>
  8054d8:	1009883a 	mov	r4,r2
  8054dc:	180b883a 	mov	r5,r3
  8054e0:	04800044 	movi	r18,1
  8054e4:	200d883a 	mov	r6,r4
  8054e8:	280f883a 	mov	r7,r5
  8054ec:	8009883a 	mov	r4,r16
  8054f0:	880b883a 	mov	r5,r17
  8054f4:	08088f80 	call	8088f8 <__ledf2>
  8054f8:	10000116 	blt	r2,zero,805500 <logic+0x49a4>
  8054fc:	0025883a 	mov	r18,zero
  805500:	9007883a 	mov	r3,r18
  805504:	e0bffc17 	ldw	r2,-16(fp)
  805508:	10c04d45 	stb	r3,309(r2)
  d->_g124 = d->_g130 && d->_cg125;
  80550c:	e0bffc17 	ldw	r2,-16(fp)
  805510:	10803183 	ldbu	r2,198(r2)
  805514:	10803fcc 	andi	r2,r2,255
  805518:	1080201c 	xori	r2,r2,128
  80551c:	10bfe004 	addi	r2,r2,-128
  805520:	10000826 	beq	r2,zero,805544 <logic+0x49e8>
  805524:	e0bffc17 	ldw	r2,-16(fp)
  805528:	10804d43 	ldbu	r2,309(r2)
  80552c:	10803fcc 	andi	r2,r2,255
  805530:	1080201c 	xori	r2,r2,128
  805534:	10bfe004 	addi	r2,r2,-128
  805538:	10000226 	beq	r2,zero,805544 <logic+0x49e8>
  80553c:	00800044 	movi	r2,1
  805540:	00000106 	br	805548 <logic+0x49ec>
  805544:	0005883a 	mov	r2,zero
  805548:	1007883a 	mov	r3,r2
  80554c:	e0bffc17 	ldw	r2,-16(fp)
  805550:	10c03045 	stb	r3,193(r2)
  if (d->_g124) {
  805554:	e0bffc17 	ldw	r2,-16(fp)
  805558:	10803043 	ldbu	r2,193(r2)
  80555c:	10803fcc 	andi	r2,r2,255
  805560:	1080201c 	xori	r2,r2,128
  805564:	10bfe004 	addi	r2,r2,-128
  805568:	10003426 	beq	r2,zero,80563c <logic+0x4ae0>
    d->sleepT = (d->sleepT < (d->VRP - d->_Pacemaker_local__region3_VRP_x)) ? d->sleepT : (d->VRP - d->_Pacemaker_local__region3_VRP_x);
  80556c:	e0bffc17 	ldw	r2,-16(fp)
  805570:	14000817 	ldw	r16,32(r2)
  805574:	14400917 	ldw	r17,36(r2)
  805578:	e0bffc17 	ldw	r2,-16(fp)
  80557c:	10800317 	ldw	r2,12(r2)
  805580:	1009883a 	mov	r4,r2
  805584:	0809a000 	call	809a00 <__floatsidf>
  805588:	1011883a 	mov	r8,r2
  80558c:	1813883a 	mov	r9,r3
  805590:	e13ffc17 	ldw	r4,-16(fp)
  805594:	20801117 	ldw	r2,68(r4)
  805598:	20c01217 	ldw	r3,72(r4)
  80559c:	100d883a 	mov	r6,r2
  8055a0:	180f883a 	mov	r7,r3
  8055a4:	4009883a 	mov	r4,r8
  8055a8:	480b883a 	mov	r5,r9
  8055ac:	08091040 	call	809104 <__subdf3>
  8055b0:	1009883a 	mov	r4,r2
  8055b4:	180b883a 	mov	r5,r3
  8055b8:	2005883a 	mov	r2,r4
  8055bc:	2807883a 	mov	r3,r5
  8055c0:	100d883a 	mov	r6,r2
  8055c4:	180f883a 	mov	r7,r3
  8055c8:	8009883a 	mov	r4,r16
  8055cc:	880b883a 	mov	r5,r17
  8055d0:	08088f80 	call	8088f8 <__ledf2>
  8055d4:	1000040e 	bge	r2,zero,8055e8 <logic+0x4a8c>
  8055d8:	e13ffc17 	ldw	r4,-16(fp)
  8055dc:	20800817 	ldw	r2,32(r4)
  8055e0:	20c00917 	ldw	r3,36(r4)
  8055e4:	00001206 	br	805630 <logic+0x4ad4>
  8055e8:	e0bffc17 	ldw	r2,-16(fp)
  8055ec:	10800317 	ldw	r2,12(r2)
  8055f0:	1009883a 	mov	r4,r2
  8055f4:	0809a000 	call	809a00 <__floatsidf>
  8055f8:	1011883a 	mov	r8,r2
  8055fc:	1813883a 	mov	r9,r3
  805600:	e13ffc17 	ldw	r4,-16(fp)
  805604:	20801117 	ldw	r2,68(r4)
  805608:	20c01217 	ldw	r3,72(r4)
  80560c:	100d883a 	mov	r6,r2
  805610:	180f883a 	mov	r7,r3
  805614:	4009883a 	mov	r4,r8
  805618:	480b883a 	mov	r5,r9
  80561c:	08091040 	call	809104 <__subdf3>
  805620:	1009883a 	mov	r4,r2
  805624:	180b883a 	mov	r5,r3
  805628:	2005883a 	mov	r2,r4
  80562c:	2807883a 	mov	r3,r5
  805630:	e13ffc17 	ldw	r4,-16(fp)
  805634:	20800815 	stw	r2,32(r4)
  805638:	20c00915 	stw	r3,36(r4)
  }
  d->_cg126 = d->_Pacemaker_local__Atrig6 || d->_Pacemaker_local__Atrig7;
  80563c:	e0bffc17 	ldw	r2,-16(fp)
  805640:	108019c3 	ldbu	r2,103(r2)
  805644:	10803fcc 	andi	r2,r2,255
  805648:	1080201c 	xori	r2,r2,128
  80564c:	10bfe004 	addi	r2,r2,-128
  805650:	1000061e 	bne	r2,zero,80566c <logic+0x4b10>
  805654:	e0bffc17 	ldw	r2,-16(fp)
  805658:	10801a03 	ldbu	r2,104(r2)
  80565c:	10803fcc 	andi	r2,r2,255
  805660:	1080201c 	xori	r2,r2,128
  805664:	10bfe004 	addi	r2,r2,-128
  805668:	10000226 	beq	r2,zero,805674 <logic+0x4b18>
  80566c:	00800044 	movi	r2,1
  805670:	00000106 	br	805678 <logic+0x4b1c>
  805674:	0005883a 	mov	r2,zero
  805678:	1007883a 	mov	r3,r2
  80567c:	e0bffc17 	ldw	r2,-16(fp)
  805680:	10c04d05 	stb	r3,308(r2)
  d->_g125 = d->_g130 && !d->_cg125;
  805684:	e0bffc17 	ldw	r2,-16(fp)
  805688:	10803183 	ldbu	r2,198(r2)
  80568c:	10803fcc 	andi	r2,r2,255
  805690:	1080201c 	xori	r2,r2,128
  805694:	10bfe004 	addi	r2,r2,-128
  805698:	10000826 	beq	r2,zero,8056bc <logic+0x4b60>
  80569c:	e0bffc17 	ldw	r2,-16(fp)
  8056a0:	10804d43 	ldbu	r2,309(r2)
  8056a4:	10803fcc 	andi	r2,r2,255
  8056a8:	1080201c 	xori	r2,r2,128
  8056ac:	10bfe004 	addi	r2,r2,-128
  8056b0:	1000021e 	bne	r2,zero,8056bc <logic+0x4b60>
  8056b4:	00800044 	movi	r2,1
  8056b8:	00000106 	br	8056c0 <logic+0x4b64>
  8056bc:	0005883a 	mov	r2,zero
  8056c0:	1007883a 	mov	r3,r2
  8056c4:	e0bffc17 	ldw	r2,-16(fp)
  8056c8:	10c03085 	stb	r3,194(r2)
  d->_cg128 = d->_Pacemaker_local__Atrig6 || d->_Pacemaker_local__Atrig7;
  8056cc:	e0bffc17 	ldw	r2,-16(fp)
  8056d0:	108019c3 	ldbu	r2,103(r2)
  8056d4:	10803fcc 	andi	r2,r2,255
  8056d8:	1080201c 	xori	r2,r2,128
  8056dc:	10bfe004 	addi	r2,r2,-128
  8056e0:	1000061e 	bne	r2,zero,8056fc <logic+0x4ba0>
  8056e4:	e0bffc17 	ldw	r2,-16(fp)
  8056e8:	10801a03 	ldbu	r2,104(r2)
  8056ec:	10803fcc 	andi	r2,r2,255
  8056f0:	1080201c 	xori	r2,r2,128
  8056f4:	10bfe004 	addi	r2,r2,-128
  8056f8:	10000226 	beq	r2,zero,805704 <logic+0x4ba8>
  8056fc:	00800044 	movi	r2,1
  805700:	00000106 	br	805708 <logic+0x4bac>
  805704:	0005883a 	mov	r2,zero
  805708:	1007883a 	mov	r3,r2
  80570c:	e0bffc17 	ldw	r2,-16(fp)
  805710:	10c04d85 	stb	r3,310(r2)
  d->_g127 = (d->_g124 && d->_cg126) || (d->_g125 && d->_cg128);
  805714:	e0bffc17 	ldw	r2,-16(fp)
  805718:	10803043 	ldbu	r2,193(r2)
  80571c:	10803fcc 	andi	r2,r2,255
  805720:	1080201c 	xori	r2,r2,128
  805724:	10bfe004 	addi	r2,r2,-128
  805728:	10000626 	beq	r2,zero,805744 <logic+0x4be8>
  80572c:	e0bffc17 	ldw	r2,-16(fp)
  805730:	10804d03 	ldbu	r2,308(r2)
  805734:	10803fcc 	andi	r2,r2,255
  805738:	1080201c 	xori	r2,r2,128
  80573c:	10bfe004 	addi	r2,r2,-128
  805740:	10000c1e 	bne	r2,zero,805774 <logic+0x4c18>
  805744:	e0bffc17 	ldw	r2,-16(fp)
  805748:	10803083 	ldbu	r2,194(r2)
  80574c:	10803fcc 	andi	r2,r2,255
  805750:	1080201c 	xori	r2,r2,128
  805754:	10bfe004 	addi	r2,r2,-128
  805758:	10000826 	beq	r2,zero,80577c <logic+0x4c20>
  80575c:	e0bffc17 	ldw	r2,-16(fp)
  805760:	10804d83 	ldbu	r2,310(r2)
  805764:	10803fcc 	andi	r2,r2,255
  805768:	1080201c 	xori	r2,r2,128
  80576c:	10bfe004 	addi	r2,r2,-128
  805770:	10000226 	beq	r2,zero,80577c <logic+0x4c20>
  805774:	00800044 	movi	r2,1
  805778:	00000106 	br	805780 <logic+0x4c24>
  80577c:	0005883a 	mov	r2,zero
  805780:	1007883a 	mov	r3,r2
  805784:	e0bffc17 	ldw	r2,-16(fp)
  805788:	10c03105 	stb	r3,196(r2)
  d->_g134 = !d->_g100;
  80578c:	e0bffc17 	ldw	r2,-16(fp)
  805790:	10802c43 	ldbu	r2,177(r2)
  805794:	10803fcc 	andi	r2,r2,255
  805798:	1080201c 	xori	r2,r2,128
  80579c:	10bfe004 	addi	r2,r2,-128
  8057a0:	1005003a 	cmpeq	r2,r2,zero
  8057a4:	1007883a 	mov	r3,r2
  8057a8:	e0bffc17 	ldw	r2,-16(fp)
  8057ac:	10c03205 	stb	r3,200(r2)
  d->_g138 = d->_g72 || d->_g138;
  8057b0:	e0bffc17 	ldw	r2,-16(fp)
  8057b4:	10802743 	ldbu	r2,157(r2)
  8057b8:	10803fcc 	andi	r2,r2,255
  8057bc:	1080201c 	xori	r2,r2,128
  8057c0:	10bfe004 	addi	r2,r2,-128
  8057c4:	1000061e 	bne	r2,zero,8057e0 <logic+0x4c84>
  8057c8:	e0bffc17 	ldw	r2,-16(fp)
  8057cc:	10803303 	ldbu	r2,204(r2)
  8057d0:	10803fcc 	andi	r2,r2,255
  8057d4:	1080201c 	xori	r2,r2,128
  8057d8:	10bfe004 	addi	r2,r2,-128
  8057dc:	10000226 	beq	r2,zero,8057e8 <logic+0x4c8c>
  8057e0:	00800044 	movi	r2,1
  8057e4:	00000106 	br	8057ec <logic+0x4c90>
  8057e8:	0005883a 	mov	r2,zero
  8057ec:	1007883a 	mov	r3,r2
  8057f0:	e0bffc17 	ldw	r2,-16(fp)
  8057f4:	10c03305 	stb	r3,204(r2)
  d->_g135 = (d->_g91 || d->_g116) && (d->_g127_e2 || d->_g127) && (d->_g134 || d->_g138) && (d->_g116 || d->_g127 || d->_g138);
  8057f8:	e0bffc17 	ldw	r2,-16(fp)
  8057fc:	10802ac3 	ldbu	r2,171(r2)
  805800:	10803fcc 	andi	r2,r2,255
  805804:	1080201c 	xori	r2,r2,128
  805808:	10bfe004 	addi	r2,r2,-128
  80580c:	1000061e 	bne	r2,zero,805828 <logic+0x4ccc>
  805810:	e0bffc17 	ldw	r2,-16(fp)
  805814:	10802f03 	ldbu	r2,188(r2)
  805818:	10803fcc 	andi	r2,r2,255
  80581c:	1080201c 	xori	r2,r2,128
  805820:	10bfe004 	addi	r2,r2,-128
  805824:	10002c26 	beq	r2,zero,8058d8 <logic+0x4d7c>
  805828:	e0bffc17 	ldw	r2,-16(fp)
  80582c:	108057c3 	ldbu	r2,351(r2)
  805830:	10803fcc 	andi	r2,r2,255
  805834:	1080201c 	xori	r2,r2,128
  805838:	10bfe004 	addi	r2,r2,-128
  80583c:	1000061e 	bne	r2,zero,805858 <logic+0x4cfc>
  805840:	e0bffc17 	ldw	r2,-16(fp)
  805844:	10803103 	ldbu	r2,196(r2)
  805848:	10803fcc 	andi	r2,r2,255
  80584c:	1080201c 	xori	r2,r2,128
  805850:	10bfe004 	addi	r2,r2,-128
  805854:	10002026 	beq	r2,zero,8058d8 <logic+0x4d7c>
  805858:	e0bffc17 	ldw	r2,-16(fp)
  80585c:	10803203 	ldbu	r2,200(r2)
  805860:	10803fcc 	andi	r2,r2,255
  805864:	1080201c 	xori	r2,r2,128
  805868:	10bfe004 	addi	r2,r2,-128
  80586c:	1000061e 	bne	r2,zero,805888 <logic+0x4d2c>
  805870:	e0bffc17 	ldw	r2,-16(fp)
  805874:	10803303 	ldbu	r2,204(r2)
  805878:	10803fcc 	andi	r2,r2,255
  80587c:	1080201c 	xori	r2,r2,128
  805880:	10bfe004 	addi	r2,r2,-128
  805884:	10001426 	beq	r2,zero,8058d8 <logic+0x4d7c>
  805888:	e0bffc17 	ldw	r2,-16(fp)
  80588c:	10802f03 	ldbu	r2,188(r2)
  805890:	10803fcc 	andi	r2,r2,255
  805894:	1080201c 	xori	r2,r2,128
  805898:	10bfe004 	addi	r2,r2,-128
  80589c:	10000c1e 	bne	r2,zero,8058d0 <logic+0x4d74>
  8058a0:	e0bffc17 	ldw	r2,-16(fp)
  8058a4:	10803103 	ldbu	r2,196(r2)
  8058a8:	10803fcc 	andi	r2,r2,255
  8058ac:	1080201c 	xori	r2,r2,128
  8058b0:	10bfe004 	addi	r2,r2,-128
  8058b4:	1000061e 	bne	r2,zero,8058d0 <logic+0x4d74>
  8058b8:	e0bffc17 	ldw	r2,-16(fp)
  8058bc:	10803303 	ldbu	r2,204(r2)
  8058c0:	10803fcc 	andi	r2,r2,255
  8058c4:	1080201c 	xori	r2,r2,128
  8058c8:	10bfe004 	addi	r2,r2,-128
  8058cc:	10000226 	beq	r2,zero,8058d8 <logic+0x4d7c>
  8058d0:	00800044 	movi	r2,1
  8058d4:	00000106 	br	8058dc <logic+0x4d80>
  8058d8:	0005883a 	mov	r2,zero
  8058dc:	1007883a 	mov	r3,r2
  8058e0:	e0bffc17 	ldw	r2,-16(fp)
  8058e4:	10c03245 	stb	r3,201(r2)
  d->_cg139 = d->_Pacemaker_local__Atrig6;
  8058e8:	e0bffc17 	ldw	r2,-16(fp)
  8058ec:	10c019c3 	ldbu	r3,103(r2)
  8058f0:	e0bffc17 	ldw	r2,-16(fp)
  8058f4:	10c04a85 	stb	r3,298(r2)
  d->_g127 = d->_pg116;
  8058f8:	e0bffc17 	ldw	r2,-16(fp)
  8058fc:	10c061c3 	ldbu	r3,391(r2)
  805900:	e0bffc17 	ldw	r2,-16(fp)
  805904:	10c03105 	stb	r3,196(r2)
  d->_cg107 = d->VS || d->_Pacemaker_local_iVP;
  805908:	e0bffc17 	ldw	r2,-16(fp)
  80590c:	10800a43 	ldbu	r2,41(r2)
  805910:	10803fcc 	andi	r2,r2,255
  805914:	1080201c 	xori	r2,r2,128
  805918:	10bfe004 	addi	r2,r2,-128
  80591c:	1000061e 	bne	r2,zero,805938 <logic+0x4ddc>
  805920:	e0bffc17 	ldw	r2,-16(fp)
  805924:	10801743 	ldbu	r2,93(r2)
  805928:	10803fcc 	andi	r2,r2,255
  80592c:	1080201c 	xori	r2,r2,128
  805930:	10bfe004 	addi	r2,r2,-128
  805934:	10000226 	beq	r2,zero,805940 <logic+0x4de4>
  805938:	00800044 	movi	r2,1
  80593c:	00000106 	br	805944 <logic+0x4de8>
  805940:	0005883a 	mov	r2,zero
  805944:	1007883a 	mov	r3,r2
  805948:	e0bffc17 	ldw	r2,-16(fp)
  80594c:	10c04ac5 	stb	r3,299(r2)
  d->_g116 = d->_GO || (d->_g135 && !d->_cg139) || (d->_g127 && !d->_cg107);
  805950:	e0bffc17 	ldw	r2,-16(fp)
  805954:	10803fc3 	ldbu	r2,255(r2)
  805958:	10803fcc 	andi	r2,r2,255
  80595c:	1080201c 	xori	r2,r2,128
  805960:	10bfe004 	addi	r2,r2,-128
  805964:	1000181e 	bne	r2,zero,8059c8 <logic+0x4e6c>
  805968:	e0bffc17 	ldw	r2,-16(fp)
  80596c:	10803243 	ldbu	r2,201(r2)
  805970:	10803fcc 	andi	r2,r2,255
  805974:	1080201c 	xori	r2,r2,128
  805978:	10bfe004 	addi	r2,r2,-128
  80597c:	10000626 	beq	r2,zero,805998 <logic+0x4e3c>
  805980:	e0bffc17 	ldw	r2,-16(fp)
  805984:	10804a83 	ldbu	r2,298(r2)
  805988:	10803fcc 	andi	r2,r2,255
  80598c:	1080201c 	xori	r2,r2,128
  805990:	10bfe004 	addi	r2,r2,-128
  805994:	10000c26 	beq	r2,zero,8059c8 <logic+0x4e6c>
  805998:	e0bffc17 	ldw	r2,-16(fp)
  80599c:	10803103 	ldbu	r2,196(r2)
  8059a0:	10803fcc 	andi	r2,r2,255
  8059a4:	1080201c 	xori	r2,r2,128
  8059a8:	10bfe004 	addi	r2,r2,-128
  8059ac:	10000826 	beq	r2,zero,8059d0 <logic+0x4e74>
  8059b0:	e0bffc17 	ldw	r2,-16(fp)
  8059b4:	10804ac3 	ldbu	r2,299(r2)
  8059b8:	10803fcc 	andi	r2,r2,255
  8059bc:	1080201c 	xori	r2,r2,128
  8059c0:	10bfe004 	addi	r2,r2,-128
  8059c4:	1000021e 	bne	r2,zero,8059d0 <logic+0x4e74>
  8059c8:	00800044 	movi	r2,1
  8059cc:	00000106 	br	8059d4 <logic+0x4e78>
  8059d0:	0005883a 	mov	r2,zero
  8059d4:	1007883a 	mov	r3,r2
  8059d8:	e0bffc17 	ldw	r2,-16(fp)
  8059dc:	10c02f05 	stb	r3,188(r2)
  d->_g136 = d->_g127 && d->_cg107;
  8059e0:	e0bffc17 	ldw	r2,-16(fp)
  8059e4:	10803103 	ldbu	r2,196(r2)
  8059e8:	10803fcc 	andi	r2,r2,255
  8059ec:	1080201c 	xori	r2,r2,128
  8059f0:	10bfe004 	addi	r2,r2,-128
  8059f4:	10000826 	beq	r2,zero,805a18 <logic+0x4ebc>
  8059f8:	e0bffc17 	ldw	r2,-16(fp)
  8059fc:	10804ac3 	ldbu	r2,299(r2)
  805a00:	10803fcc 	andi	r2,r2,255
  805a04:	1080201c 	xori	r2,r2,128
  805a08:	10bfe004 	addi	r2,r2,-128
  805a0c:	10000226 	beq	r2,zero,805a18 <logic+0x4ebc>
  805a10:	00800044 	movi	r2,1
  805a14:	00000106 	br	805a1c <logic+0x4ec0>
  805a18:	0005883a 	mov	r2,zero
  805a1c:	1007883a 	mov	r3,r2
  805a20:	e0bffc17 	ldw	r2,-16(fp)
  805a24:	10c03285 	stb	r3,202(r2)
  if (d->_g136) {
  805a28:	e0bffc17 	ldw	r2,-16(fp)
  805a2c:	10803283 	ldbu	r2,202(r2)
  805a30:	10803fcc 	andi	r2,r2,255
  805a34:	1080201c 	xori	r2,r2,128
  805a38:	10bfe004 	addi	r2,r2,-128
  805a3c:	10000326 	beq	r2,zero,805a4c <logic+0x4ef0>
    d->_Pacemaker_local__region3_VRP_x = 0;
  805a40:	e0bffc17 	ldw	r2,-16(fp)
  805a44:	10001115 	stw	zero,68(r2)
  805a48:	10001215 	stw	zero,72(r2)
  }
  d->_g116_e1 = d->_g135 && d->_cg139;
  805a4c:	e0bffc17 	ldw	r2,-16(fp)
  805a50:	10803243 	ldbu	r2,201(r2)
  805a54:	10803fcc 	andi	r2,r2,255
  805a58:	1080201c 	xori	r2,r2,128
  805a5c:	10bfe004 	addi	r2,r2,-128
  805a60:	10000826 	beq	r2,zero,805a84 <logic+0x4f28>
  805a64:	e0bffc17 	ldw	r2,-16(fp)
  805a68:	10804a83 	ldbu	r2,298(r2)
  805a6c:	10803fcc 	andi	r2,r2,255
  805a70:	1080201c 	xori	r2,r2,128
  805a74:	10bfe004 	addi	r2,r2,-128
  805a78:	10000226 	beq	r2,zero,805a84 <logic+0x4f28>
  805a7c:	00800044 	movi	r2,1
  805a80:	00000106 	br	805a88 <logic+0x4f2c>
  805a84:	0005883a 	mov	r2,zero
  805a88:	1007883a 	mov	r3,r2
  805a8c:	e0bffc17 	ldw	r2,-16(fp)
  805a90:	10c05785 	stb	r3,350(r2)
  if (d->_g116_e1) {
  805a94:	e0bffc17 	ldw	r2,-16(fp)
  805a98:	10805783 	ldbu	r2,350(r2)
  805a9c:	10803fcc 	andi	r2,r2,255
  805aa0:	1080201c 	xori	r2,r2,128
  805aa4:	10bfe004 	addi	r2,r2,-128
  805aa8:	10000626 	beq	r2,zero,805ac4 <logic+0x4f68>
    d->_Pacemaker_local_VRP_timeout |= 1;
  805aac:	e0bffc17 	ldw	r2,-16(fp)
  805ab0:	108017c3 	ldbu	r2,95(r2)
  805ab4:	10800054 	ori	r2,r2,1
  805ab8:	1007883a 	mov	r3,r2
  805abc:	e0bffc17 	ldw	r2,-16(fp)
  805ac0:	10c017c5 	stb	r3,95(r2)
  }
  d->_g136_e3 = d->_g136 || d->_g116_e1;
  805ac4:	e0bffc17 	ldw	r2,-16(fp)
  805ac8:	10803283 	ldbu	r2,202(r2)
  805acc:	10803fcc 	andi	r2,r2,255
  805ad0:	1080201c 	xori	r2,r2,128
  805ad4:	10bfe004 	addi	r2,r2,-128
  805ad8:	1000061e 	bne	r2,zero,805af4 <logic+0x4f98>
  805adc:	e0bffc17 	ldw	r2,-16(fp)
  805ae0:	10805783 	ldbu	r2,350(r2)
  805ae4:	10803fcc 	andi	r2,r2,255
  805ae8:	1080201c 	xori	r2,r2,128
  805aec:	10bfe004 	addi	r2,r2,-128
  805af0:	10000226 	beq	r2,zero,805afc <logic+0x4fa0>
  805af4:	00800044 	movi	r2,1
  805af8:	00000106 	br	805b00 <logic+0x4fa4>
  805afc:	0005883a 	mov	r2,zero
  805b00:	1007883a 	mov	r3,r2
  805b04:	e0bffc17 	ldw	r2,-16(fp)
  805b08:	10c05805 	stb	r3,352(r2)
  if (d->_g136_e3) {
  805b0c:	e0bffc17 	ldw	r2,-16(fp)
  805b10:	10805803 	ldbu	r2,352(r2)
  805b14:	10803fcc 	andi	r2,r2,255
  805b18:	1080201c 	xori	r2,r2,128
  805b1c:	10bfe004 	addi	r2,r2,-128
  805b20:	10000426 	beq	r2,zero,805b34 <logic+0x4fd8>
    d->_Pacemaker_local__Atrig6 = 0;
  805b24:	e0bffc17 	ldw	r2,-16(fp)
  805b28:	100019c5 	stb	zero,103(r2)
    d->_Pacemaker_local__Atrig7 = 0;
  805b2c:	e0bffc17 	ldw	r2,-16(fp)
  805b30:	10001a05 	stb	zero,104(r2)
  }
  d->_cg110 = d->_Pacemaker_local__region3_VRP_x < d->VRP;
  805b34:	e0bffc17 	ldw	r2,-16(fp)
  805b38:	14001117 	ldw	r16,68(r2)
  805b3c:	14401217 	ldw	r17,72(r2)
  805b40:	e0bffc17 	ldw	r2,-16(fp)
  805b44:	10800317 	ldw	r2,12(r2)
  805b48:	1009883a 	mov	r4,r2
  805b4c:	0809a000 	call	809a00 <__floatsidf>
  805b50:	1009883a 	mov	r4,r2
  805b54:	180b883a 	mov	r5,r3
  805b58:	04800044 	movi	r18,1
  805b5c:	200d883a 	mov	r6,r4
  805b60:	280f883a 	mov	r7,r5
  805b64:	8009883a 	mov	r4,r16
  805b68:	880b883a 	mov	r5,r17
  805b6c:	08088f80 	call	8088f8 <__ledf2>
  805b70:	10000116 	blt	r2,zero,805b78 <logic+0x501c>
  805b74:	0025883a 	mov	r18,zero
  805b78:	9007883a 	mov	r3,r18
  805b7c:	e0bffc17 	ldw	r2,-16(fp)
  805b80:	10c04b05 	stb	r3,300(r2)
  d->_g127_e2 = d->_g136_e3 && d->_cg110;
  805b84:	e0bffc17 	ldw	r2,-16(fp)
  805b88:	10805803 	ldbu	r2,352(r2)
  805b8c:	10803fcc 	andi	r2,r2,255
  805b90:	1080201c 	xori	r2,r2,128
  805b94:	10bfe004 	addi	r2,r2,-128
  805b98:	10000826 	beq	r2,zero,805bbc <logic+0x5060>
  805b9c:	e0bffc17 	ldw	r2,-16(fp)
  805ba0:	10804b03 	ldbu	r2,300(r2)
  805ba4:	10803fcc 	andi	r2,r2,255
  805ba8:	1080201c 	xori	r2,r2,128
  805bac:	10bfe004 	addi	r2,r2,-128
  805bb0:	10000226 	beq	r2,zero,805bbc <logic+0x5060>
  805bb4:	00800044 	movi	r2,1
  805bb8:	00000106 	br	805bc0 <logic+0x5064>
  805bbc:	0005883a 	mov	r2,zero
  805bc0:	1007883a 	mov	r3,r2
  805bc4:	e0bffc17 	ldw	r2,-16(fp)
  805bc8:	10c057c5 	stb	r3,351(r2)
  if (d->_g127_e2) {
  805bcc:	e0bffc17 	ldw	r2,-16(fp)
  805bd0:	108057c3 	ldbu	r2,351(r2)
  805bd4:	10803fcc 	andi	r2,r2,255
  805bd8:	1080201c 	xori	r2,r2,128
  805bdc:	10bfe004 	addi	r2,r2,-128
  805be0:	10003426 	beq	r2,zero,805cb4 <logic+0x5158>
    d->sleepT = (d->sleepT < (d->VRP - d->_Pacemaker_local__region3_VRP_x)) ? d->sleepT : (d->VRP - d->_Pacemaker_local__region3_VRP_x);
  805be4:	e0bffc17 	ldw	r2,-16(fp)
  805be8:	14000817 	ldw	r16,32(r2)
  805bec:	14400917 	ldw	r17,36(r2)
  805bf0:	e0bffc17 	ldw	r2,-16(fp)
  805bf4:	10800317 	ldw	r2,12(r2)
  805bf8:	1009883a 	mov	r4,r2
  805bfc:	0809a000 	call	809a00 <__floatsidf>
  805c00:	1011883a 	mov	r8,r2
  805c04:	1813883a 	mov	r9,r3
  805c08:	e13ffc17 	ldw	r4,-16(fp)
  805c0c:	20801117 	ldw	r2,68(r4)
  805c10:	20c01217 	ldw	r3,72(r4)
  805c14:	100d883a 	mov	r6,r2
  805c18:	180f883a 	mov	r7,r3
  805c1c:	4009883a 	mov	r4,r8
  805c20:	480b883a 	mov	r5,r9
  805c24:	08091040 	call	809104 <__subdf3>
  805c28:	1009883a 	mov	r4,r2
  805c2c:	180b883a 	mov	r5,r3
  805c30:	2005883a 	mov	r2,r4
  805c34:	2807883a 	mov	r3,r5
  805c38:	100d883a 	mov	r6,r2
  805c3c:	180f883a 	mov	r7,r3
  805c40:	8009883a 	mov	r4,r16
  805c44:	880b883a 	mov	r5,r17
  805c48:	08088f80 	call	8088f8 <__ledf2>
  805c4c:	1000040e 	bge	r2,zero,805c60 <logic+0x5104>
  805c50:	e13ffc17 	ldw	r4,-16(fp)
  805c54:	20800817 	ldw	r2,32(r4)
  805c58:	20c00917 	ldw	r3,36(r4)
  805c5c:	00001206 	br	805ca8 <logic+0x514c>
  805c60:	e0bffc17 	ldw	r2,-16(fp)
  805c64:	10800317 	ldw	r2,12(r2)
  805c68:	1009883a 	mov	r4,r2
  805c6c:	0809a000 	call	809a00 <__floatsidf>
  805c70:	1011883a 	mov	r8,r2
  805c74:	1813883a 	mov	r9,r3
  805c78:	e13ffc17 	ldw	r4,-16(fp)
  805c7c:	20801117 	ldw	r2,68(r4)
  805c80:	20c01217 	ldw	r3,72(r4)
  805c84:	100d883a 	mov	r6,r2
  805c88:	180f883a 	mov	r7,r3
  805c8c:	4009883a 	mov	r4,r8
  805c90:	480b883a 	mov	r5,r9
  805c94:	08091040 	call	809104 <__subdf3>
  805c98:	1009883a 	mov	r4,r2
  805c9c:	180b883a 	mov	r5,r3
  805ca0:	2005883a 	mov	r2,r4
  805ca4:	2807883a 	mov	r3,r5
  805ca8:	e13ffc17 	ldw	r4,-16(fp)
  805cac:	20800815 	stw	r2,32(r4)
  805cb0:	20c00915 	stw	r3,36(r4)
  }
  d->_cg111 = d->_Pacemaker_local__Atrig6 || d->_Pacemaker_local__Atrig7;
  805cb4:	e0bffc17 	ldw	r2,-16(fp)
  805cb8:	108019c3 	ldbu	r2,103(r2)
  805cbc:	10803fcc 	andi	r2,r2,255
  805cc0:	1080201c 	xori	r2,r2,128
  805cc4:	10bfe004 	addi	r2,r2,-128
  805cc8:	1000061e 	bne	r2,zero,805ce4 <logic+0x5188>
  805ccc:	e0bffc17 	ldw	r2,-16(fp)
  805cd0:	10801a03 	ldbu	r2,104(r2)
  805cd4:	10803fcc 	andi	r2,r2,255
  805cd8:	1080201c 	xori	r2,r2,128
  805cdc:	10bfe004 	addi	r2,r2,-128
  805ce0:	10000226 	beq	r2,zero,805cec <logic+0x5190>
  805ce4:	00800044 	movi	r2,1
  805ce8:	00000106 	br	805cf0 <logic+0x5194>
  805cec:	0005883a 	mov	r2,zero
  805cf0:	1007883a 	mov	r3,r2
  805cf4:	e0bffc17 	ldw	r2,-16(fp)
  805cf8:	10c04b45 	stb	r3,301(r2)
  d->_g107 = (d->_g127_e2 && !d->_cg111) || (d->_g119 && !d->_cg115);
  805cfc:	e0bffc17 	ldw	r2,-16(fp)
  805d00:	108057c3 	ldbu	r2,351(r2)
  805d04:	10803fcc 	andi	r2,r2,255
  805d08:	1080201c 	xori	r2,r2,128
  805d0c:	10bfe004 	addi	r2,r2,-128
  805d10:	10000626 	beq	r2,zero,805d2c <logic+0x51d0>
  805d14:	e0bffc17 	ldw	r2,-16(fp)
  805d18:	10804b43 	ldbu	r2,301(r2)
  805d1c:	10803fcc 	andi	r2,r2,255
  805d20:	1080201c 	xori	r2,r2,128
  805d24:	10bfe004 	addi	r2,r2,-128
  805d28:	10000c26 	beq	r2,zero,805d5c <logic+0x5200>
  805d2c:	e0bffc17 	ldw	r2,-16(fp)
  805d30:	10802f83 	ldbu	r2,190(r2)
  805d34:	10803fcc 	andi	r2,r2,255
  805d38:	1080201c 	xori	r2,r2,128
  805d3c:	10bfe004 	addi	r2,r2,-128
  805d40:	10000826 	beq	r2,zero,805d64 <logic+0x5208>
  805d44:	e0bffc17 	ldw	r2,-16(fp)
  805d48:	10804b83 	ldbu	r2,302(r2)
  805d4c:	10803fcc 	andi	r2,r2,255
  805d50:	1080201c 	xori	r2,r2,128
  805d54:	10bfe004 	addi	r2,r2,-128
  805d58:	1000021e 	bne	r2,zero,805d64 <logic+0x5208>
  805d5c:	00800044 	movi	r2,1
  805d60:	00000106 	br	805d68 <logic+0x520c>
  805d64:	0005883a 	mov	r2,zero
  805d68:	1007883a 	mov	r3,r2
  805d6c:	e0bffc17 	ldw	r2,-16(fp)
  805d70:	10c02d45 	stb	r3,181(r2)
  d->_g139 = d->_g136_e3 && !d->_cg110;
  805d74:	e0bffc17 	ldw	r2,-16(fp)
  805d78:	10805803 	ldbu	r2,352(r2)
  805d7c:	10803fcc 	andi	r2,r2,255
  805d80:	1080201c 	xori	r2,r2,128
  805d84:	10bfe004 	addi	r2,r2,-128
  805d88:	10000826 	beq	r2,zero,805dac <logic+0x5250>
  805d8c:	e0bffc17 	ldw	r2,-16(fp)
  805d90:	10804b03 	ldbu	r2,300(r2)
  805d94:	10803fcc 	andi	r2,r2,255
  805d98:	1080201c 	xori	r2,r2,128
  805d9c:	10bfe004 	addi	r2,r2,-128
  805da0:	1000021e 	bne	r2,zero,805dac <logic+0x5250>
  805da4:	00800044 	movi	r2,1
  805da8:	00000106 	br	805db0 <logic+0x5254>
  805dac:	0005883a 	mov	r2,zero
  805db0:	1007883a 	mov	r3,r2
  805db4:	e0bffc17 	ldw	r2,-16(fp)
  805db8:	10c03345 	stb	r3,205(r2)
  d->_cg120 = d->_Pacemaker_local__Atrig6 || d->_Pacemaker_local__Atrig7;
  805dbc:	e0bffc17 	ldw	r2,-16(fp)
  805dc0:	108019c3 	ldbu	r2,103(r2)
  805dc4:	10803fcc 	andi	r2,r2,255
  805dc8:	1080201c 	xori	r2,r2,128
  805dcc:	10bfe004 	addi	r2,r2,-128
  805dd0:	1000061e 	bne	r2,zero,805dec <logic+0x5290>
  805dd4:	e0bffc17 	ldw	r2,-16(fp)
  805dd8:	10801a03 	ldbu	r2,104(r2)
  805ddc:	10803fcc 	andi	r2,r2,255
  805de0:	1080201c 	xori	r2,r2,128
  805de4:	10bfe004 	addi	r2,r2,-128
  805de8:	10000226 	beq	r2,zero,805df4 <logic+0x5298>
  805dec:	00800044 	movi	r2,1
  805df0:	00000106 	br	805df8 <logic+0x529c>
  805df4:	0005883a 	mov	r2,zero
  805df8:	1007883a 	mov	r3,r2
  805dfc:	e0bffc17 	ldw	r2,-16(fp)
  805e00:	10c04c45 	stb	r3,305(r2)
  d->_g108 = (d->_g114 && !d->_cg117) || (d->_g139 && !d->_cg120);
  805e04:	e0bffc17 	ldw	r2,-16(fp)
  805e08:	10802e83 	ldbu	r2,186(r2)
  805e0c:	10803fcc 	andi	r2,r2,255
  805e10:	1080201c 	xori	r2,r2,128
  805e14:	10bfe004 	addi	r2,r2,-128
  805e18:	10000626 	beq	r2,zero,805e34 <logic+0x52d8>
  805e1c:	e0bffc17 	ldw	r2,-16(fp)
  805e20:	10804c03 	ldbu	r2,304(r2)
  805e24:	10803fcc 	andi	r2,r2,255
  805e28:	1080201c 	xori	r2,r2,128
  805e2c:	10bfe004 	addi	r2,r2,-128
  805e30:	10000c26 	beq	r2,zero,805e64 <logic+0x5308>
  805e34:	e0bffc17 	ldw	r2,-16(fp)
  805e38:	10803343 	ldbu	r2,205(r2)
  805e3c:	10803fcc 	andi	r2,r2,255
  805e40:	1080201c 	xori	r2,r2,128
  805e44:	10bfe004 	addi	r2,r2,-128
  805e48:	10000826 	beq	r2,zero,805e6c <logic+0x5310>
  805e4c:	e0bffc17 	ldw	r2,-16(fp)
  805e50:	10804c43 	ldbu	r2,305(r2)
  805e54:	10803fcc 	andi	r2,r2,255
  805e58:	1080201c 	xori	r2,r2,128
  805e5c:	10bfe004 	addi	r2,r2,-128
  805e60:	1000021e 	bne	r2,zero,805e6c <logic+0x5310>
  805e64:	00800044 	movi	r2,1
  805e68:	00000106 	br	805e70 <logic+0x5314>
  805e6c:	0005883a 	mov	r2,zero
  805e70:	1007883a 	mov	r3,r2
  805e74:	e0bffc17 	ldw	r2,-16(fp)
  805e78:	10c02d85 	stb	r3,182(r2)
  d->_cg121 = d->_Pacemaker_local__region3_VRP_x < d->VRP;
  805e7c:	e0bffc17 	ldw	r2,-16(fp)
  805e80:	14001117 	ldw	r16,68(r2)
  805e84:	14401217 	ldw	r17,72(r2)
  805e88:	e0bffc17 	ldw	r2,-16(fp)
  805e8c:	10800317 	ldw	r2,12(r2)
  805e90:	1009883a 	mov	r4,r2
  805e94:	0809a000 	call	809a00 <__floatsidf>
  805e98:	1009883a 	mov	r4,r2
  805e9c:	180b883a 	mov	r5,r3
  805ea0:	04800044 	movi	r18,1
  805ea4:	200d883a 	mov	r6,r4
  805ea8:	280f883a 	mov	r7,r5
  805eac:	8009883a 	mov	r4,r16
  805eb0:	880b883a 	mov	r5,r17
  805eb4:	08088f80 	call	8088f8 <__ledf2>
  805eb8:	10000116 	blt	r2,zero,805ec0 <logic+0x5364>
  805ebc:	0025883a 	mov	r18,zero
  805ec0:	9007883a 	mov	r3,r18
  805ec4:	e0bffc17 	ldw	r2,-16(fp)
  805ec8:	10c04c85 	stb	r3,306(r2)
  d->_g140 = d->_g136_e3 && d->_cg121;
  805ecc:	e0bffc17 	ldw	r2,-16(fp)
  805ed0:	10805803 	ldbu	r2,352(r2)
  805ed4:	10803fcc 	andi	r2,r2,255
  805ed8:	1080201c 	xori	r2,r2,128
  805edc:	10bfe004 	addi	r2,r2,-128
  805ee0:	10000826 	beq	r2,zero,805f04 <logic+0x53a8>
  805ee4:	e0bffc17 	ldw	r2,-16(fp)
  805ee8:	10804c83 	ldbu	r2,306(r2)
  805eec:	10803fcc 	andi	r2,r2,255
  805ef0:	1080201c 	xori	r2,r2,128
  805ef4:	10bfe004 	addi	r2,r2,-128
  805ef8:	10000226 	beq	r2,zero,805f04 <logic+0x53a8>
  805efc:	00800044 	movi	r2,1
  805f00:	00000106 	br	805f08 <logic+0x53ac>
  805f04:	0005883a 	mov	r2,zero
  805f08:	1007883a 	mov	r3,r2
  805f0c:	e0bffc17 	ldw	r2,-16(fp)
  805f10:	10c03385 	stb	r3,206(r2)
  if (d->_g140) {
  805f14:	e0bffc17 	ldw	r2,-16(fp)
  805f18:	10803383 	ldbu	r2,206(r2)
  805f1c:	10803fcc 	andi	r2,r2,255
  805f20:	1080201c 	xori	r2,r2,128
  805f24:	10bfe004 	addi	r2,r2,-128
  805f28:	10003426 	beq	r2,zero,805ffc <logic+0x54a0>
    d->sleepT = (d->sleepT < (d->VRP - d->_Pacemaker_local__region3_VRP_x)) ? d->sleepT : (d->VRP - d->_Pacemaker_local__region3_VRP_x);
  805f2c:	e0bffc17 	ldw	r2,-16(fp)
  805f30:	14000817 	ldw	r16,32(r2)
  805f34:	14400917 	ldw	r17,36(r2)
  805f38:	e0bffc17 	ldw	r2,-16(fp)
  805f3c:	10800317 	ldw	r2,12(r2)
  805f40:	1009883a 	mov	r4,r2
  805f44:	0809a000 	call	809a00 <__floatsidf>
  805f48:	1011883a 	mov	r8,r2
  805f4c:	1813883a 	mov	r9,r3
  805f50:	e13ffc17 	ldw	r4,-16(fp)
  805f54:	20801117 	ldw	r2,68(r4)
  805f58:	20c01217 	ldw	r3,72(r4)
  805f5c:	100d883a 	mov	r6,r2
  805f60:	180f883a 	mov	r7,r3
  805f64:	4009883a 	mov	r4,r8
  805f68:	480b883a 	mov	r5,r9
  805f6c:	08091040 	call	809104 <__subdf3>
  805f70:	1009883a 	mov	r4,r2
  805f74:	180b883a 	mov	r5,r3
  805f78:	2005883a 	mov	r2,r4
  805f7c:	2807883a 	mov	r3,r5
  805f80:	100d883a 	mov	r6,r2
  805f84:	180f883a 	mov	r7,r3
  805f88:	8009883a 	mov	r4,r16
  805f8c:	880b883a 	mov	r5,r17
  805f90:	08088f80 	call	8088f8 <__ledf2>
  805f94:	1000040e 	bge	r2,zero,805fa8 <logic+0x544c>
  805f98:	e13ffc17 	ldw	r4,-16(fp)
  805f9c:	20800817 	ldw	r2,32(r4)
  805fa0:	20c00917 	ldw	r3,36(r4)
  805fa4:	00001206 	br	805ff0 <logic+0x5494>
  805fa8:	e0bffc17 	ldw	r2,-16(fp)
  805fac:	10800317 	ldw	r2,12(r2)
  805fb0:	1009883a 	mov	r4,r2
  805fb4:	0809a000 	call	809a00 <__floatsidf>
  805fb8:	1011883a 	mov	r8,r2
  805fbc:	1813883a 	mov	r9,r3
  805fc0:	e13ffc17 	ldw	r4,-16(fp)
  805fc4:	20801117 	ldw	r2,68(r4)
  805fc8:	20c01217 	ldw	r3,72(r4)
  805fcc:	100d883a 	mov	r6,r2
  805fd0:	180f883a 	mov	r7,r3
  805fd4:	4009883a 	mov	r4,r8
  805fd8:	480b883a 	mov	r5,r9
  805fdc:	08091040 	call	809104 <__subdf3>
  805fe0:	1009883a 	mov	r4,r2
  805fe4:	180b883a 	mov	r5,r3
  805fe8:	2005883a 	mov	r2,r4
  805fec:	2807883a 	mov	r3,r5
  805ff0:	e13ffc17 	ldw	r4,-16(fp)
  805ff4:	20800815 	stw	r2,32(r4)
  805ff8:	20c00915 	stw	r3,36(r4)
  }
  d->_cg122 = d->_Pacemaker_local__Atrig6 || d->_Pacemaker_local__Atrig7;
  805ffc:	e0bffc17 	ldw	r2,-16(fp)
  806000:	108019c3 	ldbu	r2,103(r2)
  806004:	10803fcc 	andi	r2,r2,255
  806008:	1080201c 	xori	r2,r2,128
  80600c:	10bfe004 	addi	r2,r2,-128
  806010:	1000061e 	bne	r2,zero,80602c <logic+0x54d0>
  806014:	e0bffc17 	ldw	r2,-16(fp)
  806018:	10801a03 	ldbu	r2,104(r2)
  80601c:	10803fcc 	andi	r2,r2,255
  806020:	1080201c 	xori	r2,r2,128
  806024:	10bfe004 	addi	r2,r2,-128
  806028:	10000226 	beq	r2,zero,806034 <logic+0x54d8>
  80602c:	00800044 	movi	r2,1
  806030:	00000106 	br	806038 <logic+0x54dc>
  806034:	0005883a 	mov	r2,zero
  806038:	1007883a 	mov	r3,r2
  80603c:	e0bffc17 	ldw	r2,-16(fp)
  806040:	10c04cc5 	stb	r3,307(r2)
  d->_g111 = (d->_g140 && !d->_cg122) || (d->_g124 && !d->_cg126);
  806044:	e0bffc17 	ldw	r2,-16(fp)
  806048:	10803383 	ldbu	r2,206(r2)
  80604c:	10803fcc 	andi	r2,r2,255
  806050:	1080201c 	xori	r2,r2,128
  806054:	10bfe004 	addi	r2,r2,-128
  806058:	10000626 	beq	r2,zero,806074 <logic+0x5518>
  80605c:	e0bffc17 	ldw	r2,-16(fp)
  806060:	10804cc3 	ldbu	r2,307(r2)
  806064:	10803fcc 	andi	r2,r2,255
  806068:	1080201c 	xori	r2,r2,128
  80606c:	10bfe004 	addi	r2,r2,-128
  806070:	10000c26 	beq	r2,zero,8060a4 <logic+0x5548>
  806074:	e0bffc17 	ldw	r2,-16(fp)
  806078:	10803043 	ldbu	r2,193(r2)
  80607c:	10803fcc 	andi	r2,r2,255
  806080:	1080201c 	xori	r2,r2,128
  806084:	10bfe004 	addi	r2,r2,-128
  806088:	10000826 	beq	r2,zero,8060ac <logic+0x5550>
  80608c:	e0bffc17 	ldw	r2,-16(fp)
  806090:	10804d03 	ldbu	r2,308(r2)
  806094:	10803fcc 	andi	r2,r2,255
  806098:	1080201c 	xori	r2,r2,128
  80609c:	10bfe004 	addi	r2,r2,-128
  8060a0:	1000021e 	bne	r2,zero,8060ac <logic+0x5550>
  8060a4:	00800044 	movi	r2,1
  8060a8:	00000106 	br	8060b0 <logic+0x5554>
  8060ac:	0005883a 	mov	r2,zero
  8060b0:	1007883a 	mov	r3,r2
  8060b4:	e0bffc17 	ldw	r2,-16(fp)
  8060b8:	10c02e05 	stb	r3,184(r2)
  d->_g115 = d->_g136_e3 && !d->_cg121;
  8060bc:	e0bffc17 	ldw	r2,-16(fp)
  8060c0:	10805803 	ldbu	r2,352(r2)
  8060c4:	10803fcc 	andi	r2,r2,255
  8060c8:	1080201c 	xori	r2,r2,128
  8060cc:	10bfe004 	addi	r2,r2,-128
  8060d0:	10000826 	beq	r2,zero,8060f4 <logic+0x5598>
  8060d4:	e0bffc17 	ldw	r2,-16(fp)
  8060d8:	10804c83 	ldbu	r2,306(r2)
  8060dc:	10803fcc 	andi	r2,r2,255
  8060e0:	1080201c 	xori	r2,r2,128
  8060e4:	10bfe004 	addi	r2,r2,-128
  8060e8:	1000021e 	bne	r2,zero,8060f4 <logic+0x5598>
  8060ec:	00800044 	movi	r2,1
  8060f0:	00000106 	br	8060f8 <logic+0x559c>
  8060f4:	0005883a 	mov	r2,zero
  8060f8:	1007883a 	mov	r3,r2
  8060fc:	e0bffc17 	ldw	r2,-16(fp)
  806100:	10c02ec5 	stb	r3,187(r2)
  d->_cg131 = d->_Pacemaker_local__Atrig6 || d->_Pacemaker_local__Atrig7;
  806104:	e0bffc17 	ldw	r2,-16(fp)
  806108:	108019c3 	ldbu	r2,103(r2)
  80610c:	10803fcc 	andi	r2,r2,255
  806110:	1080201c 	xori	r2,r2,128
  806114:	10bfe004 	addi	r2,r2,-128
  806118:	1000061e 	bne	r2,zero,806134 <logic+0x55d8>
  80611c:	e0bffc17 	ldw	r2,-16(fp)
  806120:	10801a03 	ldbu	r2,104(r2)
  806124:	10803fcc 	andi	r2,r2,255
  806128:	1080201c 	xori	r2,r2,128
  80612c:	10bfe004 	addi	r2,r2,-128
  806130:	10000226 	beq	r2,zero,80613c <logic+0x55e0>
  806134:	00800044 	movi	r2,1
  806138:	00000106 	br	806140 <logic+0x55e4>
  80613c:	0005883a 	mov	r2,zero
  806140:	1007883a 	mov	r3,r2
  806144:	e0bffc17 	ldw	r2,-16(fp)
  806148:	10c04dc5 	stb	r3,311(r2)
  d->_g120 = (d->_g125 && !d->_cg128) || (d->_g115 && !d->_cg131);
  80614c:	e0bffc17 	ldw	r2,-16(fp)
  806150:	10803083 	ldbu	r2,194(r2)
  806154:	10803fcc 	andi	r2,r2,255
  806158:	1080201c 	xori	r2,r2,128
  80615c:	10bfe004 	addi	r2,r2,-128
  806160:	10000626 	beq	r2,zero,80617c <logic+0x5620>
  806164:	e0bffc17 	ldw	r2,-16(fp)
  806168:	10804d83 	ldbu	r2,310(r2)
  80616c:	10803fcc 	andi	r2,r2,255
  806170:	1080201c 	xori	r2,r2,128
  806174:	10bfe004 	addi	r2,r2,-128
  806178:	10000c26 	beq	r2,zero,8061ac <logic+0x5650>
  80617c:	e0bffc17 	ldw	r2,-16(fp)
  806180:	10802ec3 	ldbu	r2,187(r2)
  806184:	10803fcc 	andi	r2,r2,255
  806188:	1080201c 	xori	r2,r2,128
  80618c:	10bfe004 	addi	r2,r2,-128
  806190:	10000826 	beq	r2,zero,8061b4 <logic+0x5658>
  806194:	e0bffc17 	ldw	r2,-16(fp)
  806198:	10804dc3 	ldbu	r2,311(r2)
  80619c:	10803fcc 	andi	r2,r2,255
  8061a0:	1080201c 	xori	r2,r2,128
  8061a4:	10bfe004 	addi	r2,r2,-128
  8061a8:	1000021e 	bne	r2,zero,8061b4 <logic+0x5658>
  8061ac:	00800044 	movi	r2,1
  8061b0:	00000106 	br	8061b8 <logic+0x565c>
  8061b4:	0005883a 	mov	r2,zero
  8061b8:	1007883a 	mov	r3,r2
  8061bc:	e0bffc17 	ldw	r2,-16(fp)
  8061c0:	10c02fc5 	stb	r3,191(r2)
  d->_g117 = d->_g136_e3 || (d->_g137 && !d->_cg137);
  8061c4:	e0bffc17 	ldw	r2,-16(fp)
  8061c8:	10805803 	ldbu	r2,352(r2)
  8061cc:	10803fcc 	andi	r2,r2,255
  8061d0:	1080201c 	xori	r2,r2,128
  8061d4:	10bfe004 	addi	r2,r2,-128
  8061d8:	10000c1e 	bne	r2,zero,80620c <logic+0x56b0>
  8061dc:	e0bffc17 	ldw	r2,-16(fp)
  8061e0:	108032c3 	ldbu	r2,203(r2)
  8061e4:	10803fcc 	andi	r2,r2,255
  8061e8:	1080201c 	xori	r2,r2,128
  8061ec:	10bfe004 	addi	r2,r2,-128
  8061f0:	10000826 	beq	r2,zero,806214 <logic+0x56b8>
  8061f4:	e0bffc17 	ldw	r2,-16(fp)
  8061f8:	10804e03 	ldbu	r2,312(r2)
  8061fc:	10803fcc 	andi	r2,r2,255
  806200:	1080201c 	xori	r2,r2,128
  806204:	10bfe004 	addi	r2,r2,-128
  806208:	1000021e 	bne	r2,zero,806214 <logic+0x56b8>
  80620c:	00800044 	movi	r2,1
  806210:	00000106 	br	806218 <logic+0x56bc>
  806214:	0005883a 	mov	r2,zero
  806218:	1007883a 	mov	r3,r2
  80621c:	e0bffc17 	ldw	r2,-16(fp)
  806220:	10c02f45 	stb	r3,189(r2)
  if (d->_g164_e2) {
  806224:	e0bffc17 	ldw	r2,-16(fp)
  806228:	10805883 	ldbu	r2,354(r2)
  80622c:	10803fcc 	andi	r2,r2,255
  806230:	1080201c 	xori	r2,r2,128
  806234:	10bfe004 	addi	r2,r2,-128
  806238:	10000626 	beq	r2,zero,806254 <logic+0x56f8>
    d->VP |= 1;
  80623c:	e0bffc17 	ldw	r2,-16(fp)
  806240:	10800ac3 	ldbu	r2,43(r2)
  806244:	10800054 	ori	r2,r2,1
  806248:	1007883a 	mov	r3,r2
  80624c:	e0bffc17 	ldw	r2,-16(fp)
  806250:	10c00ac5 	stb	r3,43(r2)
  }
  d->_g122 = d->_pg205;
  806254:	e0bffc17 	ldw	r2,-16(fp)
  806258:	10c06203 	ldbu	r3,392(r2)
  80625c:	e0bffc17 	ldw	r2,-16(fp)
  806260:	10c03005 	stb	r3,192(r2)
  d->_g126 = d->_pg176;
  806264:	e0bffc17 	ldw	r2,-16(fp)
  806268:	10c06243 	ldbu	r3,393(r2)
  80626c:	e0bffc17 	ldw	r2,-16(fp)
  806270:	10c030c5 	stb	r3,195(r2)
  d->_g131 = !(d->_g122 || d->_g126);
  806274:	e0bffc17 	ldw	r2,-16(fp)
  806278:	10803003 	ldbu	r2,192(r2)
  80627c:	10803fcc 	andi	r2,r2,255
  806280:	1080201c 	xori	r2,r2,128
  806284:	10bfe004 	addi	r2,r2,-128
  806288:	1000081e 	bne	r2,zero,8062ac <logic+0x5750>
  80628c:	e0bffc17 	ldw	r2,-16(fp)
  806290:	108030c3 	ldbu	r2,195(r2)
  806294:	10803fcc 	andi	r2,r2,255
  806298:	1080201c 	xori	r2,r2,128
  80629c:	10bfe004 	addi	r2,r2,-128
  8062a0:	1000021e 	bne	r2,zero,8062ac <logic+0x5750>
  8062a4:	00800044 	movi	r2,1
  8062a8:	00000106 	br	8062b0 <logic+0x5754>
  8062ac:	0005883a 	mov	r2,zero
  8062b0:	1007883a 	mov	r3,r2
  8062b4:	e0bffc17 	ldw	r2,-16(fp)
  8062b8:	10c031c5 	stb	r3,199(r2)
  d->_g128 = d->_pg184;
  8062bc:	e0bffc17 	ldw	r2,-16(fp)
  8062c0:	10c06283 	ldbu	r3,394(r2)
  8062c4:	e0bffc17 	ldw	r2,-16(fp)
  8062c8:	10c03145 	stb	r3,197(r2)
  d->_g109 = d->_g128 && d->AS;
  8062cc:	e0bffc17 	ldw	r2,-16(fp)
  8062d0:	10803143 	ldbu	r2,197(r2)
  8062d4:	10803fcc 	andi	r2,r2,255
  8062d8:	1080201c 	xori	r2,r2,128
  8062dc:	10bfe004 	addi	r2,r2,-128
  8062e0:	10000826 	beq	r2,zero,806304 <logic+0x57a8>
  8062e4:	e0bffc17 	ldw	r2,-16(fp)
  8062e8:	10800a03 	ldbu	r2,40(r2)
  8062ec:	10803fcc 	andi	r2,r2,255
  8062f0:	1080201c 	xori	r2,r2,128
  8062f4:	10bfe004 	addi	r2,r2,-128
  8062f8:	10000226 	beq	r2,zero,806304 <logic+0x57a8>
  8062fc:	00800044 	movi	r2,1
  806300:	00000106 	br	806308 <logic+0x57ac>
  806304:	0005883a 	mov	r2,zero
  806308:	1007883a 	mov	r3,r2
  80630c:	e0bffc17 	ldw	r2,-16(fp)
  806310:	10c02dc5 	stb	r3,183(r2)
  if (d->_g109) {
  806314:	e0bffc17 	ldw	r2,-16(fp)
  806318:	10802dc3 	ldbu	r2,183(r2)
  80631c:	10803fcc 	andi	r2,r2,255
  806320:	1080201c 	xori	r2,r2,128
  806324:	10bfe004 	addi	r2,r2,-128
  806328:	10000326 	beq	r2,zero,806338 <logic+0x57dc>
    d->_Pacemaker_local__Atrig11 = 1;
  80632c:	e0bffc17 	ldw	r2,-16(fp)
  806330:	00c00044 	movi	r3,1
  806334:	10c01b05 	stb	r3,108(r2)
  }
  d->_g137 = d->_pg202;
  806338:	e0bffc17 	ldw	r2,-16(fp)
  80633c:	10c062c3 	ldbu	r3,395(r2)
  806340:	e0bffc17 	ldw	r2,-16(fp)
  806344:	10c032c5 	stb	r3,203(r2)
  if (d->_g137) {
  806348:	e0bffc17 	ldw	r2,-16(fp)
  80634c:	108032c3 	ldbu	r2,203(r2)
  806350:	10803fcc 	andi	r2,r2,255
  806354:	1080201c 	xori	r2,r2,128
  806358:	10bfe004 	addi	r2,r2,-128
  80635c:	10001226 	beq	r2,zero,8063a8 <logic+0x584c>
    d->_Pacemaker_local__region5_AEI_x += d->deltaT;
  806360:	e13ffc17 	ldw	r4,-16(fp)
  806364:	20801517 	ldw	r2,84(r4)
  806368:	20c01617 	ldw	r3,88(r4)
  80636c:	e1bffc17 	ldw	r6,-16(fp)
  806370:	31000617 	ldw	r4,24(r6)
  806374:	31400717 	ldw	r5,28(r6)
  806378:	200d883a 	mov	r6,r4
  80637c:	280f883a 	mov	r7,r5
  806380:	1009883a 	mov	r4,r2
  806384:	180b883a 	mov	r5,r3
  806388:	0807f700 	call	807f70 <__adddf3>
  80638c:	1009883a 	mov	r4,r2
  806390:	180b883a 	mov	r5,r3
  806394:	2005883a 	mov	r2,r4
  806398:	2807883a 	mov	r3,r5
  80639c:	e13ffc17 	ldw	r4,-16(fp)
  8063a0:	20801515 	stw	r2,84(r4)
  8063a4:	20c01615 	stw	r3,88(r4)
  }
  d->_g202 = d->_g128 && !d->AS;
  8063a8:	e0bffc17 	ldw	r2,-16(fp)
  8063ac:	10803143 	ldbu	r2,197(r2)
  8063b0:	10803fcc 	andi	r2,r2,255
  8063b4:	1080201c 	xori	r2,r2,128
  8063b8:	10bfe004 	addi	r2,r2,-128
  8063bc:	10000826 	beq	r2,zero,8063e0 <logic+0x5884>
  8063c0:	e0bffc17 	ldw	r2,-16(fp)
  8063c4:	10800a03 	ldbu	r2,40(r2)
  8063c8:	10803fcc 	andi	r2,r2,255
  8063cc:	1080201c 	xori	r2,r2,128
  8063d0:	10bfe004 	addi	r2,r2,-128
  8063d4:	1000021e 	bne	r2,zero,8063e0 <logic+0x5884>
  8063d8:	00800044 	movi	r2,1
  8063dc:	00000106 	br	8063e4 <logic+0x5888>
  8063e0:	0005883a 	mov	r2,zero
  8063e4:	1007883a 	mov	r3,r2
  8063e8:	e0bffc17 	ldw	r2,-16(fp)
  8063ec:	10c03e45 	stb	r3,249(r2)
  d->_cg202 = d->_Pacemaker_local__region5_AEI_x >= d->AEI;
  8063f0:	e0bffc17 	ldw	r2,-16(fp)
  8063f4:	14001517 	ldw	r16,84(r2)
  8063f8:	14401617 	ldw	r17,88(r2)
  8063fc:	e0bffc17 	ldw	r2,-16(fp)
  806400:	10800117 	ldw	r2,4(r2)
  806404:	1009883a 	mov	r4,r2
  806408:	0809a000 	call	809a00 <__floatsidf>
  80640c:	1009883a 	mov	r4,r2
  806410:	180b883a 	mov	r5,r3
  806414:	04800044 	movi	r18,1
  806418:	200d883a 	mov	r6,r4
  80641c:	280f883a 	mov	r7,r5
  806420:	8009883a 	mov	r4,r16
  806424:	880b883a 	mov	r5,r17
  806428:	080881c0 	call	80881c <__gedf2>
  80642c:	1000010e 	bge	r2,zero,806434 <logic+0x58d8>
  806430:	0025883a 	mov	r18,zero
  806434:	9007883a 	mov	r3,r18
  806438:	e0bffc17 	ldw	r2,-16(fp)
  80643c:	10c05505 	stb	r3,340(r2)
  d->_g203 = d->_g202 && d->_cg202;
  806440:	e0bffc17 	ldw	r2,-16(fp)
  806444:	10803e43 	ldbu	r2,249(r2)
  806448:	10803fcc 	andi	r2,r2,255
  80644c:	1080201c 	xori	r2,r2,128
  806450:	10bfe004 	addi	r2,r2,-128
  806454:	10000826 	beq	r2,zero,806478 <logic+0x591c>
  806458:	e0bffc17 	ldw	r2,-16(fp)
  80645c:	10805503 	ldbu	r2,340(r2)
  806460:	10803fcc 	andi	r2,r2,255
  806464:	1080201c 	xori	r2,r2,128
  806468:	10bfe004 	addi	r2,r2,-128
  80646c:	10000226 	beq	r2,zero,806478 <logic+0x591c>
  806470:	00800044 	movi	r2,1
  806474:	00000106 	br	80647c <logic+0x5920>
  806478:	0005883a 	mov	r2,zero
  80647c:	1007883a 	mov	r3,r2
  806480:	e0bffc17 	ldw	r2,-16(fp)
  806484:	10c03e85 	stb	r3,250(r2)
  if (d->_g203) {
  806488:	e0bffc17 	ldw	r2,-16(fp)
  80648c:	10803e83 	ldbu	r2,250(r2)
  806490:	10803fcc 	andi	r2,r2,255
  806494:	1080201c 	xori	r2,r2,128
  806498:	10bfe004 	addi	r2,r2,-128
  80649c:	10000326 	beq	r2,zero,8064ac <logic+0x5950>
    d->_Pacemaker_local__Atrig12 = 1;
  8064a0:	e0bffc17 	ldw	r2,-16(fp)
  8064a4:	00c00044 	movi	r3,1
  8064a8:	10c01b45 	stb	r3,109(r2)
  }
  d->_g189 = d->_g126 || d->_g122;
  8064ac:	e0bffc17 	ldw	r2,-16(fp)
  8064b0:	108030c3 	ldbu	r2,195(r2)
  8064b4:	10803fcc 	andi	r2,r2,255
  8064b8:	1080201c 	xori	r2,r2,128
  8064bc:	10bfe004 	addi	r2,r2,-128
  8064c0:	1000061e 	bne	r2,zero,8064dc <logic+0x5980>
  8064c4:	e0bffc17 	ldw	r2,-16(fp)
  8064c8:	10803003 	ldbu	r2,192(r2)
  8064cc:	10803fcc 	andi	r2,r2,255
  8064d0:	1080201c 	xori	r2,r2,128
  8064d4:	10bfe004 	addi	r2,r2,-128
  8064d8:	10000226 	beq	r2,zero,8064e4 <logic+0x5988>
  8064dc:	00800044 	movi	r2,1
  8064e0:	00000106 	br	8064e8 <logic+0x598c>
  8064e4:	0005883a 	mov	r2,zero
  8064e8:	1007883a 	mov	r3,r2
  8064ec:	e0bffc17 	ldw	r2,-16(fp)
  8064f0:	10c03bc5 	stb	r3,239(r2)
  d->_cg190 = d->_Pacemaker_local__region5_AEI_x < d->AEI;
  8064f4:	e0bffc17 	ldw	r2,-16(fp)
  8064f8:	14001517 	ldw	r16,84(r2)
  8064fc:	14401617 	ldw	r17,88(r2)
  806500:	e0bffc17 	ldw	r2,-16(fp)
  806504:	10800117 	ldw	r2,4(r2)
  806508:	1009883a 	mov	r4,r2
  80650c:	0809a000 	call	809a00 <__floatsidf>
  806510:	1009883a 	mov	r4,r2
  806514:	180b883a 	mov	r5,r3
  806518:	04800044 	movi	r18,1
  80651c:	200d883a 	mov	r6,r4
  806520:	280f883a 	mov	r7,r5
  806524:	8009883a 	mov	r4,r16
  806528:	880b883a 	mov	r5,r17
  80652c:	08088f80 	call	8088f8 <__ledf2>
  806530:	10000116 	blt	r2,zero,806538 <logic+0x59dc>
  806534:	0025883a 	mov	r18,zero
  806538:	9007883a 	mov	r3,r18
  80653c:	e0bffc17 	ldw	r2,-16(fp)
  806540:	10c05445 	stb	r3,337(r2)
  d->_g195 = d->_g189 && d->_cg190;
  806544:	e0bffc17 	ldw	r2,-16(fp)
  806548:	10803bc3 	ldbu	r2,239(r2)
  80654c:	10803fcc 	andi	r2,r2,255
  806550:	1080201c 	xori	r2,r2,128
  806554:	10bfe004 	addi	r2,r2,-128
  806558:	10000826 	beq	r2,zero,80657c <logic+0x5a20>
  80655c:	e0bffc17 	ldw	r2,-16(fp)
  806560:	10805443 	ldbu	r2,337(r2)
  806564:	10803fcc 	andi	r2,r2,255
  806568:	1080201c 	xori	r2,r2,128
  80656c:	10bfe004 	addi	r2,r2,-128
  806570:	10000226 	beq	r2,zero,80657c <logic+0x5a20>
  806574:	00800044 	movi	r2,1
  806578:	00000106 	br	806580 <logic+0x5a24>
  80657c:	0005883a 	mov	r2,zero
  806580:	1007883a 	mov	r3,r2
  806584:	e0bffc17 	ldw	r2,-16(fp)
  806588:	10c03d05 	stb	r3,244(r2)
  if (d->_g195) {
  80658c:	e0bffc17 	ldw	r2,-16(fp)
  806590:	10803d03 	ldbu	r2,244(r2)
  806594:	10803fcc 	andi	r2,r2,255
  806598:	1080201c 	xori	r2,r2,128
  80659c:	10bfe004 	addi	r2,r2,-128
  8065a0:	10003426 	beq	r2,zero,806674 <logic+0x5b18>
    d->sleepT = (d->sleepT < (d->AEI - d->_Pacemaker_local__region5_AEI_x)) ? d->sleepT : (d->AEI - d->_Pacemaker_local__region5_AEI_x);
  8065a4:	e0bffc17 	ldw	r2,-16(fp)
  8065a8:	14000817 	ldw	r16,32(r2)
  8065ac:	14400917 	ldw	r17,36(r2)
  8065b0:	e0bffc17 	ldw	r2,-16(fp)
  8065b4:	10800117 	ldw	r2,4(r2)
  8065b8:	1009883a 	mov	r4,r2
  8065bc:	0809a000 	call	809a00 <__floatsidf>
  8065c0:	1011883a 	mov	r8,r2
  8065c4:	1813883a 	mov	r9,r3
  8065c8:	e13ffc17 	ldw	r4,-16(fp)
  8065cc:	20801517 	ldw	r2,84(r4)
  8065d0:	20c01617 	ldw	r3,88(r4)
  8065d4:	100d883a 	mov	r6,r2
  8065d8:	180f883a 	mov	r7,r3
  8065dc:	4009883a 	mov	r4,r8
  8065e0:	480b883a 	mov	r5,r9
  8065e4:	08091040 	call	809104 <__subdf3>
  8065e8:	1009883a 	mov	r4,r2
  8065ec:	180b883a 	mov	r5,r3
  8065f0:	2005883a 	mov	r2,r4
  8065f4:	2807883a 	mov	r3,r5
  8065f8:	100d883a 	mov	r6,r2
  8065fc:	180f883a 	mov	r7,r3
  806600:	8009883a 	mov	r4,r16
  806604:	880b883a 	mov	r5,r17
  806608:	08088f80 	call	8088f8 <__ledf2>
  80660c:	1000040e 	bge	r2,zero,806620 <logic+0x5ac4>
  806610:	e13ffc17 	ldw	r4,-16(fp)
  806614:	20800817 	ldw	r2,32(r4)
  806618:	20c00917 	ldw	r3,36(r4)
  80661c:	00001206 	br	806668 <logic+0x5b0c>
  806620:	e0bffc17 	ldw	r2,-16(fp)
  806624:	10800117 	ldw	r2,4(r2)
  806628:	1009883a 	mov	r4,r2
  80662c:	0809a000 	call	809a00 <__floatsidf>
  806630:	1011883a 	mov	r8,r2
  806634:	1813883a 	mov	r9,r3
  806638:	e13ffc17 	ldw	r4,-16(fp)
  80663c:	20801517 	ldw	r2,84(r4)
  806640:	20c01617 	ldw	r3,88(r4)
  806644:	100d883a 	mov	r6,r2
  806648:	180f883a 	mov	r7,r3
  80664c:	4009883a 	mov	r4,r8
  806650:	480b883a 	mov	r5,r9
  806654:	08091040 	call	809104 <__subdf3>
  806658:	1009883a 	mov	r4,r2
  80665c:	180b883a 	mov	r5,r3
  806660:	2005883a 	mov	r2,r4
  806664:	2807883a 	mov	r3,r5
  806668:	e13ffc17 	ldw	r4,-16(fp)
  80666c:	20800815 	stw	r2,32(r4)
  806670:	20c00915 	stw	r3,36(r4)
  }
  d->_cg191 = d->_Pacemaker_local__Atrig11 || d->_Pacemaker_local__Atrig12;
  806674:	e0bffc17 	ldw	r2,-16(fp)
  806678:	10801b03 	ldbu	r2,108(r2)
  80667c:	10803fcc 	andi	r2,r2,255
  806680:	1080201c 	xori	r2,r2,128
  806684:	10bfe004 	addi	r2,r2,-128
  806688:	1000061e 	bne	r2,zero,8066a4 <logic+0x5b48>
  80668c:	e0bffc17 	ldw	r2,-16(fp)
  806690:	10801b43 	ldbu	r2,109(r2)
  806694:	10803fcc 	andi	r2,r2,255
  806698:	1080201c 	xori	r2,r2,128
  80669c:	10bfe004 	addi	r2,r2,-128
  8066a0:	10000226 	beq	r2,zero,8066ac <logic+0x5b50>
  8066a4:	00800044 	movi	r2,1
  8066a8:	00000106 	br	8066b0 <logic+0x5b54>
  8066ac:	0005883a 	mov	r2,zero
  8066b0:	1007883a 	mov	r3,r2
  8066b4:	e0bffc17 	ldw	r2,-16(fp)
  8066b8:	10c05405 	stb	r3,336(r2)
  d->_g190 = d->_g189 && !d->_cg190;
  8066bc:	e0bffc17 	ldw	r2,-16(fp)
  8066c0:	10803bc3 	ldbu	r2,239(r2)
  8066c4:	10803fcc 	andi	r2,r2,255
  8066c8:	1080201c 	xori	r2,r2,128
  8066cc:	10bfe004 	addi	r2,r2,-128
  8066d0:	10000826 	beq	r2,zero,8066f4 <logic+0x5b98>
  8066d4:	e0bffc17 	ldw	r2,-16(fp)
  8066d8:	10805443 	ldbu	r2,337(r2)
  8066dc:	10803fcc 	andi	r2,r2,255
  8066e0:	1080201c 	xori	r2,r2,128
  8066e4:	10bfe004 	addi	r2,r2,-128
  8066e8:	1000021e 	bne	r2,zero,8066f4 <logic+0x5b98>
  8066ec:	00800044 	movi	r2,1
  8066f0:	00000106 	br	8066f8 <logic+0x5b9c>
  8066f4:	0005883a 	mov	r2,zero
  8066f8:	1007883a 	mov	r3,r2
  8066fc:	e0bffc17 	ldw	r2,-16(fp)
  806700:	10c03c05 	stb	r3,240(r2)
  d->_cg193 = d->_Pacemaker_local__Atrig11 || d->_Pacemaker_local__Atrig12;
  806704:	e0bffc17 	ldw	r2,-16(fp)
  806708:	10801b03 	ldbu	r2,108(r2)
  80670c:	10803fcc 	andi	r2,r2,255
  806710:	1080201c 	xori	r2,r2,128
  806714:	10bfe004 	addi	r2,r2,-128
  806718:	1000061e 	bne	r2,zero,806734 <logic+0x5bd8>
  80671c:	e0bffc17 	ldw	r2,-16(fp)
  806720:	10801b43 	ldbu	r2,109(r2)
  806724:	10803fcc 	andi	r2,r2,255
  806728:	1080201c 	xori	r2,r2,128
  80672c:	10bfe004 	addi	r2,r2,-128
  806730:	10000226 	beq	r2,zero,80673c <logic+0x5be0>
  806734:	00800044 	movi	r2,1
  806738:	00000106 	br	806740 <logic+0x5be4>
  80673c:	0005883a 	mov	r2,zero
  806740:	1007883a 	mov	r3,r2
  806744:	e0bffc17 	ldw	r2,-16(fp)
  806748:	10c05485 	stb	r3,338(r2)
  d->_g192 = (d->_g195 && d->_cg191) || (d->_g190 && d->_cg193);
  80674c:	e0bffc17 	ldw	r2,-16(fp)
  806750:	10803d03 	ldbu	r2,244(r2)
  806754:	10803fcc 	andi	r2,r2,255
  806758:	1080201c 	xori	r2,r2,128
  80675c:	10bfe004 	addi	r2,r2,-128
  806760:	10000626 	beq	r2,zero,80677c <logic+0x5c20>
  806764:	e0bffc17 	ldw	r2,-16(fp)
  806768:	10805403 	ldbu	r2,336(r2)
  80676c:	10803fcc 	andi	r2,r2,255
  806770:	1080201c 	xori	r2,r2,128
  806774:	10bfe004 	addi	r2,r2,-128
  806778:	10000c1e 	bne	r2,zero,8067ac <logic+0x5c50>
  80677c:	e0bffc17 	ldw	r2,-16(fp)
  806780:	10803c03 	ldbu	r2,240(r2)
  806784:	10803fcc 	andi	r2,r2,255
  806788:	1080201c 	xori	r2,r2,128
  80678c:	10bfe004 	addi	r2,r2,-128
  806790:	10000826 	beq	r2,zero,8067b4 <logic+0x5c58>
  806794:	e0bffc17 	ldw	r2,-16(fp)
  806798:	10805483 	ldbu	r2,338(r2)
  80679c:	10803fcc 	andi	r2,r2,255
  8067a0:	1080201c 	xori	r2,r2,128
  8067a4:	10bfe004 	addi	r2,r2,-128
  8067a8:	10000226 	beq	r2,zero,8067b4 <logic+0x5c58>
  8067ac:	00800044 	movi	r2,1
  8067b0:	00000106 	br	8067b8 <logic+0x5c5c>
  8067b4:	0005883a 	mov	r2,zero
  8067b8:	1007883a 	mov	r3,r2
  8067bc:	e0bffc17 	ldw	r2,-16(fp)
  8067c0:	10c03c85 	stb	r3,242(r2)
  d->_g199 = !d->_g128;
  8067c4:	e0bffc17 	ldw	r2,-16(fp)
  8067c8:	10803143 	ldbu	r2,197(r2)
  8067cc:	10803fcc 	andi	r2,r2,255
  8067d0:	1080201c 	xori	r2,r2,128
  8067d4:	10bfe004 	addi	r2,r2,-128
  8067d8:	1005003a 	cmpeq	r2,r2,zero
  8067dc:	1007883a 	mov	r3,r2
  8067e0:	e0bffc17 	ldw	r2,-16(fp)
  8067e4:	10c03d85 	stb	r3,246(r2)
  d->_g200 = d->_g109 || d->_g203;
  8067e8:	e0bffc17 	ldw	r2,-16(fp)
  8067ec:	10802dc3 	ldbu	r2,183(r2)
  8067f0:	10803fcc 	andi	r2,r2,255
  8067f4:	1080201c 	xori	r2,r2,128
  8067f8:	10bfe004 	addi	r2,r2,-128
  8067fc:	1000061e 	bne	r2,zero,806818 <logic+0x5cbc>
  806800:	e0bffc17 	ldw	r2,-16(fp)
  806804:	10803e83 	ldbu	r2,250(r2)
  806808:	10803fcc 	andi	r2,r2,255
  80680c:	1080201c 	xori	r2,r2,128
  806810:	10bfe004 	addi	r2,r2,-128
  806814:	10000226 	beq	r2,zero,806820 <logic+0x5cc4>
  806818:	00800044 	movi	r2,1
  80681c:	00000106 	br	806824 <logic+0x5cc8>
  806820:	0005883a 	mov	r2,zero
  806824:	1007883a 	mov	r3,r2
  806828:	e0bffc17 	ldw	r2,-16(fp)
  80682c:	10c03dc5 	stb	r3,247(r2)
  d->_g203 = (d->_g131 || d->_g192) && (d->_g199 || d->_g200) && (d->_g192 || d->_g200);
  806830:	e0bffc17 	ldw	r2,-16(fp)
  806834:	108031c3 	ldbu	r2,199(r2)
  806838:	10803fcc 	andi	r2,r2,255
  80683c:	1080201c 	xori	r2,r2,128
  806840:	10bfe004 	addi	r2,r2,-128
  806844:	1000061e 	bne	r2,zero,806860 <logic+0x5d04>
  806848:	e0bffc17 	ldw	r2,-16(fp)
  80684c:	10803c83 	ldbu	r2,242(r2)
  806850:	10803fcc 	andi	r2,r2,255
  806854:	1080201c 	xori	r2,r2,128
  806858:	10bfe004 	addi	r2,r2,-128
  80685c:	10001a26 	beq	r2,zero,8068c8 <logic+0x5d6c>
  806860:	e0bffc17 	ldw	r2,-16(fp)
  806864:	10803d83 	ldbu	r2,246(r2)
  806868:	10803fcc 	andi	r2,r2,255
  80686c:	1080201c 	xori	r2,r2,128
  806870:	10bfe004 	addi	r2,r2,-128
  806874:	1000061e 	bne	r2,zero,806890 <logic+0x5d34>
  806878:	e0bffc17 	ldw	r2,-16(fp)
  80687c:	10803dc3 	ldbu	r2,247(r2)
  806880:	10803fcc 	andi	r2,r2,255
  806884:	1080201c 	xori	r2,r2,128
  806888:	10bfe004 	addi	r2,r2,-128
  80688c:	10000e26 	beq	r2,zero,8068c8 <logic+0x5d6c>
  806890:	e0bffc17 	ldw	r2,-16(fp)
  806894:	10803c83 	ldbu	r2,242(r2)
  806898:	10803fcc 	andi	r2,r2,255
  80689c:	1080201c 	xori	r2,r2,128
  8068a0:	10bfe004 	addi	r2,r2,-128
  8068a4:	1000061e 	bne	r2,zero,8068c0 <logic+0x5d64>
  8068a8:	e0bffc17 	ldw	r2,-16(fp)
  8068ac:	10803dc3 	ldbu	r2,247(r2)
  8068b0:	10803fcc 	andi	r2,r2,255
  8068b4:	1080201c 	xori	r2,r2,128
  8068b8:	10bfe004 	addi	r2,r2,-128
  8068bc:	10000226 	beq	r2,zero,8068c8 <logic+0x5d6c>
  8068c0:	00800044 	movi	r2,1
  8068c4:	00000106 	br	8068cc <logic+0x5d70>
  8068c8:	0005883a 	mov	r2,zero
  8068cc:	1007883a 	mov	r3,r2
  8068d0:	e0bffc17 	ldw	r2,-16(fp)
  8068d4:	10c03e85 	stb	r3,250(r2)
  d->_cg204 = d->_Pacemaker_local__Atrig11;
  8068d8:	e0bffc17 	ldw	r2,-16(fp)
  8068dc:	10c01b03 	ldbu	r3,108(r2)
  8068e0:	e0bffc17 	ldw	r2,-16(fp)
  8068e4:	10c05305 	stb	r3,332(r2)
  d->_g192 = d->_g203 && !d->_cg204;
  8068e8:	e0bffc17 	ldw	r2,-16(fp)
  8068ec:	10803e83 	ldbu	r2,250(r2)
  8068f0:	10803fcc 	andi	r2,r2,255
  8068f4:	1080201c 	xori	r2,r2,128
  8068f8:	10bfe004 	addi	r2,r2,-128
  8068fc:	10000826 	beq	r2,zero,806920 <logic+0x5dc4>
  806900:	e0bffc17 	ldw	r2,-16(fp)
  806904:	10805303 	ldbu	r2,332(r2)
  806908:	10803fcc 	andi	r2,r2,255
  80690c:	1080201c 	xori	r2,r2,128
  806910:	10bfe004 	addi	r2,r2,-128
  806914:	1000021e 	bne	r2,zero,806920 <logic+0x5dc4>
  806918:	00800044 	movi	r2,1
  80691c:	00000106 	br	806924 <logic+0x5dc8>
  806920:	0005883a 	mov	r2,zero
  806924:	1007883a 	mov	r3,r2
  806928:	e0bffc17 	ldw	r2,-16(fp)
  80692c:	10c03c85 	stb	r3,242(r2)
  if (d->_g192) {
  806930:	e0bffc17 	ldw	r2,-16(fp)
  806934:	10803c83 	ldbu	r2,242(r2)
  806938:	10803fcc 	andi	r2,r2,255
  80693c:	1080201c 	xori	r2,r2,128
  806940:	10bfe004 	addi	r2,r2,-128
  806944:	10000626 	beq	r2,zero,806960 <logic+0x5e04>
    d->_Pacemaker_local_iAP |= 1;
  806948:	e0bffc17 	ldw	r2,-16(fp)
  80694c:	10801703 	ldbu	r2,92(r2)
  806950:	10800054 	ori	r2,r2,1
  806954:	1007883a 	mov	r3,r2
  806958:	e0bffc17 	ldw	r2,-16(fp)
  80695c:	10c01705 	stb	r3,92(r2)
  }
  d->_g201 = d->_pg192_e1;
  806960:	e0bffc17 	ldw	r2,-16(fp)
  806964:	10c06303 	ldbu	r3,396(r2)
  806968:	e0bffc17 	ldw	r2,-16(fp)
  80696c:	10c03e05 	stb	r3,248(r2)
  d->_cg144 = (d->AS || d->_Pacemaker_local_iAP) && !d->_Pacemaker_local_PVARP_timeout;
  806970:	e0bffc17 	ldw	r2,-16(fp)
  806974:	10800a03 	ldbu	r2,40(r2)
  806978:	10803fcc 	andi	r2,r2,255
  80697c:	1080201c 	xori	r2,r2,128
  806980:	10bfe004 	addi	r2,r2,-128
  806984:	1000061e 	bne	r2,zero,8069a0 <logic+0x5e44>
  806988:	e0bffc17 	ldw	r2,-16(fp)
  80698c:	10801703 	ldbu	r2,92(r2)
  806990:	10803fcc 	andi	r2,r2,255
  806994:	1080201c 	xori	r2,r2,128
  806998:	10bfe004 	addi	r2,r2,-128
  80699c:	10000826 	beq	r2,zero,8069c0 <logic+0x5e64>
  8069a0:	e0bffc17 	ldw	r2,-16(fp)
  8069a4:	10801783 	ldbu	r2,94(r2)
  8069a8:	10803fcc 	andi	r2,r2,255
  8069ac:	1080201c 	xori	r2,r2,128
  8069b0:	10bfe004 	addi	r2,r2,-128
  8069b4:	1000021e 	bne	r2,zero,8069c0 <logic+0x5e64>
  8069b8:	00800044 	movi	r2,1
  8069bc:	00000106 	br	8069c4 <logic+0x5e68>
  8069c0:	0005883a 	mov	r2,zero
  8069c4:	1007883a 	mov	r3,r2
  8069c8:	e0bffc17 	ldw	r2,-16(fp)
  8069cc:	10c04ec5 	stb	r3,315(r2)
  d->_g192_e1 = d->_GO || (d->_g172 && d->_cg178) || d->_g164_e2 || (d->_g201 && !d->_cg144);
  8069d0:	e0bffc17 	ldw	r2,-16(fp)
  8069d4:	10803fc3 	ldbu	r2,255(r2)
  8069d8:	10803fcc 	andi	r2,r2,255
  8069dc:	1080201c 	xori	r2,r2,128
  8069e0:	10bfe004 	addi	r2,r2,-128
  8069e4:	10001e1e 	bne	r2,zero,806a60 <logic+0x5f04>
  8069e8:	e0bffc17 	ldw	r2,-16(fp)
  8069ec:	108038c3 	ldbu	r2,227(r2)
  8069f0:	10803fcc 	andi	r2,r2,255
  8069f4:	1080201c 	xori	r2,r2,128
  8069f8:	10bfe004 	addi	r2,r2,-128
  8069fc:	10000626 	beq	r2,zero,806a18 <logic+0x5ebc>
  806a00:	e0bffc17 	ldw	r2,-16(fp)
  806a04:	10804e83 	ldbu	r2,314(r2)
  806a08:	10803fcc 	andi	r2,r2,255
  806a0c:	1080201c 	xori	r2,r2,128
  806a10:	10bfe004 	addi	r2,r2,-128
  806a14:	1000121e 	bne	r2,zero,806a60 <logic+0x5f04>
  806a18:	e0bffc17 	ldw	r2,-16(fp)
  806a1c:	10805883 	ldbu	r2,354(r2)
  806a20:	10803fcc 	andi	r2,r2,255
  806a24:	1080201c 	xori	r2,r2,128
  806a28:	10bfe004 	addi	r2,r2,-128
  806a2c:	10000c1e 	bne	r2,zero,806a60 <logic+0x5f04>
  806a30:	e0bffc17 	ldw	r2,-16(fp)
  806a34:	10803e03 	ldbu	r2,248(r2)
  806a38:	10803fcc 	andi	r2,r2,255
  806a3c:	1080201c 	xori	r2,r2,128
  806a40:	10bfe004 	addi	r2,r2,-128
  806a44:	10000826 	beq	r2,zero,806a68 <logic+0x5f0c>
  806a48:	e0bffc17 	ldw	r2,-16(fp)
  806a4c:	10804ec3 	ldbu	r2,315(r2)
  806a50:	10803fcc 	andi	r2,r2,255
  806a54:	1080201c 	xori	r2,r2,128
  806a58:	10bfe004 	addi	r2,r2,-128
  806a5c:	1000021e 	bne	r2,zero,806a68 <logic+0x5f0c>
  806a60:	00800044 	movi	r2,1
  806a64:	00000106 	br	806a6c <logic+0x5f10>
  806a68:	0005883a 	mov	r2,zero
  806a6c:	1007883a 	mov	r3,r2
  806a70:	e0bffc17 	ldw	r2,-16(fp)
  806a74:	10c05905 	stb	r3,356(r2)
  d->_g201_e2 = d->_g201 && d->_cg144;
  806a78:	e0bffc17 	ldw	r2,-16(fp)
  806a7c:	10803e03 	ldbu	r2,248(r2)
  806a80:	10803fcc 	andi	r2,r2,255
  806a84:	1080201c 	xori	r2,r2,128
  806a88:	10bfe004 	addi	r2,r2,-128
  806a8c:	10000826 	beq	r2,zero,806ab0 <logic+0x5f54>
  806a90:	e0bffc17 	ldw	r2,-16(fp)
  806a94:	10804ec3 	ldbu	r2,315(r2)
  806a98:	10803fcc 	andi	r2,r2,255
  806a9c:	1080201c 	xori	r2,r2,128
  806aa0:	10bfe004 	addi	r2,r2,-128
  806aa4:	10000226 	beq	r2,zero,806ab0 <logic+0x5f54>
  806aa8:	00800044 	movi	r2,1
  806aac:	00000106 	br	806ab4 <logic+0x5f58>
  806ab0:	0005883a 	mov	r2,zero
  806ab4:	1007883a 	mov	r3,r2
  806ab8:	e0bffc17 	ldw	r2,-16(fp)
  806abc:	10c05945 	stb	r3,357(r2)
  if (d->_g201_e2) {
  806ac0:	e0bffc17 	ldw	r2,-16(fp)
  806ac4:	10805943 	ldbu	r2,357(r2)
  806ac8:	10803fcc 	andi	r2,r2,255
  806acc:	1080201c 	xori	r2,r2,128
  806ad0:	10bfe004 	addi	r2,r2,-128
  806ad4:	10000326 	beq	r2,zero,806ae4 <logic+0x5f88>
    d->_Pacemaker_local__region4_AVI_x = 0;
  806ad8:	e0bffc17 	ldw	r2,-16(fp)
  806adc:	10001315 	stw	zero,76(r2)
  806ae0:	10001415 	stw	zero,80(r2)
  }
  d->_g178 = d->_g201_e2 || (d->_g177 && d->_cg179);
  806ae4:	e0bffc17 	ldw	r2,-16(fp)
  806ae8:	10805943 	ldbu	r2,357(r2)
  806aec:	10803fcc 	andi	r2,r2,255
  806af0:	1080201c 	xori	r2,r2,128
  806af4:	10bfe004 	addi	r2,r2,-128
  806af8:	10000c1e 	bne	r2,zero,806b2c <logic+0x5fd0>
  806afc:	e0bffc17 	ldw	r2,-16(fp)
  806b00:	10803a03 	ldbu	r2,232(r2)
  806b04:	10803fcc 	andi	r2,r2,255
  806b08:	1080201c 	xori	r2,r2,128
  806b0c:	10bfe004 	addi	r2,r2,-128
  806b10:	10000826 	beq	r2,zero,806b34 <logic+0x5fd8>
  806b14:	e0bffc17 	ldw	r2,-16(fp)
  806b18:	10804f03 	ldbu	r2,316(r2)
  806b1c:	10803fcc 	andi	r2,r2,255
  806b20:	1080201c 	xori	r2,r2,128
  806b24:	10bfe004 	addi	r2,r2,-128
  806b28:	10000226 	beq	r2,zero,806b34 <logic+0x5fd8>
  806b2c:	00800044 	movi	r2,1
  806b30:	00000106 	br	806b38 <logic+0x5fdc>
  806b34:	0005883a 	mov	r2,zero
  806b38:	1007883a 	mov	r3,r2
  806b3c:	e0bffc17 	ldw	r2,-16(fp)
  806b40:	10c03a45 	stb	r3,233(r2)
  if (d->_g178) {
  806b44:	e0bffc17 	ldw	r2,-16(fp)
  806b48:	10803a43 	ldbu	r2,233(r2)
  806b4c:	10803fcc 	andi	r2,r2,255
  806b50:	1080201c 	xori	r2,r2,128
  806b54:	10bfe004 	addi	r2,r2,-128
  806b58:	10000626 	beq	r2,zero,806b74 <logic+0x6018>
    d->_Pacemaker_local__Atrig8 = 0;
  806b5c:	e0bffc17 	ldw	r2,-16(fp)
  806b60:	10001a45 	stb	zero,105(r2)
    d->_Pacemaker_local__Atrig9 = 0;
  806b64:	e0bffc17 	ldw	r2,-16(fp)
  806b68:	10001a85 	stb	zero,106(r2)
    d->_Pacemaker_local__Atrig10 = 0;
  806b6c:	e0bffc17 	ldw	r2,-16(fp)
  806b70:	10001ac5 	stb	zero,107(r2)
  }
  d->_cg147 = d->_Pacemaker_local__region4_AVI_x < d->AVI;
  806b74:	e0bffc17 	ldw	r2,-16(fp)
  806b78:	14001317 	ldw	r16,76(r2)
  806b7c:	14401417 	ldw	r17,80(r2)
  806b80:	e0bffc17 	ldw	r2,-16(fp)
  806b84:	10800017 	ldw	r2,0(r2)
  806b88:	1009883a 	mov	r4,r2
  806b8c:	0809a000 	call	809a00 <__floatsidf>
  806b90:	1009883a 	mov	r4,r2
  806b94:	180b883a 	mov	r5,r3
  806b98:	04800044 	movi	r18,1
  806b9c:	200d883a 	mov	r6,r4
  806ba0:	280f883a 	mov	r7,r5
  806ba4:	8009883a 	mov	r4,r16
  806ba8:	880b883a 	mov	r5,r17
  806bac:	08088f80 	call	8088f8 <__ledf2>
  806bb0:	10000116 	blt	r2,zero,806bb8 <logic+0x605c>
  806bb4:	0025883a 	mov	r18,zero
  806bb8:	9007883a 	mov	r3,r18
  806bbc:	e0bffc17 	ldw	r2,-16(fp)
  806bc0:	10c04f45 	stb	r3,317(r2)
  d->_g180 = d->_g178 && d->_cg147;
  806bc4:	e0bffc17 	ldw	r2,-16(fp)
  806bc8:	10803a43 	ldbu	r2,233(r2)
  806bcc:	10803fcc 	andi	r2,r2,255
  806bd0:	1080201c 	xori	r2,r2,128
  806bd4:	10bfe004 	addi	r2,r2,-128
  806bd8:	10000826 	beq	r2,zero,806bfc <logic+0x60a0>
  806bdc:	e0bffc17 	ldw	r2,-16(fp)
  806be0:	10804f43 	ldbu	r2,317(r2)
  806be4:	10803fcc 	andi	r2,r2,255
  806be8:	1080201c 	xori	r2,r2,128
  806bec:	10bfe004 	addi	r2,r2,-128
  806bf0:	10000226 	beq	r2,zero,806bfc <logic+0x60a0>
  806bf4:	00800044 	movi	r2,1
  806bf8:	00000106 	br	806c00 <logic+0x60a4>
  806bfc:	0005883a 	mov	r2,zero
  806c00:	1007883a 	mov	r3,r2
  806c04:	e0bffc17 	ldw	r2,-16(fp)
  806c08:	10c03ac5 	stb	r3,235(r2)
  if (d->_g180) {
  806c0c:	e0bffc17 	ldw	r2,-16(fp)
  806c10:	10803ac3 	ldbu	r2,235(r2)
  806c14:	10803fcc 	andi	r2,r2,255
  806c18:	1080201c 	xori	r2,r2,128
  806c1c:	10bfe004 	addi	r2,r2,-128
  806c20:	10003426 	beq	r2,zero,806cf4 <logic+0x6198>
    d->sleepT = (d->sleepT < (d->AVI - d->_Pacemaker_local__region4_AVI_x)) ? d->sleepT : (d->AVI - d->_Pacemaker_local__region4_AVI_x);
  806c24:	e0bffc17 	ldw	r2,-16(fp)
  806c28:	14000817 	ldw	r16,32(r2)
  806c2c:	14400917 	ldw	r17,36(r2)
  806c30:	e0bffc17 	ldw	r2,-16(fp)
  806c34:	10800017 	ldw	r2,0(r2)
  806c38:	1009883a 	mov	r4,r2
  806c3c:	0809a000 	call	809a00 <__floatsidf>
  806c40:	1011883a 	mov	r8,r2
  806c44:	1813883a 	mov	r9,r3
  806c48:	e13ffc17 	ldw	r4,-16(fp)
  806c4c:	20801317 	ldw	r2,76(r4)
  806c50:	20c01417 	ldw	r3,80(r4)
  806c54:	100d883a 	mov	r6,r2
  806c58:	180f883a 	mov	r7,r3
  806c5c:	4009883a 	mov	r4,r8
  806c60:	480b883a 	mov	r5,r9
  806c64:	08091040 	call	809104 <__subdf3>
  806c68:	1009883a 	mov	r4,r2
  806c6c:	180b883a 	mov	r5,r3
  806c70:	2005883a 	mov	r2,r4
  806c74:	2807883a 	mov	r3,r5
  806c78:	100d883a 	mov	r6,r2
  806c7c:	180f883a 	mov	r7,r3
  806c80:	8009883a 	mov	r4,r16
  806c84:	880b883a 	mov	r5,r17
  806c88:	08088f80 	call	8088f8 <__ledf2>
  806c8c:	1000040e 	bge	r2,zero,806ca0 <logic+0x6144>
  806c90:	e13ffc17 	ldw	r4,-16(fp)
  806c94:	20800817 	ldw	r2,32(r4)
  806c98:	20c00917 	ldw	r3,36(r4)
  806c9c:	00001206 	br	806ce8 <logic+0x618c>
  806ca0:	e0bffc17 	ldw	r2,-16(fp)
  806ca4:	10800017 	ldw	r2,0(r2)
  806ca8:	1009883a 	mov	r4,r2
  806cac:	0809a000 	call	809a00 <__floatsidf>
  806cb0:	1011883a 	mov	r8,r2
  806cb4:	1813883a 	mov	r9,r3
  806cb8:	e13ffc17 	ldw	r4,-16(fp)
  806cbc:	20801317 	ldw	r2,76(r4)
  806cc0:	20c01417 	ldw	r3,80(r4)
  806cc4:	100d883a 	mov	r6,r2
  806cc8:	180f883a 	mov	r7,r3
  806ccc:	4009883a 	mov	r4,r8
  806cd0:	480b883a 	mov	r5,r9
  806cd4:	08091040 	call	809104 <__subdf3>
  806cd8:	1009883a 	mov	r4,r2
  806cdc:	180b883a 	mov	r5,r3
  806ce0:	2005883a 	mov	r2,r4
  806ce4:	2807883a 	mov	r3,r5
  806ce8:	e13ffc17 	ldw	r4,-16(fp)
  806cec:	20800815 	stw	r2,32(r4)
  806cf0:	20c00915 	stw	r3,36(r4)
  }
  d->_cg148 = d->_Pacemaker_local__Atrig8 || d->_Pacemaker_local__Atrig9 || d->_Pacemaker_local__Atrig10;
  806cf4:	e0bffc17 	ldw	r2,-16(fp)
  806cf8:	10801a43 	ldbu	r2,105(r2)
  806cfc:	10803fcc 	andi	r2,r2,255
  806d00:	1080201c 	xori	r2,r2,128
  806d04:	10bfe004 	addi	r2,r2,-128
  806d08:	10000c1e 	bne	r2,zero,806d3c <logic+0x61e0>
  806d0c:	e0bffc17 	ldw	r2,-16(fp)
  806d10:	10801a83 	ldbu	r2,106(r2)
  806d14:	10803fcc 	andi	r2,r2,255
  806d18:	1080201c 	xori	r2,r2,128
  806d1c:	10bfe004 	addi	r2,r2,-128
  806d20:	1000061e 	bne	r2,zero,806d3c <logic+0x61e0>
  806d24:	e0bffc17 	ldw	r2,-16(fp)
  806d28:	10801ac3 	ldbu	r2,107(r2)
  806d2c:	10803fcc 	andi	r2,r2,255
  806d30:	1080201c 	xori	r2,r2,128
  806d34:	10bfe004 	addi	r2,r2,-128
  806d38:	10000226 	beq	r2,zero,806d44 <logic+0x61e8>
  806d3c:	00800044 	movi	r2,1
  806d40:	00000106 	br	806d48 <logic+0x61ec>
  806d44:	0005883a 	mov	r2,zero
  806d48:	1007883a 	mov	r3,r2
  806d4c:	e0bffc17 	ldw	r2,-16(fp)
  806d50:	10c04f85 	stb	r3,318(r2)
  d->_g144 = (d->_g180 && !d->_cg148) || (d->_g156 && !d->_cg152);
  806d54:	e0bffc17 	ldw	r2,-16(fp)
  806d58:	10803ac3 	ldbu	r2,235(r2)
  806d5c:	10803fcc 	andi	r2,r2,255
  806d60:	1080201c 	xori	r2,r2,128
  806d64:	10bfe004 	addi	r2,r2,-128
  806d68:	10000626 	beq	r2,zero,806d84 <logic+0x6228>
  806d6c:	e0bffc17 	ldw	r2,-16(fp)
  806d70:	10804f83 	ldbu	r2,318(r2)
  806d74:	10803fcc 	andi	r2,r2,255
  806d78:	1080201c 	xori	r2,r2,128
  806d7c:	10bfe004 	addi	r2,r2,-128
  806d80:	10000c26 	beq	r2,zero,806db4 <logic+0x6258>
  806d84:	e0bffc17 	ldw	r2,-16(fp)
  806d88:	10803603 	ldbu	r2,216(r2)
  806d8c:	10803fcc 	andi	r2,r2,255
  806d90:	1080201c 	xori	r2,r2,128
  806d94:	10bfe004 	addi	r2,r2,-128
  806d98:	10000826 	beq	r2,zero,806dbc <logic+0x6260>
  806d9c:	e0bffc17 	ldw	r2,-16(fp)
  806da0:	10804fc3 	ldbu	r2,319(r2)
  806da4:	10803fcc 	andi	r2,r2,255
  806da8:	1080201c 	xori	r2,r2,128
  806dac:	10bfe004 	addi	r2,r2,-128
  806db0:	1000021e 	bne	r2,zero,806dbc <logic+0x6260>
  806db4:	00800044 	movi	r2,1
  806db8:	00000106 	br	806dc0 <logic+0x6264>
  806dbc:	0005883a 	mov	r2,zero
  806dc0:	1007883a 	mov	r3,r2
  806dc4:	e0bffc17 	ldw	r2,-16(fp)
  806dc8:	10c033c5 	stb	r3,207(r2)
  d->_g145 = d->_g178 && !d->_cg147;
  806dcc:	e0bffc17 	ldw	r2,-16(fp)
  806dd0:	10803a43 	ldbu	r2,233(r2)
  806dd4:	10803fcc 	andi	r2,r2,255
  806dd8:	1080201c 	xori	r2,r2,128
  806ddc:	10bfe004 	addi	r2,r2,-128
  806de0:	10000826 	beq	r2,zero,806e04 <logic+0x62a8>
  806de4:	e0bffc17 	ldw	r2,-16(fp)
  806de8:	10804f43 	ldbu	r2,317(r2)
  806dec:	10803fcc 	andi	r2,r2,255
  806df0:	1080201c 	xori	r2,r2,128
  806df4:	10bfe004 	addi	r2,r2,-128
  806df8:	1000021e 	bne	r2,zero,806e04 <logic+0x62a8>
  806dfc:	00800044 	movi	r2,1
  806e00:	00000106 	br	806e08 <logic+0x62ac>
  806e04:	0005883a 	mov	r2,zero
  806e08:	1007883a 	mov	r3,r2
  806e0c:	e0bffc17 	ldw	r2,-16(fp)
  806e10:	10c03405 	stb	r3,208(r2)
  d->_cg157 = d->_Pacemaker_local__Atrig8 || d->_Pacemaker_local__Atrig9 || d->_Pacemaker_local__Atrig10;
  806e14:	e0bffc17 	ldw	r2,-16(fp)
  806e18:	10801a43 	ldbu	r2,105(r2)
  806e1c:	10803fcc 	andi	r2,r2,255
  806e20:	1080201c 	xori	r2,r2,128
  806e24:	10bfe004 	addi	r2,r2,-128
  806e28:	10000c1e 	bne	r2,zero,806e5c <logic+0x6300>
  806e2c:	e0bffc17 	ldw	r2,-16(fp)
  806e30:	10801a83 	ldbu	r2,106(r2)
  806e34:	10803fcc 	andi	r2,r2,255
  806e38:	1080201c 	xori	r2,r2,128
  806e3c:	10bfe004 	addi	r2,r2,-128
  806e40:	1000061e 	bne	r2,zero,806e5c <logic+0x6300>
  806e44:	e0bffc17 	ldw	r2,-16(fp)
  806e48:	10801ac3 	ldbu	r2,107(r2)
  806e4c:	10803fcc 	andi	r2,r2,255
  806e50:	1080201c 	xori	r2,r2,128
  806e54:	10bfe004 	addi	r2,r2,-128
  806e58:	10000226 	beq	r2,zero,806e64 <logic+0x6308>
  806e5c:	00800044 	movi	r2,1
  806e60:	00000106 	br	806e68 <logic+0x630c>
  806e64:	0005883a 	mov	r2,zero
  806e68:	1007883a 	mov	r3,r2
  806e6c:	e0bffc17 	ldw	r2,-16(fp)
  806e70:	10c05085 	stb	r3,322(r2)
  d->_g179 = (d->_g150 && !d->_cg154) || (d->_g145 && !d->_cg157);
  806e74:	e0bffc17 	ldw	r2,-16(fp)
  806e78:	108034c3 	ldbu	r2,211(r2)
  806e7c:	10803fcc 	andi	r2,r2,255
  806e80:	1080201c 	xori	r2,r2,128
  806e84:	10bfe004 	addi	r2,r2,-128
  806e88:	10000626 	beq	r2,zero,806ea4 <logic+0x6348>
  806e8c:	e0bffc17 	ldw	r2,-16(fp)
  806e90:	10805043 	ldbu	r2,321(r2)
  806e94:	10803fcc 	andi	r2,r2,255
  806e98:	1080201c 	xori	r2,r2,128
  806e9c:	10bfe004 	addi	r2,r2,-128
  806ea0:	10000c26 	beq	r2,zero,806ed4 <logic+0x6378>
  806ea4:	e0bffc17 	ldw	r2,-16(fp)
  806ea8:	10803403 	ldbu	r2,208(r2)
  806eac:	10803fcc 	andi	r2,r2,255
  806eb0:	1080201c 	xori	r2,r2,128
  806eb4:	10bfe004 	addi	r2,r2,-128
  806eb8:	10000826 	beq	r2,zero,806edc <logic+0x6380>
  806ebc:	e0bffc17 	ldw	r2,-16(fp)
  806ec0:	10805083 	ldbu	r2,322(r2)
  806ec4:	10803fcc 	andi	r2,r2,255
  806ec8:	1080201c 	xori	r2,r2,128
  806ecc:	10bfe004 	addi	r2,r2,-128
  806ed0:	1000021e 	bne	r2,zero,806edc <logic+0x6380>
  806ed4:	00800044 	movi	r2,1
  806ed8:	00000106 	br	806ee0 <logic+0x6384>
  806edc:	0005883a 	mov	r2,zero
  806ee0:	1007883a 	mov	r3,r2
  806ee4:	e0bffc17 	ldw	r2,-16(fp)
  806ee8:	10c03a85 	stb	r3,234(r2)
  d->_cg158 = d->_Pacemaker_local__region4_AVI_x < d->AVI;
  806eec:	e0bffc17 	ldw	r2,-16(fp)
  806ef0:	14001317 	ldw	r16,76(r2)
  806ef4:	14401417 	ldw	r17,80(r2)
  806ef8:	e0bffc17 	ldw	r2,-16(fp)
  806efc:	10800017 	ldw	r2,0(r2)
  806f00:	1009883a 	mov	r4,r2
  806f04:	0809a000 	call	809a00 <__floatsidf>
  806f08:	1009883a 	mov	r4,r2
  806f0c:	180b883a 	mov	r5,r3
  806f10:	04800044 	movi	r18,1
  806f14:	200d883a 	mov	r6,r4
  806f18:	280f883a 	mov	r7,r5
  806f1c:	8009883a 	mov	r4,r16
  806f20:	880b883a 	mov	r5,r17
  806f24:	08088f80 	call	8088f8 <__ledf2>
  806f28:	10000116 	blt	r2,zero,806f30 <logic+0x63d4>
  806f2c:	0025883a 	mov	r18,zero
  806f30:	9007883a 	mov	r3,r18
  806f34:	e0bffc17 	ldw	r2,-16(fp)
  806f38:	10c050c5 	stb	r3,323(r2)
  d->_g152 = d->_g178 && d->_cg158;
  806f3c:	e0bffc17 	ldw	r2,-16(fp)
  806f40:	10803a43 	ldbu	r2,233(r2)
  806f44:	10803fcc 	andi	r2,r2,255
  806f48:	1080201c 	xori	r2,r2,128
  806f4c:	10bfe004 	addi	r2,r2,-128
  806f50:	10000826 	beq	r2,zero,806f74 <logic+0x6418>
  806f54:	e0bffc17 	ldw	r2,-16(fp)
  806f58:	108050c3 	ldbu	r2,323(r2)
  806f5c:	10803fcc 	andi	r2,r2,255
  806f60:	1080201c 	xori	r2,r2,128
  806f64:	10bfe004 	addi	r2,r2,-128
  806f68:	10000226 	beq	r2,zero,806f74 <logic+0x6418>
  806f6c:	00800044 	movi	r2,1
  806f70:	00000106 	br	806f78 <logic+0x641c>
  806f74:	0005883a 	mov	r2,zero
  806f78:	1007883a 	mov	r3,r2
  806f7c:	e0bffc17 	ldw	r2,-16(fp)
  806f80:	10c03545 	stb	r3,213(r2)
  if (d->_g152) {
  806f84:	e0bffc17 	ldw	r2,-16(fp)
  806f88:	10803543 	ldbu	r2,213(r2)
  806f8c:	10803fcc 	andi	r2,r2,255
  806f90:	1080201c 	xori	r2,r2,128
  806f94:	10bfe004 	addi	r2,r2,-128
  806f98:	10003426 	beq	r2,zero,80706c <logic+0x6510>
    d->sleepT = (d->sleepT < (d->AVI - d->_Pacemaker_local__region4_AVI_x)) ? d->sleepT : (d->AVI - d->_Pacemaker_local__region4_AVI_x);
  806f9c:	e0bffc17 	ldw	r2,-16(fp)
  806fa0:	14000817 	ldw	r16,32(r2)
  806fa4:	14400917 	ldw	r17,36(r2)
  806fa8:	e0bffc17 	ldw	r2,-16(fp)
  806fac:	10800017 	ldw	r2,0(r2)
  806fb0:	1009883a 	mov	r4,r2
  806fb4:	0809a000 	call	809a00 <__floatsidf>
  806fb8:	1011883a 	mov	r8,r2
  806fbc:	1813883a 	mov	r9,r3
  806fc0:	e13ffc17 	ldw	r4,-16(fp)
  806fc4:	20801317 	ldw	r2,76(r4)
  806fc8:	20c01417 	ldw	r3,80(r4)
  806fcc:	100d883a 	mov	r6,r2
  806fd0:	180f883a 	mov	r7,r3
  806fd4:	4009883a 	mov	r4,r8
  806fd8:	480b883a 	mov	r5,r9
  806fdc:	08091040 	call	809104 <__subdf3>
  806fe0:	1009883a 	mov	r4,r2
  806fe4:	180b883a 	mov	r5,r3
  806fe8:	2005883a 	mov	r2,r4
  806fec:	2807883a 	mov	r3,r5
  806ff0:	100d883a 	mov	r6,r2
  806ff4:	180f883a 	mov	r7,r3
  806ff8:	8009883a 	mov	r4,r16
  806ffc:	880b883a 	mov	r5,r17
  807000:	08088f80 	call	8088f8 <__ledf2>
  807004:	1000040e 	bge	r2,zero,807018 <logic+0x64bc>
  807008:	e13ffc17 	ldw	r4,-16(fp)
  80700c:	20800817 	ldw	r2,32(r4)
  807010:	20c00917 	ldw	r3,36(r4)
  807014:	00001206 	br	807060 <logic+0x6504>
  807018:	e0bffc17 	ldw	r2,-16(fp)
  80701c:	10800017 	ldw	r2,0(r2)
  807020:	1009883a 	mov	r4,r2
  807024:	0809a000 	call	809a00 <__floatsidf>
  807028:	1011883a 	mov	r8,r2
  80702c:	1813883a 	mov	r9,r3
  807030:	e13ffc17 	ldw	r4,-16(fp)
  807034:	20801317 	ldw	r2,76(r4)
  807038:	20c01417 	ldw	r3,80(r4)
  80703c:	100d883a 	mov	r6,r2
  807040:	180f883a 	mov	r7,r3
  807044:	4009883a 	mov	r4,r8
  807048:	480b883a 	mov	r5,r9
  80704c:	08091040 	call	809104 <__subdf3>
  807050:	1009883a 	mov	r4,r2
  807054:	180b883a 	mov	r5,r3
  807058:	2005883a 	mov	r2,r4
  80705c:	2807883a 	mov	r3,r5
  807060:	e13ffc17 	ldw	r4,-16(fp)
  807064:	20800815 	stw	r2,32(r4)
  807068:	20c00915 	stw	r3,36(r4)
  }
  d->_cg159 = d->_Pacemaker_local__Atrig8 || d->_Pacemaker_local__Atrig9 || d->_Pacemaker_local__Atrig10;
  80706c:	e0bffc17 	ldw	r2,-16(fp)
  807070:	10801a43 	ldbu	r2,105(r2)
  807074:	10803fcc 	andi	r2,r2,255
  807078:	1080201c 	xori	r2,r2,128
  80707c:	10bfe004 	addi	r2,r2,-128
  807080:	10000c1e 	bne	r2,zero,8070b4 <logic+0x6558>
  807084:	e0bffc17 	ldw	r2,-16(fp)
  807088:	10801a83 	ldbu	r2,106(r2)
  80708c:	10803fcc 	andi	r2,r2,255
  807090:	1080201c 	xori	r2,r2,128
  807094:	10bfe004 	addi	r2,r2,-128
  807098:	1000061e 	bne	r2,zero,8070b4 <logic+0x6558>
  80709c:	e0bffc17 	ldw	r2,-16(fp)
  8070a0:	10801ac3 	ldbu	r2,107(r2)
  8070a4:	10803fcc 	andi	r2,r2,255
  8070a8:	1080201c 	xori	r2,r2,128
  8070ac:	10bfe004 	addi	r2,r2,-128
  8070b0:	10000226 	beq	r2,zero,8070bc <logic+0x6560>
  8070b4:	00800044 	movi	r2,1
  8070b8:	00000106 	br	8070c0 <logic+0x6564>
  8070bc:	0005883a 	mov	r2,zero
  8070c0:	1007883a 	mov	r3,r2
  8070c4:	e0bffc17 	ldw	r2,-16(fp)
  8070c8:	10c05105 	stb	r3,324(r2)
  d->_g148 = (d->_g152 && !d->_cg159) || (d->_g161 && !d->_cg163);
  8070cc:	e0bffc17 	ldw	r2,-16(fp)
  8070d0:	10803543 	ldbu	r2,213(r2)
  8070d4:	10803fcc 	andi	r2,r2,255
  8070d8:	1080201c 	xori	r2,r2,128
  8070dc:	10bfe004 	addi	r2,r2,-128
  8070e0:	10000626 	beq	r2,zero,8070fc <logic+0x65a0>
  8070e4:	e0bffc17 	ldw	r2,-16(fp)
  8070e8:	10805103 	ldbu	r2,324(r2)
  8070ec:	10803fcc 	andi	r2,r2,255
  8070f0:	1080201c 	xori	r2,r2,128
  8070f4:	10bfe004 	addi	r2,r2,-128
  8070f8:	10000c26 	beq	r2,zero,80712c <logic+0x65d0>
  8070fc:	e0bffc17 	ldw	r2,-16(fp)
  807100:	108036c3 	ldbu	r2,219(r2)
  807104:	10803fcc 	andi	r2,r2,255
  807108:	1080201c 	xori	r2,r2,128
  80710c:	10bfe004 	addi	r2,r2,-128
  807110:	10000826 	beq	r2,zero,807134 <logic+0x65d8>
  807114:	e0bffc17 	ldw	r2,-16(fp)
  807118:	10805143 	ldbu	r2,325(r2)
  80711c:	10803fcc 	andi	r2,r2,255
  807120:	1080201c 	xori	r2,r2,128
  807124:	10bfe004 	addi	r2,r2,-128
  807128:	1000021e 	bne	r2,zero,807134 <logic+0x65d8>
  80712c:	00800044 	movi	r2,1
  807130:	00000106 	br	807138 <logic+0x65dc>
  807134:	0005883a 	mov	r2,zero
  807138:	1007883a 	mov	r3,r2
  80713c:	e0bffc17 	ldw	r2,-16(fp)
  807140:	10c03485 	stb	r3,210(r2)
  d->_g157 = d->_g178 && !d->_cg158;
  807144:	e0bffc17 	ldw	r2,-16(fp)
  807148:	10803a43 	ldbu	r2,233(r2)
  80714c:	10803fcc 	andi	r2,r2,255
  807150:	1080201c 	xori	r2,r2,128
  807154:	10bfe004 	addi	r2,r2,-128
  807158:	10000826 	beq	r2,zero,80717c <logic+0x6620>
  80715c:	e0bffc17 	ldw	r2,-16(fp)
  807160:	108050c3 	ldbu	r2,323(r2)
  807164:	10803fcc 	andi	r2,r2,255
  807168:	1080201c 	xori	r2,r2,128
  80716c:	10bfe004 	addi	r2,r2,-128
  807170:	1000021e 	bne	r2,zero,80717c <logic+0x6620>
  807174:	00800044 	movi	r2,1
  807178:	00000106 	br	807180 <logic+0x6624>
  80717c:	0005883a 	mov	r2,zero
  807180:	1007883a 	mov	r3,r2
  807184:	e0bffc17 	ldw	r2,-16(fp)
  807188:	10c03645 	stb	r3,217(r2)
  d->_cg168 = d->_Pacemaker_local__Atrig8 || d->_Pacemaker_local__Atrig9 || d->_Pacemaker_local__Atrig10;
  80718c:	e0bffc17 	ldw	r2,-16(fp)
  807190:	10801a43 	ldbu	r2,105(r2)
  807194:	10803fcc 	andi	r2,r2,255
  807198:	1080201c 	xori	r2,r2,128
  80719c:	10bfe004 	addi	r2,r2,-128
  8071a0:	10000c1e 	bne	r2,zero,8071d4 <logic+0x6678>
  8071a4:	e0bffc17 	ldw	r2,-16(fp)
  8071a8:	10801a83 	ldbu	r2,106(r2)
  8071ac:	10803fcc 	andi	r2,r2,255
  8071b0:	1080201c 	xori	r2,r2,128
  8071b4:	10bfe004 	addi	r2,r2,-128
  8071b8:	1000061e 	bne	r2,zero,8071d4 <logic+0x6678>
  8071bc:	e0bffc17 	ldw	r2,-16(fp)
  8071c0:	10801ac3 	ldbu	r2,107(r2)
  8071c4:	10803fcc 	andi	r2,r2,255
  8071c8:	1080201c 	xori	r2,r2,128
  8071cc:	10bfe004 	addi	r2,r2,-128
  8071d0:	10000226 	beq	r2,zero,8071dc <logic+0x6680>
  8071d4:	00800044 	movi	r2,1
  8071d8:	00000106 	br	8071e0 <logic+0x6684>
  8071dc:	0005883a 	mov	r2,zero
  8071e0:	1007883a 	mov	r3,r2
  8071e4:	e0bffc17 	ldw	r2,-16(fp)
  8071e8:	10c05205 	stb	r3,328(r2)
  d->_g154 = (d->_g162 && !d->_cg165) || (d->_g157 && !d->_cg168);
  8071ec:	e0bffc17 	ldw	r2,-16(fp)
  8071f0:	10803703 	ldbu	r2,220(r2)
  8071f4:	10803fcc 	andi	r2,r2,255
  8071f8:	1080201c 	xori	r2,r2,128
  8071fc:	10bfe004 	addi	r2,r2,-128
  807200:	10000626 	beq	r2,zero,80721c <logic+0x66c0>
  807204:	e0bffc17 	ldw	r2,-16(fp)
  807208:	108051c3 	ldbu	r2,327(r2)
  80720c:	10803fcc 	andi	r2,r2,255
  807210:	1080201c 	xori	r2,r2,128
  807214:	10bfe004 	addi	r2,r2,-128
  807218:	10000c26 	beq	r2,zero,80724c <logic+0x66f0>
  80721c:	e0bffc17 	ldw	r2,-16(fp)
  807220:	10803643 	ldbu	r2,217(r2)
  807224:	10803fcc 	andi	r2,r2,255
  807228:	1080201c 	xori	r2,r2,128
  80722c:	10bfe004 	addi	r2,r2,-128
  807230:	10000826 	beq	r2,zero,807254 <logic+0x66f8>
  807234:	e0bffc17 	ldw	r2,-16(fp)
  807238:	10805203 	ldbu	r2,328(r2)
  80723c:	10803fcc 	andi	r2,r2,255
  807240:	1080201c 	xori	r2,r2,128
  807244:	10bfe004 	addi	r2,r2,-128
  807248:	1000021e 	bne	r2,zero,807254 <logic+0x66f8>
  80724c:	00800044 	movi	r2,1
  807250:	00000106 	br	807258 <logic+0x66fc>
  807254:	0005883a 	mov	r2,zero
  807258:	1007883a 	mov	r3,r2
  80725c:	e0bffc17 	ldw	r2,-16(fp)
  807260:	10c035c5 	stb	r3,215(r2)
  d->_g163 = d->_g178 || (d->_g42_e1 && !d->_cg176);
  807264:	e0bffc17 	ldw	r2,-16(fp)
  807268:	10803a43 	ldbu	r2,233(r2)
  80726c:	10803fcc 	andi	r2,r2,255
  807270:	1080201c 	xori	r2,r2,128
  807274:	10bfe004 	addi	r2,r2,-128
  807278:	10000c1e 	bne	r2,zero,8072ac <logic+0x6750>
  80727c:	e0bffc17 	ldw	r2,-16(fp)
  807280:	10805603 	ldbu	r2,344(r2)
  807284:	10803fcc 	andi	r2,r2,255
  807288:	1080201c 	xori	r2,r2,128
  80728c:	10bfe004 	addi	r2,r2,-128
  807290:	10000826 	beq	r2,zero,8072b4 <logic+0x6758>
  807294:	e0bffc17 	ldw	r2,-16(fp)
  807298:	10805243 	ldbu	r2,329(r2)
  80729c:	10803fcc 	andi	r2,r2,255
  8072a0:	1080201c 	xori	r2,r2,128
  8072a4:	10bfe004 	addi	r2,r2,-128
  8072a8:	1000021e 	bne	r2,zero,8072b4 <logic+0x6758>
  8072ac:	00800044 	movi	r2,1
  8072b0:	00000106 	br	8072b8 <logic+0x675c>
  8072b4:	0005883a 	mov	r2,zero
  8072b8:	1007883a 	mov	r3,r2
  8072bc:	e0bffc17 	ldw	r2,-16(fp)
  8072c0:	10c03745 	stb	r3,221(r2)
  if (d->_g192) {
  8072c4:	e0bffc17 	ldw	r2,-16(fp)
  8072c8:	10803c83 	ldbu	r2,242(r2)
  8072cc:	10803fcc 	andi	r2,r2,255
  8072d0:	1080201c 	xori	r2,r2,128
  8072d4:	10bfe004 	addi	r2,r2,-128
  8072d8:	10000626 	beq	r2,zero,8072f4 <logic+0x6798>
    d->AP |= 1;
  8072dc:	e0bffc17 	ldw	r2,-16(fp)
  8072e0:	10800a83 	ldbu	r2,42(r2)
  8072e4:	10800054 	ori	r2,r2,1
  8072e8:	1007883a 	mov	r3,r2
  8072ec:	e0bffc17 	ldw	r2,-16(fp)
  8072f0:	10c00a85 	stb	r3,42(r2)
  }
  d->_g159 = d->_pg168;
  8072f4:	e0bffc17 	ldw	r2,-16(fp)
  8072f8:	10c06343 	ldbu	r3,397(r2)
  8072fc:	e0bffc17 	ldw	r2,-16(fp)
  807300:	10c03685 	stb	r3,218(r2)
  d->_cg184 = (d->VS || d->_Pacemaker_local_iVP) && !d->_Pacemaker_local_VRP_timeout;
  807304:	e0bffc17 	ldw	r2,-16(fp)
  807308:	10800a43 	ldbu	r2,41(r2)
  80730c:	10803fcc 	andi	r2,r2,255
  807310:	1080201c 	xori	r2,r2,128
  807314:	10bfe004 	addi	r2,r2,-128
  807318:	1000061e 	bne	r2,zero,807334 <logic+0x67d8>
  80731c:	e0bffc17 	ldw	r2,-16(fp)
  807320:	10801743 	ldbu	r2,93(r2)
  807324:	10803fcc 	andi	r2,r2,255
  807328:	1080201c 	xori	r2,r2,128
  80732c:	10bfe004 	addi	r2,r2,-128
  807330:	10000826 	beq	r2,zero,807354 <logic+0x67f8>
  807334:	e0bffc17 	ldw	r2,-16(fp)
  807338:	108017c3 	ldbu	r2,95(r2)
  80733c:	10803fcc 	andi	r2,r2,255
  807340:	1080201c 	xori	r2,r2,128
  807344:	10bfe004 	addi	r2,r2,-128
  807348:	1000021e 	bne	r2,zero,807354 <logic+0x67f8>
  80734c:	00800044 	movi	r2,1
  807350:	00000106 	br	807358 <logic+0x67fc>
  807354:	0005883a 	mov	r2,zero
  807358:	1007883a 	mov	r3,r2
  80735c:	e0bffc17 	ldw	r2,-16(fp)
  807360:	10c05345 	stb	r3,333(r2)
  d->_g168 = d->_GO || (d->_g203 && d->_cg204) || d->_g192 || (d->_g159 && !d->_cg184);
  807364:	e0bffc17 	ldw	r2,-16(fp)
  807368:	10803fc3 	ldbu	r2,255(r2)
  80736c:	10803fcc 	andi	r2,r2,255
  807370:	1080201c 	xori	r2,r2,128
  807374:	10bfe004 	addi	r2,r2,-128
  807378:	10001e1e 	bne	r2,zero,8073f4 <logic+0x6898>
  80737c:	e0bffc17 	ldw	r2,-16(fp)
  807380:	10803e83 	ldbu	r2,250(r2)
  807384:	10803fcc 	andi	r2,r2,255
  807388:	1080201c 	xori	r2,r2,128
  80738c:	10bfe004 	addi	r2,r2,-128
  807390:	10000626 	beq	r2,zero,8073ac <logic+0x6850>
  807394:	e0bffc17 	ldw	r2,-16(fp)
  807398:	10805303 	ldbu	r2,332(r2)
  80739c:	10803fcc 	andi	r2,r2,255
  8073a0:	1080201c 	xori	r2,r2,128
  8073a4:	10bfe004 	addi	r2,r2,-128
  8073a8:	1000121e 	bne	r2,zero,8073f4 <logic+0x6898>
  8073ac:	e0bffc17 	ldw	r2,-16(fp)
  8073b0:	10803c83 	ldbu	r2,242(r2)
  8073b4:	10803fcc 	andi	r2,r2,255
  8073b8:	1080201c 	xori	r2,r2,128
  8073bc:	10bfe004 	addi	r2,r2,-128
  8073c0:	10000c1e 	bne	r2,zero,8073f4 <logic+0x6898>
  8073c4:	e0bffc17 	ldw	r2,-16(fp)
  8073c8:	10803683 	ldbu	r2,218(r2)
  8073cc:	10803fcc 	andi	r2,r2,255
  8073d0:	1080201c 	xori	r2,r2,128
  8073d4:	10bfe004 	addi	r2,r2,-128
  8073d8:	10000826 	beq	r2,zero,8073fc <logic+0x68a0>
  8073dc:	e0bffc17 	ldw	r2,-16(fp)
  8073e0:	10805343 	ldbu	r2,333(r2)
  8073e4:	10803fcc 	andi	r2,r2,255
  8073e8:	1080201c 	xori	r2,r2,128
  8073ec:	10bfe004 	addi	r2,r2,-128
  8073f0:	1000021e 	bne	r2,zero,8073fc <logic+0x68a0>
  8073f4:	00800044 	movi	r2,1
  8073f8:	00000106 	br	807400 <logic+0x68a4>
  8073fc:	0005883a 	mov	r2,zero
  807400:	1007883a 	mov	r3,r2
  807404:	e0bffc17 	ldw	r2,-16(fp)
  807408:	10c03845 	stb	r3,225(r2)
  d->_g165 = d->_g159 && d->_cg184;
  80740c:	e0bffc17 	ldw	r2,-16(fp)
  807410:	10803683 	ldbu	r2,218(r2)
  807414:	10803fcc 	andi	r2,r2,255
  807418:	1080201c 	xori	r2,r2,128
  80741c:	10bfe004 	addi	r2,r2,-128
  807420:	10000826 	beq	r2,zero,807444 <logic+0x68e8>
  807424:	e0bffc17 	ldw	r2,-16(fp)
  807428:	10805343 	ldbu	r2,333(r2)
  80742c:	10803fcc 	andi	r2,r2,255
  807430:	1080201c 	xori	r2,r2,128
  807434:	10bfe004 	addi	r2,r2,-128
  807438:	10000226 	beq	r2,zero,807444 <logic+0x68e8>
  80743c:	00800044 	movi	r2,1
  807440:	00000106 	br	807448 <logic+0x68ec>
  807444:	0005883a 	mov	r2,zero
  807448:	1007883a 	mov	r3,r2
  80744c:	e0bffc17 	ldw	r2,-16(fp)
  807450:	10c037c5 	stb	r3,223(r2)
  if (d->_g165) {
  807454:	e0bffc17 	ldw	r2,-16(fp)
  807458:	108037c3 	ldbu	r2,223(r2)
  80745c:	10803fcc 	andi	r2,r2,255
  807460:	1080201c 	xori	r2,r2,128
  807464:	10bfe004 	addi	r2,r2,-128
  807468:	10000726 	beq	r2,zero,807488 <logic+0x692c>
    d->_Pacemaker_local__region5_AEI_x = 0;
  80746c:	e0bffc17 	ldw	r2,-16(fp)
  807470:	10001515 	stw	zero,84(r2)
  807474:	10001615 	stw	zero,88(r2)
    d->_Pacemaker_local__Atrig11 = 0;
  807478:	e0bffc17 	ldw	r2,-16(fp)
  80747c:	10001b05 	stb	zero,108(r2)
    d->_Pacemaker_local__Atrig12 = 0;
  807480:	e0bffc17 	ldw	r2,-16(fp)
  807484:	10001b45 	stb	zero,109(r2)
  }
  d->_cg186 = d->_Pacemaker_local__region5_AEI_x < d->AEI;
  807488:	e0bffc17 	ldw	r2,-16(fp)
  80748c:	14001517 	ldw	r16,84(r2)
  807490:	14401617 	ldw	r17,88(r2)
  807494:	e0bffc17 	ldw	r2,-16(fp)
  807498:	10800117 	ldw	r2,4(r2)
  80749c:	1009883a 	mov	r4,r2
  8074a0:	0809a000 	call	809a00 <__floatsidf>
  8074a4:	1009883a 	mov	r4,r2
  8074a8:	180b883a 	mov	r5,r3
  8074ac:	04800044 	movi	r18,1
  8074b0:	200d883a 	mov	r6,r4
  8074b4:	280f883a 	mov	r7,r5
  8074b8:	8009883a 	mov	r4,r16
  8074bc:	880b883a 	mov	r5,r17
  8074c0:	08088f80 	call	8088f8 <__ledf2>
  8074c4:	10000116 	blt	r2,zero,8074cc <logic+0x6970>
  8074c8:	0025883a 	mov	r18,zero
  8074cc:	9007883a 	mov	r3,r18
  8074d0:	e0bffc17 	ldw	r2,-16(fp)
  8074d4:	10c05385 	stb	r3,334(r2)
  d->_g146 = d->_g165 && d->_cg186;
  8074d8:	e0bffc17 	ldw	r2,-16(fp)
  8074dc:	108037c3 	ldbu	r2,223(r2)
  8074e0:	10803fcc 	andi	r2,r2,255
  8074e4:	1080201c 	xori	r2,r2,128
  8074e8:	10bfe004 	addi	r2,r2,-128
  8074ec:	10000826 	beq	r2,zero,807510 <logic+0x69b4>
  8074f0:	e0bffc17 	ldw	r2,-16(fp)
  8074f4:	10805383 	ldbu	r2,334(r2)
  8074f8:	10803fcc 	andi	r2,r2,255
  8074fc:	1080201c 	xori	r2,r2,128
  807500:	10bfe004 	addi	r2,r2,-128
  807504:	10000226 	beq	r2,zero,807510 <logic+0x69b4>
  807508:	00800044 	movi	r2,1
  80750c:	00000106 	br	807514 <logic+0x69b8>
  807510:	0005883a 	mov	r2,zero
  807514:	1007883a 	mov	r3,r2
  807518:	e0bffc17 	ldw	r2,-16(fp)
  80751c:	10c03445 	stb	r3,209(r2)
  if (d->_g146) {
  807520:	e0bffc17 	ldw	r2,-16(fp)
  807524:	10803443 	ldbu	r2,209(r2)
  807528:	10803fcc 	andi	r2,r2,255
  80752c:	1080201c 	xori	r2,r2,128
  807530:	10bfe004 	addi	r2,r2,-128
  807534:	10003426 	beq	r2,zero,807608 <logic+0x6aac>
    d->sleepT = (d->sleepT < (d->AEI - d->_Pacemaker_local__region5_AEI_x)) ? d->sleepT : (d->AEI - d->_Pacemaker_local__region5_AEI_x);
  807538:	e0bffc17 	ldw	r2,-16(fp)
  80753c:	14000817 	ldw	r16,32(r2)
  807540:	14400917 	ldw	r17,36(r2)
  807544:	e0bffc17 	ldw	r2,-16(fp)
  807548:	10800117 	ldw	r2,4(r2)
  80754c:	1009883a 	mov	r4,r2
  807550:	0809a000 	call	809a00 <__floatsidf>
  807554:	1011883a 	mov	r8,r2
  807558:	1813883a 	mov	r9,r3
  80755c:	e13ffc17 	ldw	r4,-16(fp)
  807560:	20801517 	ldw	r2,84(r4)
  807564:	20c01617 	ldw	r3,88(r4)
  807568:	100d883a 	mov	r6,r2
  80756c:	180f883a 	mov	r7,r3
  807570:	4009883a 	mov	r4,r8
  807574:	480b883a 	mov	r5,r9
  807578:	08091040 	call	809104 <__subdf3>
  80757c:	1009883a 	mov	r4,r2
  807580:	180b883a 	mov	r5,r3
  807584:	2005883a 	mov	r2,r4
  807588:	2807883a 	mov	r3,r5
  80758c:	100d883a 	mov	r6,r2
  807590:	180f883a 	mov	r7,r3
  807594:	8009883a 	mov	r4,r16
  807598:	880b883a 	mov	r5,r17
  80759c:	08088f80 	call	8088f8 <__ledf2>
  8075a0:	1000040e 	bge	r2,zero,8075b4 <logic+0x6a58>
  8075a4:	e13ffc17 	ldw	r4,-16(fp)
  8075a8:	20800817 	ldw	r2,32(r4)
  8075ac:	20c00917 	ldw	r3,36(r4)
  8075b0:	00001206 	br	8075fc <logic+0x6aa0>
  8075b4:	e0bffc17 	ldw	r2,-16(fp)
  8075b8:	10800117 	ldw	r2,4(r2)
  8075bc:	1009883a 	mov	r4,r2
  8075c0:	0809a000 	call	809a00 <__floatsidf>
  8075c4:	1011883a 	mov	r8,r2
  8075c8:	1813883a 	mov	r9,r3
  8075cc:	e13ffc17 	ldw	r4,-16(fp)
  8075d0:	20801517 	ldw	r2,84(r4)
  8075d4:	20c01617 	ldw	r3,88(r4)
  8075d8:	100d883a 	mov	r6,r2
  8075dc:	180f883a 	mov	r7,r3
  8075e0:	4009883a 	mov	r4,r8
  8075e4:	480b883a 	mov	r5,r9
  8075e8:	08091040 	call	809104 <__subdf3>
  8075ec:	1009883a 	mov	r4,r2
  8075f0:	180b883a 	mov	r5,r3
  8075f4:	2005883a 	mov	r2,r4
  8075f8:	2807883a 	mov	r3,r5
  8075fc:	e13ffc17 	ldw	r4,-16(fp)
  807600:	20800815 	stw	r2,32(r4)
  807604:	20c00915 	stw	r3,36(r4)
  }
  d->_cg187 = d->_Pacemaker_local__Atrig11 || d->_Pacemaker_local__Atrig12;
  807608:	e0bffc17 	ldw	r2,-16(fp)
  80760c:	10801b03 	ldbu	r2,108(r2)
  807610:	10803fcc 	andi	r2,r2,255
  807614:	1080201c 	xori	r2,r2,128
  807618:	10bfe004 	addi	r2,r2,-128
  80761c:	1000061e 	bne	r2,zero,807638 <logic+0x6adc>
  807620:	e0bffc17 	ldw	r2,-16(fp)
  807624:	10801b43 	ldbu	r2,109(r2)
  807628:	10803fcc 	andi	r2,r2,255
  80762c:	1080201c 	xori	r2,r2,128
  807630:	10bfe004 	addi	r2,r2,-128
  807634:	10000226 	beq	r2,zero,807640 <logic+0x6ae4>
  807638:	00800044 	movi	r2,1
  80763c:	00000106 	br	807644 <logic+0x6ae8>
  807640:	0005883a 	mov	r2,zero
  807644:	1007883a 	mov	r3,r2
  807648:	e0bffc17 	ldw	r2,-16(fp)
  80764c:	10c053c5 	stb	r3,335(r2)
  d->_g176 = (d->_g146 && !d->_cg187) || (d->_g195 && !d->_cg191);
  807650:	e0bffc17 	ldw	r2,-16(fp)
  807654:	10803443 	ldbu	r2,209(r2)
  807658:	10803fcc 	andi	r2,r2,255
  80765c:	1080201c 	xori	r2,r2,128
  807660:	10bfe004 	addi	r2,r2,-128
  807664:	10000626 	beq	r2,zero,807680 <logic+0x6b24>
  807668:	e0bffc17 	ldw	r2,-16(fp)
  80766c:	108053c3 	ldbu	r2,335(r2)
  807670:	10803fcc 	andi	r2,r2,255
  807674:	1080201c 	xori	r2,r2,128
  807678:	10bfe004 	addi	r2,r2,-128
  80767c:	10000c26 	beq	r2,zero,8076b0 <logic+0x6b54>
  807680:	e0bffc17 	ldw	r2,-16(fp)
  807684:	10803d03 	ldbu	r2,244(r2)
  807688:	10803fcc 	andi	r2,r2,255
  80768c:	1080201c 	xori	r2,r2,128
  807690:	10bfe004 	addi	r2,r2,-128
  807694:	10000826 	beq	r2,zero,8076b8 <logic+0x6b5c>
  807698:	e0bffc17 	ldw	r2,-16(fp)
  80769c:	10805403 	ldbu	r2,336(r2)
  8076a0:	10803fcc 	andi	r2,r2,255
  8076a4:	1080201c 	xori	r2,r2,128
  8076a8:	10bfe004 	addi	r2,r2,-128
  8076ac:	1000021e 	bne	r2,zero,8076b8 <logic+0x6b5c>
  8076b0:	00800044 	movi	r2,1
  8076b4:	00000106 	br	8076bc <logic+0x6b60>
  8076b8:	0005883a 	mov	r2,zero
  8076bc:	1007883a 	mov	r3,r2
  8076c0:	e0bffc17 	ldw	r2,-16(fp)
  8076c4:	10c039c5 	stb	r3,231(r2)
  d->_g204 = d->_g165 && !d->_cg186;
  8076c8:	e0bffc17 	ldw	r2,-16(fp)
  8076cc:	108037c3 	ldbu	r2,223(r2)
  8076d0:	10803fcc 	andi	r2,r2,255
  8076d4:	1080201c 	xori	r2,r2,128
  8076d8:	10bfe004 	addi	r2,r2,-128
  8076dc:	10000826 	beq	r2,zero,807700 <logic+0x6ba4>
  8076e0:	e0bffc17 	ldw	r2,-16(fp)
  8076e4:	10805383 	ldbu	r2,334(r2)
  8076e8:	10803fcc 	andi	r2,r2,255
  8076ec:	1080201c 	xori	r2,r2,128
  8076f0:	10bfe004 	addi	r2,r2,-128
  8076f4:	1000021e 	bne	r2,zero,807700 <logic+0x6ba4>
  8076f8:	00800044 	movi	r2,1
  8076fc:	00000106 	br	807704 <logic+0x6ba8>
  807700:	0005883a 	mov	r2,zero
  807704:	1007883a 	mov	r3,r2
  807708:	e0bffc17 	ldw	r2,-16(fp)
  80770c:	10c03ec5 	stb	r3,251(r2)
  d->_cg196 = d->_Pacemaker_local__Atrig11 || d->_Pacemaker_local__Atrig12;
  807710:	e0bffc17 	ldw	r2,-16(fp)
  807714:	10801b03 	ldbu	r2,108(r2)
  807718:	10803fcc 	andi	r2,r2,255
  80771c:	1080201c 	xori	r2,r2,128
  807720:	10bfe004 	addi	r2,r2,-128
  807724:	1000061e 	bne	r2,zero,807740 <logic+0x6be4>
  807728:	e0bffc17 	ldw	r2,-16(fp)
  80772c:	10801b43 	ldbu	r2,109(r2)
  807730:	10803fcc 	andi	r2,r2,255
  807734:	1080201c 	xori	r2,r2,128
  807738:	10bfe004 	addi	r2,r2,-128
  80773c:	10000226 	beq	r2,zero,807748 <logic+0x6bec>
  807740:	00800044 	movi	r2,1
  807744:	00000106 	br	80774c <logic+0x6bf0>
  807748:	0005883a 	mov	r2,zero
  80774c:	1007883a 	mov	r3,r2
  807750:	e0bffc17 	ldw	r2,-16(fp)
  807754:	10c054c5 	stb	r3,339(r2)
  d->_g205 = (d->_g190 && !d->_cg193) || (d->_g204 && !d->_cg196);
  807758:	e0bffc17 	ldw	r2,-16(fp)
  80775c:	10803c03 	ldbu	r2,240(r2)
  807760:	10803fcc 	andi	r2,r2,255
  807764:	1080201c 	xori	r2,r2,128
  807768:	10bfe004 	addi	r2,r2,-128
  80776c:	10000626 	beq	r2,zero,807788 <logic+0x6c2c>
  807770:	e0bffc17 	ldw	r2,-16(fp)
  807774:	10805483 	ldbu	r2,338(r2)
  807778:	10803fcc 	andi	r2,r2,255
  80777c:	1080201c 	xori	r2,r2,128
  807780:	10bfe004 	addi	r2,r2,-128
  807784:	10000c26 	beq	r2,zero,8077b8 <logic+0x6c5c>
  807788:	e0bffc17 	ldw	r2,-16(fp)
  80778c:	10803ec3 	ldbu	r2,251(r2)
  807790:	10803fcc 	andi	r2,r2,255
  807794:	1080201c 	xori	r2,r2,128
  807798:	10bfe004 	addi	r2,r2,-128
  80779c:	10000826 	beq	r2,zero,8077c0 <logic+0x6c64>
  8077a0:	e0bffc17 	ldw	r2,-16(fp)
  8077a4:	108054c3 	ldbu	r2,339(r2)
  8077a8:	10803fcc 	andi	r2,r2,255
  8077ac:	1080201c 	xori	r2,r2,128
  8077b0:	10bfe004 	addi	r2,r2,-128
  8077b4:	1000021e 	bne	r2,zero,8077c0 <logic+0x6c64>
  8077b8:	00800044 	movi	r2,1
  8077bc:	00000106 	br	8077c4 <logic+0x6c68>
  8077c0:	0005883a 	mov	r2,zero
  8077c4:	1007883a 	mov	r3,r2
  8077c8:	e0bffc17 	ldw	r2,-16(fp)
  8077cc:	10c03f05 	stb	r3,252(r2)
  d->_g184 = d->_g165 || (d->_g202 && !d->_cg202);
  8077d0:	e0bffc17 	ldw	r2,-16(fp)
  8077d4:	108037c3 	ldbu	r2,223(r2)
  8077d8:	10803fcc 	andi	r2,r2,255
  8077dc:	1080201c 	xori	r2,r2,128
  8077e0:	10bfe004 	addi	r2,r2,-128
  8077e4:	10000c1e 	bne	r2,zero,807818 <logic+0x6cbc>
  8077e8:	e0bffc17 	ldw	r2,-16(fp)
  8077ec:	10803e43 	ldbu	r2,249(r2)
  8077f0:	10803fcc 	andi	r2,r2,255
  8077f4:	1080201c 	xori	r2,r2,128
  8077f8:	10bfe004 	addi	r2,r2,-128
  8077fc:	10000826 	beq	r2,zero,807820 <logic+0x6cc4>
  807800:	e0bffc17 	ldw	r2,-16(fp)
  807804:	10805503 	ldbu	r2,340(r2)
  807808:	10803fcc 	andi	r2,r2,255
  80780c:	1080201c 	xori	r2,r2,128
  807810:	10bfe004 	addi	r2,r2,-128
  807814:	1000021e 	bne	r2,zero,807820 <logic+0x6cc4>
  807818:	00800044 	movi	r2,1
  80781c:	00000106 	br	807824 <logic+0x6cc8>
  807820:	0005883a 	mov	r2,zero
  807824:	1007883a 	mov	r3,r2
  807828:	e0bffc17 	ldw	r2,-16(fp)
  80782c:	10c03b05 	stb	r3,236(r2)
  d->_g187 = d->_GO || d->_g173_e3;
  807830:	e0bffc17 	ldw	r2,-16(fp)
  807834:	10803fc3 	ldbu	r2,255(r2)
  807838:	10803fcc 	andi	r2,r2,255
  80783c:	1080201c 	xori	r2,r2,128
  807840:	10bfe004 	addi	r2,r2,-128
  807844:	1000061e 	bne	r2,zero,807860 <logic+0x6d04>
  807848:	e0bffc17 	ldw	r2,-16(fp)
  80784c:	108058c3 	ldbu	r2,355(r2)
  807850:	10803fcc 	andi	r2,r2,255
  807854:	1080201c 	xori	r2,r2,128
  807858:	10bfe004 	addi	r2,r2,-128
  80785c:	10000226 	beq	r2,zero,807868 <logic+0x6d0c>
  807860:	00800044 	movi	r2,1
  807864:	00000106 	br	80786c <logic+0x6d10>
  807868:	0005883a 	mov	r2,zero
  80786c:	1007883a 	mov	r3,r2
  807870:	e0bffc17 	ldw	r2,-16(fp)
  807874:	10c03b85 	stb	r3,238(r2)
  d->_g191 = d->_GO || d->_g213;
  807878:	e0bffc17 	ldw	r2,-16(fp)
  80787c:	10803fc3 	ldbu	r2,255(r2)
  807880:	10803fcc 	andi	r2,r2,255
  807884:	1080201c 	xori	r2,r2,128
  807888:	10bfe004 	addi	r2,r2,-128
  80788c:	1000061e 	bne	r2,zero,8078a8 <logic+0x6d4c>
  807890:	e0bffc17 	ldw	r2,-16(fp)
  807894:	10803f43 	ldbu	r2,253(r2)
  807898:	10803fcc 	andi	r2,r2,255
  80789c:	1080201c 	xori	r2,r2,128
  8078a0:	10bfe004 	addi	r2,r2,-128
  8078a4:	10000226 	beq	r2,zero,8078b0 <logic+0x6d54>
  8078a8:	00800044 	movi	r2,1
  8078ac:	00000106 	br	8078b4 <logic+0x6d58>
  8078b0:	0005883a 	mov	r2,zero
  8078b4:	1007883a 	mov	r3,r2
  8078b8:	e0bffc17 	ldw	r2,-16(fp)
  8078bc:	10c03c45 	stb	r3,241(r2)
  d->_g196 = d->_GO || d->_g54;
  8078c0:	e0bffc17 	ldw	r2,-16(fp)
  8078c4:	10803fc3 	ldbu	r2,255(r2)
  8078c8:	10803fcc 	andi	r2,r2,255
  8078cc:	1080201c 	xori	r2,r2,128
  8078d0:	10bfe004 	addi	r2,r2,-128
  8078d4:	1000061e 	bne	r2,zero,8078f0 <logic+0x6d94>
  8078d8:	e0bffc17 	ldw	r2,-16(fp)
  8078dc:	10802443 	ldbu	r2,145(r2)
  8078e0:	10803fcc 	andi	r2,r2,255
  8078e4:	1080201c 	xori	r2,r2,128
  8078e8:	10bfe004 	addi	r2,r2,-128
  8078ec:	10000226 	beq	r2,zero,8078f8 <logic+0x6d9c>
  8078f0:	00800044 	movi	r2,1
  8078f4:	00000106 	br	8078fc <logic+0x6da0>
  8078f8:	0005883a 	mov	r2,zero
  8078fc:	1007883a 	mov	r3,r2
  807900:	e0bffc17 	ldw	r2,-16(fp)
  807904:	10c03d45 	stb	r3,245(r2)
  d->_g193 = d->_GO || d->_g94;
  807908:	e0bffc17 	ldw	r2,-16(fp)
  80790c:	10803fc3 	ldbu	r2,255(r2)
  807910:	10803fcc 	andi	r2,r2,255
  807914:	1080201c 	xori	r2,r2,128
  807918:	10bfe004 	addi	r2,r2,-128
  80791c:	1000061e 	bne	r2,zero,807938 <logic+0x6ddc>
  807920:	e0bffc17 	ldw	r2,-16(fp)
  807924:	10802b43 	ldbu	r2,173(r2)
  807928:	10803fcc 	andi	r2,r2,255
  80792c:	1080201c 	xori	r2,r2,128
  807930:	10bfe004 	addi	r2,r2,-128
  807934:	10000226 	beq	r2,zero,807940 <logic+0x6de4>
  807938:	00800044 	movi	r2,1
  80793c:	00000106 	br	807944 <logic+0x6de8>
  807940:	0005883a 	mov	r2,zero
  807944:	1007883a 	mov	r3,r2
  807948:	e0bffc17 	ldw	r2,-16(fp)
  80794c:	10c03cc5 	stb	r3,243(r2)
  d->_g185 = d->_GO || d->_g53_e2;
  807950:	e0bffc17 	ldw	r2,-16(fp)
  807954:	10803fc3 	ldbu	r2,255(r2)
  807958:	10803fcc 	andi	r2,r2,255
  80795c:	1080201c 	xori	r2,r2,128
  807960:	10bfe004 	addi	r2,r2,-128
  807964:	1000061e 	bne	r2,zero,807980 <logic+0x6e24>
  807968:	e0bffc17 	ldw	r2,-16(fp)
  80796c:	10805643 	ldbu	r2,345(r2)
  807970:	10803fcc 	andi	r2,r2,255
  807974:	1080201c 	xori	r2,r2,128
  807978:	10bfe004 	addi	r2,r2,-128
  80797c:	10000226 	beq	r2,zero,807988 <logic+0x6e2c>
  807980:	00800044 	movi	r2,1
  807984:	00000106 	br	80798c <logic+0x6e30>
  807988:	0005883a 	mov	r2,zero
  80798c:	1007883a 	mov	r3,r2
  807990:	e0bffc17 	ldw	r2,-16(fp)
  807994:	10c03b45 	stb	r3,237(r2)
  d->_g202 = d->_GO || d->_g137;
  807998:	e0bffc17 	ldw	r2,-16(fp)
  80799c:	10803fc3 	ldbu	r2,255(r2)
  8079a0:	10803fcc 	andi	r2,r2,255
  8079a4:	1080201c 	xori	r2,r2,128
  8079a8:	10bfe004 	addi	r2,r2,-128
  8079ac:	1000061e 	bne	r2,zero,8079c8 <logic+0x6e6c>
  8079b0:	e0bffc17 	ldw	r2,-16(fp)
  8079b4:	108032c3 	ldbu	r2,203(r2)
  8079b8:	10803fcc 	andi	r2,r2,255
  8079bc:	1080201c 	xori	r2,r2,128
  8079c0:	10bfe004 	addi	r2,r2,-128
  8079c4:	10000226 	beq	r2,zero,8079d0 <logic+0x6e74>
  8079c8:	00800044 	movi	r2,1
  8079cc:	00000106 	br	8079d4 <logic+0x6e78>
  8079d0:	0005883a 	mov	r2,zero
  8079d4:	1007883a 	mov	r3,r2
  8079d8:	e0bffc17 	ldw	r2,-16(fp)
  8079dc:	10c03e45 	stb	r3,249(r2)
}
  8079e0:	0001883a 	nop
  8079e4:	e6fffd04 	addi	sp,fp,-12
  8079e8:	dfc00417 	ldw	ra,16(sp)
  8079ec:	df000317 	ldw	fp,12(sp)
  8079f0:	dc800217 	ldw	r18,8(sp)
  8079f4:	dc400117 	ldw	r17,4(sp)
  8079f8:	dc000017 	ldw	r16,0(sp)
  8079fc:	dec00504 	addi	sp,sp,20
  807a00:	f800283a 	ret

00807a04 <reset>:

void reset(TickData* d) {
  807a04:	defffe04 	addi	sp,sp,-8
  807a08:	df000115 	stw	fp,4(sp)
  807a0c:	df000104 	addi	fp,sp,4
  807a10:	e13fff15 	stw	r4,-4(fp)
  d->_GO = 1;
  807a14:	e0bfff17 	ldw	r2,-4(fp)
  807a18:	00c00044 	movi	r3,1
  807a1c:	10c03fc5 	stb	r3,255(r2)
  d->_TERM = 0;
  807a20:	e0bfff17 	ldw	r2,-4(fp)
  807a24:	10005985 	stb	zero,358(r2)
  d->AVI = AVI_VALUE;
  807a28:	e0bfff17 	ldw	r2,-4(fp)
  807a2c:	00c04b04 	movi	r3,300
  807a30:	10c00015 	stw	r3,0(r2)
  d->AEI = AEI_VALUE;
  807a34:	e0bfff17 	ldw	r2,-4(fp)
  807a38:	00c0c804 	movi	r3,800
  807a3c:	10c00115 	stw	r3,4(r2)
  d->PVARP = PVARP_VALUE;
  807a40:	e0bfff17 	ldw	r2,-4(fp)
  807a44:	00c00c84 	movi	r3,50
  807a48:	10c00215 	stw	r3,8(r2)
  d->VRP = VRP_VALUE;
  807a4c:	e0bfff17 	ldw	r2,-4(fp)
  807a50:	00c02584 	movi	r3,150
  807a54:	10c00315 	stw	r3,12(r2)
  d->LRI = LRI_VALUE;
  807a58:	e0bfff17 	ldw	r2,-4(fp)
  807a5c:	00c0ed84 	movi	r3,950
  807a60:	10c00415 	stw	r3,16(r2)
  d->URI = URI_VALUE;
  807a64:	e0bfff17 	ldw	r2,-4(fp)
  807a68:	00c0e104 	movi	r3,900
  807a6c:	10c00515 	stw	r3,20(r2)
  d->deltaT = 0.0;
  807a70:	e0bfff17 	ldw	r2,-4(fp)
  807a74:	10000615 	stw	zero,24(r2)
  807a78:	10000715 	stw	zero,28(r2)
  d->sleepT = 0.0;
  807a7c:	e0bfff17 	ldw	r2,-4(fp)
  807a80:	10000815 	stw	zero,32(r2)
  807a84:	10000915 	stw	zero,36(r2)
  d->AP = 0;
  807a88:	e0bfff17 	ldw	r2,-4(fp)
  807a8c:	10000a85 	stb	zero,42(r2)
  d->VP = 0;
  807a90:	e0bfff17 	ldw	r2,-4(fp)
  807a94:	10000ac5 	stb	zero,43(r2)
  d->_Pacemaker_local__region0_LRI_x = 0;
  807a98:	e0bfff17 	ldw	r2,-4(fp)
  807a9c:	10000b15 	stw	zero,44(r2)
  807aa0:	10000c15 	stw	zero,48(r2)
  d->_Pacemaker_local__region1_URI_x = 0;
  807aa4:	e0bfff17 	ldw	r2,-4(fp)
  807aa8:	10000d15 	stw	zero,52(r2)
  807aac:	10000e15 	stw	zero,56(r2)
  d->_Pacemaker_local__region2_PVARP_x = 0;
  807ab0:	e0bfff17 	ldw	r2,-4(fp)
  807ab4:	10000f15 	stw	zero,60(r2)
  807ab8:	10001015 	stw	zero,64(r2)
  d->_Pacemaker_local__region3_VRP_x = 0;
  807abc:	e0bfff17 	ldw	r2,-4(fp)
  807ac0:	10001115 	stw	zero,68(r2)
  807ac4:	10001215 	stw	zero,72(r2)
  d->_Pacemaker_local__region4_AVI_x = 0;
  807ac8:	e0bfff17 	ldw	r2,-4(fp)
  807acc:	10001315 	stw	zero,76(r2)
  807ad0:	10001415 	stw	zero,80(r2)
  d->_Pacemaker_local__region5_AEI_x = 0;
  807ad4:	e0bfff17 	ldw	r2,-4(fp)
  807ad8:	10001515 	stw	zero,84(r2)
  807adc:	10001615 	stw	zero,88(r2)
  d->_Pacemaker_local_iAP = 0;
  807ae0:	e0bfff17 	ldw	r2,-4(fp)
  807ae4:	10001705 	stb	zero,92(r2)
  d->_Pacemaker_local_iVP = 0;
  807ae8:	e0bfff17 	ldw	r2,-4(fp)
  807aec:	10001745 	stb	zero,93(r2)
  d->_Pacemaker_local_PVARP_timeout = 0;
  807af0:	e0bfff17 	ldw	r2,-4(fp)
  807af4:	10001785 	stb	zero,94(r2)
  d->_Pacemaker_local_VRP_timeout = 0;
  807af8:	e0bfff17 	ldw	r2,-4(fp)
  807afc:	100017c5 	stb	zero,95(r2)
  d->_Pacemaker_local_URI_timeout = 0;
  807b00:	e0bfff17 	ldw	r2,-4(fp)
  807b04:	10001805 	stb	zero,96(r2)
  d->_pg179 = 0;
  807b08:	e0bfff17 	ldw	r2,-4(fp)
  807b0c:	100059c5 	stb	zero,359(r2)
  d->_pg144 = 0;
  807b10:	e0bfff17 	ldw	r2,-4(fp)
  807b14:	10005a05 	stb	zero,360(r2)
  d->_pg163 = 0;
  807b18:	e0bfff17 	ldw	r2,-4(fp)
  807b1c:	10005a45 	stb	zero,361(r2)
  d->_pg66 = 0;
  807b20:	e0bfff17 	ldw	r2,-4(fp)
  807b24:	10005a85 	stb	zero,362(r2)
  d->_pg65 = 0;
  807b28:	e0bfff17 	ldw	r2,-4(fp)
  807b2c:	10005ac5 	stb	zero,363(r2)
  d->_pg191 = 0;
  807b30:	e0bfff17 	ldw	r2,-4(fp)
  807b34:	10005b05 	stb	zero,364(r2)
  d->_pg43 = 0;
  807b38:	e0bfff17 	ldw	r2,-4(fp)
  807b3c:	10005b45 	stb	zero,365(r2)
  d->_pg46 = 0;
  807b40:	e0bfff17 	ldw	r2,-4(fp)
  807b44:	10005b85 	stb	zero,366(r2)
  d->_pg37 = 0;
  807b48:	e0bfff17 	ldw	r2,-4(fp)
  807b4c:	10005bc5 	stb	zero,367(r2)
  d->_pg185 = 0;
  807b50:	e0bfff17 	ldw	r2,-4(fp)
  807b54:	10005c05 	stb	zero,368(r2)
  d->_pg154 = 0;
  807b58:	e0bfff17 	ldw	r2,-4(fp)
  807b5c:	10005c45 	stb	zero,369(r2)
  d->_pg148 = 0;
  807b60:	e0bfff17 	ldw	r2,-4(fp)
  807b64:	10005c85 	stb	zero,370(r2)
  d->_pg153 = 0;
  807b68:	e0bfff17 	ldw	r2,-4(fp)
  807b6c:	10005cc5 	stb	zero,371(r2)
  d->_pg187 = 0;
  807b70:	e0bfff17 	ldw	r2,-4(fp)
  807b74:	10005d05 	stb	zero,372(r2)
  d->_pg29 = 0;
  807b78:	e0bfff17 	ldw	r2,-4(fp)
  807b7c:	10005d45 	stb	zero,373(r2)
  d->_pg28 = 0;
  807b80:	e0bfff17 	ldw	r2,-4(fp)
  807b84:	10005d85 	stb	zero,374(r2)
  d->_pg14 = 0;
  807b88:	e0bfff17 	ldw	r2,-4(fp)
  807b8c:	10005dc5 	stb	zero,375(r2)
  d->_pg24 = 0;
  807b90:	e0bfff17 	ldw	r2,-4(fp)
  807b94:	10005e05 	stb	zero,376(r2)
  d->_pg19 = 0;
  807b98:	e0bfff17 	ldw	r2,-4(fp)
  807b9c:	10005e45 	stb	zero,377(r2)
  d->_pg103 = 0;
  807ba0:	e0bfff17 	ldw	r2,-4(fp)
  807ba4:	10005e85 	stb	zero,378(r2)
  d->_pg70 = 0;
  807ba8:	e0bfff17 	ldw	r2,-4(fp)
  807bac:	10005ec5 	stb	zero,379(r2)
  d->_pg196 = 0;
  807bb0:	e0bfff17 	ldw	r2,-4(fp)
  807bb4:	10005f05 	stb	zero,380(r2)
  d->_pg83 = 0;
  807bb8:	e0bfff17 	ldw	r2,-4(fp)
  807bbc:	10005f45 	stb	zero,381(r2)
  d->_pg80 = 0;
  807bc0:	e0bfff17 	ldw	r2,-4(fp)
  807bc4:	10005f85 	stb	zero,382(r2)
  d->_pg78 = 0;
  807bc8:	e0bfff17 	ldw	r2,-4(fp)
  807bcc:	10005fc5 	stb	zero,383(r2)
  d->_pg90 = 0;
  807bd0:	e0bfff17 	ldw	r2,-4(fp)
  807bd4:	10006005 	stb	zero,384(r2)
  d->_pg108 = 0;
  807bd8:	e0bfff17 	ldw	r2,-4(fp)
  807bdc:	10006045 	stb	zero,385(r2)
  d->_pg107 = 0;
  807be0:	e0bfff17 	ldw	r2,-4(fp)
  807be4:	10006085 	stb	zero,386(r2)
  d->_pg193 = 0;
  807be8:	e0bfff17 	ldw	r2,-4(fp)
  807bec:	100060c5 	stb	zero,387(r2)
  d->_pg117 = 0;
  807bf0:	e0bfff17 	ldw	r2,-4(fp)
  807bf4:	10006105 	stb	zero,388(r2)
  d->_pg120 = 0;
  807bf8:	e0bfff17 	ldw	r2,-4(fp)
  807bfc:	10006145 	stb	zero,389(r2)
  d->_pg111 = 0;
  807c00:	e0bfff17 	ldw	r2,-4(fp)
  807c04:	10006185 	stb	zero,390(r2)
  d->_pg116 = 0;
  807c08:	e0bfff17 	ldw	r2,-4(fp)
  807c0c:	100061c5 	stb	zero,391(r2)
  d->_pg205 = 0;
  807c10:	e0bfff17 	ldw	r2,-4(fp)
  807c14:	10006205 	stb	zero,392(r2)
  d->_pg176 = 0;
  807c18:	e0bfff17 	ldw	r2,-4(fp)
  807c1c:	10006245 	stb	zero,393(r2)
  d->_pg184 = 0;
  807c20:	e0bfff17 	ldw	r2,-4(fp)
  807c24:	10006285 	stb	zero,394(r2)
  d->_pg202 = 0;
  807c28:	e0bfff17 	ldw	r2,-4(fp)
  807c2c:	100062c5 	stb	zero,395(r2)
  d->_pg192_e1 = 0;
  807c30:	e0bfff17 	ldw	r2,-4(fp)
  807c34:	10006305 	stb	zero,396(r2)
  d->_pg168 = 0;
  807c38:	e0bfff17 	ldw	r2,-4(fp)
  807c3c:	10006345 	stb	zero,397(r2)
}
  807c40:	0001883a 	nop
  807c44:	e037883a 	mov	sp,fp
  807c48:	df000017 	ldw	fp,0(sp)
  807c4c:	dec00104 	addi	sp,sp,4
  807c50:	f800283a 	ret

00807c54 <tick>:

void tick(TickData* d) {
  807c54:	defffd04 	addi	sp,sp,-12
  807c58:	dfc00215 	stw	ra,8(sp)
  807c5c:	df000115 	stw	fp,4(sp)
  807c60:	df000104 	addi	fp,sp,4
  807c64:	e13fff15 	stw	r4,-4(fp)
  logic(d);
  807c68:	e13fff17 	ldw	r4,-4(fp)
  807c6c:	0800b5c0 	call	800b5c <logic>

  d->_pg179 = d->_g179;
  807c70:	e0bfff17 	ldw	r2,-4(fp)
  807c74:	10c03a83 	ldbu	r3,234(r2)
  807c78:	e0bfff17 	ldw	r2,-4(fp)
  807c7c:	10c059c5 	stb	r3,359(r2)
  d->_pg144 = d->_g144;
  807c80:	e0bfff17 	ldw	r2,-4(fp)
  807c84:	10c033c3 	ldbu	r3,207(r2)
  807c88:	e0bfff17 	ldw	r2,-4(fp)
  807c8c:	10c05a05 	stb	r3,360(r2)
  d->_pg163 = d->_g163;
  807c90:	e0bfff17 	ldw	r2,-4(fp)
  807c94:	10c03743 	ldbu	r3,221(r2)
  807c98:	e0bfff17 	ldw	r2,-4(fp)
  807c9c:	10c05a45 	stb	r3,361(r2)
  d->_pg66 = d->_g66;
  807ca0:	e0bfff17 	ldw	r2,-4(fp)
  807ca4:	10c02683 	ldbu	r3,154(r2)
  807ca8:	e0bfff17 	ldw	r2,-4(fp)
  807cac:	10c05a85 	stb	r3,362(r2)
  d->_pg65 = d->_g65;
  807cb0:	e0bfff17 	ldw	r2,-4(fp)
  807cb4:	10c02643 	ldbu	r3,153(r2)
  807cb8:	e0bfff17 	ldw	r2,-4(fp)
  807cbc:	10c05ac5 	stb	r3,363(r2)
  d->_pg191 = d->_g191;
  807cc0:	e0bfff17 	ldw	r2,-4(fp)
  807cc4:	10c03c43 	ldbu	r3,241(r2)
  807cc8:	e0bfff17 	ldw	r2,-4(fp)
  807ccc:	10c05b05 	stb	r3,364(r2)
  d->_pg43 = d->_g43;
  807cd0:	e0bfff17 	ldw	r2,-4(fp)
  807cd4:	10c02243 	ldbu	r3,137(r2)
  807cd8:	e0bfff17 	ldw	r2,-4(fp)
  807cdc:	10c05b45 	stb	r3,365(r2)
  d->_pg46 = d->_g46;
  807ce0:	e0bfff17 	ldw	r2,-4(fp)
  807ce4:	10c022c3 	ldbu	r3,139(r2)
  807ce8:	e0bfff17 	ldw	r2,-4(fp)
  807cec:	10c05b85 	stb	r3,366(r2)
  d->_pg37 = d->_g37;
  807cf0:	e0bfff17 	ldw	r2,-4(fp)
  807cf4:	10c02103 	ldbu	r3,132(r2)
  807cf8:	e0bfff17 	ldw	r2,-4(fp)
  807cfc:	10c05bc5 	stb	r3,367(r2)
  d->_pg185 = d->_g185;
  807d00:	e0bfff17 	ldw	r2,-4(fp)
  807d04:	10c03b43 	ldbu	r3,237(r2)
  807d08:	e0bfff17 	ldw	r2,-4(fp)
  807d0c:	10c05c05 	stb	r3,368(r2)
  d->_pg154 = d->_g154;
  807d10:	e0bfff17 	ldw	r2,-4(fp)
  807d14:	10c035c3 	ldbu	r3,215(r2)
  807d18:	e0bfff17 	ldw	r2,-4(fp)
  807d1c:	10c05c45 	stb	r3,369(r2)
  d->_pg148 = d->_g148;
  807d20:	e0bfff17 	ldw	r2,-4(fp)
  807d24:	10c03483 	ldbu	r3,210(r2)
  807d28:	e0bfff17 	ldw	r2,-4(fp)
  807d2c:	10c05c85 	stb	r3,370(r2)
  d->_pg153 = d->_g153;
  807d30:	e0bfff17 	ldw	r2,-4(fp)
  807d34:	10c03583 	ldbu	r3,214(r2)
  807d38:	e0bfff17 	ldw	r2,-4(fp)
  807d3c:	10c05cc5 	stb	r3,371(r2)
  d->_pg187 = d->_g187;
  807d40:	e0bfff17 	ldw	r2,-4(fp)
  807d44:	10c03b83 	ldbu	r3,238(r2)
  807d48:	e0bfff17 	ldw	r2,-4(fp)
  807d4c:	10c05d05 	stb	r3,372(r2)
  d->_pg29 = d->_g29;
  807d50:	e0bfff17 	ldw	r2,-4(fp)
  807d54:	10c02003 	ldbu	r3,128(r2)
  807d58:	e0bfff17 	ldw	r2,-4(fp)
  807d5c:	10c05d45 	stb	r3,373(r2)
  d->_pg28 = d->_g28;
  807d60:	e0bfff17 	ldw	r2,-4(fp)
  807d64:	10c01fc3 	ldbu	r3,127(r2)
  807d68:	e0bfff17 	ldw	r2,-4(fp)
  807d6c:	10c05d85 	stb	r3,374(r2)
  d->_pg14 = d->_g14;
  807d70:	e0bfff17 	ldw	r2,-4(fp)
  807d74:	10c01d03 	ldbu	r3,116(r2)
  807d78:	e0bfff17 	ldw	r2,-4(fp)
  807d7c:	10c05dc5 	stb	r3,375(r2)
  d->_pg24 = d->_g24;
  807d80:	e0bfff17 	ldw	r2,-4(fp)
  807d84:	10c01ec3 	ldbu	r3,123(r2)
  807d88:	e0bfff17 	ldw	r2,-4(fp)
  807d8c:	10c05e05 	stb	r3,376(r2)
  d->_pg19 = d->_g19;
  807d90:	e0bfff17 	ldw	r2,-4(fp)
  807d94:	10c01e03 	ldbu	r3,120(r2)
  807d98:	e0bfff17 	ldw	r2,-4(fp)
  807d9c:	10c05e45 	stb	r3,377(r2)
  d->_pg103 = d->_g103;
  807da0:	e0bfff17 	ldw	r2,-4(fp)
  807da4:	10c02d03 	ldbu	r3,180(r2)
  807da8:	e0bfff17 	ldw	r2,-4(fp)
  807dac:	10c05e85 	stb	r3,378(r2)
  d->_pg70 = d->_g70;
  807db0:	e0bfff17 	ldw	r2,-4(fp)
  807db4:	10c026c3 	ldbu	r3,155(r2)
  807db8:	e0bfff17 	ldw	r2,-4(fp)
  807dbc:	10c05ec5 	stb	r3,379(r2)
  d->_pg196 = d->_g196;
  807dc0:	e0bfff17 	ldw	r2,-4(fp)
  807dc4:	10c03d43 	ldbu	r3,245(r2)
  807dc8:	e0bfff17 	ldw	r2,-4(fp)
  807dcc:	10c05f05 	stb	r3,380(r2)
  d->_pg83 = d->_g83;
  807dd0:	e0bfff17 	ldw	r2,-4(fp)
  807dd4:	10c02943 	ldbu	r3,165(r2)
  807dd8:	e0bfff17 	ldw	r2,-4(fp)
  807ddc:	10c05f45 	stb	r3,381(r2)
  d->_pg80 = d->_g80;
  807de0:	e0bfff17 	ldw	r2,-4(fp)
  807de4:	10c028c3 	ldbu	r3,163(r2)
  807de8:	e0bfff17 	ldw	r2,-4(fp)
  807dec:	10c05f85 	stb	r3,382(r2)
  d->_pg78 = d->_g78;
  807df0:	e0bfff17 	ldw	r2,-4(fp)
  807df4:	10c02843 	ldbu	r3,161(r2)
  807df8:	e0bfff17 	ldw	r2,-4(fp)
  807dfc:	10c05fc5 	stb	r3,383(r2)
  d->_pg90 = d->_g90;
  807e00:	e0bfff17 	ldw	r2,-4(fp)
  807e04:	10c02a83 	ldbu	r3,170(r2)
  807e08:	e0bfff17 	ldw	r2,-4(fp)
  807e0c:	10c06005 	stb	r3,384(r2)
  d->_pg108 = d->_g108;
  807e10:	e0bfff17 	ldw	r2,-4(fp)
  807e14:	10c02d83 	ldbu	r3,182(r2)
  807e18:	e0bfff17 	ldw	r2,-4(fp)
  807e1c:	10c06045 	stb	r3,385(r2)
  d->_pg107 = d->_g107;
  807e20:	e0bfff17 	ldw	r2,-4(fp)
  807e24:	10c02d43 	ldbu	r3,181(r2)
  807e28:	e0bfff17 	ldw	r2,-4(fp)
  807e2c:	10c06085 	stb	r3,386(r2)
  d->_pg193 = d->_g193;
  807e30:	e0bfff17 	ldw	r2,-4(fp)
  807e34:	10c03cc3 	ldbu	r3,243(r2)
  807e38:	e0bfff17 	ldw	r2,-4(fp)
  807e3c:	10c060c5 	stb	r3,387(r2)
  d->_pg117 = d->_g117;
  807e40:	e0bfff17 	ldw	r2,-4(fp)
  807e44:	10c02f43 	ldbu	r3,189(r2)
  807e48:	e0bfff17 	ldw	r2,-4(fp)
  807e4c:	10c06105 	stb	r3,388(r2)
  d->_pg120 = d->_g120;
  807e50:	e0bfff17 	ldw	r2,-4(fp)
  807e54:	10c02fc3 	ldbu	r3,191(r2)
  807e58:	e0bfff17 	ldw	r2,-4(fp)
  807e5c:	10c06145 	stb	r3,389(r2)
  d->_pg111 = d->_g111;
  807e60:	e0bfff17 	ldw	r2,-4(fp)
  807e64:	10c02e03 	ldbu	r3,184(r2)
  807e68:	e0bfff17 	ldw	r2,-4(fp)
  807e6c:	10c06185 	stb	r3,390(r2)
  d->_pg116 = d->_g116;
  807e70:	e0bfff17 	ldw	r2,-4(fp)
  807e74:	10c02f03 	ldbu	r3,188(r2)
  807e78:	e0bfff17 	ldw	r2,-4(fp)
  807e7c:	10c061c5 	stb	r3,391(r2)
  d->_pg205 = d->_g205;
  807e80:	e0bfff17 	ldw	r2,-4(fp)
  807e84:	10c03f03 	ldbu	r3,252(r2)
  807e88:	e0bfff17 	ldw	r2,-4(fp)
  807e8c:	10c06205 	stb	r3,392(r2)
  d->_pg176 = d->_g176;
  807e90:	e0bfff17 	ldw	r2,-4(fp)
  807e94:	10c039c3 	ldbu	r3,231(r2)
  807e98:	e0bfff17 	ldw	r2,-4(fp)
  807e9c:	10c06245 	stb	r3,393(r2)
  d->_pg184 = d->_g184;
  807ea0:	e0bfff17 	ldw	r2,-4(fp)
  807ea4:	10c03b03 	ldbu	r3,236(r2)
  807ea8:	e0bfff17 	ldw	r2,-4(fp)
  807eac:	10c06285 	stb	r3,394(r2)
  d->_pg202 = d->_g202;
  807eb0:	e0bfff17 	ldw	r2,-4(fp)
  807eb4:	10c03e43 	ldbu	r3,249(r2)
  807eb8:	e0bfff17 	ldw	r2,-4(fp)
  807ebc:	10c062c5 	stb	r3,395(r2)
  d->_pg192_e1 = d->_g192_e1;
  807ec0:	e0bfff17 	ldw	r2,-4(fp)
  807ec4:	10c05903 	ldbu	r3,356(r2)
  807ec8:	e0bfff17 	ldw	r2,-4(fp)
  807ecc:	10c06305 	stb	r3,396(r2)
  d->_pg168 = d->_g168;
  807ed0:	e0bfff17 	ldw	r2,-4(fp)
  807ed4:	10c03843 	ldbu	r3,225(r2)
  807ed8:	e0bfff17 	ldw	r2,-4(fp)
  807edc:	10c06345 	stb	r3,397(r2)
  d->_GO = 0;
  807ee0:	e0bfff17 	ldw	r2,-4(fp)
  807ee4:	10003fc5 	stb	zero,255(r2)
}
  807ee8:	0001883a 	nop
  807eec:	e037883a 	mov	sp,fp
  807ef0:	dfc00117 	ldw	ra,4(sp)
  807ef4:	df000017 	ldw	fp,0(sp)
  807ef8:	dec00204 	addi	sp,sp,8
  807efc:	f800283a 	ret

00807f00 <__floatundidf>:
  807f00:	defffc04 	addi	sp,sp,-16
  807f04:	dc800215 	stw	r18,8(sp)
  807f08:	2025883a 	mov	r18,r4
  807f0c:	2809883a 	mov	r4,r5
  807f10:	dfc00315 	stw	ra,12(sp)
  807f14:	dc400115 	stw	r17,4(sp)
  807f18:	dc000015 	stw	r16,0(sp)
  807f1c:	0809adc0 	call	809adc <__floatunsidf>
  807f20:	000d883a 	mov	r6,zero
  807f24:	01d07c34 	movhi	r7,16880
  807f28:	180b883a 	mov	r5,r3
  807f2c:	1009883a 	mov	r4,r2
  807f30:	08089ec0 	call	8089ec <__muldf3>
  807f34:	9009883a 	mov	r4,r18
  807f38:	1023883a 	mov	r17,r2
  807f3c:	1821883a 	mov	r16,r3
  807f40:	0809adc0 	call	809adc <__floatunsidf>
  807f44:	880d883a 	mov	r6,r17
  807f48:	800f883a 	mov	r7,r16
  807f4c:	1009883a 	mov	r4,r2
  807f50:	180b883a 	mov	r5,r3
  807f54:	0807f700 	call	807f70 <__adddf3>
  807f58:	dfc00317 	ldw	ra,12(sp)
  807f5c:	dc800217 	ldw	r18,8(sp)
  807f60:	dc400117 	ldw	r17,4(sp)
  807f64:	dc000017 	ldw	r16,0(sp)
  807f68:	dec00404 	addi	sp,sp,16
  807f6c:	f800283a 	ret

00807f70 <__adddf3>:
  807f70:	02c00434 	movhi	r11,16
  807f74:	5affffc4 	addi	r11,r11,-1
  807f78:	2806d7fa 	srli	r3,r5,31
  807f7c:	2ad4703a 	and	r10,r5,r11
  807f80:	3ad2703a 	and	r9,r7,r11
  807f84:	3804d53a 	srli	r2,r7,20
  807f88:	3018d77a 	srli	r12,r6,29
  807f8c:	280ad53a 	srli	r5,r5,20
  807f90:	501490fa 	slli	r10,r10,3
  807f94:	2010d77a 	srli	r8,r4,29
  807f98:	481290fa 	slli	r9,r9,3
  807f9c:	380ed7fa 	srli	r7,r7,31
  807fa0:	defffb04 	addi	sp,sp,-20
  807fa4:	dc800215 	stw	r18,8(sp)
  807fa8:	dc400115 	stw	r17,4(sp)
  807fac:	dc000015 	stw	r16,0(sp)
  807fb0:	dfc00415 	stw	ra,16(sp)
  807fb4:	dcc00315 	stw	r19,12(sp)
  807fb8:	1c803fcc 	andi	r18,r3,255
  807fbc:	2c01ffcc 	andi	r16,r5,2047
  807fc0:	5210b03a 	or	r8,r10,r8
  807fc4:	202290fa 	slli	r17,r4,3
  807fc8:	1081ffcc 	andi	r2,r2,2047
  807fcc:	4b12b03a 	or	r9,r9,r12
  807fd0:	300c90fa 	slli	r6,r6,3
  807fd4:	91c07526 	beq	r18,r7,8081ac <__adddf3+0x23c>
  807fd8:	8087c83a 	sub	r3,r16,r2
  807fdc:	00c0ab0e 	bge	zero,r3,80828c <__adddf3+0x31c>
  807fe0:	10002a1e 	bne	r2,zero,80808c <__adddf3+0x11c>
  807fe4:	4984b03a 	or	r2,r9,r6
  807fe8:	1000961e 	bne	r2,zero,808244 <__adddf3+0x2d4>
  807fec:	888001cc 	andi	r2,r17,7
  807ff0:	10000726 	beq	r2,zero,808010 <__adddf3+0xa0>
  807ff4:	888003cc 	andi	r2,r17,15
  807ff8:	00c00104 	movi	r3,4
  807ffc:	10c00426 	beq	r2,r3,808010 <__adddf3+0xa0>
  808000:	88c7883a 	add	r3,r17,r3
  808004:	1c63803a 	cmpltu	r17,r3,r17
  808008:	4451883a 	add	r8,r8,r17
  80800c:	1823883a 	mov	r17,r3
  808010:	4080202c 	andhi	r2,r8,128
  808014:	10005926 	beq	r2,zero,80817c <__adddf3+0x20c>
  808018:	84000044 	addi	r16,r16,1
  80801c:	0081ffc4 	movi	r2,2047
  808020:	8080ba26 	beq	r16,r2,80830c <__adddf3+0x39c>
  808024:	00bfe034 	movhi	r2,65408
  808028:	10bfffc4 	addi	r2,r2,-1
  80802c:	4090703a 	and	r8,r8,r2
  808030:	4004977a 	slli	r2,r8,29
  808034:	4010927a 	slli	r8,r8,9
  808038:	8822d0fa 	srli	r17,r17,3
  80803c:	8401ffcc 	andi	r16,r16,2047
  808040:	4010d33a 	srli	r8,r8,12
  808044:	9007883a 	mov	r3,r18
  808048:	1444b03a 	or	r2,r2,r17
  80804c:	8401ffcc 	andi	r16,r16,2047
  808050:	8020953a 	slli	r16,r16,20
  808054:	18c03fcc 	andi	r3,r3,255
  808058:	01000434 	movhi	r4,16
  80805c:	213fffc4 	addi	r4,r4,-1
  808060:	180697fa 	slli	r3,r3,31
  808064:	4110703a 	and	r8,r8,r4
  808068:	4410b03a 	or	r8,r8,r16
  80806c:	40c6b03a 	or	r3,r8,r3
  808070:	dfc00417 	ldw	ra,16(sp)
  808074:	dcc00317 	ldw	r19,12(sp)
  808078:	dc800217 	ldw	r18,8(sp)
  80807c:	dc400117 	ldw	r17,4(sp)
  808080:	dc000017 	ldw	r16,0(sp)
  808084:	dec00504 	addi	sp,sp,20
  808088:	f800283a 	ret
  80808c:	0081ffc4 	movi	r2,2047
  808090:	80bfd626 	beq	r16,r2,807fec <__alt_mem_onchip_mem+0xff7fffec>
  808094:	4a402034 	orhi	r9,r9,128
  808098:	00800e04 	movi	r2,56
  80809c:	10c09f16 	blt	r2,r3,80831c <__adddf3+0x3ac>
  8080a0:	008007c4 	movi	r2,31
  8080a4:	10c0c216 	blt	r2,r3,8083b0 <__adddf3+0x440>
  8080a8:	00800804 	movi	r2,32
  8080ac:	10c5c83a 	sub	r2,r2,r3
  8080b0:	488a983a 	sll	r5,r9,r2
  8080b4:	30c8d83a 	srl	r4,r6,r3
  8080b8:	3084983a 	sll	r2,r6,r2
  8080bc:	48c6d83a 	srl	r3,r9,r3
  8080c0:	290cb03a 	or	r6,r5,r4
  8080c4:	1004c03a 	cmpne	r2,r2,zero
  8080c8:	308cb03a 	or	r6,r6,r2
  8080cc:	898dc83a 	sub	r6,r17,r6
  8080d0:	89a3803a 	cmpltu	r17,r17,r6
  8080d4:	40d1c83a 	sub	r8,r8,r3
  8080d8:	4451c83a 	sub	r8,r8,r17
  8080dc:	3023883a 	mov	r17,r6
  8080e0:	4080202c 	andhi	r2,r8,128
  8080e4:	10002326 	beq	r2,zero,808174 <__adddf3+0x204>
  8080e8:	04c02034 	movhi	r19,128
  8080ec:	9cffffc4 	addi	r19,r19,-1
  8080f0:	44e6703a 	and	r19,r8,r19
  8080f4:	98007626 	beq	r19,zero,8082d0 <__adddf3+0x360>
  8080f8:	9809883a 	mov	r4,r19
  8080fc:	0809b840 	call	809b84 <__clzsi2>
  808100:	10fffe04 	addi	r3,r2,-8
  808104:	010007c4 	movi	r4,31
  808108:	20c07716 	blt	r4,r3,8082e8 <__adddf3+0x378>
  80810c:	00800804 	movi	r2,32
  808110:	10c5c83a 	sub	r2,r2,r3
  808114:	8884d83a 	srl	r2,r17,r2
  808118:	98d0983a 	sll	r8,r19,r3
  80811c:	88e2983a 	sll	r17,r17,r3
  808120:	1204b03a 	or	r2,r2,r8
  808124:	1c007416 	blt	r3,r16,8082f8 <__adddf3+0x388>
  808128:	1c21c83a 	sub	r16,r3,r16
  80812c:	82000044 	addi	r8,r16,1
  808130:	00c007c4 	movi	r3,31
  808134:	1a009116 	blt	r3,r8,80837c <__adddf3+0x40c>
  808138:	00c00804 	movi	r3,32
  80813c:	1a07c83a 	sub	r3,r3,r8
  808140:	8a08d83a 	srl	r4,r17,r8
  808144:	88e2983a 	sll	r17,r17,r3
  808148:	10c6983a 	sll	r3,r2,r3
  80814c:	1210d83a 	srl	r8,r2,r8
  808150:	8804c03a 	cmpne	r2,r17,zero
  808154:	1906b03a 	or	r3,r3,r4
  808158:	18a2b03a 	or	r17,r3,r2
  80815c:	0021883a 	mov	r16,zero
  808160:	003fa206 	br	807fec <__alt_mem_onchip_mem+0xff7fffec>
  808164:	1890b03a 	or	r8,r3,r2
  808168:	40017d26 	beq	r8,zero,808760 <__adddf3+0x7f0>
  80816c:	1011883a 	mov	r8,r2
  808170:	1823883a 	mov	r17,r3
  808174:	888001cc 	andi	r2,r17,7
  808178:	103f9e1e 	bne	r2,zero,807ff4 <__alt_mem_onchip_mem+0xff7ffff4>
  80817c:	4004977a 	slli	r2,r8,29
  808180:	8822d0fa 	srli	r17,r17,3
  808184:	4010d0fa 	srli	r8,r8,3
  808188:	9007883a 	mov	r3,r18
  80818c:	1444b03a 	or	r2,r2,r17
  808190:	0101ffc4 	movi	r4,2047
  808194:	81002426 	beq	r16,r4,808228 <__adddf3+0x2b8>
  808198:	8120703a 	and	r16,r16,r4
  80819c:	01000434 	movhi	r4,16
  8081a0:	213fffc4 	addi	r4,r4,-1
  8081a4:	4110703a 	and	r8,r8,r4
  8081a8:	003fa806 	br	80804c <__alt_mem_onchip_mem+0xff80004c>
  8081ac:	8089c83a 	sub	r4,r16,r2
  8081b0:	01005e0e 	bge	zero,r4,80832c <__adddf3+0x3bc>
  8081b4:	10002b26 	beq	r2,zero,808264 <__adddf3+0x2f4>
  8081b8:	0081ffc4 	movi	r2,2047
  8081bc:	80bf8b26 	beq	r16,r2,807fec <__alt_mem_onchip_mem+0xff7fffec>
  8081c0:	4a402034 	orhi	r9,r9,128
  8081c4:	00800e04 	movi	r2,56
  8081c8:	1100a40e 	bge	r2,r4,80845c <__adddf3+0x4ec>
  8081cc:	498cb03a 	or	r6,r9,r6
  8081d0:	300ac03a 	cmpne	r5,r6,zero
  8081d4:	0013883a 	mov	r9,zero
  8081d8:	2c4b883a 	add	r5,r5,r17
  8081dc:	2c63803a 	cmpltu	r17,r5,r17
  8081e0:	4a11883a 	add	r8,r9,r8
  8081e4:	8a11883a 	add	r8,r17,r8
  8081e8:	2823883a 	mov	r17,r5
  8081ec:	4080202c 	andhi	r2,r8,128
  8081f0:	103fe026 	beq	r2,zero,808174 <__alt_mem_onchip_mem+0xff800174>
  8081f4:	84000044 	addi	r16,r16,1
  8081f8:	0081ffc4 	movi	r2,2047
  8081fc:	8080d226 	beq	r16,r2,808548 <__adddf3+0x5d8>
  808200:	00bfe034 	movhi	r2,65408
  808204:	10bfffc4 	addi	r2,r2,-1
  808208:	4090703a 	and	r8,r8,r2
  80820c:	880ad07a 	srli	r5,r17,1
  808210:	400897fa 	slli	r4,r8,31
  808214:	88c0004c 	andi	r3,r17,1
  808218:	28e2b03a 	or	r17,r5,r3
  80821c:	4010d07a 	srli	r8,r8,1
  808220:	2462b03a 	or	r17,r4,r17
  808224:	003f7106 	br	807fec <__alt_mem_onchip_mem+0xff7fffec>
  808228:	4088b03a 	or	r4,r8,r2
  80822c:	20014526 	beq	r4,zero,808744 <__adddf3+0x7d4>
  808230:	01000434 	movhi	r4,16
  808234:	42000234 	orhi	r8,r8,8
  808238:	213fffc4 	addi	r4,r4,-1
  80823c:	4110703a 	and	r8,r8,r4
  808240:	003f8206 	br	80804c <__alt_mem_onchip_mem+0xff80004c>
  808244:	18ffffc4 	addi	r3,r3,-1
  808248:	1800491e 	bne	r3,zero,808370 <__adddf3+0x400>
  80824c:	898bc83a 	sub	r5,r17,r6
  808250:	8963803a 	cmpltu	r17,r17,r5
  808254:	4251c83a 	sub	r8,r8,r9
  808258:	4451c83a 	sub	r8,r8,r17
  80825c:	2823883a 	mov	r17,r5
  808260:	003f9f06 	br	8080e0 <__alt_mem_onchip_mem+0xff8000e0>
  808264:	4984b03a 	or	r2,r9,r6
  808268:	103f6026 	beq	r2,zero,807fec <__alt_mem_onchip_mem+0xff7fffec>
  80826c:	213fffc4 	addi	r4,r4,-1
  808270:	2000931e 	bne	r4,zero,8084c0 <__adddf3+0x550>
  808274:	898d883a 	add	r6,r17,r6
  808278:	3463803a 	cmpltu	r17,r6,r17
  80827c:	4251883a 	add	r8,r8,r9
  808280:	8a11883a 	add	r8,r17,r8
  808284:	3023883a 	mov	r17,r6
  808288:	003fd806 	br	8081ec <__alt_mem_onchip_mem+0xff8001ec>
  80828c:	1800541e 	bne	r3,zero,8083e0 <__adddf3+0x470>
  808290:	80800044 	addi	r2,r16,1
  808294:	1081ffcc 	andi	r2,r2,2047
  808298:	00c00044 	movi	r3,1
  80829c:	1880a00e 	bge	r3,r2,808520 <__adddf3+0x5b0>
  8082a0:	8989c83a 	sub	r4,r17,r6
  8082a4:	8905803a 	cmpltu	r2,r17,r4
  8082a8:	4267c83a 	sub	r19,r8,r9
  8082ac:	98a7c83a 	sub	r19,r19,r2
  8082b0:	9880202c 	andhi	r2,r19,128
  8082b4:	10006326 	beq	r2,zero,808444 <__adddf3+0x4d4>
  8082b8:	3463c83a 	sub	r17,r6,r17
  8082bc:	4a07c83a 	sub	r3,r9,r8
  8082c0:	344d803a 	cmpltu	r6,r6,r17
  8082c4:	19a7c83a 	sub	r19,r3,r6
  8082c8:	3825883a 	mov	r18,r7
  8082cc:	983f8a1e 	bne	r19,zero,8080f8 <__alt_mem_onchip_mem+0xff8000f8>
  8082d0:	8809883a 	mov	r4,r17
  8082d4:	0809b840 	call	809b84 <__clzsi2>
  8082d8:	10800804 	addi	r2,r2,32
  8082dc:	10fffe04 	addi	r3,r2,-8
  8082e0:	010007c4 	movi	r4,31
  8082e4:	20ff890e 	bge	r4,r3,80810c <__alt_mem_onchip_mem+0xff80010c>
  8082e8:	10bff604 	addi	r2,r2,-40
  8082ec:	8884983a 	sll	r2,r17,r2
  8082f0:	0023883a 	mov	r17,zero
  8082f4:	1c3f8c0e 	bge	r3,r16,808128 <__alt_mem_onchip_mem+0xff800128>
  8082f8:	023fe034 	movhi	r8,65408
  8082fc:	423fffc4 	addi	r8,r8,-1
  808300:	80e1c83a 	sub	r16,r16,r3
  808304:	1210703a 	and	r8,r2,r8
  808308:	003f3806 	br	807fec <__alt_mem_onchip_mem+0xff7fffec>
  80830c:	9007883a 	mov	r3,r18
  808310:	0011883a 	mov	r8,zero
  808314:	0005883a 	mov	r2,zero
  808318:	003f4c06 	br	80804c <__alt_mem_onchip_mem+0xff80004c>
  80831c:	498cb03a 	or	r6,r9,r6
  808320:	300cc03a 	cmpne	r6,r6,zero
  808324:	0007883a 	mov	r3,zero
  808328:	003f6806 	br	8080cc <__alt_mem_onchip_mem+0xff8000cc>
  80832c:	20009c1e 	bne	r4,zero,8085a0 <__adddf3+0x630>
  808330:	80800044 	addi	r2,r16,1
  808334:	1141ffcc 	andi	r5,r2,2047
  808338:	01000044 	movi	r4,1
  80833c:	2140670e 	bge	r4,r5,8084dc <__adddf3+0x56c>
  808340:	0101ffc4 	movi	r4,2047
  808344:	11007f26 	beq	r2,r4,808544 <__adddf3+0x5d4>
  808348:	898d883a 	add	r6,r17,r6
  80834c:	4247883a 	add	r3,r8,r9
  808350:	3451803a 	cmpltu	r8,r6,r17
  808354:	40d1883a 	add	r8,r8,r3
  808358:	402297fa 	slli	r17,r8,31
  80835c:	300cd07a 	srli	r6,r6,1
  808360:	4010d07a 	srli	r8,r8,1
  808364:	1021883a 	mov	r16,r2
  808368:	89a2b03a 	or	r17,r17,r6
  80836c:	003f1f06 	br	807fec <__alt_mem_onchip_mem+0xff7fffec>
  808370:	0081ffc4 	movi	r2,2047
  808374:	80bf481e 	bne	r16,r2,808098 <__alt_mem_onchip_mem+0xff800098>
  808378:	003f1c06 	br	807fec <__alt_mem_onchip_mem+0xff7fffec>
  80837c:	843ff844 	addi	r16,r16,-31
  808380:	01000804 	movi	r4,32
  808384:	1406d83a 	srl	r3,r2,r16
  808388:	41005026 	beq	r8,r4,8084cc <__adddf3+0x55c>
  80838c:	01001004 	movi	r4,64
  808390:	2211c83a 	sub	r8,r4,r8
  808394:	1204983a 	sll	r2,r2,r8
  808398:	88a2b03a 	or	r17,r17,r2
  80839c:	8822c03a 	cmpne	r17,r17,zero
  8083a0:	1c62b03a 	or	r17,r3,r17
  8083a4:	0011883a 	mov	r8,zero
  8083a8:	0021883a 	mov	r16,zero
  8083ac:	003f7106 	br	808174 <__alt_mem_onchip_mem+0xff800174>
  8083b0:	193ff804 	addi	r4,r3,-32
  8083b4:	00800804 	movi	r2,32
  8083b8:	4908d83a 	srl	r4,r9,r4
  8083bc:	18804526 	beq	r3,r2,8084d4 <__adddf3+0x564>
  8083c0:	00801004 	movi	r2,64
  8083c4:	10c5c83a 	sub	r2,r2,r3
  8083c8:	4886983a 	sll	r3,r9,r2
  8083cc:	198cb03a 	or	r6,r3,r6
  8083d0:	300cc03a 	cmpne	r6,r6,zero
  8083d4:	218cb03a 	or	r6,r4,r6
  8083d8:	0007883a 	mov	r3,zero
  8083dc:	003f3b06 	br	8080cc <__alt_mem_onchip_mem+0xff8000cc>
  8083e0:	80002a26 	beq	r16,zero,80848c <__adddf3+0x51c>
  8083e4:	0101ffc4 	movi	r4,2047
  8083e8:	11006826 	beq	r2,r4,80858c <__adddf3+0x61c>
  8083ec:	00c7c83a 	sub	r3,zero,r3
  8083f0:	42002034 	orhi	r8,r8,128
  8083f4:	01000e04 	movi	r4,56
  8083f8:	20c07c16 	blt	r4,r3,8085ec <__adddf3+0x67c>
  8083fc:	010007c4 	movi	r4,31
  808400:	20c0da16 	blt	r4,r3,80876c <__adddf3+0x7fc>
  808404:	01000804 	movi	r4,32
  808408:	20c9c83a 	sub	r4,r4,r3
  80840c:	4114983a 	sll	r10,r8,r4
  808410:	88cad83a 	srl	r5,r17,r3
  808414:	8908983a 	sll	r4,r17,r4
  808418:	40c6d83a 	srl	r3,r8,r3
  80841c:	5162b03a 	or	r17,r10,r5
  808420:	2008c03a 	cmpne	r4,r4,zero
  808424:	8922b03a 	or	r17,r17,r4
  808428:	3463c83a 	sub	r17,r6,r17
  80842c:	48c7c83a 	sub	r3,r9,r3
  808430:	344d803a 	cmpltu	r6,r6,r17
  808434:	1991c83a 	sub	r8,r3,r6
  808438:	1021883a 	mov	r16,r2
  80843c:	3825883a 	mov	r18,r7
  808440:	003f2706 	br	8080e0 <__alt_mem_onchip_mem+0xff8000e0>
  808444:	24d0b03a 	or	r8,r4,r19
  808448:	40001b1e 	bne	r8,zero,8084b8 <__adddf3+0x548>
  80844c:	0005883a 	mov	r2,zero
  808450:	0007883a 	mov	r3,zero
  808454:	0021883a 	mov	r16,zero
  808458:	003f4d06 	br	808190 <__alt_mem_onchip_mem+0xff800190>
  80845c:	008007c4 	movi	r2,31
  808460:	11003c16 	blt	r2,r4,808554 <__adddf3+0x5e4>
  808464:	00800804 	movi	r2,32
  808468:	1105c83a 	sub	r2,r2,r4
  80846c:	488e983a 	sll	r7,r9,r2
  808470:	310ad83a 	srl	r5,r6,r4
  808474:	3084983a 	sll	r2,r6,r2
  808478:	4912d83a 	srl	r9,r9,r4
  80847c:	394ab03a 	or	r5,r7,r5
  808480:	1004c03a 	cmpne	r2,r2,zero
  808484:	288ab03a 	or	r5,r5,r2
  808488:	003f5306 	br	8081d8 <__alt_mem_onchip_mem+0xff8001d8>
  80848c:	4448b03a 	or	r4,r8,r17
  808490:	20003e26 	beq	r4,zero,80858c <__adddf3+0x61c>
  808494:	00c6303a 	nor	r3,zero,r3
  808498:	18003a1e 	bne	r3,zero,808584 <__adddf3+0x614>
  80849c:	3463c83a 	sub	r17,r6,r17
  8084a0:	4a07c83a 	sub	r3,r9,r8
  8084a4:	344d803a 	cmpltu	r6,r6,r17
  8084a8:	1991c83a 	sub	r8,r3,r6
  8084ac:	1021883a 	mov	r16,r2
  8084b0:	3825883a 	mov	r18,r7
  8084b4:	003f0a06 	br	8080e0 <__alt_mem_onchip_mem+0xff8000e0>
  8084b8:	2023883a 	mov	r17,r4
  8084bc:	003f0d06 	br	8080f4 <__alt_mem_onchip_mem+0xff8000f4>
  8084c0:	0081ffc4 	movi	r2,2047
  8084c4:	80bf3f1e 	bne	r16,r2,8081c4 <__alt_mem_onchip_mem+0xff8001c4>
  8084c8:	003ec806 	br	807fec <__alt_mem_onchip_mem+0xff7fffec>
  8084cc:	0005883a 	mov	r2,zero
  8084d0:	003fb106 	br	808398 <__alt_mem_onchip_mem+0xff800398>
  8084d4:	0007883a 	mov	r3,zero
  8084d8:	003fbc06 	br	8083cc <__alt_mem_onchip_mem+0xff8003cc>
  8084dc:	4444b03a 	or	r2,r8,r17
  8084e0:	8000871e 	bne	r16,zero,808700 <__adddf3+0x790>
  8084e4:	1000ba26 	beq	r2,zero,8087d0 <__adddf3+0x860>
  8084e8:	4984b03a 	or	r2,r9,r6
  8084ec:	103ebf26 	beq	r2,zero,807fec <__alt_mem_onchip_mem+0xff7fffec>
  8084f0:	8985883a 	add	r2,r17,r6
  8084f4:	4247883a 	add	r3,r8,r9
  8084f8:	1451803a 	cmpltu	r8,r2,r17
  8084fc:	40d1883a 	add	r8,r8,r3
  808500:	40c0202c 	andhi	r3,r8,128
  808504:	1023883a 	mov	r17,r2
  808508:	183f1a26 	beq	r3,zero,808174 <__alt_mem_onchip_mem+0xff800174>
  80850c:	00bfe034 	movhi	r2,65408
  808510:	10bfffc4 	addi	r2,r2,-1
  808514:	2021883a 	mov	r16,r4
  808518:	4090703a 	and	r8,r8,r2
  80851c:	003eb306 	br	807fec <__alt_mem_onchip_mem+0xff7fffec>
  808520:	4444b03a 	or	r2,r8,r17
  808524:	8000291e 	bne	r16,zero,8085cc <__adddf3+0x65c>
  808528:	10004b1e 	bne	r2,zero,808658 <__adddf3+0x6e8>
  80852c:	4990b03a 	or	r8,r9,r6
  808530:	40008b26 	beq	r8,zero,808760 <__adddf3+0x7f0>
  808534:	4811883a 	mov	r8,r9
  808538:	3023883a 	mov	r17,r6
  80853c:	3825883a 	mov	r18,r7
  808540:	003eaa06 	br	807fec <__alt_mem_onchip_mem+0xff7fffec>
  808544:	1021883a 	mov	r16,r2
  808548:	0011883a 	mov	r8,zero
  80854c:	0005883a 	mov	r2,zero
  808550:	003f0f06 	br	808190 <__alt_mem_onchip_mem+0xff800190>
  808554:	217ff804 	addi	r5,r4,-32
  808558:	00800804 	movi	r2,32
  80855c:	494ad83a 	srl	r5,r9,r5
  808560:	20807d26 	beq	r4,r2,808758 <__adddf3+0x7e8>
  808564:	00801004 	movi	r2,64
  808568:	1109c83a 	sub	r4,r2,r4
  80856c:	4912983a 	sll	r9,r9,r4
  808570:	498cb03a 	or	r6,r9,r6
  808574:	300cc03a 	cmpne	r6,r6,zero
  808578:	298ab03a 	or	r5,r5,r6
  80857c:	0013883a 	mov	r9,zero
  808580:	003f1506 	br	8081d8 <__alt_mem_onchip_mem+0xff8001d8>
  808584:	0101ffc4 	movi	r4,2047
  808588:	113f9a1e 	bne	r2,r4,8083f4 <__alt_mem_onchip_mem+0xff8003f4>
  80858c:	4811883a 	mov	r8,r9
  808590:	3023883a 	mov	r17,r6
  808594:	1021883a 	mov	r16,r2
  808598:	3825883a 	mov	r18,r7
  80859c:	003e9306 	br	807fec <__alt_mem_onchip_mem+0xff7fffec>
  8085a0:	8000161e 	bne	r16,zero,8085fc <__adddf3+0x68c>
  8085a4:	444ab03a 	or	r5,r8,r17
  8085a8:	28005126 	beq	r5,zero,8086f0 <__adddf3+0x780>
  8085ac:	0108303a 	nor	r4,zero,r4
  8085b0:	20004d1e 	bne	r4,zero,8086e8 <__adddf3+0x778>
  8085b4:	89a3883a 	add	r17,r17,r6
  8085b8:	4253883a 	add	r9,r8,r9
  8085bc:	898d803a 	cmpltu	r6,r17,r6
  8085c0:	3251883a 	add	r8,r6,r9
  8085c4:	1021883a 	mov	r16,r2
  8085c8:	003f0806 	br	8081ec <__alt_mem_onchip_mem+0xff8001ec>
  8085cc:	1000301e 	bne	r2,zero,808690 <__adddf3+0x720>
  8085d0:	4984b03a 	or	r2,r9,r6
  8085d4:	10007126 	beq	r2,zero,80879c <__adddf3+0x82c>
  8085d8:	4811883a 	mov	r8,r9
  8085dc:	3023883a 	mov	r17,r6
  8085e0:	3825883a 	mov	r18,r7
  8085e4:	0401ffc4 	movi	r16,2047
  8085e8:	003e8006 	br	807fec <__alt_mem_onchip_mem+0xff7fffec>
  8085ec:	4462b03a 	or	r17,r8,r17
  8085f0:	8822c03a 	cmpne	r17,r17,zero
  8085f4:	0007883a 	mov	r3,zero
  8085f8:	003f8b06 	br	808428 <__alt_mem_onchip_mem+0xff800428>
  8085fc:	0141ffc4 	movi	r5,2047
  808600:	11403b26 	beq	r2,r5,8086f0 <__adddf3+0x780>
  808604:	0109c83a 	sub	r4,zero,r4
  808608:	42002034 	orhi	r8,r8,128
  80860c:	01400e04 	movi	r5,56
  808610:	29006716 	blt	r5,r4,8087b0 <__adddf3+0x840>
  808614:	014007c4 	movi	r5,31
  808618:	29007016 	blt	r5,r4,8087dc <__adddf3+0x86c>
  80861c:	01400804 	movi	r5,32
  808620:	290bc83a 	sub	r5,r5,r4
  808624:	4154983a 	sll	r10,r8,r5
  808628:	890ed83a 	srl	r7,r17,r4
  80862c:	894a983a 	sll	r5,r17,r5
  808630:	4108d83a 	srl	r4,r8,r4
  808634:	51e2b03a 	or	r17,r10,r7
  808638:	280ac03a 	cmpne	r5,r5,zero
  80863c:	8962b03a 	or	r17,r17,r5
  808640:	89a3883a 	add	r17,r17,r6
  808644:	2253883a 	add	r9,r4,r9
  808648:	898d803a 	cmpltu	r6,r17,r6
  80864c:	3251883a 	add	r8,r6,r9
  808650:	1021883a 	mov	r16,r2
  808654:	003ee506 	br	8081ec <__alt_mem_onchip_mem+0xff8001ec>
  808658:	4984b03a 	or	r2,r9,r6
  80865c:	103e6326 	beq	r2,zero,807fec <__alt_mem_onchip_mem+0xff7fffec>
  808660:	8987c83a 	sub	r3,r17,r6
  808664:	88c9803a 	cmpltu	r4,r17,r3
  808668:	4245c83a 	sub	r2,r8,r9
  80866c:	1105c83a 	sub	r2,r2,r4
  808670:	1100202c 	andhi	r4,r2,128
  808674:	203ebb26 	beq	r4,zero,808164 <__alt_mem_onchip_mem+0xff800164>
  808678:	3463c83a 	sub	r17,r6,r17
  80867c:	4a07c83a 	sub	r3,r9,r8
  808680:	344d803a 	cmpltu	r6,r6,r17
  808684:	1991c83a 	sub	r8,r3,r6
  808688:	3825883a 	mov	r18,r7
  80868c:	003e5706 	br	807fec <__alt_mem_onchip_mem+0xff7fffec>
  808690:	4984b03a 	or	r2,r9,r6
  808694:	10002e26 	beq	r2,zero,808750 <__adddf3+0x7e0>
  808698:	4004d0fa 	srli	r2,r8,3
  80869c:	8822d0fa 	srli	r17,r17,3
  8086a0:	4010977a 	slli	r8,r8,29
  8086a4:	10c0022c 	andhi	r3,r2,8
  8086a8:	4462b03a 	or	r17,r8,r17
  8086ac:	18000826 	beq	r3,zero,8086d0 <__adddf3+0x760>
  8086b0:	4808d0fa 	srli	r4,r9,3
  8086b4:	20c0022c 	andhi	r3,r4,8
  8086b8:	1800051e 	bne	r3,zero,8086d0 <__adddf3+0x760>
  8086bc:	300cd0fa 	srli	r6,r6,3
  8086c0:	4806977a 	slli	r3,r9,29
  8086c4:	2005883a 	mov	r2,r4
  8086c8:	3825883a 	mov	r18,r7
  8086cc:	19a2b03a 	or	r17,r3,r6
  8086d0:	8810d77a 	srli	r8,r17,29
  8086d4:	100490fa 	slli	r2,r2,3
  8086d8:	882290fa 	slli	r17,r17,3
  8086dc:	0401ffc4 	movi	r16,2047
  8086e0:	4090b03a 	or	r8,r8,r2
  8086e4:	003e4106 	br	807fec <__alt_mem_onchip_mem+0xff7fffec>
  8086e8:	0141ffc4 	movi	r5,2047
  8086ec:	117fc71e 	bne	r2,r5,80860c <__alt_mem_onchip_mem+0xff80060c>
  8086f0:	4811883a 	mov	r8,r9
  8086f4:	3023883a 	mov	r17,r6
  8086f8:	1021883a 	mov	r16,r2
  8086fc:	003e3b06 	br	807fec <__alt_mem_onchip_mem+0xff7fffec>
  808700:	10002f26 	beq	r2,zero,8087c0 <__adddf3+0x850>
  808704:	4984b03a 	or	r2,r9,r6
  808708:	10001126 	beq	r2,zero,808750 <__adddf3+0x7e0>
  80870c:	4004d0fa 	srli	r2,r8,3
  808710:	8822d0fa 	srli	r17,r17,3
  808714:	4010977a 	slli	r8,r8,29
  808718:	10c0022c 	andhi	r3,r2,8
  80871c:	4462b03a 	or	r17,r8,r17
  808720:	183feb26 	beq	r3,zero,8086d0 <__alt_mem_onchip_mem+0xff8006d0>
  808724:	4808d0fa 	srli	r4,r9,3
  808728:	20c0022c 	andhi	r3,r4,8
  80872c:	183fe81e 	bne	r3,zero,8086d0 <__alt_mem_onchip_mem+0xff8006d0>
  808730:	300cd0fa 	srli	r6,r6,3
  808734:	4806977a 	slli	r3,r9,29
  808738:	2005883a 	mov	r2,r4
  80873c:	19a2b03a 	or	r17,r3,r6
  808740:	003fe306 	br	8086d0 <__alt_mem_onchip_mem+0xff8006d0>
  808744:	0011883a 	mov	r8,zero
  808748:	0005883a 	mov	r2,zero
  80874c:	003e3f06 	br	80804c <__alt_mem_onchip_mem+0xff80004c>
  808750:	0401ffc4 	movi	r16,2047
  808754:	003e2506 	br	807fec <__alt_mem_onchip_mem+0xff7fffec>
  808758:	0013883a 	mov	r9,zero
  80875c:	003f8406 	br	808570 <__alt_mem_onchip_mem+0xff800570>
  808760:	0005883a 	mov	r2,zero
  808764:	0007883a 	mov	r3,zero
  808768:	003e8906 	br	808190 <__alt_mem_onchip_mem+0xff800190>
  80876c:	197ff804 	addi	r5,r3,-32
  808770:	01000804 	movi	r4,32
  808774:	414ad83a 	srl	r5,r8,r5
  808778:	19002426 	beq	r3,r4,80880c <__adddf3+0x89c>
  80877c:	01001004 	movi	r4,64
  808780:	20c7c83a 	sub	r3,r4,r3
  808784:	40c6983a 	sll	r3,r8,r3
  808788:	1c46b03a 	or	r3,r3,r17
  80878c:	1806c03a 	cmpne	r3,r3,zero
  808790:	28e2b03a 	or	r17,r5,r3
  808794:	0007883a 	mov	r3,zero
  808798:	003f2306 	br	808428 <__alt_mem_onchip_mem+0xff800428>
  80879c:	0007883a 	mov	r3,zero
  8087a0:	5811883a 	mov	r8,r11
  8087a4:	00bfffc4 	movi	r2,-1
  8087a8:	0401ffc4 	movi	r16,2047
  8087ac:	003e7806 	br	808190 <__alt_mem_onchip_mem+0xff800190>
  8087b0:	4462b03a 	or	r17,r8,r17
  8087b4:	8822c03a 	cmpne	r17,r17,zero
  8087b8:	0009883a 	mov	r4,zero
  8087bc:	003fa006 	br	808640 <__alt_mem_onchip_mem+0xff800640>
  8087c0:	4811883a 	mov	r8,r9
  8087c4:	3023883a 	mov	r17,r6
  8087c8:	0401ffc4 	movi	r16,2047
  8087cc:	003e0706 	br	807fec <__alt_mem_onchip_mem+0xff7fffec>
  8087d0:	4811883a 	mov	r8,r9
  8087d4:	3023883a 	mov	r17,r6
  8087d8:	003e0406 	br	807fec <__alt_mem_onchip_mem+0xff7fffec>
  8087dc:	21fff804 	addi	r7,r4,-32
  8087e0:	01400804 	movi	r5,32
  8087e4:	41ced83a 	srl	r7,r8,r7
  8087e8:	21400a26 	beq	r4,r5,808814 <__adddf3+0x8a4>
  8087ec:	01401004 	movi	r5,64
  8087f0:	2909c83a 	sub	r4,r5,r4
  8087f4:	4108983a 	sll	r4,r8,r4
  8087f8:	2448b03a 	or	r4,r4,r17
  8087fc:	2008c03a 	cmpne	r4,r4,zero
  808800:	3922b03a 	or	r17,r7,r4
  808804:	0009883a 	mov	r4,zero
  808808:	003f8d06 	br	808640 <__alt_mem_onchip_mem+0xff800640>
  80880c:	0007883a 	mov	r3,zero
  808810:	003fdd06 	br	808788 <__alt_mem_onchip_mem+0xff800788>
  808814:	0009883a 	mov	r4,zero
  808818:	003ff706 	br	8087f8 <__alt_mem_onchip_mem+0xff8007f8>

0080881c <__gedf2>:
  80881c:	2804d53a 	srli	r2,r5,20
  808820:	3806d53a 	srli	r3,r7,20
  808824:	02000434 	movhi	r8,16
  808828:	423fffc4 	addi	r8,r8,-1
  80882c:	1081ffcc 	andi	r2,r2,2047
  808830:	0241ffc4 	movi	r9,2047
  808834:	2a14703a 	and	r10,r5,r8
  808838:	18c1ffcc 	andi	r3,r3,2047
  80883c:	3a10703a 	and	r8,r7,r8
  808840:	280ad7fa 	srli	r5,r5,31
  808844:	380ed7fa 	srli	r7,r7,31
  808848:	12401d26 	beq	r2,r9,8088c0 <__gedf2+0xa4>
  80884c:	0241ffc4 	movi	r9,2047
  808850:	1a401226 	beq	r3,r9,80889c <__gedf2+0x80>
  808854:	1000081e 	bne	r2,zero,808878 <__gedf2+0x5c>
  808858:	2296b03a 	or	r11,r4,r10
  80885c:	5813003a 	cmpeq	r9,r11,zero
  808860:	1800091e 	bne	r3,zero,808888 <__gedf2+0x6c>
  808864:	3218b03a 	or	r12,r6,r8
  808868:	6000071e 	bne	r12,zero,808888 <__gedf2+0x6c>
  80886c:	0005883a 	mov	r2,zero
  808870:	5800101e 	bne	r11,zero,8088b4 <__gedf2+0x98>
  808874:	f800283a 	ret
  808878:	18000c1e 	bne	r3,zero,8088ac <__gedf2+0x90>
  80887c:	3212b03a 	or	r9,r6,r8
  808880:	48000c26 	beq	r9,zero,8088b4 <__gedf2+0x98>
  808884:	0013883a 	mov	r9,zero
  808888:	39c03fcc 	andi	r7,r7,255
  80888c:	48000826 	beq	r9,zero,8088b0 <__gedf2+0x94>
  808890:	38000926 	beq	r7,zero,8088b8 <__gedf2+0x9c>
  808894:	00800044 	movi	r2,1
  808898:	f800283a 	ret
  80889c:	3212b03a 	or	r9,r6,r8
  8088a0:	483fec26 	beq	r9,zero,808854 <__alt_mem_onchip_mem+0xff800854>
  8088a4:	00bfff84 	movi	r2,-2
  8088a8:	f800283a 	ret
  8088ac:	39c03fcc 	andi	r7,r7,255
  8088b0:	29c00626 	beq	r5,r7,8088cc <__gedf2+0xb0>
  8088b4:	283ff726 	beq	r5,zero,808894 <__alt_mem_onchip_mem+0xff800894>
  8088b8:	00bfffc4 	movi	r2,-1
  8088bc:	f800283a 	ret
  8088c0:	2292b03a 	or	r9,r4,r10
  8088c4:	483fe126 	beq	r9,zero,80884c <__alt_mem_onchip_mem+0xff80084c>
  8088c8:	003ff606 	br	8088a4 <__alt_mem_onchip_mem+0xff8008a4>
  8088cc:	18bff916 	blt	r3,r2,8088b4 <__alt_mem_onchip_mem+0xff8008b4>
  8088d0:	10c00316 	blt	r2,r3,8088e0 <__gedf2+0xc4>
  8088d4:	42bff736 	bltu	r8,r10,8088b4 <__alt_mem_onchip_mem+0xff8008b4>
  8088d8:	52000326 	beq	r10,r8,8088e8 <__gedf2+0xcc>
  8088dc:	5200042e 	bgeu	r10,r8,8088f0 <__gedf2+0xd4>
  8088e0:	283fec1e 	bne	r5,zero,808894 <__alt_mem_onchip_mem+0xff800894>
  8088e4:	003ff406 	br	8088b8 <__alt_mem_onchip_mem+0xff8008b8>
  8088e8:	313ff236 	bltu	r6,r4,8088b4 <__alt_mem_onchip_mem+0xff8008b4>
  8088ec:	21bffc36 	bltu	r4,r6,8088e0 <__alt_mem_onchip_mem+0xff8008e0>
  8088f0:	0005883a 	mov	r2,zero
  8088f4:	f800283a 	ret

008088f8 <__ledf2>:
  8088f8:	2804d53a 	srli	r2,r5,20
  8088fc:	3810d53a 	srli	r8,r7,20
  808900:	00c00434 	movhi	r3,16
  808904:	18ffffc4 	addi	r3,r3,-1
  808908:	1081ffcc 	andi	r2,r2,2047
  80890c:	0241ffc4 	movi	r9,2047
  808910:	28d4703a 	and	r10,r5,r3
  808914:	4201ffcc 	andi	r8,r8,2047
  808918:	38c6703a 	and	r3,r7,r3
  80891c:	280ad7fa 	srli	r5,r5,31
  808920:	380ed7fa 	srli	r7,r7,31
  808924:	12401f26 	beq	r2,r9,8089a4 <__ledf2+0xac>
  808928:	0241ffc4 	movi	r9,2047
  80892c:	42401426 	beq	r8,r9,808980 <__ledf2+0x88>
  808930:	1000091e 	bne	r2,zero,808958 <__ledf2+0x60>
  808934:	2296b03a 	or	r11,r4,r10
  808938:	5813003a 	cmpeq	r9,r11,zero
  80893c:	29403fcc 	andi	r5,r5,255
  808940:	40000a1e 	bne	r8,zero,80896c <__ledf2+0x74>
  808944:	30d8b03a 	or	r12,r6,r3
  808948:	6000081e 	bne	r12,zero,80896c <__ledf2+0x74>
  80894c:	0005883a 	mov	r2,zero
  808950:	5800111e 	bne	r11,zero,808998 <__ledf2+0xa0>
  808954:	f800283a 	ret
  808958:	29403fcc 	andi	r5,r5,255
  80895c:	40000c1e 	bne	r8,zero,808990 <__ledf2+0x98>
  808960:	30d2b03a 	or	r9,r6,r3
  808964:	48000c26 	beq	r9,zero,808998 <__ledf2+0xa0>
  808968:	0013883a 	mov	r9,zero
  80896c:	39c03fcc 	andi	r7,r7,255
  808970:	48000826 	beq	r9,zero,808994 <__ledf2+0x9c>
  808974:	38001126 	beq	r7,zero,8089bc <__ledf2+0xc4>
  808978:	00800044 	movi	r2,1
  80897c:	f800283a 	ret
  808980:	30d2b03a 	or	r9,r6,r3
  808984:	483fea26 	beq	r9,zero,808930 <__alt_mem_onchip_mem+0xff800930>
  808988:	00800084 	movi	r2,2
  80898c:	f800283a 	ret
  808990:	39c03fcc 	andi	r7,r7,255
  808994:	39400726 	beq	r7,r5,8089b4 <__ledf2+0xbc>
  808998:	2800081e 	bne	r5,zero,8089bc <__ledf2+0xc4>
  80899c:	00800044 	movi	r2,1
  8089a0:	f800283a 	ret
  8089a4:	2292b03a 	or	r9,r4,r10
  8089a8:	483fdf26 	beq	r9,zero,808928 <__alt_mem_onchip_mem+0xff800928>
  8089ac:	00800084 	movi	r2,2
  8089b0:	f800283a 	ret
  8089b4:	4080030e 	bge	r8,r2,8089c4 <__ledf2+0xcc>
  8089b8:	383fef26 	beq	r7,zero,808978 <__alt_mem_onchip_mem+0xff800978>
  8089bc:	00bfffc4 	movi	r2,-1
  8089c0:	f800283a 	ret
  8089c4:	123feb16 	blt	r2,r8,808974 <__alt_mem_onchip_mem+0xff800974>
  8089c8:	1abff336 	bltu	r3,r10,808998 <__alt_mem_onchip_mem+0xff800998>
  8089cc:	50c00326 	beq	r10,r3,8089dc <__ledf2+0xe4>
  8089d0:	50c0042e 	bgeu	r10,r3,8089e4 <__ledf2+0xec>
  8089d4:	283fe81e 	bne	r5,zero,808978 <__alt_mem_onchip_mem+0xff800978>
  8089d8:	003ff806 	br	8089bc <__alt_mem_onchip_mem+0xff8009bc>
  8089dc:	313fee36 	bltu	r6,r4,808998 <__alt_mem_onchip_mem+0xff800998>
  8089e0:	21bffc36 	bltu	r4,r6,8089d4 <__alt_mem_onchip_mem+0xff8009d4>
  8089e4:	0005883a 	mov	r2,zero
  8089e8:	f800283a 	ret

008089ec <__muldf3>:
  8089ec:	defff304 	addi	sp,sp,-52
  8089f0:	2804d53a 	srli	r2,r5,20
  8089f4:	dd800915 	stw	r22,36(sp)
  8089f8:	282cd7fa 	srli	r22,r5,31
  8089fc:	dc000315 	stw	r16,12(sp)
  808a00:	04000434 	movhi	r16,16
  808a04:	dd400815 	stw	r21,32(sp)
  808a08:	dc800515 	stw	r18,20(sp)
  808a0c:	843fffc4 	addi	r16,r16,-1
  808a10:	dfc00c15 	stw	ra,48(sp)
  808a14:	df000b15 	stw	fp,44(sp)
  808a18:	ddc00a15 	stw	r23,40(sp)
  808a1c:	dd000715 	stw	r20,28(sp)
  808a20:	dcc00615 	stw	r19,24(sp)
  808a24:	dc400415 	stw	r17,16(sp)
  808a28:	1481ffcc 	andi	r18,r2,2047
  808a2c:	2c20703a 	and	r16,r5,r16
  808a30:	b02b883a 	mov	r21,r22
  808a34:	b2403fcc 	andi	r9,r22,255
  808a38:	90006026 	beq	r18,zero,808bbc <__muldf3+0x1d0>
  808a3c:	0081ffc4 	movi	r2,2047
  808a40:	2029883a 	mov	r20,r4
  808a44:	90803626 	beq	r18,r2,808b20 <__muldf3+0x134>
  808a48:	80800434 	orhi	r2,r16,16
  808a4c:	100490fa 	slli	r2,r2,3
  808a50:	2020d77a 	srli	r16,r4,29
  808a54:	202890fa 	slli	r20,r4,3
  808a58:	94bf0044 	addi	r18,r18,-1023
  808a5c:	80a0b03a 	or	r16,r16,r2
  808a60:	0027883a 	mov	r19,zero
  808a64:	0039883a 	mov	fp,zero
  808a68:	3804d53a 	srli	r2,r7,20
  808a6c:	382ed7fa 	srli	r23,r7,31
  808a70:	04400434 	movhi	r17,16
  808a74:	8c7fffc4 	addi	r17,r17,-1
  808a78:	1081ffcc 	andi	r2,r2,2047
  808a7c:	3011883a 	mov	r8,r6
  808a80:	3c62703a 	and	r17,r7,r17
  808a84:	ba803fcc 	andi	r10,r23,255
  808a88:	10006d26 	beq	r2,zero,808c40 <__muldf3+0x254>
  808a8c:	00c1ffc4 	movi	r3,2047
  808a90:	10c06526 	beq	r2,r3,808c28 <__muldf3+0x23c>
  808a94:	88c00434 	orhi	r3,r17,16
  808a98:	180690fa 	slli	r3,r3,3
  808a9c:	3022d77a 	srli	r17,r6,29
  808aa0:	301090fa 	slli	r8,r6,3
  808aa4:	10bf0044 	addi	r2,r2,-1023
  808aa8:	88e2b03a 	or	r17,r17,r3
  808aac:	000b883a 	mov	r5,zero
  808ab0:	9085883a 	add	r2,r18,r2
  808ab4:	2cc8b03a 	or	r4,r5,r19
  808ab8:	00c003c4 	movi	r3,15
  808abc:	bdacf03a 	xor	r22,r23,r22
  808ac0:	12c00044 	addi	r11,r2,1
  808ac4:	19009936 	bltu	r3,r4,808d2c <__muldf3+0x340>
  808ac8:	200890ba 	slli	r4,r4,2
  808acc:	00c02074 	movhi	r3,129
  808ad0:	18e2b804 	addi	r3,r3,-29984
  808ad4:	20c9883a 	add	r4,r4,r3
  808ad8:	20c00017 	ldw	r3,0(r4)
  808adc:	1800683a 	jmp	r3
  808ae0:	00808d2c 	andhi	r2,zero,564
  808ae4:	00808b40 	call	808b4 <__alt_mem_sdram-0x77f74c>
  808ae8:	00808b40 	call	808b4 <__alt_mem_sdram-0x77f74c>
  808aec:	00808b3c 	xorhi	r2,zero,556
  808af0:	00808d08 	cmpgei	r2,zero,564
  808af4:	00808d08 	cmpgei	r2,zero,564
  808af8:	00808cf0 	cmpltui	r2,zero,563
  808afc:	00808b3c 	xorhi	r2,zero,556
  808b00:	00808d08 	cmpgei	r2,zero,564
  808b04:	00808cf0 	cmpltui	r2,zero,563
  808b08:	00808d08 	cmpgei	r2,zero,564
  808b0c:	00808b3c 	xorhi	r2,zero,556
  808b10:	00808d18 	cmpnei	r2,zero,564
  808b14:	00808d18 	cmpnei	r2,zero,564
  808b18:	00808d18 	cmpnei	r2,zero,564
  808b1c:	00808f34 	movhi	r2,572
  808b20:	2404b03a 	or	r2,r4,r16
  808b24:	10006f1e 	bne	r2,zero,808ce4 <__muldf3+0x2f8>
  808b28:	04c00204 	movi	r19,8
  808b2c:	0021883a 	mov	r16,zero
  808b30:	0029883a 	mov	r20,zero
  808b34:	07000084 	movi	fp,2
  808b38:	003fcb06 	br	808a68 <__alt_mem_onchip_mem+0xff800a68>
  808b3c:	502d883a 	mov	r22,r10
  808b40:	00800084 	movi	r2,2
  808b44:	28805726 	beq	r5,r2,808ca4 <__muldf3+0x2b8>
  808b48:	008000c4 	movi	r2,3
  808b4c:	28816626 	beq	r5,r2,8090e8 <__muldf3+0x6fc>
  808b50:	00800044 	movi	r2,1
  808b54:	2881411e 	bne	r5,r2,80905c <__muldf3+0x670>
  808b58:	b02b883a 	mov	r21,r22
  808b5c:	0005883a 	mov	r2,zero
  808b60:	000b883a 	mov	r5,zero
  808b64:	0029883a 	mov	r20,zero
  808b68:	1004953a 	slli	r2,r2,20
  808b6c:	a8c03fcc 	andi	r3,r21,255
  808b70:	04400434 	movhi	r17,16
  808b74:	8c7fffc4 	addi	r17,r17,-1
  808b78:	180697fa 	slli	r3,r3,31
  808b7c:	2c4a703a 	and	r5,r5,r17
  808b80:	288ab03a 	or	r5,r5,r2
  808b84:	28c6b03a 	or	r3,r5,r3
  808b88:	a005883a 	mov	r2,r20
  808b8c:	dfc00c17 	ldw	ra,48(sp)
  808b90:	df000b17 	ldw	fp,44(sp)
  808b94:	ddc00a17 	ldw	r23,40(sp)
  808b98:	dd800917 	ldw	r22,36(sp)
  808b9c:	dd400817 	ldw	r21,32(sp)
  808ba0:	dd000717 	ldw	r20,28(sp)
  808ba4:	dcc00617 	ldw	r19,24(sp)
  808ba8:	dc800517 	ldw	r18,20(sp)
  808bac:	dc400417 	ldw	r17,16(sp)
  808bb0:	dc000317 	ldw	r16,12(sp)
  808bb4:	dec00d04 	addi	sp,sp,52
  808bb8:	f800283a 	ret
  808bbc:	2404b03a 	or	r2,r4,r16
  808bc0:	2027883a 	mov	r19,r4
  808bc4:	10004226 	beq	r2,zero,808cd0 <__muldf3+0x2e4>
  808bc8:	8000fc26 	beq	r16,zero,808fbc <__muldf3+0x5d0>
  808bcc:	8009883a 	mov	r4,r16
  808bd0:	d9800215 	stw	r6,8(sp)
  808bd4:	d9c00015 	stw	r7,0(sp)
  808bd8:	da400115 	stw	r9,4(sp)
  808bdc:	0809b840 	call	809b84 <__clzsi2>
  808be0:	d9800217 	ldw	r6,8(sp)
  808be4:	d9c00017 	ldw	r7,0(sp)
  808be8:	da400117 	ldw	r9,4(sp)
  808bec:	113ffd44 	addi	r4,r2,-11
  808bf0:	00c00704 	movi	r3,28
  808bf4:	1900ed16 	blt	r3,r4,808fac <__muldf3+0x5c0>
  808bf8:	00c00744 	movi	r3,29
  808bfc:	147ffe04 	addi	r17,r2,-8
  808c00:	1907c83a 	sub	r3,r3,r4
  808c04:	8460983a 	sll	r16,r16,r17
  808c08:	98c6d83a 	srl	r3,r19,r3
  808c0c:	9c68983a 	sll	r20,r19,r17
  808c10:	1c20b03a 	or	r16,r3,r16
  808c14:	1080fcc4 	addi	r2,r2,1011
  808c18:	00a5c83a 	sub	r18,zero,r2
  808c1c:	0027883a 	mov	r19,zero
  808c20:	0039883a 	mov	fp,zero
  808c24:	003f9006 	br	808a68 <__alt_mem_onchip_mem+0xff800a68>
  808c28:	3446b03a 	or	r3,r6,r17
  808c2c:	1800261e 	bne	r3,zero,808cc8 <__muldf3+0x2dc>
  808c30:	0023883a 	mov	r17,zero
  808c34:	0011883a 	mov	r8,zero
  808c38:	01400084 	movi	r5,2
  808c3c:	003f9c06 	br	808ab0 <__alt_mem_onchip_mem+0xff800ab0>
  808c40:	3446b03a 	or	r3,r6,r17
  808c44:	18001c26 	beq	r3,zero,808cb8 <__muldf3+0x2cc>
  808c48:	8800ce26 	beq	r17,zero,808f84 <__muldf3+0x598>
  808c4c:	8809883a 	mov	r4,r17
  808c50:	d9800215 	stw	r6,8(sp)
  808c54:	da400115 	stw	r9,4(sp)
  808c58:	da800015 	stw	r10,0(sp)
  808c5c:	0809b840 	call	809b84 <__clzsi2>
  808c60:	d9800217 	ldw	r6,8(sp)
  808c64:	da400117 	ldw	r9,4(sp)
  808c68:	da800017 	ldw	r10,0(sp)
  808c6c:	113ffd44 	addi	r4,r2,-11
  808c70:	00c00704 	movi	r3,28
  808c74:	1900bf16 	blt	r3,r4,808f74 <__muldf3+0x588>
  808c78:	00c00744 	movi	r3,29
  808c7c:	123ffe04 	addi	r8,r2,-8
  808c80:	1907c83a 	sub	r3,r3,r4
  808c84:	8a22983a 	sll	r17,r17,r8
  808c88:	30c6d83a 	srl	r3,r6,r3
  808c8c:	3210983a 	sll	r8,r6,r8
  808c90:	1c62b03a 	or	r17,r3,r17
  808c94:	1080fcc4 	addi	r2,r2,1011
  808c98:	0085c83a 	sub	r2,zero,r2
  808c9c:	000b883a 	mov	r5,zero
  808ca0:	003f8306 	br	808ab0 <__alt_mem_onchip_mem+0xff800ab0>
  808ca4:	b02b883a 	mov	r21,r22
  808ca8:	0081ffc4 	movi	r2,2047
  808cac:	000b883a 	mov	r5,zero
  808cb0:	0029883a 	mov	r20,zero
  808cb4:	003fac06 	br	808b68 <__alt_mem_onchip_mem+0xff800b68>
  808cb8:	0023883a 	mov	r17,zero
  808cbc:	0011883a 	mov	r8,zero
  808cc0:	01400044 	movi	r5,1
  808cc4:	003f7a06 	br	808ab0 <__alt_mem_onchip_mem+0xff800ab0>
  808cc8:	014000c4 	movi	r5,3
  808ccc:	003f7806 	br	808ab0 <__alt_mem_onchip_mem+0xff800ab0>
  808cd0:	04c00104 	movi	r19,4
  808cd4:	0021883a 	mov	r16,zero
  808cd8:	0029883a 	mov	r20,zero
  808cdc:	07000044 	movi	fp,1
  808ce0:	003f6106 	br	808a68 <__alt_mem_onchip_mem+0xff800a68>
  808ce4:	04c00304 	movi	r19,12
  808ce8:	070000c4 	movi	fp,3
  808cec:	003f5e06 	br	808a68 <__alt_mem_onchip_mem+0xff800a68>
  808cf0:	01400434 	movhi	r5,16
  808cf4:	002b883a 	mov	r21,zero
  808cf8:	297fffc4 	addi	r5,r5,-1
  808cfc:	053fffc4 	movi	r20,-1
  808d00:	0081ffc4 	movi	r2,2047
  808d04:	003f9806 	br	808b68 <__alt_mem_onchip_mem+0xff800b68>
  808d08:	8023883a 	mov	r17,r16
  808d0c:	a011883a 	mov	r8,r20
  808d10:	e00b883a 	mov	r5,fp
  808d14:	003f8a06 	br	808b40 <__alt_mem_onchip_mem+0xff800b40>
  808d18:	8023883a 	mov	r17,r16
  808d1c:	a011883a 	mov	r8,r20
  808d20:	482d883a 	mov	r22,r9
  808d24:	e00b883a 	mov	r5,fp
  808d28:	003f8506 	br	808b40 <__alt_mem_onchip_mem+0xff800b40>
  808d2c:	a00ad43a 	srli	r5,r20,16
  808d30:	401ad43a 	srli	r13,r8,16
  808d34:	a53fffcc 	andi	r20,r20,65535
  808d38:	423fffcc 	andi	r8,r8,65535
  808d3c:	4519383a 	mul	r12,r8,r20
  808d40:	4147383a 	mul	r3,r8,r5
  808d44:	6d09383a 	mul	r4,r13,r20
  808d48:	600cd43a 	srli	r6,r12,16
  808d4c:	2b5d383a 	mul	r14,r5,r13
  808d50:	20c9883a 	add	r4,r4,r3
  808d54:	310d883a 	add	r6,r6,r4
  808d58:	30c0022e 	bgeu	r6,r3,808d64 <__muldf3+0x378>
  808d5c:	00c00074 	movhi	r3,1
  808d60:	70dd883a 	add	r14,r14,r3
  808d64:	8826d43a 	srli	r19,r17,16
  808d68:	8bffffcc 	andi	r15,r17,65535
  808d6c:	7d23383a 	mul	r17,r15,r20
  808d70:	7949383a 	mul	r4,r15,r5
  808d74:	9d29383a 	mul	r20,r19,r20
  808d78:	8814d43a 	srli	r10,r17,16
  808d7c:	3012943a 	slli	r9,r6,16
  808d80:	a129883a 	add	r20,r20,r4
  808d84:	633fffcc 	andi	r12,r12,65535
  808d88:	5515883a 	add	r10,r10,r20
  808d8c:	3006d43a 	srli	r3,r6,16
  808d90:	4b13883a 	add	r9,r9,r12
  808d94:	2ccb383a 	mul	r5,r5,r19
  808d98:	5100022e 	bgeu	r10,r4,808da4 <__muldf3+0x3b8>
  808d9c:	01000074 	movhi	r4,1
  808da0:	290b883a 	add	r5,r5,r4
  808da4:	802ad43a 	srli	r21,r16,16
  808da8:	843fffcc 	andi	r16,r16,65535
  808dac:	440d383a 	mul	r6,r8,r16
  808db0:	4565383a 	mul	r18,r8,r21
  808db4:	8349383a 	mul	r4,r16,r13
  808db8:	500e943a 	slli	r7,r10,16
  808dbc:	3010d43a 	srli	r8,r6,16
  808dc0:	5028d43a 	srli	r20,r10,16
  808dc4:	2489883a 	add	r4,r4,r18
  808dc8:	8abfffcc 	andi	r10,r17,65535
  808dcc:	3a95883a 	add	r10,r7,r10
  808dd0:	4119883a 	add	r12,r8,r4
  808dd4:	a169883a 	add	r20,r20,r5
  808dd8:	1a87883a 	add	r3,r3,r10
  808ddc:	6d5b383a 	mul	r13,r13,r21
  808de0:	6480022e 	bgeu	r12,r18,808dec <__muldf3+0x400>
  808de4:	01000074 	movhi	r4,1
  808de8:	691b883a 	add	r13,r13,r4
  808dec:	7c25383a 	mul	r18,r15,r16
  808df0:	7d4b383a 	mul	r5,r15,r21
  808df4:	84cf383a 	mul	r7,r16,r19
  808df8:	901ed43a 	srli	r15,r18,16
  808dfc:	6008d43a 	srli	r4,r12,16
  808e00:	6010943a 	slli	r8,r12,16
  808e04:	394f883a 	add	r7,r7,r5
  808e08:	333fffcc 	andi	r12,r6,65535
  808e0c:	79df883a 	add	r15,r15,r7
  808e10:	235b883a 	add	r13,r4,r13
  808e14:	9d63383a 	mul	r17,r19,r21
  808e18:	4309883a 	add	r4,r8,r12
  808e1c:	7940022e 	bgeu	r15,r5,808e28 <__muldf3+0x43c>
  808e20:	01400074 	movhi	r5,1
  808e24:	8963883a 	add	r17,r17,r5
  808e28:	780a943a 	slli	r5,r15,16
  808e2c:	91bfffcc 	andi	r6,r18,65535
  808e30:	70c7883a 	add	r3,r14,r3
  808e34:	298d883a 	add	r6,r5,r6
  808e38:	1a8f803a 	cmpltu	r7,r3,r10
  808e3c:	350b883a 	add	r5,r6,r20
  808e40:	20c7883a 	add	r3,r4,r3
  808e44:	3955883a 	add	r10,r7,r5
  808e48:	1909803a 	cmpltu	r4,r3,r4
  808e4c:	6a91883a 	add	r8,r13,r10
  808e50:	780cd43a 	srli	r6,r15,16
  808e54:	2219883a 	add	r12,r4,r8
  808e58:	2d0b803a 	cmpltu	r5,r5,r20
  808e5c:	51cf803a 	cmpltu	r7,r10,r7
  808e60:	29ceb03a 	or	r7,r5,r7
  808e64:	4351803a 	cmpltu	r8,r8,r13
  808e68:	610b803a 	cmpltu	r5,r12,r4
  808e6c:	4148b03a 	or	r4,r8,r5
  808e70:	398f883a 	add	r7,r7,r6
  808e74:	3909883a 	add	r4,r7,r4
  808e78:	1810927a 	slli	r8,r3,9
  808e7c:	2449883a 	add	r4,r4,r17
  808e80:	2008927a 	slli	r4,r4,9
  808e84:	6022d5fa 	srli	r17,r12,23
  808e88:	1806d5fa 	srli	r3,r3,23
  808e8c:	4252b03a 	or	r9,r8,r9
  808e90:	600a927a 	slli	r5,r12,9
  808e94:	4810c03a 	cmpne	r8,r9,zero
  808e98:	2462b03a 	or	r17,r4,r17
  808e9c:	40c6b03a 	or	r3,r8,r3
  808ea0:	8900402c 	andhi	r4,r17,256
  808ea4:	1950b03a 	or	r8,r3,r5
  808ea8:	20000726 	beq	r4,zero,808ec8 <__muldf3+0x4dc>
  808eac:	4006d07a 	srli	r3,r8,1
  808eb0:	880497fa 	slli	r2,r17,31
  808eb4:	4200004c 	andi	r8,r8,1
  808eb8:	8822d07a 	srli	r17,r17,1
  808ebc:	1a10b03a 	or	r8,r3,r8
  808ec0:	1210b03a 	or	r8,r2,r8
  808ec4:	5805883a 	mov	r2,r11
  808ec8:	1140ffc4 	addi	r5,r2,1023
  808ecc:	0140440e 	bge	zero,r5,808fe0 <__muldf3+0x5f4>
  808ed0:	40c001cc 	andi	r3,r8,7
  808ed4:	18000726 	beq	r3,zero,808ef4 <__muldf3+0x508>
  808ed8:	40c003cc 	andi	r3,r8,15
  808edc:	01000104 	movi	r4,4
  808ee0:	19000426 	beq	r3,r4,808ef4 <__muldf3+0x508>
  808ee4:	4107883a 	add	r3,r8,r4
  808ee8:	1a11803a 	cmpltu	r8,r3,r8
  808eec:	8a23883a 	add	r17,r17,r8
  808ef0:	1811883a 	mov	r8,r3
  808ef4:	88c0402c 	andhi	r3,r17,256
  808ef8:	18000426 	beq	r3,zero,808f0c <__muldf3+0x520>
  808efc:	11410004 	addi	r5,r2,1024
  808f00:	00bfc034 	movhi	r2,65280
  808f04:	10bfffc4 	addi	r2,r2,-1
  808f08:	88a2703a 	and	r17,r17,r2
  808f0c:	0081ff84 	movi	r2,2046
  808f10:	117f6416 	blt	r2,r5,808ca4 <__alt_mem_onchip_mem+0xff800ca4>
  808f14:	8828977a 	slli	r20,r17,29
  808f18:	4010d0fa 	srli	r8,r8,3
  808f1c:	8822927a 	slli	r17,r17,9
  808f20:	2881ffcc 	andi	r2,r5,2047
  808f24:	a228b03a 	or	r20,r20,r8
  808f28:	880ad33a 	srli	r5,r17,12
  808f2c:	b02b883a 	mov	r21,r22
  808f30:	003f0d06 	br	808b68 <__alt_mem_onchip_mem+0xff800b68>
  808f34:	8080022c 	andhi	r2,r16,8
  808f38:	10000926 	beq	r2,zero,808f60 <__muldf3+0x574>
  808f3c:	8880022c 	andhi	r2,r17,8
  808f40:	1000071e 	bne	r2,zero,808f60 <__muldf3+0x574>
  808f44:	00800434 	movhi	r2,16
  808f48:	89400234 	orhi	r5,r17,8
  808f4c:	10bfffc4 	addi	r2,r2,-1
  808f50:	b82b883a 	mov	r21,r23
  808f54:	288a703a 	and	r5,r5,r2
  808f58:	4029883a 	mov	r20,r8
  808f5c:	003f6806 	br	808d00 <__alt_mem_onchip_mem+0xff800d00>
  808f60:	00800434 	movhi	r2,16
  808f64:	81400234 	orhi	r5,r16,8
  808f68:	10bfffc4 	addi	r2,r2,-1
  808f6c:	288a703a 	and	r5,r5,r2
  808f70:	003f6306 	br	808d00 <__alt_mem_onchip_mem+0xff800d00>
  808f74:	147ff604 	addi	r17,r2,-40
  808f78:	3462983a 	sll	r17,r6,r17
  808f7c:	0011883a 	mov	r8,zero
  808f80:	003f4406 	br	808c94 <__alt_mem_onchip_mem+0xff800c94>
  808f84:	3009883a 	mov	r4,r6
  808f88:	d9800215 	stw	r6,8(sp)
  808f8c:	da400115 	stw	r9,4(sp)
  808f90:	da800015 	stw	r10,0(sp)
  808f94:	0809b840 	call	809b84 <__clzsi2>
  808f98:	10800804 	addi	r2,r2,32
  808f9c:	da800017 	ldw	r10,0(sp)
  808fa0:	da400117 	ldw	r9,4(sp)
  808fa4:	d9800217 	ldw	r6,8(sp)
  808fa8:	003f3006 	br	808c6c <__alt_mem_onchip_mem+0xff800c6c>
  808fac:	143ff604 	addi	r16,r2,-40
  808fb0:	9c20983a 	sll	r16,r19,r16
  808fb4:	0029883a 	mov	r20,zero
  808fb8:	003f1606 	br	808c14 <__alt_mem_onchip_mem+0xff800c14>
  808fbc:	d9800215 	stw	r6,8(sp)
  808fc0:	d9c00015 	stw	r7,0(sp)
  808fc4:	da400115 	stw	r9,4(sp)
  808fc8:	0809b840 	call	809b84 <__clzsi2>
  808fcc:	10800804 	addi	r2,r2,32
  808fd0:	da400117 	ldw	r9,4(sp)
  808fd4:	d9c00017 	ldw	r7,0(sp)
  808fd8:	d9800217 	ldw	r6,8(sp)
  808fdc:	003f0306 	br	808bec <__alt_mem_onchip_mem+0xff800bec>
  808fe0:	00c00044 	movi	r3,1
  808fe4:	1947c83a 	sub	r3,r3,r5
  808fe8:	00800e04 	movi	r2,56
  808fec:	10feda16 	blt	r2,r3,808b58 <__alt_mem_onchip_mem+0xff800b58>
  808ff0:	008007c4 	movi	r2,31
  808ff4:	10c01b16 	blt	r2,r3,809064 <__muldf3+0x678>
  808ff8:	00800804 	movi	r2,32
  808ffc:	10c5c83a 	sub	r2,r2,r3
  809000:	888a983a 	sll	r5,r17,r2
  809004:	40c8d83a 	srl	r4,r8,r3
  809008:	4084983a 	sll	r2,r8,r2
  80900c:	88e2d83a 	srl	r17,r17,r3
  809010:	2906b03a 	or	r3,r5,r4
  809014:	1004c03a 	cmpne	r2,r2,zero
  809018:	1886b03a 	or	r3,r3,r2
  80901c:	188001cc 	andi	r2,r3,7
  809020:	10000726 	beq	r2,zero,809040 <__muldf3+0x654>
  809024:	188003cc 	andi	r2,r3,15
  809028:	01000104 	movi	r4,4
  80902c:	11000426 	beq	r2,r4,809040 <__muldf3+0x654>
  809030:	1805883a 	mov	r2,r3
  809034:	10c00104 	addi	r3,r2,4
  809038:	1885803a 	cmpltu	r2,r3,r2
  80903c:	88a3883a 	add	r17,r17,r2
  809040:	8880202c 	andhi	r2,r17,128
  809044:	10001c26 	beq	r2,zero,8090b8 <__muldf3+0x6cc>
  809048:	b02b883a 	mov	r21,r22
  80904c:	00800044 	movi	r2,1
  809050:	000b883a 	mov	r5,zero
  809054:	0029883a 	mov	r20,zero
  809058:	003ec306 	br	808b68 <__alt_mem_onchip_mem+0xff800b68>
  80905c:	5805883a 	mov	r2,r11
  809060:	003f9906 	br	808ec8 <__alt_mem_onchip_mem+0xff800ec8>
  809064:	00bff844 	movi	r2,-31
  809068:	1145c83a 	sub	r2,r2,r5
  80906c:	8888d83a 	srl	r4,r17,r2
  809070:	00800804 	movi	r2,32
  809074:	18801a26 	beq	r3,r2,8090e0 <__muldf3+0x6f4>
  809078:	00801004 	movi	r2,64
  80907c:	10c5c83a 	sub	r2,r2,r3
  809080:	8884983a 	sll	r2,r17,r2
  809084:	1204b03a 	or	r2,r2,r8
  809088:	1004c03a 	cmpne	r2,r2,zero
  80908c:	2084b03a 	or	r2,r4,r2
  809090:	144001cc 	andi	r17,r2,7
  809094:	88000d1e 	bne	r17,zero,8090cc <__muldf3+0x6e0>
  809098:	000b883a 	mov	r5,zero
  80909c:	1028d0fa 	srli	r20,r2,3
  8090a0:	b02b883a 	mov	r21,r22
  8090a4:	0005883a 	mov	r2,zero
  8090a8:	a468b03a 	or	r20,r20,r17
  8090ac:	003eae06 	br	808b68 <__alt_mem_onchip_mem+0xff800b68>
  8090b0:	1007883a 	mov	r3,r2
  8090b4:	0023883a 	mov	r17,zero
  8090b8:	880a927a 	slli	r5,r17,9
  8090bc:	1805883a 	mov	r2,r3
  8090c0:	8822977a 	slli	r17,r17,29
  8090c4:	280ad33a 	srli	r5,r5,12
  8090c8:	003ff406 	br	80909c <__alt_mem_onchip_mem+0xff80109c>
  8090cc:	10c003cc 	andi	r3,r2,15
  8090d0:	01000104 	movi	r4,4
  8090d4:	193ff626 	beq	r3,r4,8090b0 <__alt_mem_onchip_mem+0xff8010b0>
  8090d8:	0023883a 	mov	r17,zero
  8090dc:	003fd506 	br	809034 <__alt_mem_onchip_mem+0xff801034>
  8090e0:	0005883a 	mov	r2,zero
  8090e4:	003fe706 	br	809084 <__alt_mem_onchip_mem+0xff801084>
  8090e8:	00800434 	movhi	r2,16
  8090ec:	89400234 	orhi	r5,r17,8
  8090f0:	10bfffc4 	addi	r2,r2,-1
  8090f4:	b02b883a 	mov	r21,r22
  8090f8:	288a703a 	and	r5,r5,r2
  8090fc:	4029883a 	mov	r20,r8
  809100:	003eff06 	br	808d00 <__alt_mem_onchip_mem+0xff800d00>

00809104 <__subdf3>:
  809104:	02000434 	movhi	r8,16
  809108:	423fffc4 	addi	r8,r8,-1
  80910c:	defffb04 	addi	sp,sp,-20
  809110:	2a14703a 	and	r10,r5,r8
  809114:	3812d53a 	srli	r9,r7,20
  809118:	3a10703a 	and	r8,r7,r8
  80911c:	2006d77a 	srli	r3,r4,29
  809120:	3004d77a 	srli	r2,r6,29
  809124:	dc000015 	stw	r16,0(sp)
  809128:	501490fa 	slli	r10,r10,3
  80912c:	2820d53a 	srli	r16,r5,20
  809130:	401090fa 	slli	r8,r8,3
  809134:	dc800215 	stw	r18,8(sp)
  809138:	dc400115 	stw	r17,4(sp)
  80913c:	dfc00415 	stw	ra,16(sp)
  809140:	202290fa 	slli	r17,r4,3
  809144:	dcc00315 	stw	r19,12(sp)
  809148:	4a41ffcc 	andi	r9,r9,2047
  80914c:	0101ffc4 	movi	r4,2047
  809150:	2824d7fa 	srli	r18,r5,31
  809154:	8401ffcc 	andi	r16,r16,2047
  809158:	50c6b03a 	or	r3,r10,r3
  80915c:	380ed7fa 	srli	r7,r7,31
  809160:	408ab03a 	or	r5,r8,r2
  809164:	300c90fa 	slli	r6,r6,3
  809168:	49009626 	beq	r9,r4,8093c4 <__subdf3+0x2c0>
  80916c:	39c0005c 	xori	r7,r7,1
  809170:	8245c83a 	sub	r2,r16,r9
  809174:	3c807426 	beq	r7,r18,809348 <__subdf3+0x244>
  809178:	0080af0e 	bge	zero,r2,809438 <__subdf3+0x334>
  80917c:	48002a1e 	bne	r9,zero,809228 <__subdf3+0x124>
  809180:	2988b03a 	or	r4,r5,r6
  809184:	20009a1e 	bne	r4,zero,8093f0 <__subdf3+0x2ec>
  809188:	888001cc 	andi	r2,r17,7
  80918c:	10000726 	beq	r2,zero,8091ac <__subdf3+0xa8>
  809190:	888003cc 	andi	r2,r17,15
  809194:	01000104 	movi	r4,4
  809198:	11000426 	beq	r2,r4,8091ac <__subdf3+0xa8>
  80919c:	890b883a 	add	r5,r17,r4
  8091a0:	2c63803a 	cmpltu	r17,r5,r17
  8091a4:	1c47883a 	add	r3,r3,r17
  8091a8:	2823883a 	mov	r17,r5
  8091ac:	1880202c 	andhi	r2,r3,128
  8091b0:	10005926 	beq	r2,zero,809318 <__subdf3+0x214>
  8091b4:	84000044 	addi	r16,r16,1
  8091b8:	0081ffc4 	movi	r2,2047
  8091bc:	8080be26 	beq	r16,r2,8094b8 <__subdf3+0x3b4>
  8091c0:	017fe034 	movhi	r5,65408
  8091c4:	297fffc4 	addi	r5,r5,-1
  8091c8:	1946703a 	and	r3,r3,r5
  8091cc:	1804977a 	slli	r2,r3,29
  8091d0:	1806927a 	slli	r3,r3,9
  8091d4:	8822d0fa 	srli	r17,r17,3
  8091d8:	8401ffcc 	andi	r16,r16,2047
  8091dc:	180ad33a 	srli	r5,r3,12
  8091e0:	9100004c 	andi	r4,r18,1
  8091e4:	1444b03a 	or	r2,r2,r17
  8091e8:	80c1ffcc 	andi	r3,r16,2047
  8091ec:	1820953a 	slli	r16,r3,20
  8091f0:	20c03fcc 	andi	r3,r4,255
  8091f4:	180897fa 	slli	r4,r3,31
  8091f8:	00c00434 	movhi	r3,16
  8091fc:	18ffffc4 	addi	r3,r3,-1
  809200:	28c6703a 	and	r3,r5,r3
  809204:	1c06b03a 	or	r3,r3,r16
  809208:	1906b03a 	or	r3,r3,r4
  80920c:	dfc00417 	ldw	ra,16(sp)
  809210:	dcc00317 	ldw	r19,12(sp)
  809214:	dc800217 	ldw	r18,8(sp)
  809218:	dc400117 	ldw	r17,4(sp)
  80921c:	dc000017 	ldw	r16,0(sp)
  809220:	dec00504 	addi	sp,sp,20
  809224:	f800283a 	ret
  809228:	0101ffc4 	movi	r4,2047
  80922c:	813fd626 	beq	r16,r4,809188 <__alt_mem_onchip_mem+0xff801188>
  809230:	29402034 	orhi	r5,r5,128
  809234:	01000e04 	movi	r4,56
  809238:	2080a316 	blt	r4,r2,8094c8 <__subdf3+0x3c4>
  80923c:	010007c4 	movi	r4,31
  809240:	2080c616 	blt	r4,r2,80955c <__subdf3+0x458>
  809244:	01000804 	movi	r4,32
  809248:	2089c83a 	sub	r4,r4,r2
  80924c:	2910983a 	sll	r8,r5,r4
  809250:	308ed83a 	srl	r7,r6,r2
  809254:	3108983a 	sll	r4,r6,r4
  809258:	2884d83a 	srl	r2,r5,r2
  80925c:	41ccb03a 	or	r6,r8,r7
  809260:	2008c03a 	cmpne	r4,r4,zero
  809264:	310cb03a 	or	r6,r6,r4
  809268:	898dc83a 	sub	r6,r17,r6
  80926c:	89a3803a 	cmpltu	r17,r17,r6
  809270:	1887c83a 	sub	r3,r3,r2
  809274:	1c47c83a 	sub	r3,r3,r17
  809278:	3023883a 	mov	r17,r6
  80927c:	1880202c 	andhi	r2,r3,128
  809280:	10002326 	beq	r2,zero,809310 <__subdf3+0x20c>
  809284:	04c02034 	movhi	r19,128
  809288:	9cffffc4 	addi	r19,r19,-1
  80928c:	1ce6703a 	and	r19,r3,r19
  809290:	98007a26 	beq	r19,zero,80947c <__subdf3+0x378>
  809294:	9809883a 	mov	r4,r19
  809298:	0809b840 	call	809b84 <__clzsi2>
  80929c:	113ffe04 	addi	r4,r2,-8
  8092a0:	00c007c4 	movi	r3,31
  8092a4:	19007b16 	blt	r3,r4,809494 <__subdf3+0x390>
  8092a8:	00800804 	movi	r2,32
  8092ac:	1105c83a 	sub	r2,r2,r4
  8092b0:	8884d83a 	srl	r2,r17,r2
  8092b4:	9906983a 	sll	r3,r19,r4
  8092b8:	8922983a 	sll	r17,r17,r4
  8092bc:	10c4b03a 	or	r2,r2,r3
  8092c0:	24007816 	blt	r4,r16,8094a4 <__subdf3+0x3a0>
  8092c4:	2421c83a 	sub	r16,r4,r16
  8092c8:	80c00044 	addi	r3,r16,1
  8092cc:	010007c4 	movi	r4,31
  8092d0:	20c09516 	blt	r4,r3,809528 <__subdf3+0x424>
  8092d4:	01400804 	movi	r5,32
  8092d8:	28cbc83a 	sub	r5,r5,r3
  8092dc:	88c8d83a 	srl	r4,r17,r3
  8092e0:	8962983a 	sll	r17,r17,r5
  8092e4:	114a983a 	sll	r5,r2,r5
  8092e8:	10c6d83a 	srl	r3,r2,r3
  8092ec:	8804c03a 	cmpne	r2,r17,zero
  8092f0:	290ab03a 	or	r5,r5,r4
  8092f4:	28a2b03a 	or	r17,r5,r2
  8092f8:	0021883a 	mov	r16,zero
  8092fc:	003fa206 	br	809188 <__alt_mem_onchip_mem+0xff801188>
  809300:	2090b03a 	or	r8,r4,r2
  809304:	40018e26 	beq	r8,zero,809940 <__subdf3+0x83c>
  809308:	1007883a 	mov	r3,r2
  80930c:	2023883a 	mov	r17,r4
  809310:	888001cc 	andi	r2,r17,7
  809314:	103f9e1e 	bne	r2,zero,809190 <__alt_mem_onchip_mem+0xff801190>
  809318:	1804977a 	slli	r2,r3,29
  80931c:	8822d0fa 	srli	r17,r17,3
  809320:	1810d0fa 	srli	r8,r3,3
  809324:	9100004c 	andi	r4,r18,1
  809328:	1444b03a 	or	r2,r2,r17
  80932c:	00c1ffc4 	movi	r3,2047
  809330:	80c02826 	beq	r16,r3,8093d4 <__subdf3+0x2d0>
  809334:	01400434 	movhi	r5,16
  809338:	297fffc4 	addi	r5,r5,-1
  80933c:	80e0703a 	and	r16,r16,r3
  809340:	414a703a 	and	r5,r8,r5
  809344:	003fa806 	br	8091e8 <__alt_mem_onchip_mem+0xff8011e8>
  809348:	0080630e 	bge	zero,r2,8094d8 <__subdf3+0x3d4>
  80934c:	48003026 	beq	r9,zero,809410 <__subdf3+0x30c>
  809350:	0101ffc4 	movi	r4,2047
  809354:	813f8c26 	beq	r16,r4,809188 <__alt_mem_onchip_mem+0xff801188>
  809358:	29402034 	orhi	r5,r5,128
  80935c:	01000e04 	movi	r4,56
  809360:	2080a90e 	bge	r4,r2,809608 <__subdf3+0x504>
  809364:	298cb03a 	or	r6,r5,r6
  809368:	3012c03a 	cmpne	r9,r6,zero
  80936c:	0005883a 	mov	r2,zero
  809370:	4c53883a 	add	r9,r9,r17
  809374:	4c63803a 	cmpltu	r17,r9,r17
  809378:	10c7883a 	add	r3,r2,r3
  80937c:	88c7883a 	add	r3,r17,r3
  809380:	4823883a 	mov	r17,r9
  809384:	1880202c 	andhi	r2,r3,128
  809388:	1000d026 	beq	r2,zero,8096cc <__subdf3+0x5c8>
  80938c:	84000044 	addi	r16,r16,1
  809390:	0081ffc4 	movi	r2,2047
  809394:	8080fe26 	beq	r16,r2,809790 <__subdf3+0x68c>
  809398:	00bfe034 	movhi	r2,65408
  80939c:	10bfffc4 	addi	r2,r2,-1
  8093a0:	1886703a 	and	r3,r3,r2
  8093a4:	880ad07a 	srli	r5,r17,1
  8093a8:	180497fa 	slli	r2,r3,31
  8093ac:	8900004c 	andi	r4,r17,1
  8093b0:	2922b03a 	or	r17,r5,r4
  8093b4:	1806d07a 	srli	r3,r3,1
  8093b8:	1462b03a 	or	r17,r2,r17
  8093bc:	3825883a 	mov	r18,r7
  8093c0:	003f7106 	br	809188 <__alt_mem_onchip_mem+0xff801188>
  8093c4:	2984b03a 	or	r2,r5,r6
  8093c8:	103f6826 	beq	r2,zero,80916c <__alt_mem_onchip_mem+0xff80116c>
  8093cc:	39c03fcc 	andi	r7,r7,255
  8093d0:	003f6706 	br	809170 <__alt_mem_onchip_mem+0xff801170>
  8093d4:	4086b03a 	or	r3,r8,r2
  8093d8:	18015226 	beq	r3,zero,809924 <__subdf3+0x820>
  8093dc:	00c00434 	movhi	r3,16
  8093e0:	41400234 	orhi	r5,r8,8
  8093e4:	18ffffc4 	addi	r3,r3,-1
  8093e8:	28ca703a 	and	r5,r5,r3
  8093ec:	003f7e06 	br	8091e8 <__alt_mem_onchip_mem+0xff8011e8>
  8093f0:	10bfffc4 	addi	r2,r2,-1
  8093f4:	1000491e 	bne	r2,zero,80951c <__subdf3+0x418>
  8093f8:	898fc83a 	sub	r7,r17,r6
  8093fc:	89e3803a 	cmpltu	r17,r17,r7
  809400:	1947c83a 	sub	r3,r3,r5
  809404:	1c47c83a 	sub	r3,r3,r17
  809408:	3823883a 	mov	r17,r7
  80940c:	003f9b06 	br	80927c <__alt_mem_onchip_mem+0xff80127c>
  809410:	2988b03a 	or	r4,r5,r6
  809414:	203f5c26 	beq	r4,zero,809188 <__alt_mem_onchip_mem+0xff801188>
  809418:	10bfffc4 	addi	r2,r2,-1
  80941c:	1000931e 	bne	r2,zero,80966c <__subdf3+0x568>
  809420:	898d883a 	add	r6,r17,r6
  809424:	3463803a 	cmpltu	r17,r6,r17
  809428:	1947883a 	add	r3,r3,r5
  80942c:	88c7883a 	add	r3,r17,r3
  809430:	3023883a 	mov	r17,r6
  809434:	003fd306 	br	809384 <__alt_mem_onchip_mem+0xff801384>
  809438:	1000541e 	bne	r2,zero,80958c <__subdf3+0x488>
  80943c:	80800044 	addi	r2,r16,1
  809440:	1081ffcc 	andi	r2,r2,2047
  809444:	01000044 	movi	r4,1
  809448:	2080a20e 	bge	r4,r2,8096d4 <__subdf3+0x5d0>
  80944c:	8989c83a 	sub	r4,r17,r6
  809450:	8905803a 	cmpltu	r2,r17,r4
  809454:	1967c83a 	sub	r19,r3,r5
  809458:	98a7c83a 	sub	r19,r19,r2
  80945c:	9880202c 	andhi	r2,r19,128
  809460:	10006326 	beq	r2,zero,8095f0 <__subdf3+0x4ec>
  809464:	3463c83a 	sub	r17,r6,r17
  809468:	28c7c83a 	sub	r3,r5,r3
  80946c:	344d803a 	cmpltu	r6,r6,r17
  809470:	19a7c83a 	sub	r19,r3,r6
  809474:	3825883a 	mov	r18,r7
  809478:	983f861e 	bne	r19,zero,809294 <__alt_mem_onchip_mem+0xff801294>
  80947c:	8809883a 	mov	r4,r17
  809480:	0809b840 	call	809b84 <__clzsi2>
  809484:	10800804 	addi	r2,r2,32
  809488:	113ffe04 	addi	r4,r2,-8
  80948c:	00c007c4 	movi	r3,31
  809490:	193f850e 	bge	r3,r4,8092a8 <__alt_mem_onchip_mem+0xff8012a8>
  809494:	10bff604 	addi	r2,r2,-40
  809498:	8884983a 	sll	r2,r17,r2
  80949c:	0023883a 	mov	r17,zero
  8094a0:	243f880e 	bge	r4,r16,8092c4 <__alt_mem_onchip_mem+0xff8012c4>
  8094a4:	00ffe034 	movhi	r3,65408
  8094a8:	18ffffc4 	addi	r3,r3,-1
  8094ac:	8121c83a 	sub	r16,r16,r4
  8094b0:	10c6703a 	and	r3,r2,r3
  8094b4:	003f3406 	br	809188 <__alt_mem_onchip_mem+0xff801188>
  8094b8:	9100004c 	andi	r4,r18,1
  8094bc:	000b883a 	mov	r5,zero
  8094c0:	0005883a 	mov	r2,zero
  8094c4:	003f4806 	br	8091e8 <__alt_mem_onchip_mem+0xff8011e8>
  8094c8:	298cb03a 	or	r6,r5,r6
  8094cc:	300cc03a 	cmpne	r6,r6,zero
  8094d0:	0005883a 	mov	r2,zero
  8094d4:	003f6406 	br	809268 <__alt_mem_onchip_mem+0xff801268>
  8094d8:	10009a1e 	bne	r2,zero,809744 <__subdf3+0x640>
  8094dc:	82400044 	addi	r9,r16,1
  8094e0:	4881ffcc 	andi	r2,r9,2047
  8094e4:	02800044 	movi	r10,1
  8094e8:	5080670e 	bge	r10,r2,809688 <__subdf3+0x584>
  8094ec:	0081ffc4 	movi	r2,2047
  8094f0:	4880af26 	beq	r9,r2,8097b0 <__subdf3+0x6ac>
  8094f4:	898d883a 	add	r6,r17,r6
  8094f8:	1945883a 	add	r2,r3,r5
  8094fc:	3447803a 	cmpltu	r3,r6,r17
  809500:	1887883a 	add	r3,r3,r2
  809504:	182297fa 	slli	r17,r3,31
  809508:	300cd07a 	srli	r6,r6,1
  80950c:	1806d07a 	srli	r3,r3,1
  809510:	4821883a 	mov	r16,r9
  809514:	89a2b03a 	or	r17,r17,r6
  809518:	003f1b06 	br	809188 <__alt_mem_onchip_mem+0xff801188>
  80951c:	0101ffc4 	movi	r4,2047
  809520:	813f441e 	bne	r16,r4,809234 <__alt_mem_onchip_mem+0xff801234>
  809524:	003f1806 	br	809188 <__alt_mem_onchip_mem+0xff801188>
  809528:	843ff844 	addi	r16,r16,-31
  80952c:	01400804 	movi	r5,32
  809530:	1408d83a 	srl	r4,r2,r16
  809534:	19405026 	beq	r3,r5,809678 <__subdf3+0x574>
  809538:	01401004 	movi	r5,64
  80953c:	28c7c83a 	sub	r3,r5,r3
  809540:	10c4983a 	sll	r2,r2,r3
  809544:	88a2b03a 	or	r17,r17,r2
  809548:	8822c03a 	cmpne	r17,r17,zero
  80954c:	2462b03a 	or	r17,r4,r17
  809550:	0007883a 	mov	r3,zero
  809554:	0021883a 	mov	r16,zero
  809558:	003f6d06 	br	809310 <__alt_mem_onchip_mem+0xff801310>
  80955c:	11fff804 	addi	r7,r2,-32
  809560:	01000804 	movi	r4,32
  809564:	29ced83a 	srl	r7,r5,r7
  809568:	11004526 	beq	r2,r4,809680 <__subdf3+0x57c>
  80956c:	01001004 	movi	r4,64
  809570:	2089c83a 	sub	r4,r4,r2
  809574:	2904983a 	sll	r2,r5,r4
  809578:	118cb03a 	or	r6,r2,r6
  80957c:	300cc03a 	cmpne	r6,r6,zero
  809580:	398cb03a 	or	r6,r7,r6
  809584:	0005883a 	mov	r2,zero
  809588:	003f3706 	br	809268 <__alt_mem_onchip_mem+0xff801268>
  80958c:	80002a26 	beq	r16,zero,809638 <__subdf3+0x534>
  809590:	0101ffc4 	movi	r4,2047
  809594:	49006626 	beq	r9,r4,809730 <__subdf3+0x62c>
  809598:	0085c83a 	sub	r2,zero,r2
  80959c:	18c02034 	orhi	r3,r3,128
  8095a0:	01000e04 	movi	r4,56
  8095a4:	20807e16 	blt	r4,r2,8097a0 <__subdf3+0x69c>
  8095a8:	010007c4 	movi	r4,31
  8095ac:	2080e716 	blt	r4,r2,80994c <__subdf3+0x848>
  8095b0:	01000804 	movi	r4,32
  8095b4:	2089c83a 	sub	r4,r4,r2
  8095b8:	1914983a 	sll	r10,r3,r4
  8095bc:	8890d83a 	srl	r8,r17,r2
  8095c0:	8908983a 	sll	r4,r17,r4
  8095c4:	1884d83a 	srl	r2,r3,r2
  8095c8:	5222b03a 	or	r17,r10,r8
  8095cc:	2006c03a 	cmpne	r3,r4,zero
  8095d0:	88e2b03a 	or	r17,r17,r3
  8095d4:	3463c83a 	sub	r17,r6,r17
  8095d8:	2885c83a 	sub	r2,r5,r2
  8095dc:	344d803a 	cmpltu	r6,r6,r17
  8095e0:	1187c83a 	sub	r3,r2,r6
  8095e4:	4821883a 	mov	r16,r9
  8095e8:	3825883a 	mov	r18,r7
  8095ec:	003f2306 	br	80927c <__alt_mem_onchip_mem+0xff80127c>
  8095f0:	24d0b03a 	or	r8,r4,r19
  8095f4:	40001b1e 	bne	r8,zero,809664 <__subdf3+0x560>
  8095f8:	0005883a 	mov	r2,zero
  8095fc:	0009883a 	mov	r4,zero
  809600:	0021883a 	mov	r16,zero
  809604:	003f4906 	br	80932c <__alt_mem_onchip_mem+0xff80132c>
  809608:	010007c4 	movi	r4,31
  80960c:	20803a16 	blt	r4,r2,8096f8 <__subdf3+0x5f4>
  809610:	01000804 	movi	r4,32
  809614:	2089c83a 	sub	r4,r4,r2
  809618:	2912983a 	sll	r9,r5,r4
  80961c:	3090d83a 	srl	r8,r6,r2
  809620:	3108983a 	sll	r4,r6,r4
  809624:	2884d83a 	srl	r2,r5,r2
  809628:	4a12b03a 	or	r9,r9,r8
  80962c:	2008c03a 	cmpne	r4,r4,zero
  809630:	4912b03a 	or	r9,r9,r4
  809634:	003f4e06 	br	809370 <__alt_mem_onchip_mem+0xff801370>
  809638:	1c48b03a 	or	r4,r3,r17
  80963c:	20003c26 	beq	r4,zero,809730 <__subdf3+0x62c>
  809640:	0084303a 	nor	r2,zero,r2
  809644:	1000381e 	bne	r2,zero,809728 <__subdf3+0x624>
  809648:	3463c83a 	sub	r17,r6,r17
  80964c:	28c5c83a 	sub	r2,r5,r3
  809650:	344d803a 	cmpltu	r6,r6,r17
  809654:	1187c83a 	sub	r3,r2,r6
  809658:	4821883a 	mov	r16,r9
  80965c:	3825883a 	mov	r18,r7
  809660:	003f0606 	br	80927c <__alt_mem_onchip_mem+0xff80127c>
  809664:	2023883a 	mov	r17,r4
  809668:	003f0906 	br	809290 <__alt_mem_onchip_mem+0xff801290>
  80966c:	0101ffc4 	movi	r4,2047
  809670:	813f3a1e 	bne	r16,r4,80935c <__alt_mem_onchip_mem+0xff80135c>
  809674:	003ec406 	br	809188 <__alt_mem_onchip_mem+0xff801188>
  809678:	0005883a 	mov	r2,zero
  80967c:	003fb106 	br	809544 <__alt_mem_onchip_mem+0xff801544>
  809680:	0005883a 	mov	r2,zero
  809684:	003fbc06 	br	809578 <__alt_mem_onchip_mem+0xff801578>
  809688:	1c44b03a 	or	r2,r3,r17
  80968c:	80008e1e 	bne	r16,zero,8098c8 <__subdf3+0x7c4>
  809690:	1000c826 	beq	r2,zero,8099b4 <__subdf3+0x8b0>
  809694:	2984b03a 	or	r2,r5,r6
  809698:	103ebb26 	beq	r2,zero,809188 <__alt_mem_onchip_mem+0xff801188>
  80969c:	8989883a 	add	r4,r17,r6
  8096a0:	1945883a 	add	r2,r3,r5
  8096a4:	2447803a 	cmpltu	r3,r4,r17
  8096a8:	1887883a 	add	r3,r3,r2
  8096ac:	1880202c 	andhi	r2,r3,128
  8096b0:	2023883a 	mov	r17,r4
  8096b4:	103f1626 	beq	r2,zero,809310 <__alt_mem_onchip_mem+0xff801310>
  8096b8:	00bfe034 	movhi	r2,65408
  8096bc:	10bfffc4 	addi	r2,r2,-1
  8096c0:	5021883a 	mov	r16,r10
  8096c4:	1886703a 	and	r3,r3,r2
  8096c8:	003eaf06 	br	809188 <__alt_mem_onchip_mem+0xff801188>
  8096cc:	3825883a 	mov	r18,r7
  8096d0:	003f0f06 	br	809310 <__alt_mem_onchip_mem+0xff801310>
  8096d4:	1c44b03a 	or	r2,r3,r17
  8096d8:	8000251e 	bne	r16,zero,809770 <__subdf3+0x66c>
  8096dc:	1000661e 	bne	r2,zero,809878 <__subdf3+0x774>
  8096e0:	2990b03a 	or	r8,r5,r6
  8096e4:	40009626 	beq	r8,zero,809940 <__subdf3+0x83c>
  8096e8:	2807883a 	mov	r3,r5
  8096ec:	3023883a 	mov	r17,r6
  8096f0:	3825883a 	mov	r18,r7
  8096f4:	003ea406 	br	809188 <__alt_mem_onchip_mem+0xff801188>
  8096f8:	127ff804 	addi	r9,r2,-32
  8096fc:	01000804 	movi	r4,32
  809700:	2a52d83a 	srl	r9,r5,r9
  809704:	11008c26 	beq	r2,r4,809938 <__subdf3+0x834>
  809708:	01001004 	movi	r4,64
  80970c:	2085c83a 	sub	r2,r4,r2
  809710:	2884983a 	sll	r2,r5,r2
  809714:	118cb03a 	or	r6,r2,r6
  809718:	300cc03a 	cmpne	r6,r6,zero
  80971c:	4992b03a 	or	r9,r9,r6
  809720:	0005883a 	mov	r2,zero
  809724:	003f1206 	br	809370 <__alt_mem_onchip_mem+0xff801370>
  809728:	0101ffc4 	movi	r4,2047
  80972c:	493f9c1e 	bne	r9,r4,8095a0 <__alt_mem_onchip_mem+0xff8015a0>
  809730:	2807883a 	mov	r3,r5
  809734:	3023883a 	mov	r17,r6
  809738:	4821883a 	mov	r16,r9
  80973c:	3825883a 	mov	r18,r7
  809740:	003e9106 	br	809188 <__alt_mem_onchip_mem+0xff801188>
  809744:	80001f1e 	bne	r16,zero,8097c4 <__subdf3+0x6c0>
  809748:	1c48b03a 	or	r4,r3,r17
  80974c:	20005a26 	beq	r4,zero,8098b8 <__subdf3+0x7b4>
  809750:	0084303a 	nor	r2,zero,r2
  809754:	1000561e 	bne	r2,zero,8098b0 <__subdf3+0x7ac>
  809758:	89a3883a 	add	r17,r17,r6
  80975c:	1945883a 	add	r2,r3,r5
  809760:	898d803a 	cmpltu	r6,r17,r6
  809764:	3087883a 	add	r3,r6,r2
  809768:	4821883a 	mov	r16,r9
  80976c:	003f0506 	br	809384 <__alt_mem_onchip_mem+0xff801384>
  809770:	10002b1e 	bne	r2,zero,809820 <__subdf3+0x71c>
  809774:	2984b03a 	or	r2,r5,r6
  809778:	10008026 	beq	r2,zero,80997c <__subdf3+0x878>
  80977c:	2807883a 	mov	r3,r5
  809780:	3023883a 	mov	r17,r6
  809784:	3825883a 	mov	r18,r7
  809788:	0401ffc4 	movi	r16,2047
  80978c:	003e7e06 	br	809188 <__alt_mem_onchip_mem+0xff801188>
  809790:	3809883a 	mov	r4,r7
  809794:	0011883a 	mov	r8,zero
  809798:	0005883a 	mov	r2,zero
  80979c:	003ee306 	br	80932c <__alt_mem_onchip_mem+0xff80132c>
  8097a0:	1c62b03a 	or	r17,r3,r17
  8097a4:	8822c03a 	cmpne	r17,r17,zero
  8097a8:	0005883a 	mov	r2,zero
  8097ac:	003f8906 	br	8095d4 <__alt_mem_onchip_mem+0xff8015d4>
  8097b0:	3809883a 	mov	r4,r7
  8097b4:	4821883a 	mov	r16,r9
  8097b8:	0011883a 	mov	r8,zero
  8097bc:	0005883a 	mov	r2,zero
  8097c0:	003eda06 	br	80932c <__alt_mem_onchip_mem+0xff80132c>
  8097c4:	0101ffc4 	movi	r4,2047
  8097c8:	49003b26 	beq	r9,r4,8098b8 <__subdf3+0x7b4>
  8097cc:	0085c83a 	sub	r2,zero,r2
  8097d0:	18c02034 	orhi	r3,r3,128
  8097d4:	01000e04 	movi	r4,56
  8097d8:	20806e16 	blt	r4,r2,809994 <__subdf3+0x890>
  8097dc:	010007c4 	movi	r4,31
  8097e0:	20807716 	blt	r4,r2,8099c0 <__subdf3+0x8bc>
  8097e4:	01000804 	movi	r4,32
  8097e8:	2089c83a 	sub	r4,r4,r2
  8097ec:	1914983a 	sll	r10,r3,r4
  8097f0:	8890d83a 	srl	r8,r17,r2
  8097f4:	8908983a 	sll	r4,r17,r4
  8097f8:	1884d83a 	srl	r2,r3,r2
  8097fc:	5222b03a 	or	r17,r10,r8
  809800:	2006c03a 	cmpne	r3,r4,zero
  809804:	88e2b03a 	or	r17,r17,r3
  809808:	89a3883a 	add	r17,r17,r6
  80980c:	1145883a 	add	r2,r2,r5
  809810:	898d803a 	cmpltu	r6,r17,r6
  809814:	3087883a 	add	r3,r6,r2
  809818:	4821883a 	mov	r16,r9
  80981c:	003ed906 	br	809384 <__alt_mem_onchip_mem+0xff801384>
  809820:	2984b03a 	or	r2,r5,r6
  809824:	10004226 	beq	r2,zero,809930 <__subdf3+0x82c>
  809828:	1808d0fa 	srli	r4,r3,3
  80982c:	8822d0fa 	srli	r17,r17,3
  809830:	1806977a 	slli	r3,r3,29
  809834:	2080022c 	andhi	r2,r4,8
  809838:	1c62b03a 	or	r17,r3,r17
  80983c:	10000826 	beq	r2,zero,809860 <__subdf3+0x75c>
  809840:	2812d0fa 	srli	r9,r5,3
  809844:	4880022c 	andhi	r2,r9,8
  809848:	1000051e 	bne	r2,zero,809860 <__subdf3+0x75c>
  80984c:	300cd0fa 	srli	r6,r6,3
  809850:	2804977a 	slli	r2,r5,29
  809854:	4809883a 	mov	r4,r9
  809858:	3825883a 	mov	r18,r7
  80985c:	11a2b03a 	or	r17,r2,r6
  809860:	8806d77a 	srli	r3,r17,29
  809864:	200890fa 	slli	r4,r4,3
  809868:	882290fa 	slli	r17,r17,3
  80986c:	0401ffc4 	movi	r16,2047
  809870:	1906b03a 	or	r3,r3,r4
  809874:	003e4406 	br	809188 <__alt_mem_onchip_mem+0xff801188>
  809878:	2984b03a 	or	r2,r5,r6
  80987c:	103e4226 	beq	r2,zero,809188 <__alt_mem_onchip_mem+0xff801188>
  809880:	8989c83a 	sub	r4,r17,r6
  809884:	8911803a 	cmpltu	r8,r17,r4
  809888:	1945c83a 	sub	r2,r3,r5
  80988c:	1205c83a 	sub	r2,r2,r8
  809890:	1200202c 	andhi	r8,r2,128
  809894:	403e9a26 	beq	r8,zero,809300 <__alt_mem_onchip_mem+0xff801300>
  809898:	3463c83a 	sub	r17,r6,r17
  80989c:	28c5c83a 	sub	r2,r5,r3
  8098a0:	344d803a 	cmpltu	r6,r6,r17
  8098a4:	1187c83a 	sub	r3,r2,r6
  8098a8:	3825883a 	mov	r18,r7
  8098ac:	003e3606 	br	809188 <__alt_mem_onchip_mem+0xff801188>
  8098b0:	0101ffc4 	movi	r4,2047
  8098b4:	493fc71e 	bne	r9,r4,8097d4 <__alt_mem_onchip_mem+0xff8017d4>
  8098b8:	2807883a 	mov	r3,r5
  8098bc:	3023883a 	mov	r17,r6
  8098c0:	4821883a 	mov	r16,r9
  8098c4:	003e3006 	br	809188 <__alt_mem_onchip_mem+0xff801188>
  8098c8:	10003626 	beq	r2,zero,8099a4 <__subdf3+0x8a0>
  8098cc:	2984b03a 	or	r2,r5,r6
  8098d0:	10001726 	beq	r2,zero,809930 <__subdf3+0x82c>
  8098d4:	1808d0fa 	srli	r4,r3,3
  8098d8:	8822d0fa 	srli	r17,r17,3
  8098dc:	1806977a 	slli	r3,r3,29
  8098e0:	2080022c 	andhi	r2,r4,8
  8098e4:	1c62b03a 	or	r17,r3,r17
  8098e8:	10000726 	beq	r2,zero,809908 <__subdf3+0x804>
  8098ec:	2812d0fa 	srli	r9,r5,3
  8098f0:	4880022c 	andhi	r2,r9,8
  8098f4:	1000041e 	bne	r2,zero,809908 <__subdf3+0x804>
  8098f8:	300cd0fa 	srli	r6,r6,3
  8098fc:	2804977a 	slli	r2,r5,29
  809900:	4809883a 	mov	r4,r9
  809904:	11a2b03a 	or	r17,r2,r6
  809908:	8806d77a 	srli	r3,r17,29
  80990c:	200890fa 	slli	r4,r4,3
  809910:	882290fa 	slli	r17,r17,3
  809914:	3825883a 	mov	r18,r7
  809918:	1906b03a 	or	r3,r3,r4
  80991c:	0401ffc4 	movi	r16,2047
  809920:	003e1906 	br	809188 <__alt_mem_onchip_mem+0xff801188>
  809924:	000b883a 	mov	r5,zero
  809928:	0005883a 	mov	r2,zero
  80992c:	003e2e06 	br	8091e8 <__alt_mem_onchip_mem+0xff8011e8>
  809930:	0401ffc4 	movi	r16,2047
  809934:	003e1406 	br	809188 <__alt_mem_onchip_mem+0xff801188>
  809938:	0005883a 	mov	r2,zero
  80993c:	003f7506 	br	809714 <__alt_mem_onchip_mem+0xff801714>
  809940:	0005883a 	mov	r2,zero
  809944:	0009883a 	mov	r4,zero
  809948:	003e7806 	br	80932c <__alt_mem_onchip_mem+0xff80132c>
  80994c:	123ff804 	addi	r8,r2,-32
  809950:	01000804 	movi	r4,32
  809954:	1a10d83a 	srl	r8,r3,r8
  809958:	11002526 	beq	r2,r4,8099f0 <__subdf3+0x8ec>
  80995c:	01001004 	movi	r4,64
  809960:	2085c83a 	sub	r2,r4,r2
  809964:	1884983a 	sll	r2,r3,r2
  809968:	1444b03a 	or	r2,r2,r17
  80996c:	1004c03a 	cmpne	r2,r2,zero
  809970:	40a2b03a 	or	r17,r8,r2
  809974:	0005883a 	mov	r2,zero
  809978:	003f1606 	br	8095d4 <__alt_mem_onchip_mem+0xff8015d4>
  80997c:	02000434 	movhi	r8,16
  809980:	0009883a 	mov	r4,zero
  809984:	423fffc4 	addi	r8,r8,-1
  809988:	00bfffc4 	movi	r2,-1
  80998c:	0401ffc4 	movi	r16,2047
  809990:	003e6606 	br	80932c <__alt_mem_onchip_mem+0xff80132c>
  809994:	1c62b03a 	or	r17,r3,r17
  809998:	8822c03a 	cmpne	r17,r17,zero
  80999c:	0005883a 	mov	r2,zero
  8099a0:	003f9906 	br	809808 <__alt_mem_onchip_mem+0xff801808>
  8099a4:	2807883a 	mov	r3,r5
  8099a8:	3023883a 	mov	r17,r6
  8099ac:	0401ffc4 	movi	r16,2047
  8099b0:	003df506 	br	809188 <__alt_mem_onchip_mem+0xff801188>
  8099b4:	2807883a 	mov	r3,r5
  8099b8:	3023883a 	mov	r17,r6
  8099bc:	003df206 	br	809188 <__alt_mem_onchip_mem+0xff801188>
  8099c0:	123ff804 	addi	r8,r2,-32
  8099c4:	01000804 	movi	r4,32
  8099c8:	1a10d83a 	srl	r8,r3,r8
  8099cc:	11000a26 	beq	r2,r4,8099f8 <__subdf3+0x8f4>
  8099d0:	01001004 	movi	r4,64
  8099d4:	2085c83a 	sub	r2,r4,r2
  8099d8:	1884983a 	sll	r2,r3,r2
  8099dc:	1444b03a 	or	r2,r2,r17
  8099e0:	1004c03a 	cmpne	r2,r2,zero
  8099e4:	40a2b03a 	or	r17,r8,r2
  8099e8:	0005883a 	mov	r2,zero
  8099ec:	003f8606 	br	809808 <__alt_mem_onchip_mem+0xff801808>
  8099f0:	0005883a 	mov	r2,zero
  8099f4:	003fdc06 	br	809968 <__alt_mem_onchip_mem+0xff801968>
  8099f8:	0005883a 	mov	r2,zero
  8099fc:	003ff706 	br	8099dc <__alt_mem_onchip_mem+0xff8019dc>

00809a00 <__floatsidf>:
  809a00:	defffd04 	addi	sp,sp,-12
  809a04:	dfc00215 	stw	ra,8(sp)
  809a08:	dc400115 	stw	r17,4(sp)
  809a0c:	dc000015 	stw	r16,0(sp)
  809a10:	20002b26 	beq	r4,zero,809ac0 <__floatsidf+0xc0>
  809a14:	2023883a 	mov	r17,r4
  809a18:	2020d7fa 	srli	r16,r4,31
  809a1c:	20002d16 	blt	r4,zero,809ad4 <__floatsidf+0xd4>
  809a20:	8809883a 	mov	r4,r17
  809a24:	0809b840 	call	809b84 <__clzsi2>
  809a28:	01410784 	movi	r5,1054
  809a2c:	288bc83a 	sub	r5,r5,r2
  809a30:	01010cc4 	movi	r4,1075
  809a34:	2149c83a 	sub	r4,r4,r5
  809a38:	00c007c4 	movi	r3,31
  809a3c:	1900160e 	bge	r3,r4,809a98 <__floatsidf+0x98>
  809a40:	00c104c4 	movi	r3,1043
  809a44:	1947c83a 	sub	r3,r3,r5
  809a48:	88c6983a 	sll	r3,r17,r3
  809a4c:	00800434 	movhi	r2,16
  809a50:	10bfffc4 	addi	r2,r2,-1
  809a54:	1886703a 	and	r3,r3,r2
  809a58:	2941ffcc 	andi	r5,r5,2047
  809a5c:	800d883a 	mov	r6,r16
  809a60:	0005883a 	mov	r2,zero
  809a64:	280a953a 	slli	r5,r5,20
  809a68:	31803fcc 	andi	r6,r6,255
  809a6c:	01000434 	movhi	r4,16
  809a70:	300c97fa 	slli	r6,r6,31
  809a74:	213fffc4 	addi	r4,r4,-1
  809a78:	1906703a 	and	r3,r3,r4
  809a7c:	1946b03a 	or	r3,r3,r5
  809a80:	1986b03a 	or	r3,r3,r6
  809a84:	dfc00217 	ldw	ra,8(sp)
  809a88:	dc400117 	ldw	r17,4(sp)
  809a8c:	dc000017 	ldw	r16,0(sp)
  809a90:	dec00304 	addi	sp,sp,12
  809a94:	f800283a 	ret
  809a98:	00c002c4 	movi	r3,11
  809a9c:	1887c83a 	sub	r3,r3,r2
  809aa0:	88c6d83a 	srl	r3,r17,r3
  809aa4:	8904983a 	sll	r2,r17,r4
  809aa8:	01000434 	movhi	r4,16
  809aac:	213fffc4 	addi	r4,r4,-1
  809ab0:	2941ffcc 	andi	r5,r5,2047
  809ab4:	1906703a 	and	r3,r3,r4
  809ab8:	800d883a 	mov	r6,r16
  809abc:	003fe906 	br	809a64 <__alt_mem_onchip_mem+0xff801a64>
  809ac0:	000d883a 	mov	r6,zero
  809ac4:	000b883a 	mov	r5,zero
  809ac8:	0007883a 	mov	r3,zero
  809acc:	0005883a 	mov	r2,zero
  809ad0:	003fe406 	br	809a64 <__alt_mem_onchip_mem+0xff801a64>
  809ad4:	0123c83a 	sub	r17,zero,r4
  809ad8:	003fd106 	br	809a20 <__alt_mem_onchip_mem+0xff801a20>

00809adc <__floatunsidf>:
  809adc:	defffe04 	addi	sp,sp,-8
  809ae0:	dc000015 	stw	r16,0(sp)
  809ae4:	dfc00115 	stw	ra,4(sp)
  809ae8:	2021883a 	mov	r16,r4
  809aec:	20002226 	beq	r4,zero,809b78 <__floatunsidf+0x9c>
  809af0:	0809b840 	call	809b84 <__clzsi2>
  809af4:	01010784 	movi	r4,1054
  809af8:	2089c83a 	sub	r4,r4,r2
  809afc:	01810cc4 	movi	r6,1075
  809b00:	310dc83a 	sub	r6,r6,r4
  809b04:	00c007c4 	movi	r3,31
  809b08:	1980120e 	bge	r3,r6,809b54 <__floatunsidf+0x78>
  809b0c:	00c104c4 	movi	r3,1043
  809b10:	1907c83a 	sub	r3,r3,r4
  809b14:	80ca983a 	sll	r5,r16,r3
  809b18:	00800434 	movhi	r2,16
  809b1c:	10bfffc4 	addi	r2,r2,-1
  809b20:	2101ffcc 	andi	r4,r4,2047
  809b24:	0021883a 	mov	r16,zero
  809b28:	288a703a 	and	r5,r5,r2
  809b2c:	2008953a 	slli	r4,r4,20
  809b30:	00c00434 	movhi	r3,16
  809b34:	18ffffc4 	addi	r3,r3,-1
  809b38:	28c6703a 	and	r3,r5,r3
  809b3c:	8005883a 	mov	r2,r16
  809b40:	1906b03a 	or	r3,r3,r4
  809b44:	dfc00117 	ldw	ra,4(sp)
  809b48:	dc000017 	ldw	r16,0(sp)
  809b4c:	dec00204 	addi	sp,sp,8
  809b50:	f800283a 	ret
  809b54:	00c002c4 	movi	r3,11
  809b58:	188bc83a 	sub	r5,r3,r2
  809b5c:	814ad83a 	srl	r5,r16,r5
  809b60:	00c00434 	movhi	r3,16
  809b64:	18ffffc4 	addi	r3,r3,-1
  809b68:	81a0983a 	sll	r16,r16,r6
  809b6c:	2101ffcc 	andi	r4,r4,2047
  809b70:	28ca703a 	and	r5,r5,r3
  809b74:	003fed06 	br	809b2c <__alt_mem_onchip_mem+0xff801b2c>
  809b78:	0009883a 	mov	r4,zero
  809b7c:	000b883a 	mov	r5,zero
  809b80:	003fea06 	br	809b2c <__alt_mem_onchip_mem+0xff801b2c>

00809b84 <__clzsi2>:
  809b84:	00bfffd4 	movui	r2,65535
  809b88:	11000536 	bltu	r2,r4,809ba0 <__clzsi2+0x1c>
  809b8c:	00803fc4 	movi	r2,255
  809b90:	11000f36 	bltu	r2,r4,809bd0 <__clzsi2+0x4c>
  809b94:	00800804 	movi	r2,32
  809b98:	0007883a 	mov	r3,zero
  809b9c:	00000506 	br	809bb4 <__clzsi2+0x30>
  809ba0:	00804034 	movhi	r2,256
  809ba4:	10bfffc4 	addi	r2,r2,-1
  809ba8:	11000c2e 	bgeu	r2,r4,809bdc <__clzsi2+0x58>
  809bac:	00800204 	movi	r2,8
  809bb0:	00c00604 	movi	r3,24
  809bb4:	20c8d83a 	srl	r4,r4,r3
  809bb8:	00c020b4 	movhi	r3,130
  809bbc:	18e24b04 	addi	r3,r3,-30420
  809bc0:	1909883a 	add	r4,r3,r4
  809bc4:	20c00003 	ldbu	r3,0(r4)
  809bc8:	10c5c83a 	sub	r2,r2,r3
  809bcc:	f800283a 	ret
  809bd0:	00800604 	movi	r2,24
  809bd4:	00c00204 	movi	r3,8
  809bd8:	003ff606 	br	809bb4 <__alt_mem_onchip_mem+0xff801bb4>
  809bdc:	00800404 	movi	r2,16
  809be0:	1007883a 	mov	r3,r2
  809be4:	003ff306 	br	809bb4 <__alt_mem_onchip_mem+0xff801bb4>

00809be8 <_printf_r>:
  809be8:	defffd04 	addi	sp,sp,-12
  809bec:	2805883a 	mov	r2,r5
  809bf0:	dfc00015 	stw	ra,0(sp)
  809bf4:	d9800115 	stw	r6,4(sp)
  809bf8:	d9c00215 	stw	r7,8(sp)
  809bfc:	21400217 	ldw	r5,8(r4)
  809c00:	d9c00104 	addi	r7,sp,4
  809c04:	100d883a 	mov	r6,r2
  809c08:	0809c540 	call	809c54 <___vfprintf_internal_r>
  809c0c:	dfc00017 	ldw	ra,0(sp)
  809c10:	dec00304 	addi	sp,sp,12
  809c14:	f800283a 	ret

00809c18 <printf>:
  809c18:	defffc04 	addi	sp,sp,-16
  809c1c:	dfc00015 	stw	ra,0(sp)
  809c20:	d9400115 	stw	r5,4(sp)
  809c24:	d9800215 	stw	r6,8(sp)
  809c28:	d9c00315 	stw	r7,12(sp)
  809c2c:	008020b4 	movhi	r2,130
  809c30:	10aad304 	addi	r2,r2,-21684
  809c34:	10800017 	ldw	r2,0(r2)
  809c38:	200b883a 	mov	r5,r4
  809c3c:	d9800104 	addi	r6,sp,4
  809c40:	11000217 	ldw	r4,8(r2)
  809c44:	080be4c0 	call	80be4c <__vfprintf_internal>
  809c48:	dfc00017 	ldw	ra,0(sp)
  809c4c:	dec00404 	addi	sp,sp,16
  809c50:	f800283a 	ret

00809c54 <___vfprintf_internal_r>:
  809c54:	deffb804 	addi	sp,sp,-288
  809c58:	dfc04715 	stw	ra,284(sp)
  809c5c:	ddc04515 	stw	r23,276(sp)
  809c60:	dd404315 	stw	r21,268(sp)
  809c64:	d9002c15 	stw	r4,176(sp)
  809c68:	282f883a 	mov	r23,r5
  809c6c:	302b883a 	mov	r21,r6
  809c70:	d9c02d15 	stw	r7,180(sp)
  809c74:	df004615 	stw	fp,280(sp)
  809c78:	dd804415 	stw	r22,272(sp)
  809c7c:	dd004215 	stw	r20,264(sp)
  809c80:	dcc04115 	stw	r19,260(sp)
  809c84:	dc804015 	stw	r18,256(sp)
  809c88:	dc403f15 	stw	r17,252(sp)
  809c8c:	dc003e15 	stw	r16,248(sp)
  809c90:	080e5b00 	call	80e5b0 <_localeconv_r>
  809c94:	10800017 	ldw	r2,0(r2)
  809c98:	1009883a 	mov	r4,r2
  809c9c:	d8803415 	stw	r2,208(sp)
  809ca0:	08105d80 	call	8105d8 <strlen>
  809ca4:	d8803715 	stw	r2,220(sp)
  809ca8:	d8802c17 	ldw	r2,176(sp)
  809cac:	10000226 	beq	r2,zero,809cb8 <___vfprintf_internal_r+0x64>
  809cb0:	10800e17 	ldw	r2,56(r2)
  809cb4:	1000f926 	beq	r2,zero,80a09c <___vfprintf_internal_r+0x448>
  809cb8:	b880030b 	ldhu	r2,12(r23)
  809cbc:	10c8000c 	andi	r3,r2,8192
  809cc0:	1800061e 	bne	r3,zero,809cdc <___vfprintf_internal_r+0x88>
  809cc4:	b9001917 	ldw	r4,100(r23)
  809cc8:	00f7ffc4 	movi	r3,-8193
  809ccc:	10880014 	ori	r2,r2,8192
  809cd0:	20c6703a 	and	r3,r4,r3
  809cd4:	b880030d 	sth	r2,12(r23)
  809cd8:	b8c01915 	stw	r3,100(r23)
  809cdc:	10c0020c 	andi	r3,r2,8
  809ce0:	1800c126 	beq	r3,zero,809fe8 <___vfprintf_internal_r+0x394>
  809ce4:	b8c00417 	ldw	r3,16(r23)
  809ce8:	1800bf26 	beq	r3,zero,809fe8 <___vfprintf_internal_r+0x394>
  809cec:	1080068c 	andi	r2,r2,26
  809cf0:	00c00284 	movi	r3,10
  809cf4:	10c0c426 	beq	r2,r3,80a008 <___vfprintf_internal_r+0x3b4>
  809cf8:	d8c00404 	addi	r3,sp,16
  809cfc:	050020b4 	movhi	r20,130
  809d00:	d9001e04 	addi	r4,sp,120
  809d04:	a5229b84 	addi	r20,r20,-30098
  809d08:	d8c01e15 	stw	r3,120(sp)
  809d0c:	d8002015 	stw	zero,128(sp)
  809d10:	d8001f15 	stw	zero,124(sp)
  809d14:	d8003315 	stw	zero,204(sp)
  809d18:	d8003615 	stw	zero,216(sp)
  809d1c:	d8003815 	stw	zero,224(sp)
  809d20:	1811883a 	mov	r8,r3
  809d24:	d8003915 	stw	zero,228(sp)
  809d28:	d8003a15 	stw	zero,232(sp)
  809d2c:	d8002f15 	stw	zero,188(sp)
  809d30:	d9002815 	stw	r4,160(sp)
  809d34:	a8800007 	ldb	r2,0(r21)
  809d38:	10027b26 	beq	r2,zero,80a728 <___vfprintf_internal_r+0xad4>
  809d3c:	00c00944 	movi	r3,37
  809d40:	a821883a 	mov	r16,r21
  809d44:	10c0021e 	bne	r2,r3,809d50 <___vfprintf_internal_r+0xfc>
  809d48:	00001406 	br	809d9c <___vfprintf_internal_r+0x148>
  809d4c:	10c00326 	beq	r2,r3,809d5c <___vfprintf_internal_r+0x108>
  809d50:	84000044 	addi	r16,r16,1
  809d54:	80800007 	ldb	r2,0(r16)
  809d58:	103ffc1e 	bne	r2,zero,809d4c <__alt_mem_onchip_mem+0xff801d4c>
  809d5c:	8563c83a 	sub	r17,r16,r21
  809d60:	88000e26 	beq	r17,zero,809d9c <___vfprintf_internal_r+0x148>
  809d64:	d8c02017 	ldw	r3,128(sp)
  809d68:	d8801f17 	ldw	r2,124(sp)
  809d6c:	45400015 	stw	r21,0(r8)
  809d70:	1c47883a 	add	r3,r3,r17
  809d74:	10800044 	addi	r2,r2,1
  809d78:	d8c02015 	stw	r3,128(sp)
  809d7c:	44400115 	stw	r17,4(r8)
  809d80:	d8801f15 	stw	r2,124(sp)
  809d84:	00c001c4 	movi	r3,7
  809d88:	1880a716 	blt	r3,r2,80a028 <___vfprintf_internal_r+0x3d4>
  809d8c:	42000204 	addi	r8,r8,8
  809d90:	d9402f17 	ldw	r5,188(sp)
  809d94:	2c4b883a 	add	r5,r5,r17
  809d98:	d9402f15 	stw	r5,188(sp)
  809d9c:	80800007 	ldb	r2,0(r16)
  809da0:	1000a826 	beq	r2,zero,80a044 <___vfprintf_internal_r+0x3f0>
  809da4:	84400047 	ldb	r17,1(r16)
  809da8:	00bfffc4 	movi	r2,-1
  809dac:	85400044 	addi	r21,r16,1
  809db0:	d8002785 	stb	zero,158(sp)
  809db4:	0007883a 	mov	r3,zero
  809db8:	000f883a 	mov	r7,zero
  809dbc:	d8802915 	stw	r2,164(sp)
  809dc0:	d8003115 	stw	zero,196(sp)
  809dc4:	0025883a 	mov	r18,zero
  809dc8:	01401604 	movi	r5,88
  809dcc:	01800244 	movi	r6,9
  809dd0:	02800a84 	movi	r10,42
  809dd4:	02401b04 	movi	r9,108
  809dd8:	ad400044 	addi	r21,r21,1
  809ddc:	88bff804 	addi	r2,r17,-32
  809de0:	28830436 	bltu	r5,r2,80a9f4 <___vfprintf_internal_r+0xda0>
  809de4:	100490ba 	slli	r2,r2,2
  809de8:	01002074 	movhi	r4,129
  809dec:	21277f04 	addi	r4,r4,-25092
  809df0:	1105883a 	add	r2,r2,r4
  809df4:	10800017 	ldw	r2,0(r2)
  809df8:	1000683a 	jmp	r2
  809dfc:	0080a914 	movui	r2,676
  809e00:	0080a9f4 	movhi	r2,679
  809e04:	0080a9f4 	movhi	r2,679
  809e08:	0080a934 	movhi	r2,676
  809e0c:	0080a9f4 	movhi	r2,679
  809e10:	0080a9f4 	movhi	r2,679
  809e14:	0080a9f4 	movhi	r2,679
  809e18:	0080a9f4 	movhi	r2,679
  809e1c:	0080a9f4 	movhi	r2,679
  809e20:	0080a9f4 	movhi	r2,679
  809e24:	0080a0a8 	cmpgeui	r2,zero,642
  809e28:	0080a850 	cmplti	r2,zero,673
  809e2c:	0080a9f4 	movhi	r2,679
  809e30:	00809f70 	cmpltui	r2,zero,637
  809e34:	0080a0d0 	cmplti	r2,zero,643
  809e38:	0080a9f4 	movhi	r2,679
  809e3c:	0080a110 	cmplti	r2,zero,644
  809e40:	0080a11c 	xori	r2,zero,644
  809e44:	0080a11c 	xori	r2,zero,644
  809e48:	0080a11c 	xori	r2,zero,644
  809e4c:	0080a11c 	xori	r2,zero,644
  809e50:	0080a11c 	xori	r2,zero,644
  809e54:	0080a11c 	xori	r2,zero,644
  809e58:	0080a11c 	xori	r2,zero,644
  809e5c:	0080a11c 	xori	r2,zero,644
  809e60:	0080a11c 	xori	r2,zero,644
  809e64:	0080a9f4 	movhi	r2,679
  809e68:	0080a9f4 	movhi	r2,679
  809e6c:	0080a9f4 	movhi	r2,679
  809e70:	0080a9f4 	movhi	r2,679
  809e74:	0080a9f4 	movhi	r2,679
  809e78:	0080a9f4 	movhi	r2,679
  809e7c:	0080a9f4 	movhi	r2,679
  809e80:	0080a9f4 	movhi	r2,679
  809e84:	0080a9f4 	movhi	r2,679
  809e88:	0080a9f4 	movhi	r2,679
  809e8c:	0080a150 	cmplti	r2,zero,645
  809e90:	0080a20c 	andi	r2,zero,648
  809e94:	0080a9f4 	movhi	r2,679
  809e98:	0080a20c 	andi	r2,zero,648
  809e9c:	0080a9f4 	movhi	r2,679
  809ea0:	0080a9f4 	movhi	r2,679
  809ea4:	0080a9f4 	movhi	r2,679
  809ea8:	0080a9f4 	movhi	r2,679
  809eac:	0080a2ac 	andhi	r2,zero,650
  809eb0:	0080a9f4 	movhi	r2,679
  809eb4:	0080a9f4 	movhi	r2,679
  809eb8:	0080a2b8 	rdprs	r2,zero,650
  809ebc:	0080a9f4 	movhi	r2,679
  809ec0:	0080a9f4 	movhi	r2,679
  809ec4:	0080a9f4 	movhi	r2,679
  809ec8:	0080a9f4 	movhi	r2,679
  809ecc:	0080a9f4 	movhi	r2,679
  809ed0:	0080a730 	cmpltui	r2,zero,668
  809ed4:	0080a9f4 	movhi	r2,679
  809ed8:	0080a9f4 	movhi	r2,679
  809edc:	0080a790 	cmplti	r2,zero,670
  809ee0:	0080a9f4 	movhi	r2,679
  809ee4:	0080a9f4 	movhi	r2,679
  809ee8:	0080a9f4 	movhi	r2,679
  809eec:	0080a9f4 	movhi	r2,679
  809ef0:	0080a9f4 	movhi	r2,679
  809ef4:	0080a9f4 	movhi	r2,679
  809ef8:	0080a9f4 	movhi	r2,679
  809efc:	0080a9f4 	movhi	r2,679
  809f00:	0080a9f4 	movhi	r2,679
  809f04:	0080a9f4 	movhi	r2,679
  809f08:	0080a9a0 	cmpeqi	r2,zero,678
  809f0c:	0080a940 	call	80a94 <__alt_mem_sdram-0x77f56c>
  809f10:	0080a20c 	andi	r2,zero,648
  809f14:	0080a20c 	andi	r2,zero,648
  809f18:	0080a20c 	andi	r2,zero,648
  809f1c:	0080a950 	cmplti	r2,zero,677
  809f20:	0080a940 	call	80a94 <__alt_mem_sdram-0x77f56c>
  809f24:	0080a9f4 	movhi	r2,679
  809f28:	0080a9f4 	movhi	r2,679
  809f2c:	0080a95c 	xori	r2,zero,677
  809f30:	0080a9f4 	movhi	r2,679
  809f34:	0080a96c 	andhi	r2,zero,677
  809f38:	0080a840 	call	80a84 <__alt_mem_sdram-0x77f57c>
  809f3c:	00809f7c 	xorhi	r2,zero,637
  809f40:	0080a860 	cmpeqi	r2,zero,673
  809f44:	0080a9f4 	movhi	r2,679
  809f48:	0080a86c 	andhi	r2,zero,673
  809f4c:	0080a9f4 	movhi	r2,679
  809f50:	0080a8c8 	cmpgei	r2,zero,675
  809f54:	0080a9f4 	movhi	r2,679
  809f58:	0080a9f4 	movhi	r2,679
  809f5c:	0080a8d8 	cmpnei	r2,zero,675
  809f60:	d9003117 	ldw	r4,196(sp)
  809f64:	d8802d15 	stw	r2,180(sp)
  809f68:	0109c83a 	sub	r4,zero,r4
  809f6c:	d9003115 	stw	r4,196(sp)
  809f70:	94800114 	ori	r18,r18,4
  809f74:	ac400007 	ldb	r17,0(r21)
  809f78:	003f9706 	br	809dd8 <__alt_mem_onchip_mem+0xff801dd8>
  809f7c:	00800c04 	movi	r2,48
  809f80:	d9002d17 	ldw	r4,180(sp)
  809f84:	d9402917 	ldw	r5,164(sp)
  809f88:	d8802705 	stb	r2,156(sp)
  809f8c:	00801e04 	movi	r2,120
  809f90:	d8802745 	stb	r2,157(sp)
  809f94:	d8002785 	stb	zero,158(sp)
  809f98:	20c00104 	addi	r3,r4,4
  809f9c:	24c00017 	ldw	r19,0(r4)
  809fa0:	002d883a 	mov	r22,zero
  809fa4:	90800094 	ori	r2,r18,2
  809fa8:	28029a16 	blt	r5,zero,80aa14 <___vfprintf_internal_r+0xdc0>
  809fac:	00bfdfc4 	movi	r2,-129
  809fb0:	90a4703a 	and	r18,r18,r2
  809fb4:	d8c02d15 	stw	r3,180(sp)
  809fb8:	94800094 	ori	r18,r18,2
  809fbc:	9802871e 	bne	r19,zero,80a9dc <___vfprintf_internal_r+0xd88>
  809fc0:	008020b4 	movhi	r2,130
  809fc4:	10a29404 	addi	r2,r2,-30128
  809fc8:	d8803915 	stw	r2,228(sp)
  809fcc:	04401e04 	movi	r17,120
  809fd0:	d8802917 	ldw	r2,164(sp)
  809fd4:	0039883a 	mov	fp,zero
  809fd8:	1001e926 	beq	r2,zero,80a780 <___vfprintf_internal_r+0xb2c>
  809fdc:	0027883a 	mov	r19,zero
  809fe0:	002d883a 	mov	r22,zero
  809fe4:	00020506 	br	80a7fc <___vfprintf_internal_r+0xba8>
  809fe8:	d9002c17 	ldw	r4,176(sp)
  809fec:	b80b883a 	mov	r5,r23
  809ff0:	080bf240 	call	80bf24 <__swsetup_r>
  809ff4:	1005ac1e 	bne	r2,zero,80b6a8 <___vfprintf_internal_r+0x1a54>
  809ff8:	b880030b 	ldhu	r2,12(r23)
  809ffc:	00c00284 	movi	r3,10
  80a000:	1080068c 	andi	r2,r2,26
  80a004:	10ff3c1e 	bne	r2,r3,809cf8 <__alt_mem_onchip_mem+0xff801cf8>
  80a008:	b880038f 	ldh	r2,14(r23)
  80a00c:	103f3a16 	blt	r2,zero,809cf8 <__alt_mem_onchip_mem+0xff801cf8>
  80a010:	d9c02d17 	ldw	r7,180(sp)
  80a014:	d9002c17 	ldw	r4,176(sp)
  80a018:	a80d883a 	mov	r6,r21
  80a01c:	b80b883a 	mov	r5,r23
  80a020:	080be680 	call	80be68 <__sbprintf>
  80a024:	00001106 	br	80a06c <___vfprintf_internal_r+0x418>
  80a028:	d9002c17 	ldw	r4,176(sp)
  80a02c:	d9801e04 	addi	r6,sp,120
  80a030:	b80b883a 	mov	r5,r23
  80a034:	081076c0 	call	81076c <__sprint_r>
  80a038:	1000081e 	bne	r2,zero,80a05c <___vfprintf_internal_r+0x408>
  80a03c:	da000404 	addi	r8,sp,16
  80a040:	003f5306 	br	809d90 <__alt_mem_onchip_mem+0xff801d90>
  80a044:	d8802017 	ldw	r2,128(sp)
  80a048:	10000426 	beq	r2,zero,80a05c <___vfprintf_internal_r+0x408>
  80a04c:	d9002c17 	ldw	r4,176(sp)
  80a050:	d9801e04 	addi	r6,sp,120
  80a054:	b80b883a 	mov	r5,r23
  80a058:	081076c0 	call	81076c <__sprint_r>
  80a05c:	b880030b 	ldhu	r2,12(r23)
  80a060:	1080100c 	andi	r2,r2,64
  80a064:	1005901e 	bne	r2,zero,80b6a8 <___vfprintf_internal_r+0x1a54>
  80a068:	d8802f17 	ldw	r2,188(sp)
  80a06c:	dfc04717 	ldw	ra,284(sp)
  80a070:	df004617 	ldw	fp,280(sp)
  80a074:	ddc04517 	ldw	r23,276(sp)
  80a078:	dd804417 	ldw	r22,272(sp)
  80a07c:	dd404317 	ldw	r21,268(sp)
  80a080:	dd004217 	ldw	r20,264(sp)
  80a084:	dcc04117 	ldw	r19,260(sp)
  80a088:	dc804017 	ldw	r18,256(sp)
  80a08c:	dc403f17 	ldw	r17,252(sp)
  80a090:	dc003e17 	ldw	r16,248(sp)
  80a094:	dec04804 	addi	sp,sp,288
  80a098:	f800283a 	ret
  80a09c:	d9002c17 	ldw	r4,176(sp)
  80a0a0:	080def80 	call	80def8 <__sinit>
  80a0a4:	003f0406 	br	809cb8 <__alt_mem_onchip_mem+0xff801cb8>
  80a0a8:	d8802d17 	ldw	r2,180(sp)
  80a0ac:	d9002d17 	ldw	r4,180(sp)
  80a0b0:	10800017 	ldw	r2,0(r2)
  80a0b4:	d8803115 	stw	r2,196(sp)
  80a0b8:	20800104 	addi	r2,r4,4
  80a0bc:	d9003117 	ldw	r4,196(sp)
  80a0c0:	203fa716 	blt	r4,zero,809f60 <__alt_mem_onchip_mem+0xff801f60>
  80a0c4:	d8802d15 	stw	r2,180(sp)
  80a0c8:	ac400007 	ldb	r17,0(r21)
  80a0cc:	003f4206 	br	809dd8 <__alt_mem_onchip_mem+0xff801dd8>
  80a0d0:	ac400007 	ldb	r17,0(r21)
  80a0d4:	aac00044 	addi	r11,r21,1
  80a0d8:	8a872826 	beq	r17,r10,80bd7c <___vfprintf_internal_r+0x2128>
  80a0dc:	88bff404 	addi	r2,r17,-48
  80a0e0:	0009883a 	mov	r4,zero
  80a0e4:	30867d36 	bltu	r6,r2,80badc <___vfprintf_internal_r+0x1e88>
  80a0e8:	5c400007 	ldb	r17,0(r11)
  80a0ec:	210002a4 	muli	r4,r4,10
  80a0f0:	5d400044 	addi	r21,r11,1
  80a0f4:	a817883a 	mov	r11,r21
  80a0f8:	2089883a 	add	r4,r4,r2
  80a0fc:	88bff404 	addi	r2,r17,-48
  80a100:	30bff92e 	bgeu	r6,r2,80a0e8 <__alt_mem_onchip_mem+0xff8020e8>
  80a104:	2005c916 	blt	r4,zero,80b82c <___vfprintf_internal_r+0x1bd8>
  80a108:	d9002915 	stw	r4,164(sp)
  80a10c:	003f3306 	br	809ddc <__alt_mem_onchip_mem+0xff801ddc>
  80a110:	94802014 	ori	r18,r18,128
  80a114:	ac400007 	ldb	r17,0(r21)
  80a118:	003f2f06 	br	809dd8 <__alt_mem_onchip_mem+0xff801dd8>
  80a11c:	a809883a 	mov	r4,r21
  80a120:	d8003115 	stw	zero,196(sp)
  80a124:	88bff404 	addi	r2,r17,-48
  80a128:	0017883a 	mov	r11,zero
  80a12c:	24400007 	ldb	r17,0(r4)
  80a130:	5ac002a4 	muli	r11,r11,10
  80a134:	ad400044 	addi	r21,r21,1
  80a138:	a809883a 	mov	r4,r21
  80a13c:	12d7883a 	add	r11,r2,r11
  80a140:	88bff404 	addi	r2,r17,-48
  80a144:	30bff92e 	bgeu	r6,r2,80a12c <__alt_mem_onchip_mem+0xff80212c>
  80a148:	dac03115 	stw	r11,196(sp)
  80a14c:	003f2306 	br	809ddc <__alt_mem_onchip_mem+0xff801ddc>
  80a150:	18c03fcc 	andi	r3,r3,255
  80a154:	18072b1e 	bne	r3,zero,80be04 <___vfprintf_internal_r+0x21b0>
  80a158:	94800414 	ori	r18,r18,16
  80a15c:	9080080c 	andi	r2,r18,32
  80a160:	10037b26 	beq	r2,zero,80af50 <___vfprintf_internal_r+0x12fc>
  80a164:	d9402d17 	ldw	r5,180(sp)
  80a168:	28800117 	ldw	r2,4(r5)
  80a16c:	2cc00017 	ldw	r19,0(r5)
  80a170:	29400204 	addi	r5,r5,8
  80a174:	d9402d15 	stw	r5,180(sp)
  80a178:	102d883a 	mov	r22,r2
  80a17c:	10044b16 	blt	r2,zero,80b2ac <___vfprintf_internal_r+0x1658>
  80a180:	d9402917 	ldw	r5,164(sp)
  80a184:	df002783 	ldbu	fp,158(sp)
  80a188:	2803bc16 	blt	r5,zero,80b07c <___vfprintf_internal_r+0x1428>
  80a18c:	00ffdfc4 	movi	r3,-129
  80a190:	9d84b03a 	or	r2,r19,r22
  80a194:	90e4703a 	and	r18,r18,r3
  80a198:	10017726 	beq	r2,zero,80a778 <___vfprintf_internal_r+0xb24>
  80a19c:	b0038326 	beq	r22,zero,80afac <___vfprintf_internal_r+0x1358>
  80a1a0:	dc402a15 	stw	r17,168(sp)
  80a1a4:	dc001e04 	addi	r16,sp,120
  80a1a8:	b023883a 	mov	r17,r22
  80a1ac:	402d883a 	mov	r22,r8
  80a1b0:	9809883a 	mov	r4,r19
  80a1b4:	880b883a 	mov	r5,r17
  80a1b8:	01800284 	movi	r6,10
  80a1bc:	000f883a 	mov	r7,zero
  80a1c0:	08136e00 	call	8136e0 <__umoddi3>
  80a1c4:	10800c04 	addi	r2,r2,48
  80a1c8:	843fffc4 	addi	r16,r16,-1
  80a1cc:	9809883a 	mov	r4,r19
  80a1d0:	880b883a 	mov	r5,r17
  80a1d4:	80800005 	stb	r2,0(r16)
  80a1d8:	01800284 	movi	r6,10
  80a1dc:	000f883a 	mov	r7,zero
  80a1e0:	08131680 	call	813168 <__udivdi3>
  80a1e4:	1027883a 	mov	r19,r2
  80a1e8:	10c4b03a 	or	r2,r2,r3
  80a1ec:	1823883a 	mov	r17,r3
  80a1f0:	103fef1e 	bne	r2,zero,80a1b0 <__alt_mem_onchip_mem+0xff8021b0>
  80a1f4:	d8c02817 	ldw	r3,160(sp)
  80a1f8:	dc402a17 	ldw	r17,168(sp)
  80a1fc:	b011883a 	mov	r8,r22
  80a200:	1c07c83a 	sub	r3,r3,r16
  80a204:	d8c02e15 	stw	r3,184(sp)
  80a208:	00005906 	br	80a370 <___vfprintf_internal_r+0x71c>
  80a20c:	18c03fcc 	andi	r3,r3,255
  80a210:	1806fa1e 	bne	r3,zero,80bdfc <___vfprintf_internal_r+0x21a8>
  80a214:	9080020c 	andi	r2,r18,8
  80a218:	10048a26 	beq	r2,zero,80b444 <___vfprintf_internal_r+0x17f0>
  80a21c:	d8c02d17 	ldw	r3,180(sp)
  80a220:	d9002d17 	ldw	r4,180(sp)
  80a224:	d9402d17 	ldw	r5,180(sp)
  80a228:	18c00017 	ldw	r3,0(r3)
  80a22c:	21000117 	ldw	r4,4(r4)
  80a230:	29400204 	addi	r5,r5,8
  80a234:	d8c03615 	stw	r3,216(sp)
  80a238:	d9003815 	stw	r4,224(sp)
  80a23c:	d9402d15 	stw	r5,180(sp)
  80a240:	d9003617 	ldw	r4,216(sp)
  80a244:	d9403817 	ldw	r5,224(sp)
  80a248:	da003d15 	stw	r8,244(sp)
  80a24c:	04000044 	movi	r16,1
  80a250:	08102f80 	call	8102f8 <__fpclassifyd>
  80a254:	da003d17 	ldw	r8,244(sp)
  80a258:	14041f1e 	bne	r2,r16,80b2d8 <___vfprintf_internal_r+0x1684>
  80a25c:	d9003617 	ldw	r4,216(sp)
  80a260:	d9403817 	ldw	r5,224(sp)
  80a264:	000d883a 	mov	r6,zero
  80a268:	000f883a 	mov	r7,zero
  80a26c:	08088f80 	call	8088f8 <__ledf2>
  80a270:	da003d17 	ldw	r8,244(sp)
  80a274:	1005be16 	blt	r2,zero,80b970 <___vfprintf_internal_r+0x1d1c>
  80a278:	df002783 	ldbu	fp,158(sp)
  80a27c:	008011c4 	movi	r2,71
  80a280:	1445330e 	bge	r2,r17,80b750 <___vfprintf_internal_r+0x1afc>
  80a284:	040020b4 	movhi	r16,130
  80a288:	84228c04 	addi	r16,r16,-30160
  80a28c:	00c000c4 	movi	r3,3
  80a290:	00bfdfc4 	movi	r2,-129
  80a294:	d8c02a15 	stw	r3,168(sp)
  80a298:	90a4703a 	and	r18,r18,r2
  80a29c:	d8c02e15 	stw	r3,184(sp)
  80a2a0:	d8002915 	stw	zero,164(sp)
  80a2a4:	d8003215 	stw	zero,200(sp)
  80a2a8:	00003706 	br	80a388 <___vfprintf_internal_r+0x734>
  80a2ac:	94800214 	ori	r18,r18,8
  80a2b0:	ac400007 	ldb	r17,0(r21)
  80a2b4:	003ec806 	br	809dd8 <__alt_mem_onchip_mem+0xff801dd8>
  80a2b8:	18c03fcc 	andi	r3,r3,255
  80a2bc:	1806db1e 	bne	r3,zero,80be2c <___vfprintf_internal_r+0x21d8>
  80a2c0:	94800414 	ori	r18,r18,16
  80a2c4:	9080080c 	andi	r2,r18,32
  80a2c8:	1002d826 	beq	r2,zero,80ae2c <___vfprintf_internal_r+0x11d8>
  80a2cc:	d9402d17 	ldw	r5,180(sp)
  80a2d0:	d8c02917 	ldw	r3,164(sp)
  80a2d4:	d8002785 	stb	zero,158(sp)
  80a2d8:	28800204 	addi	r2,r5,8
  80a2dc:	2cc00017 	ldw	r19,0(r5)
  80a2e0:	2d800117 	ldw	r22,4(r5)
  80a2e4:	18048f16 	blt	r3,zero,80b524 <___vfprintf_internal_r+0x18d0>
  80a2e8:	013fdfc4 	movi	r4,-129
  80a2ec:	9d86b03a 	or	r3,r19,r22
  80a2f0:	d8802d15 	stw	r2,180(sp)
  80a2f4:	9124703a 	and	r18,r18,r4
  80a2f8:	1802d91e 	bne	r3,zero,80ae60 <___vfprintf_internal_r+0x120c>
  80a2fc:	d8c02917 	ldw	r3,164(sp)
  80a300:	0039883a 	mov	fp,zero
  80a304:	1805c326 	beq	r3,zero,80ba14 <___vfprintf_internal_r+0x1dc0>
  80a308:	0027883a 	mov	r19,zero
  80a30c:	002d883a 	mov	r22,zero
  80a310:	dc001e04 	addi	r16,sp,120
  80a314:	9806d0fa 	srli	r3,r19,3
  80a318:	b008977a 	slli	r4,r22,29
  80a31c:	b02cd0fa 	srli	r22,r22,3
  80a320:	9cc001cc 	andi	r19,r19,7
  80a324:	98800c04 	addi	r2,r19,48
  80a328:	843fffc4 	addi	r16,r16,-1
  80a32c:	20e6b03a 	or	r19,r4,r3
  80a330:	80800005 	stb	r2,0(r16)
  80a334:	9d86b03a 	or	r3,r19,r22
  80a338:	183ff61e 	bne	r3,zero,80a314 <__alt_mem_onchip_mem+0xff802314>
  80a33c:	90c0004c 	andi	r3,r18,1
  80a340:	18013b26 	beq	r3,zero,80a830 <___vfprintf_internal_r+0xbdc>
  80a344:	10803fcc 	andi	r2,r2,255
  80a348:	1080201c 	xori	r2,r2,128
  80a34c:	10bfe004 	addi	r2,r2,-128
  80a350:	00c00c04 	movi	r3,48
  80a354:	10c13626 	beq	r2,r3,80a830 <___vfprintf_internal_r+0xbdc>
  80a358:	80ffffc5 	stb	r3,-1(r16)
  80a35c:	d8c02817 	ldw	r3,160(sp)
  80a360:	80bfffc4 	addi	r2,r16,-1
  80a364:	1021883a 	mov	r16,r2
  80a368:	1887c83a 	sub	r3,r3,r2
  80a36c:	d8c02e15 	stw	r3,184(sp)
  80a370:	d8802e17 	ldw	r2,184(sp)
  80a374:	d9002917 	ldw	r4,164(sp)
  80a378:	1100010e 	bge	r2,r4,80a380 <___vfprintf_internal_r+0x72c>
  80a37c:	2005883a 	mov	r2,r4
  80a380:	d8802a15 	stw	r2,168(sp)
  80a384:	d8003215 	stw	zero,200(sp)
  80a388:	e7003fcc 	andi	fp,fp,255
  80a38c:	e700201c 	xori	fp,fp,128
  80a390:	e73fe004 	addi	fp,fp,-128
  80a394:	e0000326 	beq	fp,zero,80a3a4 <___vfprintf_internal_r+0x750>
  80a398:	d8c02a17 	ldw	r3,168(sp)
  80a39c:	18c00044 	addi	r3,r3,1
  80a3a0:	d8c02a15 	stw	r3,168(sp)
  80a3a4:	90c0008c 	andi	r3,r18,2
  80a3a8:	d8c02b15 	stw	r3,172(sp)
  80a3ac:	18000326 	beq	r3,zero,80a3bc <___vfprintf_internal_r+0x768>
  80a3b0:	d8c02a17 	ldw	r3,168(sp)
  80a3b4:	18c00084 	addi	r3,r3,2
  80a3b8:	d8c02a15 	stw	r3,168(sp)
  80a3bc:	90c0210c 	andi	r3,r18,132
  80a3c0:	d8c03015 	stw	r3,192(sp)
  80a3c4:	1801a31e 	bne	r3,zero,80aa54 <___vfprintf_internal_r+0xe00>
  80a3c8:	d9003117 	ldw	r4,196(sp)
  80a3cc:	d8c02a17 	ldw	r3,168(sp)
  80a3d0:	20e7c83a 	sub	r19,r4,r3
  80a3d4:	04c19f0e 	bge	zero,r19,80aa54 <___vfprintf_internal_r+0xe00>
  80a3d8:	02400404 	movi	r9,16
  80a3dc:	d8c02017 	ldw	r3,128(sp)
  80a3e0:	d8801f17 	ldw	r2,124(sp)
  80a3e4:	4cc50d0e 	bge	r9,r19,80b81c <___vfprintf_internal_r+0x1bc8>
  80a3e8:	014020b4 	movhi	r5,130
  80a3ec:	29629f84 	addi	r5,r5,-30082
  80a3f0:	dc403b15 	stw	r17,236(sp)
  80a3f4:	d9403515 	stw	r5,212(sp)
  80a3f8:	9823883a 	mov	r17,r19
  80a3fc:	482d883a 	mov	r22,r9
  80a400:	9027883a 	mov	r19,r18
  80a404:	070001c4 	movi	fp,7
  80a408:	8025883a 	mov	r18,r16
  80a40c:	dc002c17 	ldw	r16,176(sp)
  80a410:	00000306 	br	80a420 <___vfprintf_internal_r+0x7cc>
  80a414:	8c7ffc04 	addi	r17,r17,-16
  80a418:	42000204 	addi	r8,r8,8
  80a41c:	b440130e 	bge	r22,r17,80a46c <___vfprintf_internal_r+0x818>
  80a420:	010020b4 	movhi	r4,130
  80a424:	18c00404 	addi	r3,r3,16
  80a428:	10800044 	addi	r2,r2,1
  80a42c:	21229f84 	addi	r4,r4,-30082
  80a430:	41000015 	stw	r4,0(r8)
  80a434:	45800115 	stw	r22,4(r8)
  80a438:	d8c02015 	stw	r3,128(sp)
  80a43c:	d8801f15 	stw	r2,124(sp)
  80a440:	e0bff40e 	bge	fp,r2,80a414 <__alt_mem_onchip_mem+0xff802414>
  80a444:	d9801e04 	addi	r6,sp,120
  80a448:	b80b883a 	mov	r5,r23
  80a44c:	8009883a 	mov	r4,r16
  80a450:	081076c0 	call	81076c <__sprint_r>
  80a454:	103f011e 	bne	r2,zero,80a05c <__alt_mem_onchip_mem+0xff80205c>
  80a458:	8c7ffc04 	addi	r17,r17,-16
  80a45c:	d8c02017 	ldw	r3,128(sp)
  80a460:	d8801f17 	ldw	r2,124(sp)
  80a464:	da000404 	addi	r8,sp,16
  80a468:	b47fed16 	blt	r22,r17,80a420 <__alt_mem_onchip_mem+0xff802420>
  80a46c:	9021883a 	mov	r16,r18
  80a470:	9825883a 	mov	r18,r19
  80a474:	8827883a 	mov	r19,r17
  80a478:	dc403b17 	ldw	r17,236(sp)
  80a47c:	d9403517 	ldw	r5,212(sp)
  80a480:	98c7883a 	add	r3,r19,r3
  80a484:	10800044 	addi	r2,r2,1
  80a488:	41400015 	stw	r5,0(r8)
  80a48c:	44c00115 	stw	r19,4(r8)
  80a490:	d8c02015 	stw	r3,128(sp)
  80a494:	d8801f15 	stw	r2,124(sp)
  80a498:	010001c4 	movi	r4,7
  80a49c:	2082a316 	blt	r4,r2,80af2c <___vfprintf_internal_r+0x12d8>
  80a4a0:	df002787 	ldb	fp,158(sp)
  80a4a4:	42000204 	addi	r8,r8,8
  80a4a8:	e0000c26 	beq	fp,zero,80a4dc <___vfprintf_internal_r+0x888>
  80a4ac:	d8801f17 	ldw	r2,124(sp)
  80a4b0:	d9002784 	addi	r4,sp,158
  80a4b4:	18c00044 	addi	r3,r3,1
  80a4b8:	10800044 	addi	r2,r2,1
  80a4bc:	41000015 	stw	r4,0(r8)
  80a4c0:	01000044 	movi	r4,1
  80a4c4:	41000115 	stw	r4,4(r8)
  80a4c8:	d8c02015 	stw	r3,128(sp)
  80a4cc:	d8801f15 	stw	r2,124(sp)
  80a4d0:	010001c4 	movi	r4,7
  80a4d4:	20823c16 	blt	r4,r2,80adc8 <___vfprintf_internal_r+0x1174>
  80a4d8:	42000204 	addi	r8,r8,8
  80a4dc:	d8802b17 	ldw	r2,172(sp)
  80a4e0:	10000c26 	beq	r2,zero,80a514 <___vfprintf_internal_r+0x8c0>
  80a4e4:	d8801f17 	ldw	r2,124(sp)
  80a4e8:	d9002704 	addi	r4,sp,156
  80a4ec:	18c00084 	addi	r3,r3,2
  80a4f0:	10800044 	addi	r2,r2,1
  80a4f4:	41000015 	stw	r4,0(r8)
  80a4f8:	01000084 	movi	r4,2
  80a4fc:	41000115 	stw	r4,4(r8)
  80a500:	d8c02015 	stw	r3,128(sp)
  80a504:	d8801f15 	stw	r2,124(sp)
  80a508:	010001c4 	movi	r4,7
  80a50c:	20823616 	blt	r4,r2,80ade8 <___vfprintf_internal_r+0x1194>
  80a510:	42000204 	addi	r8,r8,8
  80a514:	d9003017 	ldw	r4,192(sp)
  80a518:	00802004 	movi	r2,128
  80a51c:	20819926 	beq	r4,r2,80ab84 <___vfprintf_internal_r+0xf30>
  80a520:	d9402917 	ldw	r5,164(sp)
  80a524:	d8802e17 	ldw	r2,184(sp)
  80a528:	28adc83a 	sub	r22,r5,r2
  80a52c:	0580310e 	bge	zero,r22,80a5f4 <___vfprintf_internal_r+0x9a0>
  80a530:	07000404 	movi	fp,16
  80a534:	d8801f17 	ldw	r2,124(sp)
  80a538:	e584140e 	bge	fp,r22,80b58c <___vfprintf_internal_r+0x1938>
  80a53c:	014020b4 	movhi	r5,130
  80a540:	29629b84 	addi	r5,r5,-30098
  80a544:	dc402915 	stw	r17,164(sp)
  80a548:	d9402b15 	stw	r5,172(sp)
  80a54c:	b023883a 	mov	r17,r22
  80a550:	04c001c4 	movi	r19,7
  80a554:	a82d883a 	mov	r22,r21
  80a558:	902b883a 	mov	r21,r18
  80a55c:	8025883a 	mov	r18,r16
  80a560:	dc002c17 	ldw	r16,176(sp)
  80a564:	00000306 	br	80a574 <___vfprintf_internal_r+0x920>
  80a568:	8c7ffc04 	addi	r17,r17,-16
  80a56c:	42000204 	addi	r8,r8,8
  80a570:	e440110e 	bge	fp,r17,80a5b8 <___vfprintf_internal_r+0x964>
  80a574:	18c00404 	addi	r3,r3,16
  80a578:	10800044 	addi	r2,r2,1
  80a57c:	45000015 	stw	r20,0(r8)
  80a580:	47000115 	stw	fp,4(r8)
  80a584:	d8c02015 	stw	r3,128(sp)
  80a588:	d8801f15 	stw	r2,124(sp)
  80a58c:	98bff60e 	bge	r19,r2,80a568 <__alt_mem_onchip_mem+0xff802568>
  80a590:	d9801e04 	addi	r6,sp,120
  80a594:	b80b883a 	mov	r5,r23
  80a598:	8009883a 	mov	r4,r16
  80a59c:	081076c0 	call	81076c <__sprint_r>
  80a5a0:	103eae1e 	bne	r2,zero,80a05c <__alt_mem_onchip_mem+0xff80205c>
  80a5a4:	8c7ffc04 	addi	r17,r17,-16
  80a5a8:	d8c02017 	ldw	r3,128(sp)
  80a5ac:	d8801f17 	ldw	r2,124(sp)
  80a5b0:	da000404 	addi	r8,sp,16
  80a5b4:	e47fef16 	blt	fp,r17,80a574 <__alt_mem_onchip_mem+0xff802574>
  80a5b8:	9021883a 	mov	r16,r18
  80a5bc:	a825883a 	mov	r18,r21
  80a5c0:	b02b883a 	mov	r21,r22
  80a5c4:	882d883a 	mov	r22,r17
  80a5c8:	dc402917 	ldw	r17,164(sp)
  80a5cc:	d9002b17 	ldw	r4,172(sp)
  80a5d0:	1d87883a 	add	r3,r3,r22
  80a5d4:	10800044 	addi	r2,r2,1
  80a5d8:	41000015 	stw	r4,0(r8)
  80a5dc:	45800115 	stw	r22,4(r8)
  80a5e0:	d8c02015 	stw	r3,128(sp)
  80a5e4:	d8801f15 	stw	r2,124(sp)
  80a5e8:	010001c4 	movi	r4,7
  80a5ec:	2081ee16 	blt	r4,r2,80ada8 <___vfprintf_internal_r+0x1154>
  80a5f0:	42000204 	addi	r8,r8,8
  80a5f4:	9080400c 	andi	r2,r18,256
  80a5f8:	1001181e 	bne	r2,zero,80aa5c <___vfprintf_internal_r+0xe08>
  80a5fc:	d9402e17 	ldw	r5,184(sp)
  80a600:	d8801f17 	ldw	r2,124(sp)
  80a604:	44000015 	stw	r16,0(r8)
  80a608:	1947883a 	add	r3,r3,r5
  80a60c:	10800044 	addi	r2,r2,1
  80a610:	41400115 	stw	r5,4(r8)
  80a614:	d8c02015 	stw	r3,128(sp)
  80a618:	d8801f15 	stw	r2,124(sp)
  80a61c:	010001c4 	movi	r4,7
  80a620:	2081d316 	blt	r4,r2,80ad70 <___vfprintf_internal_r+0x111c>
  80a624:	42000204 	addi	r8,r8,8
  80a628:	9480010c 	andi	r18,r18,4
  80a62c:	90003226 	beq	r18,zero,80a6f8 <___vfprintf_internal_r+0xaa4>
  80a630:	d9403117 	ldw	r5,196(sp)
  80a634:	d8802a17 	ldw	r2,168(sp)
  80a638:	28a1c83a 	sub	r16,r5,r2
  80a63c:	04002e0e 	bge	zero,r16,80a6f8 <___vfprintf_internal_r+0xaa4>
  80a640:	04400404 	movi	r17,16
  80a644:	d8801f17 	ldw	r2,124(sp)
  80a648:	8c04a20e 	bge	r17,r16,80b8d4 <___vfprintf_internal_r+0x1c80>
  80a64c:	014020b4 	movhi	r5,130
  80a650:	29629f84 	addi	r5,r5,-30082
  80a654:	d9403515 	stw	r5,212(sp)
  80a658:	048001c4 	movi	r18,7
  80a65c:	dcc02c17 	ldw	r19,176(sp)
  80a660:	00000306 	br	80a670 <___vfprintf_internal_r+0xa1c>
  80a664:	843ffc04 	addi	r16,r16,-16
  80a668:	42000204 	addi	r8,r8,8
  80a66c:	8c00130e 	bge	r17,r16,80a6bc <___vfprintf_internal_r+0xa68>
  80a670:	010020b4 	movhi	r4,130
  80a674:	18c00404 	addi	r3,r3,16
  80a678:	10800044 	addi	r2,r2,1
  80a67c:	21229f84 	addi	r4,r4,-30082
  80a680:	41000015 	stw	r4,0(r8)
  80a684:	44400115 	stw	r17,4(r8)
  80a688:	d8c02015 	stw	r3,128(sp)
  80a68c:	d8801f15 	stw	r2,124(sp)
  80a690:	90bff40e 	bge	r18,r2,80a664 <__alt_mem_onchip_mem+0xff802664>
  80a694:	d9801e04 	addi	r6,sp,120
  80a698:	b80b883a 	mov	r5,r23
  80a69c:	9809883a 	mov	r4,r19
  80a6a0:	081076c0 	call	81076c <__sprint_r>
  80a6a4:	103e6d1e 	bne	r2,zero,80a05c <__alt_mem_onchip_mem+0xff80205c>
  80a6a8:	843ffc04 	addi	r16,r16,-16
  80a6ac:	d8c02017 	ldw	r3,128(sp)
  80a6b0:	d8801f17 	ldw	r2,124(sp)
  80a6b4:	da000404 	addi	r8,sp,16
  80a6b8:	8c3fed16 	blt	r17,r16,80a670 <__alt_mem_onchip_mem+0xff802670>
  80a6bc:	d9403517 	ldw	r5,212(sp)
  80a6c0:	1c07883a 	add	r3,r3,r16
  80a6c4:	10800044 	addi	r2,r2,1
  80a6c8:	41400015 	stw	r5,0(r8)
  80a6cc:	44000115 	stw	r16,4(r8)
  80a6d0:	d8c02015 	stw	r3,128(sp)
  80a6d4:	d8801f15 	stw	r2,124(sp)
  80a6d8:	010001c4 	movi	r4,7
  80a6dc:	2080060e 	bge	r4,r2,80a6f8 <___vfprintf_internal_r+0xaa4>
  80a6e0:	d9002c17 	ldw	r4,176(sp)
  80a6e4:	d9801e04 	addi	r6,sp,120
  80a6e8:	b80b883a 	mov	r5,r23
  80a6ec:	081076c0 	call	81076c <__sprint_r>
  80a6f0:	103e5a1e 	bne	r2,zero,80a05c <__alt_mem_onchip_mem+0xff80205c>
  80a6f4:	d8c02017 	ldw	r3,128(sp)
  80a6f8:	d8803117 	ldw	r2,196(sp)
  80a6fc:	d9002a17 	ldw	r4,168(sp)
  80a700:	1100010e 	bge	r2,r4,80a708 <___vfprintf_internal_r+0xab4>
  80a704:	2005883a 	mov	r2,r4
  80a708:	d9402f17 	ldw	r5,188(sp)
  80a70c:	288b883a 	add	r5,r5,r2
  80a710:	d9402f15 	stw	r5,188(sp)
  80a714:	18019e1e 	bne	r3,zero,80ad90 <___vfprintf_internal_r+0x113c>
  80a718:	a8800007 	ldb	r2,0(r21)
  80a71c:	d8001f15 	stw	zero,124(sp)
  80a720:	da000404 	addi	r8,sp,16
  80a724:	103d851e 	bne	r2,zero,809d3c <__alt_mem_onchip_mem+0xff801d3c>
  80a728:	a821883a 	mov	r16,r21
  80a72c:	003d9b06 	br	809d9c <__alt_mem_onchip_mem+0xff801d9c>
  80a730:	18c03fcc 	andi	r3,r3,255
  80a734:	1805c11e 	bne	r3,zero,80be3c <___vfprintf_internal_r+0x21e8>
  80a738:	94800414 	ori	r18,r18,16
  80a73c:	9080080c 	andi	r2,r18,32
  80a740:	10020c26 	beq	r2,zero,80af74 <___vfprintf_internal_r+0x1320>
  80a744:	d8802d17 	ldw	r2,180(sp)
  80a748:	d9002917 	ldw	r4,164(sp)
  80a74c:	d8002785 	stb	zero,158(sp)
  80a750:	10c00204 	addi	r3,r2,8
  80a754:	14c00017 	ldw	r19,0(r2)
  80a758:	15800117 	ldw	r22,4(r2)
  80a75c:	20040f16 	blt	r4,zero,80b79c <___vfprintf_internal_r+0x1b48>
  80a760:	013fdfc4 	movi	r4,-129
  80a764:	9d84b03a 	or	r2,r19,r22
  80a768:	d8c02d15 	stw	r3,180(sp)
  80a76c:	9124703a 	and	r18,r18,r4
  80a770:	0039883a 	mov	fp,zero
  80a774:	103e891e 	bne	r2,zero,80a19c <__alt_mem_onchip_mem+0xff80219c>
  80a778:	d9002917 	ldw	r4,164(sp)
  80a77c:	2002c11e 	bne	r4,zero,80b284 <___vfprintf_internal_r+0x1630>
  80a780:	d8002915 	stw	zero,164(sp)
  80a784:	d8002e15 	stw	zero,184(sp)
  80a788:	dc001e04 	addi	r16,sp,120
  80a78c:	003ef806 	br	80a370 <__alt_mem_onchip_mem+0xff802370>
  80a790:	18c03fcc 	andi	r3,r3,255
  80a794:	18059d1e 	bne	r3,zero,80be0c <___vfprintf_internal_r+0x21b8>
  80a798:	014020b4 	movhi	r5,130
  80a79c:	29628f04 	addi	r5,r5,-30148
  80a7a0:	d9403915 	stw	r5,228(sp)
  80a7a4:	9080080c 	andi	r2,r18,32
  80a7a8:	10005226 	beq	r2,zero,80a8f4 <___vfprintf_internal_r+0xca0>
  80a7ac:	d8802d17 	ldw	r2,180(sp)
  80a7b0:	14c00017 	ldw	r19,0(r2)
  80a7b4:	15800117 	ldw	r22,4(r2)
  80a7b8:	10800204 	addi	r2,r2,8
  80a7bc:	d8802d15 	stw	r2,180(sp)
  80a7c0:	9080004c 	andi	r2,r18,1
  80a7c4:	10019026 	beq	r2,zero,80ae08 <___vfprintf_internal_r+0x11b4>
  80a7c8:	9d84b03a 	or	r2,r19,r22
  80a7cc:	10036926 	beq	r2,zero,80b574 <___vfprintf_internal_r+0x1920>
  80a7d0:	d8c02917 	ldw	r3,164(sp)
  80a7d4:	00800c04 	movi	r2,48
  80a7d8:	d8802705 	stb	r2,156(sp)
  80a7dc:	dc402745 	stb	r17,157(sp)
  80a7e0:	d8002785 	stb	zero,158(sp)
  80a7e4:	90800094 	ori	r2,r18,2
  80a7e8:	18045d16 	blt	r3,zero,80b960 <___vfprintf_internal_r+0x1d0c>
  80a7ec:	00bfdfc4 	movi	r2,-129
  80a7f0:	90a4703a 	and	r18,r18,r2
  80a7f4:	94800094 	ori	r18,r18,2
  80a7f8:	0039883a 	mov	fp,zero
  80a7fc:	d9003917 	ldw	r4,228(sp)
  80a800:	dc001e04 	addi	r16,sp,120
  80a804:	988003cc 	andi	r2,r19,15
  80a808:	b006973a 	slli	r3,r22,28
  80a80c:	2085883a 	add	r2,r4,r2
  80a810:	9826d13a 	srli	r19,r19,4
  80a814:	10800003 	ldbu	r2,0(r2)
  80a818:	b02cd13a 	srli	r22,r22,4
  80a81c:	843fffc4 	addi	r16,r16,-1
  80a820:	1ce6b03a 	or	r19,r3,r19
  80a824:	80800005 	stb	r2,0(r16)
  80a828:	9d84b03a 	or	r2,r19,r22
  80a82c:	103ff51e 	bne	r2,zero,80a804 <__alt_mem_onchip_mem+0xff802804>
  80a830:	d8c02817 	ldw	r3,160(sp)
  80a834:	1c07c83a 	sub	r3,r3,r16
  80a838:	d8c02e15 	stw	r3,184(sp)
  80a83c:	003ecc06 	br	80a370 <__alt_mem_onchip_mem+0xff802370>
  80a840:	18c03fcc 	andi	r3,r3,255
  80a844:	183e9f26 	beq	r3,zero,80a2c4 <__alt_mem_onchip_mem+0xff8022c4>
  80a848:	d9c02785 	stb	r7,158(sp)
  80a84c:	003e9d06 	br	80a2c4 <__alt_mem_onchip_mem+0xff8022c4>
  80a850:	00c00044 	movi	r3,1
  80a854:	01c00ac4 	movi	r7,43
  80a858:	ac400007 	ldb	r17,0(r21)
  80a85c:	003d5e06 	br	809dd8 <__alt_mem_onchip_mem+0xff801dd8>
  80a860:	94800814 	ori	r18,r18,32
  80a864:	ac400007 	ldb	r17,0(r21)
  80a868:	003d5b06 	br	809dd8 <__alt_mem_onchip_mem+0xff801dd8>
  80a86c:	d8c02d17 	ldw	r3,180(sp)
  80a870:	d8002785 	stb	zero,158(sp)
  80a874:	1c000017 	ldw	r16,0(r3)
  80a878:	1cc00104 	addi	r19,r3,4
  80a87c:	80041926 	beq	r16,zero,80b8e4 <___vfprintf_internal_r+0x1c90>
  80a880:	d9002917 	ldw	r4,164(sp)
  80a884:	2003d016 	blt	r4,zero,80b7c8 <___vfprintf_internal_r+0x1b74>
  80a888:	200d883a 	mov	r6,r4
  80a88c:	000b883a 	mov	r5,zero
  80a890:	8009883a 	mov	r4,r16
  80a894:	da003d15 	stw	r8,244(sp)
  80a898:	080efa80 	call	80efa8 <memchr>
  80a89c:	da003d17 	ldw	r8,244(sp)
  80a8a0:	10045426 	beq	r2,zero,80b9f4 <___vfprintf_internal_r+0x1da0>
  80a8a4:	1405c83a 	sub	r2,r2,r16
  80a8a8:	d8802e15 	stw	r2,184(sp)
  80a8ac:	1003cc16 	blt	r2,zero,80b7e0 <___vfprintf_internal_r+0x1b8c>
  80a8b0:	df002783 	ldbu	fp,158(sp)
  80a8b4:	d8802a15 	stw	r2,168(sp)
  80a8b8:	dcc02d15 	stw	r19,180(sp)
  80a8bc:	d8002915 	stw	zero,164(sp)
  80a8c0:	d8003215 	stw	zero,200(sp)
  80a8c4:	003eb006 	br	80a388 <__alt_mem_onchip_mem+0xff802388>
  80a8c8:	18c03fcc 	andi	r3,r3,255
  80a8cc:	183f9b26 	beq	r3,zero,80a73c <__alt_mem_onchip_mem+0xff80273c>
  80a8d0:	d9c02785 	stb	r7,158(sp)
  80a8d4:	003f9906 	br	80a73c <__alt_mem_onchip_mem+0xff80273c>
  80a8d8:	18c03fcc 	andi	r3,r3,255
  80a8dc:	1805551e 	bne	r3,zero,80be34 <___vfprintf_internal_r+0x21e0>
  80a8e0:	014020b4 	movhi	r5,130
  80a8e4:	29629404 	addi	r5,r5,-30128
  80a8e8:	d9403915 	stw	r5,228(sp)
  80a8ec:	9080080c 	andi	r2,r18,32
  80a8f0:	103fae1e 	bne	r2,zero,80a7ac <__alt_mem_onchip_mem+0xff8027ac>
  80a8f4:	9080040c 	andi	r2,r18,16
  80a8f8:	1002de26 	beq	r2,zero,80b474 <___vfprintf_internal_r+0x1820>
  80a8fc:	d8c02d17 	ldw	r3,180(sp)
  80a900:	002d883a 	mov	r22,zero
  80a904:	1cc00017 	ldw	r19,0(r3)
  80a908:	18c00104 	addi	r3,r3,4
  80a90c:	d8c02d15 	stw	r3,180(sp)
  80a910:	003fab06 	br	80a7c0 <__alt_mem_onchip_mem+0xff8027c0>
  80a914:	38803fcc 	andi	r2,r7,255
  80a918:	1080201c 	xori	r2,r2,128
  80a91c:	10bfe004 	addi	r2,r2,-128
  80a920:	1002d21e 	bne	r2,zero,80b46c <___vfprintf_internal_r+0x1818>
  80a924:	00c00044 	movi	r3,1
  80a928:	01c00804 	movi	r7,32
  80a92c:	ac400007 	ldb	r17,0(r21)
  80a930:	003d2906 	br	809dd8 <__alt_mem_onchip_mem+0xff801dd8>
  80a934:	94800054 	ori	r18,r18,1
  80a938:	ac400007 	ldb	r17,0(r21)
  80a93c:	003d2606 	br	809dd8 <__alt_mem_onchip_mem+0xff801dd8>
  80a940:	18c03fcc 	andi	r3,r3,255
  80a944:	183e0526 	beq	r3,zero,80a15c <__alt_mem_onchip_mem+0xff80215c>
  80a948:	d9c02785 	stb	r7,158(sp)
  80a94c:	003e0306 	br	80a15c <__alt_mem_onchip_mem+0xff80215c>
  80a950:	94801014 	ori	r18,r18,64
  80a954:	ac400007 	ldb	r17,0(r21)
  80a958:	003d1f06 	br	809dd8 <__alt_mem_onchip_mem+0xff801dd8>
  80a95c:	ac400007 	ldb	r17,0(r21)
  80a960:	8a438726 	beq	r17,r9,80b780 <___vfprintf_internal_r+0x1b2c>
  80a964:	94800414 	ori	r18,r18,16
  80a968:	003d1b06 	br	809dd8 <__alt_mem_onchip_mem+0xff801dd8>
  80a96c:	18c03fcc 	andi	r3,r3,255
  80a970:	1805341e 	bne	r3,zero,80be44 <___vfprintf_internal_r+0x21f0>
  80a974:	9080080c 	andi	r2,r18,32
  80a978:	1002cd26 	beq	r2,zero,80b4b0 <___vfprintf_internal_r+0x185c>
  80a97c:	d9402d17 	ldw	r5,180(sp)
  80a980:	d9002f17 	ldw	r4,188(sp)
  80a984:	28800017 	ldw	r2,0(r5)
  80a988:	2007d7fa 	srai	r3,r4,31
  80a98c:	29400104 	addi	r5,r5,4
  80a990:	d9402d15 	stw	r5,180(sp)
  80a994:	11000015 	stw	r4,0(r2)
  80a998:	10c00115 	stw	r3,4(r2)
  80a99c:	003ce506 	br	809d34 <__alt_mem_onchip_mem+0xff801d34>
  80a9a0:	d8c02d17 	ldw	r3,180(sp)
  80a9a4:	d9002d17 	ldw	r4,180(sp)
  80a9a8:	d8002785 	stb	zero,158(sp)
  80a9ac:	18800017 	ldw	r2,0(r3)
  80a9b0:	21000104 	addi	r4,r4,4
  80a9b4:	00c00044 	movi	r3,1
  80a9b8:	d8c02a15 	stw	r3,168(sp)
  80a9bc:	d8801405 	stb	r2,80(sp)
  80a9c0:	d9002d15 	stw	r4,180(sp)
  80a9c4:	d8c02e15 	stw	r3,184(sp)
  80a9c8:	d8002915 	stw	zero,164(sp)
  80a9cc:	d8003215 	stw	zero,200(sp)
  80a9d0:	dc001404 	addi	r16,sp,80
  80a9d4:	0039883a 	mov	fp,zero
  80a9d8:	003e7206 	br	80a3a4 <__alt_mem_onchip_mem+0xff8023a4>
  80a9dc:	010020b4 	movhi	r4,130
  80a9e0:	21229404 	addi	r4,r4,-30128
  80a9e4:	0039883a 	mov	fp,zero
  80a9e8:	d9003915 	stw	r4,228(sp)
  80a9ec:	04401e04 	movi	r17,120
  80a9f0:	003f8206 	br	80a7fc <__alt_mem_onchip_mem+0xff8027fc>
  80a9f4:	18c03fcc 	andi	r3,r3,255
  80a9f8:	1805061e 	bne	r3,zero,80be14 <___vfprintf_internal_r+0x21c0>
  80a9fc:	883d9126 	beq	r17,zero,80a044 <__alt_mem_onchip_mem+0xff802044>
  80aa00:	00c00044 	movi	r3,1
  80aa04:	d8c02a15 	stw	r3,168(sp)
  80aa08:	dc401405 	stb	r17,80(sp)
  80aa0c:	d8002785 	stb	zero,158(sp)
  80aa10:	003fec06 	br	80a9c4 <__alt_mem_onchip_mem+0xff8029c4>
  80aa14:	014020b4 	movhi	r5,130
  80aa18:	29629404 	addi	r5,r5,-30128
  80aa1c:	d9403915 	stw	r5,228(sp)
  80aa20:	d8c02d15 	stw	r3,180(sp)
  80aa24:	1025883a 	mov	r18,r2
  80aa28:	04401e04 	movi	r17,120
  80aa2c:	9d84b03a 	or	r2,r19,r22
  80aa30:	1000fc1e 	bne	r2,zero,80ae24 <___vfprintf_internal_r+0x11d0>
  80aa34:	0039883a 	mov	fp,zero
  80aa38:	00800084 	movi	r2,2
  80aa3c:	10803fcc 	andi	r2,r2,255
  80aa40:	00c00044 	movi	r3,1
  80aa44:	10c20f26 	beq	r2,r3,80b284 <___vfprintf_internal_r+0x1630>
  80aa48:	00c00084 	movi	r3,2
  80aa4c:	10fd6326 	beq	r2,r3,809fdc <__alt_mem_onchip_mem+0xff801fdc>
  80aa50:	003e2d06 	br	80a308 <__alt_mem_onchip_mem+0xff802308>
  80aa54:	d8c02017 	ldw	r3,128(sp)
  80aa58:	003e9306 	br	80a4a8 <__alt_mem_onchip_mem+0xff8024a8>
  80aa5c:	00801944 	movi	r2,101
  80aa60:	14407e0e 	bge	r2,r17,80ac5c <___vfprintf_internal_r+0x1008>
  80aa64:	d9003617 	ldw	r4,216(sp)
  80aa68:	d9403817 	ldw	r5,224(sp)
  80aa6c:	000d883a 	mov	r6,zero
  80aa70:	000f883a 	mov	r7,zero
  80aa74:	d8c03c15 	stw	r3,240(sp)
  80aa78:	da003d15 	stw	r8,244(sp)
  80aa7c:	08146b40 	call	8146b4 <__eqdf2>
  80aa80:	d8c03c17 	ldw	r3,240(sp)
  80aa84:	da003d17 	ldw	r8,244(sp)
  80aa88:	1000f71e 	bne	r2,zero,80ae68 <___vfprintf_internal_r+0x1214>
  80aa8c:	d8801f17 	ldw	r2,124(sp)
  80aa90:	010020b4 	movhi	r4,130
  80aa94:	21229b04 	addi	r4,r4,-30100
  80aa98:	18c00044 	addi	r3,r3,1
  80aa9c:	10800044 	addi	r2,r2,1
  80aaa0:	41000015 	stw	r4,0(r8)
  80aaa4:	01000044 	movi	r4,1
  80aaa8:	41000115 	stw	r4,4(r8)
  80aaac:	d8c02015 	stw	r3,128(sp)
  80aab0:	d8801f15 	stw	r2,124(sp)
  80aab4:	010001c4 	movi	r4,7
  80aab8:	2082b816 	blt	r4,r2,80b59c <___vfprintf_internal_r+0x1948>
  80aabc:	42000204 	addi	r8,r8,8
  80aac0:	d8802617 	ldw	r2,152(sp)
  80aac4:	d9403317 	ldw	r5,204(sp)
  80aac8:	11400216 	blt	r2,r5,80aad4 <___vfprintf_internal_r+0xe80>
  80aacc:	9080004c 	andi	r2,r18,1
  80aad0:	103ed526 	beq	r2,zero,80a628 <__alt_mem_onchip_mem+0xff802628>
  80aad4:	d8803717 	ldw	r2,220(sp)
  80aad8:	d9003417 	ldw	r4,208(sp)
  80aadc:	d9403717 	ldw	r5,220(sp)
  80aae0:	1887883a 	add	r3,r3,r2
  80aae4:	d8801f17 	ldw	r2,124(sp)
  80aae8:	41000015 	stw	r4,0(r8)
  80aaec:	41400115 	stw	r5,4(r8)
  80aaf0:	10800044 	addi	r2,r2,1
  80aaf4:	d8c02015 	stw	r3,128(sp)
  80aaf8:	d8801f15 	stw	r2,124(sp)
  80aafc:	010001c4 	movi	r4,7
  80ab00:	20832916 	blt	r4,r2,80b7a8 <___vfprintf_internal_r+0x1b54>
  80ab04:	42000204 	addi	r8,r8,8
  80ab08:	d8803317 	ldw	r2,204(sp)
  80ab0c:	143fffc4 	addi	r16,r2,-1
  80ab10:	043ec50e 	bge	zero,r16,80a628 <__alt_mem_onchip_mem+0xff802628>
  80ab14:	04400404 	movi	r17,16
  80ab18:	d8801f17 	ldw	r2,124(sp)
  80ab1c:	8c00880e 	bge	r17,r16,80ad40 <___vfprintf_internal_r+0x10ec>
  80ab20:	014020b4 	movhi	r5,130
  80ab24:	29629b84 	addi	r5,r5,-30098
  80ab28:	d9402b15 	stw	r5,172(sp)
  80ab2c:	058001c4 	movi	r22,7
  80ab30:	dcc02c17 	ldw	r19,176(sp)
  80ab34:	00000306 	br	80ab44 <___vfprintf_internal_r+0xef0>
  80ab38:	42000204 	addi	r8,r8,8
  80ab3c:	843ffc04 	addi	r16,r16,-16
  80ab40:	8c00820e 	bge	r17,r16,80ad4c <___vfprintf_internal_r+0x10f8>
  80ab44:	18c00404 	addi	r3,r3,16
  80ab48:	10800044 	addi	r2,r2,1
  80ab4c:	45000015 	stw	r20,0(r8)
  80ab50:	44400115 	stw	r17,4(r8)
  80ab54:	d8c02015 	stw	r3,128(sp)
  80ab58:	d8801f15 	stw	r2,124(sp)
  80ab5c:	b0bff60e 	bge	r22,r2,80ab38 <__alt_mem_onchip_mem+0xff802b38>
  80ab60:	d9801e04 	addi	r6,sp,120
  80ab64:	b80b883a 	mov	r5,r23
  80ab68:	9809883a 	mov	r4,r19
  80ab6c:	081076c0 	call	81076c <__sprint_r>
  80ab70:	103d3a1e 	bne	r2,zero,80a05c <__alt_mem_onchip_mem+0xff80205c>
  80ab74:	d8c02017 	ldw	r3,128(sp)
  80ab78:	d8801f17 	ldw	r2,124(sp)
  80ab7c:	da000404 	addi	r8,sp,16
  80ab80:	003fee06 	br	80ab3c <__alt_mem_onchip_mem+0xff802b3c>
  80ab84:	d9403117 	ldw	r5,196(sp)
  80ab88:	d8802a17 	ldw	r2,168(sp)
  80ab8c:	28adc83a 	sub	r22,r5,r2
  80ab90:	05be630e 	bge	zero,r22,80a520 <__alt_mem_onchip_mem+0xff802520>
  80ab94:	07000404 	movi	fp,16
  80ab98:	d8801f17 	ldw	r2,124(sp)
  80ab9c:	e5838f0e 	bge	fp,r22,80b9dc <___vfprintf_internal_r+0x1d88>
  80aba0:	014020b4 	movhi	r5,130
  80aba4:	29629b84 	addi	r5,r5,-30098
  80aba8:	dc403015 	stw	r17,192(sp)
  80abac:	d9402b15 	stw	r5,172(sp)
  80abb0:	b023883a 	mov	r17,r22
  80abb4:	04c001c4 	movi	r19,7
  80abb8:	a82d883a 	mov	r22,r21
  80abbc:	902b883a 	mov	r21,r18
  80abc0:	8025883a 	mov	r18,r16
  80abc4:	dc002c17 	ldw	r16,176(sp)
  80abc8:	00000306 	br	80abd8 <___vfprintf_internal_r+0xf84>
  80abcc:	8c7ffc04 	addi	r17,r17,-16
  80abd0:	42000204 	addi	r8,r8,8
  80abd4:	e440110e 	bge	fp,r17,80ac1c <___vfprintf_internal_r+0xfc8>
  80abd8:	18c00404 	addi	r3,r3,16
  80abdc:	10800044 	addi	r2,r2,1
  80abe0:	45000015 	stw	r20,0(r8)
  80abe4:	47000115 	stw	fp,4(r8)
  80abe8:	d8c02015 	stw	r3,128(sp)
  80abec:	d8801f15 	stw	r2,124(sp)
  80abf0:	98bff60e 	bge	r19,r2,80abcc <__alt_mem_onchip_mem+0xff802bcc>
  80abf4:	d9801e04 	addi	r6,sp,120
  80abf8:	b80b883a 	mov	r5,r23
  80abfc:	8009883a 	mov	r4,r16
  80ac00:	081076c0 	call	81076c <__sprint_r>
  80ac04:	103d151e 	bne	r2,zero,80a05c <__alt_mem_onchip_mem+0xff80205c>
  80ac08:	8c7ffc04 	addi	r17,r17,-16
  80ac0c:	d8c02017 	ldw	r3,128(sp)
  80ac10:	d8801f17 	ldw	r2,124(sp)
  80ac14:	da000404 	addi	r8,sp,16
  80ac18:	e47fef16 	blt	fp,r17,80abd8 <__alt_mem_onchip_mem+0xff802bd8>
  80ac1c:	9021883a 	mov	r16,r18
  80ac20:	a825883a 	mov	r18,r21
  80ac24:	b02b883a 	mov	r21,r22
  80ac28:	882d883a 	mov	r22,r17
  80ac2c:	dc403017 	ldw	r17,192(sp)
  80ac30:	d9002b17 	ldw	r4,172(sp)
  80ac34:	1d87883a 	add	r3,r3,r22
  80ac38:	10800044 	addi	r2,r2,1
  80ac3c:	41000015 	stw	r4,0(r8)
  80ac40:	45800115 	stw	r22,4(r8)
  80ac44:	d8c02015 	stw	r3,128(sp)
  80ac48:	d8801f15 	stw	r2,124(sp)
  80ac4c:	010001c4 	movi	r4,7
  80ac50:	20818e16 	blt	r4,r2,80b28c <___vfprintf_internal_r+0x1638>
  80ac54:	42000204 	addi	r8,r8,8
  80ac58:	003e3106 	br	80a520 <__alt_mem_onchip_mem+0xff802520>
  80ac5c:	d9403317 	ldw	r5,204(sp)
  80ac60:	00800044 	movi	r2,1
  80ac64:	18c00044 	addi	r3,r3,1
  80ac68:	1141530e 	bge	r2,r5,80b1b8 <___vfprintf_internal_r+0x1564>
  80ac6c:	dc401f17 	ldw	r17,124(sp)
  80ac70:	00800044 	movi	r2,1
  80ac74:	40800115 	stw	r2,4(r8)
  80ac78:	8c400044 	addi	r17,r17,1
  80ac7c:	44000015 	stw	r16,0(r8)
  80ac80:	d8c02015 	stw	r3,128(sp)
  80ac84:	dc401f15 	stw	r17,124(sp)
  80ac88:	008001c4 	movi	r2,7
  80ac8c:	14416b16 	blt	r2,r17,80b23c <___vfprintf_internal_r+0x15e8>
  80ac90:	42000204 	addi	r8,r8,8
  80ac94:	d8803717 	ldw	r2,220(sp)
  80ac98:	d9003417 	ldw	r4,208(sp)
  80ac9c:	8c400044 	addi	r17,r17,1
  80aca0:	10c7883a 	add	r3,r2,r3
  80aca4:	40800115 	stw	r2,4(r8)
  80aca8:	41000015 	stw	r4,0(r8)
  80acac:	d8c02015 	stw	r3,128(sp)
  80acb0:	dc401f15 	stw	r17,124(sp)
  80acb4:	008001c4 	movi	r2,7
  80acb8:	14416916 	blt	r2,r17,80b260 <___vfprintf_internal_r+0x160c>
  80acbc:	45800204 	addi	r22,r8,8
  80acc0:	d9003617 	ldw	r4,216(sp)
  80acc4:	d9403817 	ldw	r5,224(sp)
  80acc8:	000d883a 	mov	r6,zero
  80accc:	000f883a 	mov	r7,zero
  80acd0:	d8c03c15 	stw	r3,240(sp)
  80acd4:	08146b40 	call	8146b4 <__eqdf2>
  80acd8:	d8c03c17 	ldw	r3,240(sp)
  80acdc:	1000bc26 	beq	r2,zero,80afd0 <___vfprintf_internal_r+0x137c>
  80ace0:	d9403317 	ldw	r5,204(sp)
  80ace4:	84000044 	addi	r16,r16,1
  80ace8:	8c400044 	addi	r17,r17,1
  80acec:	28bfffc4 	addi	r2,r5,-1
  80acf0:	1887883a 	add	r3,r3,r2
  80acf4:	b0800115 	stw	r2,4(r22)
  80acf8:	b4000015 	stw	r16,0(r22)
  80acfc:	d8c02015 	stw	r3,128(sp)
  80ad00:	dc401f15 	stw	r17,124(sp)
  80ad04:	008001c4 	movi	r2,7
  80ad08:	14414316 	blt	r2,r17,80b218 <___vfprintf_internal_r+0x15c4>
  80ad0c:	b5800204 	addi	r22,r22,8
  80ad10:	d9003a17 	ldw	r4,232(sp)
  80ad14:	df0022c4 	addi	fp,sp,139
  80ad18:	8c400044 	addi	r17,r17,1
  80ad1c:	20c7883a 	add	r3,r4,r3
  80ad20:	b7000015 	stw	fp,0(r22)
  80ad24:	b1000115 	stw	r4,4(r22)
  80ad28:	d8c02015 	stw	r3,128(sp)
  80ad2c:	dc401f15 	stw	r17,124(sp)
  80ad30:	008001c4 	movi	r2,7
  80ad34:	14400e16 	blt	r2,r17,80ad70 <___vfprintf_internal_r+0x111c>
  80ad38:	b2000204 	addi	r8,r22,8
  80ad3c:	003e3a06 	br	80a628 <__alt_mem_onchip_mem+0xff802628>
  80ad40:	010020b4 	movhi	r4,130
  80ad44:	21229b84 	addi	r4,r4,-30098
  80ad48:	d9002b15 	stw	r4,172(sp)
  80ad4c:	d9002b17 	ldw	r4,172(sp)
  80ad50:	1c07883a 	add	r3,r3,r16
  80ad54:	44000115 	stw	r16,4(r8)
  80ad58:	41000015 	stw	r4,0(r8)
  80ad5c:	10800044 	addi	r2,r2,1
  80ad60:	d8c02015 	stw	r3,128(sp)
  80ad64:	d8801f15 	stw	r2,124(sp)
  80ad68:	010001c4 	movi	r4,7
  80ad6c:	20be2d0e 	bge	r4,r2,80a624 <__alt_mem_onchip_mem+0xff802624>
  80ad70:	d9002c17 	ldw	r4,176(sp)
  80ad74:	d9801e04 	addi	r6,sp,120
  80ad78:	b80b883a 	mov	r5,r23
  80ad7c:	081076c0 	call	81076c <__sprint_r>
  80ad80:	103cb61e 	bne	r2,zero,80a05c <__alt_mem_onchip_mem+0xff80205c>
  80ad84:	d8c02017 	ldw	r3,128(sp)
  80ad88:	da000404 	addi	r8,sp,16
  80ad8c:	003e2606 	br	80a628 <__alt_mem_onchip_mem+0xff802628>
  80ad90:	d9002c17 	ldw	r4,176(sp)
  80ad94:	d9801e04 	addi	r6,sp,120
  80ad98:	b80b883a 	mov	r5,r23
  80ad9c:	081076c0 	call	81076c <__sprint_r>
  80ada0:	103e5d26 	beq	r2,zero,80a718 <__alt_mem_onchip_mem+0xff802718>
  80ada4:	003cad06 	br	80a05c <__alt_mem_onchip_mem+0xff80205c>
  80ada8:	d9002c17 	ldw	r4,176(sp)
  80adac:	d9801e04 	addi	r6,sp,120
  80adb0:	b80b883a 	mov	r5,r23
  80adb4:	081076c0 	call	81076c <__sprint_r>
  80adb8:	103ca81e 	bne	r2,zero,80a05c <__alt_mem_onchip_mem+0xff80205c>
  80adbc:	d8c02017 	ldw	r3,128(sp)
  80adc0:	da000404 	addi	r8,sp,16
  80adc4:	003e0b06 	br	80a5f4 <__alt_mem_onchip_mem+0xff8025f4>
  80adc8:	d9002c17 	ldw	r4,176(sp)
  80adcc:	d9801e04 	addi	r6,sp,120
  80add0:	b80b883a 	mov	r5,r23
  80add4:	081076c0 	call	81076c <__sprint_r>
  80add8:	103ca01e 	bne	r2,zero,80a05c <__alt_mem_onchip_mem+0xff80205c>
  80addc:	d8c02017 	ldw	r3,128(sp)
  80ade0:	da000404 	addi	r8,sp,16
  80ade4:	003dbd06 	br	80a4dc <__alt_mem_onchip_mem+0xff8024dc>
  80ade8:	d9002c17 	ldw	r4,176(sp)
  80adec:	d9801e04 	addi	r6,sp,120
  80adf0:	b80b883a 	mov	r5,r23
  80adf4:	081076c0 	call	81076c <__sprint_r>
  80adf8:	103c981e 	bne	r2,zero,80a05c <__alt_mem_onchip_mem+0xff80205c>
  80adfc:	d8c02017 	ldw	r3,128(sp)
  80ae00:	da000404 	addi	r8,sp,16
  80ae04:	003dc306 	br	80a514 <__alt_mem_onchip_mem+0xff802514>
  80ae08:	d8802917 	ldw	r2,164(sp)
  80ae0c:	d8002785 	stb	zero,158(sp)
  80ae10:	103f0616 	blt	r2,zero,80aa2c <__alt_mem_onchip_mem+0xff802a2c>
  80ae14:	00ffdfc4 	movi	r3,-129
  80ae18:	9d84b03a 	or	r2,r19,r22
  80ae1c:	90e4703a 	and	r18,r18,r3
  80ae20:	103c6b26 	beq	r2,zero,809fd0 <__alt_mem_onchip_mem+0xff801fd0>
  80ae24:	0039883a 	mov	fp,zero
  80ae28:	003e7406 	br	80a7fc <__alt_mem_onchip_mem+0xff8027fc>
  80ae2c:	9080040c 	andi	r2,r18,16
  80ae30:	1001b326 	beq	r2,zero,80b500 <___vfprintf_internal_r+0x18ac>
  80ae34:	d9002d17 	ldw	r4,180(sp)
  80ae38:	d9402917 	ldw	r5,164(sp)
  80ae3c:	d8002785 	stb	zero,158(sp)
  80ae40:	20800104 	addi	r2,r4,4
  80ae44:	24c00017 	ldw	r19,0(r4)
  80ae48:	002d883a 	mov	r22,zero
  80ae4c:	2801b516 	blt	r5,zero,80b524 <___vfprintf_internal_r+0x18d0>
  80ae50:	00ffdfc4 	movi	r3,-129
  80ae54:	d8802d15 	stw	r2,180(sp)
  80ae58:	90e4703a 	and	r18,r18,r3
  80ae5c:	983d2726 	beq	r19,zero,80a2fc <__alt_mem_onchip_mem+0xff8022fc>
  80ae60:	0039883a 	mov	fp,zero
  80ae64:	003d2a06 	br	80a310 <__alt_mem_onchip_mem+0xff802310>
  80ae68:	dc402617 	ldw	r17,152(sp)
  80ae6c:	0441d30e 	bge	zero,r17,80b5bc <___vfprintf_internal_r+0x1968>
  80ae70:	dc403217 	ldw	r17,200(sp)
  80ae74:	d8803317 	ldw	r2,204(sp)
  80ae78:	1440010e 	bge	r2,r17,80ae80 <___vfprintf_internal_r+0x122c>
  80ae7c:	1023883a 	mov	r17,r2
  80ae80:	04400a0e 	bge	zero,r17,80aeac <___vfprintf_internal_r+0x1258>
  80ae84:	d8801f17 	ldw	r2,124(sp)
  80ae88:	1c47883a 	add	r3,r3,r17
  80ae8c:	44000015 	stw	r16,0(r8)
  80ae90:	10800044 	addi	r2,r2,1
  80ae94:	44400115 	stw	r17,4(r8)
  80ae98:	d8c02015 	stw	r3,128(sp)
  80ae9c:	d8801f15 	stw	r2,124(sp)
  80aea0:	010001c4 	movi	r4,7
  80aea4:	20826516 	blt	r4,r2,80b83c <___vfprintf_internal_r+0x1be8>
  80aea8:	42000204 	addi	r8,r8,8
  80aeac:	88026116 	blt	r17,zero,80b834 <___vfprintf_internal_r+0x1be0>
  80aeb0:	d9003217 	ldw	r4,200(sp)
  80aeb4:	2463c83a 	sub	r17,r4,r17
  80aeb8:	04407b0e 	bge	zero,r17,80b0a8 <___vfprintf_internal_r+0x1454>
  80aebc:	05800404 	movi	r22,16
  80aec0:	d8801f17 	ldw	r2,124(sp)
  80aec4:	b4419d0e 	bge	r22,r17,80b53c <___vfprintf_internal_r+0x18e8>
  80aec8:	010020b4 	movhi	r4,130
  80aecc:	21229b84 	addi	r4,r4,-30098
  80aed0:	d9002b15 	stw	r4,172(sp)
  80aed4:	070001c4 	movi	fp,7
  80aed8:	dcc02c17 	ldw	r19,176(sp)
  80aedc:	00000306 	br	80aeec <___vfprintf_internal_r+0x1298>
  80aee0:	42000204 	addi	r8,r8,8
  80aee4:	8c7ffc04 	addi	r17,r17,-16
  80aee8:	b441970e 	bge	r22,r17,80b548 <___vfprintf_internal_r+0x18f4>
  80aeec:	18c00404 	addi	r3,r3,16
  80aef0:	10800044 	addi	r2,r2,1
  80aef4:	45000015 	stw	r20,0(r8)
  80aef8:	45800115 	stw	r22,4(r8)
  80aefc:	d8c02015 	stw	r3,128(sp)
  80af00:	d8801f15 	stw	r2,124(sp)
  80af04:	e0bff60e 	bge	fp,r2,80aee0 <__alt_mem_onchip_mem+0xff802ee0>
  80af08:	d9801e04 	addi	r6,sp,120
  80af0c:	b80b883a 	mov	r5,r23
  80af10:	9809883a 	mov	r4,r19
  80af14:	081076c0 	call	81076c <__sprint_r>
  80af18:	103c501e 	bne	r2,zero,80a05c <__alt_mem_onchip_mem+0xff80205c>
  80af1c:	d8c02017 	ldw	r3,128(sp)
  80af20:	d8801f17 	ldw	r2,124(sp)
  80af24:	da000404 	addi	r8,sp,16
  80af28:	003fee06 	br	80aee4 <__alt_mem_onchip_mem+0xff802ee4>
  80af2c:	d9002c17 	ldw	r4,176(sp)
  80af30:	d9801e04 	addi	r6,sp,120
  80af34:	b80b883a 	mov	r5,r23
  80af38:	081076c0 	call	81076c <__sprint_r>
  80af3c:	103c471e 	bne	r2,zero,80a05c <__alt_mem_onchip_mem+0xff80205c>
  80af40:	d8c02017 	ldw	r3,128(sp)
  80af44:	df002787 	ldb	fp,158(sp)
  80af48:	da000404 	addi	r8,sp,16
  80af4c:	003d5606 	br	80a4a8 <__alt_mem_onchip_mem+0xff8024a8>
  80af50:	9080040c 	andi	r2,r18,16
  80af54:	10016126 	beq	r2,zero,80b4dc <___vfprintf_internal_r+0x1888>
  80af58:	d8802d17 	ldw	r2,180(sp)
  80af5c:	14c00017 	ldw	r19,0(r2)
  80af60:	10800104 	addi	r2,r2,4
  80af64:	d8802d15 	stw	r2,180(sp)
  80af68:	982dd7fa 	srai	r22,r19,31
  80af6c:	b005883a 	mov	r2,r22
  80af70:	003c8206 	br	80a17c <__alt_mem_onchip_mem+0xff80217c>
  80af74:	9080040c 	andi	r2,r18,16
  80af78:	10003526 	beq	r2,zero,80b050 <___vfprintf_internal_r+0x13fc>
  80af7c:	d9402d17 	ldw	r5,180(sp)
  80af80:	d8c02917 	ldw	r3,164(sp)
  80af84:	d8002785 	stb	zero,158(sp)
  80af88:	28800104 	addi	r2,r5,4
  80af8c:	2cc00017 	ldw	r19,0(r5)
  80af90:	002d883a 	mov	r22,zero
  80af94:	18003716 	blt	r3,zero,80b074 <___vfprintf_internal_r+0x1420>
  80af98:	00ffdfc4 	movi	r3,-129
  80af9c:	d8802d15 	stw	r2,180(sp)
  80afa0:	90e4703a 	and	r18,r18,r3
  80afa4:	0039883a 	mov	fp,zero
  80afa8:	983df326 	beq	r19,zero,80a778 <__alt_mem_onchip_mem+0xff802778>
  80afac:	00800244 	movi	r2,9
  80afb0:	14fc7b36 	bltu	r2,r19,80a1a0 <__alt_mem_onchip_mem+0xff8021a0>
  80afb4:	d8c02817 	ldw	r3,160(sp)
  80afb8:	dc001dc4 	addi	r16,sp,119
  80afbc:	9cc00c04 	addi	r19,r19,48
  80afc0:	1c07c83a 	sub	r3,r3,r16
  80afc4:	dcc01dc5 	stb	r19,119(sp)
  80afc8:	d8c02e15 	stw	r3,184(sp)
  80afcc:	003ce806 	br	80a370 <__alt_mem_onchip_mem+0xff802370>
  80afd0:	d8803317 	ldw	r2,204(sp)
  80afd4:	143fffc4 	addi	r16,r2,-1
  80afd8:	043f4d0e 	bge	zero,r16,80ad10 <__alt_mem_onchip_mem+0xff802d10>
  80afdc:	07000404 	movi	fp,16
  80afe0:	e400810e 	bge	fp,r16,80b1e8 <___vfprintf_internal_r+0x1594>
  80afe4:	014020b4 	movhi	r5,130
  80afe8:	29629b84 	addi	r5,r5,-30098
  80afec:	d9402b15 	stw	r5,172(sp)
  80aff0:	01c001c4 	movi	r7,7
  80aff4:	dcc02c17 	ldw	r19,176(sp)
  80aff8:	00000306 	br	80b008 <___vfprintf_internal_r+0x13b4>
  80affc:	b5800204 	addi	r22,r22,8
  80b000:	843ffc04 	addi	r16,r16,-16
  80b004:	e4007b0e 	bge	fp,r16,80b1f4 <___vfprintf_internal_r+0x15a0>
  80b008:	18c00404 	addi	r3,r3,16
  80b00c:	8c400044 	addi	r17,r17,1
  80b010:	b5000015 	stw	r20,0(r22)
  80b014:	b7000115 	stw	fp,4(r22)
  80b018:	d8c02015 	stw	r3,128(sp)
  80b01c:	dc401f15 	stw	r17,124(sp)
  80b020:	3c7ff60e 	bge	r7,r17,80affc <__alt_mem_onchip_mem+0xff802ffc>
  80b024:	d9801e04 	addi	r6,sp,120
  80b028:	b80b883a 	mov	r5,r23
  80b02c:	9809883a 	mov	r4,r19
  80b030:	d9c03c15 	stw	r7,240(sp)
  80b034:	081076c0 	call	81076c <__sprint_r>
  80b038:	d9c03c17 	ldw	r7,240(sp)
  80b03c:	103c071e 	bne	r2,zero,80a05c <__alt_mem_onchip_mem+0xff80205c>
  80b040:	d8c02017 	ldw	r3,128(sp)
  80b044:	dc401f17 	ldw	r17,124(sp)
  80b048:	dd800404 	addi	r22,sp,16
  80b04c:	003fec06 	br	80b000 <__alt_mem_onchip_mem+0xff803000>
  80b050:	9080100c 	andi	r2,r18,64
  80b054:	d8002785 	stb	zero,158(sp)
  80b058:	10010e26 	beq	r2,zero,80b494 <___vfprintf_internal_r+0x1840>
  80b05c:	d9002d17 	ldw	r4,180(sp)
  80b060:	d9402917 	ldw	r5,164(sp)
  80b064:	002d883a 	mov	r22,zero
  80b068:	20800104 	addi	r2,r4,4
  80b06c:	24c0000b 	ldhu	r19,0(r4)
  80b070:	283fc90e 	bge	r5,zero,80af98 <__alt_mem_onchip_mem+0xff802f98>
  80b074:	d8802d15 	stw	r2,180(sp)
  80b078:	0039883a 	mov	fp,zero
  80b07c:	9d84b03a 	or	r2,r19,r22
  80b080:	103c461e 	bne	r2,zero,80a19c <__alt_mem_onchip_mem+0xff80219c>
  80b084:	00800044 	movi	r2,1
  80b088:	003e6c06 	br	80aa3c <__alt_mem_onchip_mem+0xff802a3c>
  80b08c:	d9002c17 	ldw	r4,176(sp)
  80b090:	d9801e04 	addi	r6,sp,120
  80b094:	b80b883a 	mov	r5,r23
  80b098:	081076c0 	call	81076c <__sprint_r>
  80b09c:	103bef1e 	bne	r2,zero,80a05c <__alt_mem_onchip_mem+0xff80205c>
  80b0a0:	d8c02017 	ldw	r3,128(sp)
  80b0a4:	da000404 	addi	r8,sp,16
  80b0a8:	d9003217 	ldw	r4,200(sp)
  80b0ac:	d8802617 	ldw	r2,152(sp)
  80b0b0:	d9403317 	ldw	r5,204(sp)
  80b0b4:	8123883a 	add	r17,r16,r4
  80b0b8:	11400216 	blt	r2,r5,80b0c4 <___vfprintf_internal_r+0x1470>
  80b0bc:	9100004c 	andi	r4,r18,1
  80b0c0:	20000d26 	beq	r4,zero,80b0f8 <___vfprintf_internal_r+0x14a4>
  80b0c4:	d9003717 	ldw	r4,220(sp)
  80b0c8:	d9403417 	ldw	r5,208(sp)
  80b0cc:	1907883a 	add	r3,r3,r4
  80b0d0:	d9001f17 	ldw	r4,124(sp)
  80b0d4:	41400015 	stw	r5,0(r8)
  80b0d8:	d9403717 	ldw	r5,220(sp)
  80b0dc:	21000044 	addi	r4,r4,1
  80b0e0:	d8c02015 	stw	r3,128(sp)
  80b0e4:	41400115 	stw	r5,4(r8)
  80b0e8:	d9001f15 	stw	r4,124(sp)
  80b0ec:	014001c4 	movi	r5,7
  80b0f0:	2901e816 	blt	r5,r4,80b894 <___vfprintf_internal_r+0x1c40>
  80b0f4:	42000204 	addi	r8,r8,8
  80b0f8:	d9003317 	ldw	r4,204(sp)
  80b0fc:	8121883a 	add	r16,r16,r4
  80b100:	2085c83a 	sub	r2,r4,r2
  80b104:	8461c83a 	sub	r16,r16,r17
  80b108:	1400010e 	bge	r2,r16,80b110 <___vfprintf_internal_r+0x14bc>
  80b10c:	1021883a 	mov	r16,r2
  80b110:	04000a0e 	bge	zero,r16,80b13c <___vfprintf_internal_r+0x14e8>
  80b114:	d9001f17 	ldw	r4,124(sp)
  80b118:	1c07883a 	add	r3,r3,r16
  80b11c:	44400015 	stw	r17,0(r8)
  80b120:	21000044 	addi	r4,r4,1
  80b124:	44000115 	stw	r16,4(r8)
  80b128:	d8c02015 	stw	r3,128(sp)
  80b12c:	d9001f15 	stw	r4,124(sp)
  80b130:	014001c4 	movi	r5,7
  80b134:	2901fb16 	blt	r5,r4,80b924 <___vfprintf_internal_r+0x1cd0>
  80b138:	42000204 	addi	r8,r8,8
  80b13c:	8001f716 	blt	r16,zero,80b91c <___vfprintf_internal_r+0x1cc8>
  80b140:	1421c83a 	sub	r16,r2,r16
  80b144:	043d380e 	bge	zero,r16,80a628 <__alt_mem_onchip_mem+0xff802628>
  80b148:	04400404 	movi	r17,16
  80b14c:	d8801f17 	ldw	r2,124(sp)
  80b150:	8c3efb0e 	bge	r17,r16,80ad40 <__alt_mem_onchip_mem+0xff802d40>
  80b154:	014020b4 	movhi	r5,130
  80b158:	29629b84 	addi	r5,r5,-30098
  80b15c:	d9402b15 	stw	r5,172(sp)
  80b160:	058001c4 	movi	r22,7
  80b164:	dcc02c17 	ldw	r19,176(sp)
  80b168:	00000306 	br	80b178 <___vfprintf_internal_r+0x1524>
  80b16c:	42000204 	addi	r8,r8,8
  80b170:	843ffc04 	addi	r16,r16,-16
  80b174:	8c3ef50e 	bge	r17,r16,80ad4c <__alt_mem_onchip_mem+0xff802d4c>
  80b178:	18c00404 	addi	r3,r3,16
  80b17c:	10800044 	addi	r2,r2,1
  80b180:	45000015 	stw	r20,0(r8)
  80b184:	44400115 	stw	r17,4(r8)
  80b188:	d8c02015 	stw	r3,128(sp)
  80b18c:	d8801f15 	stw	r2,124(sp)
  80b190:	b0bff60e 	bge	r22,r2,80b16c <__alt_mem_onchip_mem+0xff80316c>
  80b194:	d9801e04 	addi	r6,sp,120
  80b198:	b80b883a 	mov	r5,r23
  80b19c:	9809883a 	mov	r4,r19
  80b1a0:	081076c0 	call	81076c <__sprint_r>
  80b1a4:	103bad1e 	bne	r2,zero,80a05c <__alt_mem_onchip_mem+0xff80205c>
  80b1a8:	d8c02017 	ldw	r3,128(sp)
  80b1ac:	d8801f17 	ldw	r2,124(sp)
  80b1b0:	da000404 	addi	r8,sp,16
  80b1b4:	003fee06 	br	80b170 <__alt_mem_onchip_mem+0xff803170>
  80b1b8:	9088703a 	and	r4,r18,r2
  80b1bc:	203eab1e 	bne	r4,zero,80ac6c <__alt_mem_onchip_mem+0xff802c6c>
  80b1c0:	dc401f17 	ldw	r17,124(sp)
  80b1c4:	40800115 	stw	r2,4(r8)
  80b1c8:	44000015 	stw	r16,0(r8)
  80b1cc:	8c400044 	addi	r17,r17,1
  80b1d0:	d8c02015 	stw	r3,128(sp)
  80b1d4:	dc401f15 	stw	r17,124(sp)
  80b1d8:	008001c4 	movi	r2,7
  80b1dc:	14400e16 	blt	r2,r17,80b218 <___vfprintf_internal_r+0x15c4>
  80b1e0:	45800204 	addi	r22,r8,8
  80b1e4:	003eca06 	br	80ad10 <__alt_mem_onchip_mem+0xff802d10>
  80b1e8:	010020b4 	movhi	r4,130
  80b1ec:	21229b84 	addi	r4,r4,-30098
  80b1f0:	d9002b15 	stw	r4,172(sp)
  80b1f4:	d8802b17 	ldw	r2,172(sp)
  80b1f8:	1c07883a 	add	r3,r3,r16
  80b1fc:	8c400044 	addi	r17,r17,1
  80b200:	b0800015 	stw	r2,0(r22)
  80b204:	b4000115 	stw	r16,4(r22)
  80b208:	d8c02015 	stw	r3,128(sp)
  80b20c:	dc401f15 	stw	r17,124(sp)
  80b210:	008001c4 	movi	r2,7
  80b214:	147ebd0e 	bge	r2,r17,80ad0c <__alt_mem_onchip_mem+0xff802d0c>
  80b218:	d9002c17 	ldw	r4,176(sp)
  80b21c:	d9801e04 	addi	r6,sp,120
  80b220:	b80b883a 	mov	r5,r23
  80b224:	081076c0 	call	81076c <__sprint_r>
  80b228:	103b8c1e 	bne	r2,zero,80a05c <__alt_mem_onchip_mem+0xff80205c>
  80b22c:	d8c02017 	ldw	r3,128(sp)
  80b230:	dc401f17 	ldw	r17,124(sp)
  80b234:	dd800404 	addi	r22,sp,16
  80b238:	003eb506 	br	80ad10 <__alt_mem_onchip_mem+0xff802d10>
  80b23c:	d9002c17 	ldw	r4,176(sp)
  80b240:	d9801e04 	addi	r6,sp,120
  80b244:	b80b883a 	mov	r5,r23
  80b248:	081076c0 	call	81076c <__sprint_r>
  80b24c:	103b831e 	bne	r2,zero,80a05c <__alt_mem_onchip_mem+0xff80205c>
  80b250:	d8c02017 	ldw	r3,128(sp)
  80b254:	dc401f17 	ldw	r17,124(sp)
  80b258:	da000404 	addi	r8,sp,16
  80b25c:	003e8d06 	br	80ac94 <__alt_mem_onchip_mem+0xff802c94>
  80b260:	d9002c17 	ldw	r4,176(sp)
  80b264:	d9801e04 	addi	r6,sp,120
  80b268:	b80b883a 	mov	r5,r23
  80b26c:	081076c0 	call	81076c <__sprint_r>
  80b270:	103b7a1e 	bne	r2,zero,80a05c <__alt_mem_onchip_mem+0xff80205c>
  80b274:	d8c02017 	ldw	r3,128(sp)
  80b278:	dc401f17 	ldw	r17,124(sp)
  80b27c:	dd800404 	addi	r22,sp,16
  80b280:	003e8f06 	br	80acc0 <__alt_mem_onchip_mem+0xff802cc0>
  80b284:	0027883a 	mov	r19,zero
  80b288:	003f4a06 	br	80afb4 <__alt_mem_onchip_mem+0xff802fb4>
  80b28c:	d9002c17 	ldw	r4,176(sp)
  80b290:	d9801e04 	addi	r6,sp,120
  80b294:	b80b883a 	mov	r5,r23
  80b298:	081076c0 	call	81076c <__sprint_r>
  80b29c:	103b6f1e 	bne	r2,zero,80a05c <__alt_mem_onchip_mem+0xff80205c>
  80b2a0:	d8c02017 	ldw	r3,128(sp)
  80b2a4:	da000404 	addi	r8,sp,16
  80b2a8:	003c9d06 	br	80a520 <__alt_mem_onchip_mem+0xff802520>
  80b2ac:	04e7c83a 	sub	r19,zero,r19
  80b2b0:	9804c03a 	cmpne	r2,r19,zero
  80b2b4:	05adc83a 	sub	r22,zero,r22
  80b2b8:	b0adc83a 	sub	r22,r22,r2
  80b2bc:	d8802917 	ldw	r2,164(sp)
  80b2c0:	07000b44 	movi	fp,45
  80b2c4:	df002785 	stb	fp,158(sp)
  80b2c8:	10017b16 	blt	r2,zero,80b8b8 <___vfprintf_internal_r+0x1c64>
  80b2cc:	00bfdfc4 	movi	r2,-129
  80b2d0:	90a4703a 	and	r18,r18,r2
  80b2d4:	003bb106 	br	80a19c <__alt_mem_onchip_mem+0xff80219c>
  80b2d8:	d9003617 	ldw	r4,216(sp)
  80b2dc:	d9403817 	ldw	r5,224(sp)
  80b2e0:	da003d15 	stw	r8,244(sp)
  80b2e4:	08102f80 	call	8102f8 <__fpclassifyd>
  80b2e8:	da003d17 	ldw	r8,244(sp)
  80b2ec:	1000f026 	beq	r2,zero,80b6b0 <___vfprintf_internal_r+0x1a5c>
  80b2f0:	d9002917 	ldw	r4,164(sp)
  80b2f4:	05bff7c4 	movi	r22,-33
  80b2f8:	00bfffc4 	movi	r2,-1
  80b2fc:	8dac703a 	and	r22,r17,r22
  80b300:	20820026 	beq	r4,r2,80bb04 <___vfprintf_internal_r+0x1eb0>
  80b304:	008011c4 	movi	r2,71
  80b308:	b081f726 	beq	r22,r2,80bae8 <___vfprintf_internal_r+0x1e94>
  80b30c:	d9003817 	ldw	r4,224(sp)
  80b310:	90c04014 	ori	r3,r18,256
  80b314:	d8c02b15 	stw	r3,172(sp)
  80b318:	20021516 	blt	r4,zero,80bb70 <___vfprintf_internal_r+0x1f1c>
  80b31c:	dcc03817 	ldw	r19,224(sp)
  80b320:	d8002a05 	stb	zero,168(sp)
  80b324:	00801984 	movi	r2,102
  80b328:	8881f926 	beq	r17,r2,80bb10 <___vfprintf_internal_r+0x1ebc>
  80b32c:	00801184 	movi	r2,70
  80b330:	88821c26 	beq	r17,r2,80bba4 <___vfprintf_internal_r+0x1f50>
  80b334:	00801144 	movi	r2,69
  80b338:	b081ef26 	beq	r22,r2,80baf8 <___vfprintf_internal_r+0x1ea4>
  80b33c:	d8c02917 	ldw	r3,164(sp)
  80b340:	d8802104 	addi	r2,sp,132
  80b344:	d8800315 	stw	r2,12(sp)
  80b348:	d9403617 	ldw	r5,216(sp)
  80b34c:	d8802504 	addi	r2,sp,148
  80b350:	d9002c17 	ldw	r4,176(sp)
  80b354:	d8800215 	stw	r2,8(sp)
  80b358:	d8802604 	addi	r2,sp,152
  80b35c:	d8c00015 	stw	r3,0(sp)
  80b360:	d8800115 	stw	r2,4(sp)
  80b364:	01c00084 	movi	r7,2
  80b368:	980d883a 	mov	r6,r19
  80b36c:	d8c03c15 	stw	r3,240(sp)
  80b370:	da003d15 	stw	r8,244(sp)
  80b374:	080c2780 	call	80c278 <_dtoa_r>
  80b378:	1021883a 	mov	r16,r2
  80b37c:	008019c4 	movi	r2,103
  80b380:	d8c03c17 	ldw	r3,240(sp)
  80b384:	da003d17 	ldw	r8,244(sp)
  80b388:	88817126 	beq	r17,r2,80b950 <___vfprintf_internal_r+0x1cfc>
  80b38c:	008011c4 	movi	r2,71
  80b390:	88829226 	beq	r17,r2,80bddc <___vfprintf_internal_r+0x2188>
  80b394:	80f9883a 	add	fp,r16,r3
  80b398:	d9003617 	ldw	r4,216(sp)
  80b39c:	000d883a 	mov	r6,zero
  80b3a0:	000f883a 	mov	r7,zero
  80b3a4:	980b883a 	mov	r5,r19
  80b3a8:	da003d15 	stw	r8,244(sp)
  80b3ac:	08146b40 	call	8146b4 <__eqdf2>
  80b3b0:	da003d17 	ldw	r8,244(sp)
  80b3b4:	10018d26 	beq	r2,zero,80b9ec <___vfprintf_internal_r+0x1d98>
  80b3b8:	d8802117 	ldw	r2,132(sp)
  80b3bc:	1700062e 	bgeu	r2,fp,80b3d8 <___vfprintf_internal_r+0x1784>
  80b3c0:	01000c04 	movi	r4,48
  80b3c4:	10c00044 	addi	r3,r2,1
  80b3c8:	d8c02115 	stw	r3,132(sp)
  80b3cc:	11000005 	stb	r4,0(r2)
  80b3d0:	d8802117 	ldw	r2,132(sp)
  80b3d4:	173ffb36 	bltu	r2,fp,80b3c4 <__alt_mem_onchip_mem+0xff8033c4>
  80b3d8:	1405c83a 	sub	r2,r2,r16
  80b3dc:	d8803315 	stw	r2,204(sp)
  80b3e0:	008011c4 	movi	r2,71
  80b3e4:	b0817626 	beq	r22,r2,80b9c0 <___vfprintf_internal_r+0x1d6c>
  80b3e8:	00801944 	movi	r2,101
  80b3ec:	1442810e 	bge	r2,r17,80bdf4 <___vfprintf_internal_r+0x21a0>
  80b3f0:	d8c02617 	ldw	r3,152(sp)
  80b3f4:	00801984 	movi	r2,102
  80b3f8:	d8c03215 	stw	r3,200(sp)
  80b3fc:	8881fe26 	beq	r17,r2,80bbf8 <___vfprintf_internal_r+0x1fa4>
  80b400:	d8c03217 	ldw	r3,200(sp)
  80b404:	d9003317 	ldw	r4,204(sp)
  80b408:	1901dd16 	blt	r3,r4,80bb80 <___vfprintf_internal_r+0x1f2c>
  80b40c:	9480004c 	andi	r18,r18,1
  80b410:	90022b1e 	bne	r18,zero,80bcc0 <___vfprintf_internal_r+0x206c>
  80b414:	1805883a 	mov	r2,r3
  80b418:	18028016 	blt	r3,zero,80be1c <___vfprintf_internal_r+0x21c8>
  80b41c:	d8c03217 	ldw	r3,200(sp)
  80b420:	044019c4 	movi	r17,103
  80b424:	d8c02e15 	stw	r3,184(sp)
  80b428:	df002a07 	ldb	fp,168(sp)
  80b42c:	e001531e 	bne	fp,zero,80b97c <___vfprintf_internal_r+0x1d28>
  80b430:	df002783 	ldbu	fp,158(sp)
  80b434:	d8802a15 	stw	r2,168(sp)
  80b438:	dc802b17 	ldw	r18,172(sp)
  80b43c:	d8002915 	stw	zero,164(sp)
  80b440:	003bd106 	br	80a388 <__alt_mem_onchip_mem+0xff802388>
  80b444:	d8802d17 	ldw	r2,180(sp)
  80b448:	d8c02d17 	ldw	r3,180(sp)
  80b44c:	d9002d17 	ldw	r4,180(sp)
  80b450:	10800017 	ldw	r2,0(r2)
  80b454:	18c00117 	ldw	r3,4(r3)
  80b458:	21000204 	addi	r4,r4,8
  80b45c:	d8803615 	stw	r2,216(sp)
  80b460:	d8c03815 	stw	r3,224(sp)
  80b464:	d9002d15 	stw	r4,180(sp)
  80b468:	003b7506 	br	80a240 <__alt_mem_onchip_mem+0xff802240>
  80b46c:	ac400007 	ldb	r17,0(r21)
  80b470:	003a5906 	br	809dd8 <__alt_mem_onchip_mem+0xff801dd8>
  80b474:	9080100c 	andi	r2,r18,64
  80b478:	1000a826 	beq	r2,zero,80b71c <___vfprintf_internal_r+0x1ac8>
  80b47c:	d9002d17 	ldw	r4,180(sp)
  80b480:	002d883a 	mov	r22,zero
  80b484:	24c0000b 	ldhu	r19,0(r4)
  80b488:	21000104 	addi	r4,r4,4
  80b48c:	d9002d15 	stw	r4,180(sp)
  80b490:	003ccb06 	br	80a7c0 <__alt_mem_onchip_mem+0xff8027c0>
  80b494:	d8c02d17 	ldw	r3,180(sp)
  80b498:	d9002917 	ldw	r4,164(sp)
  80b49c:	002d883a 	mov	r22,zero
  80b4a0:	18800104 	addi	r2,r3,4
  80b4a4:	1cc00017 	ldw	r19,0(r3)
  80b4a8:	203ebb0e 	bge	r4,zero,80af98 <__alt_mem_onchip_mem+0xff802f98>
  80b4ac:	003ef106 	br	80b074 <__alt_mem_onchip_mem+0xff803074>
  80b4b0:	9080040c 	andi	r2,r18,16
  80b4b4:	1000921e 	bne	r2,zero,80b700 <___vfprintf_internal_r+0x1aac>
  80b4b8:	9480100c 	andi	r18,r18,64
  80b4bc:	90013926 	beq	r18,zero,80b9a4 <___vfprintf_internal_r+0x1d50>
  80b4c0:	d9002d17 	ldw	r4,180(sp)
  80b4c4:	d9402f17 	ldw	r5,188(sp)
  80b4c8:	20800017 	ldw	r2,0(r4)
  80b4cc:	21000104 	addi	r4,r4,4
  80b4d0:	d9002d15 	stw	r4,180(sp)
  80b4d4:	1140000d 	sth	r5,0(r2)
  80b4d8:	003a1606 	br	809d34 <__alt_mem_onchip_mem+0xff801d34>
  80b4dc:	9080100c 	andi	r2,r18,64
  80b4e0:	10008026 	beq	r2,zero,80b6e4 <___vfprintf_internal_r+0x1a90>
  80b4e4:	d8c02d17 	ldw	r3,180(sp)
  80b4e8:	1cc0000f 	ldh	r19,0(r3)
  80b4ec:	18c00104 	addi	r3,r3,4
  80b4f0:	d8c02d15 	stw	r3,180(sp)
  80b4f4:	982dd7fa 	srai	r22,r19,31
  80b4f8:	b005883a 	mov	r2,r22
  80b4fc:	003b1f06 	br	80a17c <__alt_mem_onchip_mem+0xff80217c>
  80b500:	9080100c 	andi	r2,r18,64
  80b504:	d8002785 	stb	zero,158(sp)
  80b508:	10008a1e 	bne	r2,zero,80b734 <___vfprintf_internal_r+0x1ae0>
  80b50c:	d9402d17 	ldw	r5,180(sp)
  80b510:	d8c02917 	ldw	r3,164(sp)
  80b514:	002d883a 	mov	r22,zero
  80b518:	28800104 	addi	r2,r5,4
  80b51c:	2cc00017 	ldw	r19,0(r5)
  80b520:	183e4b0e 	bge	r3,zero,80ae50 <__alt_mem_onchip_mem+0xff802e50>
  80b524:	9d86b03a 	or	r3,r19,r22
  80b528:	d8802d15 	stw	r2,180(sp)
  80b52c:	183e4c1e 	bne	r3,zero,80ae60 <__alt_mem_onchip_mem+0xff802e60>
  80b530:	0039883a 	mov	fp,zero
  80b534:	0005883a 	mov	r2,zero
  80b538:	003d4006 	br	80aa3c <__alt_mem_onchip_mem+0xff802a3c>
  80b53c:	014020b4 	movhi	r5,130
  80b540:	29629b84 	addi	r5,r5,-30098
  80b544:	d9402b15 	stw	r5,172(sp)
  80b548:	d9402b17 	ldw	r5,172(sp)
  80b54c:	1c47883a 	add	r3,r3,r17
  80b550:	10800044 	addi	r2,r2,1
  80b554:	41400015 	stw	r5,0(r8)
  80b558:	44400115 	stw	r17,4(r8)
  80b55c:	d8c02015 	stw	r3,128(sp)
  80b560:	d8801f15 	stw	r2,124(sp)
  80b564:	010001c4 	movi	r4,7
  80b568:	20bec816 	blt	r4,r2,80b08c <__alt_mem_onchip_mem+0xff80308c>
  80b56c:	42000204 	addi	r8,r8,8
  80b570:	003ecd06 	br	80b0a8 <__alt_mem_onchip_mem+0xff8030a8>
  80b574:	d9002917 	ldw	r4,164(sp)
  80b578:	d8002785 	stb	zero,158(sp)
  80b57c:	203d2d16 	blt	r4,zero,80aa34 <__alt_mem_onchip_mem+0xff802a34>
  80b580:	00bfdfc4 	movi	r2,-129
  80b584:	90a4703a 	and	r18,r18,r2
  80b588:	003a9106 	br	809fd0 <__alt_mem_onchip_mem+0xff801fd0>
  80b58c:	010020b4 	movhi	r4,130
  80b590:	21229b84 	addi	r4,r4,-30098
  80b594:	d9002b15 	stw	r4,172(sp)
  80b598:	003c0c06 	br	80a5cc <__alt_mem_onchip_mem+0xff8025cc>
  80b59c:	d9002c17 	ldw	r4,176(sp)
  80b5a0:	d9801e04 	addi	r6,sp,120
  80b5a4:	b80b883a 	mov	r5,r23
  80b5a8:	081076c0 	call	81076c <__sprint_r>
  80b5ac:	103aab1e 	bne	r2,zero,80a05c <__alt_mem_onchip_mem+0xff80205c>
  80b5b0:	d8c02017 	ldw	r3,128(sp)
  80b5b4:	da000404 	addi	r8,sp,16
  80b5b8:	003d4106 	br	80aac0 <__alt_mem_onchip_mem+0xff802ac0>
  80b5bc:	d8801f17 	ldw	r2,124(sp)
  80b5c0:	014020b4 	movhi	r5,130
  80b5c4:	01000044 	movi	r4,1
  80b5c8:	18c00044 	addi	r3,r3,1
  80b5cc:	10800044 	addi	r2,r2,1
  80b5d0:	29629b04 	addi	r5,r5,-30100
  80b5d4:	41000115 	stw	r4,4(r8)
  80b5d8:	41400015 	stw	r5,0(r8)
  80b5dc:	d8c02015 	stw	r3,128(sp)
  80b5e0:	d8801f15 	stw	r2,124(sp)
  80b5e4:	010001c4 	movi	r4,7
  80b5e8:	20805c16 	blt	r4,r2,80b75c <___vfprintf_internal_r+0x1b08>
  80b5ec:	42000204 	addi	r8,r8,8
  80b5f0:	8800041e 	bne	r17,zero,80b604 <___vfprintf_internal_r+0x19b0>
  80b5f4:	d8803317 	ldw	r2,204(sp)
  80b5f8:	1000021e 	bne	r2,zero,80b604 <___vfprintf_internal_r+0x19b0>
  80b5fc:	9080004c 	andi	r2,r18,1
  80b600:	103c0926 	beq	r2,zero,80a628 <__alt_mem_onchip_mem+0xff802628>
  80b604:	d9003717 	ldw	r4,220(sp)
  80b608:	d8801f17 	ldw	r2,124(sp)
  80b60c:	d9403417 	ldw	r5,208(sp)
  80b610:	20c7883a 	add	r3,r4,r3
  80b614:	10800044 	addi	r2,r2,1
  80b618:	41000115 	stw	r4,4(r8)
  80b61c:	41400015 	stw	r5,0(r8)
  80b620:	d8c02015 	stw	r3,128(sp)
  80b624:	d8801f15 	stw	r2,124(sp)
  80b628:	010001c4 	movi	r4,7
  80b62c:	20812116 	blt	r4,r2,80bab4 <___vfprintf_internal_r+0x1e60>
  80b630:	42000204 	addi	r8,r8,8
  80b634:	0463c83a 	sub	r17,zero,r17
  80b638:	0440730e 	bge	zero,r17,80b808 <___vfprintf_internal_r+0x1bb4>
  80b63c:	05800404 	movi	r22,16
  80b640:	b440860e 	bge	r22,r17,80b85c <___vfprintf_internal_r+0x1c08>
  80b644:	014020b4 	movhi	r5,130
  80b648:	29629b84 	addi	r5,r5,-30098
  80b64c:	d9402b15 	stw	r5,172(sp)
  80b650:	070001c4 	movi	fp,7
  80b654:	dcc02c17 	ldw	r19,176(sp)
  80b658:	00000306 	br	80b668 <___vfprintf_internal_r+0x1a14>
  80b65c:	42000204 	addi	r8,r8,8
  80b660:	8c7ffc04 	addi	r17,r17,-16
  80b664:	b440800e 	bge	r22,r17,80b868 <___vfprintf_internal_r+0x1c14>
  80b668:	18c00404 	addi	r3,r3,16
  80b66c:	10800044 	addi	r2,r2,1
  80b670:	45000015 	stw	r20,0(r8)
  80b674:	45800115 	stw	r22,4(r8)
  80b678:	d8c02015 	stw	r3,128(sp)
  80b67c:	d8801f15 	stw	r2,124(sp)
  80b680:	e0bff60e 	bge	fp,r2,80b65c <__alt_mem_onchip_mem+0xff80365c>
  80b684:	d9801e04 	addi	r6,sp,120
  80b688:	b80b883a 	mov	r5,r23
  80b68c:	9809883a 	mov	r4,r19
  80b690:	081076c0 	call	81076c <__sprint_r>
  80b694:	103a711e 	bne	r2,zero,80a05c <__alt_mem_onchip_mem+0xff80205c>
  80b698:	d8c02017 	ldw	r3,128(sp)
  80b69c:	d8801f17 	ldw	r2,124(sp)
  80b6a0:	da000404 	addi	r8,sp,16
  80b6a4:	003fee06 	br	80b660 <__alt_mem_onchip_mem+0xff803660>
  80b6a8:	00bfffc4 	movi	r2,-1
  80b6ac:	003a6f06 	br	80a06c <__alt_mem_onchip_mem+0xff80206c>
  80b6b0:	008011c4 	movi	r2,71
  80b6b4:	1440b816 	blt	r2,r17,80b998 <___vfprintf_internal_r+0x1d44>
  80b6b8:	040020b4 	movhi	r16,130
  80b6bc:	84228d04 	addi	r16,r16,-30156
  80b6c0:	00c000c4 	movi	r3,3
  80b6c4:	00bfdfc4 	movi	r2,-129
  80b6c8:	d8c02a15 	stw	r3,168(sp)
  80b6cc:	90a4703a 	and	r18,r18,r2
  80b6d0:	df002783 	ldbu	fp,158(sp)
  80b6d4:	d8c02e15 	stw	r3,184(sp)
  80b6d8:	d8002915 	stw	zero,164(sp)
  80b6dc:	d8003215 	stw	zero,200(sp)
  80b6e0:	003b2906 	br	80a388 <__alt_mem_onchip_mem+0xff802388>
  80b6e4:	d9002d17 	ldw	r4,180(sp)
  80b6e8:	24c00017 	ldw	r19,0(r4)
  80b6ec:	21000104 	addi	r4,r4,4
  80b6f0:	d9002d15 	stw	r4,180(sp)
  80b6f4:	982dd7fa 	srai	r22,r19,31
  80b6f8:	b005883a 	mov	r2,r22
  80b6fc:	003a9f06 	br	80a17c <__alt_mem_onchip_mem+0xff80217c>
  80b700:	d9402d17 	ldw	r5,180(sp)
  80b704:	d8c02f17 	ldw	r3,188(sp)
  80b708:	28800017 	ldw	r2,0(r5)
  80b70c:	29400104 	addi	r5,r5,4
  80b710:	d9402d15 	stw	r5,180(sp)
  80b714:	10c00015 	stw	r3,0(r2)
  80b718:	00398606 	br	809d34 <__alt_mem_onchip_mem+0xff801d34>
  80b71c:	d9402d17 	ldw	r5,180(sp)
  80b720:	002d883a 	mov	r22,zero
  80b724:	2cc00017 	ldw	r19,0(r5)
  80b728:	29400104 	addi	r5,r5,4
  80b72c:	d9402d15 	stw	r5,180(sp)
  80b730:	003c2306 	br	80a7c0 <__alt_mem_onchip_mem+0xff8027c0>
  80b734:	d8c02d17 	ldw	r3,180(sp)
  80b738:	d9002917 	ldw	r4,164(sp)
  80b73c:	002d883a 	mov	r22,zero
  80b740:	18800104 	addi	r2,r3,4
  80b744:	1cc0000b 	ldhu	r19,0(r3)
  80b748:	203dc10e 	bge	r4,zero,80ae50 <__alt_mem_onchip_mem+0xff802e50>
  80b74c:	003f7506 	br	80b524 <__alt_mem_onchip_mem+0xff803524>
  80b750:	040020b4 	movhi	r16,130
  80b754:	84228b04 	addi	r16,r16,-30164
  80b758:	003acc06 	br	80a28c <__alt_mem_onchip_mem+0xff80228c>
  80b75c:	d9002c17 	ldw	r4,176(sp)
  80b760:	d9801e04 	addi	r6,sp,120
  80b764:	b80b883a 	mov	r5,r23
  80b768:	081076c0 	call	81076c <__sprint_r>
  80b76c:	103a3b1e 	bne	r2,zero,80a05c <__alt_mem_onchip_mem+0xff80205c>
  80b770:	dc402617 	ldw	r17,152(sp)
  80b774:	d8c02017 	ldw	r3,128(sp)
  80b778:	da000404 	addi	r8,sp,16
  80b77c:	003f9c06 	br	80b5f0 <__alt_mem_onchip_mem+0xff8035f0>
  80b780:	ac400043 	ldbu	r17,1(r21)
  80b784:	94800814 	ori	r18,r18,32
  80b788:	ad400044 	addi	r21,r21,1
  80b78c:	8c403fcc 	andi	r17,r17,255
  80b790:	8c40201c 	xori	r17,r17,128
  80b794:	8c7fe004 	addi	r17,r17,-128
  80b798:	00398f06 	br	809dd8 <__alt_mem_onchip_mem+0xff801dd8>
  80b79c:	d8c02d15 	stw	r3,180(sp)
  80b7a0:	0039883a 	mov	fp,zero
  80b7a4:	003e3506 	br	80b07c <__alt_mem_onchip_mem+0xff80307c>
  80b7a8:	d9002c17 	ldw	r4,176(sp)
  80b7ac:	d9801e04 	addi	r6,sp,120
  80b7b0:	b80b883a 	mov	r5,r23
  80b7b4:	081076c0 	call	81076c <__sprint_r>
  80b7b8:	103a281e 	bne	r2,zero,80a05c <__alt_mem_onchip_mem+0xff80205c>
  80b7bc:	d8c02017 	ldw	r3,128(sp)
  80b7c0:	da000404 	addi	r8,sp,16
  80b7c4:	003cd006 	br	80ab08 <__alt_mem_onchip_mem+0xff802b08>
  80b7c8:	8009883a 	mov	r4,r16
  80b7cc:	da003d15 	stw	r8,244(sp)
  80b7d0:	08105d80 	call	8105d8 <strlen>
  80b7d4:	d8802e15 	stw	r2,184(sp)
  80b7d8:	da003d17 	ldw	r8,244(sp)
  80b7dc:	103c340e 	bge	r2,zero,80a8b0 <__alt_mem_onchip_mem+0xff8028b0>
  80b7e0:	0005883a 	mov	r2,zero
  80b7e4:	003c3206 	br	80a8b0 <__alt_mem_onchip_mem+0xff8028b0>
  80b7e8:	d9002c17 	ldw	r4,176(sp)
  80b7ec:	d9801e04 	addi	r6,sp,120
  80b7f0:	b80b883a 	mov	r5,r23
  80b7f4:	081076c0 	call	81076c <__sprint_r>
  80b7f8:	103a181e 	bne	r2,zero,80a05c <__alt_mem_onchip_mem+0xff80205c>
  80b7fc:	d8c02017 	ldw	r3,128(sp)
  80b800:	d8801f17 	ldw	r2,124(sp)
  80b804:	da000404 	addi	r8,sp,16
  80b808:	d9403317 	ldw	r5,204(sp)
  80b80c:	10800044 	addi	r2,r2,1
  80b810:	44000015 	stw	r16,0(r8)
  80b814:	28c7883a 	add	r3,r5,r3
  80b818:	003b7d06 	br	80a610 <__alt_mem_onchip_mem+0xff802610>
  80b81c:	010020b4 	movhi	r4,130
  80b820:	21229f84 	addi	r4,r4,-30082
  80b824:	d9003515 	stw	r4,212(sp)
  80b828:	003b1406 	br	80a47c <__alt_mem_onchip_mem+0xff80247c>
  80b82c:	013fffc4 	movi	r4,-1
  80b830:	003a3506 	br	80a108 <__alt_mem_onchip_mem+0xff802108>
  80b834:	0023883a 	mov	r17,zero
  80b838:	003d9d06 	br	80aeb0 <__alt_mem_onchip_mem+0xff802eb0>
  80b83c:	d9002c17 	ldw	r4,176(sp)
  80b840:	d9801e04 	addi	r6,sp,120
  80b844:	b80b883a 	mov	r5,r23
  80b848:	081076c0 	call	81076c <__sprint_r>
  80b84c:	103a031e 	bne	r2,zero,80a05c <__alt_mem_onchip_mem+0xff80205c>
  80b850:	d8c02017 	ldw	r3,128(sp)
  80b854:	da000404 	addi	r8,sp,16
  80b858:	003d9406 	br	80aeac <__alt_mem_onchip_mem+0xff802eac>
  80b85c:	010020b4 	movhi	r4,130
  80b860:	21229b84 	addi	r4,r4,-30098
  80b864:	d9002b15 	stw	r4,172(sp)
  80b868:	d9002b17 	ldw	r4,172(sp)
  80b86c:	1c47883a 	add	r3,r3,r17
  80b870:	10800044 	addi	r2,r2,1
  80b874:	41000015 	stw	r4,0(r8)
  80b878:	44400115 	stw	r17,4(r8)
  80b87c:	d8c02015 	stw	r3,128(sp)
  80b880:	d8801f15 	stw	r2,124(sp)
  80b884:	010001c4 	movi	r4,7
  80b888:	20bfd716 	blt	r4,r2,80b7e8 <__alt_mem_onchip_mem+0xff8037e8>
  80b88c:	42000204 	addi	r8,r8,8
  80b890:	003fdd06 	br	80b808 <__alt_mem_onchip_mem+0xff803808>
  80b894:	d9002c17 	ldw	r4,176(sp)
  80b898:	d9801e04 	addi	r6,sp,120
  80b89c:	b80b883a 	mov	r5,r23
  80b8a0:	081076c0 	call	81076c <__sprint_r>
  80b8a4:	1039ed1e 	bne	r2,zero,80a05c <__alt_mem_onchip_mem+0xff80205c>
  80b8a8:	d8802617 	ldw	r2,152(sp)
  80b8ac:	d8c02017 	ldw	r3,128(sp)
  80b8b0:	da000404 	addi	r8,sp,16
  80b8b4:	003e1006 	br	80b0f8 <__alt_mem_onchip_mem+0xff8030f8>
  80b8b8:	00800044 	movi	r2,1
  80b8bc:	10803fcc 	andi	r2,r2,255
  80b8c0:	00c00044 	movi	r3,1
  80b8c4:	10fa3526 	beq	r2,r3,80a19c <__alt_mem_onchip_mem+0xff80219c>
  80b8c8:	00c00084 	movi	r3,2
  80b8cc:	10fbcb26 	beq	r2,r3,80a7fc <__alt_mem_onchip_mem+0xff8027fc>
  80b8d0:	003a8f06 	br	80a310 <__alt_mem_onchip_mem+0xff802310>
  80b8d4:	010020b4 	movhi	r4,130
  80b8d8:	21229f84 	addi	r4,r4,-30082
  80b8dc:	d9003515 	stw	r4,212(sp)
  80b8e0:	003b7606 	br	80a6bc <__alt_mem_onchip_mem+0xff8026bc>
  80b8e4:	d8802917 	ldw	r2,164(sp)
  80b8e8:	00c00184 	movi	r3,6
  80b8ec:	1880012e 	bgeu	r3,r2,80b8f4 <___vfprintf_internal_r+0x1ca0>
  80b8f0:	1805883a 	mov	r2,r3
  80b8f4:	d8802e15 	stw	r2,184(sp)
  80b8f8:	1000ef16 	blt	r2,zero,80bcb8 <___vfprintf_internal_r+0x2064>
  80b8fc:	040020b4 	movhi	r16,130
  80b900:	d8802a15 	stw	r2,168(sp)
  80b904:	dcc02d15 	stw	r19,180(sp)
  80b908:	d8002915 	stw	zero,164(sp)
  80b90c:	d8003215 	stw	zero,200(sp)
  80b910:	84229904 	addi	r16,r16,-30108
  80b914:	0039883a 	mov	fp,zero
  80b918:	003aa206 	br	80a3a4 <__alt_mem_onchip_mem+0xff8023a4>
  80b91c:	0021883a 	mov	r16,zero
  80b920:	003e0706 	br	80b140 <__alt_mem_onchip_mem+0xff803140>
  80b924:	d9002c17 	ldw	r4,176(sp)
  80b928:	d9801e04 	addi	r6,sp,120
  80b92c:	b80b883a 	mov	r5,r23
  80b930:	081076c0 	call	81076c <__sprint_r>
  80b934:	1039c91e 	bne	r2,zero,80a05c <__alt_mem_onchip_mem+0xff80205c>
  80b938:	d8802617 	ldw	r2,152(sp)
  80b93c:	d9403317 	ldw	r5,204(sp)
  80b940:	d8c02017 	ldw	r3,128(sp)
  80b944:	da000404 	addi	r8,sp,16
  80b948:	2885c83a 	sub	r2,r5,r2
  80b94c:	003dfb06 	br	80b13c <__alt_mem_onchip_mem+0xff80313c>
  80b950:	9080004c 	andi	r2,r18,1
  80b954:	103e8f1e 	bne	r2,zero,80b394 <__alt_mem_onchip_mem+0xff803394>
  80b958:	d8802117 	ldw	r2,132(sp)
  80b95c:	003e9e06 	br	80b3d8 <__alt_mem_onchip_mem+0xff8033d8>
  80b960:	1025883a 	mov	r18,r2
  80b964:	0039883a 	mov	fp,zero
  80b968:	00800084 	movi	r2,2
  80b96c:	003fd306 	br	80b8bc <__alt_mem_onchip_mem+0xff8038bc>
  80b970:	07000b44 	movi	fp,45
  80b974:	df002785 	stb	fp,158(sp)
  80b978:	003a4006 	br	80a27c <__alt_mem_onchip_mem+0xff80227c>
  80b97c:	00c00b44 	movi	r3,45
  80b980:	d8c02785 	stb	r3,158(sp)
  80b984:	d8802a15 	stw	r2,168(sp)
  80b988:	dc802b17 	ldw	r18,172(sp)
  80b98c:	d8002915 	stw	zero,164(sp)
  80b990:	07000b44 	movi	fp,45
  80b994:	003a8006 	br	80a398 <__alt_mem_onchip_mem+0xff802398>
  80b998:	040020b4 	movhi	r16,130
  80b99c:	84228e04 	addi	r16,r16,-30152
  80b9a0:	003f4706 	br	80b6c0 <__alt_mem_onchip_mem+0xff8036c0>
  80b9a4:	d8c02d17 	ldw	r3,180(sp)
  80b9a8:	d9002f17 	ldw	r4,188(sp)
  80b9ac:	18800017 	ldw	r2,0(r3)
  80b9b0:	18c00104 	addi	r3,r3,4
  80b9b4:	d8c02d15 	stw	r3,180(sp)
  80b9b8:	11000015 	stw	r4,0(r2)
  80b9bc:	0038dd06 	br	809d34 <__alt_mem_onchip_mem+0xff801d34>
  80b9c0:	dd802617 	ldw	r22,152(sp)
  80b9c4:	00bfff44 	movi	r2,-3
  80b9c8:	b0801c16 	blt	r22,r2,80ba3c <___vfprintf_internal_r+0x1de8>
  80b9cc:	d9402917 	ldw	r5,164(sp)
  80b9d0:	2d801a16 	blt	r5,r22,80ba3c <___vfprintf_internal_r+0x1de8>
  80b9d4:	dd803215 	stw	r22,200(sp)
  80b9d8:	003e8906 	br	80b400 <__alt_mem_onchip_mem+0xff803400>
  80b9dc:	010020b4 	movhi	r4,130
  80b9e0:	21229b84 	addi	r4,r4,-30098
  80b9e4:	d9002b15 	stw	r4,172(sp)
  80b9e8:	003c9106 	br	80ac30 <__alt_mem_onchip_mem+0xff802c30>
  80b9ec:	e005883a 	mov	r2,fp
  80b9f0:	003e7906 	br	80b3d8 <__alt_mem_onchip_mem+0xff8033d8>
  80b9f4:	d9402917 	ldw	r5,164(sp)
  80b9f8:	df002783 	ldbu	fp,158(sp)
  80b9fc:	dcc02d15 	stw	r19,180(sp)
  80ba00:	d9402a15 	stw	r5,168(sp)
  80ba04:	d9402e15 	stw	r5,184(sp)
  80ba08:	d8002915 	stw	zero,164(sp)
  80ba0c:	d8003215 	stw	zero,200(sp)
  80ba10:	003a5d06 	br	80a388 <__alt_mem_onchip_mem+0xff802388>
  80ba14:	9080004c 	andi	r2,r18,1
  80ba18:	0039883a 	mov	fp,zero
  80ba1c:	10000426 	beq	r2,zero,80ba30 <___vfprintf_internal_r+0x1ddc>
  80ba20:	00800c04 	movi	r2,48
  80ba24:	dc001dc4 	addi	r16,sp,119
  80ba28:	d8801dc5 	stb	r2,119(sp)
  80ba2c:	003b8006 	br	80a830 <__alt_mem_onchip_mem+0xff802830>
  80ba30:	d8002e15 	stw	zero,184(sp)
  80ba34:	dc001e04 	addi	r16,sp,120
  80ba38:	003a4d06 	br	80a370 <__alt_mem_onchip_mem+0xff802370>
  80ba3c:	8c7fff84 	addi	r17,r17,-2
  80ba40:	b5bfffc4 	addi	r22,r22,-1
  80ba44:	dd802615 	stw	r22,152(sp)
  80ba48:	dc4022c5 	stb	r17,139(sp)
  80ba4c:	b000bf16 	blt	r22,zero,80bd4c <___vfprintf_internal_r+0x20f8>
  80ba50:	00800ac4 	movi	r2,43
  80ba54:	d8802305 	stb	r2,140(sp)
  80ba58:	00800244 	movi	r2,9
  80ba5c:	15807016 	blt	r2,r22,80bc20 <___vfprintf_internal_r+0x1fcc>
  80ba60:	00800c04 	movi	r2,48
  80ba64:	b5800c04 	addi	r22,r22,48
  80ba68:	d8802345 	stb	r2,141(sp)
  80ba6c:	dd802385 	stb	r22,142(sp)
  80ba70:	d88023c4 	addi	r2,sp,143
  80ba74:	df0022c4 	addi	fp,sp,139
  80ba78:	d8c03317 	ldw	r3,204(sp)
  80ba7c:	1739c83a 	sub	fp,r2,fp
  80ba80:	d9003317 	ldw	r4,204(sp)
  80ba84:	e0c7883a 	add	r3,fp,r3
  80ba88:	df003a15 	stw	fp,232(sp)
  80ba8c:	d8c02e15 	stw	r3,184(sp)
  80ba90:	00800044 	movi	r2,1
  80ba94:	1100b30e 	bge	r2,r4,80bd64 <___vfprintf_internal_r+0x2110>
  80ba98:	d8c02e17 	ldw	r3,184(sp)
  80ba9c:	18c00044 	addi	r3,r3,1
  80baa0:	d8c02e15 	stw	r3,184(sp)
  80baa4:	1805883a 	mov	r2,r3
  80baa8:	1800ac16 	blt	r3,zero,80bd5c <___vfprintf_internal_r+0x2108>
  80baac:	d8003215 	stw	zero,200(sp)
  80bab0:	003e5d06 	br	80b428 <__alt_mem_onchip_mem+0xff803428>
  80bab4:	d9002c17 	ldw	r4,176(sp)
  80bab8:	d9801e04 	addi	r6,sp,120
  80babc:	b80b883a 	mov	r5,r23
  80bac0:	081076c0 	call	81076c <__sprint_r>
  80bac4:	1039651e 	bne	r2,zero,80a05c <__alt_mem_onchip_mem+0xff80205c>
  80bac8:	dc402617 	ldw	r17,152(sp)
  80bacc:	d8c02017 	ldw	r3,128(sp)
  80bad0:	d8801f17 	ldw	r2,124(sp)
  80bad4:	da000404 	addi	r8,sp,16
  80bad8:	003ed606 	br	80b634 <__alt_mem_onchip_mem+0xff803634>
  80badc:	582b883a 	mov	r21,r11
  80bae0:	d8002915 	stw	zero,164(sp)
  80bae4:	0038bd06 	br	809ddc <__alt_mem_onchip_mem+0xff801ddc>
  80bae8:	d8802917 	ldw	r2,164(sp)
  80baec:	103e071e 	bne	r2,zero,80b30c <__alt_mem_onchip_mem+0xff80330c>
  80baf0:	dc002915 	stw	r16,164(sp)
  80baf4:	003e0506 	br	80b30c <__alt_mem_onchip_mem+0xff80330c>
  80baf8:	d9002917 	ldw	r4,164(sp)
  80bafc:	20c00044 	addi	r3,r4,1
  80bb00:	003e0f06 	br	80b340 <__alt_mem_onchip_mem+0xff803340>
  80bb04:	01400184 	movi	r5,6
  80bb08:	d9402915 	stw	r5,164(sp)
  80bb0c:	003dff06 	br	80b30c <__alt_mem_onchip_mem+0xff80330c>
  80bb10:	d8802104 	addi	r2,sp,132
  80bb14:	d8800315 	stw	r2,12(sp)
  80bb18:	d8802504 	addi	r2,sp,148
  80bb1c:	d8800215 	stw	r2,8(sp)
  80bb20:	d8802604 	addi	r2,sp,152
  80bb24:	d8800115 	stw	r2,4(sp)
  80bb28:	d8802917 	ldw	r2,164(sp)
  80bb2c:	d9403617 	ldw	r5,216(sp)
  80bb30:	d9002c17 	ldw	r4,176(sp)
  80bb34:	d8800015 	stw	r2,0(sp)
  80bb38:	01c000c4 	movi	r7,3
  80bb3c:	980d883a 	mov	r6,r19
  80bb40:	da003d15 	stw	r8,244(sp)
  80bb44:	080c2780 	call	80c278 <_dtoa_r>
  80bb48:	d8c02917 	ldw	r3,164(sp)
  80bb4c:	da003d17 	ldw	r8,244(sp)
  80bb50:	1021883a 	mov	r16,r2
  80bb54:	10f9883a 	add	fp,r2,r3
  80bb58:	81000007 	ldb	r4,0(r16)
  80bb5c:	00800c04 	movi	r2,48
  80bb60:	20805e26 	beq	r4,r2,80bcdc <___vfprintf_internal_r+0x2088>
  80bb64:	d8c02617 	ldw	r3,152(sp)
  80bb68:	e0f9883a 	add	fp,fp,r3
  80bb6c:	003e0a06 	br	80b398 <__alt_mem_onchip_mem+0xff803398>
  80bb70:	00c00b44 	movi	r3,45
  80bb74:	24e0003c 	xorhi	r19,r4,32768
  80bb78:	d8c02a05 	stb	r3,168(sp)
  80bb7c:	003de906 	br	80b324 <__alt_mem_onchip_mem+0xff803324>
  80bb80:	d8c03217 	ldw	r3,200(sp)
  80bb84:	00c07a0e 	bge	zero,r3,80bd70 <___vfprintf_internal_r+0x211c>
  80bb88:	00800044 	movi	r2,1
  80bb8c:	d9003317 	ldw	r4,204(sp)
  80bb90:	1105883a 	add	r2,r2,r4
  80bb94:	d8802e15 	stw	r2,184(sp)
  80bb98:	10004e16 	blt	r2,zero,80bcd4 <___vfprintf_internal_r+0x2080>
  80bb9c:	044019c4 	movi	r17,103
  80bba0:	003e2106 	br	80b428 <__alt_mem_onchip_mem+0xff803428>
  80bba4:	d9002917 	ldw	r4,164(sp)
  80bba8:	d8802104 	addi	r2,sp,132
  80bbac:	d8800315 	stw	r2,12(sp)
  80bbb0:	d9000015 	stw	r4,0(sp)
  80bbb4:	d8802504 	addi	r2,sp,148
  80bbb8:	d9403617 	ldw	r5,216(sp)
  80bbbc:	d9002c17 	ldw	r4,176(sp)
  80bbc0:	d8800215 	stw	r2,8(sp)
  80bbc4:	d8802604 	addi	r2,sp,152
  80bbc8:	d8800115 	stw	r2,4(sp)
  80bbcc:	01c000c4 	movi	r7,3
  80bbd0:	980d883a 	mov	r6,r19
  80bbd4:	da003d15 	stw	r8,244(sp)
  80bbd8:	080c2780 	call	80c278 <_dtoa_r>
  80bbdc:	d8c02917 	ldw	r3,164(sp)
  80bbe0:	da003d17 	ldw	r8,244(sp)
  80bbe4:	1021883a 	mov	r16,r2
  80bbe8:	00801184 	movi	r2,70
  80bbec:	80f9883a 	add	fp,r16,r3
  80bbf0:	88bfd926 	beq	r17,r2,80bb58 <__alt_mem_onchip_mem+0xff803b58>
  80bbf4:	003de806 	br	80b398 <__alt_mem_onchip_mem+0xff803398>
  80bbf8:	d9002917 	ldw	r4,164(sp)
  80bbfc:	00c04d0e 	bge	zero,r3,80bd34 <___vfprintf_internal_r+0x20e0>
  80bc00:	2000441e 	bne	r4,zero,80bd14 <___vfprintf_internal_r+0x20c0>
  80bc04:	9480004c 	andi	r18,r18,1
  80bc08:	9000421e 	bne	r18,zero,80bd14 <___vfprintf_internal_r+0x20c0>
  80bc0c:	1805883a 	mov	r2,r3
  80bc10:	18007016 	blt	r3,zero,80bdd4 <___vfprintf_internal_r+0x2180>
  80bc14:	d8c03217 	ldw	r3,200(sp)
  80bc18:	d8c02e15 	stw	r3,184(sp)
  80bc1c:	003e0206 	br	80b428 <__alt_mem_onchip_mem+0xff803428>
  80bc20:	df0022c4 	addi	fp,sp,139
  80bc24:	dc002915 	stw	r16,164(sp)
  80bc28:	4027883a 	mov	r19,r8
  80bc2c:	e021883a 	mov	r16,fp
  80bc30:	b009883a 	mov	r4,r22
  80bc34:	01400284 	movi	r5,10
  80bc38:	0813c9c0 	call	813c9c <__modsi3>
  80bc3c:	10800c04 	addi	r2,r2,48
  80bc40:	843fffc4 	addi	r16,r16,-1
  80bc44:	b009883a 	mov	r4,r22
  80bc48:	01400284 	movi	r5,10
  80bc4c:	80800005 	stb	r2,0(r16)
  80bc50:	0813c180 	call	813c18 <__divsi3>
  80bc54:	102d883a 	mov	r22,r2
  80bc58:	00800244 	movi	r2,9
  80bc5c:	15bff416 	blt	r2,r22,80bc30 <__alt_mem_onchip_mem+0xff803c30>
  80bc60:	9811883a 	mov	r8,r19
  80bc64:	b0800c04 	addi	r2,r22,48
  80bc68:	8027883a 	mov	r19,r16
  80bc6c:	997fffc4 	addi	r5,r19,-1
  80bc70:	98bfffc5 	stb	r2,-1(r19)
  80bc74:	dc002917 	ldw	r16,164(sp)
  80bc78:	2f006a2e 	bgeu	r5,fp,80be24 <___vfprintf_internal_r+0x21d0>
  80bc7c:	d9c02384 	addi	r7,sp,142
  80bc80:	3ccfc83a 	sub	r7,r7,r19
  80bc84:	d9002344 	addi	r4,sp,141
  80bc88:	e1cf883a 	add	r7,fp,r7
  80bc8c:	00000106 	br	80bc94 <___vfprintf_internal_r+0x2040>
  80bc90:	28800003 	ldbu	r2,0(r5)
  80bc94:	20800005 	stb	r2,0(r4)
  80bc98:	21000044 	addi	r4,r4,1
  80bc9c:	29400044 	addi	r5,r5,1
  80bca0:	393ffb1e 	bne	r7,r4,80bc90 <__alt_mem_onchip_mem+0xff803c90>
  80bca4:	d8802304 	addi	r2,sp,140
  80bca8:	14c5c83a 	sub	r2,r2,r19
  80bcac:	d8c02344 	addi	r3,sp,141
  80bcb0:	1885883a 	add	r2,r3,r2
  80bcb4:	003f7006 	br	80ba78 <__alt_mem_onchip_mem+0xff803a78>
  80bcb8:	0005883a 	mov	r2,zero
  80bcbc:	003f0f06 	br	80b8fc <__alt_mem_onchip_mem+0xff8038fc>
  80bcc0:	d8c03217 	ldw	r3,200(sp)
  80bcc4:	18c00044 	addi	r3,r3,1
  80bcc8:	d8c02e15 	stw	r3,184(sp)
  80bccc:	1805883a 	mov	r2,r3
  80bcd0:	183fb20e 	bge	r3,zero,80bb9c <__alt_mem_onchip_mem+0xff803b9c>
  80bcd4:	0005883a 	mov	r2,zero
  80bcd8:	003fb006 	br	80bb9c <__alt_mem_onchip_mem+0xff803b9c>
  80bcdc:	d9003617 	ldw	r4,216(sp)
  80bce0:	000d883a 	mov	r6,zero
  80bce4:	000f883a 	mov	r7,zero
  80bce8:	980b883a 	mov	r5,r19
  80bcec:	d8c03c15 	stw	r3,240(sp)
  80bcf0:	da003d15 	stw	r8,244(sp)
  80bcf4:	08146b40 	call	8146b4 <__eqdf2>
  80bcf8:	d8c03c17 	ldw	r3,240(sp)
  80bcfc:	da003d17 	ldw	r8,244(sp)
  80bd00:	103f9826 	beq	r2,zero,80bb64 <__alt_mem_onchip_mem+0xff803b64>
  80bd04:	00800044 	movi	r2,1
  80bd08:	10c7c83a 	sub	r3,r2,r3
  80bd0c:	d8c02615 	stw	r3,152(sp)
  80bd10:	003f9506 	br	80bb68 <__alt_mem_onchip_mem+0xff803b68>
  80bd14:	d9002917 	ldw	r4,164(sp)
  80bd18:	d8c03217 	ldw	r3,200(sp)
  80bd1c:	20800044 	addi	r2,r4,1
  80bd20:	1885883a 	add	r2,r3,r2
  80bd24:	d8802e15 	stw	r2,184(sp)
  80bd28:	103dbf0e 	bge	r2,zero,80b428 <__alt_mem_onchip_mem+0xff803428>
  80bd2c:	0005883a 	mov	r2,zero
  80bd30:	003dbd06 	br	80b428 <__alt_mem_onchip_mem+0xff803428>
  80bd34:	2000211e 	bne	r4,zero,80bdbc <___vfprintf_internal_r+0x2168>
  80bd38:	9480004c 	andi	r18,r18,1
  80bd3c:	90001f1e 	bne	r18,zero,80bdbc <___vfprintf_internal_r+0x2168>
  80bd40:	00800044 	movi	r2,1
  80bd44:	d8802e15 	stw	r2,184(sp)
  80bd48:	003db706 	br	80b428 <__alt_mem_onchip_mem+0xff803428>
  80bd4c:	00800b44 	movi	r2,45
  80bd50:	05adc83a 	sub	r22,zero,r22
  80bd54:	d8802305 	stb	r2,140(sp)
  80bd58:	003f3f06 	br	80ba58 <__alt_mem_onchip_mem+0xff803a58>
  80bd5c:	0005883a 	mov	r2,zero
  80bd60:	003f5206 	br	80baac <__alt_mem_onchip_mem+0xff803aac>
  80bd64:	90a4703a 	and	r18,r18,r2
  80bd68:	903f4e26 	beq	r18,zero,80baa4 <__alt_mem_onchip_mem+0xff803aa4>
  80bd6c:	003f4a06 	br	80ba98 <__alt_mem_onchip_mem+0xff803a98>
  80bd70:	00800084 	movi	r2,2
  80bd74:	10c5c83a 	sub	r2,r2,r3
  80bd78:	003f8406 	br	80bb8c <__alt_mem_onchip_mem+0xff803b8c>
  80bd7c:	d8802d17 	ldw	r2,180(sp)
  80bd80:	d9002d17 	ldw	r4,180(sp)
  80bd84:	ac400043 	ldbu	r17,1(r21)
  80bd88:	10800017 	ldw	r2,0(r2)
  80bd8c:	582b883a 	mov	r21,r11
  80bd90:	d8802915 	stw	r2,164(sp)
  80bd94:	20800104 	addi	r2,r4,4
  80bd98:	d9002917 	ldw	r4,164(sp)
  80bd9c:	d8802d15 	stw	r2,180(sp)
  80bda0:	203e7a0e 	bge	r4,zero,80b78c <__alt_mem_onchip_mem+0xff80378c>
  80bda4:	8c403fcc 	andi	r17,r17,255
  80bda8:	00bfffc4 	movi	r2,-1
  80bdac:	8c40201c 	xori	r17,r17,128
  80bdb0:	d8802915 	stw	r2,164(sp)
  80bdb4:	8c7fe004 	addi	r17,r17,-128
  80bdb8:	00380706 	br	809dd8 <__alt_mem_onchip_mem+0xff801dd8>
  80bdbc:	d8c02917 	ldw	r3,164(sp)
  80bdc0:	18c00084 	addi	r3,r3,2
  80bdc4:	d8c02e15 	stw	r3,184(sp)
  80bdc8:	1805883a 	mov	r2,r3
  80bdcc:	183d960e 	bge	r3,zero,80b428 <__alt_mem_onchip_mem+0xff803428>
  80bdd0:	003fd606 	br	80bd2c <__alt_mem_onchip_mem+0xff803d2c>
  80bdd4:	0005883a 	mov	r2,zero
  80bdd8:	003f8e06 	br	80bc14 <__alt_mem_onchip_mem+0xff803c14>
  80bddc:	9080004c 	andi	r2,r18,1
  80bde0:	103f811e 	bne	r2,zero,80bbe8 <__alt_mem_onchip_mem+0xff803be8>
  80bde4:	d8802117 	ldw	r2,132(sp)
  80bde8:	1405c83a 	sub	r2,r2,r16
  80bdec:	d8803315 	stw	r2,204(sp)
  80bdf0:	b47ef326 	beq	r22,r17,80b9c0 <__alt_mem_onchip_mem+0xff8039c0>
  80bdf4:	dd802617 	ldw	r22,152(sp)
  80bdf8:	003f1106 	br	80ba40 <__alt_mem_onchip_mem+0xff803a40>
  80bdfc:	d9c02785 	stb	r7,158(sp)
  80be00:	00390406 	br	80a214 <__alt_mem_onchip_mem+0xff802214>
  80be04:	d9c02785 	stb	r7,158(sp)
  80be08:	0038d306 	br	80a158 <__alt_mem_onchip_mem+0xff802158>
  80be0c:	d9c02785 	stb	r7,158(sp)
  80be10:	003a6106 	br	80a798 <__alt_mem_onchip_mem+0xff802798>
  80be14:	d9c02785 	stb	r7,158(sp)
  80be18:	003af806 	br	80a9fc <__alt_mem_onchip_mem+0xff8029fc>
  80be1c:	0005883a 	mov	r2,zero
  80be20:	003d7e06 	br	80b41c <__alt_mem_onchip_mem+0xff80341c>
  80be24:	d8802344 	addi	r2,sp,141
  80be28:	003f1306 	br	80ba78 <__alt_mem_onchip_mem+0xff803a78>
  80be2c:	d9c02785 	stb	r7,158(sp)
  80be30:	00392306 	br	80a2c0 <__alt_mem_onchip_mem+0xff8022c0>
  80be34:	d9c02785 	stb	r7,158(sp)
  80be38:	003aa906 	br	80a8e0 <__alt_mem_onchip_mem+0xff8028e0>
  80be3c:	d9c02785 	stb	r7,158(sp)
  80be40:	003a3d06 	br	80a738 <__alt_mem_onchip_mem+0xff802738>
  80be44:	d9c02785 	stb	r7,158(sp)
  80be48:	003aca06 	br	80a974 <__alt_mem_onchip_mem+0xff802974>

0080be4c <__vfprintf_internal>:
  80be4c:	008020b4 	movhi	r2,130
  80be50:	10aad304 	addi	r2,r2,-21684
  80be54:	300f883a 	mov	r7,r6
  80be58:	280d883a 	mov	r6,r5
  80be5c:	200b883a 	mov	r5,r4
  80be60:	11000017 	ldw	r4,0(r2)
  80be64:	0809c541 	jmpi	809c54 <___vfprintf_internal_r>

0080be68 <__sbprintf>:
  80be68:	2880030b 	ldhu	r2,12(r5)
  80be6c:	2ac01917 	ldw	r11,100(r5)
  80be70:	2a80038b 	ldhu	r10,14(r5)
  80be74:	2a400717 	ldw	r9,28(r5)
  80be78:	2a000917 	ldw	r8,36(r5)
  80be7c:	defee204 	addi	sp,sp,-1144
  80be80:	00c10004 	movi	r3,1024
  80be84:	dc011a15 	stw	r16,1128(sp)
  80be88:	10bfff4c 	andi	r2,r2,65533
  80be8c:	2821883a 	mov	r16,r5
  80be90:	d8cb883a 	add	r5,sp,r3
  80be94:	dc811c15 	stw	r18,1136(sp)
  80be98:	dc411b15 	stw	r17,1132(sp)
  80be9c:	dfc11d15 	stw	ra,1140(sp)
  80bea0:	2025883a 	mov	r18,r4
  80bea4:	d881030d 	sth	r2,1036(sp)
  80bea8:	dac11915 	stw	r11,1124(sp)
  80beac:	da81038d 	sth	r10,1038(sp)
  80beb0:	da410715 	stw	r9,1052(sp)
  80beb4:	da010915 	stw	r8,1060(sp)
  80beb8:	dec10015 	stw	sp,1024(sp)
  80bebc:	dec10415 	stw	sp,1040(sp)
  80bec0:	d8c10215 	stw	r3,1032(sp)
  80bec4:	d8c10515 	stw	r3,1044(sp)
  80bec8:	d8010615 	stw	zero,1048(sp)
  80becc:	0809c540 	call	809c54 <___vfprintf_internal_r>
  80bed0:	1023883a 	mov	r17,r2
  80bed4:	10000416 	blt	r2,zero,80bee8 <__sbprintf+0x80>
  80bed8:	d9410004 	addi	r5,sp,1024
  80bedc:	9009883a 	mov	r4,r18
  80bee0:	080db1c0 	call	80db1c <_fflush_r>
  80bee4:	10000d1e 	bne	r2,zero,80bf1c <__sbprintf+0xb4>
  80bee8:	d881030b 	ldhu	r2,1036(sp)
  80beec:	1080100c 	andi	r2,r2,64
  80bef0:	10000326 	beq	r2,zero,80bf00 <__sbprintf+0x98>
  80bef4:	8080030b 	ldhu	r2,12(r16)
  80bef8:	10801014 	ori	r2,r2,64
  80befc:	8080030d 	sth	r2,12(r16)
  80bf00:	8805883a 	mov	r2,r17
  80bf04:	dfc11d17 	ldw	ra,1140(sp)
  80bf08:	dc811c17 	ldw	r18,1136(sp)
  80bf0c:	dc411b17 	ldw	r17,1132(sp)
  80bf10:	dc011a17 	ldw	r16,1128(sp)
  80bf14:	dec11e04 	addi	sp,sp,1144
  80bf18:	f800283a 	ret
  80bf1c:	047fffc4 	movi	r17,-1
  80bf20:	003ff106 	br	80bee8 <__alt_mem_onchip_mem+0xff803ee8>

0080bf24 <__swsetup_r>:
  80bf24:	008020b4 	movhi	r2,130
  80bf28:	defffd04 	addi	sp,sp,-12
  80bf2c:	10aad304 	addi	r2,r2,-21684
  80bf30:	dc400115 	stw	r17,4(sp)
  80bf34:	2023883a 	mov	r17,r4
  80bf38:	11000017 	ldw	r4,0(r2)
  80bf3c:	dc000015 	stw	r16,0(sp)
  80bf40:	dfc00215 	stw	ra,8(sp)
  80bf44:	2821883a 	mov	r16,r5
  80bf48:	20000226 	beq	r4,zero,80bf54 <__swsetup_r+0x30>
  80bf4c:	20800e17 	ldw	r2,56(r4)
  80bf50:	10003126 	beq	r2,zero,80c018 <__swsetup_r+0xf4>
  80bf54:	8080030b 	ldhu	r2,12(r16)
  80bf58:	10c0020c 	andi	r3,r2,8
  80bf5c:	1009883a 	mov	r4,r2
  80bf60:	18000f26 	beq	r3,zero,80bfa0 <__swsetup_r+0x7c>
  80bf64:	80c00417 	ldw	r3,16(r16)
  80bf68:	18001526 	beq	r3,zero,80bfc0 <__swsetup_r+0x9c>
  80bf6c:	1100004c 	andi	r4,r2,1
  80bf70:	20001c1e 	bne	r4,zero,80bfe4 <__swsetup_r+0xc0>
  80bf74:	1080008c 	andi	r2,r2,2
  80bf78:	1000291e 	bne	r2,zero,80c020 <__swsetup_r+0xfc>
  80bf7c:	80800517 	ldw	r2,20(r16)
  80bf80:	80800215 	stw	r2,8(r16)
  80bf84:	18001c26 	beq	r3,zero,80bff8 <__swsetup_r+0xd4>
  80bf88:	0005883a 	mov	r2,zero
  80bf8c:	dfc00217 	ldw	ra,8(sp)
  80bf90:	dc400117 	ldw	r17,4(sp)
  80bf94:	dc000017 	ldw	r16,0(sp)
  80bf98:	dec00304 	addi	sp,sp,12
  80bf9c:	f800283a 	ret
  80bfa0:	2080040c 	andi	r2,r4,16
  80bfa4:	10002e26 	beq	r2,zero,80c060 <__swsetup_r+0x13c>
  80bfa8:	2080010c 	andi	r2,r4,4
  80bfac:	10001e1e 	bne	r2,zero,80c028 <__swsetup_r+0x104>
  80bfb0:	80c00417 	ldw	r3,16(r16)
  80bfb4:	20800214 	ori	r2,r4,8
  80bfb8:	8080030d 	sth	r2,12(r16)
  80bfbc:	183feb1e 	bne	r3,zero,80bf6c <__alt_mem_onchip_mem+0xff803f6c>
  80bfc0:	1100a00c 	andi	r4,r2,640
  80bfc4:	01408004 	movi	r5,512
  80bfc8:	217fe826 	beq	r4,r5,80bf6c <__alt_mem_onchip_mem+0xff803f6c>
  80bfcc:	800b883a 	mov	r5,r16
  80bfd0:	8809883a 	mov	r4,r17
  80bfd4:	080e5e00 	call	80e5e0 <__smakebuf_r>
  80bfd8:	8080030b 	ldhu	r2,12(r16)
  80bfdc:	80c00417 	ldw	r3,16(r16)
  80bfe0:	003fe206 	br	80bf6c <__alt_mem_onchip_mem+0xff803f6c>
  80bfe4:	80800517 	ldw	r2,20(r16)
  80bfe8:	80000215 	stw	zero,8(r16)
  80bfec:	0085c83a 	sub	r2,zero,r2
  80bff0:	80800615 	stw	r2,24(r16)
  80bff4:	183fe41e 	bne	r3,zero,80bf88 <__alt_mem_onchip_mem+0xff803f88>
  80bff8:	80c0030b 	ldhu	r3,12(r16)
  80bffc:	0005883a 	mov	r2,zero
  80c000:	1900200c 	andi	r4,r3,128
  80c004:	203fe126 	beq	r4,zero,80bf8c <__alt_mem_onchip_mem+0xff803f8c>
  80c008:	18c01014 	ori	r3,r3,64
  80c00c:	80c0030d 	sth	r3,12(r16)
  80c010:	00bfffc4 	movi	r2,-1
  80c014:	003fdd06 	br	80bf8c <__alt_mem_onchip_mem+0xff803f8c>
  80c018:	080def80 	call	80def8 <__sinit>
  80c01c:	003fcd06 	br	80bf54 <__alt_mem_onchip_mem+0xff803f54>
  80c020:	0005883a 	mov	r2,zero
  80c024:	003fd606 	br	80bf80 <__alt_mem_onchip_mem+0xff803f80>
  80c028:	81400c17 	ldw	r5,48(r16)
  80c02c:	28000626 	beq	r5,zero,80c048 <__swsetup_r+0x124>
  80c030:	80801004 	addi	r2,r16,64
  80c034:	28800326 	beq	r5,r2,80c044 <__swsetup_r+0x120>
  80c038:	8809883a 	mov	r4,r17
  80c03c:	080e06c0 	call	80e06c <_free_r>
  80c040:	8100030b 	ldhu	r4,12(r16)
  80c044:	80000c15 	stw	zero,48(r16)
  80c048:	80c00417 	ldw	r3,16(r16)
  80c04c:	00bff6c4 	movi	r2,-37
  80c050:	1108703a 	and	r4,r2,r4
  80c054:	80000115 	stw	zero,4(r16)
  80c058:	80c00015 	stw	r3,0(r16)
  80c05c:	003fd506 	br	80bfb4 <__alt_mem_onchip_mem+0xff803fb4>
  80c060:	00800244 	movi	r2,9
  80c064:	88800015 	stw	r2,0(r17)
  80c068:	20801014 	ori	r2,r4,64
  80c06c:	8080030d 	sth	r2,12(r16)
  80c070:	00bfffc4 	movi	r2,-1
  80c074:	003fc506 	br	80bf8c <__alt_mem_onchip_mem+0xff803f8c>

0080c078 <quorem>:
  80c078:	defff704 	addi	sp,sp,-36
  80c07c:	dc800215 	stw	r18,8(sp)
  80c080:	20800417 	ldw	r2,16(r4)
  80c084:	2c800417 	ldw	r18,16(r5)
  80c088:	dfc00815 	stw	ra,32(sp)
  80c08c:	ddc00715 	stw	r23,28(sp)
  80c090:	dd800615 	stw	r22,24(sp)
  80c094:	dd400515 	stw	r21,20(sp)
  80c098:	dd000415 	stw	r20,16(sp)
  80c09c:	dcc00315 	stw	r19,12(sp)
  80c0a0:	dc400115 	stw	r17,4(sp)
  80c0a4:	dc000015 	stw	r16,0(sp)
  80c0a8:	14807116 	blt	r2,r18,80c270 <quorem+0x1f8>
  80c0ac:	94bfffc4 	addi	r18,r18,-1
  80c0b0:	94ad883a 	add	r22,r18,r18
  80c0b4:	b5ad883a 	add	r22,r22,r22
  80c0b8:	2c400504 	addi	r17,r5,20
  80c0bc:	8da9883a 	add	r20,r17,r22
  80c0c0:	25400504 	addi	r21,r4,20
  80c0c4:	282f883a 	mov	r23,r5
  80c0c8:	adad883a 	add	r22,r21,r22
  80c0cc:	a1400017 	ldw	r5,0(r20)
  80c0d0:	2021883a 	mov	r16,r4
  80c0d4:	b1000017 	ldw	r4,0(r22)
  80c0d8:	29400044 	addi	r5,r5,1
  80c0dc:	0813d100 	call	813d10 <__udivsi3>
  80c0e0:	1027883a 	mov	r19,r2
  80c0e4:	10002c26 	beq	r2,zero,80c198 <quorem+0x120>
  80c0e8:	a813883a 	mov	r9,r21
  80c0ec:	880b883a 	mov	r5,r17
  80c0f0:	0009883a 	mov	r4,zero
  80c0f4:	000d883a 	mov	r6,zero
  80c0f8:	2a000017 	ldw	r8,0(r5)
  80c0fc:	49c00017 	ldw	r7,0(r9)
  80c100:	29400104 	addi	r5,r5,4
  80c104:	40bfffcc 	andi	r2,r8,65535
  80c108:	14c5383a 	mul	r2,r2,r19
  80c10c:	4010d43a 	srli	r8,r8,16
  80c110:	38ffffcc 	andi	r3,r7,65535
  80c114:	1105883a 	add	r2,r2,r4
  80c118:	1008d43a 	srli	r4,r2,16
  80c11c:	44d1383a 	mul	r8,r8,r19
  80c120:	198d883a 	add	r6,r3,r6
  80c124:	10ffffcc 	andi	r3,r2,65535
  80c128:	30c7c83a 	sub	r3,r6,r3
  80c12c:	380ed43a 	srli	r7,r7,16
  80c130:	4105883a 	add	r2,r8,r4
  80c134:	180dd43a 	srai	r6,r3,16
  80c138:	113fffcc 	andi	r4,r2,65535
  80c13c:	390fc83a 	sub	r7,r7,r4
  80c140:	398d883a 	add	r6,r7,r6
  80c144:	300e943a 	slli	r7,r6,16
  80c148:	18ffffcc 	andi	r3,r3,65535
  80c14c:	1008d43a 	srli	r4,r2,16
  80c150:	38ceb03a 	or	r7,r7,r3
  80c154:	49c00015 	stw	r7,0(r9)
  80c158:	300dd43a 	srai	r6,r6,16
  80c15c:	4a400104 	addi	r9,r9,4
  80c160:	a17fe52e 	bgeu	r20,r5,80c0f8 <__alt_mem_onchip_mem+0xff8040f8>
  80c164:	b0800017 	ldw	r2,0(r22)
  80c168:	10000b1e 	bne	r2,zero,80c198 <quorem+0x120>
  80c16c:	b0bfff04 	addi	r2,r22,-4
  80c170:	a880082e 	bgeu	r21,r2,80c194 <quorem+0x11c>
  80c174:	b0ffff17 	ldw	r3,-4(r22)
  80c178:	18000326 	beq	r3,zero,80c188 <quorem+0x110>
  80c17c:	00000506 	br	80c194 <quorem+0x11c>
  80c180:	10c00017 	ldw	r3,0(r2)
  80c184:	1800031e 	bne	r3,zero,80c194 <quorem+0x11c>
  80c188:	10bfff04 	addi	r2,r2,-4
  80c18c:	94bfffc4 	addi	r18,r18,-1
  80c190:	a8bffb36 	bltu	r21,r2,80c180 <__alt_mem_onchip_mem+0xff804180>
  80c194:	84800415 	stw	r18,16(r16)
  80c198:	b80b883a 	mov	r5,r23
  80c19c:	8009883a 	mov	r4,r16
  80c1a0:	080fbc40 	call	80fbc4 <__mcmp>
  80c1a4:	10002616 	blt	r2,zero,80c240 <quorem+0x1c8>
  80c1a8:	9cc00044 	addi	r19,r19,1
  80c1ac:	a805883a 	mov	r2,r21
  80c1b0:	000b883a 	mov	r5,zero
  80c1b4:	11000017 	ldw	r4,0(r2)
  80c1b8:	89800017 	ldw	r6,0(r17)
  80c1bc:	10800104 	addi	r2,r2,4
  80c1c0:	20ffffcc 	andi	r3,r4,65535
  80c1c4:	194b883a 	add	r5,r3,r5
  80c1c8:	30ffffcc 	andi	r3,r6,65535
  80c1cc:	28c7c83a 	sub	r3,r5,r3
  80c1d0:	300cd43a 	srli	r6,r6,16
  80c1d4:	2008d43a 	srli	r4,r4,16
  80c1d8:	180bd43a 	srai	r5,r3,16
  80c1dc:	18ffffcc 	andi	r3,r3,65535
  80c1e0:	2189c83a 	sub	r4,r4,r6
  80c1e4:	2149883a 	add	r4,r4,r5
  80c1e8:	200c943a 	slli	r6,r4,16
  80c1ec:	8c400104 	addi	r17,r17,4
  80c1f0:	200bd43a 	srai	r5,r4,16
  80c1f4:	30c6b03a 	or	r3,r6,r3
  80c1f8:	10ffff15 	stw	r3,-4(r2)
  80c1fc:	a47fed2e 	bgeu	r20,r17,80c1b4 <__alt_mem_onchip_mem+0xff8041b4>
  80c200:	9485883a 	add	r2,r18,r18
  80c204:	1085883a 	add	r2,r2,r2
  80c208:	a887883a 	add	r3,r21,r2
  80c20c:	18800017 	ldw	r2,0(r3)
  80c210:	10000b1e 	bne	r2,zero,80c240 <quorem+0x1c8>
  80c214:	18bfff04 	addi	r2,r3,-4
  80c218:	a880082e 	bgeu	r21,r2,80c23c <quorem+0x1c4>
  80c21c:	18ffff17 	ldw	r3,-4(r3)
  80c220:	18000326 	beq	r3,zero,80c230 <quorem+0x1b8>
  80c224:	00000506 	br	80c23c <quorem+0x1c4>
  80c228:	10c00017 	ldw	r3,0(r2)
  80c22c:	1800031e 	bne	r3,zero,80c23c <quorem+0x1c4>
  80c230:	10bfff04 	addi	r2,r2,-4
  80c234:	94bfffc4 	addi	r18,r18,-1
  80c238:	a8bffb36 	bltu	r21,r2,80c228 <__alt_mem_onchip_mem+0xff804228>
  80c23c:	84800415 	stw	r18,16(r16)
  80c240:	9805883a 	mov	r2,r19
  80c244:	dfc00817 	ldw	ra,32(sp)
  80c248:	ddc00717 	ldw	r23,28(sp)
  80c24c:	dd800617 	ldw	r22,24(sp)
  80c250:	dd400517 	ldw	r21,20(sp)
  80c254:	dd000417 	ldw	r20,16(sp)
  80c258:	dcc00317 	ldw	r19,12(sp)
  80c25c:	dc800217 	ldw	r18,8(sp)
  80c260:	dc400117 	ldw	r17,4(sp)
  80c264:	dc000017 	ldw	r16,0(sp)
  80c268:	dec00904 	addi	sp,sp,36
  80c26c:	f800283a 	ret
  80c270:	0005883a 	mov	r2,zero
  80c274:	003ff306 	br	80c244 <__alt_mem_onchip_mem+0xff804244>

0080c278 <_dtoa_r>:
  80c278:	20801017 	ldw	r2,64(r4)
  80c27c:	deffde04 	addi	sp,sp,-136
  80c280:	df002015 	stw	fp,128(sp)
  80c284:	dcc01b15 	stw	r19,108(sp)
  80c288:	dc801a15 	stw	r18,104(sp)
  80c28c:	dc401915 	stw	r17,100(sp)
  80c290:	dc001815 	stw	r16,96(sp)
  80c294:	dfc02115 	stw	ra,132(sp)
  80c298:	ddc01f15 	stw	r23,124(sp)
  80c29c:	dd801e15 	stw	r22,120(sp)
  80c2a0:	dd401d15 	stw	r21,116(sp)
  80c2a4:	dd001c15 	stw	r20,112(sp)
  80c2a8:	d9c00315 	stw	r7,12(sp)
  80c2ac:	2039883a 	mov	fp,r4
  80c2b0:	3023883a 	mov	r17,r6
  80c2b4:	2825883a 	mov	r18,r5
  80c2b8:	dc002417 	ldw	r16,144(sp)
  80c2bc:	3027883a 	mov	r19,r6
  80c2c0:	10000826 	beq	r2,zero,80c2e4 <_dtoa_r+0x6c>
  80c2c4:	21801117 	ldw	r6,68(r4)
  80c2c8:	00c00044 	movi	r3,1
  80c2cc:	100b883a 	mov	r5,r2
  80c2d0:	1986983a 	sll	r3,r3,r6
  80c2d4:	11800115 	stw	r6,4(r2)
  80c2d8:	10c00215 	stw	r3,8(r2)
  80c2dc:	080f3a40 	call	80f3a4 <_Bfree>
  80c2e0:	e0001015 	stw	zero,64(fp)
  80c2e4:	88002e16 	blt	r17,zero,80c3a0 <_dtoa_r+0x128>
  80c2e8:	80000015 	stw	zero,0(r16)
  80c2ec:	889ffc2c 	andhi	r2,r17,32752
  80c2f0:	00dffc34 	movhi	r3,32752
  80c2f4:	10c01c26 	beq	r2,r3,80c368 <_dtoa_r+0xf0>
  80c2f8:	000d883a 	mov	r6,zero
  80c2fc:	000f883a 	mov	r7,zero
  80c300:	9009883a 	mov	r4,r18
  80c304:	980b883a 	mov	r5,r19
  80c308:	08146b40 	call	8146b4 <__eqdf2>
  80c30c:	10002b1e 	bne	r2,zero,80c3bc <_dtoa_r+0x144>
  80c310:	d9c02317 	ldw	r7,140(sp)
  80c314:	00800044 	movi	r2,1
  80c318:	38800015 	stw	r2,0(r7)
  80c31c:	d8802517 	ldw	r2,148(sp)
  80c320:	10019e26 	beq	r2,zero,80c99c <_dtoa_r+0x724>
  80c324:	d8c02517 	ldw	r3,148(sp)
  80c328:	008020b4 	movhi	r2,130
  80c32c:	10a29b44 	addi	r2,r2,-30099
  80c330:	18800015 	stw	r2,0(r3)
  80c334:	10bfffc4 	addi	r2,r2,-1
  80c338:	dfc02117 	ldw	ra,132(sp)
  80c33c:	df002017 	ldw	fp,128(sp)
  80c340:	ddc01f17 	ldw	r23,124(sp)
  80c344:	dd801e17 	ldw	r22,120(sp)
  80c348:	dd401d17 	ldw	r21,116(sp)
  80c34c:	dd001c17 	ldw	r20,112(sp)
  80c350:	dcc01b17 	ldw	r19,108(sp)
  80c354:	dc801a17 	ldw	r18,104(sp)
  80c358:	dc401917 	ldw	r17,100(sp)
  80c35c:	dc001817 	ldw	r16,96(sp)
  80c360:	dec02204 	addi	sp,sp,136
  80c364:	f800283a 	ret
  80c368:	d8c02317 	ldw	r3,140(sp)
  80c36c:	0089c3c4 	movi	r2,9999
  80c370:	18800015 	stw	r2,0(r3)
  80c374:	90017726 	beq	r18,zero,80c954 <_dtoa_r+0x6dc>
  80c378:	008020b4 	movhi	r2,130
  80c37c:	10a2a704 	addi	r2,r2,-30052
  80c380:	d9002517 	ldw	r4,148(sp)
  80c384:	203fec26 	beq	r4,zero,80c338 <__alt_mem_onchip_mem+0xff804338>
  80c388:	10c000c7 	ldb	r3,3(r2)
  80c38c:	1801781e 	bne	r3,zero,80c970 <_dtoa_r+0x6f8>
  80c390:	10c000c4 	addi	r3,r2,3
  80c394:	d9802517 	ldw	r6,148(sp)
  80c398:	30c00015 	stw	r3,0(r6)
  80c39c:	003fe606 	br	80c338 <__alt_mem_onchip_mem+0xff804338>
  80c3a0:	04e00034 	movhi	r19,32768
  80c3a4:	9cffffc4 	addi	r19,r19,-1
  80c3a8:	00800044 	movi	r2,1
  80c3ac:	8ce6703a 	and	r19,r17,r19
  80c3b0:	80800015 	stw	r2,0(r16)
  80c3b4:	9823883a 	mov	r17,r19
  80c3b8:	003fcc06 	br	80c2ec <__alt_mem_onchip_mem+0xff8042ec>
  80c3bc:	d8800204 	addi	r2,sp,8
  80c3c0:	d8800015 	stw	r2,0(sp)
  80c3c4:	d9c00104 	addi	r7,sp,4
  80c3c8:	900b883a 	mov	r5,r18
  80c3cc:	980d883a 	mov	r6,r19
  80c3d0:	e009883a 	mov	r4,fp
  80c3d4:	8820d53a 	srli	r16,r17,20
  80c3d8:	080ff900 	call	80ff90 <__d2b>
  80c3dc:	d8800915 	stw	r2,36(sp)
  80c3e0:	8001651e 	bne	r16,zero,80c978 <_dtoa_r+0x700>
  80c3e4:	dd800217 	ldw	r22,8(sp)
  80c3e8:	dc000117 	ldw	r16,4(sp)
  80c3ec:	00800804 	movi	r2,32
  80c3f0:	b421883a 	add	r16,r22,r16
  80c3f4:	80c10c84 	addi	r3,r16,1074
  80c3f8:	10c2d10e 	bge	r2,r3,80cf40 <_dtoa_r+0xcc8>
  80c3fc:	00801004 	movi	r2,64
  80c400:	81010484 	addi	r4,r16,1042
  80c404:	10c7c83a 	sub	r3,r2,r3
  80c408:	9108d83a 	srl	r4,r18,r4
  80c40c:	88e2983a 	sll	r17,r17,r3
  80c410:	2448b03a 	or	r4,r4,r17
  80c414:	0809adc0 	call	809adc <__floatunsidf>
  80c418:	017f8434 	movhi	r5,65040
  80c41c:	01800044 	movi	r6,1
  80c420:	1009883a 	mov	r4,r2
  80c424:	194b883a 	add	r5,r3,r5
  80c428:	843fffc4 	addi	r16,r16,-1
  80c42c:	d9801115 	stw	r6,68(sp)
  80c430:	000d883a 	mov	r6,zero
  80c434:	01cffe34 	movhi	r7,16376
  80c438:	08091040 	call	809104 <__subdf3>
  80c43c:	0198dbf4 	movhi	r6,25455
  80c440:	01cff4f4 	movhi	r7,16339
  80c444:	3190d844 	addi	r6,r6,17249
  80c448:	39e1e9c4 	addi	r7,r7,-30809
  80c44c:	1009883a 	mov	r4,r2
  80c450:	180b883a 	mov	r5,r3
  80c454:	08089ec0 	call	8089ec <__muldf3>
  80c458:	01a2d874 	movhi	r6,35681
  80c45c:	01cff1f4 	movhi	r7,16327
  80c460:	31b22cc4 	addi	r6,r6,-14157
  80c464:	39e28a04 	addi	r7,r7,-30168
  80c468:	180b883a 	mov	r5,r3
  80c46c:	1009883a 	mov	r4,r2
  80c470:	0807f700 	call	807f70 <__adddf3>
  80c474:	8009883a 	mov	r4,r16
  80c478:	1029883a 	mov	r20,r2
  80c47c:	1823883a 	mov	r17,r3
  80c480:	0809a000 	call	809a00 <__floatsidf>
  80c484:	019427f4 	movhi	r6,20639
  80c488:	01cff4f4 	movhi	r7,16339
  80c48c:	319e7ec4 	addi	r6,r6,31227
  80c490:	39d104c4 	addi	r7,r7,17427
  80c494:	1009883a 	mov	r4,r2
  80c498:	180b883a 	mov	r5,r3
  80c49c:	08089ec0 	call	8089ec <__muldf3>
  80c4a0:	100d883a 	mov	r6,r2
  80c4a4:	180f883a 	mov	r7,r3
  80c4a8:	a009883a 	mov	r4,r20
  80c4ac:	880b883a 	mov	r5,r17
  80c4b0:	0807f700 	call	807f70 <__adddf3>
  80c4b4:	1009883a 	mov	r4,r2
  80c4b8:	180b883a 	mov	r5,r3
  80c4bc:	1029883a 	mov	r20,r2
  80c4c0:	1823883a 	mov	r17,r3
  80c4c4:	081473c0 	call	81473c <__fixdfsi>
  80c4c8:	000d883a 	mov	r6,zero
  80c4cc:	000f883a 	mov	r7,zero
  80c4d0:	a009883a 	mov	r4,r20
  80c4d4:	880b883a 	mov	r5,r17
  80c4d8:	d8800515 	stw	r2,20(sp)
  80c4dc:	08088f80 	call	8088f8 <__ledf2>
  80c4e0:	10028716 	blt	r2,zero,80cf00 <_dtoa_r+0xc88>
  80c4e4:	d8c00517 	ldw	r3,20(sp)
  80c4e8:	00800584 	movi	r2,22
  80c4ec:	10c27536 	bltu	r2,r3,80cec4 <_dtoa_r+0xc4c>
  80c4f0:	180490fa 	slli	r2,r3,3
  80c4f4:	00c020b4 	movhi	r3,130
  80c4f8:	18e2c304 	addi	r3,r3,-29940
  80c4fc:	1885883a 	add	r2,r3,r2
  80c500:	11000017 	ldw	r4,0(r2)
  80c504:	11400117 	ldw	r5,4(r2)
  80c508:	900d883a 	mov	r6,r18
  80c50c:	980f883a 	mov	r7,r19
  80c510:	080881c0 	call	80881c <__gedf2>
  80c514:	00828d0e 	bge	zero,r2,80cf4c <_dtoa_r+0xcd4>
  80c518:	d9000517 	ldw	r4,20(sp)
  80c51c:	d8000e15 	stw	zero,56(sp)
  80c520:	213fffc4 	addi	r4,r4,-1
  80c524:	d9000515 	stw	r4,20(sp)
  80c528:	b42dc83a 	sub	r22,r22,r16
  80c52c:	b5bfffc4 	addi	r22,r22,-1
  80c530:	b0026f16 	blt	r22,zero,80cef0 <_dtoa_r+0xc78>
  80c534:	d8000815 	stw	zero,32(sp)
  80c538:	d9c00517 	ldw	r7,20(sp)
  80c53c:	38026416 	blt	r7,zero,80ced0 <_dtoa_r+0xc58>
  80c540:	b1ed883a 	add	r22,r22,r7
  80c544:	d9c00d15 	stw	r7,52(sp)
  80c548:	d8000a15 	stw	zero,40(sp)
  80c54c:	d9800317 	ldw	r6,12(sp)
  80c550:	00800244 	movi	r2,9
  80c554:	11811436 	bltu	r2,r6,80c9a8 <_dtoa_r+0x730>
  80c558:	00800144 	movi	r2,5
  80c55c:	1184e10e 	bge	r2,r6,80d8e4 <_dtoa_r+0x166c>
  80c560:	31bfff04 	addi	r6,r6,-4
  80c564:	d9800315 	stw	r6,12(sp)
  80c568:	0023883a 	mov	r17,zero
  80c56c:	d9800317 	ldw	r6,12(sp)
  80c570:	008000c4 	movi	r2,3
  80c574:	30836726 	beq	r6,r2,80d314 <_dtoa_r+0x109c>
  80c578:	1183410e 	bge	r2,r6,80d280 <_dtoa_r+0x1008>
  80c57c:	d9c00317 	ldw	r7,12(sp)
  80c580:	00800104 	movi	r2,4
  80c584:	38827c26 	beq	r7,r2,80cf78 <_dtoa_r+0xd00>
  80c588:	00800144 	movi	r2,5
  80c58c:	3884c41e 	bne	r7,r2,80d8a0 <_dtoa_r+0x1628>
  80c590:	00800044 	movi	r2,1
  80c594:	d8800b15 	stw	r2,44(sp)
  80c598:	d8c00517 	ldw	r3,20(sp)
  80c59c:	d9002217 	ldw	r4,136(sp)
  80c5a0:	1907883a 	add	r3,r3,r4
  80c5a4:	19800044 	addi	r6,r3,1
  80c5a8:	d8c00c15 	stw	r3,48(sp)
  80c5ac:	d9800615 	stw	r6,24(sp)
  80c5b0:	0183a40e 	bge	zero,r6,80d444 <_dtoa_r+0x11cc>
  80c5b4:	d9800617 	ldw	r6,24(sp)
  80c5b8:	3021883a 	mov	r16,r6
  80c5bc:	e0001115 	stw	zero,68(fp)
  80c5c0:	008005c4 	movi	r2,23
  80c5c4:	1184c92e 	bgeu	r2,r6,80d8ec <_dtoa_r+0x1674>
  80c5c8:	00c00044 	movi	r3,1
  80c5cc:	00800104 	movi	r2,4
  80c5d0:	1085883a 	add	r2,r2,r2
  80c5d4:	11000504 	addi	r4,r2,20
  80c5d8:	180b883a 	mov	r5,r3
  80c5dc:	18c00044 	addi	r3,r3,1
  80c5e0:	313ffb2e 	bgeu	r6,r4,80c5d0 <__alt_mem_onchip_mem+0xff8045d0>
  80c5e4:	e1401115 	stw	r5,68(fp)
  80c5e8:	e009883a 	mov	r4,fp
  80c5ec:	080f2fc0 	call	80f2fc <_Balloc>
  80c5f0:	d8800715 	stw	r2,28(sp)
  80c5f4:	e0801015 	stw	r2,64(fp)
  80c5f8:	00800384 	movi	r2,14
  80c5fc:	1400f736 	bltu	r2,r16,80c9dc <_dtoa_r+0x764>
  80c600:	8800f626 	beq	r17,zero,80c9dc <_dtoa_r+0x764>
  80c604:	d9c00517 	ldw	r7,20(sp)
  80c608:	01c39a0e 	bge	zero,r7,80d474 <_dtoa_r+0x11fc>
  80c60c:	388003cc 	andi	r2,r7,15
  80c610:	100490fa 	slli	r2,r2,3
  80c614:	382bd13a 	srai	r21,r7,4
  80c618:	00c020b4 	movhi	r3,130
  80c61c:	18e2c304 	addi	r3,r3,-29940
  80c620:	1885883a 	add	r2,r3,r2
  80c624:	a8c0040c 	andi	r3,r21,16
  80c628:	12400017 	ldw	r9,0(r2)
  80c62c:	12000117 	ldw	r8,4(r2)
  80c630:	18037926 	beq	r3,zero,80d418 <_dtoa_r+0x11a0>
  80c634:	008020b4 	movhi	r2,130
  80c638:	10a2b904 	addi	r2,r2,-29980
  80c63c:	11800817 	ldw	r6,32(r2)
  80c640:	11c00917 	ldw	r7,36(r2)
  80c644:	9009883a 	mov	r4,r18
  80c648:	980b883a 	mov	r5,r19
  80c64c:	da001715 	stw	r8,92(sp)
  80c650:	da401615 	stw	r9,88(sp)
  80c654:	0813dcc0 	call	813dcc <__divdf3>
  80c658:	da001717 	ldw	r8,92(sp)
  80c65c:	da401617 	ldw	r9,88(sp)
  80c660:	ad4003cc 	andi	r21,r21,15
  80c664:	040000c4 	movi	r16,3
  80c668:	1023883a 	mov	r17,r2
  80c66c:	1829883a 	mov	r20,r3
  80c670:	a8001126 	beq	r21,zero,80c6b8 <_dtoa_r+0x440>
  80c674:	05c020b4 	movhi	r23,130
  80c678:	bde2b904 	addi	r23,r23,-29980
  80c67c:	4805883a 	mov	r2,r9
  80c680:	4007883a 	mov	r3,r8
  80c684:	a980004c 	andi	r6,r21,1
  80c688:	1009883a 	mov	r4,r2
  80c68c:	a82bd07a 	srai	r21,r21,1
  80c690:	180b883a 	mov	r5,r3
  80c694:	30000426 	beq	r6,zero,80c6a8 <_dtoa_r+0x430>
  80c698:	b9800017 	ldw	r6,0(r23)
  80c69c:	b9c00117 	ldw	r7,4(r23)
  80c6a0:	84000044 	addi	r16,r16,1
  80c6a4:	08089ec0 	call	8089ec <__muldf3>
  80c6a8:	bdc00204 	addi	r23,r23,8
  80c6ac:	a83ff51e 	bne	r21,zero,80c684 <__alt_mem_onchip_mem+0xff804684>
  80c6b0:	1013883a 	mov	r9,r2
  80c6b4:	1811883a 	mov	r8,r3
  80c6b8:	480d883a 	mov	r6,r9
  80c6bc:	400f883a 	mov	r7,r8
  80c6c0:	8809883a 	mov	r4,r17
  80c6c4:	a00b883a 	mov	r5,r20
  80c6c8:	0813dcc0 	call	813dcc <__divdf3>
  80c6cc:	d8800f15 	stw	r2,60(sp)
  80c6d0:	d8c01015 	stw	r3,64(sp)
  80c6d4:	d8c00e17 	ldw	r3,56(sp)
  80c6d8:	18000626 	beq	r3,zero,80c6f4 <_dtoa_r+0x47c>
  80c6dc:	d9000f17 	ldw	r4,60(sp)
  80c6e0:	d9401017 	ldw	r5,64(sp)
  80c6e4:	000d883a 	mov	r6,zero
  80c6e8:	01cffc34 	movhi	r7,16368
  80c6ec:	08088f80 	call	8088f8 <__ledf2>
  80c6f0:	10040b16 	blt	r2,zero,80d720 <_dtoa_r+0x14a8>
  80c6f4:	8009883a 	mov	r4,r16
  80c6f8:	0809a000 	call	809a00 <__floatsidf>
  80c6fc:	d9800f17 	ldw	r6,60(sp)
  80c700:	d9c01017 	ldw	r7,64(sp)
  80c704:	1009883a 	mov	r4,r2
  80c708:	180b883a 	mov	r5,r3
  80c70c:	08089ec0 	call	8089ec <__muldf3>
  80c710:	000d883a 	mov	r6,zero
  80c714:	01d00734 	movhi	r7,16412
  80c718:	1009883a 	mov	r4,r2
  80c71c:	180b883a 	mov	r5,r3
  80c720:	0807f700 	call	807f70 <__adddf3>
  80c724:	1021883a 	mov	r16,r2
  80c728:	d8800617 	ldw	r2,24(sp)
  80c72c:	047f3034 	movhi	r17,64704
  80c730:	1c63883a 	add	r17,r3,r17
  80c734:	10031826 	beq	r2,zero,80d398 <_dtoa_r+0x1120>
  80c738:	d8c00517 	ldw	r3,20(sp)
  80c73c:	db000617 	ldw	r12,24(sp)
  80c740:	d8c01315 	stw	r3,76(sp)
  80c744:	d9000b17 	ldw	r4,44(sp)
  80c748:	20038f26 	beq	r4,zero,80d588 <_dtoa_r+0x1310>
  80c74c:	60bfffc4 	addi	r2,r12,-1
  80c750:	100490fa 	slli	r2,r2,3
  80c754:	00c020b4 	movhi	r3,130
  80c758:	18e2c304 	addi	r3,r3,-29940
  80c75c:	1885883a 	add	r2,r3,r2
  80c760:	11800017 	ldw	r6,0(r2)
  80c764:	11c00117 	ldw	r7,4(r2)
  80c768:	d8800717 	ldw	r2,28(sp)
  80c76c:	0009883a 	mov	r4,zero
  80c770:	014ff834 	movhi	r5,16352
  80c774:	db001615 	stw	r12,88(sp)
  80c778:	15c00044 	addi	r23,r2,1
  80c77c:	0813dcc0 	call	813dcc <__divdf3>
  80c780:	800d883a 	mov	r6,r16
  80c784:	880f883a 	mov	r7,r17
  80c788:	1009883a 	mov	r4,r2
  80c78c:	180b883a 	mov	r5,r3
  80c790:	08091040 	call	809104 <__subdf3>
  80c794:	d9401017 	ldw	r5,64(sp)
  80c798:	d9000f17 	ldw	r4,60(sp)
  80c79c:	102b883a 	mov	r21,r2
  80c7a0:	d8c01215 	stw	r3,72(sp)
  80c7a4:	081473c0 	call	81473c <__fixdfsi>
  80c7a8:	1009883a 	mov	r4,r2
  80c7ac:	1029883a 	mov	r20,r2
  80c7b0:	0809a000 	call	809a00 <__floatsidf>
  80c7b4:	d9000f17 	ldw	r4,60(sp)
  80c7b8:	d9401017 	ldw	r5,64(sp)
  80c7bc:	100d883a 	mov	r6,r2
  80c7c0:	180f883a 	mov	r7,r3
  80c7c4:	08091040 	call	809104 <__subdf3>
  80c7c8:	1823883a 	mov	r17,r3
  80c7cc:	d8c00717 	ldw	r3,28(sp)
  80c7d0:	d9401217 	ldw	r5,72(sp)
  80c7d4:	a2000c04 	addi	r8,r20,48
  80c7d8:	1021883a 	mov	r16,r2
  80c7dc:	1a000005 	stb	r8,0(r3)
  80c7e0:	800d883a 	mov	r6,r16
  80c7e4:	880f883a 	mov	r7,r17
  80c7e8:	a809883a 	mov	r4,r21
  80c7ec:	4029883a 	mov	r20,r8
  80c7f0:	080881c0 	call	80881c <__gedf2>
  80c7f4:	00841d16 	blt	zero,r2,80d86c <_dtoa_r+0x15f4>
  80c7f8:	800d883a 	mov	r6,r16
  80c7fc:	880f883a 	mov	r7,r17
  80c800:	0009883a 	mov	r4,zero
  80c804:	014ffc34 	movhi	r5,16368
  80c808:	08091040 	call	809104 <__subdf3>
  80c80c:	d9401217 	ldw	r5,72(sp)
  80c810:	100d883a 	mov	r6,r2
  80c814:	180f883a 	mov	r7,r3
  80c818:	a809883a 	mov	r4,r21
  80c81c:	080881c0 	call	80881c <__gedf2>
  80c820:	db001617 	ldw	r12,88(sp)
  80c824:	00840e16 	blt	zero,r2,80d860 <_dtoa_r+0x15e8>
  80c828:	00800044 	movi	r2,1
  80c82c:	13006b0e 	bge	r2,r12,80c9dc <_dtoa_r+0x764>
  80c830:	d9000717 	ldw	r4,28(sp)
  80c834:	dd800f15 	stw	r22,60(sp)
  80c838:	dcc01015 	stw	r19,64(sp)
  80c83c:	2319883a 	add	r12,r4,r12
  80c840:	dcc01217 	ldw	r19,72(sp)
  80c844:	602d883a 	mov	r22,r12
  80c848:	dc801215 	stw	r18,72(sp)
  80c84c:	b825883a 	mov	r18,r23
  80c850:	00000906 	br	80c878 <_dtoa_r+0x600>
  80c854:	08091040 	call	809104 <__subdf3>
  80c858:	a80d883a 	mov	r6,r21
  80c85c:	980f883a 	mov	r7,r19
  80c860:	1009883a 	mov	r4,r2
  80c864:	180b883a 	mov	r5,r3
  80c868:	08088f80 	call	8088f8 <__ledf2>
  80c86c:	1003e816 	blt	r2,zero,80d810 <_dtoa_r+0x1598>
  80c870:	b825883a 	mov	r18,r23
  80c874:	bd83e926 	beq	r23,r22,80d81c <_dtoa_r+0x15a4>
  80c878:	a809883a 	mov	r4,r21
  80c87c:	980b883a 	mov	r5,r19
  80c880:	000d883a 	mov	r6,zero
  80c884:	01d00934 	movhi	r7,16420
  80c888:	08089ec0 	call	8089ec <__muldf3>
  80c88c:	000d883a 	mov	r6,zero
  80c890:	01d00934 	movhi	r7,16420
  80c894:	8009883a 	mov	r4,r16
  80c898:	880b883a 	mov	r5,r17
  80c89c:	102b883a 	mov	r21,r2
  80c8a0:	1827883a 	mov	r19,r3
  80c8a4:	08089ec0 	call	8089ec <__muldf3>
  80c8a8:	180b883a 	mov	r5,r3
  80c8ac:	1009883a 	mov	r4,r2
  80c8b0:	1821883a 	mov	r16,r3
  80c8b4:	1023883a 	mov	r17,r2
  80c8b8:	081473c0 	call	81473c <__fixdfsi>
  80c8bc:	1009883a 	mov	r4,r2
  80c8c0:	1029883a 	mov	r20,r2
  80c8c4:	0809a000 	call	809a00 <__floatsidf>
  80c8c8:	8809883a 	mov	r4,r17
  80c8cc:	800b883a 	mov	r5,r16
  80c8d0:	100d883a 	mov	r6,r2
  80c8d4:	180f883a 	mov	r7,r3
  80c8d8:	08091040 	call	809104 <__subdf3>
  80c8dc:	a5000c04 	addi	r20,r20,48
  80c8e0:	a80d883a 	mov	r6,r21
  80c8e4:	980f883a 	mov	r7,r19
  80c8e8:	1009883a 	mov	r4,r2
  80c8ec:	180b883a 	mov	r5,r3
  80c8f0:	95000005 	stb	r20,0(r18)
  80c8f4:	1021883a 	mov	r16,r2
  80c8f8:	1823883a 	mov	r17,r3
  80c8fc:	08088f80 	call	8088f8 <__ledf2>
  80c900:	bdc00044 	addi	r23,r23,1
  80c904:	800d883a 	mov	r6,r16
  80c908:	880f883a 	mov	r7,r17
  80c90c:	0009883a 	mov	r4,zero
  80c910:	014ffc34 	movhi	r5,16368
  80c914:	103fcf0e 	bge	r2,zero,80c854 <__alt_mem_onchip_mem+0xff804854>
  80c918:	d8c01317 	ldw	r3,76(sp)
  80c91c:	d8c00515 	stw	r3,20(sp)
  80c920:	d9400917 	ldw	r5,36(sp)
  80c924:	e009883a 	mov	r4,fp
  80c928:	080f3a40 	call	80f3a4 <_Bfree>
  80c92c:	d9000517 	ldw	r4,20(sp)
  80c930:	d9802317 	ldw	r6,140(sp)
  80c934:	d9c02517 	ldw	r7,148(sp)
  80c938:	b8000005 	stb	zero,0(r23)
  80c93c:	20800044 	addi	r2,r4,1
  80c940:	30800015 	stw	r2,0(r6)
  80c944:	3802aa26 	beq	r7,zero,80d3f0 <_dtoa_r+0x1178>
  80c948:	3dc00015 	stw	r23,0(r7)
  80c94c:	d8800717 	ldw	r2,28(sp)
  80c950:	003e7906 	br	80c338 <__alt_mem_onchip_mem+0xff804338>
  80c954:	00800434 	movhi	r2,16
  80c958:	10bfffc4 	addi	r2,r2,-1
  80c95c:	88a2703a 	and	r17,r17,r2
  80c960:	883e851e 	bne	r17,zero,80c378 <__alt_mem_onchip_mem+0xff804378>
  80c964:	008020b4 	movhi	r2,130
  80c968:	10a2a404 	addi	r2,r2,-30064
  80c96c:	003e8406 	br	80c380 <__alt_mem_onchip_mem+0xff804380>
  80c970:	10c00204 	addi	r3,r2,8
  80c974:	003e8706 	br	80c394 <__alt_mem_onchip_mem+0xff804394>
  80c978:	01400434 	movhi	r5,16
  80c97c:	297fffc4 	addi	r5,r5,-1
  80c980:	994a703a 	and	r5,r19,r5
  80c984:	9009883a 	mov	r4,r18
  80c988:	843f0044 	addi	r16,r16,-1023
  80c98c:	294ffc34 	orhi	r5,r5,16368
  80c990:	dd800217 	ldw	r22,8(sp)
  80c994:	d8001115 	stw	zero,68(sp)
  80c998:	003ea506 	br	80c430 <__alt_mem_onchip_mem+0xff804430>
  80c99c:	008020b4 	movhi	r2,130
  80c9a0:	10a29b04 	addi	r2,r2,-30100
  80c9a4:	003e6406 	br	80c338 <__alt_mem_onchip_mem+0xff804338>
  80c9a8:	e0001115 	stw	zero,68(fp)
  80c9ac:	000b883a 	mov	r5,zero
  80c9b0:	e009883a 	mov	r4,fp
  80c9b4:	080f2fc0 	call	80f2fc <_Balloc>
  80c9b8:	01bfffc4 	movi	r6,-1
  80c9bc:	01c00044 	movi	r7,1
  80c9c0:	d8800715 	stw	r2,28(sp)
  80c9c4:	d9800c15 	stw	r6,48(sp)
  80c9c8:	e0801015 	stw	r2,64(fp)
  80c9cc:	d8000315 	stw	zero,12(sp)
  80c9d0:	d9c00b15 	stw	r7,44(sp)
  80c9d4:	d9800615 	stw	r6,24(sp)
  80c9d8:	d8002215 	stw	zero,136(sp)
  80c9dc:	d8800117 	ldw	r2,4(sp)
  80c9e0:	10008916 	blt	r2,zero,80cc08 <_dtoa_r+0x990>
  80c9e4:	d9000517 	ldw	r4,20(sp)
  80c9e8:	00c00384 	movi	r3,14
  80c9ec:	19008616 	blt	r3,r4,80cc08 <_dtoa_r+0x990>
  80c9f0:	200490fa 	slli	r2,r4,3
  80c9f4:	00c020b4 	movhi	r3,130
  80c9f8:	d9802217 	ldw	r6,136(sp)
  80c9fc:	18e2c304 	addi	r3,r3,-29940
  80ca00:	1885883a 	add	r2,r3,r2
  80ca04:	14000017 	ldw	r16,0(r2)
  80ca08:	14400117 	ldw	r17,4(r2)
  80ca0c:	30016316 	blt	r6,zero,80cf9c <_dtoa_r+0xd24>
  80ca10:	800d883a 	mov	r6,r16
  80ca14:	880f883a 	mov	r7,r17
  80ca18:	9009883a 	mov	r4,r18
  80ca1c:	980b883a 	mov	r5,r19
  80ca20:	0813dcc0 	call	813dcc <__divdf3>
  80ca24:	180b883a 	mov	r5,r3
  80ca28:	1009883a 	mov	r4,r2
  80ca2c:	081473c0 	call	81473c <__fixdfsi>
  80ca30:	1009883a 	mov	r4,r2
  80ca34:	102b883a 	mov	r21,r2
  80ca38:	0809a000 	call	809a00 <__floatsidf>
  80ca3c:	800d883a 	mov	r6,r16
  80ca40:	880f883a 	mov	r7,r17
  80ca44:	1009883a 	mov	r4,r2
  80ca48:	180b883a 	mov	r5,r3
  80ca4c:	08089ec0 	call	8089ec <__muldf3>
  80ca50:	100d883a 	mov	r6,r2
  80ca54:	180f883a 	mov	r7,r3
  80ca58:	9009883a 	mov	r4,r18
  80ca5c:	980b883a 	mov	r5,r19
  80ca60:	08091040 	call	809104 <__subdf3>
  80ca64:	d9c00717 	ldw	r7,28(sp)
  80ca68:	1009883a 	mov	r4,r2
  80ca6c:	a8800c04 	addi	r2,r21,48
  80ca70:	38800005 	stb	r2,0(r7)
  80ca74:	3dc00044 	addi	r23,r7,1
  80ca78:	d9c00617 	ldw	r7,24(sp)
  80ca7c:	01800044 	movi	r6,1
  80ca80:	180b883a 	mov	r5,r3
  80ca84:	2005883a 	mov	r2,r4
  80ca88:	39803826 	beq	r7,r6,80cb6c <_dtoa_r+0x8f4>
  80ca8c:	000d883a 	mov	r6,zero
  80ca90:	01d00934 	movhi	r7,16420
  80ca94:	08089ec0 	call	8089ec <__muldf3>
  80ca98:	000d883a 	mov	r6,zero
  80ca9c:	000f883a 	mov	r7,zero
  80caa0:	1009883a 	mov	r4,r2
  80caa4:	180b883a 	mov	r5,r3
  80caa8:	1025883a 	mov	r18,r2
  80caac:	1827883a 	mov	r19,r3
  80cab0:	08146b40 	call	8146b4 <__eqdf2>
  80cab4:	103f9a26 	beq	r2,zero,80c920 <__alt_mem_onchip_mem+0xff804920>
  80cab8:	d9c00617 	ldw	r7,24(sp)
  80cabc:	d8c00717 	ldw	r3,28(sp)
  80cac0:	b829883a 	mov	r20,r23
  80cac4:	38bfffc4 	addi	r2,r7,-1
  80cac8:	18ad883a 	add	r22,r3,r2
  80cacc:	00000a06 	br	80caf8 <_dtoa_r+0x880>
  80cad0:	08089ec0 	call	8089ec <__muldf3>
  80cad4:	000d883a 	mov	r6,zero
  80cad8:	000f883a 	mov	r7,zero
  80cadc:	1009883a 	mov	r4,r2
  80cae0:	180b883a 	mov	r5,r3
  80cae4:	1025883a 	mov	r18,r2
  80cae8:	1827883a 	mov	r19,r3
  80caec:	b829883a 	mov	r20,r23
  80caf0:	08146b40 	call	8146b4 <__eqdf2>
  80caf4:	103f8a26 	beq	r2,zero,80c920 <__alt_mem_onchip_mem+0xff804920>
  80caf8:	800d883a 	mov	r6,r16
  80cafc:	880f883a 	mov	r7,r17
  80cb00:	9009883a 	mov	r4,r18
  80cb04:	980b883a 	mov	r5,r19
  80cb08:	0813dcc0 	call	813dcc <__divdf3>
  80cb0c:	180b883a 	mov	r5,r3
  80cb10:	1009883a 	mov	r4,r2
  80cb14:	081473c0 	call	81473c <__fixdfsi>
  80cb18:	1009883a 	mov	r4,r2
  80cb1c:	102b883a 	mov	r21,r2
  80cb20:	0809a000 	call	809a00 <__floatsidf>
  80cb24:	800d883a 	mov	r6,r16
  80cb28:	880f883a 	mov	r7,r17
  80cb2c:	1009883a 	mov	r4,r2
  80cb30:	180b883a 	mov	r5,r3
  80cb34:	08089ec0 	call	8089ec <__muldf3>
  80cb38:	100d883a 	mov	r6,r2
  80cb3c:	180f883a 	mov	r7,r3
  80cb40:	9009883a 	mov	r4,r18
  80cb44:	980b883a 	mov	r5,r19
  80cb48:	08091040 	call	809104 <__subdf3>
  80cb4c:	aa000c04 	addi	r8,r21,48
  80cb50:	a2000005 	stb	r8,0(r20)
  80cb54:	000d883a 	mov	r6,zero
  80cb58:	01d00934 	movhi	r7,16420
  80cb5c:	1009883a 	mov	r4,r2
  80cb60:	180b883a 	mov	r5,r3
  80cb64:	a5c00044 	addi	r23,r20,1
  80cb68:	b53fd91e 	bne	r22,r20,80cad0 <__alt_mem_onchip_mem+0xff804ad0>
  80cb6c:	100d883a 	mov	r6,r2
  80cb70:	180f883a 	mov	r7,r3
  80cb74:	1009883a 	mov	r4,r2
  80cb78:	180b883a 	mov	r5,r3
  80cb7c:	0807f700 	call	807f70 <__adddf3>
  80cb80:	100d883a 	mov	r6,r2
  80cb84:	180f883a 	mov	r7,r3
  80cb88:	8009883a 	mov	r4,r16
  80cb8c:	880b883a 	mov	r5,r17
  80cb90:	1027883a 	mov	r19,r2
  80cb94:	1825883a 	mov	r18,r3
  80cb98:	08088f80 	call	8088f8 <__ledf2>
  80cb9c:	10000816 	blt	r2,zero,80cbc0 <_dtoa_r+0x948>
  80cba0:	980d883a 	mov	r6,r19
  80cba4:	900f883a 	mov	r7,r18
  80cba8:	8009883a 	mov	r4,r16
  80cbac:	880b883a 	mov	r5,r17
  80cbb0:	08146b40 	call	8146b4 <__eqdf2>
  80cbb4:	103f5a1e 	bne	r2,zero,80c920 <__alt_mem_onchip_mem+0xff804920>
  80cbb8:	ad40004c 	andi	r21,r21,1
  80cbbc:	a83f5826 	beq	r21,zero,80c920 <__alt_mem_onchip_mem+0xff804920>
  80cbc0:	bd3fffc3 	ldbu	r20,-1(r23)
  80cbc4:	b8bfffc4 	addi	r2,r23,-1
  80cbc8:	1007883a 	mov	r3,r2
  80cbcc:	01400e44 	movi	r5,57
  80cbd0:	d9800717 	ldw	r6,28(sp)
  80cbd4:	00000506 	br	80cbec <_dtoa_r+0x974>
  80cbd8:	18ffffc4 	addi	r3,r3,-1
  80cbdc:	11824726 	beq	r2,r6,80d4fc <_dtoa_r+0x1284>
  80cbe0:	1d000003 	ldbu	r20,0(r3)
  80cbe4:	102f883a 	mov	r23,r2
  80cbe8:	10bfffc4 	addi	r2,r2,-1
  80cbec:	a1003fcc 	andi	r4,r20,255
  80cbf0:	2100201c 	xori	r4,r4,128
  80cbf4:	213fe004 	addi	r4,r4,-128
  80cbf8:	217ff726 	beq	r4,r5,80cbd8 <__alt_mem_onchip_mem+0xff804bd8>
  80cbfc:	a2000044 	addi	r8,r20,1
  80cc00:	12000005 	stb	r8,0(r2)
  80cc04:	003f4606 	br	80c920 <__alt_mem_onchip_mem+0xff804920>
  80cc08:	d9000b17 	ldw	r4,44(sp)
  80cc0c:	2000c826 	beq	r4,zero,80cf30 <_dtoa_r+0xcb8>
  80cc10:	d9800317 	ldw	r6,12(sp)
  80cc14:	00c00044 	movi	r3,1
  80cc18:	1980f90e 	bge	r3,r6,80d000 <_dtoa_r+0xd88>
  80cc1c:	d8800617 	ldw	r2,24(sp)
  80cc20:	d8c00a17 	ldw	r3,40(sp)
  80cc24:	157fffc4 	addi	r21,r2,-1
  80cc28:	1d41f316 	blt	r3,r21,80d3f8 <_dtoa_r+0x1180>
  80cc2c:	1d6bc83a 	sub	r21,r3,r21
  80cc30:	d9c00617 	ldw	r7,24(sp)
  80cc34:	3802aa16 	blt	r7,zero,80d6e0 <_dtoa_r+0x1468>
  80cc38:	dd000817 	ldw	r20,32(sp)
  80cc3c:	d8800617 	ldw	r2,24(sp)
  80cc40:	d8c00817 	ldw	r3,32(sp)
  80cc44:	01400044 	movi	r5,1
  80cc48:	e009883a 	mov	r4,fp
  80cc4c:	1887883a 	add	r3,r3,r2
  80cc50:	d8c00815 	stw	r3,32(sp)
  80cc54:	b0ad883a 	add	r22,r22,r2
  80cc58:	080f7080 	call	80f708 <__i2b>
  80cc5c:	1023883a 	mov	r17,r2
  80cc60:	a0000826 	beq	r20,zero,80cc84 <_dtoa_r+0xa0c>
  80cc64:	0580070e 	bge	zero,r22,80cc84 <_dtoa_r+0xa0c>
  80cc68:	a005883a 	mov	r2,r20
  80cc6c:	b500b916 	blt	r22,r20,80cf54 <_dtoa_r+0xcdc>
  80cc70:	d9000817 	ldw	r4,32(sp)
  80cc74:	a0a9c83a 	sub	r20,r20,r2
  80cc78:	b0adc83a 	sub	r22,r22,r2
  80cc7c:	2089c83a 	sub	r4,r4,r2
  80cc80:	d9000815 	stw	r4,32(sp)
  80cc84:	d9800a17 	ldw	r6,40(sp)
  80cc88:	0181810e 	bge	zero,r6,80d290 <_dtoa_r+0x1018>
  80cc8c:	d9c00b17 	ldw	r7,44(sp)
  80cc90:	3800b326 	beq	r7,zero,80cf60 <_dtoa_r+0xce8>
  80cc94:	a800b226 	beq	r21,zero,80cf60 <_dtoa_r+0xce8>
  80cc98:	880b883a 	mov	r5,r17
  80cc9c:	a80d883a 	mov	r6,r21
  80cca0:	e009883a 	mov	r4,fp
  80cca4:	080f93c0 	call	80f93c <__pow5mult>
  80cca8:	d9800917 	ldw	r6,36(sp)
  80ccac:	100b883a 	mov	r5,r2
  80ccb0:	e009883a 	mov	r4,fp
  80ccb4:	1023883a 	mov	r17,r2
  80ccb8:	080f7440 	call	80f744 <__multiply>
  80ccbc:	1021883a 	mov	r16,r2
  80ccc0:	d8800a17 	ldw	r2,40(sp)
  80ccc4:	d9400917 	ldw	r5,36(sp)
  80ccc8:	e009883a 	mov	r4,fp
  80cccc:	1545c83a 	sub	r2,r2,r21
  80ccd0:	d8800a15 	stw	r2,40(sp)
  80ccd4:	080f3a40 	call	80f3a4 <_Bfree>
  80ccd8:	d8c00a17 	ldw	r3,40(sp)
  80ccdc:	18009f1e 	bne	r3,zero,80cf5c <_dtoa_r+0xce4>
  80cce0:	05c00044 	movi	r23,1
  80cce4:	e009883a 	mov	r4,fp
  80cce8:	b80b883a 	mov	r5,r23
  80ccec:	080f7080 	call	80f708 <__i2b>
  80ccf0:	d9000d17 	ldw	r4,52(sp)
  80ccf4:	102b883a 	mov	r21,r2
  80ccf8:	2000ce26 	beq	r4,zero,80d034 <_dtoa_r+0xdbc>
  80ccfc:	200d883a 	mov	r6,r4
  80cd00:	100b883a 	mov	r5,r2
  80cd04:	e009883a 	mov	r4,fp
  80cd08:	080f93c0 	call	80f93c <__pow5mult>
  80cd0c:	d9800317 	ldw	r6,12(sp)
  80cd10:	102b883a 	mov	r21,r2
  80cd14:	b981810e 	bge	r23,r6,80d31c <_dtoa_r+0x10a4>
  80cd18:	0027883a 	mov	r19,zero
  80cd1c:	a8800417 	ldw	r2,16(r21)
  80cd20:	05c00804 	movi	r23,32
  80cd24:	10800104 	addi	r2,r2,4
  80cd28:	1085883a 	add	r2,r2,r2
  80cd2c:	1085883a 	add	r2,r2,r2
  80cd30:	a885883a 	add	r2,r21,r2
  80cd34:	11000017 	ldw	r4,0(r2)
  80cd38:	080f5f00 	call	80f5f0 <__hi0bits>
  80cd3c:	b885c83a 	sub	r2,r23,r2
  80cd40:	1585883a 	add	r2,r2,r22
  80cd44:	108007cc 	andi	r2,r2,31
  80cd48:	1000b326 	beq	r2,zero,80d018 <_dtoa_r+0xda0>
  80cd4c:	00c00804 	movi	r3,32
  80cd50:	1887c83a 	sub	r3,r3,r2
  80cd54:	01000104 	movi	r4,4
  80cd58:	20c2cd0e 	bge	r4,r3,80d890 <_dtoa_r+0x1618>
  80cd5c:	00c00704 	movi	r3,28
  80cd60:	1885c83a 	sub	r2,r3,r2
  80cd64:	d8c00817 	ldw	r3,32(sp)
  80cd68:	a0a9883a 	add	r20,r20,r2
  80cd6c:	b0ad883a 	add	r22,r22,r2
  80cd70:	1887883a 	add	r3,r3,r2
  80cd74:	d8c00815 	stw	r3,32(sp)
  80cd78:	d9800817 	ldw	r6,32(sp)
  80cd7c:	0180040e 	bge	zero,r6,80cd90 <_dtoa_r+0xb18>
  80cd80:	800b883a 	mov	r5,r16
  80cd84:	e009883a 	mov	r4,fp
  80cd88:	080fa7c0 	call	80fa7c <__lshift>
  80cd8c:	1021883a 	mov	r16,r2
  80cd90:	0580050e 	bge	zero,r22,80cda8 <_dtoa_r+0xb30>
  80cd94:	a80b883a 	mov	r5,r21
  80cd98:	b00d883a 	mov	r6,r22
  80cd9c:	e009883a 	mov	r4,fp
  80cda0:	080fa7c0 	call	80fa7c <__lshift>
  80cda4:	102b883a 	mov	r21,r2
  80cda8:	d9c00e17 	ldw	r7,56(sp)
  80cdac:	3801211e 	bne	r7,zero,80d234 <_dtoa_r+0xfbc>
  80cdb0:	d9800617 	ldw	r6,24(sp)
  80cdb4:	0181380e 	bge	zero,r6,80d298 <_dtoa_r+0x1020>
  80cdb8:	d8c00b17 	ldw	r3,44(sp)
  80cdbc:	1800ab1e 	bne	r3,zero,80d06c <_dtoa_r+0xdf4>
  80cdc0:	dc800717 	ldw	r18,28(sp)
  80cdc4:	dcc00617 	ldw	r19,24(sp)
  80cdc8:	9029883a 	mov	r20,r18
  80cdcc:	00000206 	br	80cdd8 <_dtoa_r+0xb60>
  80cdd0:	080f3cc0 	call	80f3cc <__multadd>
  80cdd4:	1021883a 	mov	r16,r2
  80cdd8:	a80b883a 	mov	r5,r21
  80cddc:	8009883a 	mov	r4,r16
  80cde0:	080c0780 	call	80c078 <quorem>
  80cde4:	10800c04 	addi	r2,r2,48
  80cde8:	90800005 	stb	r2,0(r18)
  80cdec:	94800044 	addi	r18,r18,1
  80cdf0:	9507c83a 	sub	r3,r18,r20
  80cdf4:	000f883a 	mov	r7,zero
  80cdf8:	01800284 	movi	r6,10
  80cdfc:	800b883a 	mov	r5,r16
  80ce00:	e009883a 	mov	r4,fp
  80ce04:	1cfff216 	blt	r3,r19,80cdd0 <__alt_mem_onchip_mem+0xff804dd0>
  80ce08:	1011883a 	mov	r8,r2
  80ce0c:	d8800617 	ldw	r2,24(sp)
  80ce10:	0082370e 	bge	zero,r2,80d6f0 <_dtoa_r+0x1478>
  80ce14:	d9000717 	ldw	r4,28(sp)
  80ce18:	0025883a 	mov	r18,zero
  80ce1c:	20af883a 	add	r23,r4,r2
  80ce20:	01800044 	movi	r6,1
  80ce24:	800b883a 	mov	r5,r16
  80ce28:	e009883a 	mov	r4,fp
  80ce2c:	da001715 	stw	r8,92(sp)
  80ce30:	080fa7c0 	call	80fa7c <__lshift>
  80ce34:	a80b883a 	mov	r5,r21
  80ce38:	1009883a 	mov	r4,r2
  80ce3c:	d8800915 	stw	r2,36(sp)
  80ce40:	080fbc40 	call	80fbc4 <__mcmp>
  80ce44:	da001717 	ldw	r8,92(sp)
  80ce48:	0081800e 	bge	zero,r2,80d44c <_dtoa_r+0x11d4>
  80ce4c:	b93fffc3 	ldbu	r4,-1(r23)
  80ce50:	b8bfffc4 	addi	r2,r23,-1
  80ce54:	1007883a 	mov	r3,r2
  80ce58:	01800e44 	movi	r6,57
  80ce5c:	d9c00717 	ldw	r7,28(sp)
  80ce60:	00000506 	br	80ce78 <_dtoa_r+0xc00>
  80ce64:	18ffffc4 	addi	r3,r3,-1
  80ce68:	11c12326 	beq	r2,r7,80d2f8 <_dtoa_r+0x1080>
  80ce6c:	19000003 	ldbu	r4,0(r3)
  80ce70:	102f883a 	mov	r23,r2
  80ce74:	10bfffc4 	addi	r2,r2,-1
  80ce78:	21403fcc 	andi	r5,r4,255
  80ce7c:	2940201c 	xori	r5,r5,128
  80ce80:	297fe004 	addi	r5,r5,-128
  80ce84:	29bff726 	beq	r5,r6,80ce64 <__alt_mem_onchip_mem+0xff804e64>
  80ce88:	21000044 	addi	r4,r4,1
  80ce8c:	11000005 	stb	r4,0(r2)
  80ce90:	a80b883a 	mov	r5,r21
  80ce94:	e009883a 	mov	r4,fp
  80ce98:	080f3a40 	call	80f3a4 <_Bfree>
  80ce9c:	883ea026 	beq	r17,zero,80c920 <__alt_mem_onchip_mem+0xff804920>
  80cea0:	90000426 	beq	r18,zero,80ceb4 <_dtoa_r+0xc3c>
  80cea4:	94400326 	beq	r18,r17,80ceb4 <_dtoa_r+0xc3c>
  80cea8:	900b883a 	mov	r5,r18
  80ceac:	e009883a 	mov	r4,fp
  80ceb0:	080f3a40 	call	80f3a4 <_Bfree>
  80ceb4:	880b883a 	mov	r5,r17
  80ceb8:	e009883a 	mov	r4,fp
  80cebc:	080f3a40 	call	80f3a4 <_Bfree>
  80cec0:	003e9706 	br	80c920 <__alt_mem_onchip_mem+0xff804920>
  80cec4:	01800044 	movi	r6,1
  80cec8:	d9800e15 	stw	r6,56(sp)
  80cecc:	003d9606 	br	80c528 <__alt_mem_onchip_mem+0xff804528>
  80ced0:	d8800817 	ldw	r2,32(sp)
  80ced4:	d8c00517 	ldw	r3,20(sp)
  80ced8:	d8000d15 	stw	zero,52(sp)
  80cedc:	10c5c83a 	sub	r2,r2,r3
  80cee0:	00c9c83a 	sub	r4,zero,r3
  80cee4:	d8800815 	stw	r2,32(sp)
  80cee8:	d9000a15 	stw	r4,40(sp)
  80ceec:	003d9706 	br	80c54c <__alt_mem_onchip_mem+0xff80454c>
  80cef0:	05adc83a 	sub	r22,zero,r22
  80cef4:	dd800815 	stw	r22,32(sp)
  80cef8:	002d883a 	mov	r22,zero
  80cefc:	003d8e06 	br	80c538 <__alt_mem_onchip_mem+0xff804538>
  80cf00:	d9000517 	ldw	r4,20(sp)
  80cf04:	0809a000 	call	809a00 <__floatsidf>
  80cf08:	100d883a 	mov	r6,r2
  80cf0c:	180f883a 	mov	r7,r3
  80cf10:	a009883a 	mov	r4,r20
  80cf14:	880b883a 	mov	r5,r17
  80cf18:	08146b40 	call	8146b4 <__eqdf2>
  80cf1c:	103d7126 	beq	r2,zero,80c4e4 <__alt_mem_onchip_mem+0xff8044e4>
  80cf20:	d9c00517 	ldw	r7,20(sp)
  80cf24:	39ffffc4 	addi	r7,r7,-1
  80cf28:	d9c00515 	stw	r7,20(sp)
  80cf2c:	003d6d06 	br	80c4e4 <__alt_mem_onchip_mem+0xff8044e4>
  80cf30:	dd400a17 	ldw	r21,40(sp)
  80cf34:	dd000817 	ldw	r20,32(sp)
  80cf38:	0023883a 	mov	r17,zero
  80cf3c:	003f4806 	br	80cc60 <__alt_mem_onchip_mem+0xff804c60>
  80cf40:	10e3c83a 	sub	r17,r2,r3
  80cf44:	9448983a 	sll	r4,r18,r17
  80cf48:	003d3206 	br	80c414 <__alt_mem_onchip_mem+0xff804414>
  80cf4c:	d8000e15 	stw	zero,56(sp)
  80cf50:	003d7506 	br	80c528 <__alt_mem_onchip_mem+0xff804528>
  80cf54:	b005883a 	mov	r2,r22
  80cf58:	003f4506 	br	80cc70 <__alt_mem_onchip_mem+0xff804c70>
  80cf5c:	dc000915 	stw	r16,36(sp)
  80cf60:	d9800a17 	ldw	r6,40(sp)
  80cf64:	d9400917 	ldw	r5,36(sp)
  80cf68:	e009883a 	mov	r4,fp
  80cf6c:	080f93c0 	call	80f93c <__pow5mult>
  80cf70:	1021883a 	mov	r16,r2
  80cf74:	003f5a06 	br	80cce0 <__alt_mem_onchip_mem+0xff804ce0>
  80cf78:	01c00044 	movi	r7,1
  80cf7c:	d9c00b15 	stw	r7,44(sp)
  80cf80:	d8802217 	ldw	r2,136(sp)
  80cf84:	0081280e 	bge	zero,r2,80d428 <_dtoa_r+0x11b0>
  80cf88:	100d883a 	mov	r6,r2
  80cf8c:	1021883a 	mov	r16,r2
  80cf90:	d8800c15 	stw	r2,48(sp)
  80cf94:	d8800615 	stw	r2,24(sp)
  80cf98:	003d8806 	br	80c5bc <__alt_mem_onchip_mem+0xff8045bc>
  80cf9c:	d8800617 	ldw	r2,24(sp)
  80cfa0:	00be9b16 	blt	zero,r2,80ca10 <__alt_mem_onchip_mem+0xff804a10>
  80cfa4:	10010f1e 	bne	r2,zero,80d3e4 <_dtoa_r+0x116c>
  80cfa8:	880b883a 	mov	r5,r17
  80cfac:	000d883a 	mov	r6,zero
  80cfb0:	01d00534 	movhi	r7,16404
  80cfb4:	8009883a 	mov	r4,r16
  80cfb8:	08089ec0 	call	8089ec <__muldf3>
  80cfbc:	900d883a 	mov	r6,r18
  80cfc0:	980f883a 	mov	r7,r19
  80cfc4:	1009883a 	mov	r4,r2
  80cfc8:	180b883a 	mov	r5,r3
  80cfcc:	080881c0 	call	80881c <__gedf2>
  80cfd0:	002b883a 	mov	r21,zero
  80cfd4:	0023883a 	mov	r17,zero
  80cfd8:	1000bf16 	blt	r2,zero,80d2d8 <_dtoa_r+0x1060>
  80cfdc:	d9802217 	ldw	r6,136(sp)
  80cfe0:	ddc00717 	ldw	r23,28(sp)
  80cfe4:	018c303a 	nor	r6,zero,r6
  80cfe8:	d9800515 	stw	r6,20(sp)
  80cfec:	a80b883a 	mov	r5,r21
  80cff0:	e009883a 	mov	r4,fp
  80cff4:	080f3a40 	call	80f3a4 <_Bfree>
  80cff8:	883e4926 	beq	r17,zero,80c920 <__alt_mem_onchip_mem+0xff804920>
  80cffc:	003fad06 	br	80ceb4 <__alt_mem_onchip_mem+0xff804eb4>
  80d000:	d9c01117 	ldw	r7,68(sp)
  80d004:	3801bc26 	beq	r7,zero,80d6f8 <_dtoa_r+0x1480>
  80d008:	10810cc4 	addi	r2,r2,1075
  80d00c:	dd400a17 	ldw	r21,40(sp)
  80d010:	dd000817 	ldw	r20,32(sp)
  80d014:	003f0a06 	br	80cc40 <__alt_mem_onchip_mem+0xff804c40>
  80d018:	00800704 	movi	r2,28
  80d01c:	d9000817 	ldw	r4,32(sp)
  80d020:	a0a9883a 	add	r20,r20,r2
  80d024:	b0ad883a 	add	r22,r22,r2
  80d028:	2089883a 	add	r4,r4,r2
  80d02c:	d9000815 	stw	r4,32(sp)
  80d030:	003f5106 	br	80cd78 <__alt_mem_onchip_mem+0xff804d78>
  80d034:	d8c00317 	ldw	r3,12(sp)
  80d038:	b8c1fc0e 	bge	r23,r3,80d82c <_dtoa_r+0x15b4>
  80d03c:	0027883a 	mov	r19,zero
  80d040:	b805883a 	mov	r2,r23
  80d044:	003f3e06 	br	80cd40 <__alt_mem_onchip_mem+0xff804d40>
  80d048:	880b883a 	mov	r5,r17
  80d04c:	e009883a 	mov	r4,fp
  80d050:	000f883a 	mov	r7,zero
  80d054:	01800284 	movi	r6,10
  80d058:	080f3cc0 	call	80f3cc <__multadd>
  80d05c:	d9000c17 	ldw	r4,48(sp)
  80d060:	1023883a 	mov	r17,r2
  80d064:	0102040e 	bge	zero,r4,80d878 <_dtoa_r+0x1600>
  80d068:	d9000615 	stw	r4,24(sp)
  80d06c:	0500050e 	bge	zero,r20,80d084 <_dtoa_r+0xe0c>
  80d070:	880b883a 	mov	r5,r17
  80d074:	a00d883a 	mov	r6,r20
  80d078:	e009883a 	mov	r4,fp
  80d07c:	080fa7c0 	call	80fa7c <__lshift>
  80d080:	1023883a 	mov	r17,r2
  80d084:	9801241e 	bne	r19,zero,80d518 <_dtoa_r+0x12a0>
  80d088:	8829883a 	mov	r20,r17
  80d08c:	d9000617 	ldw	r4,24(sp)
  80d090:	dcc00717 	ldw	r19,28(sp)
  80d094:	9480004c 	andi	r18,r18,1
  80d098:	20bfffc4 	addi	r2,r4,-1
  80d09c:	9885883a 	add	r2,r19,r2
  80d0a0:	d8800415 	stw	r2,16(sp)
  80d0a4:	dc800615 	stw	r18,24(sp)
  80d0a8:	a80b883a 	mov	r5,r21
  80d0ac:	8009883a 	mov	r4,r16
  80d0b0:	080c0780 	call	80c078 <quorem>
  80d0b4:	880b883a 	mov	r5,r17
  80d0b8:	8009883a 	mov	r4,r16
  80d0bc:	102f883a 	mov	r23,r2
  80d0c0:	080fbc40 	call	80fbc4 <__mcmp>
  80d0c4:	a80b883a 	mov	r5,r21
  80d0c8:	a00d883a 	mov	r6,r20
  80d0cc:	e009883a 	mov	r4,fp
  80d0d0:	102d883a 	mov	r22,r2
  80d0d4:	080fc240 	call	80fc24 <__mdiff>
  80d0d8:	1007883a 	mov	r3,r2
  80d0dc:	10800317 	ldw	r2,12(r2)
  80d0e0:	bc800c04 	addi	r18,r23,48
  80d0e4:	180b883a 	mov	r5,r3
  80d0e8:	10004e1e 	bne	r2,zero,80d224 <_dtoa_r+0xfac>
  80d0ec:	8009883a 	mov	r4,r16
  80d0f0:	d8c01615 	stw	r3,88(sp)
  80d0f4:	080fbc40 	call	80fbc4 <__mcmp>
  80d0f8:	d8c01617 	ldw	r3,88(sp)
  80d0fc:	e009883a 	mov	r4,fp
  80d100:	d8801615 	stw	r2,88(sp)
  80d104:	180b883a 	mov	r5,r3
  80d108:	080f3a40 	call	80f3a4 <_Bfree>
  80d10c:	d8801617 	ldw	r2,88(sp)
  80d110:	1000041e 	bne	r2,zero,80d124 <_dtoa_r+0xeac>
  80d114:	d9800317 	ldw	r6,12(sp)
  80d118:	3000021e 	bne	r6,zero,80d124 <_dtoa_r+0xeac>
  80d11c:	d8c00617 	ldw	r3,24(sp)
  80d120:	18003726 	beq	r3,zero,80d200 <_dtoa_r+0xf88>
  80d124:	b0002016 	blt	r22,zero,80d1a8 <_dtoa_r+0xf30>
  80d128:	b000041e 	bne	r22,zero,80d13c <_dtoa_r+0xec4>
  80d12c:	d9000317 	ldw	r4,12(sp)
  80d130:	2000021e 	bne	r4,zero,80d13c <_dtoa_r+0xec4>
  80d134:	d8c00617 	ldw	r3,24(sp)
  80d138:	18001b26 	beq	r3,zero,80d1a8 <_dtoa_r+0xf30>
  80d13c:	00810716 	blt	zero,r2,80d55c <_dtoa_r+0x12e4>
  80d140:	d8c00417 	ldw	r3,16(sp)
  80d144:	9d800044 	addi	r22,r19,1
  80d148:	9c800005 	stb	r18,0(r19)
  80d14c:	b02f883a 	mov	r23,r22
  80d150:	98c10626 	beq	r19,r3,80d56c <_dtoa_r+0x12f4>
  80d154:	800b883a 	mov	r5,r16
  80d158:	000f883a 	mov	r7,zero
  80d15c:	01800284 	movi	r6,10
  80d160:	e009883a 	mov	r4,fp
  80d164:	080f3cc0 	call	80f3cc <__multadd>
  80d168:	1021883a 	mov	r16,r2
  80d16c:	000f883a 	mov	r7,zero
  80d170:	01800284 	movi	r6,10
  80d174:	880b883a 	mov	r5,r17
  80d178:	e009883a 	mov	r4,fp
  80d17c:	8d002526 	beq	r17,r20,80d214 <_dtoa_r+0xf9c>
  80d180:	080f3cc0 	call	80f3cc <__multadd>
  80d184:	a00b883a 	mov	r5,r20
  80d188:	000f883a 	mov	r7,zero
  80d18c:	01800284 	movi	r6,10
  80d190:	e009883a 	mov	r4,fp
  80d194:	1023883a 	mov	r17,r2
  80d198:	080f3cc0 	call	80f3cc <__multadd>
  80d19c:	1029883a 	mov	r20,r2
  80d1a0:	b027883a 	mov	r19,r22
  80d1a4:	003fc006 	br	80d0a8 <__alt_mem_onchip_mem+0xff8050a8>
  80d1a8:	9011883a 	mov	r8,r18
  80d1ac:	00800e0e 	bge	zero,r2,80d1e8 <_dtoa_r+0xf70>
  80d1b0:	800b883a 	mov	r5,r16
  80d1b4:	01800044 	movi	r6,1
  80d1b8:	e009883a 	mov	r4,fp
  80d1bc:	da001715 	stw	r8,92(sp)
  80d1c0:	080fa7c0 	call	80fa7c <__lshift>
  80d1c4:	a80b883a 	mov	r5,r21
  80d1c8:	1009883a 	mov	r4,r2
  80d1cc:	1021883a 	mov	r16,r2
  80d1d0:	080fbc40 	call	80fbc4 <__mcmp>
  80d1d4:	da001717 	ldw	r8,92(sp)
  80d1d8:	0081960e 	bge	zero,r2,80d834 <_dtoa_r+0x15bc>
  80d1dc:	00800e44 	movi	r2,57
  80d1e0:	40817026 	beq	r8,r2,80d7a4 <_dtoa_r+0x152c>
  80d1e4:	ba000c44 	addi	r8,r23,49
  80d1e8:	8825883a 	mov	r18,r17
  80d1ec:	9dc00044 	addi	r23,r19,1
  80d1f0:	9a000005 	stb	r8,0(r19)
  80d1f4:	a023883a 	mov	r17,r20
  80d1f8:	dc000915 	stw	r16,36(sp)
  80d1fc:	003f2406 	br	80ce90 <__alt_mem_onchip_mem+0xff804e90>
  80d200:	00800e44 	movi	r2,57
  80d204:	9011883a 	mov	r8,r18
  80d208:	90816626 	beq	r18,r2,80d7a4 <_dtoa_r+0x152c>
  80d20c:	05bff516 	blt	zero,r22,80d1e4 <__alt_mem_onchip_mem+0xff8051e4>
  80d210:	003ff506 	br	80d1e8 <__alt_mem_onchip_mem+0xff8051e8>
  80d214:	080f3cc0 	call	80f3cc <__multadd>
  80d218:	1023883a 	mov	r17,r2
  80d21c:	1029883a 	mov	r20,r2
  80d220:	003fdf06 	br	80d1a0 <__alt_mem_onchip_mem+0xff8051a0>
  80d224:	e009883a 	mov	r4,fp
  80d228:	080f3a40 	call	80f3a4 <_Bfree>
  80d22c:	00800044 	movi	r2,1
  80d230:	003fbc06 	br	80d124 <__alt_mem_onchip_mem+0xff805124>
  80d234:	a80b883a 	mov	r5,r21
  80d238:	8009883a 	mov	r4,r16
  80d23c:	080fbc40 	call	80fbc4 <__mcmp>
  80d240:	103edb0e 	bge	r2,zero,80cdb0 <__alt_mem_onchip_mem+0xff804db0>
  80d244:	800b883a 	mov	r5,r16
  80d248:	000f883a 	mov	r7,zero
  80d24c:	01800284 	movi	r6,10
  80d250:	e009883a 	mov	r4,fp
  80d254:	080f3cc0 	call	80f3cc <__multadd>
  80d258:	1021883a 	mov	r16,r2
  80d25c:	d8800517 	ldw	r2,20(sp)
  80d260:	d8c00b17 	ldw	r3,44(sp)
  80d264:	10bfffc4 	addi	r2,r2,-1
  80d268:	d8800515 	stw	r2,20(sp)
  80d26c:	183f761e 	bne	r3,zero,80d048 <__alt_mem_onchip_mem+0xff805048>
  80d270:	d9000c17 	ldw	r4,48(sp)
  80d274:	0101730e 	bge	zero,r4,80d844 <_dtoa_r+0x15cc>
  80d278:	d9000615 	stw	r4,24(sp)
  80d27c:	003ed006 	br	80cdc0 <__alt_mem_onchip_mem+0xff804dc0>
  80d280:	00800084 	movi	r2,2
  80d284:	3081861e 	bne	r6,r2,80d8a0 <_dtoa_r+0x1628>
  80d288:	d8000b15 	stw	zero,44(sp)
  80d28c:	003f3c06 	br	80cf80 <__alt_mem_onchip_mem+0xff804f80>
  80d290:	dc000917 	ldw	r16,36(sp)
  80d294:	003e9206 	br	80cce0 <__alt_mem_onchip_mem+0xff804ce0>
  80d298:	d9c00317 	ldw	r7,12(sp)
  80d29c:	00800084 	movi	r2,2
  80d2a0:	11fec50e 	bge	r2,r7,80cdb8 <__alt_mem_onchip_mem+0xff804db8>
  80d2a4:	d9000617 	ldw	r4,24(sp)
  80d2a8:	20013c1e 	bne	r4,zero,80d79c <_dtoa_r+0x1524>
  80d2ac:	a80b883a 	mov	r5,r21
  80d2b0:	000f883a 	mov	r7,zero
  80d2b4:	01800144 	movi	r6,5
  80d2b8:	e009883a 	mov	r4,fp
  80d2bc:	080f3cc0 	call	80f3cc <__multadd>
  80d2c0:	100b883a 	mov	r5,r2
  80d2c4:	8009883a 	mov	r4,r16
  80d2c8:	102b883a 	mov	r21,r2
  80d2cc:	080fbc40 	call	80fbc4 <__mcmp>
  80d2d0:	dc000915 	stw	r16,36(sp)
  80d2d4:	00bf410e 	bge	zero,r2,80cfdc <__alt_mem_onchip_mem+0xff804fdc>
  80d2d8:	d9c00717 	ldw	r7,28(sp)
  80d2dc:	00800c44 	movi	r2,49
  80d2e0:	38800005 	stb	r2,0(r7)
  80d2e4:	d8800517 	ldw	r2,20(sp)
  80d2e8:	3dc00044 	addi	r23,r7,1
  80d2ec:	10800044 	addi	r2,r2,1
  80d2f0:	d8800515 	stw	r2,20(sp)
  80d2f4:	003f3d06 	br	80cfec <__alt_mem_onchip_mem+0xff804fec>
  80d2f8:	d9800517 	ldw	r6,20(sp)
  80d2fc:	d9c00717 	ldw	r7,28(sp)
  80d300:	00800c44 	movi	r2,49
  80d304:	31800044 	addi	r6,r6,1
  80d308:	d9800515 	stw	r6,20(sp)
  80d30c:	38800005 	stb	r2,0(r7)
  80d310:	003edf06 	br	80ce90 <__alt_mem_onchip_mem+0xff804e90>
  80d314:	d8000b15 	stw	zero,44(sp)
  80d318:	003c9f06 	br	80c598 <__alt_mem_onchip_mem+0xff804598>
  80d31c:	903e7e1e 	bne	r18,zero,80cd18 <__alt_mem_onchip_mem+0xff804d18>
  80d320:	00800434 	movhi	r2,16
  80d324:	10bfffc4 	addi	r2,r2,-1
  80d328:	9884703a 	and	r2,r19,r2
  80d32c:	1000ea1e 	bne	r2,zero,80d6d8 <_dtoa_r+0x1460>
  80d330:	9cdffc2c 	andhi	r19,r19,32752
  80d334:	9800e826 	beq	r19,zero,80d6d8 <_dtoa_r+0x1460>
  80d338:	d9c00817 	ldw	r7,32(sp)
  80d33c:	b5800044 	addi	r22,r22,1
  80d340:	04c00044 	movi	r19,1
  80d344:	39c00044 	addi	r7,r7,1
  80d348:	d9c00815 	stw	r7,32(sp)
  80d34c:	d8800d17 	ldw	r2,52(sp)
  80d350:	103e721e 	bne	r2,zero,80cd1c <__alt_mem_onchip_mem+0xff804d1c>
  80d354:	00800044 	movi	r2,1
  80d358:	003e7906 	br	80cd40 <__alt_mem_onchip_mem+0xff804d40>
  80d35c:	8009883a 	mov	r4,r16
  80d360:	0809a000 	call	809a00 <__floatsidf>
  80d364:	d9800f17 	ldw	r6,60(sp)
  80d368:	d9c01017 	ldw	r7,64(sp)
  80d36c:	1009883a 	mov	r4,r2
  80d370:	180b883a 	mov	r5,r3
  80d374:	08089ec0 	call	8089ec <__muldf3>
  80d378:	000d883a 	mov	r6,zero
  80d37c:	01d00734 	movhi	r7,16412
  80d380:	1009883a 	mov	r4,r2
  80d384:	180b883a 	mov	r5,r3
  80d388:	0807f700 	call	807f70 <__adddf3>
  80d38c:	047f3034 	movhi	r17,64704
  80d390:	1021883a 	mov	r16,r2
  80d394:	1c63883a 	add	r17,r3,r17
  80d398:	d9000f17 	ldw	r4,60(sp)
  80d39c:	d9401017 	ldw	r5,64(sp)
  80d3a0:	000d883a 	mov	r6,zero
  80d3a4:	01d00534 	movhi	r7,16404
  80d3a8:	08091040 	call	809104 <__subdf3>
  80d3ac:	800d883a 	mov	r6,r16
  80d3b0:	880f883a 	mov	r7,r17
  80d3b4:	1009883a 	mov	r4,r2
  80d3b8:	180b883a 	mov	r5,r3
  80d3bc:	102b883a 	mov	r21,r2
  80d3c0:	1829883a 	mov	r20,r3
  80d3c4:	080881c0 	call	80881c <__gedf2>
  80d3c8:	00806c16 	blt	zero,r2,80d57c <_dtoa_r+0x1304>
  80d3cc:	89e0003c 	xorhi	r7,r17,32768
  80d3d0:	800d883a 	mov	r6,r16
  80d3d4:	a809883a 	mov	r4,r21
  80d3d8:	a00b883a 	mov	r5,r20
  80d3dc:	08088f80 	call	8088f8 <__ledf2>
  80d3e0:	103d7e0e 	bge	r2,zero,80c9dc <__alt_mem_onchip_mem+0xff8049dc>
  80d3e4:	002b883a 	mov	r21,zero
  80d3e8:	0023883a 	mov	r17,zero
  80d3ec:	003efb06 	br	80cfdc <__alt_mem_onchip_mem+0xff804fdc>
  80d3f0:	d8800717 	ldw	r2,28(sp)
  80d3f4:	003bd006 	br	80c338 <__alt_mem_onchip_mem+0xff804338>
  80d3f8:	d9000a17 	ldw	r4,40(sp)
  80d3fc:	d9800d17 	ldw	r6,52(sp)
  80d400:	dd400a15 	stw	r21,40(sp)
  80d404:	a905c83a 	sub	r2,r21,r4
  80d408:	308d883a 	add	r6,r6,r2
  80d40c:	d9800d15 	stw	r6,52(sp)
  80d410:	002b883a 	mov	r21,zero
  80d414:	003e0606 	br	80cc30 <__alt_mem_onchip_mem+0xff804c30>
  80d418:	9023883a 	mov	r17,r18
  80d41c:	9829883a 	mov	r20,r19
  80d420:	04000084 	movi	r16,2
  80d424:	003c9206 	br	80c670 <__alt_mem_onchip_mem+0xff804670>
  80d428:	04000044 	movi	r16,1
  80d42c:	dc000c15 	stw	r16,48(sp)
  80d430:	dc000615 	stw	r16,24(sp)
  80d434:	dc002215 	stw	r16,136(sp)
  80d438:	e0001115 	stw	zero,68(fp)
  80d43c:	000b883a 	mov	r5,zero
  80d440:	003c6906 	br	80c5e8 <__alt_mem_onchip_mem+0xff8045e8>
  80d444:	3021883a 	mov	r16,r6
  80d448:	003ffb06 	br	80d438 <__alt_mem_onchip_mem+0xff805438>
  80d44c:	1000021e 	bne	r2,zero,80d458 <_dtoa_r+0x11e0>
  80d450:	4200004c 	andi	r8,r8,1
  80d454:	403e7d1e 	bne	r8,zero,80ce4c <__alt_mem_onchip_mem+0xff804e4c>
  80d458:	01000c04 	movi	r4,48
  80d45c:	00000106 	br	80d464 <_dtoa_r+0x11ec>
  80d460:	102f883a 	mov	r23,r2
  80d464:	b8bfffc4 	addi	r2,r23,-1
  80d468:	10c00007 	ldb	r3,0(r2)
  80d46c:	193ffc26 	beq	r3,r4,80d460 <__alt_mem_onchip_mem+0xff805460>
  80d470:	003e8706 	br	80ce90 <__alt_mem_onchip_mem+0xff804e90>
  80d474:	d8800517 	ldw	r2,20(sp)
  80d478:	00a3c83a 	sub	r17,zero,r2
  80d47c:	8800a426 	beq	r17,zero,80d710 <_dtoa_r+0x1498>
  80d480:	888003cc 	andi	r2,r17,15
  80d484:	100490fa 	slli	r2,r2,3
  80d488:	00c020b4 	movhi	r3,130
  80d48c:	18e2c304 	addi	r3,r3,-29940
  80d490:	1885883a 	add	r2,r3,r2
  80d494:	11800017 	ldw	r6,0(r2)
  80d498:	11c00117 	ldw	r7,4(r2)
  80d49c:	9009883a 	mov	r4,r18
  80d4a0:	980b883a 	mov	r5,r19
  80d4a4:	8823d13a 	srai	r17,r17,4
  80d4a8:	08089ec0 	call	8089ec <__muldf3>
  80d4ac:	d8800f15 	stw	r2,60(sp)
  80d4b0:	d8c01015 	stw	r3,64(sp)
  80d4b4:	8800e826 	beq	r17,zero,80d858 <_dtoa_r+0x15e0>
  80d4b8:	050020b4 	movhi	r20,130
  80d4bc:	a522b904 	addi	r20,r20,-29980
  80d4c0:	04000084 	movi	r16,2
  80d4c4:	8980004c 	andi	r6,r17,1
  80d4c8:	1009883a 	mov	r4,r2
  80d4cc:	8823d07a 	srai	r17,r17,1
  80d4d0:	180b883a 	mov	r5,r3
  80d4d4:	30000426 	beq	r6,zero,80d4e8 <_dtoa_r+0x1270>
  80d4d8:	a1800017 	ldw	r6,0(r20)
  80d4dc:	a1c00117 	ldw	r7,4(r20)
  80d4e0:	84000044 	addi	r16,r16,1
  80d4e4:	08089ec0 	call	8089ec <__muldf3>
  80d4e8:	a5000204 	addi	r20,r20,8
  80d4ec:	883ff51e 	bne	r17,zero,80d4c4 <__alt_mem_onchip_mem+0xff8054c4>
  80d4f0:	d8800f15 	stw	r2,60(sp)
  80d4f4:	d8c01015 	stw	r3,64(sp)
  80d4f8:	003c7606 	br	80c6d4 <__alt_mem_onchip_mem+0xff8046d4>
  80d4fc:	00c00c04 	movi	r3,48
  80d500:	10c00005 	stb	r3,0(r2)
  80d504:	d8c00517 	ldw	r3,20(sp)
  80d508:	bd3fffc3 	ldbu	r20,-1(r23)
  80d50c:	18c00044 	addi	r3,r3,1
  80d510:	d8c00515 	stw	r3,20(sp)
  80d514:	003db906 	br	80cbfc <__alt_mem_onchip_mem+0xff804bfc>
  80d518:	89400117 	ldw	r5,4(r17)
  80d51c:	e009883a 	mov	r4,fp
  80d520:	080f2fc0 	call	80f2fc <_Balloc>
  80d524:	89800417 	ldw	r6,16(r17)
  80d528:	89400304 	addi	r5,r17,12
  80d52c:	11000304 	addi	r4,r2,12
  80d530:	31800084 	addi	r6,r6,2
  80d534:	318d883a 	add	r6,r6,r6
  80d538:	318d883a 	add	r6,r6,r6
  80d53c:	1027883a 	mov	r19,r2
  80d540:	080f08c0 	call	80f08c <memcpy>
  80d544:	01800044 	movi	r6,1
  80d548:	980b883a 	mov	r5,r19
  80d54c:	e009883a 	mov	r4,fp
  80d550:	080fa7c0 	call	80fa7c <__lshift>
  80d554:	1029883a 	mov	r20,r2
  80d558:	003ecc06 	br	80d08c <__alt_mem_onchip_mem+0xff80508c>
  80d55c:	00800e44 	movi	r2,57
  80d560:	90809026 	beq	r18,r2,80d7a4 <_dtoa_r+0x152c>
  80d564:	92000044 	addi	r8,r18,1
  80d568:	003f1f06 	br	80d1e8 <__alt_mem_onchip_mem+0xff8051e8>
  80d56c:	9011883a 	mov	r8,r18
  80d570:	8825883a 	mov	r18,r17
  80d574:	a023883a 	mov	r17,r20
  80d578:	003e2906 	br	80ce20 <__alt_mem_onchip_mem+0xff804e20>
  80d57c:	002b883a 	mov	r21,zero
  80d580:	0023883a 	mov	r17,zero
  80d584:	003f5406 	br	80d2d8 <__alt_mem_onchip_mem+0xff8052d8>
  80d588:	61bfffc4 	addi	r6,r12,-1
  80d58c:	300490fa 	slli	r2,r6,3
  80d590:	00c020b4 	movhi	r3,130
  80d594:	18e2c304 	addi	r3,r3,-29940
  80d598:	1885883a 	add	r2,r3,r2
  80d59c:	11000017 	ldw	r4,0(r2)
  80d5a0:	11400117 	ldw	r5,4(r2)
  80d5a4:	d8800717 	ldw	r2,28(sp)
  80d5a8:	880f883a 	mov	r7,r17
  80d5ac:	d9801215 	stw	r6,72(sp)
  80d5b0:	800d883a 	mov	r6,r16
  80d5b4:	db001615 	stw	r12,88(sp)
  80d5b8:	15c00044 	addi	r23,r2,1
  80d5bc:	08089ec0 	call	8089ec <__muldf3>
  80d5c0:	d9401017 	ldw	r5,64(sp)
  80d5c4:	d9000f17 	ldw	r4,60(sp)
  80d5c8:	d8c01515 	stw	r3,84(sp)
  80d5cc:	d8801415 	stw	r2,80(sp)
  80d5d0:	081473c0 	call	81473c <__fixdfsi>
  80d5d4:	1009883a 	mov	r4,r2
  80d5d8:	1021883a 	mov	r16,r2
  80d5dc:	0809a000 	call	809a00 <__floatsidf>
  80d5e0:	d9000f17 	ldw	r4,60(sp)
  80d5e4:	d9401017 	ldw	r5,64(sp)
  80d5e8:	100d883a 	mov	r6,r2
  80d5ec:	180f883a 	mov	r7,r3
  80d5f0:	08091040 	call	809104 <__subdf3>
  80d5f4:	1829883a 	mov	r20,r3
  80d5f8:	d8c00717 	ldw	r3,28(sp)
  80d5fc:	84000c04 	addi	r16,r16,48
  80d600:	1023883a 	mov	r17,r2
  80d604:	1c000005 	stb	r16,0(r3)
  80d608:	db001617 	ldw	r12,88(sp)
  80d60c:	00800044 	movi	r2,1
  80d610:	60802226 	beq	r12,r2,80d69c <_dtoa_r+0x1424>
  80d614:	d9c00717 	ldw	r7,28(sp)
  80d618:	8805883a 	mov	r2,r17
  80d61c:	b82b883a 	mov	r21,r23
  80d620:	3b19883a 	add	r12,r7,r12
  80d624:	6023883a 	mov	r17,r12
  80d628:	a007883a 	mov	r3,r20
  80d62c:	dc800f15 	stw	r18,60(sp)
  80d630:	000d883a 	mov	r6,zero
  80d634:	01d00934 	movhi	r7,16420
  80d638:	1009883a 	mov	r4,r2
  80d63c:	180b883a 	mov	r5,r3
  80d640:	08089ec0 	call	8089ec <__muldf3>
  80d644:	180b883a 	mov	r5,r3
  80d648:	1009883a 	mov	r4,r2
  80d64c:	1829883a 	mov	r20,r3
  80d650:	1025883a 	mov	r18,r2
  80d654:	081473c0 	call	81473c <__fixdfsi>
  80d658:	1009883a 	mov	r4,r2
  80d65c:	1021883a 	mov	r16,r2
  80d660:	0809a000 	call	809a00 <__floatsidf>
  80d664:	100d883a 	mov	r6,r2
  80d668:	180f883a 	mov	r7,r3
  80d66c:	9009883a 	mov	r4,r18
  80d670:	a00b883a 	mov	r5,r20
  80d674:	84000c04 	addi	r16,r16,48
  80d678:	08091040 	call	809104 <__subdf3>
  80d67c:	ad400044 	addi	r21,r21,1
  80d680:	ac3fffc5 	stb	r16,-1(r21)
  80d684:	ac7fea1e 	bne	r21,r17,80d630 <__alt_mem_onchip_mem+0xff805630>
  80d688:	1023883a 	mov	r17,r2
  80d68c:	d8801217 	ldw	r2,72(sp)
  80d690:	dc800f17 	ldw	r18,60(sp)
  80d694:	1829883a 	mov	r20,r3
  80d698:	b8af883a 	add	r23,r23,r2
  80d69c:	d9001417 	ldw	r4,80(sp)
  80d6a0:	d9401517 	ldw	r5,84(sp)
  80d6a4:	000d883a 	mov	r6,zero
  80d6a8:	01cff834 	movhi	r7,16352
  80d6ac:	0807f700 	call	807f70 <__adddf3>
  80d6b0:	880d883a 	mov	r6,r17
  80d6b4:	a00f883a 	mov	r7,r20
  80d6b8:	1009883a 	mov	r4,r2
  80d6bc:	180b883a 	mov	r5,r3
  80d6c0:	08088f80 	call	8088f8 <__ledf2>
  80d6c4:	10003e0e 	bge	r2,zero,80d7c0 <_dtoa_r+0x1548>
  80d6c8:	d9001317 	ldw	r4,76(sp)
  80d6cc:	bd3fffc3 	ldbu	r20,-1(r23)
  80d6d0:	d9000515 	stw	r4,20(sp)
  80d6d4:	003d3b06 	br	80cbc4 <__alt_mem_onchip_mem+0xff804bc4>
  80d6d8:	0027883a 	mov	r19,zero
  80d6dc:	003f1b06 	br	80d34c <__alt_mem_onchip_mem+0xff80534c>
  80d6e0:	d8800817 	ldw	r2,32(sp)
  80d6e4:	11e9c83a 	sub	r20,r2,r7
  80d6e8:	0005883a 	mov	r2,zero
  80d6ec:	003d5406 	br	80cc40 <__alt_mem_onchip_mem+0xff804c40>
  80d6f0:	00800044 	movi	r2,1
  80d6f4:	003dc706 	br	80ce14 <__alt_mem_onchip_mem+0xff804e14>
  80d6f8:	d8c00217 	ldw	r3,8(sp)
  80d6fc:	00800d84 	movi	r2,54
  80d700:	dd400a17 	ldw	r21,40(sp)
  80d704:	10c5c83a 	sub	r2,r2,r3
  80d708:	dd000817 	ldw	r20,32(sp)
  80d70c:	003d4c06 	br	80cc40 <__alt_mem_onchip_mem+0xff804c40>
  80d710:	dc800f15 	stw	r18,60(sp)
  80d714:	dcc01015 	stw	r19,64(sp)
  80d718:	04000084 	movi	r16,2
  80d71c:	003bed06 	br	80c6d4 <__alt_mem_onchip_mem+0xff8046d4>
  80d720:	d9000617 	ldw	r4,24(sp)
  80d724:	203f0d26 	beq	r4,zero,80d35c <__alt_mem_onchip_mem+0xff80535c>
  80d728:	d9800c17 	ldw	r6,48(sp)
  80d72c:	01bcab0e 	bge	zero,r6,80c9dc <__alt_mem_onchip_mem+0xff8049dc>
  80d730:	d9401017 	ldw	r5,64(sp)
  80d734:	d9000f17 	ldw	r4,60(sp)
  80d738:	000d883a 	mov	r6,zero
  80d73c:	01d00934 	movhi	r7,16420
  80d740:	08089ec0 	call	8089ec <__muldf3>
  80d744:	81000044 	addi	r4,r16,1
  80d748:	d8800f15 	stw	r2,60(sp)
  80d74c:	d8c01015 	stw	r3,64(sp)
  80d750:	0809a000 	call	809a00 <__floatsidf>
  80d754:	d9800f17 	ldw	r6,60(sp)
  80d758:	d9c01017 	ldw	r7,64(sp)
  80d75c:	1009883a 	mov	r4,r2
  80d760:	180b883a 	mov	r5,r3
  80d764:	08089ec0 	call	8089ec <__muldf3>
  80d768:	01d00734 	movhi	r7,16412
  80d76c:	000d883a 	mov	r6,zero
  80d770:	1009883a 	mov	r4,r2
  80d774:	180b883a 	mov	r5,r3
  80d778:	0807f700 	call	807f70 <__adddf3>
  80d77c:	d9c00517 	ldw	r7,20(sp)
  80d780:	047f3034 	movhi	r17,64704
  80d784:	1021883a 	mov	r16,r2
  80d788:	39ffffc4 	addi	r7,r7,-1
  80d78c:	d9c01315 	stw	r7,76(sp)
  80d790:	1c63883a 	add	r17,r3,r17
  80d794:	db000c17 	ldw	r12,48(sp)
  80d798:	003bea06 	br	80c744 <__alt_mem_onchip_mem+0xff804744>
  80d79c:	dc000915 	stw	r16,36(sp)
  80d7a0:	003e0e06 	br	80cfdc <__alt_mem_onchip_mem+0xff804fdc>
  80d7a4:	01000e44 	movi	r4,57
  80d7a8:	8825883a 	mov	r18,r17
  80d7ac:	9dc00044 	addi	r23,r19,1
  80d7b0:	99000005 	stb	r4,0(r19)
  80d7b4:	a023883a 	mov	r17,r20
  80d7b8:	dc000915 	stw	r16,36(sp)
  80d7bc:	003da406 	br	80ce50 <__alt_mem_onchip_mem+0xff804e50>
  80d7c0:	d9801417 	ldw	r6,80(sp)
  80d7c4:	d9c01517 	ldw	r7,84(sp)
  80d7c8:	0009883a 	mov	r4,zero
  80d7cc:	014ff834 	movhi	r5,16352
  80d7d0:	08091040 	call	809104 <__subdf3>
  80d7d4:	880d883a 	mov	r6,r17
  80d7d8:	a00f883a 	mov	r7,r20
  80d7dc:	1009883a 	mov	r4,r2
  80d7e0:	180b883a 	mov	r5,r3
  80d7e4:	080881c0 	call	80881c <__gedf2>
  80d7e8:	00bc7c0e 	bge	zero,r2,80c9dc <__alt_mem_onchip_mem+0xff8049dc>
  80d7ec:	01000c04 	movi	r4,48
  80d7f0:	00000106 	br	80d7f8 <_dtoa_r+0x1580>
  80d7f4:	102f883a 	mov	r23,r2
  80d7f8:	b8bfffc4 	addi	r2,r23,-1
  80d7fc:	10c00007 	ldb	r3,0(r2)
  80d800:	193ffc26 	beq	r3,r4,80d7f4 <__alt_mem_onchip_mem+0xff8057f4>
  80d804:	d9801317 	ldw	r6,76(sp)
  80d808:	d9800515 	stw	r6,20(sp)
  80d80c:	003c4406 	br	80c920 <__alt_mem_onchip_mem+0xff804920>
  80d810:	d9801317 	ldw	r6,76(sp)
  80d814:	d9800515 	stw	r6,20(sp)
  80d818:	003cea06 	br	80cbc4 <__alt_mem_onchip_mem+0xff804bc4>
  80d81c:	dd800f17 	ldw	r22,60(sp)
  80d820:	dcc01017 	ldw	r19,64(sp)
  80d824:	dc801217 	ldw	r18,72(sp)
  80d828:	003c6c06 	br	80c9dc <__alt_mem_onchip_mem+0xff8049dc>
  80d82c:	903e031e 	bne	r18,zero,80d03c <__alt_mem_onchip_mem+0xff80503c>
  80d830:	003ebb06 	br	80d320 <__alt_mem_onchip_mem+0xff805320>
  80d834:	103e6c1e 	bne	r2,zero,80d1e8 <__alt_mem_onchip_mem+0xff8051e8>
  80d838:	4080004c 	andi	r2,r8,1
  80d83c:	103e6a26 	beq	r2,zero,80d1e8 <__alt_mem_onchip_mem+0xff8051e8>
  80d840:	003e6606 	br	80d1dc <__alt_mem_onchip_mem+0xff8051dc>
  80d844:	d8c00317 	ldw	r3,12(sp)
  80d848:	00800084 	movi	r2,2
  80d84c:	10c02916 	blt	r2,r3,80d8f4 <_dtoa_r+0x167c>
  80d850:	d9000c17 	ldw	r4,48(sp)
  80d854:	003e8806 	br	80d278 <__alt_mem_onchip_mem+0xff805278>
  80d858:	04000084 	movi	r16,2
  80d85c:	003b9d06 	br	80c6d4 <__alt_mem_onchip_mem+0xff8046d4>
  80d860:	d9001317 	ldw	r4,76(sp)
  80d864:	d9000515 	stw	r4,20(sp)
  80d868:	003cd606 	br	80cbc4 <__alt_mem_onchip_mem+0xff804bc4>
  80d86c:	d8801317 	ldw	r2,76(sp)
  80d870:	d8800515 	stw	r2,20(sp)
  80d874:	003c2a06 	br	80c920 <__alt_mem_onchip_mem+0xff804920>
  80d878:	d9800317 	ldw	r6,12(sp)
  80d87c:	00800084 	movi	r2,2
  80d880:	11801516 	blt	r2,r6,80d8d8 <_dtoa_r+0x1660>
  80d884:	d9c00c17 	ldw	r7,48(sp)
  80d888:	d9c00615 	stw	r7,24(sp)
  80d88c:	003df706 	br	80d06c <__alt_mem_onchip_mem+0xff80506c>
  80d890:	193d3926 	beq	r3,r4,80cd78 <__alt_mem_onchip_mem+0xff804d78>
  80d894:	00c00f04 	movi	r3,60
  80d898:	1885c83a 	sub	r2,r3,r2
  80d89c:	003ddf06 	br	80d01c <__alt_mem_onchip_mem+0xff80501c>
  80d8a0:	e009883a 	mov	r4,fp
  80d8a4:	e0001115 	stw	zero,68(fp)
  80d8a8:	000b883a 	mov	r5,zero
  80d8ac:	080f2fc0 	call	80f2fc <_Balloc>
  80d8b0:	d8800715 	stw	r2,28(sp)
  80d8b4:	d8c00717 	ldw	r3,28(sp)
  80d8b8:	00bfffc4 	movi	r2,-1
  80d8bc:	01000044 	movi	r4,1
  80d8c0:	d8800c15 	stw	r2,48(sp)
  80d8c4:	e0c01015 	stw	r3,64(fp)
  80d8c8:	d9000b15 	stw	r4,44(sp)
  80d8cc:	d8800615 	stw	r2,24(sp)
  80d8d0:	d8002215 	stw	zero,136(sp)
  80d8d4:	003c4106 	br	80c9dc <__alt_mem_onchip_mem+0xff8049dc>
  80d8d8:	d8c00c17 	ldw	r3,48(sp)
  80d8dc:	d8c00615 	stw	r3,24(sp)
  80d8e0:	003e7006 	br	80d2a4 <__alt_mem_onchip_mem+0xff8052a4>
  80d8e4:	04400044 	movi	r17,1
  80d8e8:	003b2006 	br	80c56c <__alt_mem_onchip_mem+0xff80456c>
  80d8ec:	000b883a 	mov	r5,zero
  80d8f0:	003b3d06 	br	80c5e8 <__alt_mem_onchip_mem+0xff8045e8>
  80d8f4:	d8800c17 	ldw	r2,48(sp)
  80d8f8:	d8800615 	stw	r2,24(sp)
  80d8fc:	003e6906 	br	80d2a4 <__alt_mem_onchip_mem+0xff8052a4>

0080d900 <__sflush_r>:
  80d900:	2880030b 	ldhu	r2,12(r5)
  80d904:	defffb04 	addi	sp,sp,-20
  80d908:	dcc00315 	stw	r19,12(sp)
  80d90c:	dc400115 	stw	r17,4(sp)
  80d910:	dfc00415 	stw	ra,16(sp)
  80d914:	dc800215 	stw	r18,8(sp)
  80d918:	dc000015 	stw	r16,0(sp)
  80d91c:	10c0020c 	andi	r3,r2,8
  80d920:	2823883a 	mov	r17,r5
  80d924:	2027883a 	mov	r19,r4
  80d928:	1800311e 	bne	r3,zero,80d9f0 <__sflush_r+0xf0>
  80d92c:	28c00117 	ldw	r3,4(r5)
  80d930:	10820014 	ori	r2,r2,2048
  80d934:	2880030d 	sth	r2,12(r5)
  80d938:	00c04b0e 	bge	zero,r3,80da68 <__sflush_r+0x168>
  80d93c:	8a000a17 	ldw	r8,40(r17)
  80d940:	40002326 	beq	r8,zero,80d9d0 <__sflush_r+0xd0>
  80d944:	9c000017 	ldw	r16,0(r19)
  80d948:	10c4000c 	andi	r3,r2,4096
  80d94c:	98000015 	stw	zero,0(r19)
  80d950:	18004826 	beq	r3,zero,80da74 <__sflush_r+0x174>
  80d954:	89801417 	ldw	r6,80(r17)
  80d958:	10c0010c 	andi	r3,r2,4
  80d95c:	18000626 	beq	r3,zero,80d978 <__sflush_r+0x78>
  80d960:	88c00117 	ldw	r3,4(r17)
  80d964:	88800c17 	ldw	r2,48(r17)
  80d968:	30cdc83a 	sub	r6,r6,r3
  80d96c:	10000226 	beq	r2,zero,80d978 <__sflush_r+0x78>
  80d970:	88800f17 	ldw	r2,60(r17)
  80d974:	308dc83a 	sub	r6,r6,r2
  80d978:	89400717 	ldw	r5,28(r17)
  80d97c:	000f883a 	mov	r7,zero
  80d980:	9809883a 	mov	r4,r19
  80d984:	403ee83a 	callr	r8
  80d988:	00ffffc4 	movi	r3,-1
  80d98c:	10c04426 	beq	r2,r3,80daa0 <__sflush_r+0x1a0>
  80d990:	88c0030b 	ldhu	r3,12(r17)
  80d994:	89000417 	ldw	r4,16(r17)
  80d998:	88000115 	stw	zero,4(r17)
  80d99c:	197dffcc 	andi	r5,r3,63487
  80d9a0:	8940030d 	sth	r5,12(r17)
  80d9a4:	89000015 	stw	r4,0(r17)
  80d9a8:	18c4000c 	andi	r3,r3,4096
  80d9ac:	18002c1e 	bne	r3,zero,80da60 <__sflush_r+0x160>
  80d9b0:	89400c17 	ldw	r5,48(r17)
  80d9b4:	9c000015 	stw	r16,0(r19)
  80d9b8:	28000526 	beq	r5,zero,80d9d0 <__sflush_r+0xd0>
  80d9bc:	88801004 	addi	r2,r17,64
  80d9c0:	28800226 	beq	r5,r2,80d9cc <__sflush_r+0xcc>
  80d9c4:	9809883a 	mov	r4,r19
  80d9c8:	080e06c0 	call	80e06c <_free_r>
  80d9cc:	88000c15 	stw	zero,48(r17)
  80d9d0:	0005883a 	mov	r2,zero
  80d9d4:	dfc00417 	ldw	ra,16(sp)
  80d9d8:	dcc00317 	ldw	r19,12(sp)
  80d9dc:	dc800217 	ldw	r18,8(sp)
  80d9e0:	dc400117 	ldw	r17,4(sp)
  80d9e4:	dc000017 	ldw	r16,0(sp)
  80d9e8:	dec00504 	addi	sp,sp,20
  80d9ec:	f800283a 	ret
  80d9f0:	2c800417 	ldw	r18,16(r5)
  80d9f4:	903ff626 	beq	r18,zero,80d9d0 <__alt_mem_onchip_mem+0xff8059d0>
  80d9f8:	2c000017 	ldw	r16,0(r5)
  80d9fc:	108000cc 	andi	r2,r2,3
  80da00:	2c800015 	stw	r18,0(r5)
  80da04:	84a1c83a 	sub	r16,r16,r18
  80da08:	1000131e 	bne	r2,zero,80da58 <__sflush_r+0x158>
  80da0c:	28800517 	ldw	r2,20(r5)
  80da10:	88800215 	stw	r2,8(r17)
  80da14:	04000316 	blt	zero,r16,80da24 <__sflush_r+0x124>
  80da18:	003fed06 	br	80d9d0 <__alt_mem_onchip_mem+0xff8059d0>
  80da1c:	90a5883a 	add	r18,r18,r2
  80da20:	043feb0e 	bge	zero,r16,80d9d0 <__alt_mem_onchip_mem+0xff8059d0>
  80da24:	88800917 	ldw	r2,36(r17)
  80da28:	89400717 	ldw	r5,28(r17)
  80da2c:	800f883a 	mov	r7,r16
  80da30:	900d883a 	mov	r6,r18
  80da34:	9809883a 	mov	r4,r19
  80da38:	103ee83a 	callr	r2
  80da3c:	80a1c83a 	sub	r16,r16,r2
  80da40:	00bff616 	blt	zero,r2,80da1c <__alt_mem_onchip_mem+0xff805a1c>
  80da44:	88c0030b 	ldhu	r3,12(r17)
  80da48:	00bfffc4 	movi	r2,-1
  80da4c:	18c01014 	ori	r3,r3,64
  80da50:	88c0030d 	sth	r3,12(r17)
  80da54:	003fdf06 	br	80d9d4 <__alt_mem_onchip_mem+0xff8059d4>
  80da58:	0005883a 	mov	r2,zero
  80da5c:	003fec06 	br	80da10 <__alt_mem_onchip_mem+0xff805a10>
  80da60:	88801415 	stw	r2,80(r17)
  80da64:	003fd206 	br	80d9b0 <__alt_mem_onchip_mem+0xff8059b0>
  80da68:	28c00f17 	ldw	r3,60(r5)
  80da6c:	00ffb316 	blt	zero,r3,80d93c <__alt_mem_onchip_mem+0xff80593c>
  80da70:	003fd706 	br	80d9d0 <__alt_mem_onchip_mem+0xff8059d0>
  80da74:	89400717 	ldw	r5,28(r17)
  80da78:	000d883a 	mov	r6,zero
  80da7c:	01c00044 	movi	r7,1
  80da80:	9809883a 	mov	r4,r19
  80da84:	403ee83a 	callr	r8
  80da88:	100d883a 	mov	r6,r2
  80da8c:	00bfffc4 	movi	r2,-1
  80da90:	30801426 	beq	r6,r2,80dae4 <__sflush_r+0x1e4>
  80da94:	8880030b 	ldhu	r2,12(r17)
  80da98:	8a000a17 	ldw	r8,40(r17)
  80da9c:	003fae06 	br	80d958 <__alt_mem_onchip_mem+0xff805958>
  80daa0:	98c00017 	ldw	r3,0(r19)
  80daa4:	183fba26 	beq	r3,zero,80d990 <__alt_mem_onchip_mem+0xff805990>
  80daa8:	01000744 	movi	r4,29
  80daac:	19000626 	beq	r3,r4,80dac8 <__sflush_r+0x1c8>
  80dab0:	01000584 	movi	r4,22
  80dab4:	19000426 	beq	r3,r4,80dac8 <__sflush_r+0x1c8>
  80dab8:	88c0030b 	ldhu	r3,12(r17)
  80dabc:	18c01014 	ori	r3,r3,64
  80dac0:	88c0030d 	sth	r3,12(r17)
  80dac4:	003fc306 	br	80d9d4 <__alt_mem_onchip_mem+0xff8059d4>
  80dac8:	8880030b 	ldhu	r2,12(r17)
  80dacc:	88c00417 	ldw	r3,16(r17)
  80dad0:	88000115 	stw	zero,4(r17)
  80dad4:	10bdffcc 	andi	r2,r2,63487
  80dad8:	8880030d 	sth	r2,12(r17)
  80dadc:	88c00015 	stw	r3,0(r17)
  80dae0:	003fb306 	br	80d9b0 <__alt_mem_onchip_mem+0xff8059b0>
  80dae4:	98800017 	ldw	r2,0(r19)
  80dae8:	103fea26 	beq	r2,zero,80da94 <__alt_mem_onchip_mem+0xff805a94>
  80daec:	00c00744 	movi	r3,29
  80daf0:	10c00226 	beq	r2,r3,80dafc <__sflush_r+0x1fc>
  80daf4:	00c00584 	movi	r3,22
  80daf8:	10c0031e 	bne	r2,r3,80db08 <__sflush_r+0x208>
  80dafc:	9c000015 	stw	r16,0(r19)
  80db00:	0005883a 	mov	r2,zero
  80db04:	003fb306 	br	80d9d4 <__alt_mem_onchip_mem+0xff8059d4>
  80db08:	88c0030b 	ldhu	r3,12(r17)
  80db0c:	3005883a 	mov	r2,r6
  80db10:	18c01014 	ori	r3,r3,64
  80db14:	88c0030d 	sth	r3,12(r17)
  80db18:	003fae06 	br	80d9d4 <__alt_mem_onchip_mem+0xff8059d4>

0080db1c <_fflush_r>:
  80db1c:	defffd04 	addi	sp,sp,-12
  80db20:	dc000115 	stw	r16,4(sp)
  80db24:	dfc00215 	stw	ra,8(sp)
  80db28:	2021883a 	mov	r16,r4
  80db2c:	20000226 	beq	r4,zero,80db38 <_fflush_r+0x1c>
  80db30:	20800e17 	ldw	r2,56(r4)
  80db34:	10000c26 	beq	r2,zero,80db68 <_fflush_r+0x4c>
  80db38:	2880030f 	ldh	r2,12(r5)
  80db3c:	1000051e 	bne	r2,zero,80db54 <_fflush_r+0x38>
  80db40:	0005883a 	mov	r2,zero
  80db44:	dfc00217 	ldw	ra,8(sp)
  80db48:	dc000117 	ldw	r16,4(sp)
  80db4c:	dec00304 	addi	sp,sp,12
  80db50:	f800283a 	ret
  80db54:	8009883a 	mov	r4,r16
  80db58:	dfc00217 	ldw	ra,8(sp)
  80db5c:	dc000117 	ldw	r16,4(sp)
  80db60:	dec00304 	addi	sp,sp,12
  80db64:	080d9001 	jmpi	80d900 <__sflush_r>
  80db68:	d9400015 	stw	r5,0(sp)
  80db6c:	080def80 	call	80def8 <__sinit>
  80db70:	d9400017 	ldw	r5,0(sp)
  80db74:	003ff006 	br	80db38 <__alt_mem_onchip_mem+0xff805b38>

0080db78 <fflush>:
  80db78:	20000526 	beq	r4,zero,80db90 <fflush+0x18>
  80db7c:	008020b4 	movhi	r2,130
  80db80:	10aad304 	addi	r2,r2,-21684
  80db84:	200b883a 	mov	r5,r4
  80db88:	11000017 	ldw	r4,0(r2)
  80db8c:	080db1c1 	jmpi	80db1c <_fflush_r>
  80db90:	008020b4 	movhi	r2,130
  80db94:	10aad204 	addi	r2,r2,-21688
  80db98:	11000017 	ldw	r4,0(r2)
  80db9c:	01402074 	movhi	r5,129
  80dba0:	2976c704 	addi	r5,r5,-9444
  80dba4:	080e4401 	jmpi	80e440 <_fwalk_reent>

0080dba8 <__fp_unlock>:
  80dba8:	0005883a 	mov	r2,zero
  80dbac:	f800283a 	ret

0080dbb0 <_cleanup_r>:
  80dbb0:	01402074 	movhi	r5,129
  80dbb4:	29478c04 	addi	r5,r5,7728
  80dbb8:	080e4401 	jmpi	80e440 <_fwalk_reent>

0080dbbc <__sinit.part.1>:
  80dbbc:	defff704 	addi	sp,sp,-36
  80dbc0:	00c02074 	movhi	r3,129
  80dbc4:	dfc00815 	stw	ra,32(sp)
  80dbc8:	ddc00715 	stw	r23,28(sp)
  80dbcc:	dd800615 	stw	r22,24(sp)
  80dbd0:	dd400515 	stw	r21,20(sp)
  80dbd4:	dd000415 	stw	r20,16(sp)
  80dbd8:	dcc00315 	stw	r19,12(sp)
  80dbdc:	dc800215 	stw	r18,8(sp)
  80dbe0:	dc400115 	stw	r17,4(sp)
  80dbe4:	dc000015 	stw	r16,0(sp)
  80dbe8:	18f6ec04 	addi	r3,r3,-9296
  80dbec:	24000117 	ldw	r16,4(r4)
  80dbf0:	20c00f15 	stw	r3,60(r4)
  80dbf4:	2080bb04 	addi	r2,r4,748
  80dbf8:	00c000c4 	movi	r3,3
  80dbfc:	20c0b915 	stw	r3,740(r4)
  80dc00:	2080ba15 	stw	r2,744(r4)
  80dc04:	2000b815 	stw	zero,736(r4)
  80dc08:	05c00204 	movi	r23,8
  80dc0c:	00800104 	movi	r2,4
  80dc10:	2025883a 	mov	r18,r4
  80dc14:	b80d883a 	mov	r6,r23
  80dc18:	81001704 	addi	r4,r16,92
  80dc1c:	000b883a 	mov	r5,zero
  80dc20:	80000015 	stw	zero,0(r16)
  80dc24:	80000115 	stw	zero,4(r16)
  80dc28:	80000215 	stw	zero,8(r16)
  80dc2c:	8080030d 	sth	r2,12(r16)
  80dc30:	80001915 	stw	zero,100(r16)
  80dc34:	8000038d 	sth	zero,14(r16)
  80dc38:	80000415 	stw	zero,16(r16)
  80dc3c:	80000515 	stw	zero,20(r16)
  80dc40:	80000615 	stw	zero,24(r16)
  80dc44:	080f1d40 	call	80f1d4 <memset>
  80dc48:	05802074 	movhi	r22,129
  80dc4c:	94400217 	ldw	r17,8(r18)
  80dc50:	05402074 	movhi	r21,129
  80dc54:	05002074 	movhi	r20,129
  80dc58:	04c02074 	movhi	r19,129
  80dc5c:	b580f004 	addi	r22,r22,960
  80dc60:	ad410704 	addi	r21,r21,1052
  80dc64:	a5012604 	addi	r20,r20,1176
  80dc68:	9cc13d04 	addi	r19,r19,1268
  80dc6c:	85800815 	stw	r22,32(r16)
  80dc70:	85400915 	stw	r21,36(r16)
  80dc74:	85000a15 	stw	r20,40(r16)
  80dc78:	84c00b15 	stw	r19,44(r16)
  80dc7c:	84000715 	stw	r16,28(r16)
  80dc80:	00800284 	movi	r2,10
  80dc84:	8880030d 	sth	r2,12(r17)
  80dc88:	00800044 	movi	r2,1
  80dc8c:	b80d883a 	mov	r6,r23
  80dc90:	89001704 	addi	r4,r17,92
  80dc94:	000b883a 	mov	r5,zero
  80dc98:	88000015 	stw	zero,0(r17)
  80dc9c:	88000115 	stw	zero,4(r17)
  80dca0:	88000215 	stw	zero,8(r17)
  80dca4:	88001915 	stw	zero,100(r17)
  80dca8:	8880038d 	sth	r2,14(r17)
  80dcac:	88000415 	stw	zero,16(r17)
  80dcb0:	88000515 	stw	zero,20(r17)
  80dcb4:	88000615 	stw	zero,24(r17)
  80dcb8:	080f1d40 	call	80f1d4 <memset>
  80dcbc:	94000317 	ldw	r16,12(r18)
  80dcc0:	00800484 	movi	r2,18
  80dcc4:	8c400715 	stw	r17,28(r17)
  80dcc8:	8d800815 	stw	r22,32(r17)
  80dccc:	8d400915 	stw	r21,36(r17)
  80dcd0:	8d000a15 	stw	r20,40(r17)
  80dcd4:	8cc00b15 	stw	r19,44(r17)
  80dcd8:	8080030d 	sth	r2,12(r16)
  80dcdc:	00800084 	movi	r2,2
  80dce0:	80000015 	stw	zero,0(r16)
  80dce4:	80000115 	stw	zero,4(r16)
  80dce8:	80000215 	stw	zero,8(r16)
  80dcec:	80001915 	stw	zero,100(r16)
  80dcf0:	8080038d 	sth	r2,14(r16)
  80dcf4:	80000415 	stw	zero,16(r16)
  80dcf8:	80000515 	stw	zero,20(r16)
  80dcfc:	80000615 	stw	zero,24(r16)
  80dd00:	b80d883a 	mov	r6,r23
  80dd04:	000b883a 	mov	r5,zero
  80dd08:	81001704 	addi	r4,r16,92
  80dd0c:	080f1d40 	call	80f1d4 <memset>
  80dd10:	00800044 	movi	r2,1
  80dd14:	84000715 	stw	r16,28(r16)
  80dd18:	85800815 	stw	r22,32(r16)
  80dd1c:	85400915 	stw	r21,36(r16)
  80dd20:	85000a15 	stw	r20,40(r16)
  80dd24:	84c00b15 	stw	r19,44(r16)
  80dd28:	90800e15 	stw	r2,56(r18)
  80dd2c:	dfc00817 	ldw	ra,32(sp)
  80dd30:	ddc00717 	ldw	r23,28(sp)
  80dd34:	dd800617 	ldw	r22,24(sp)
  80dd38:	dd400517 	ldw	r21,20(sp)
  80dd3c:	dd000417 	ldw	r20,16(sp)
  80dd40:	dcc00317 	ldw	r19,12(sp)
  80dd44:	dc800217 	ldw	r18,8(sp)
  80dd48:	dc400117 	ldw	r17,4(sp)
  80dd4c:	dc000017 	ldw	r16,0(sp)
  80dd50:	dec00904 	addi	sp,sp,36
  80dd54:	f800283a 	ret

0080dd58 <__fp_lock>:
  80dd58:	0005883a 	mov	r2,zero
  80dd5c:	f800283a 	ret

0080dd60 <__sfmoreglue>:
  80dd60:	defffc04 	addi	sp,sp,-16
  80dd64:	dc400115 	stw	r17,4(sp)
  80dd68:	2c7fffc4 	addi	r17,r5,-1
  80dd6c:	8c401a24 	muli	r17,r17,104
  80dd70:	dc800215 	stw	r18,8(sp)
  80dd74:	2825883a 	mov	r18,r5
  80dd78:	89401d04 	addi	r5,r17,116
  80dd7c:	dc000015 	stw	r16,0(sp)
  80dd80:	dfc00315 	stw	ra,12(sp)
  80dd84:	080e79c0 	call	80e79c <_malloc_r>
  80dd88:	1021883a 	mov	r16,r2
  80dd8c:	10000726 	beq	r2,zero,80ddac <__sfmoreglue+0x4c>
  80dd90:	11000304 	addi	r4,r2,12
  80dd94:	10000015 	stw	zero,0(r2)
  80dd98:	14800115 	stw	r18,4(r2)
  80dd9c:	11000215 	stw	r4,8(r2)
  80dda0:	89801a04 	addi	r6,r17,104
  80dda4:	000b883a 	mov	r5,zero
  80dda8:	080f1d40 	call	80f1d4 <memset>
  80ddac:	8005883a 	mov	r2,r16
  80ddb0:	dfc00317 	ldw	ra,12(sp)
  80ddb4:	dc800217 	ldw	r18,8(sp)
  80ddb8:	dc400117 	ldw	r17,4(sp)
  80ddbc:	dc000017 	ldw	r16,0(sp)
  80ddc0:	dec00404 	addi	sp,sp,16
  80ddc4:	f800283a 	ret

0080ddc8 <__sfp>:
  80ddc8:	defffb04 	addi	sp,sp,-20
  80ddcc:	dc000015 	stw	r16,0(sp)
  80ddd0:	040020b4 	movhi	r16,130
  80ddd4:	842ad204 	addi	r16,r16,-21688
  80ddd8:	dcc00315 	stw	r19,12(sp)
  80dddc:	2027883a 	mov	r19,r4
  80dde0:	81000017 	ldw	r4,0(r16)
  80dde4:	dfc00415 	stw	ra,16(sp)
  80dde8:	dc800215 	stw	r18,8(sp)
  80ddec:	20800e17 	ldw	r2,56(r4)
  80ddf0:	dc400115 	stw	r17,4(sp)
  80ddf4:	1000021e 	bne	r2,zero,80de00 <__sfp+0x38>
  80ddf8:	080dbbc0 	call	80dbbc <__sinit.part.1>
  80ddfc:	81000017 	ldw	r4,0(r16)
  80de00:	2480b804 	addi	r18,r4,736
  80de04:	047fffc4 	movi	r17,-1
  80de08:	91000117 	ldw	r4,4(r18)
  80de0c:	94000217 	ldw	r16,8(r18)
  80de10:	213fffc4 	addi	r4,r4,-1
  80de14:	20000a16 	blt	r4,zero,80de40 <__sfp+0x78>
  80de18:	8080030f 	ldh	r2,12(r16)
  80de1c:	10000c26 	beq	r2,zero,80de50 <__sfp+0x88>
  80de20:	80c01d04 	addi	r3,r16,116
  80de24:	00000206 	br	80de30 <__sfp+0x68>
  80de28:	18bfe60f 	ldh	r2,-104(r3)
  80de2c:	10000826 	beq	r2,zero,80de50 <__sfp+0x88>
  80de30:	213fffc4 	addi	r4,r4,-1
  80de34:	1c3ffd04 	addi	r16,r3,-12
  80de38:	18c01a04 	addi	r3,r3,104
  80de3c:	247ffa1e 	bne	r4,r17,80de28 <__alt_mem_onchip_mem+0xff805e28>
  80de40:	90800017 	ldw	r2,0(r18)
  80de44:	10001d26 	beq	r2,zero,80debc <__sfp+0xf4>
  80de48:	1025883a 	mov	r18,r2
  80de4c:	003fee06 	br	80de08 <__alt_mem_onchip_mem+0xff805e08>
  80de50:	00bfffc4 	movi	r2,-1
  80de54:	8080038d 	sth	r2,14(r16)
  80de58:	00800044 	movi	r2,1
  80de5c:	8080030d 	sth	r2,12(r16)
  80de60:	80001915 	stw	zero,100(r16)
  80de64:	80000015 	stw	zero,0(r16)
  80de68:	80000215 	stw	zero,8(r16)
  80de6c:	80000115 	stw	zero,4(r16)
  80de70:	80000415 	stw	zero,16(r16)
  80de74:	80000515 	stw	zero,20(r16)
  80de78:	80000615 	stw	zero,24(r16)
  80de7c:	01800204 	movi	r6,8
  80de80:	000b883a 	mov	r5,zero
  80de84:	81001704 	addi	r4,r16,92
  80de88:	080f1d40 	call	80f1d4 <memset>
  80de8c:	8005883a 	mov	r2,r16
  80de90:	80000c15 	stw	zero,48(r16)
  80de94:	80000d15 	stw	zero,52(r16)
  80de98:	80001115 	stw	zero,68(r16)
  80de9c:	80001215 	stw	zero,72(r16)
  80dea0:	dfc00417 	ldw	ra,16(sp)
  80dea4:	dcc00317 	ldw	r19,12(sp)
  80dea8:	dc800217 	ldw	r18,8(sp)
  80deac:	dc400117 	ldw	r17,4(sp)
  80deb0:	dc000017 	ldw	r16,0(sp)
  80deb4:	dec00504 	addi	sp,sp,20
  80deb8:	f800283a 	ret
  80debc:	01400104 	movi	r5,4
  80dec0:	9809883a 	mov	r4,r19
  80dec4:	080dd600 	call	80dd60 <__sfmoreglue>
  80dec8:	90800015 	stw	r2,0(r18)
  80decc:	103fde1e 	bne	r2,zero,80de48 <__alt_mem_onchip_mem+0xff805e48>
  80ded0:	00800304 	movi	r2,12
  80ded4:	98800015 	stw	r2,0(r19)
  80ded8:	0005883a 	mov	r2,zero
  80dedc:	003ff006 	br	80dea0 <__alt_mem_onchip_mem+0xff805ea0>

0080dee0 <_cleanup>:
  80dee0:	008020b4 	movhi	r2,130
  80dee4:	10aad204 	addi	r2,r2,-21688
  80dee8:	11000017 	ldw	r4,0(r2)
  80deec:	01402074 	movhi	r5,129
  80def0:	29478c04 	addi	r5,r5,7728
  80def4:	080e4401 	jmpi	80e440 <_fwalk_reent>

0080def8 <__sinit>:
  80def8:	20800e17 	ldw	r2,56(r4)
  80defc:	10000126 	beq	r2,zero,80df04 <__sinit+0xc>
  80df00:	f800283a 	ret
  80df04:	080dbbc1 	jmpi	80dbbc <__sinit.part.1>

0080df08 <__sfp_lock_acquire>:
  80df08:	f800283a 	ret

0080df0c <__sfp_lock_release>:
  80df0c:	f800283a 	ret

0080df10 <__sinit_lock_acquire>:
  80df10:	f800283a 	ret

0080df14 <__sinit_lock_release>:
  80df14:	f800283a 	ret

0080df18 <__fp_lock_all>:
  80df18:	008020b4 	movhi	r2,130
  80df1c:	10aad304 	addi	r2,r2,-21684
  80df20:	11000017 	ldw	r4,0(r2)
  80df24:	01402074 	movhi	r5,129
  80df28:	29775604 	addi	r5,r5,-8872
  80df2c:	080e37c1 	jmpi	80e37c <_fwalk>

0080df30 <__fp_unlock_all>:
  80df30:	008020b4 	movhi	r2,130
  80df34:	10aad304 	addi	r2,r2,-21684
  80df38:	11000017 	ldw	r4,0(r2)
  80df3c:	01402074 	movhi	r5,129
  80df40:	2976ea04 	addi	r5,r5,-9304
  80df44:	080e37c1 	jmpi	80e37c <_fwalk>

0080df48 <_malloc_trim_r>:
  80df48:	defffb04 	addi	sp,sp,-20
  80df4c:	dcc00315 	stw	r19,12(sp)
  80df50:	04c020b4 	movhi	r19,130
  80df54:	dc800215 	stw	r18,8(sp)
  80df58:	dc400115 	stw	r17,4(sp)
  80df5c:	dc000015 	stw	r16,0(sp)
  80df60:	dfc00415 	stw	ra,16(sp)
  80df64:	2821883a 	mov	r16,r5
  80df68:	9ce4d504 	addi	r19,r19,-27820
  80df6c:	2025883a 	mov	r18,r4
  80df70:	08151040 	call	815104 <__malloc_lock>
  80df74:	98800217 	ldw	r2,8(r19)
  80df78:	14400117 	ldw	r17,4(r2)
  80df7c:	00bfff04 	movi	r2,-4
  80df80:	88a2703a 	and	r17,r17,r2
  80df84:	8c21c83a 	sub	r16,r17,r16
  80df88:	8403fbc4 	addi	r16,r16,4079
  80df8c:	8020d33a 	srli	r16,r16,12
  80df90:	0083ffc4 	movi	r2,4095
  80df94:	843fffc4 	addi	r16,r16,-1
  80df98:	8020933a 	slli	r16,r16,12
  80df9c:	1400060e 	bge	r2,r16,80dfb8 <_malloc_trim_r+0x70>
  80dfa0:	000b883a 	mov	r5,zero
  80dfa4:	9009883a 	mov	r4,r18
  80dfa8:	081036c0 	call	81036c <_sbrk_r>
  80dfac:	98c00217 	ldw	r3,8(r19)
  80dfb0:	1c47883a 	add	r3,r3,r17
  80dfb4:	10c00a26 	beq	r2,r3,80dfe0 <_malloc_trim_r+0x98>
  80dfb8:	9009883a 	mov	r4,r18
  80dfbc:	08151280 	call	815128 <__malloc_unlock>
  80dfc0:	0005883a 	mov	r2,zero
  80dfc4:	dfc00417 	ldw	ra,16(sp)
  80dfc8:	dcc00317 	ldw	r19,12(sp)
  80dfcc:	dc800217 	ldw	r18,8(sp)
  80dfd0:	dc400117 	ldw	r17,4(sp)
  80dfd4:	dc000017 	ldw	r16,0(sp)
  80dfd8:	dec00504 	addi	sp,sp,20
  80dfdc:	f800283a 	ret
  80dfe0:	040bc83a 	sub	r5,zero,r16
  80dfe4:	9009883a 	mov	r4,r18
  80dfe8:	081036c0 	call	81036c <_sbrk_r>
  80dfec:	00ffffc4 	movi	r3,-1
  80dff0:	10c00d26 	beq	r2,r3,80e028 <_malloc_trim_r+0xe0>
  80dff4:	00c020b4 	movhi	r3,130
  80dff8:	18f23404 	addi	r3,r3,-14128
  80dffc:	18800017 	ldw	r2,0(r3)
  80e000:	99000217 	ldw	r4,8(r19)
  80e004:	8c23c83a 	sub	r17,r17,r16
  80e008:	8c400054 	ori	r17,r17,1
  80e00c:	1421c83a 	sub	r16,r2,r16
  80e010:	24400115 	stw	r17,4(r4)
  80e014:	9009883a 	mov	r4,r18
  80e018:	1c000015 	stw	r16,0(r3)
  80e01c:	08151280 	call	815128 <__malloc_unlock>
  80e020:	00800044 	movi	r2,1
  80e024:	003fe706 	br	80dfc4 <__alt_mem_onchip_mem+0xff805fc4>
  80e028:	000b883a 	mov	r5,zero
  80e02c:	9009883a 	mov	r4,r18
  80e030:	081036c0 	call	81036c <_sbrk_r>
  80e034:	99000217 	ldw	r4,8(r19)
  80e038:	014003c4 	movi	r5,15
  80e03c:	1107c83a 	sub	r3,r2,r4
  80e040:	28ffdd0e 	bge	r5,r3,80dfb8 <__alt_mem_onchip_mem+0xff805fb8>
  80e044:	014020b4 	movhi	r5,130
  80e048:	296ad504 	addi	r5,r5,-21676
  80e04c:	29400017 	ldw	r5,0(r5)
  80e050:	18c00054 	ori	r3,r3,1
  80e054:	20c00115 	stw	r3,4(r4)
  80e058:	00c020b4 	movhi	r3,130
  80e05c:	1145c83a 	sub	r2,r2,r5
  80e060:	18f23404 	addi	r3,r3,-14128
  80e064:	18800015 	stw	r2,0(r3)
  80e068:	003fd306 	br	80dfb8 <__alt_mem_onchip_mem+0xff805fb8>

0080e06c <_free_r>:
  80e06c:	28004126 	beq	r5,zero,80e174 <_free_r+0x108>
  80e070:	defffd04 	addi	sp,sp,-12
  80e074:	dc400115 	stw	r17,4(sp)
  80e078:	dc000015 	stw	r16,0(sp)
  80e07c:	2023883a 	mov	r17,r4
  80e080:	2821883a 	mov	r16,r5
  80e084:	dfc00215 	stw	ra,8(sp)
  80e088:	08151040 	call	815104 <__malloc_lock>
  80e08c:	81ffff17 	ldw	r7,-4(r16)
  80e090:	00bfff84 	movi	r2,-2
  80e094:	010020b4 	movhi	r4,130
  80e098:	81bffe04 	addi	r6,r16,-8
  80e09c:	3884703a 	and	r2,r7,r2
  80e0a0:	2124d504 	addi	r4,r4,-27820
  80e0a4:	308b883a 	add	r5,r6,r2
  80e0a8:	2a400117 	ldw	r9,4(r5)
  80e0ac:	22000217 	ldw	r8,8(r4)
  80e0b0:	00ffff04 	movi	r3,-4
  80e0b4:	48c6703a 	and	r3,r9,r3
  80e0b8:	2a005726 	beq	r5,r8,80e218 <_free_r+0x1ac>
  80e0bc:	28c00115 	stw	r3,4(r5)
  80e0c0:	39c0004c 	andi	r7,r7,1
  80e0c4:	3800091e 	bne	r7,zero,80e0ec <_free_r+0x80>
  80e0c8:	823ffe17 	ldw	r8,-8(r16)
  80e0cc:	22400204 	addi	r9,r4,8
  80e0d0:	320dc83a 	sub	r6,r6,r8
  80e0d4:	31c00217 	ldw	r7,8(r6)
  80e0d8:	1205883a 	add	r2,r2,r8
  80e0dc:	3a406526 	beq	r7,r9,80e274 <_free_r+0x208>
  80e0e0:	32000317 	ldw	r8,12(r6)
  80e0e4:	3a000315 	stw	r8,12(r7)
  80e0e8:	41c00215 	stw	r7,8(r8)
  80e0ec:	28cf883a 	add	r7,r5,r3
  80e0f0:	39c00117 	ldw	r7,4(r7)
  80e0f4:	39c0004c 	andi	r7,r7,1
  80e0f8:	38003a26 	beq	r7,zero,80e1e4 <_free_r+0x178>
  80e0fc:	10c00054 	ori	r3,r2,1
  80e100:	30c00115 	stw	r3,4(r6)
  80e104:	3087883a 	add	r3,r6,r2
  80e108:	18800015 	stw	r2,0(r3)
  80e10c:	00c07fc4 	movi	r3,511
  80e110:	18801936 	bltu	r3,r2,80e178 <_free_r+0x10c>
  80e114:	1004d0fa 	srli	r2,r2,3
  80e118:	01c00044 	movi	r7,1
  80e11c:	21400117 	ldw	r5,4(r4)
  80e120:	10c00044 	addi	r3,r2,1
  80e124:	18c7883a 	add	r3,r3,r3
  80e128:	1005d0ba 	srai	r2,r2,2
  80e12c:	18c7883a 	add	r3,r3,r3
  80e130:	18c7883a 	add	r3,r3,r3
  80e134:	1907883a 	add	r3,r3,r4
  80e138:	3884983a 	sll	r2,r7,r2
  80e13c:	19c00017 	ldw	r7,0(r3)
  80e140:	1a3ffe04 	addi	r8,r3,-8
  80e144:	1144b03a 	or	r2,r2,r5
  80e148:	32000315 	stw	r8,12(r6)
  80e14c:	31c00215 	stw	r7,8(r6)
  80e150:	20800115 	stw	r2,4(r4)
  80e154:	19800015 	stw	r6,0(r3)
  80e158:	39800315 	stw	r6,12(r7)
  80e15c:	8809883a 	mov	r4,r17
  80e160:	dfc00217 	ldw	ra,8(sp)
  80e164:	dc400117 	ldw	r17,4(sp)
  80e168:	dc000017 	ldw	r16,0(sp)
  80e16c:	dec00304 	addi	sp,sp,12
  80e170:	08151281 	jmpi	815128 <__malloc_unlock>
  80e174:	f800283a 	ret
  80e178:	100ad27a 	srli	r5,r2,9
  80e17c:	00c00104 	movi	r3,4
  80e180:	19404a36 	bltu	r3,r5,80e2ac <_free_r+0x240>
  80e184:	100ad1ba 	srli	r5,r2,6
  80e188:	28c00e44 	addi	r3,r5,57
  80e18c:	18c7883a 	add	r3,r3,r3
  80e190:	29400e04 	addi	r5,r5,56
  80e194:	18c7883a 	add	r3,r3,r3
  80e198:	18c7883a 	add	r3,r3,r3
  80e19c:	1909883a 	add	r4,r3,r4
  80e1a0:	20c00017 	ldw	r3,0(r4)
  80e1a4:	01c020b4 	movhi	r7,130
  80e1a8:	213ffe04 	addi	r4,r4,-8
  80e1ac:	39e4d504 	addi	r7,r7,-27820
  80e1b0:	20c04426 	beq	r4,r3,80e2c4 <_free_r+0x258>
  80e1b4:	01ffff04 	movi	r7,-4
  80e1b8:	19400117 	ldw	r5,4(r3)
  80e1bc:	29ca703a 	and	r5,r5,r7
  80e1c0:	1140022e 	bgeu	r2,r5,80e1cc <_free_r+0x160>
  80e1c4:	18c00217 	ldw	r3,8(r3)
  80e1c8:	20fffb1e 	bne	r4,r3,80e1b8 <__alt_mem_onchip_mem+0xff8061b8>
  80e1cc:	19000317 	ldw	r4,12(r3)
  80e1d0:	31000315 	stw	r4,12(r6)
  80e1d4:	30c00215 	stw	r3,8(r6)
  80e1d8:	21800215 	stw	r6,8(r4)
  80e1dc:	19800315 	stw	r6,12(r3)
  80e1e0:	003fde06 	br	80e15c <__alt_mem_onchip_mem+0xff80615c>
  80e1e4:	29c00217 	ldw	r7,8(r5)
  80e1e8:	10c5883a 	add	r2,r2,r3
  80e1ec:	00c020b4 	movhi	r3,130
  80e1f0:	18e4d704 	addi	r3,r3,-27812
  80e1f4:	38c03b26 	beq	r7,r3,80e2e4 <_free_r+0x278>
  80e1f8:	2a000317 	ldw	r8,12(r5)
  80e1fc:	11400054 	ori	r5,r2,1
  80e200:	3087883a 	add	r3,r6,r2
  80e204:	3a000315 	stw	r8,12(r7)
  80e208:	41c00215 	stw	r7,8(r8)
  80e20c:	31400115 	stw	r5,4(r6)
  80e210:	18800015 	stw	r2,0(r3)
  80e214:	003fbd06 	br	80e10c <__alt_mem_onchip_mem+0xff80610c>
  80e218:	39c0004c 	andi	r7,r7,1
  80e21c:	10c5883a 	add	r2,r2,r3
  80e220:	3800071e 	bne	r7,zero,80e240 <_free_r+0x1d4>
  80e224:	81fffe17 	ldw	r7,-8(r16)
  80e228:	31cdc83a 	sub	r6,r6,r7
  80e22c:	30c00317 	ldw	r3,12(r6)
  80e230:	31400217 	ldw	r5,8(r6)
  80e234:	11c5883a 	add	r2,r2,r7
  80e238:	28c00315 	stw	r3,12(r5)
  80e23c:	19400215 	stw	r5,8(r3)
  80e240:	10c00054 	ori	r3,r2,1
  80e244:	30c00115 	stw	r3,4(r6)
  80e248:	00c020b4 	movhi	r3,130
  80e24c:	18ead604 	addi	r3,r3,-21672
  80e250:	18c00017 	ldw	r3,0(r3)
  80e254:	21800215 	stw	r6,8(r4)
  80e258:	10ffc036 	bltu	r2,r3,80e15c <__alt_mem_onchip_mem+0xff80615c>
  80e25c:	008020b4 	movhi	r2,130
  80e260:	10b22b04 	addi	r2,r2,-14164
  80e264:	11400017 	ldw	r5,0(r2)
  80e268:	8809883a 	mov	r4,r17
  80e26c:	080df480 	call	80df48 <_malloc_trim_r>
  80e270:	003fba06 	br	80e15c <__alt_mem_onchip_mem+0xff80615c>
  80e274:	28c9883a 	add	r4,r5,r3
  80e278:	21000117 	ldw	r4,4(r4)
  80e27c:	2100004c 	andi	r4,r4,1
  80e280:	2000391e 	bne	r4,zero,80e368 <_free_r+0x2fc>
  80e284:	29c00217 	ldw	r7,8(r5)
  80e288:	29000317 	ldw	r4,12(r5)
  80e28c:	1885883a 	add	r2,r3,r2
  80e290:	10c00054 	ori	r3,r2,1
  80e294:	39000315 	stw	r4,12(r7)
  80e298:	21c00215 	stw	r7,8(r4)
  80e29c:	30c00115 	stw	r3,4(r6)
  80e2a0:	308d883a 	add	r6,r6,r2
  80e2a4:	30800015 	stw	r2,0(r6)
  80e2a8:	003fac06 	br	80e15c <__alt_mem_onchip_mem+0xff80615c>
  80e2ac:	00c00504 	movi	r3,20
  80e2b0:	19401536 	bltu	r3,r5,80e308 <_free_r+0x29c>
  80e2b4:	28c01704 	addi	r3,r5,92
  80e2b8:	18c7883a 	add	r3,r3,r3
  80e2bc:	294016c4 	addi	r5,r5,91
  80e2c0:	003fb406 	br	80e194 <__alt_mem_onchip_mem+0xff806194>
  80e2c4:	280bd0ba 	srai	r5,r5,2
  80e2c8:	00c00044 	movi	r3,1
  80e2cc:	38800117 	ldw	r2,4(r7)
  80e2d0:	194a983a 	sll	r5,r3,r5
  80e2d4:	2007883a 	mov	r3,r4
  80e2d8:	2884b03a 	or	r2,r5,r2
  80e2dc:	38800115 	stw	r2,4(r7)
  80e2e0:	003fbb06 	br	80e1d0 <__alt_mem_onchip_mem+0xff8061d0>
  80e2e4:	21800515 	stw	r6,20(r4)
  80e2e8:	21800415 	stw	r6,16(r4)
  80e2ec:	10c00054 	ori	r3,r2,1
  80e2f0:	31c00315 	stw	r7,12(r6)
  80e2f4:	31c00215 	stw	r7,8(r6)
  80e2f8:	30c00115 	stw	r3,4(r6)
  80e2fc:	308d883a 	add	r6,r6,r2
  80e300:	30800015 	stw	r2,0(r6)
  80e304:	003f9506 	br	80e15c <__alt_mem_onchip_mem+0xff80615c>
  80e308:	00c01504 	movi	r3,84
  80e30c:	19400536 	bltu	r3,r5,80e324 <_free_r+0x2b8>
  80e310:	100ad33a 	srli	r5,r2,12
  80e314:	28c01bc4 	addi	r3,r5,111
  80e318:	18c7883a 	add	r3,r3,r3
  80e31c:	29401b84 	addi	r5,r5,110
  80e320:	003f9c06 	br	80e194 <__alt_mem_onchip_mem+0xff806194>
  80e324:	00c05504 	movi	r3,340
  80e328:	19400536 	bltu	r3,r5,80e340 <_free_r+0x2d4>
  80e32c:	100ad3fa 	srli	r5,r2,15
  80e330:	28c01e04 	addi	r3,r5,120
  80e334:	18c7883a 	add	r3,r3,r3
  80e338:	29401dc4 	addi	r5,r5,119
  80e33c:	003f9506 	br	80e194 <__alt_mem_onchip_mem+0xff806194>
  80e340:	00c15504 	movi	r3,1364
  80e344:	19400536 	bltu	r3,r5,80e35c <_free_r+0x2f0>
  80e348:	100ad4ba 	srli	r5,r2,18
  80e34c:	28c01f44 	addi	r3,r5,125
  80e350:	18c7883a 	add	r3,r3,r3
  80e354:	29401f04 	addi	r5,r5,124
  80e358:	003f8e06 	br	80e194 <__alt_mem_onchip_mem+0xff806194>
  80e35c:	00c03f84 	movi	r3,254
  80e360:	01401f84 	movi	r5,126
  80e364:	003f8b06 	br	80e194 <__alt_mem_onchip_mem+0xff806194>
  80e368:	10c00054 	ori	r3,r2,1
  80e36c:	30c00115 	stw	r3,4(r6)
  80e370:	308d883a 	add	r6,r6,r2
  80e374:	30800015 	stw	r2,0(r6)
  80e378:	003f7806 	br	80e15c <__alt_mem_onchip_mem+0xff80615c>

0080e37c <_fwalk>:
  80e37c:	defff704 	addi	sp,sp,-36
  80e380:	dd000415 	stw	r20,16(sp)
  80e384:	dfc00815 	stw	ra,32(sp)
  80e388:	ddc00715 	stw	r23,28(sp)
  80e38c:	dd800615 	stw	r22,24(sp)
  80e390:	dd400515 	stw	r21,20(sp)
  80e394:	dcc00315 	stw	r19,12(sp)
  80e398:	dc800215 	stw	r18,8(sp)
  80e39c:	dc400115 	stw	r17,4(sp)
  80e3a0:	dc000015 	stw	r16,0(sp)
  80e3a4:	2500b804 	addi	r20,r4,736
  80e3a8:	a0002326 	beq	r20,zero,80e438 <_fwalk+0xbc>
  80e3ac:	282b883a 	mov	r21,r5
  80e3b0:	002f883a 	mov	r23,zero
  80e3b4:	05800044 	movi	r22,1
  80e3b8:	04ffffc4 	movi	r19,-1
  80e3bc:	a4400117 	ldw	r17,4(r20)
  80e3c0:	a4800217 	ldw	r18,8(r20)
  80e3c4:	8c7fffc4 	addi	r17,r17,-1
  80e3c8:	88000d16 	blt	r17,zero,80e400 <_fwalk+0x84>
  80e3cc:	94000304 	addi	r16,r18,12
  80e3d0:	94800384 	addi	r18,r18,14
  80e3d4:	8080000b 	ldhu	r2,0(r16)
  80e3d8:	8c7fffc4 	addi	r17,r17,-1
  80e3dc:	813ffd04 	addi	r4,r16,-12
  80e3e0:	b080042e 	bgeu	r22,r2,80e3f4 <_fwalk+0x78>
  80e3e4:	9080000f 	ldh	r2,0(r18)
  80e3e8:	14c00226 	beq	r2,r19,80e3f4 <_fwalk+0x78>
  80e3ec:	a83ee83a 	callr	r21
  80e3f0:	b8aeb03a 	or	r23,r23,r2
  80e3f4:	84001a04 	addi	r16,r16,104
  80e3f8:	94801a04 	addi	r18,r18,104
  80e3fc:	8cfff51e 	bne	r17,r19,80e3d4 <__alt_mem_onchip_mem+0xff8063d4>
  80e400:	a5000017 	ldw	r20,0(r20)
  80e404:	a03fed1e 	bne	r20,zero,80e3bc <__alt_mem_onchip_mem+0xff8063bc>
  80e408:	b805883a 	mov	r2,r23
  80e40c:	dfc00817 	ldw	ra,32(sp)
  80e410:	ddc00717 	ldw	r23,28(sp)
  80e414:	dd800617 	ldw	r22,24(sp)
  80e418:	dd400517 	ldw	r21,20(sp)
  80e41c:	dd000417 	ldw	r20,16(sp)
  80e420:	dcc00317 	ldw	r19,12(sp)
  80e424:	dc800217 	ldw	r18,8(sp)
  80e428:	dc400117 	ldw	r17,4(sp)
  80e42c:	dc000017 	ldw	r16,0(sp)
  80e430:	dec00904 	addi	sp,sp,36
  80e434:	f800283a 	ret
  80e438:	002f883a 	mov	r23,zero
  80e43c:	003ff206 	br	80e408 <__alt_mem_onchip_mem+0xff806408>

0080e440 <_fwalk_reent>:
  80e440:	defff704 	addi	sp,sp,-36
  80e444:	dd000415 	stw	r20,16(sp)
  80e448:	dfc00815 	stw	ra,32(sp)
  80e44c:	ddc00715 	stw	r23,28(sp)
  80e450:	dd800615 	stw	r22,24(sp)
  80e454:	dd400515 	stw	r21,20(sp)
  80e458:	dcc00315 	stw	r19,12(sp)
  80e45c:	dc800215 	stw	r18,8(sp)
  80e460:	dc400115 	stw	r17,4(sp)
  80e464:	dc000015 	stw	r16,0(sp)
  80e468:	2500b804 	addi	r20,r4,736
  80e46c:	a0002326 	beq	r20,zero,80e4fc <_fwalk_reent+0xbc>
  80e470:	282b883a 	mov	r21,r5
  80e474:	2027883a 	mov	r19,r4
  80e478:	002f883a 	mov	r23,zero
  80e47c:	05800044 	movi	r22,1
  80e480:	04bfffc4 	movi	r18,-1
  80e484:	a4400117 	ldw	r17,4(r20)
  80e488:	a4000217 	ldw	r16,8(r20)
  80e48c:	8c7fffc4 	addi	r17,r17,-1
  80e490:	88000c16 	blt	r17,zero,80e4c4 <_fwalk_reent+0x84>
  80e494:	84000304 	addi	r16,r16,12
  80e498:	8080000b 	ldhu	r2,0(r16)
  80e49c:	8c7fffc4 	addi	r17,r17,-1
  80e4a0:	817ffd04 	addi	r5,r16,-12
  80e4a4:	b080052e 	bgeu	r22,r2,80e4bc <_fwalk_reent+0x7c>
  80e4a8:	8080008f 	ldh	r2,2(r16)
  80e4ac:	9809883a 	mov	r4,r19
  80e4b0:	14800226 	beq	r2,r18,80e4bc <_fwalk_reent+0x7c>
  80e4b4:	a83ee83a 	callr	r21
  80e4b8:	b8aeb03a 	or	r23,r23,r2
  80e4bc:	84001a04 	addi	r16,r16,104
  80e4c0:	8cbff51e 	bne	r17,r18,80e498 <__alt_mem_onchip_mem+0xff806498>
  80e4c4:	a5000017 	ldw	r20,0(r20)
  80e4c8:	a03fee1e 	bne	r20,zero,80e484 <__alt_mem_onchip_mem+0xff806484>
  80e4cc:	b805883a 	mov	r2,r23
  80e4d0:	dfc00817 	ldw	ra,32(sp)
  80e4d4:	ddc00717 	ldw	r23,28(sp)
  80e4d8:	dd800617 	ldw	r22,24(sp)
  80e4dc:	dd400517 	ldw	r21,20(sp)
  80e4e0:	dd000417 	ldw	r20,16(sp)
  80e4e4:	dcc00317 	ldw	r19,12(sp)
  80e4e8:	dc800217 	ldw	r18,8(sp)
  80e4ec:	dc400117 	ldw	r17,4(sp)
  80e4f0:	dc000017 	ldw	r16,0(sp)
  80e4f4:	dec00904 	addi	sp,sp,36
  80e4f8:	f800283a 	ret
  80e4fc:	002f883a 	mov	r23,zero
  80e500:	003ff206 	br	80e4cc <__alt_mem_onchip_mem+0xff8064cc>

0080e504 <_setlocale_r>:
  80e504:	30001b26 	beq	r6,zero,80e574 <_setlocale_r+0x70>
  80e508:	014020b4 	movhi	r5,130
  80e50c:	defffe04 	addi	sp,sp,-8
  80e510:	2962a904 	addi	r5,r5,-30044
  80e514:	3009883a 	mov	r4,r6
  80e518:	dc000015 	stw	r16,0(sp)
  80e51c:	dfc00115 	stw	ra,4(sp)
  80e520:	3021883a 	mov	r16,r6
  80e524:	08104fc0 	call	8104fc <strcmp>
  80e528:	1000061e 	bne	r2,zero,80e544 <_setlocale_r+0x40>
  80e52c:	008020b4 	movhi	r2,130
  80e530:	10a2a804 	addi	r2,r2,-30048
  80e534:	dfc00117 	ldw	ra,4(sp)
  80e538:	dc000017 	ldw	r16,0(sp)
  80e53c:	dec00204 	addi	sp,sp,8
  80e540:	f800283a 	ret
  80e544:	014020b4 	movhi	r5,130
  80e548:	2962a804 	addi	r5,r5,-30048
  80e54c:	8009883a 	mov	r4,r16
  80e550:	08104fc0 	call	8104fc <strcmp>
  80e554:	103ff526 	beq	r2,zero,80e52c <__alt_mem_onchip_mem+0xff80652c>
  80e558:	014020b4 	movhi	r5,130
  80e55c:	29629304 	addi	r5,r5,-30132
  80e560:	8009883a 	mov	r4,r16
  80e564:	08104fc0 	call	8104fc <strcmp>
  80e568:	103ff026 	beq	r2,zero,80e52c <__alt_mem_onchip_mem+0xff80652c>
  80e56c:	0005883a 	mov	r2,zero
  80e570:	003ff006 	br	80e534 <__alt_mem_onchip_mem+0xff806534>
  80e574:	008020b4 	movhi	r2,130
  80e578:	10a2a804 	addi	r2,r2,-30048
  80e57c:	f800283a 	ret

0080e580 <__locale_charset>:
  80e580:	008020b4 	movhi	r2,130
  80e584:	10a4bf04 	addi	r2,r2,-27908
  80e588:	f800283a 	ret

0080e58c <__locale_mb_cur_max>:
  80e58c:	008020b4 	movhi	r2,130
  80e590:	10aad404 	addi	r2,r2,-21680
  80e594:	10800017 	ldw	r2,0(r2)
  80e598:	f800283a 	ret

0080e59c <__locale_msgcharset>:
  80e59c:	008020b4 	movhi	r2,130
  80e5a0:	10a4b704 	addi	r2,r2,-27940
  80e5a4:	f800283a 	ret

0080e5a8 <__locale_cjk_lang>:
  80e5a8:	0005883a 	mov	r2,zero
  80e5ac:	f800283a 	ret

0080e5b0 <_localeconv_r>:
  80e5b0:	008020b4 	movhi	r2,130
  80e5b4:	10a4c704 	addi	r2,r2,-27876
  80e5b8:	f800283a 	ret

0080e5bc <setlocale>:
  80e5bc:	008020b4 	movhi	r2,130
  80e5c0:	10aad304 	addi	r2,r2,-21684
  80e5c4:	280d883a 	mov	r6,r5
  80e5c8:	200b883a 	mov	r5,r4
  80e5cc:	11000017 	ldw	r4,0(r2)
  80e5d0:	080e5041 	jmpi	80e504 <_setlocale_r>

0080e5d4 <localeconv>:
  80e5d4:	008020b4 	movhi	r2,130
  80e5d8:	10a4c704 	addi	r2,r2,-27876
  80e5dc:	f800283a 	ret

0080e5e0 <__smakebuf_r>:
  80e5e0:	2880030b 	ldhu	r2,12(r5)
  80e5e4:	10c0008c 	andi	r3,r2,2
  80e5e8:	1800411e 	bne	r3,zero,80e6f0 <__smakebuf_r+0x110>
  80e5ec:	deffec04 	addi	sp,sp,-80
  80e5f0:	dc000f15 	stw	r16,60(sp)
  80e5f4:	2821883a 	mov	r16,r5
  80e5f8:	2940038f 	ldh	r5,14(r5)
  80e5fc:	dc401015 	stw	r17,64(sp)
  80e600:	dfc01315 	stw	ra,76(sp)
  80e604:	dcc01215 	stw	r19,72(sp)
  80e608:	dc801115 	stw	r18,68(sp)
  80e60c:	2023883a 	mov	r17,r4
  80e610:	28001c16 	blt	r5,zero,80e684 <__smakebuf_r+0xa4>
  80e614:	d80d883a 	mov	r6,sp
  80e618:	081213c0 	call	81213c <_fstat_r>
  80e61c:	10001816 	blt	r2,zero,80e680 <__smakebuf_r+0xa0>
  80e620:	d8800117 	ldw	r2,4(sp)
  80e624:	00e00014 	movui	r3,32768
  80e628:	10bc000c 	andi	r2,r2,61440
  80e62c:	14c80020 	cmpeqi	r19,r2,8192
  80e630:	10c03726 	beq	r2,r3,80e710 <__smakebuf_r+0x130>
  80e634:	80c0030b 	ldhu	r3,12(r16)
  80e638:	18c20014 	ori	r3,r3,2048
  80e63c:	80c0030d 	sth	r3,12(r16)
  80e640:	00c80004 	movi	r3,8192
  80e644:	10c0521e 	bne	r2,r3,80e790 <__smakebuf_r+0x1b0>
  80e648:	8140038f 	ldh	r5,14(r16)
  80e64c:	8809883a 	mov	r4,r17
  80e650:	08126540 	call	812654 <_isatty_r>
  80e654:	10004c26 	beq	r2,zero,80e788 <__smakebuf_r+0x1a8>
  80e658:	8080030b 	ldhu	r2,12(r16)
  80e65c:	80c010c4 	addi	r3,r16,67
  80e660:	80c00015 	stw	r3,0(r16)
  80e664:	10800054 	ori	r2,r2,1
  80e668:	8080030d 	sth	r2,12(r16)
  80e66c:	00800044 	movi	r2,1
  80e670:	80c00415 	stw	r3,16(r16)
  80e674:	80800515 	stw	r2,20(r16)
  80e678:	04810004 	movi	r18,1024
  80e67c:	00000706 	br	80e69c <__smakebuf_r+0xbc>
  80e680:	8080030b 	ldhu	r2,12(r16)
  80e684:	10c0200c 	andi	r3,r2,128
  80e688:	18001f1e 	bne	r3,zero,80e708 <__smakebuf_r+0x128>
  80e68c:	04810004 	movi	r18,1024
  80e690:	10820014 	ori	r2,r2,2048
  80e694:	8080030d 	sth	r2,12(r16)
  80e698:	0027883a 	mov	r19,zero
  80e69c:	900b883a 	mov	r5,r18
  80e6a0:	8809883a 	mov	r4,r17
  80e6a4:	080e79c0 	call	80e79c <_malloc_r>
  80e6a8:	10002c26 	beq	r2,zero,80e75c <__smakebuf_r+0x17c>
  80e6ac:	80c0030b 	ldhu	r3,12(r16)
  80e6b0:	01002074 	movhi	r4,129
  80e6b4:	2136ec04 	addi	r4,r4,-9296
  80e6b8:	89000f15 	stw	r4,60(r17)
  80e6bc:	18c02014 	ori	r3,r3,128
  80e6c0:	80c0030d 	sth	r3,12(r16)
  80e6c4:	80800015 	stw	r2,0(r16)
  80e6c8:	80800415 	stw	r2,16(r16)
  80e6cc:	84800515 	stw	r18,20(r16)
  80e6d0:	98001a1e 	bne	r19,zero,80e73c <__smakebuf_r+0x15c>
  80e6d4:	dfc01317 	ldw	ra,76(sp)
  80e6d8:	dcc01217 	ldw	r19,72(sp)
  80e6dc:	dc801117 	ldw	r18,68(sp)
  80e6e0:	dc401017 	ldw	r17,64(sp)
  80e6e4:	dc000f17 	ldw	r16,60(sp)
  80e6e8:	dec01404 	addi	sp,sp,80
  80e6ec:	f800283a 	ret
  80e6f0:	288010c4 	addi	r2,r5,67
  80e6f4:	28800015 	stw	r2,0(r5)
  80e6f8:	28800415 	stw	r2,16(r5)
  80e6fc:	00800044 	movi	r2,1
  80e700:	28800515 	stw	r2,20(r5)
  80e704:	f800283a 	ret
  80e708:	04801004 	movi	r18,64
  80e70c:	003fe006 	br	80e690 <__alt_mem_onchip_mem+0xff806690>
  80e710:	81000a17 	ldw	r4,40(r16)
  80e714:	00c02074 	movhi	r3,129
  80e718:	18c12604 	addi	r3,r3,1176
  80e71c:	20ffc51e 	bne	r4,r3,80e634 <__alt_mem_onchip_mem+0xff806634>
  80e720:	8080030b 	ldhu	r2,12(r16)
  80e724:	04810004 	movi	r18,1024
  80e728:	84801315 	stw	r18,76(r16)
  80e72c:	1484b03a 	or	r2,r2,r18
  80e730:	8080030d 	sth	r2,12(r16)
  80e734:	0027883a 	mov	r19,zero
  80e738:	003fd806 	br	80e69c <__alt_mem_onchip_mem+0xff80669c>
  80e73c:	8140038f 	ldh	r5,14(r16)
  80e740:	8809883a 	mov	r4,r17
  80e744:	08126540 	call	812654 <_isatty_r>
  80e748:	103fe226 	beq	r2,zero,80e6d4 <__alt_mem_onchip_mem+0xff8066d4>
  80e74c:	8080030b 	ldhu	r2,12(r16)
  80e750:	10800054 	ori	r2,r2,1
  80e754:	8080030d 	sth	r2,12(r16)
  80e758:	003fde06 	br	80e6d4 <__alt_mem_onchip_mem+0xff8066d4>
  80e75c:	8080030b 	ldhu	r2,12(r16)
  80e760:	10c0800c 	andi	r3,r2,512
  80e764:	183fdb1e 	bne	r3,zero,80e6d4 <__alt_mem_onchip_mem+0xff8066d4>
  80e768:	10800094 	ori	r2,r2,2
  80e76c:	80c010c4 	addi	r3,r16,67
  80e770:	8080030d 	sth	r2,12(r16)
  80e774:	00800044 	movi	r2,1
  80e778:	80c00015 	stw	r3,0(r16)
  80e77c:	80c00415 	stw	r3,16(r16)
  80e780:	80800515 	stw	r2,20(r16)
  80e784:	003fd306 	br	80e6d4 <__alt_mem_onchip_mem+0xff8066d4>
  80e788:	04810004 	movi	r18,1024
  80e78c:	003fc306 	br	80e69c <__alt_mem_onchip_mem+0xff80669c>
  80e790:	0027883a 	mov	r19,zero
  80e794:	04810004 	movi	r18,1024
  80e798:	003fc006 	br	80e69c <__alt_mem_onchip_mem+0xff80669c>

0080e79c <_malloc_r>:
  80e79c:	defff504 	addi	sp,sp,-44
  80e7a0:	dc800315 	stw	r18,12(sp)
  80e7a4:	dfc00a15 	stw	ra,40(sp)
  80e7a8:	df000915 	stw	fp,36(sp)
  80e7ac:	ddc00815 	stw	r23,32(sp)
  80e7b0:	dd800715 	stw	r22,28(sp)
  80e7b4:	dd400615 	stw	r21,24(sp)
  80e7b8:	dd000515 	stw	r20,20(sp)
  80e7bc:	dcc00415 	stw	r19,16(sp)
  80e7c0:	dc400215 	stw	r17,8(sp)
  80e7c4:	dc000115 	stw	r16,4(sp)
  80e7c8:	288002c4 	addi	r2,r5,11
  80e7cc:	00c00584 	movi	r3,22
  80e7d0:	2025883a 	mov	r18,r4
  80e7d4:	18807f2e 	bgeu	r3,r2,80e9d4 <_malloc_r+0x238>
  80e7d8:	047ffe04 	movi	r17,-8
  80e7dc:	1462703a 	and	r17,r2,r17
  80e7e0:	8800a316 	blt	r17,zero,80ea70 <_malloc_r+0x2d4>
  80e7e4:	8940a236 	bltu	r17,r5,80ea70 <_malloc_r+0x2d4>
  80e7e8:	08151040 	call	815104 <__malloc_lock>
  80e7ec:	00807dc4 	movi	r2,503
  80e7f0:	1441e92e 	bgeu	r2,r17,80ef98 <_malloc_r+0x7fc>
  80e7f4:	8804d27a 	srli	r2,r17,9
  80e7f8:	1000a126 	beq	r2,zero,80ea80 <_malloc_r+0x2e4>
  80e7fc:	00c00104 	movi	r3,4
  80e800:	18811e36 	bltu	r3,r2,80ec7c <_malloc_r+0x4e0>
  80e804:	8804d1ba 	srli	r2,r17,6
  80e808:	12000e44 	addi	r8,r2,57
  80e80c:	11c00e04 	addi	r7,r2,56
  80e810:	4209883a 	add	r4,r8,r8
  80e814:	04c020b4 	movhi	r19,130
  80e818:	2109883a 	add	r4,r4,r4
  80e81c:	9ce4d504 	addi	r19,r19,-27820
  80e820:	2109883a 	add	r4,r4,r4
  80e824:	9909883a 	add	r4,r19,r4
  80e828:	24000117 	ldw	r16,4(r4)
  80e82c:	213ffe04 	addi	r4,r4,-8
  80e830:	24009726 	beq	r4,r16,80ea90 <_malloc_r+0x2f4>
  80e834:	80800117 	ldw	r2,4(r16)
  80e838:	01bfff04 	movi	r6,-4
  80e83c:	014003c4 	movi	r5,15
  80e840:	1184703a 	and	r2,r2,r6
  80e844:	1447c83a 	sub	r3,r2,r17
  80e848:	28c00716 	blt	r5,r3,80e868 <_malloc_r+0xcc>
  80e84c:	1800920e 	bge	r3,zero,80ea98 <_malloc_r+0x2fc>
  80e850:	84000317 	ldw	r16,12(r16)
  80e854:	24008e26 	beq	r4,r16,80ea90 <_malloc_r+0x2f4>
  80e858:	80800117 	ldw	r2,4(r16)
  80e85c:	1184703a 	and	r2,r2,r6
  80e860:	1447c83a 	sub	r3,r2,r17
  80e864:	28fff90e 	bge	r5,r3,80e84c <__alt_mem_onchip_mem+0xff80684c>
  80e868:	3809883a 	mov	r4,r7
  80e86c:	018020b4 	movhi	r6,130
  80e870:	9c000417 	ldw	r16,16(r19)
  80e874:	31a4d504 	addi	r6,r6,-27820
  80e878:	32000204 	addi	r8,r6,8
  80e87c:	82013426 	beq	r16,r8,80ed50 <_malloc_r+0x5b4>
  80e880:	80c00117 	ldw	r3,4(r16)
  80e884:	00bfff04 	movi	r2,-4
  80e888:	188e703a 	and	r7,r3,r2
  80e88c:	3c45c83a 	sub	r2,r7,r17
  80e890:	00c003c4 	movi	r3,15
  80e894:	18811f16 	blt	r3,r2,80ed14 <_malloc_r+0x578>
  80e898:	32000515 	stw	r8,20(r6)
  80e89c:	32000415 	stw	r8,16(r6)
  80e8a0:	10007f0e 	bge	r2,zero,80eaa0 <_malloc_r+0x304>
  80e8a4:	00807fc4 	movi	r2,511
  80e8a8:	11c0fd36 	bltu	r2,r7,80eca0 <_malloc_r+0x504>
  80e8ac:	3806d0fa 	srli	r3,r7,3
  80e8b0:	01c00044 	movi	r7,1
  80e8b4:	30800117 	ldw	r2,4(r6)
  80e8b8:	19400044 	addi	r5,r3,1
  80e8bc:	294b883a 	add	r5,r5,r5
  80e8c0:	1807d0ba 	srai	r3,r3,2
  80e8c4:	294b883a 	add	r5,r5,r5
  80e8c8:	294b883a 	add	r5,r5,r5
  80e8cc:	298b883a 	add	r5,r5,r6
  80e8d0:	38c6983a 	sll	r3,r7,r3
  80e8d4:	29c00017 	ldw	r7,0(r5)
  80e8d8:	2a7ffe04 	addi	r9,r5,-8
  80e8dc:	1886b03a 	or	r3,r3,r2
  80e8e0:	82400315 	stw	r9,12(r16)
  80e8e4:	81c00215 	stw	r7,8(r16)
  80e8e8:	30c00115 	stw	r3,4(r6)
  80e8ec:	2c000015 	stw	r16,0(r5)
  80e8f0:	3c000315 	stw	r16,12(r7)
  80e8f4:	2005d0ba 	srai	r2,r4,2
  80e8f8:	01400044 	movi	r5,1
  80e8fc:	288a983a 	sll	r5,r5,r2
  80e900:	19406f36 	bltu	r3,r5,80eac0 <_malloc_r+0x324>
  80e904:	28c4703a 	and	r2,r5,r3
  80e908:	10000a1e 	bne	r2,zero,80e934 <_malloc_r+0x198>
  80e90c:	00bfff04 	movi	r2,-4
  80e910:	294b883a 	add	r5,r5,r5
  80e914:	2088703a 	and	r4,r4,r2
  80e918:	28c4703a 	and	r2,r5,r3
  80e91c:	21000104 	addi	r4,r4,4
  80e920:	1000041e 	bne	r2,zero,80e934 <_malloc_r+0x198>
  80e924:	294b883a 	add	r5,r5,r5
  80e928:	28c4703a 	and	r2,r5,r3
  80e92c:	21000104 	addi	r4,r4,4
  80e930:	103ffc26 	beq	r2,zero,80e924 <__alt_mem_onchip_mem+0xff806924>
  80e934:	02bfff04 	movi	r10,-4
  80e938:	024003c4 	movi	r9,15
  80e93c:	21800044 	addi	r6,r4,1
  80e940:	318d883a 	add	r6,r6,r6
  80e944:	318d883a 	add	r6,r6,r6
  80e948:	318d883a 	add	r6,r6,r6
  80e94c:	998d883a 	add	r6,r19,r6
  80e950:	333ffe04 	addi	r12,r6,-8
  80e954:	2017883a 	mov	r11,r4
  80e958:	31800104 	addi	r6,r6,4
  80e95c:	34000017 	ldw	r16,0(r6)
  80e960:	31fffd04 	addi	r7,r6,-12
  80e964:	81c0041e 	bne	r16,r7,80e978 <_malloc_r+0x1dc>
  80e968:	0000fb06 	br	80ed58 <_malloc_r+0x5bc>
  80e96c:	1801030e 	bge	r3,zero,80ed7c <_malloc_r+0x5e0>
  80e970:	84000317 	ldw	r16,12(r16)
  80e974:	81c0f826 	beq	r16,r7,80ed58 <_malloc_r+0x5bc>
  80e978:	80800117 	ldw	r2,4(r16)
  80e97c:	1284703a 	and	r2,r2,r10
  80e980:	1447c83a 	sub	r3,r2,r17
  80e984:	48fff90e 	bge	r9,r3,80e96c <__alt_mem_onchip_mem+0xff80696c>
  80e988:	80800317 	ldw	r2,12(r16)
  80e98c:	81000217 	ldw	r4,8(r16)
  80e990:	89400054 	ori	r5,r17,1
  80e994:	81400115 	stw	r5,4(r16)
  80e998:	20800315 	stw	r2,12(r4)
  80e99c:	11000215 	stw	r4,8(r2)
  80e9a0:	8463883a 	add	r17,r16,r17
  80e9a4:	9c400515 	stw	r17,20(r19)
  80e9a8:	9c400415 	stw	r17,16(r19)
  80e9ac:	18800054 	ori	r2,r3,1
  80e9b0:	88800115 	stw	r2,4(r17)
  80e9b4:	8a000315 	stw	r8,12(r17)
  80e9b8:	8a000215 	stw	r8,8(r17)
  80e9bc:	88e3883a 	add	r17,r17,r3
  80e9c0:	88c00015 	stw	r3,0(r17)
  80e9c4:	9009883a 	mov	r4,r18
  80e9c8:	08151280 	call	815128 <__malloc_unlock>
  80e9cc:	80800204 	addi	r2,r16,8
  80e9d0:	00001b06 	br	80ea40 <_malloc_r+0x2a4>
  80e9d4:	04400404 	movi	r17,16
  80e9d8:	89402536 	bltu	r17,r5,80ea70 <_malloc_r+0x2d4>
  80e9dc:	08151040 	call	815104 <__malloc_lock>
  80e9e0:	00800184 	movi	r2,6
  80e9e4:	01000084 	movi	r4,2
  80e9e8:	04c020b4 	movhi	r19,130
  80e9ec:	1085883a 	add	r2,r2,r2
  80e9f0:	9ce4d504 	addi	r19,r19,-27820
  80e9f4:	1085883a 	add	r2,r2,r2
  80e9f8:	9885883a 	add	r2,r19,r2
  80e9fc:	14000117 	ldw	r16,4(r2)
  80ea00:	10fffe04 	addi	r3,r2,-8
  80ea04:	80c0d926 	beq	r16,r3,80ed6c <_malloc_r+0x5d0>
  80ea08:	80c00117 	ldw	r3,4(r16)
  80ea0c:	81000317 	ldw	r4,12(r16)
  80ea10:	00bfff04 	movi	r2,-4
  80ea14:	1884703a 	and	r2,r3,r2
  80ea18:	81400217 	ldw	r5,8(r16)
  80ea1c:	8085883a 	add	r2,r16,r2
  80ea20:	10c00117 	ldw	r3,4(r2)
  80ea24:	29000315 	stw	r4,12(r5)
  80ea28:	21400215 	stw	r5,8(r4)
  80ea2c:	18c00054 	ori	r3,r3,1
  80ea30:	10c00115 	stw	r3,4(r2)
  80ea34:	9009883a 	mov	r4,r18
  80ea38:	08151280 	call	815128 <__malloc_unlock>
  80ea3c:	80800204 	addi	r2,r16,8
  80ea40:	dfc00a17 	ldw	ra,40(sp)
  80ea44:	df000917 	ldw	fp,36(sp)
  80ea48:	ddc00817 	ldw	r23,32(sp)
  80ea4c:	dd800717 	ldw	r22,28(sp)
  80ea50:	dd400617 	ldw	r21,24(sp)
  80ea54:	dd000517 	ldw	r20,20(sp)
  80ea58:	dcc00417 	ldw	r19,16(sp)
  80ea5c:	dc800317 	ldw	r18,12(sp)
  80ea60:	dc400217 	ldw	r17,8(sp)
  80ea64:	dc000117 	ldw	r16,4(sp)
  80ea68:	dec00b04 	addi	sp,sp,44
  80ea6c:	f800283a 	ret
  80ea70:	00800304 	movi	r2,12
  80ea74:	90800015 	stw	r2,0(r18)
  80ea78:	0005883a 	mov	r2,zero
  80ea7c:	003ff006 	br	80ea40 <__alt_mem_onchip_mem+0xff806a40>
  80ea80:	01002004 	movi	r4,128
  80ea84:	02001004 	movi	r8,64
  80ea88:	01c00fc4 	movi	r7,63
  80ea8c:	003f6106 	br	80e814 <__alt_mem_onchip_mem+0xff806814>
  80ea90:	4009883a 	mov	r4,r8
  80ea94:	003f7506 	br	80e86c <__alt_mem_onchip_mem+0xff80686c>
  80ea98:	81000317 	ldw	r4,12(r16)
  80ea9c:	003fde06 	br	80ea18 <__alt_mem_onchip_mem+0xff806a18>
  80eaa0:	81c5883a 	add	r2,r16,r7
  80eaa4:	11400117 	ldw	r5,4(r2)
  80eaa8:	9009883a 	mov	r4,r18
  80eaac:	29400054 	ori	r5,r5,1
  80eab0:	11400115 	stw	r5,4(r2)
  80eab4:	08151280 	call	815128 <__malloc_unlock>
  80eab8:	80800204 	addi	r2,r16,8
  80eabc:	003fe006 	br	80ea40 <__alt_mem_onchip_mem+0xff806a40>
  80eac0:	9c000217 	ldw	r16,8(r19)
  80eac4:	00bfff04 	movi	r2,-4
  80eac8:	85800117 	ldw	r22,4(r16)
  80eacc:	b0ac703a 	and	r22,r22,r2
  80ead0:	b4400336 	bltu	r22,r17,80eae0 <_malloc_r+0x344>
  80ead4:	b445c83a 	sub	r2,r22,r17
  80ead8:	00c003c4 	movi	r3,15
  80eadc:	18805d16 	blt	r3,r2,80ec54 <_malloc_r+0x4b8>
  80eae0:	05c020b4 	movhi	r23,130
  80eae4:	008020b4 	movhi	r2,130
  80eae8:	10b22b04 	addi	r2,r2,-14164
  80eaec:	bdead504 	addi	r23,r23,-21676
  80eaf0:	15400017 	ldw	r21,0(r2)
  80eaf4:	b8c00017 	ldw	r3,0(r23)
  80eaf8:	00bfffc4 	movi	r2,-1
  80eafc:	858d883a 	add	r6,r16,r22
  80eb00:	8d6b883a 	add	r21,r17,r21
  80eb04:	1880ea26 	beq	r3,r2,80eeb0 <_malloc_r+0x714>
  80eb08:	ad4403c4 	addi	r21,r21,4111
  80eb0c:	00bc0004 	movi	r2,-4096
  80eb10:	a8aa703a 	and	r21,r21,r2
  80eb14:	a80b883a 	mov	r5,r21
  80eb18:	9009883a 	mov	r4,r18
  80eb1c:	d9800015 	stw	r6,0(sp)
  80eb20:	081036c0 	call	81036c <_sbrk_r>
  80eb24:	1029883a 	mov	r20,r2
  80eb28:	00bfffc4 	movi	r2,-1
  80eb2c:	d9800017 	ldw	r6,0(sp)
  80eb30:	a080e826 	beq	r20,r2,80eed4 <_malloc_r+0x738>
  80eb34:	a180a636 	bltu	r20,r6,80edd0 <_malloc_r+0x634>
  80eb38:	070020b4 	movhi	fp,130
  80eb3c:	e7323404 	addi	fp,fp,-14128
  80eb40:	e0800017 	ldw	r2,0(fp)
  80eb44:	a887883a 	add	r3,r21,r2
  80eb48:	e0c00015 	stw	r3,0(fp)
  80eb4c:	3500e626 	beq	r6,r20,80eee8 <_malloc_r+0x74c>
  80eb50:	b9000017 	ldw	r4,0(r23)
  80eb54:	00bfffc4 	movi	r2,-1
  80eb58:	2080ee26 	beq	r4,r2,80ef14 <_malloc_r+0x778>
  80eb5c:	a185c83a 	sub	r2,r20,r6
  80eb60:	10c5883a 	add	r2,r2,r3
  80eb64:	e0800015 	stw	r2,0(fp)
  80eb68:	a0c001cc 	andi	r3,r20,7
  80eb6c:	1800bc26 	beq	r3,zero,80ee60 <_malloc_r+0x6c4>
  80eb70:	a0e9c83a 	sub	r20,r20,r3
  80eb74:	00840204 	movi	r2,4104
  80eb78:	a5000204 	addi	r20,r20,8
  80eb7c:	10c7c83a 	sub	r3,r2,r3
  80eb80:	a545883a 	add	r2,r20,r21
  80eb84:	1083ffcc 	andi	r2,r2,4095
  80eb88:	18abc83a 	sub	r21,r3,r2
  80eb8c:	a80b883a 	mov	r5,r21
  80eb90:	9009883a 	mov	r4,r18
  80eb94:	081036c0 	call	81036c <_sbrk_r>
  80eb98:	00ffffc4 	movi	r3,-1
  80eb9c:	10c0e126 	beq	r2,r3,80ef24 <_malloc_r+0x788>
  80eba0:	1505c83a 	sub	r2,r2,r20
  80eba4:	1545883a 	add	r2,r2,r21
  80eba8:	10800054 	ori	r2,r2,1
  80ebac:	e0c00017 	ldw	r3,0(fp)
  80ebb0:	9d000215 	stw	r20,8(r19)
  80ebb4:	a0800115 	stw	r2,4(r20)
  80ebb8:	a8c7883a 	add	r3,r21,r3
  80ebbc:	e0c00015 	stw	r3,0(fp)
  80ebc0:	84c00e26 	beq	r16,r19,80ebfc <_malloc_r+0x460>
  80ebc4:	018003c4 	movi	r6,15
  80ebc8:	3580a72e 	bgeu	r6,r22,80ee68 <_malloc_r+0x6cc>
  80ebcc:	81400117 	ldw	r5,4(r16)
  80ebd0:	013ffe04 	movi	r4,-8
  80ebd4:	b0bffd04 	addi	r2,r22,-12
  80ebd8:	1104703a 	and	r2,r2,r4
  80ebdc:	2900004c 	andi	r4,r5,1
  80ebe0:	2088b03a 	or	r4,r4,r2
  80ebe4:	81000115 	stw	r4,4(r16)
  80ebe8:	01400144 	movi	r5,5
  80ebec:	8089883a 	add	r4,r16,r2
  80ebf0:	21400115 	stw	r5,4(r4)
  80ebf4:	21400215 	stw	r5,8(r4)
  80ebf8:	3080cd36 	bltu	r6,r2,80ef30 <_malloc_r+0x794>
  80ebfc:	008020b4 	movhi	r2,130
  80ec00:	10b22a04 	addi	r2,r2,-14168
  80ec04:	11000017 	ldw	r4,0(r2)
  80ec08:	20c0012e 	bgeu	r4,r3,80ec10 <_malloc_r+0x474>
  80ec0c:	10c00015 	stw	r3,0(r2)
  80ec10:	008020b4 	movhi	r2,130
  80ec14:	10b22904 	addi	r2,r2,-14172
  80ec18:	11000017 	ldw	r4,0(r2)
  80ec1c:	9c000217 	ldw	r16,8(r19)
  80ec20:	20c0012e 	bgeu	r4,r3,80ec28 <_malloc_r+0x48c>
  80ec24:	10c00015 	stw	r3,0(r2)
  80ec28:	80c00117 	ldw	r3,4(r16)
  80ec2c:	00bfff04 	movi	r2,-4
  80ec30:	1886703a 	and	r3,r3,r2
  80ec34:	1c45c83a 	sub	r2,r3,r17
  80ec38:	1c400236 	bltu	r3,r17,80ec44 <_malloc_r+0x4a8>
  80ec3c:	00c003c4 	movi	r3,15
  80ec40:	18800416 	blt	r3,r2,80ec54 <_malloc_r+0x4b8>
  80ec44:	9009883a 	mov	r4,r18
  80ec48:	08151280 	call	815128 <__malloc_unlock>
  80ec4c:	0005883a 	mov	r2,zero
  80ec50:	003f7b06 	br	80ea40 <__alt_mem_onchip_mem+0xff806a40>
  80ec54:	88c00054 	ori	r3,r17,1
  80ec58:	80c00115 	stw	r3,4(r16)
  80ec5c:	8463883a 	add	r17,r16,r17
  80ec60:	10800054 	ori	r2,r2,1
  80ec64:	9c400215 	stw	r17,8(r19)
  80ec68:	88800115 	stw	r2,4(r17)
  80ec6c:	9009883a 	mov	r4,r18
  80ec70:	08151280 	call	815128 <__malloc_unlock>
  80ec74:	80800204 	addi	r2,r16,8
  80ec78:	003f7106 	br	80ea40 <__alt_mem_onchip_mem+0xff806a40>
  80ec7c:	00c00504 	movi	r3,20
  80ec80:	18804a2e 	bgeu	r3,r2,80edac <_malloc_r+0x610>
  80ec84:	00c01504 	movi	r3,84
  80ec88:	18806e36 	bltu	r3,r2,80ee44 <_malloc_r+0x6a8>
  80ec8c:	8804d33a 	srli	r2,r17,12
  80ec90:	12001bc4 	addi	r8,r2,111
  80ec94:	11c01b84 	addi	r7,r2,110
  80ec98:	4209883a 	add	r4,r8,r8
  80ec9c:	003edd06 	br	80e814 <__alt_mem_onchip_mem+0xff806814>
  80eca0:	3804d27a 	srli	r2,r7,9
  80eca4:	00c00104 	movi	r3,4
  80eca8:	1880442e 	bgeu	r3,r2,80edbc <_malloc_r+0x620>
  80ecac:	00c00504 	movi	r3,20
  80ecb0:	18808136 	bltu	r3,r2,80eeb8 <_malloc_r+0x71c>
  80ecb4:	11401704 	addi	r5,r2,92
  80ecb8:	10c016c4 	addi	r3,r2,91
  80ecbc:	294b883a 	add	r5,r5,r5
  80ecc0:	294b883a 	add	r5,r5,r5
  80ecc4:	294b883a 	add	r5,r5,r5
  80ecc8:	994b883a 	add	r5,r19,r5
  80eccc:	28800017 	ldw	r2,0(r5)
  80ecd0:	018020b4 	movhi	r6,130
  80ecd4:	297ffe04 	addi	r5,r5,-8
  80ecd8:	31a4d504 	addi	r6,r6,-27820
  80ecdc:	28806526 	beq	r5,r2,80ee74 <_malloc_r+0x6d8>
  80ece0:	01bfff04 	movi	r6,-4
  80ece4:	10c00117 	ldw	r3,4(r2)
  80ece8:	1986703a 	and	r3,r3,r6
  80ecec:	38c0022e 	bgeu	r7,r3,80ecf8 <_malloc_r+0x55c>
  80ecf0:	10800217 	ldw	r2,8(r2)
  80ecf4:	28bffb1e 	bne	r5,r2,80ece4 <__alt_mem_onchip_mem+0xff806ce4>
  80ecf8:	11400317 	ldw	r5,12(r2)
  80ecfc:	98c00117 	ldw	r3,4(r19)
  80ed00:	81400315 	stw	r5,12(r16)
  80ed04:	80800215 	stw	r2,8(r16)
  80ed08:	2c000215 	stw	r16,8(r5)
  80ed0c:	14000315 	stw	r16,12(r2)
  80ed10:	003ef806 	br	80e8f4 <__alt_mem_onchip_mem+0xff8068f4>
  80ed14:	88c00054 	ori	r3,r17,1
  80ed18:	80c00115 	stw	r3,4(r16)
  80ed1c:	8463883a 	add	r17,r16,r17
  80ed20:	34400515 	stw	r17,20(r6)
  80ed24:	34400415 	stw	r17,16(r6)
  80ed28:	10c00054 	ori	r3,r2,1
  80ed2c:	8a000315 	stw	r8,12(r17)
  80ed30:	8a000215 	stw	r8,8(r17)
  80ed34:	88c00115 	stw	r3,4(r17)
  80ed38:	88a3883a 	add	r17,r17,r2
  80ed3c:	88800015 	stw	r2,0(r17)
  80ed40:	9009883a 	mov	r4,r18
  80ed44:	08151280 	call	815128 <__malloc_unlock>
  80ed48:	80800204 	addi	r2,r16,8
  80ed4c:	003f3c06 	br	80ea40 <__alt_mem_onchip_mem+0xff806a40>
  80ed50:	30c00117 	ldw	r3,4(r6)
  80ed54:	003ee706 	br	80e8f4 <__alt_mem_onchip_mem+0xff8068f4>
  80ed58:	5ac00044 	addi	r11,r11,1
  80ed5c:	588000cc 	andi	r2,r11,3
  80ed60:	31800204 	addi	r6,r6,8
  80ed64:	103efd1e 	bne	r2,zero,80e95c <__alt_mem_onchip_mem+0xff80695c>
  80ed68:	00002406 	br	80edfc <_malloc_r+0x660>
  80ed6c:	14000317 	ldw	r16,12(r2)
  80ed70:	143f251e 	bne	r2,r16,80ea08 <__alt_mem_onchip_mem+0xff806a08>
  80ed74:	21000084 	addi	r4,r4,2
  80ed78:	003ebc06 	br	80e86c <__alt_mem_onchip_mem+0xff80686c>
  80ed7c:	8085883a 	add	r2,r16,r2
  80ed80:	10c00117 	ldw	r3,4(r2)
  80ed84:	81000317 	ldw	r4,12(r16)
  80ed88:	81400217 	ldw	r5,8(r16)
  80ed8c:	18c00054 	ori	r3,r3,1
  80ed90:	10c00115 	stw	r3,4(r2)
  80ed94:	29000315 	stw	r4,12(r5)
  80ed98:	21400215 	stw	r5,8(r4)
  80ed9c:	9009883a 	mov	r4,r18
  80eda0:	08151280 	call	815128 <__malloc_unlock>
  80eda4:	80800204 	addi	r2,r16,8
  80eda8:	003f2506 	br	80ea40 <__alt_mem_onchip_mem+0xff806a40>
  80edac:	12001704 	addi	r8,r2,92
  80edb0:	11c016c4 	addi	r7,r2,91
  80edb4:	4209883a 	add	r4,r8,r8
  80edb8:	003e9606 	br	80e814 <__alt_mem_onchip_mem+0xff806814>
  80edbc:	3804d1ba 	srli	r2,r7,6
  80edc0:	11400e44 	addi	r5,r2,57
  80edc4:	10c00e04 	addi	r3,r2,56
  80edc8:	294b883a 	add	r5,r5,r5
  80edcc:	003fbc06 	br	80ecc0 <__alt_mem_onchip_mem+0xff806cc0>
  80edd0:	84ff5926 	beq	r16,r19,80eb38 <__alt_mem_onchip_mem+0xff806b38>
  80edd4:	008020b4 	movhi	r2,130
  80edd8:	10a4d504 	addi	r2,r2,-27820
  80eddc:	14000217 	ldw	r16,8(r2)
  80ede0:	00bfff04 	movi	r2,-4
  80ede4:	80c00117 	ldw	r3,4(r16)
  80ede8:	1886703a 	and	r3,r3,r2
  80edec:	003f9106 	br	80ec34 <__alt_mem_onchip_mem+0xff806c34>
  80edf0:	60800217 	ldw	r2,8(r12)
  80edf4:	213fffc4 	addi	r4,r4,-1
  80edf8:	1300651e 	bne	r2,r12,80ef90 <_malloc_r+0x7f4>
  80edfc:	208000cc 	andi	r2,r4,3
  80ee00:	633ffe04 	addi	r12,r12,-8
  80ee04:	103ffa1e 	bne	r2,zero,80edf0 <__alt_mem_onchip_mem+0xff806df0>
  80ee08:	98800117 	ldw	r2,4(r19)
  80ee0c:	0146303a 	nor	r3,zero,r5
  80ee10:	1884703a 	and	r2,r3,r2
  80ee14:	98800115 	stw	r2,4(r19)
  80ee18:	294b883a 	add	r5,r5,r5
  80ee1c:	117f2836 	bltu	r2,r5,80eac0 <__alt_mem_onchip_mem+0xff806ac0>
  80ee20:	283f2726 	beq	r5,zero,80eac0 <__alt_mem_onchip_mem+0xff806ac0>
  80ee24:	2886703a 	and	r3,r5,r2
  80ee28:	5809883a 	mov	r4,r11
  80ee2c:	183ec31e 	bne	r3,zero,80e93c <__alt_mem_onchip_mem+0xff80693c>
  80ee30:	294b883a 	add	r5,r5,r5
  80ee34:	2886703a 	and	r3,r5,r2
  80ee38:	21000104 	addi	r4,r4,4
  80ee3c:	183ffc26 	beq	r3,zero,80ee30 <__alt_mem_onchip_mem+0xff806e30>
  80ee40:	003ebe06 	br	80e93c <__alt_mem_onchip_mem+0xff80693c>
  80ee44:	00c05504 	movi	r3,340
  80ee48:	18801236 	bltu	r3,r2,80ee94 <_malloc_r+0x6f8>
  80ee4c:	8804d3fa 	srli	r2,r17,15
  80ee50:	12001e04 	addi	r8,r2,120
  80ee54:	11c01dc4 	addi	r7,r2,119
  80ee58:	4209883a 	add	r4,r8,r8
  80ee5c:	003e6d06 	br	80e814 <__alt_mem_onchip_mem+0xff806814>
  80ee60:	00c40004 	movi	r3,4096
  80ee64:	003f4606 	br	80eb80 <__alt_mem_onchip_mem+0xff806b80>
  80ee68:	00800044 	movi	r2,1
  80ee6c:	a0800115 	stw	r2,4(r20)
  80ee70:	003f7406 	br	80ec44 <__alt_mem_onchip_mem+0xff806c44>
  80ee74:	1805d0ba 	srai	r2,r3,2
  80ee78:	01c00044 	movi	r7,1
  80ee7c:	30c00117 	ldw	r3,4(r6)
  80ee80:	388e983a 	sll	r7,r7,r2
  80ee84:	2805883a 	mov	r2,r5
  80ee88:	38c6b03a 	or	r3,r7,r3
  80ee8c:	30c00115 	stw	r3,4(r6)
  80ee90:	003f9b06 	br	80ed00 <__alt_mem_onchip_mem+0xff806d00>
  80ee94:	00c15504 	movi	r3,1364
  80ee98:	18801a36 	bltu	r3,r2,80ef04 <_malloc_r+0x768>
  80ee9c:	8804d4ba 	srli	r2,r17,18
  80eea0:	12001f44 	addi	r8,r2,125
  80eea4:	11c01f04 	addi	r7,r2,124
  80eea8:	4209883a 	add	r4,r8,r8
  80eeac:	003e5906 	br	80e814 <__alt_mem_onchip_mem+0xff806814>
  80eeb0:	ad400404 	addi	r21,r21,16
  80eeb4:	003f1706 	br	80eb14 <__alt_mem_onchip_mem+0xff806b14>
  80eeb8:	00c01504 	movi	r3,84
  80eebc:	18802336 	bltu	r3,r2,80ef4c <_malloc_r+0x7b0>
  80eec0:	3804d33a 	srli	r2,r7,12
  80eec4:	11401bc4 	addi	r5,r2,111
  80eec8:	10c01b84 	addi	r3,r2,110
  80eecc:	294b883a 	add	r5,r5,r5
  80eed0:	003f7b06 	br	80ecc0 <__alt_mem_onchip_mem+0xff806cc0>
  80eed4:	9c000217 	ldw	r16,8(r19)
  80eed8:	00bfff04 	movi	r2,-4
  80eedc:	80c00117 	ldw	r3,4(r16)
  80eee0:	1886703a 	and	r3,r3,r2
  80eee4:	003f5306 	br	80ec34 <__alt_mem_onchip_mem+0xff806c34>
  80eee8:	3083ffcc 	andi	r2,r6,4095
  80eeec:	103f181e 	bne	r2,zero,80eb50 <__alt_mem_onchip_mem+0xff806b50>
  80eef0:	99000217 	ldw	r4,8(r19)
  80eef4:	b545883a 	add	r2,r22,r21
  80eef8:	10800054 	ori	r2,r2,1
  80eefc:	20800115 	stw	r2,4(r4)
  80ef00:	003f3e06 	br	80ebfc <__alt_mem_onchip_mem+0xff806bfc>
  80ef04:	01003f84 	movi	r4,254
  80ef08:	02001fc4 	movi	r8,127
  80ef0c:	01c01f84 	movi	r7,126
  80ef10:	003e4006 	br	80e814 <__alt_mem_onchip_mem+0xff806814>
  80ef14:	008020b4 	movhi	r2,130
  80ef18:	10aad504 	addi	r2,r2,-21676
  80ef1c:	15000015 	stw	r20,0(r2)
  80ef20:	003f1106 	br	80eb68 <__alt_mem_onchip_mem+0xff806b68>
  80ef24:	00800044 	movi	r2,1
  80ef28:	002b883a 	mov	r21,zero
  80ef2c:	003f1f06 	br	80ebac <__alt_mem_onchip_mem+0xff806bac>
  80ef30:	81400204 	addi	r5,r16,8
  80ef34:	9009883a 	mov	r4,r18
  80ef38:	080e06c0 	call	80e06c <_free_r>
  80ef3c:	008020b4 	movhi	r2,130
  80ef40:	10b23404 	addi	r2,r2,-14128
  80ef44:	10c00017 	ldw	r3,0(r2)
  80ef48:	003f2c06 	br	80ebfc <__alt_mem_onchip_mem+0xff806bfc>
  80ef4c:	00c05504 	movi	r3,340
  80ef50:	18800536 	bltu	r3,r2,80ef68 <_malloc_r+0x7cc>
  80ef54:	3804d3fa 	srli	r2,r7,15
  80ef58:	11401e04 	addi	r5,r2,120
  80ef5c:	10c01dc4 	addi	r3,r2,119
  80ef60:	294b883a 	add	r5,r5,r5
  80ef64:	003f5606 	br	80ecc0 <__alt_mem_onchip_mem+0xff806cc0>
  80ef68:	00c15504 	movi	r3,1364
  80ef6c:	18800536 	bltu	r3,r2,80ef84 <_malloc_r+0x7e8>
  80ef70:	3804d4ba 	srli	r2,r7,18
  80ef74:	11401f44 	addi	r5,r2,125
  80ef78:	10c01f04 	addi	r3,r2,124
  80ef7c:	294b883a 	add	r5,r5,r5
  80ef80:	003f4f06 	br	80ecc0 <__alt_mem_onchip_mem+0xff806cc0>
  80ef84:	01403f84 	movi	r5,254
  80ef88:	00c01f84 	movi	r3,126
  80ef8c:	003f4c06 	br	80ecc0 <__alt_mem_onchip_mem+0xff806cc0>
  80ef90:	98800117 	ldw	r2,4(r19)
  80ef94:	003fa006 	br	80ee18 <__alt_mem_onchip_mem+0xff806e18>
  80ef98:	8808d0fa 	srli	r4,r17,3
  80ef9c:	20800044 	addi	r2,r4,1
  80efa0:	1085883a 	add	r2,r2,r2
  80efa4:	003e9006 	br	80e9e8 <__alt_mem_onchip_mem+0xff8069e8>

0080efa8 <memchr>:
  80efa8:	208000cc 	andi	r2,r4,3
  80efac:	280f883a 	mov	r7,r5
  80efb0:	10003426 	beq	r2,zero,80f084 <memchr+0xdc>
  80efb4:	30bfffc4 	addi	r2,r6,-1
  80efb8:	30001a26 	beq	r6,zero,80f024 <memchr+0x7c>
  80efbc:	20c00003 	ldbu	r3,0(r4)
  80efc0:	29803fcc 	andi	r6,r5,255
  80efc4:	30c0051e 	bne	r6,r3,80efdc <memchr+0x34>
  80efc8:	00001806 	br	80f02c <memchr+0x84>
  80efcc:	10001526 	beq	r2,zero,80f024 <memchr+0x7c>
  80efd0:	20c00003 	ldbu	r3,0(r4)
  80efd4:	10bfffc4 	addi	r2,r2,-1
  80efd8:	30c01426 	beq	r6,r3,80f02c <memchr+0x84>
  80efdc:	21000044 	addi	r4,r4,1
  80efe0:	20c000cc 	andi	r3,r4,3
  80efe4:	183ff91e 	bne	r3,zero,80efcc <__alt_mem_onchip_mem+0xff806fcc>
  80efe8:	020000c4 	movi	r8,3
  80efec:	40801136 	bltu	r8,r2,80f034 <memchr+0x8c>
  80eff0:	10000c26 	beq	r2,zero,80f024 <memchr+0x7c>
  80eff4:	20c00003 	ldbu	r3,0(r4)
  80eff8:	29403fcc 	andi	r5,r5,255
  80effc:	28c00b26 	beq	r5,r3,80f02c <memchr+0x84>
  80f000:	20c00044 	addi	r3,r4,1
  80f004:	39803fcc 	andi	r6,r7,255
  80f008:	2089883a 	add	r4,r4,r2
  80f00c:	00000306 	br	80f01c <memchr+0x74>
  80f010:	18c00044 	addi	r3,r3,1
  80f014:	197fffc3 	ldbu	r5,-1(r3)
  80f018:	31400526 	beq	r6,r5,80f030 <memchr+0x88>
  80f01c:	1805883a 	mov	r2,r3
  80f020:	20fffb1e 	bne	r4,r3,80f010 <__alt_mem_onchip_mem+0xff807010>
  80f024:	0005883a 	mov	r2,zero
  80f028:	f800283a 	ret
  80f02c:	2005883a 	mov	r2,r4
  80f030:	f800283a 	ret
  80f034:	28c03fcc 	andi	r3,r5,255
  80f038:	1812923a 	slli	r9,r3,8
  80f03c:	02ffbff4 	movhi	r11,65279
  80f040:	02a02074 	movhi	r10,32897
  80f044:	48d2b03a 	or	r9,r9,r3
  80f048:	4806943a 	slli	r3,r9,16
  80f04c:	5affbfc4 	addi	r11,r11,-257
  80f050:	52a02004 	addi	r10,r10,-32640
  80f054:	48d2b03a 	or	r9,r9,r3
  80f058:	20c00017 	ldw	r3,0(r4)
  80f05c:	48c6f03a 	xor	r3,r9,r3
  80f060:	1acd883a 	add	r6,r3,r11
  80f064:	00c6303a 	nor	r3,zero,r3
  80f068:	30c6703a 	and	r3,r6,r3
  80f06c:	1a86703a 	and	r3,r3,r10
  80f070:	183fe01e 	bne	r3,zero,80eff4 <__alt_mem_onchip_mem+0xff806ff4>
  80f074:	10bfff04 	addi	r2,r2,-4
  80f078:	21000104 	addi	r4,r4,4
  80f07c:	40bff636 	bltu	r8,r2,80f058 <__alt_mem_onchip_mem+0xff807058>
  80f080:	003fdb06 	br	80eff0 <__alt_mem_onchip_mem+0xff806ff0>
  80f084:	3005883a 	mov	r2,r6
  80f088:	003fd706 	br	80efe8 <__alt_mem_onchip_mem+0xff806fe8>

0080f08c <memcpy>:
  80f08c:	defffd04 	addi	sp,sp,-12
  80f090:	dfc00215 	stw	ra,8(sp)
  80f094:	dc400115 	stw	r17,4(sp)
  80f098:	dc000015 	stw	r16,0(sp)
  80f09c:	00c003c4 	movi	r3,15
  80f0a0:	2005883a 	mov	r2,r4
  80f0a4:	1980452e 	bgeu	r3,r6,80f1bc <memcpy+0x130>
  80f0a8:	2906b03a 	or	r3,r5,r4
  80f0ac:	18c000cc 	andi	r3,r3,3
  80f0b0:	1800441e 	bne	r3,zero,80f1c4 <memcpy+0x138>
  80f0b4:	347ffc04 	addi	r17,r6,-16
  80f0b8:	8822d13a 	srli	r17,r17,4
  80f0bc:	28c00104 	addi	r3,r5,4
  80f0c0:	23400104 	addi	r13,r4,4
  80f0c4:	8820913a 	slli	r16,r17,4
  80f0c8:	2b000204 	addi	r12,r5,8
  80f0cc:	22c00204 	addi	r11,r4,8
  80f0d0:	84000504 	addi	r16,r16,20
  80f0d4:	2a800304 	addi	r10,r5,12
  80f0d8:	22400304 	addi	r9,r4,12
  80f0dc:	2c21883a 	add	r16,r5,r16
  80f0e0:	2811883a 	mov	r8,r5
  80f0e4:	200f883a 	mov	r7,r4
  80f0e8:	41000017 	ldw	r4,0(r8)
  80f0ec:	1fc00017 	ldw	ra,0(r3)
  80f0f0:	63c00017 	ldw	r15,0(r12)
  80f0f4:	39000015 	stw	r4,0(r7)
  80f0f8:	53800017 	ldw	r14,0(r10)
  80f0fc:	6fc00015 	stw	ra,0(r13)
  80f100:	5bc00015 	stw	r15,0(r11)
  80f104:	4b800015 	stw	r14,0(r9)
  80f108:	18c00404 	addi	r3,r3,16
  80f10c:	39c00404 	addi	r7,r7,16
  80f110:	42000404 	addi	r8,r8,16
  80f114:	6b400404 	addi	r13,r13,16
  80f118:	63000404 	addi	r12,r12,16
  80f11c:	5ac00404 	addi	r11,r11,16
  80f120:	52800404 	addi	r10,r10,16
  80f124:	4a400404 	addi	r9,r9,16
  80f128:	1c3fef1e 	bne	r3,r16,80f0e8 <__alt_mem_onchip_mem+0xff8070e8>
  80f12c:	89c00044 	addi	r7,r17,1
  80f130:	380e913a 	slli	r7,r7,4
  80f134:	310003cc 	andi	r4,r6,15
  80f138:	02c000c4 	movi	r11,3
  80f13c:	11c7883a 	add	r3,r2,r7
  80f140:	29cb883a 	add	r5,r5,r7
  80f144:	5900212e 	bgeu	r11,r4,80f1cc <memcpy+0x140>
  80f148:	1813883a 	mov	r9,r3
  80f14c:	2811883a 	mov	r8,r5
  80f150:	200f883a 	mov	r7,r4
  80f154:	42800017 	ldw	r10,0(r8)
  80f158:	4a400104 	addi	r9,r9,4
  80f15c:	39ffff04 	addi	r7,r7,-4
  80f160:	4abfff15 	stw	r10,-4(r9)
  80f164:	42000104 	addi	r8,r8,4
  80f168:	59fffa36 	bltu	r11,r7,80f154 <__alt_mem_onchip_mem+0xff807154>
  80f16c:	213fff04 	addi	r4,r4,-4
  80f170:	2008d0ba 	srli	r4,r4,2
  80f174:	318000cc 	andi	r6,r6,3
  80f178:	21000044 	addi	r4,r4,1
  80f17c:	2109883a 	add	r4,r4,r4
  80f180:	2109883a 	add	r4,r4,r4
  80f184:	1907883a 	add	r3,r3,r4
  80f188:	290b883a 	add	r5,r5,r4
  80f18c:	30000626 	beq	r6,zero,80f1a8 <memcpy+0x11c>
  80f190:	198d883a 	add	r6,r3,r6
  80f194:	29c00003 	ldbu	r7,0(r5)
  80f198:	18c00044 	addi	r3,r3,1
  80f19c:	29400044 	addi	r5,r5,1
  80f1a0:	19ffffc5 	stb	r7,-1(r3)
  80f1a4:	19bffb1e 	bne	r3,r6,80f194 <__alt_mem_onchip_mem+0xff807194>
  80f1a8:	dfc00217 	ldw	ra,8(sp)
  80f1ac:	dc400117 	ldw	r17,4(sp)
  80f1b0:	dc000017 	ldw	r16,0(sp)
  80f1b4:	dec00304 	addi	sp,sp,12
  80f1b8:	f800283a 	ret
  80f1bc:	2007883a 	mov	r3,r4
  80f1c0:	003ff206 	br	80f18c <__alt_mem_onchip_mem+0xff80718c>
  80f1c4:	2007883a 	mov	r3,r4
  80f1c8:	003ff106 	br	80f190 <__alt_mem_onchip_mem+0xff807190>
  80f1cc:	200d883a 	mov	r6,r4
  80f1d0:	003fee06 	br	80f18c <__alt_mem_onchip_mem+0xff80718c>

0080f1d4 <memset>:
  80f1d4:	20c000cc 	andi	r3,r4,3
  80f1d8:	2005883a 	mov	r2,r4
  80f1dc:	18004426 	beq	r3,zero,80f2f0 <memset+0x11c>
  80f1e0:	31ffffc4 	addi	r7,r6,-1
  80f1e4:	30004026 	beq	r6,zero,80f2e8 <memset+0x114>
  80f1e8:	2813883a 	mov	r9,r5
  80f1ec:	200d883a 	mov	r6,r4
  80f1f0:	2007883a 	mov	r3,r4
  80f1f4:	00000406 	br	80f208 <memset+0x34>
  80f1f8:	3a3fffc4 	addi	r8,r7,-1
  80f1fc:	31800044 	addi	r6,r6,1
  80f200:	38003926 	beq	r7,zero,80f2e8 <memset+0x114>
  80f204:	400f883a 	mov	r7,r8
  80f208:	18c00044 	addi	r3,r3,1
  80f20c:	32400005 	stb	r9,0(r6)
  80f210:	1a0000cc 	andi	r8,r3,3
  80f214:	403ff81e 	bne	r8,zero,80f1f8 <__alt_mem_onchip_mem+0xff8071f8>
  80f218:	010000c4 	movi	r4,3
  80f21c:	21c02d2e 	bgeu	r4,r7,80f2d4 <memset+0x100>
  80f220:	29003fcc 	andi	r4,r5,255
  80f224:	200c923a 	slli	r6,r4,8
  80f228:	3108b03a 	or	r4,r6,r4
  80f22c:	200c943a 	slli	r6,r4,16
  80f230:	218cb03a 	or	r6,r4,r6
  80f234:	010003c4 	movi	r4,15
  80f238:	21c0182e 	bgeu	r4,r7,80f29c <memset+0xc8>
  80f23c:	3b3ffc04 	addi	r12,r7,-16
  80f240:	6018d13a 	srli	r12,r12,4
  80f244:	1a000104 	addi	r8,r3,4
  80f248:	1ac00204 	addi	r11,r3,8
  80f24c:	6008913a 	slli	r4,r12,4
  80f250:	1a800304 	addi	r10,r3,12
  80f254:	1813883a 	mov	r9,r3
  80f258:	21000504 	addi	r4,r4,20
  80f25c:	1909883a 	add	r4,r3,r4
  80f260:	49800015 	stw	r6,0(r9)
  80f264:	41800015 	stw	r6,0(r8)
  80f268:	59800015 	stw	r6,0(r11)
  80f26c:	51800015 	stw	r6,0(r10)
  80f270:	42000404 	addi	r8,r8,16
  80f274:	4a400404 	addi	r9,r9,16
  80f278:	5ac00404 	addi	r11,r11,16
  80f27c:	52800404 	addi	r10,r10,16
  80f280:	413ff71e 	bne	r8,r4,80f260 <__alt_mem_onchip_mem+0xff807260>
  80f284:	63000044 	addi	r12,r12,1
  80f288:	6018913a 	slli	r12,r12,4
  80f28c:	39c003cc 	andi	r7,r7,15
  80f290:	010000c4 	movi	r4,3
  80f294:	1b07883a 	add	r3,r3,r12
  80f298:	21c00e2e 	bgeu	r4,r7,80f2d4 <memset+0x100>
  80f29c:	1813883a 	mov	r9,r3
  80f2a0:	3811883a 	mov	r8,r7
  80f2a4:	010000c4 	movi	r4,3
  80f2a8:	49800015 	stw	r6,0(r9)
  80f2ac:	423fff04 	addi	r8,r8,-4
  80f2b0:	4a400104 	addi	r9,r9,4
  80f2b4:	223ffc36 	bltu	r4,r8,80f2a8 <__alt_mem_onchip_mem+0xff8072a8>
  80f2b8:	393fff04 	addi	r4,r7,-4
  80f2bc:	2008d0ba 	srli	r4,r4,2
  80f2c0:	39c000cc 	andi	r7,r7,3
  80f2c4:	21000044 	addi	r4,r4,1
  80f2c8:	2109883a 	add	r4,r4,r4
  80f2cc:	2109883a 	add	r4,r4,r4
  80f2d0:	1907883a 	add	r3,r3,r4
  80f2d4:	38000526 	beq	r7,zero,80f2ec <memset+0x118>
  80f2d8:	19cf883a 	add	r7,r3,r7
  80f2dc:	19400005 	stb	r5,0(r3)
  80f2e0:	18c00044 	addi	r3,r3,1
  80f2e4:	38fffd1e 	bne	r7,r3,80f2dc <__alt_mem_onchip_mem+0xff8072dc>
  80f2e8:	f800283a 	ret
  80f2ec:	f800283a 	ret
  80f2f0:	2007883a 	mov	r3,r4
  80f2f4:	300f883a 	mov	r7,r6
  80f2f8:	003fc706 	br	80f218 <__alt_mem_onchip_mem+0xff807218>

0080f2fc <_Balloc>:
  80f2fc:	20801317 	ldw	r2,76(r4)
  80f300:	defffc04 	addi	sp,sp,-16
  80f304:	dc400115 	stw	r17,4(sp)
  80f308:	dc000015 	stw	r16,0(sp)
  80f30c:	dfc00315 	stw	ra,12(sp)
  80f310:	dc800215 	stw	r18,8(sp)
  80f314:	2023883a 	mov	r17,r4
  80f318:	2821883a 	mov	r16,r5
  80f31c:	10000f26 	beq	r2,zero,80f35c <_Balloc+0x60>
  80f320:	8407883a 	add	r3,r16,r16
  80f324:	18c7883a 	add	r3,r3,r3
  80f328:	10c7883a 	add	r3,r2,r3
  80f32c:	18800017 	ldw	r2,0(r3)
  80f330:	10001126 	beq	r2,zero,80f378 <_Balloc+0x7c>
  80f334:	11000017 	ldw	r4,0(r2)
  80f338:	19000015 	stw	r4,0(r3)
  80f33c:	10000415 	stw	zero,16(r2)
  80f340:	10000315 	stw	zero,12(r2)
  80f344:	dfc00317 	ldw	ra,12(sp)
  80f348:	dc800217 	ldw	r18,8(sp)
  80f34c:	dc400117 	ldw	r17,4(sp)
  80f350:	dc000017 	ldw	r16,0(sp)
  80f354:	dec00404 	addi	sp,sp,16
  80f358:	f800283a 	ret
  80f35c:	01800844 	movi	r6,33
  80f360:	01400104 	movi	r5,4
  80f364:	0811d6c0 	call	811d6c <_calloc_r>
  80f368:	88801315 	stw	r2,76(r17)
  80f36c:	103fec1e 	bne	r2,zero,80f320 <__alt_mem_onchip_mem+0xff807320>
  80f370:	0005883a 	mov	r2,zero
  80f374:	003ff306 	br	80f344 <__alt_mem_onchip_mem+0xff807344>
  80f378:	01400044 	movi	r5,1
  80f37c:	2c24983a 	sll	r18,r5,r16
  80f380:	8809883a 	mov	r4,r17
  80f384:	91800144 	addi	r6,r18,5
  80f388:	318d883a 	add	r6,r6,r6
  80f38c:	318d883a 	add	r6,r6,r6
  80f390:	0811d6c0 	call	811d6c <_calloc_r>
  80f394:	103ff626 	beq	r2,zero,80f370 <__alt_mem_onchip_mem+0xff807370>
  80f398:	14000115 	stw	r16,4(r2)
  80f39c:	14800215 	stw	r18,8(r2)
  80f3a0:	003fe606 	br	80f33c <__alt_mem_onchip_mem+0xff80733c>

0080f3a4 <_Bfree>:
  80f3a4:	28000826 	beq	r5,zero,80f3c8 <_Bfree+0x24>
  80f3a8:	28c00117 	ldw	r3,4(r5)
  80f3ac:	20801317 	ldw	r2,76(r4)
  80f3b0:	18c7883a 	add	r3,r3,r3
  80f3b4:	18c7883a 	add	r3,r3,r3
  80f3b8:	10c5883a 	add	r2,r2,r3
  80f3bc:	10c00017 	ldw	r3,0(r2)
  80f3c0:	28c00015 	stw	r3,0(r5)
  80f3c4:	11400015 	stw	r5,0(r2)
  80f3c8:	f800283a 	ret

0080f3cc <__multadd>:
  80f3cc:	defffa04 	addi	sp,sp,-24
  80f3d0:	dc800315 	stw	r18,12(sp)
  80f3d4:	dc400215 	stw	r17,8(sp)
  80f3d8:	dc000115 	stw	r16,4(sp)
  80f3dc:	2823883a 	mov	r17,r5
  80f3e0:	2c000417 	ldw	r16,16(r5)
  80f3e4:	dfc00515 	stw	ra,20(sp)
  80f3e8:	dcc00415 	stw	r19,16(sp)
  80f3ec:	2025883a 	mov	r18,r4
  80f3f0:	29400504 	addi	r5,r5,20
  80f3f4:	0011883a 	mov	r8,zero
  80f3f8:	28c00017 	ldw	r3,0(r5)
  80f3fc:	29400104 	addi	r5,r5,4
  80f400:	42000044 	addi	r8,r8,1
  80f404:	18bfffcc 	andi	r2,r3,65535
  80f408:	1185383a 	mul	r2,r2,r6
  80f40c:	1806d43a 	srli	r3,r3,16
  80f410:	11cf883a 	add	r7,r2,r7
  80f414:	3808d43a 	srli	r4,r7,16
  80f418:	1987383a 	mul	r3,r3,r6
  80f41c:	38bfffcc 	andi	r2,r7,65535
  80f420:	1907883a 	add	r3,r3,r4
  80f424:	1808943a 	slli	r4,r3,16
  80f428:	180ed43a 	srli	r7,r3,16
  80f42c:	2085883a 	add	r2,r4,r2
  80f430:	28bfff15 	stw	r2,-4(r5)
  80f434:	443ff016 	blt	r8,r16,80f3f8 <__alt_mem_onchip_mem+0xff8073f8>
  80f438:	38000926 	beq	r7,zero,80f460 <__multadd+0x94>
  80f43c:	88800217 	ldw	r2,8(r17)
  80f440:	80800f0e 	bge	r16,r2,80f480 <__multadd+0xb4>
  80f444:	80800144 	addi	r2,r16,5
  80f448:	1085883a 	add	r2,r2,r2
  80f44c:	1085883a 	add	r2,r2,r2
  80f450:	8885883a 	add	r2,r17,r2
  80f454:	11c00015 	stw	r7,0(r2)
  80f458:	84000044 	addi	r16,r16,1
  80f45c:	8c000415 	stw	r16,16(r17)
  80f460:	8805883a 	mov	r2,r17
  80f464:	dfc00517 	ldw	ra,20(sp)
  80f468:	dcc00417 	ldw	r19,16(sp)
  80f46c:	dc800317 	ldw	r18,12(sp)
  80f470:	dc400217 	ldw	r17,8(sp)
  80f474:	dc000117 	ldw	r16,4(sp)
  80f478:	dec00604 	addi	sp,sp,24
  80f47c:	f800283a 	ret
  80f480:	89400117 	ldw	r5,4(r17)
  80f484:	9009883a 	mov	r4,r18
  80f488:	d9c00015 	stw	r7,0(sp)
  80f48c:	29400044 	addi	r5,r5,1
  80f490:	080f2fc0 	call	80f2fc <_Balloc>
  80f494:	89800417 	ldw	r6,16(r17)
  80f498:	89400304 	addi	r5,r17,12
  80f49c:	11000304 	addi	r4,r2,12
  80f4a0:	31800084 	addi	r6,r6,2
  80f4a4:	318d883a 	add	r6,r6,r6
  80f4a8:	318d883a 	add	r6,r6,r6
  80f4ac:	1027883a 	mov	r19,r2
  80f4b0:	080f08c0 	call	80f08c <memcpy>
  80f4b4:	d9c00017 	ldw	r7,0(sp)
  80f4b8:	88000a26 	beq	r17,zero,80f4e4 <__multadd+0x118>
  80f4bc:	88c00117 	ldw	r3,4(r17)
  80f4c0:	90801317 	ldw	r2,76(r18)
  80f4c4:	18c7883a 	add	r3,r3,r3
  80f4c8:	18c7883a 	add	r3,r3,r3
  80f4cc:	10c5883a 	add	r2,r2,r3
  80f4d0:	10c00017 	ldw	r3,0(r2)
  80f4d4:	88c00015 	stw	r3,0(r17)
  80f4d8:	14400015 	stw	r17,0(r2)
  80f4dc:	9823883a 	mov	r17,r19
  80f4e0:	003fd806 	br	80f444 <__alt_mem_onchip_mem+0xff807444>
  80f4e4:	9823883a 	mov	r17,r19
  80f4e8:	003fd606 	br	80f444 <__alt_mem_onchip_mem+0xff807444>

0080f4ec <__s2b>:
  80f4ec:	defff904 	addi	sp,sp,-28
  80f4f0:	dc400115 	stw	r17,4(sp)
  80f4f4:	dc000015 	stw	r16,0(sp)
  80f4f8:	2023883a 	mov	r17,r4
  80f4fc:	2821883a 	mov	r16,r5
  80f500:	39000204 	addi	r4,r7,8
  80f504:	01400244 	movi	r5,9
  80f508:	dcc00315 	stw	r19,12(sp)
  80f50c:	dc800215 	stw	r18,8(sp)
  80f510:	dfc00615 	stw	ra,24(sp)
  80f514:	dd400515 	stw	r21,20(sp)
  80f518:	dd000415 	stw	r20,16(sp)
  80f51c:	3825883a 	mov	r18,r7
  80f520:	3027883a 	mov	r19,r6
  80f524:	0813c180 	call	813c18 <__divsi3>
  80f528:	00c00044 	movi	r3,1
  80f52c:	000b883a 	mov	r5,zero
  80f530:	1880030e 	bge	r3,r2,80f540 <__s2b+0x54>
  80f534:	18c7883a 	add	r3,r3,r3
  80f538:	29400044 	addi	r5,r5,1
  80f53c:	18bffd16 	blt	r3,r2,80f534 <__alt_mem_onchip_mem+0xff807534>
  80f540:	8809883a 	mov	r4,r17
  80f544:	080f2fc0 	call	80f2fc <_Balloc>
  80f548:	d8c00717 	ldw	r3,28(sp)
  80f54c:	10c00515 	stw	r3,20(r2)
  80f550:	00c00044 	movi	r3,1
  80f554:	10c00415 	stw	r3,16(r2)
  80f558:	00c00244 	movi	r3,9
  80f55c:	1cc0210e 	bge	r3,r19,80f5e4 <__s2b+0xf8>
  80f560:	80eb883a 	add	r21,r16,r3
  80f564:	a829883a 	mov	r20,r21
  80f568:	84e1883a 	add	r16,r16,r19
  80f56c:	a1c00007 	ldb	r7,0(r20)
  80f570:	01800284 	movi	r6,10
  80f574:	a5000044 	addi	r20,r20,1
  80f578:	100b883a 	mov	r5,r2
  80f57c:	39fff404 	addi	r7,r7,-48
  80f580:	8809883a 	mov	r4,r17
  80f584:	080f3cc0 	call	80f3cc <__multadd>
  80f588:	a43ff81e 	bne	r20,r16,80f56c <__alt_mem_onchip_mem+0xff80756c>
  80f58c:	ace1883a 	add	r16,r21,r19
  80f590:	843ffe04 	addi	r16,r16,-8
  80f594:	9c800a0e 	bge	r19,r18,80f5c0 <__s2b+0xd4>
  80f598:	94e5c83a 	sub	r18,r18,r19
  80f59c:	84a5883a 	add	r18,r16,r18
  80f5a0:	81c00007 	ldb	r7,0(r16)
  80f5a4:	01800284 	movi	r6,10
  80f5a8:	84000044 	addi	r16,r16,1
  80f5ac:	100b883a 	mov	r5,r2
  80f5b0:	39fff404 	addi	r7,r7,-48
  80f5b4:	8809883a 	mov	r4,r17
  80f5b8:	080f3cc0 	call	80f3cc <__multadd>
  80f5bc:	84bff81e 	bne	r16,r18,80f5a0 <__alt_mem_onchip_mem+0xff8075a0>
  80f5c0:	dfc00617 	ldw	ra,24(sp)
  80f5c4:	dd400517 	ldw	r21,20(sp)
  80f5c8:	dd000417 	ldw	r20,16(sp)
  80f5cc:	dcc00317 	ldw	r19,12(sp)
  80f5d0:	dc800217 	ldw	r18,8(sp)
  80f5d4:	dc400117 	ldw	r17,4(sp)
  80f5d8:	dc000017 	ldw	r16,0(sp)
  80f5dc:	dec00704 	addi	sp,sp,28
  80f5e0:	f800283a 	ret
  80f5e4:	84000284 	addi	r16,r16,10
  80f5e8:	1827883a 	mov	r19,r3
  80f5ec:	003fe906 	br	80f594 <__alt_mem_onchip_mem+0xff807594>

0080f5f0 <__hi0bits>:
  80f5f0:	20bfffec 	andhi	r2,r4,65535
  80f5f4:	1000141e 	bne	r2,zero,80f648 <__hi0bits+0x58>
  80f5f8:	2008943a 	slli	r4,r4,16
  80f5fc:	00800404 	movi	r2,16
  80f600:	20ffc02c 	andhi	r3,r4,65280
  80f604:	1800021e 	bne	r3,zero,80f610 <__hi0bits+0x20>
  80f608:	2008923a 	slli	r4,r4,8
  80f60c:	10800204 	addi	r2,r2,8
  80f610:	20fc002c 	andhi	r3,r4,61440
  80f614:	1800021e 	bne	r3,zero,80f620 <__hi0bits+0x30>
  80f618:	2008913a 	slli	r4,r4,4
  80f61c:	10800104 	addi	r2,r2,4
  80f620:	20f0002c 	andhi	r3,r4,49152
  80f624:	1800031e 	bne	r3,zero,80f634 <__hi0bits+0x44>
  80f628:	2109883a 	add	r4,r4,r4
  80f62c:	10800084 	addi	r2,r2,2
  80f630:	2109883a 	add	r4,r4,r4
  80f634:	20000316 	blt	r4,zero,80f644 <__hi0bits+0x54>
  80f638:	2110002c 	andhi	r4,r4,16384
  80f63c:	2000041e 	bne	r4,zero,80f650 <__hi0bits+0x60>
  80f640:	00800804 	movi	r2,32
  80f644:	f800283a 	ret
  80f648:	0005883a 	mov	r2,zero
  80f64c:	003fec06 	br	80f600 <__alt_mem_onchip_mem+0xff807600>
  80f650:	10800044 	addi	r2,r2,1
  80f654:	f800283a 	ret

0080f658 <__lo0bits>:
  80f658:	20c00017 	ldw	r3,0(r4)
  80f65c:	188001cc 	andi	r2,r3,7
  80f660:	10000826 	beq	r2,zero,80f684 <__lo0bits+0x2c>
  80f664:	1880004c 	andi	r2,r3,1
  80f668:	1000211e 	bne	r2,zero,80f6f0 <__lo0bits+0x98>
  80f66c:	1880008c 	andi	r2,r3,2
  80f670:	1000211e 	bne	r2,zero,80f6f8 <__lo0bits+0xa0>
  80f674:	1806d0ba 	srli	r3,r3,2
  80f678:	00800084 	movi	r2,2
  80f67c:	20c00015 	stw	r3,0(r4)
  80f680:	f800283a 	ret
  80f684:	18bfffcc 	andi	r2,r3,65535
  80f688:	10001326 	beq	r2,zero,80f6d8 <__lo0bits+0x80>
  80f68c:	0005883a 	mov	r2,zero
  80f690:	19403fcc 	andi	r5,r3,255
  80f694:	2800021e 	bne	r5,zero,80f6a0 <__lo0bits+0x48>
  80f698:	1806d23a 	srli	r3,r3,8
  80f69c:	10800204 	addi	r2,r2,8
  80f6a0:	194003cc 	andi	r5,r3,15
  80f6a4:	2800021e 	bne	r5,zero,80f6b0 <__lo0bits+0x58>
  80f6a8:	1806d13a 	srli	r3,r3,4
  80f6ac:	10800104 	addi	r2,r2,4
  80f6b0:	194000cc 	andi	r5,r3,3
  80f6b4:	2800021e 	bne	r5,zero,80f6c0 <__lo0bits+0x68>
  80f6b8:	1806d0ba 	srli	r3,r3,2
  80f6bc:	10800084 	addi	r2,r2,2
  80f6c0:	1940004c 	andi	r5,r3,1
  80f6c4:	2800081e 	bne	r5,zero,80f6e8 <__lo0bits+0x90>
  80f6c8:	1806d07a 	srli	r3,r3,1
  80f6cc:	1800051e 	bne	r3,zero,80f6e4 <__lo0bits+0x8c>
  80f6d0:	00800804 	movi	r2,32
  80f6d4:	f800283a 	ret
  80f6d8:	1806d43a 	srli	r3,r3,16
  80f6dc:	00800404 	movi	r2,16
  80f6e0:	003feb06 	br	80f690 <__alt_mem_onchip_mem+0xff807690>
  80f6e4:	10800044 	addi	r2,r2,1
  80f6e8:	20c00015 	stw	r3,0(r4)
  80f6ec:	f800283a 	ret
  80f6f0:	0005883a 	mov	r2,zero
  80f6f4:	f800283a 	ret
  80f6f8:	1806d07a 	srli	r3,r3,1
  80f6fc:	00800044 	movi	r2,1
  80f700:	20c00015 	stw	r3,0(r4)
  80f704:	f800283a 	ret

0080f708 <__i2b>:
  80f708:	defffd04 	addi	sp,sp,-12
  80f70c:	dc000015 	stw	r16,0(sp)
  80f710:	04000044 	movi	r16,1
  80f714:	dc400115 	stw	r17,4(sp)
  80f718:	2823883a 	mov	r17,r5
  80f71c:	800b883a 	mov	r5,r16
  80f720:	dfc00215 	stw	ra,8(sp)
  80f724:	080f2fc0 	call	80f2fc <_Balloc>
  80f728:	14400515 	stw	r17,20(r2)
  80f72c:	14000415 	stw	r16,16(r2)
  80f730:	dfc00217 	ldw	ra,8(sp)
  80f734:	dc400117 	ldw	r17,4(sp)
  80f738:	dc000017 	ldw	r16,0(sp)
  80f73c:	dec00304 	addi	sp,sp,12
  80f740:	f800283a 	ret

0080f744 <__multiply>:
  80f744:	defffa04 	addi	sp,sp,-24
  80f748:	dcc00315 	stw	r19,12(sp)
  80f74c:	dc800215 	stw	r18,8(sp)
  80f750:	34c00417 	ldw	r19,16(r6)
  80f754:	2c800417 	ldw	r18,16(r5)
  80f758:	dd000415 	stw	r20,16(sp)
  80f75c:	dc400115 	stw	r17,4(sp)
  80f760:	dfc00515 	stw	ra,20(sp)
  80f764:	dc000015 	stw	r16,0(sp)
  80f768:	2829883a 	mov	r20,r5
  80f76c:	3023883a 	mov	r17,r6
  80f770:	94c0050e 	bge	r18,r19,80f788 <__multiply+0x44>
  80f774:	9007883a 	mov	r3,r18
  80f778:	3029883a 	mov	r20,r6
  80f77c:	9825883a 	mov	r18,r19
  80f780:	2823883a 	mov	r17,r5
  80f784:	1827883a 	mov	r19,r3
  80f788:	a0800217 	ldw	r2,8(r20)
  80f78c:	94e1883a 	add	r16,r18,r19
  80f790:	a1400117 	ldw	r5,4(r20)
  80f794:	1400010e 	bge	r2,r16,80f79c <__multiply+0x58>
  80f798:	29400044 	addi	r5,r5,1
  80f79c:	080f2fc0 	call	80f2fc <_Balloc>
  80f7a0:	8415883a 	add	r10,r16,r16
  80f7a4:	12c00504 	addi	r11,r2,20
  80f7a8:	5295883a 	add	r10,r10,r10
  80f7ac:	5a95883a 	add	r10,r11,r10
  80f7b0:	5807883a 	mov	r3,r11
  80f7b4:	5a80032e 	bgeu	r11,r10,80f7c4 <__multiply+0x80>
  80f7b8:	18000015 	stw	zero,0(r3)
  80f7bc:	18c00104 	addi	r3,r3,4
  80f7c0:	1abffd36 	bltu	r3,r10,80f7b8 <__alt_mem_onchip_mem+0xff8077b8>
  80f7c4:	9ce7883a 	add	r19,r19,r19
  80f7c8:	94a5883a 	add	r18,r18,r18
  80f7cc:	89800504 	addi	r6,r17,20
  80f7d0:	9ce7883a 	add	r19,r19,r19
  80f7d4:	a3400504 	addi	r13,r20,20
  80f7d8:	94a5883a 	add	r18,r18,r18
  80f7dc:	34d9883a 	add	r12,r6,r19
  80f7e0:	6c93883a 	add	r9,r13,r18
  80f7e4:	3300422e 	bgeu	r6,r12,80f8f0 <__multiply+0x1ac>
  80f7e8:	37c00017 	ldw	ra,0(r6)
  80f7ec:	fbffffcc 	andi	r15,ra,65535
  80f7f0:	78001b26 	beq	r15,zero,80f860 <__multiply+0x11c>
  80f7f4:	5811883a 	mov	r8,r11
  80f7f8:	681d883a 	mov	r14,r13
  80f7fc:	000f883a 	mov	r7,zero
  80f800:	71000017 	ldw	r4,0(r14)
  80f804:	40c00017 	ldw	r3,0(r8)
  80f808:	73800104 	addi	r14,r14,4
  80f80c:	217fffcc 	andi	r5,r4,65535
  80f810:	2bcb383a 	mul	r5,r5,r15
  80f814:	2008d43a 	srli	r4,r4,16
  80f818:	1c7fffcc 	andi	r17,r3,65535
  80f81c:	2c4b883a 	add	r5,r5,r17
  80f820:	29cb883a 	add	r5,r5,r7
  80f824:	23c9383a 	mul	r4,r4,r15
  80f828:	1806d43a 	srli	r3,r3,16
  80f82c:	280ed43a 	srli	r7,r5,16
  80f830:	297fffcc 	andi	r5,r5,65535
  80f834:	20c7883a 	add	r3,r4,r3
  80f838:	19c7883a 	add	r3,r3,r7
  80f83c:	1808943a 	slli	r4,r3,16
  80f840:	4023883a 	mov	r17,r8
  80f844:	180ed43a 	srli	r7,r3,16
  80f848:	214ab03a 	or	r5,r4,r5
  80f84c:	41400015 	stw	r5,0(r8)
  80f850:	42000104 	addi	r8,r8,4
  80f854:	727fea36 	bltu	r14,r9,80f800 <__alt_mem_onchip_mem+0xff807800>
  80f858:	89c00115 	stw	r7,4(r17)
  80f85c:	37c00017 	ldw	ra,0(r6)
  80f860:	f83ed43a 	srli	ra,ra,16
  80f864:	f8001f26 	beq	ra,zero,80f8e4 <__multiply+0x1a0>
  80f868:	58c00017 	ldw	r3,0(r11)
  80f86c:	681d883a 	mov	r14,r13
  80f870:	581f883a 	mov	r15,r11
  80f874:	1811883a 	mov	r8,r3
  80f878:	5825883a 	mov	r18,r11
  80f87c:	000f883a 	mov	r7,zero
  80f880:	00000106 	br	80f888 <__multiply+0x144>
  80f884:	8825883a 	mov	r18,r17
  80f888:	7140000b 	ldhu	r5,0(r14)
  80f88c:	4010d43a 	srli	r8,r8,16
  80f890:	193fffcc 	andi	r4,r3,65535
  80f894:	2fcb383a 	mul	r5,r5,ra
  80f898:	7bc00104 	addi	r15,r15,4
  80f89c:	73800104 	addi	r14,r14,4
  80f8a0:	2a0b883a 	add	r5,r5,r8
  80f8a4:	29cb883a 	add	r5,r5,r7
  80f8a8:	2806943a 	slli	r3,r5,16
  80f8ac:	94400104 	addi	r17,r18,4
  80f8b0:	280ad43a 	srli	r5,r5,16
  80f8b4:	1908b03a 	or	r4,r3,r4
  80f8b8:	793fff15 	stw	r4,-4(r15)
  80f8bc:	70ffff17 	ldw	r3,-4(r14)
  80f8c0:	8a000017 	ldw	r8,0(r17)
  80f8c4:	1806d43a 	srli	r3,r3,16
  80f8c8:	413fffcc 	andi	r4,r8,65535
  80f8cc:	1fc7383a 	mul	r3,r3,ra
  80f8d0:	1907883a 	add	r3,r3,r4
  80f8d4:	1947883a 	add	r3,r3,r5
  80f8d8:	180ed43a 	srli	r7,r3,16
  80f8dc:	727fe936 	bltu	r14,r9,80f884 <__alt_mem_onchip_mem+0xff807884>
  80f8e0:	90c00115 	stw	r3,4(r18)
  80f8e4:	31800104 	addi	r6,r6,4
  80f8e8:	5ac00104 	addi	r11,r11,4
  80f8ec:	333fbe36 	bltu	r6,r12,80f7e8 <__alt_mem_onchip_mem+0xff8077e8>
  80f8f0:	0400090e 	bge	zero,r16,80f918 <__multiply+0x1d4>
  80f8f4:	50ffff17 	ldw	r3,-4(r10)
  80f8f8:	52bfff04 	addi	r10,r10,-4
  80f8fc:	18000326 	beq	r3,zero,80f90c <__multiply+0x1c8>
  80f900:	00000506 	br	80f918 <__multiply+0x1d4>
  80f904:	50c00017 	ldw	r3,0(r10)
  80f908:	1800031e 	bne	r3,zero,80f918 <__multiply+0x1d4>
  80f90c:	843fffc4 	addi	r16,r16,-1
  80f910:	52bfff04 	addi	r10,r10,-4
  80f914:	803ffb1e 	bne	r16,zero,80f904 <__alt_mem_onchip_mem+0xff807904>
  80f918:	14000415 	stw	r16,16(r2)
  80f91c:	dfc00517 	ldw	ra,20(sp)
  80f920:	dd000417 	ldw	r20,16(sp)
  80f924:	dcc00317 	ldw	r19,12(sp)
  80f928:	dc800217 	ldw	r18,8(sp)
  80f92c:	dc400117 	ldw	r17,4(sp)
  80f930:	dc000017 	ldw	r16,0(sp)
  80f934:	dec00604 	addi	sp,sp,24
  80f938:	f800283a 	ret

0080f93c <__pow5mult>:
  80f93c:	defffa04 	addi	sp,sp,-24
  80f940:	dcc00315 	stw	r19,12(sp)
  80f944:	dc000015 	stw	r16,0(sp)
  80f948:	dfc00515 	stw	ra,20(sp)
  80f94c:	dd000415 	stw	r20,16(sp)
  80f950:	dc800215 	stw	r18,8(sp)
  80f954:	dc400115 	stw	r17,4(sp)
  80f958:	308000cc 	andi	r2,r6,3
  80f95c:	3021883a 	mov	r16,r6
  80f960:	2027883a 	mov	r19,r4
  80f964:	10002f1e 	bne	r2,zero,80fa24 <__pow5mult+0xe8>
  80f968:	2825883a 	mov	r18,r5
  80f96c:	8021d0ba 	srai	r16,r16,2
  80f970:	80001a26 	beq	r16,zero,80f9dc <__pow5mult+0xa0>
  80f974:	9c401217 	ldw	r17,72(r19)
  80f978:	8800061e 	bne	r17,zero,80f994 <__pow5mult+0x58>
  80f97c:	00003406 	br	80fa50 <__pow5mult+0x114>
  80f980:	8021d07a 	srai	r16,r16,1
  80f984:	80001526 	beq	r16,zero,80f9dc <__pow5mult+0xa0>
  80f988:	88800017 	ldw	r2,0(r17)
  80f98c:	10001c26 	beq	r2,zero,80fa00 <__pow5mult+0xc4>
  80f990:	1023883a 	mov	r17,r2
  80f994:	8080004c 	andi	r2,r16,1
  80f998:	103ff926 	beq	r2,zero,80f980 <__alt_mem_onchip_mem+0xff807980>
  80f99c:	880d883a 	mov	r6,r17
  80f9a0:	900b883a 	mov	r5,r18
  80f9a4:	9809883a 	mov	r4,r19
  80f9a8:	080f7440 	call	80f744 <__multiply>
  80f9ac:	90001b26 	beq	r18,zero,80fa1c <__pow5mult+0xe0>
  80f9b0:	91000117 	ldw	r4,4(r18)
  80f9b4:	98c01317 	ldw	r3,76(r19)
  80f9b8:	8021d07a 	srai	r16,r16,1
  80f9bc:	2109883a 	add	r4,r4,r4
  80f9c0:	2109883a 	add	r4,r4,r4
  80f9c4:	1907883a 	add	r3,r3,r4
  80f9c8:	19000017 	ldw	r4,0(r3)
  80f9cc:	91000015 	stw	r4,0(r18)
  80f9d0:	1c800015 	stw	r18,0(r3)
  80f9d4:	1025883a 	mov	r18,r2
  80f9d8:	803feb1e 	bne	r16,zero,80f988 <__alt_mem_onchip_mem+0xff807988>
  80f9dc:	9005883a 	mov	r2,r18
  80f9e0:	dfc00517 	ldw	ra,20(sp)
  80f9e4:	dd000417 	ldw	r20,16(sp)
  80f9e8:	dcc00317 	ldw	r19,12(sp)
  80f9ec:	dc800217 	ldw	r18,8(sp)
  80f9f0:	dc400117 	ldw	r17,4(sp)
  80f9f4:	dc000017 	ldw	r16,0(sp)
  80f9f8:	dec00604 	addi	sp,sp,24
  80f9fc:	f800283a 	ret
  80fa00:	880d883a 	mov	r6,r17
  80fa04:	880b883a 	mov	r5,r17
  80fa08:	9809883a 	mov	r4,r19
  80fa0c:	080f7440 	call	80f744 <__multiply>
  80fa10:	88800015 	stw	r2,0(r17)
  80fa14:	10000015 	stw	zero,0(r2)
  80fa18:	003fdd06 	br	80f990 <__alt_mem_onchip_mem+0xff807990>
  80fa1c:	1025883a 	mov	r18,r2
  80fa20:	003fd706 	br	80f980 <__alt_mem_onchip_mem+0xff807980>
  80fa24:	10bfffc4 	addi	r2,r2,-1
  80fa28:	1085883a 	add	r2,r2,r2
  80fa2c:	00c020b4 	movhi	r3,130
  80fa30:	18e2ac04 	addi	r3,r3,-30032
  80fa34:	1085883a 	add	r2,r2,r2
  80fa38:	1885883a 	add	r2,r3,r2
  80fa3c:	11800017 	ldw	r6,0(r2)
  80fa40:	000f883a 	mov	r7,zero
  80fa44:	080f3cc0 	call	80f3cc <__multadd>
  80fa48:	1025883a 	mov	r18,r2
  80fa4c:	003fc706 	br	80f96c <__alt_mem_onchip_mem+0xff80796c>
  80fa50:	05000044 	movi	r20,1
  80fa54:	a00b883a 	mov	r5,r20
  80fa58:	9809883a 	mov	r4,r19
  80fa5c:	080f2fc0 	call	80f2fc <_Balloc>
  80fa60:	1023883a 	mov	r17,r2
  80fa64:	00809c44 	movi	r2,625
  80fa68:	88800515 	stw	r2,20(r17)
  80fa6c:	8d000415 	stw	r20,16(r17)
  80fa70:	9c401215 	stw	r17,72(r19)
  80fa74:	88000015 	stw	zero,0(r17)
  80fa78:	003fc606 	br	80f994 <__alt_mem_onchip_mem+0xff807994>

0080fa7c <__lshift>:
  80fa7c:	defff904 	addi	sp,sp,-28
  80fa80:	dd400515 	stw	r21,20(sp)
  80fa84:	dcc00315 	stw	r19,12(sp)
  80fa88:	302bd17a 	srai	r21,r6,5
  80fa8c:	2cc00417 	ldw	r19,16(r5)
  80fa90:	28800217 	ldw	r2,8(r5)
  80fa94:	dd000415 	stw	r20,16(sp)
  80fa98:	ace7883a 	add	r19,r21,r19
  80fa9c:	dc800215 	stw	r18,8(sp)
  80faa0:	dc400115 	stw	r17,4(sp)
  80faa4:	dc000015 	stw	r16,0(sp)
  80faa8:	dfc00615 	stw	ra,24(sp)
  80faac:	9c000044 	addi	r16,r19,1
  80fab0:	2823883a 	mov	r17,r5
  80fab4:	3029883a 	mov	r20,r6
  80fab8:	2025883a 	mov	r18,r4
  80fabc:	29400117 	ldw	r5,4(r5)
  80fac0:	1400030e 	bge	r2,r16,80fad0 <__lshift+0x54>
  80fac4:	1085883a 	add	r2,r2,r2
  80fac8:	29400044 	addi	r5,r5,1
  80facc:	143ffd16 	blt	r2,r16,80fac4 <__alt_mem_onchip_mem+0xff807ac4>
  80fad0:	9009883a 	mov	r4,r18
  80fad4:	080f2fc0 	call	80f2fc <_Balloc>
  80fad8:	10c00504 	addi	r3,r2,20
  80fadc:	0540070e 	bge	zero,r21,80fafc <__lshift+0x80>
  80fae0:	ad6b883a 	add	r21,r21,r21
  80fae4:	ad6b883a 	add	r21,r21,r21
  80fae8:	1809883a 	mov	r4,r3
  80faec:	1d47883a 	add	r3,r3,r21
  80faf0:	20000015 	stw	zero,0(r4)
  80faf4:	21000104 	addi	r4,r4,4
  80faf8:	193ffd1e 	bne	r3,r4,80faf0 <__alt_mem_onchip_mem+0xff807af0>
  80fafc:	8a000417 	ldw	r8,16(r17)
  80fb00:	89000504 	addi	r4,r17,20
  80fb04:	a18007cc 	andi	r6,r20,31
  80fb08:	4211883a 	add	r8,r8,r8
  80fb0c:	4211883a 	add	r8,r8,r8
  80fb10:	2211883a 	add	r8,r4,r8
  80fb14:	30002326 	beq	r6,zero,80fba4 <__lshift+0x128>
  80fb18:	02400804 	movi	r9,32
  80fb1c:	4993c83a 	sub	r9,r9,r6
  80fb20:	000b883a 	mov	r5,zero
  80fb24:	21c00017 	ldw	r7,0(r4)
  80fb28:	1815883a 	mov	r10,r3
  80fb2c:	18c00104 	addi	r3,r3,4
  80fb30:	398e983a 	sll	r7,r7,r6
  80fb34:	21000104 	addi	r4,r4,4
  80fb38:	394ab03a 	or	r5,r7,r5
  80fb3c:	197fff15 	stw	r5,-4(r3)
  80fb40:	217fff17 	ldw	r5,-4(r4)
  80fb44:	2a4ad83a 	srl	r5,r5,r9
  80fb48:	223ff636 	bltu	r4,r8,80fb24 <__alt_mem_onchip_mem+0xff807b24>
  80fb4c:	51400115 	stw	r5,4(r10)
  80fb50:	28001a1e 	bne	r5,zero,80fbbc <__lshift+0x140>
  80fb54:	843fffc4 	addi	r16,r16,-1
  80fb58:	14000415 	stw	r16,16(r2)
  80fb5c:	88000826 	beq	r17,zero,80fb80 <__lshift+0x104>
  80fb60:	89000117 	ldw	r4,4(r17)
  80fb64:	90c01317 	ldw	r3,76(r18)
  80fb68:	2109883a 	add	r4,r4,r4
  80fb6c:	2109883a 	add	r4,r4,r4
  80fb70:	1907883a 	add	r3,r3,r4
  80fb74:	19000017 	ldw	r4,0(r3)
  80fb78:	89000015 	stw	r4,0(r17)
  80fb7c:	1c400015 	stw	r17,0(r3)
  80fb80:	dfc00617 	ldw	ra,24(sp)
  80fb84:	dd400517 	ldw	r21,20(sp)
  80fb88:	dd000417 	ldw	r20,16(sp)
  80fb8c:	dcc00317 	ldw	r19,12(sp)
  80fb90:	dc800217 	ldw	r18,8(sp)
  80fb94:	dc400117 	ldw	r17,4(sp)
  80fb98:	dc000017 	ldw	r16,0(sp)
  80fb9c:	dec00704 	addi	sp,sp,28
  80fba0:	f800283a 	ret
  80fba4:	21400017 	ldw	r5,0(r4)
  80fba8:	18c00104 	addi	r3,r3,4
  80fbac:	21000104 	addi	r4,r4,4
  80fbb0:	197fff15 	stw	r5,-4(r3)
  80fbb4:	223ffb36 	bltu	r4,r8,80fba4 <__alt_mem_onchip_mem+0xff807ba4>
  80fbb8:	003fe606 	br	80fb54 <__alt_mem_onchip_mem+0xff807b54>
  80fbbc:	9c000084 	addi	r16,r19,2
  80fbc0:	003fe406 	br	80fb54 <__alt_mem_onchip_mem+0xff807b54>

0080fbc4 <__mcmp>:
  80fbc4:	20800417 	ldw	r2,16(r4)
  80fbc8:	28c00417 	ldw	r3,16(r5)
  80fbcc:	10c5c83a 	sub	r2,r2,r3
  80fbd0:	1000111e 	bne	r2,zero,80fc18 <__mcmp+0x54>
  80fbd4:	18c7883a 	add	r3,r3,r3
  80fbd8:	18c7883a 	add	r3,r3,r3
  80fbdc:	21000504 	addi	r4,r4,20
  80fbe0:	29400504 	addi	r5,r5,20
  80fbe4:	20c5883a 	add	r2,r4,r3
  80fbe8:	28cb883a 	add	r5,r5,r3
  80fbec:	00000106 	br	80fbf4 <__mcmp+0x30>
  80fbf0:	20800a2e 	bgeu	r4,r2,80fc1c <__mcmp+0x58>
  80fbf4:	10bfff04 	addi	r2,r2,-4
  80fbf8:	297fff04 	addi	r5,r5,-4
  80fbfc:	11800017 	ldw	r6,0(r2)
  80fc00:	28c00017 	ldw	r3,0(r5)
  80fc04:	30fffa26 	beq	r6,r3,80fbf0 <__alt_mem_onchip_mem+0xff807bf0>
  80fc08:	30c00236 	bltu	r6,r3,80fc14 <__mcmp+0x50>
  80fc0c:	00800044 	movi	r2,1
  80fc10:	f800283a 	ret
  80fc14:	00bfffc4 	movi	r2,-1
  80fc18:	f800283a 	ret
  80fc1c:	0005883a 	mov	r2,zero
  80fc20:	f800283a 	ret

0080fc24 <__mdiff>:
  80fc24:	28c00417 	ldw	r3,16(r5)
  80fc28:	30800417 	ldw	r2,16(r6)
  80fc2c:	defffa04 	addi	sp,sp,-24
  80fc30:	dcc00315 	stw	r19,12(sp)
  80fc34:	dc800215 	stw	r18,8(sp)
  80fc38:	dfc00515 	stw	ra,20(sp)
  80fc3c:	dd000415 	stw	r20,16(sp)
  80fc40:	dc400115 	stw	r17,4(sp)
  80fc44:	dc000015 	stw	r16,0(sp)
  80fc48:	1887c83a 	sub	r3,r3,r2
  80fc4c:	2825883a 	mov	r18,r5
  80fc50:	3027883a 	mov	r19,r6
  80fc54:	1800141e 	bne	r3,zero,80fca8 <__mdiff+0x84>
  80fc58:	1085883a 	add	r2,r2,r2
  80fc5c:	1085883a 	add	r2,r2,r2
  80fc60:	2a000504 	addi	r8,r5,20
  80fc64:	34000504 	addi	r16,r6,20
  80fc68:	4087883a 	add	r3,r8,r2
  80fc6c:	8085883a 	add	r2,r16,r2
  80fc70:	00000106 	br	80fc78 <__mdiff+0x54>
  80fc74:	40c0592e 	bgeu	r8,r3,80fddc <__mdiff+0x1b8>
  80fc78:	18ffff04 	addi	r3,r3,-4
  80fc7c:	10bfff04 	addi	r2,r2,-4
  80fc80:	19c00017 	ldw	r7,0(r3)
  80fc84:	11400017 	ldw	r5,0(r2)
  80fc88:	397ffa26 	beq	r7,r5,80fc74 <__alt_mem_onchip_mem+0xff807c74>
  80fc8c:	3940592e 	bgeu	r7,r5,80fdf4 <__mdiff+0x1d0>
  80fc90:	9005883a 	mov	r2,r18
  80fc94:	4023883a 	mov	r17,r8
  80fc98:	9825883a 	mov	r18,r19
  80fc9c:	05000044 	movi	r20,1
  80fca0:	1027883a 	mov	r19,r2
  80fca4:	00000406 	br	80fcb8 <__mdiff+0x94>
  80fca8:	18005616 	blt	r3,zero,80fe04 <__mdiff+0x1e0>
  80fcac:	34400504 	addi	r17,r6,20
  80fcb0:	2c000504 	addi	r16,r5,20
  80fcb4:	0029883a 	mov	r20,zero
  80fcb8:	91400117 	ldw	r5,4(r18)
  80fcbc:	080f2fc0 	call	80f2fc <_Balloc>
  80fcc0:	92400417 	ldw	r9,16(r18)
  80fcc4:	9b000417 	ldw	r12,16(r19)
  80fcc8:	12c00504 	addi	r11,r2,20
  80fccc:	4a51883a 	add	r8,r9,r9
  80fcd0:	6319883a 	add	r12,r12,r12
  80fcd4:	4211883a 	add	r8,r8,r8
  80fcd8:	6319883a 	add	r12,r12,r12
  80fcdc:	15000315 	stw	r20,12(r2)
  80fce0:	8211883a 	add	r8,r16,r8
  80fce4:	8b19883a 	add	r12,r17,r12
  80fce8:	0007883a 	mov	r3,zero
  80fcec:	81400017 	ldw	r5,0(r16)
  80fcf0:	89c00017 	ldw	r7,0(r17)
  80fcf4:	59800104 	addi	r6,r11,4
  80fcf8:	293fffcc 	andi	r4,r5,65535
  80fcfc:	20c7883a 	add	r3,r4,r3
  80fd00:	393fffcc 	andi	r4,r7,65535
  80fd04:	1909c83a 	sub	r4,r3,r4
  80fd08:	280ad43a 	srli	r5,r5,16
  80fd0c:	380ed43a 	srli	r7,r7,16
  80fd10:	2007d43a 	srai	r3,r4,16
  80fd14:	213fffcc 	andi	r4,r4,65535
  80fd18:	29cbc83a 	sub	r5,r5,r7
  80fd1c:	28c7883a 	add	r3,r5,r3
  80fd20:	180a943a 	slli	r5,r3,16
  80fd24:	8c400104 	addi	r17,r17,4
  80fd28:	84000104 	addi	r16,r16,4
  80fd2c:	2908b03a 	or	r4,r5,r4
  80fd30:	59000015 	stw	r4,0(r11)
  80fd34:	1807d43a 	srai	r3,r3,16
  80fd38:	3015883a 	mov	r10,r6
  80fd3c:	3017883a 	mov	r11,r6
  80fd40:	8b3fea36 	bltu	r17,r12,80fcec <__alt_mem_onchip_mem+0xff807cec>
  80fd44:	8200162e 	bgeu	r16,r8,80fda0 <__mdiff+0x17c>
  80fd48:	8017883a 	mov	r11,r16
  80fd4c:	59400017 	ldw	r5,0(r11)
  80fd50:	31800104 	addi	r6,r6,4
  80fd54:	5ac00104 	addi	r11,r11,4
  80fd58:	293fffcc 	andi	r4,r5,65535
  80fd5c:	20c7883a 	add	r3,r4,r3
  80fd60:	280ed43a 	srli	r7,r5,16
  80fd64:	180bd43a 	srai	r5,r3,16
  80fd68:	193fffcc 	andi	r4,r3,65535
  80fd6c:	3947883a 	add	r3,r7,r5
  80fd70:	180a943a 	slli	r5,r3,16
  80fd74:	1807d43a 	srai	r3,r3,16
  80fd78:	2908b03a 	or	r4,r5,r4
  80fd7c:	313fff15 	stw	r4,-4(r6)
  80fd80:	5a3ff236 	bltu	r11,r8,80fd4c <__alt_mem_onchip_mem+0xff807d4c>
  80fd84:	0406303a 	nor	r3,zero,r16
  80fd88:	1a07883a 	add	r3,r3,r8
  80fd8c:	1806d0ba 	srli	r3,r3,2
  80fd90:	18c00044 	addi	r3,r3,1
  80fd94:	18c7883a 	add	r3,r3,r3
  80fd98:	18c7883a 	add	r3,r3,r3
  80fd9c:	50d5883a 	add	r10,r10,r3
  80fda0:	50ffff04 	addi	r3,r10,-4
  80fda4:	2000041e 	bne	r4,zero,80fdb8 <__mdiff+0x194>
  80fda8:	18ffff04 	addi	r3,r3,-4
  80fdac:	19000017 	ldw	r4,0(r3)
  80fdb0:	4a7fffc4 	addi	r9,r9,-1
  80fdb4:	203ffc26 	beq	r4,zero,80fda8 <__alt_mem_onchip_mem+0xff807da8>
  80fdb8:	12400415 	stw	r9,16(r2)
  80fdbc:	dfc00517 	ldw	ra,20(sp)
  80fdc0:	dd000417 	ldw	r20,16(sp)
  80fdc4:	dcc00317 	ldw	r19,12(sp)
  80fdc8:	dc800217 	ldw	r18,8(sp)
  80fdcc:	dc400117 	ldw	r17,4(sp)
  80fdd0:	dc000017 	ldw	r16,0(sp)
  80fdd4:	dec00604 	addi	sp,sp,24
  80fdd8:	f800283a 	ret
  80fddc:	000b883a 	mov	r5,zero
  80fde0:	080f2fc0 	call	80f2fc <_Balloc>
  80fde4:	00c00044 	movi	r3,1
  80fde8:	10c00415 	stw	r3,16(r2)
  80fdec:	10000515 	stw	zero,20(r2)
  80fdf0:	003ff206 	br	80fdbc <__alt_mem_onchip_mem+0xff807dbc>
  80fdf4:	8023883a 	mov	r17,r16
  80fdf8:	0029883a 	mov	r20,zero
  80fdfc:	4021883a 	mov	r16,r8
  80fe00:	003fad06 	br	80fcb8 <__alt_mem_onchip_mem+0xff807cb8>
  80fe04:	9005883a 	mov	r2,r18
  80fe08:	94400504 	addi	r17,r18,20
  80fe0c:	9c000504 	addi	r16,r19,20
  80fe10:	9825883a 	mov	r18,r19
  80fe14:	05000044 	movi	r20,1
  80fe18:	1027883a 	mov	r19,r2
  80fe1c:	003fa606 	br	80fcb8 <__alt_mem_onchip_mem+0xff807cb8>

0080fe20 <__ulp>:
  80fe20:	295ffc2c 	andhi	r5,r5,32752
  80fe24:	00bf3034 	movhi	r2,64704
  80fe28:	2887883a 	add	r3,r5,r2
  80fe2c:	00c0020e 	bge	zero,r3,80fe38 <__ulp+0x18>
  80fe30:	0005883a 	mov	r2,zero
  80fe34:	f800283a 	ret
  80fe38:	00c7c83a 	sub	r3,zero,r3
  80fe3c:	1807d53a 	srai	r3,r3,20
  80fe40:	008004c4 	movi	r2,19
  80fe44:	10c00b0e 	bge	r2,r3,80fe74 <__ulp+0x54>
  80fe48:	18bffb04 	addi	r2,r3,-20
  80fe4c:	01000784 	movi	r4,30
  80fe50:	0007883a 	mov	r3,zero
  80fe54:	20800516 	blt	r4,r2,80fe6c <__ulp+0x4c>
  80fe58:	010007c4 	movi	r4,31
  80fe5c:	2089c83a 	sub	r4,r4,r2
  80fe60:	00800044 	movi	r2,1
  80fe64:	1104983a 	sll	r2,r2,r4
  80fe68:	f800283a 	ret
  80fe6c:	00800044 	movi	r2,1
  80fe70:	f800283a 	ret
  80fe74:	01400234 	movhi	r5,8
  80fe78:	28c7d83a 	sra	r3,r5,r3
  80fe7c:	0005883a 	mov	r2,zero
  80fe80:	f800283a 	ret

0080fe84 <__b2d>:
  80fe84:	defffa04 	addi	sp,sp,-24
  80fe88:	dc000015 	stw	r16,0(sp)
  80fe8c:	24000417 	ldw	r16,16(r4)
  80fe90:	dc400115 	stw	r17,4(sp)
  80fe94:	24400504 	addi	r17,r4,20
  80fe98:	8421883a 	add	r16,r16,r16
  80fe9c:	8421883a 	add	r16,r16,r16
  80fea0:	8c21883a 	add	r16,r17,r16
  80fea4:	dc800215 	stw	r18,8(sp)
  80fea8:	84bfff17 	ldw	r18,-4(r16)
  80feac:	dd000415 	stw	r20,16(sp)
  80feb0:	dcc00315 	stw	r19,12(sp)
  80feb4:	9009883a 	mov	r4,r18
  80feb8:	2829883a 	mov	r20,r5
  80febc:	dfc00515 	stw	ra,20(sp)
  80fec0:	080f5f00 	call	80f5f0 <__hi0bits>
  80fec4:	00c00804 	movi	r3,32
  80fec8:	1889c83a 	sub	r4,r3,r2
  80fecc:	a1000015 	stw	r4,0(r20)
  80fed0:	01000284 	movi	r4,10
  80fed4:	84ffff04 	addi	r19,r16,-4
  80fed8:	20801216 	blt	r4,r2,80ff24 <__b2d+0xa0>
  80fedc:	018002c4 	movi	r6,11
  80fee0:	308dc83a 	sub	r6,r6,r2
  80fee4:	9186d83a 	srl	r3,r18,r6
  80fee8:	18cffc34 	orhi	r3,r3,16368
  80feec:	8cc0212e 	bgeu	r17,r19,80ff74 <__b2d+0xf0>
  80fef0:	813ffe17 	ldw	r4,-8(r16)
  80fef4:	218cd83a 	srl	r6,r4,r6
  80fef8:	10800544 	addi	r2,r2,21
  80fefc:	9084983a 	sll	r2,r18,r2
  80ff00:	1184b03a 	or	r2,r2,r6
  80ff04:	dfc00517 	ldw	ra,20(sp)
  80ff08:	dd000417 	ldw	r20,16(sp)
  80ff0c:	dcc00317 	ldw	r19,12(sp)
  80ff10:	dc800217 	ldw	r18,8(sp)
  80ff14:	dc400117 	ldw	r17,4(sp)
  80ff18:	dc000017 	ldw	r16,0(sp)
  80ff1c:	dec00604 	addi	sp,sp,24
  80ff20:	f800283a 	ret
  80ff24:	8cc00f2e 	bgeu	r17,r19,80ff64 <__b2d+0xe0>
  80ff28:	117ffd44 	addi	r5,r2,-11
  80ff2c:	80bffe17 	ldw	r2,-8(r16)
  80ff30:	28000e26 	beq	r5,zero,80ff6c <__b2d+0xe8>
  80ff34:	1949c83a 	sub	r4,r3,r5
  80ff38:	9164983a 	sll	r18,r18,r5
  80ff3c:	1106d83a 	srl	r3,r2,r4
  80ff40:	81bffe04 	addi	r6,r16,-8
  80ff44:	948ffc34 	orhi	r18,r18,16368
  80ff48:	90c6b03a 	or	r3,r18,r3
  80ff4c:	89800e2e 	bgeu	r17,r6,80ff88 <__b2d+0x104>
  80ff50:	81bffd17 	ldw	r6,-12(r16)
  80ff54:	1144983a 	sll	r2,r2,r5
  80ff58:	310ad83a 	srl	r5,r6,r4
  80ff5c:	2884b03a 	or	r2,r5,r2
  80ff60:	003fe806 	br	80ff04 <__alt_mem_onchip_mem+0xff807f04>
  80ff64:	10bffd44 	addi	r2,r2,-11
  80ff68:	1000041e 	bne	r2,zero,80ff7c <__b2d+0xf8>
  80ff6c:	90cffc34 	orhi	r3,r18,16368
  80ff70:	003fe406 	br	80ff04 <__alt_mem_onchip_mem+0xff807f04>
  80ff74:	000d883a 	mov	r6,zero
  80ff78:	003fdf06 	br	80fef8 <__alt_mem_onchip_mem+0xff807ef8>
  80ff7c:	90a4983a 	sll	r18,r18,r2
  80ff80:	0005883a 	mov	r2,zero
  80ff84:	003ff906 	br	80ff6c <__alt_mem_onchip_mem+0xff807f6c>
  80ff88:	1144983a 	sll	r2,r2,r5
  80ff8c:	003fdd06 	br	80ff04 <__alt_mem_onchip_mem+0xff807f04>

0080ff90 <__d2b>:
  80ff90:	defff804 	addi	sp,sp,-32
  80ff94:	dc000215 	stw	r16,8(sp)
  80ff98:	3021883a 	mov	r16,r6
  80ff9c:	dc400315 	stw	r17,12(sp)
  80ffa0:	8022907a 	slli	r17,r16,1
  80ffa4:	dd000615 	stw	r20,24(sp)
  80ffa8:	2829883a 	mov	r20,r5
  80ffac:	01400044 	movi	r5,1
  80ffb0:	dcc00515 	stw	r19,20(sp)
  80ffb4:	dc800415 	stw	r18,16(sp)
  80ffb8:	dfc00715 	stw	ra,28(sp)
  80ffbc:	3825883a 	mov	r18,r7
  80ffc0:	8822d57a 	srli	r17,r17,21
  80ffc4:	080f2fc0 	call	80f2fc <_Balloc>
  80ffc8:	1027883a 	mov	r19,r2
  80ffcc:	00800434 	movhi	r2,16
  80ffd0:	10bfffc4 	addi	r2,r2,-1
  80ffd4:	808c703a 	and	r6,r16,r2
  80ffd8:	88000126 	beq	r17,zero,80ffe0 <__d2b+0x50>
  80ffdc:	31800434 	orhi	r6,r6,16
  80ffe0:	d9800015 	stw	r6,0(sp)
  80ffe4:	a0002426 	beq	r20,zero,810078 <__d2b+0xe8>
  80ffe8:	d9000104 	addi	r4,sp,4
  80ffec:	dd000115 	stw	r20,4(sp)
  80fff0:	080f6580 	call	80f658 <__lo0bits>
  80fff4:	d8c00017 	ldw	r3,0(sp)
  80fff8:	10002f1e 	bne	r2,zero,8100b8 <__d2b+0x128>
  80fffc:	d9000117 	ldw	r4,4(sp)
  810000:	99000515 	stw	r4,20(r19)
  810004:	1821003a 	cmpeq	r16,r3,zero
  810008:	01000084 	movi	r4,2
  81000c:	2421c83a 	sub	r16,r4,r16
  810010:	98c00615 	stw	r3,24(r19)
  810014:	9c000415 	stw	r16,16(r19)
  810018:	88001f1e 	bne	r17,zero,810098 <__d2b+0x108>
  81001c:	10bef384 	addi	r2,r2,-1074
  810020:	90800015 	stw	r2,0(r18)
  810024:	00900034 	movhi	r2,16384
  810028:	10bfffc4 	addi	r2,r2,-1
  81002c:	8085883a 	add	r2,r16,r2
  810030:	1085883a 	add	r2,r2,r2
  810034:	1085883a 	add	r2,r2,r2
  810038:	9885883a 	add	r2,r19,r2
  81003c:	11000517 	ldw	r4,20(r2)
  810040:	8020917a 	slli	r16,r16,5
  810044:	080f5f00 	call	80f5f0 <__hi0bits>
  810048:	d8c00817 	ldw	r3,32(sp)
  81004c:	8085c83a 	sub	r2,r16,r2
  810050:	18800015 	stw	r2,0(r3)
  810054:	9805883a 	mov	r2,r19
  810058:	dfc00717 	ldw	ra,28(sp)
  81005c:	dd000617 	ldw	r20,24(sp)
  810060:	dcc00517 	ldw	r19,20(sp)
  810064:	dc800417 	ldw	r18,16(sp)
  810068:	dc400317 	ldw	r17,12(sp)
  81006c:	dc000217 	ldw	r16,8(sp)
  810070:	dec00804 	addi	sp,sp,32
  810074:	f800283a 	ret
  810078:	d809883a 	mov	r4,sp
  81007c:	080f6580 	call	80f658 <__lo0bits>
  810080:	d8c00017 	ldw	r3,0(sp)
  810084:	04000044 	movi	r16,1
  810088:	9c000415 	stw	r16,16(r19)
  81008c:	98c00515 	stw	r3,20(r19)
  810090:	10800804 	addi	r2,r2,32
  810094:	883fe126 	beq	r17,zero,81001c <__alt_mem_onchip_mem+0xff80801c>
  810098:	00c00d44 	movi	r3,53
  81009c:	8c7ef344 	addi	r17,r17,-1075
  8100a0:	88a3883a 	add	r17,r17,r2
  8100a4:	1885c83a 	sub	r2,r3,r2
  8100a8:	d8c00817 	ldw	r3,32(sp)
  8100ac:	94400015 	stw	r17,0(r18)
  8100b0:	18800015 	stw	r2,0(r3)
  8100b4:	003fe706 	br	810054 <__alt_mem_onchip_mem+0xff808054>
  8100b8:	01000804 	movi	r4,32
  8100bc:	2089c83a 	sub	r4,r4,r2
  8100c0:	1908983a 	sll	r4,r3,r4
  8100c4:	d9400117 	ldw	r5,4(sp)
  8100c8:	1886d83a 	srl	r3,r3,r2
  8100cc:	2148b03a 	or	r4,r4,r5
  8100d0:	99000515 	stw	r4,20(r19)
  8100d4:	d8c00015 	stw	r3,0(sp)
  8100d8:	003fca06 	br	810004 <__alt_mem_onchip_mem+0xff808004>

008100dc <__ratio>:
  8100dc:	defff904 	addi	sp,sp,-28
  8100e0:	dc400315 	stw	r17,12(sp)
  8100e4:	2823883a 	mov	r17,r5
  8100e8:	d9400104 	addi	r5,sp,4
  8100ec:	dfc00615 	stw	ra,24(sp)
  8100f0:	dcc00515 	stw	r19,20(sp)
  8100f4:	dc800415 	stw	r18,16(sp)
  8100f8:	2027883a 	mov	r19,r4
  8100fc:	dc000215 	stw	r16,8(sp)
  810100:	080fe840 	call	80fe84 <__b2d>
  810104:	d80b883a 	mov	r5,sp
  810108:	8809883a 	mov	r4,r17
  81010c:	1025883a 	mov	r18,r2
  810110:	1821883a 	mov	r16,r3
  810114:	080fe840 	call	80fe84 <__b2d>
  810118:	8a000417 	ldw	r8,16(r17)
  81011c:	99000417 	ldw	r4,16(r19)
  810120:	d9400117 	ldw	r5,4(sp)
  810124:	2209c83a 	sub	r4,r4,r8
  810128:	2010917a 	slli	r8,r4,5
  81012c:	d9000017 	ldw	r4,0(sp)
  810130:	2909c83a 	sub	r4,r5,r4
  810134:	4109883a 	add	r4,r8,r4
  810138:	01000e0e 	bge	zero,r4,810174 <__ratio+0x98>
  81013c:	2008953a 	slli	r4,r4,20
  810140:	2421883a 	add	r16,r4,r16
  810144:	100d883a 	mov	r6,r2
  810148:	180f883a 	mov	r7,r3
  81014c:	9009883a 	mov	r4,r18
  810150:	800b883a 	mov	r5,r16
  810154:	0813dcc0 	call	813dcc <__divdf3>
  810158:	dfc00617 	ldw	ra,24(sp)
  81015c:	dcc00517 	ldw	r19,20(sp)
  810160:	dc800417 	ldw	r18,16(sp)
  810164:	dc400317 	ldw	r17,12(sp)
  810168:	dc000217 	ldw	r16,8(sp)
  81016c:	dec00704 	addi	sp,sp,28
  810170:	f800283a 	ret
  810174:	2008953a 	slli	r4,r4,20
  810178:	1907c83a 	sub	r3,r3,r4
  81017c:	003ff106 	br	810144 <__alt_mem_onchip_mem+0xff808144>

00810180 <_mprec_log10>:
  810180:	defffe04 	addi	sp,sp,-8
  810184:	dc000015 	stw	r16,0(sp)
  810188:	dfc00115 	stw	ra,4(sp)
  81018c:	008005c4 	movi	r2,23
  810190:	2021883a 	mov	r16,r4
  810194:	11000d0e 	bge	r2,r4,8101cc <_mprec_log10+0x4c>
  810198:	0005883a 	mov	r2,zero
  81019c:	00cffc34 	movhi	r3,16368
  8101a0:	843fffc4 	addi	r16,r16,-1
  8101a4:	000d883a 	mov	r6,zero
  8101a8:	01d00934 	movhi	r7,16420
  8101ac:	1009883a 	mov	r4,r2
  8101b0:	180b883a 	mov	r5,r3
  8101b4:	08089ec0 	call	8089ec <__muldf3>
  8101b8:	803ff91e 	bne	r16,zero,8101a0 <__alt_mem_onchip_mem+0xff8081a0>
  8101bc:	dfc00117 	ldw	ra,4(sp)
  8101c0:	dc000017 	ldw	r16,0(sp)
  8101c4:	dec00204 	addi	sp,sp,8
  8101c8:	f800283a 	ret
  8101cc:	202090fa 	slli	r16,r4,3
  8101d0:	008020b4 	movhi	r2,130
  8101d4:	10a2c304 	addi	r2,r2,-29940
  8101d8:	1421883a 	add	r16,r2,r16
  8101dc:	80800017 	ldw	r2,0(r16)
  8101e0:	80c00117 	ldw	r3,4(r16)
  8101e4:	dfc00117 	ldw	ra,4(sp)
  8101e8:	dc000017 	ldw	r16,0(sp)
  8101ec:	dec00204 	addi	sp,sp,8
  8101f0:	f800283a 	ret

008101f4 <__copybits>:
  8101f4:	297fffc4 	addi	r5,r5,-1
  8101f8:	280fd17a 	srai	r7,r5,5
  8101fc:	30c00417 	ldw	r3,16(r6)
  810200:	30800504 	addi	r2,r6,20
  810204:	39c00044 	addi	r7,r7,1
  810208:	18c7883a 	add	r3,r3,r3
  81020c:	39cf883a 	add	r7,r7,r7
  810210:	18c7883a 	add	r3,r3,r3
  810214:	39cf883a 	add	r7,r7,r7
  810218:	10c7883a 	add	r3,r2,r3
  81021c:	21cf883a 	add	r7,r4,r7
  810220:	10c00d2e 	bgeu	r2,r3,810258 <__copybits+0x64>
  810224:	200b883a 	mov	r5,r4
  810228:	12000017 	ldw	r8,0(r2)
  81022c:	29400104 	addi	r5,r5,4
  810230:	10800104 	addi	r2,r2,4
  810234:	2a3fff15 	stw	r8,-4(r5)
  810238:	10fffb36 	bltu	r2,r3,810228 <__alt_mem_onchip_mem+0xff808228>
  81023c:	1985c83a 	sub	r2,r3,r6
  810240:	10bffac4 	addi	r2,r2,-21
  810244:	1004d0ba 	srli	r2,r2,2
  810248:	10800044 	addi	r2,r2,1
  81024c:	1085883a 	add	r2,r2,r2
  810250:	1085883a 	add	r2,r2,r2
  810254:	2089883a 	add	r4,r4,r2
  810258:	21c0032e 	bgeu	r4,r7,810268 <__copybits+0x74>
  81025c:	20000015 	stw	zero,0(r4)
  810260:	21000104 	addi	r4,r4,4
  810264:	21fffd36 	bltu	r4,r7,81025c <__alt_mem_onchip_mem+0xff80825c>
  810268:	f800283a 	ret

0081026c <__any_on>:
  81026c:	20c00417 	ldw	r3,16(r4)
  810270:	2805d17a 	srai	r2,r5,5
  810274:	21000504 	addi	r4,r4,20
  810278:	18800d0e 	bge	r3,r2,8102b0 <__any_on+0x44>
  81027c:	18c7883a 	add	r3,r3,r3
  810280:	18c7883a 	add	r3,r3,r3
  810284:	20c7883a 	add	r3,r4,r3
  810288:	20c0192e 	bgeu	r4,r3,8102f0 <__any_on+0x84>
  81028c:	18bfff17 	ldw	r2,-4(r3)
  810290:	18ffff04 	addi	r3,r3,-4
  810294:	1000041e 	bne	r2,zero,8102a8 <__any_on+0x3c>
  810298:	20c0142e 	bgeu	r4,r3,8102ec <__any_on+0x80>
  81029c:	18ffff04 	addi	r3,r3,-4
  8102a0:	19400017 	ldw	r5,0(r3)
  8102a4:	283ffc26 	beq	r5,zero,810298 <__alt_mem_onchip_mem+0xff808298>
  8102a8:	00800044 	movi	r2,1
  8102ac:	f800283a 	ret
  8102b0:	10c00a0e 	bge	r2,r3,8102dc <__any_on+0x70>
  8102b4:	1085883a 	add	r2,r2,r2
  8102b8:	1085883a 	add	r2,r2,r2
  8102bc:	294007cc 	andi	r5,r5,31
  8102c0:	2087883a 	add	r3,r4,r2
  8102c4:	283ff026 	beq	r5,zero,810288 <__alt_mem_onchip_mem+0xff808288>
  8102c8:	19800017 	ldw	r6,0(r3)
  8102cc:	3144d83a 	srl	r2,r6,r5
  8102d0:	114a983a 	sll	r5,r2,r5
  8102d4:	317ff41e 	bne	r6,r5,8102a8 <__alt_mem_onchip_mem+0xff8082a8>
  8102d8:	003feb06 	br	810288 <__alt_mem_onchip_mem+0xff808288>
  8102dc:	1085883a 	add	r2,r2,r2
  8102e0:	1085883a 	add	r2,r2,r2
  8102e4:	2087883a 	add	r3,r4,r2
  8102e8:	003fe706 	br	810288 <__alt_mem_onchip_mem+0xff808288>
  8102ec:	f800283a 	ret
  8102f0:	0005883a 	mov	r2,zero
  8102f4:	f800283a 	ret

008102f8 <__fpclassifyd>:
  8102f8:	00a00034 	movhi	r2,32768
  8102fc:	10bfffc4 	addi	r2,r2,-1
  810300:	2884703a 	and	r2,r5,r2
  810304:	10000726 	beq	r2,zero,810324 <__fpclassifyd+0x2c>
  810308:	00fffc34 	movhi	r3,65520
  81030c:	019ff834 	movhi	r6,32736
  810310:	28c7883a 	add	r3,r5,r3
  810314:	31bfffc4 	addi	r6,r6,-1
  810318:	30c00536 	bltu	r6,r3,810330 <__fpclassifyd+0x38>
  81031c:	00800104 	movi	r2,4
  810320:	f800283a 	ret
  810324:	2000021e 	bne	r4,zero,810330 <__fpclassifyd+0x38>
  810328:	00800084 	movi	r2,2
  81032c:	f800283a 	ret
  810330:	00dffc34 	movhi	r3,32752
  810334:	019ff834 	movhi	r6,32736
  810338:	28cb883a 	add	r5,r5,r3
  81033c:	31bfffc4 	addi	r6,r6,-1
  810340:	317ff62e 	bgeu	r6,r5,81031c <__alt_mem_onchip_mem+0xff80831c>
  810344:	01400434 	movhi	r5,16
  810348:	297fffc4 	addi	r5,r5,-1
  81034c:	28800236 	bltu	r5,r2,810358 <__fpclassifyd+0x60>
  810350:	008000c4 	movi	r2,3
  810354:	f800283a 	ret
  810358:	10c00226 	beq	r2,r3,810364 <__fpclassifyd+0x6c>
  81035c:	0005883a 	mov	r2,zero
  810360:	f800283a 	ret
  810364:	2005003a 	cmpeq	r2,r4,zero
  810368:	f800283a 	ret

0081036c <_sbrk_r>:
  81036c:	defffd04 	addi	sp,sp,-12
  810370:	dc000015 	stw	r16,0(sp)
  810374:	040020b4 	movhi	r16,130
  810378:	dc400115 	stw	r17,4(sp)
  81037c:	84322c04 	addi	r16,r16,-14160
  810380:	2023883a 	mov	r17,r4
  810384:	2809883a 	mov	r4,r5
  810388:	dfc00215 	stw	ra,8(sp)
  81038c:	80000015 	stw	zero,0(r16)
  810390:	08152e80 	call	8152e8 <sbrk>
  810394:	00ffffc4 	movi	r3,-1
  810398:	10c00526 	beq	r2,r3,8103b0 <_sbrk_r+0x44>
  81039c:	dfc00217 	ldw	ra,8(sp)
  8103a0:	dc400117 	ldw	r17,4(sp)
  8103a4:	dc000017 	ldw	r16,0(sp)
  8103a8:	dec00304 	addi	sp,sp,12
  8103ac:	f800283a 	ret
  8103b0:	80c00017 	ldw	r3,0(r16)
  8103b4:	183ff926 	beq	r3,zero,81039c <__alt_mem_onchip_mem+0xff80839c>
  8103b8:	88c00015 	stw	r3,0(r17)
  8103bc:	003ff706 	br	81039c <__alt_mem_onchip_mem+0xff80839c>

008103c0 <__sread>:
  8103c0:	defffe04 	addi	sp,sp,-8
  8103c4:	dc000015 	stw	r16,0(sp)
  8103c8:	2821883a 	mov	r16,r5
  8103cc:	2940038f 	ldh	r5,14(r5)
  8103d0:	dfc00115 	stw	ra,4(sp)
  8103d4:	08128640 	call	812864 <_read_r>
  8103d8:	10000716 	blt	r2,zero,8103f8 <__sread+0x38>
  8103dc:	80c01417 	ldw	r3,80(r16)
  8103e0:	1887883a 	add	r3,r3,r2
  8103e4:	80c01415 	stw	r3,80(r16)
  8103e8:	dfc00117 	ldw	ra,4(sp)
  8103ec:	dc000017 	ldw	r16,0(sp)
  8103f0:	dec00204 	addi	sp,sp,8
  8103f4:	f800283a 	ret
  8103f8:	80c0030b 	ldhu	r3,12(r16)
  8103fc:	18fbffcc 	andi	r3,r3,61439
  810400:	80c0030d 	sth	r3,12(r16)
  810404:	dfc00117 	ldw	ra,4(sp)
  810408:	dc000017 	ldw	r16,0(sp)
  81040c:	dec00204 	addi	sp,sp,8
  810410:	f800283a 	ret

00810414 <__seofread>:
  810414:	0005883a 	mov	r2,zero
  810418:	f800283a 	ret

0081041c <__swrite>:
  81041c:	2880030b 	ldhu	r2,12(r5)
  810420:	defffb04 	addi	sp,sp,-20
  810424:	dcc00315 	stw	r19,12(sp)
  810428:	dc800215 	stw	r18,8(sp)
  81042c:	dc400115 	stw	r17,4(sp)
  810430:	dc000015 	stw	r16,0(sp)
  810434:	dfc00415 	stw	ra,16(sp)
  810438:	10c0400c 	andi	r3,r2,256
  81043c:	2821883a 	mov	r16,r5
  810440:	2023883a 	mov	r17,r4
  810444:	3025883a 	mov	r18,r6
  810448:	3827883a 	mov	r19,r7
  81044c:	18000526 	beq	r3,zero,810464 <__swrite+0x48>
  810450:	2940038f 	ldh	r5,14(r5)
  810454:	01c00084 	movi	r7,2
  810458:	000d883a 	mov	r6,zero
  81045c:	08126a80 	call	8126a8 <_lseek_r>
  810460:	8080030b 	ldhu	r2,12(r16)
  810464:	8140038f 	ldh	r5,14(r16)
  810468:	10bbffcc 	andi	r2,r2,61439
  81046c:	980f883a 	mov	r7,r19
  810470:	900d883a 	mov	r6,r18
  810474:	8809883a 	mov	r4,r17
  810478:	8080030d 	sth	r2,12(r16)
  81047c:	dfc00417 	ldw	ra,16(sp)
  810480:	dcc00317 	ldw	r19,12(sp)
  810484:	dc800217 	ldw	r18,8(sp)
  810488:	dc400117 	ldw	r17,4(sp)
  81048c:	dc000017 	ldw	r16,0(sp)
  810490:	dec00504 	addi	sp,sp,20
  810494:	0811cb81 	jmpi	811cb8 <_write_r>

00810498 <__sseek>:
  810498:	defffe04 	addi	sp,sp,-8
  81049c:	dc000015 	stw	r16,0(sp)
  8104a0:	2821883a 	mov	r16,r5
  8104a4:	2940038f 	ldh	r5,14(r5)
  8104a8:	dfc00115 	stw	ra,4(sp)
  8104ac:	08126a80 	call	8126a8 <_lseek_r>
  8104b0:	00ffffc4 	movi	r3,-1
  8104b4:	10c00826 	beq	r2,r3,8104d8 <__sseek+0x40>
  8104b8:	80c0030b 	ldhu	r3,12(r16)
  8104bc:	80801415 	stw	r2,80(r16)
  8104c0:	18c40014 	ori	r3,r3,4096
  8104c4:	80c0030d 	sth	r3,12(r16)
  8104c8:	dfc00117 	ldw	ra,4(sp)
  8104cc:	dc000017 	ldw	r16,0(sp)
  8104d0:	dec00204 	addi	sp,sp,8
  8104d4:	f800283a 	ret
  8104d8:	80c0030b 	ldhu	r3,12(r16)
  8104dc:	18fbffcc 	andi	r3,r3,61439
  8104e0:	80c0030d 	sth	r3,12(r16)
  8104e4:	dfc00117 	ldw	ra,4(sp)
  8104e8:	dc000017 	ldw	r16,0(sp)
  8104ec:	dec00204 	addi	sp,sp,8
  8104f0:	f800283a 	ret

008104f4 <__sclose>:
  8104f4:	2940038f 	ldh	r5,14(r5)
  8104f8:	0811d181 	jmpi	811d18 <_close_r>

008104fc <strcmp>:
  8104fc:	2144b03a 	or	r2,r4,r5
  810500:	108000cc 	andi	r2,r2,3
  810504:	1000171e 	bne	r2,zero,810564 <strcmp+0x68>
  810508:	20800017 	ldw	r2,0(r4)
  81050c:	28c00017 	ldw	r3,0(r5)
  810510:	10c0141e 	bne	r2,r3,810564 <strcmp+0x68>
  810514:	027fbff4 	movhi	r9,65279
  810518:	4a7fbfc4 	addi	r9,r9,-257
  81051c:	0086303a 	nor	r3,zero,r2
  810520:	02202074 	movhi	r8,32897
  810524:	1245883a 	add	r2,r2,r9
  810528:	42202004 	addi	r8,r8,-32640
  81052c:	10c4703a 	and	r2,r2,r3
  810530:	1204703a 	and	r2,r2,r8
  810534:	10000226 	beq	r2,zero,810540 <strcmp+0x44>
  810538:	00002306 	br	8105c8 <strcmp+0xcc>
  81053c:	1000221e 	bne	r2,zero,8105c8 <strcmp+0xcc>
  810540:	21000104 	addi	r4,r4,4
  810544:	20c00017 	ldw	r3,0(r4)
  810548:	29400104 	addi	r5,r5,4
  81054c:	29800017 	ldw	r6,0(r5)
  810550:	1a4f883a 	add	r7,r3,r9
  810554:	00c4303a 	nor	r2,zero,r3
  810558:	3884703a 	and	r2,r7,r2
  81055c:	1204703a 	and	r2,r2,r8
  810560:	19bff626 	beq	r3,r6,81053c <__alt_mem_onchip_mem+0xff80853c>
  810564:	20800003 	ldbu	r2,0(r4)
  810568:	10c03fcc 	andi	r3,r2,255
  81056c:	18c0201c 	xori	r3,r3,128
  810570:	18ffe004 	addi	r3,r3,-128
  810574:	18000c26 	beq	r3,zero,8105a8 <strcmp+0xac>
  810578:	29800007 	ldb	r6,0(r5)
  81057c:	19800326 	beq	r3,r6,81058c <strcmp+0x90>
  810580:	00001306 	br	8105d0 <strcmp+0xd4>
  810584:	29800007 	ldb	r6,0(r5)
  810588:	11800b1e 	bne	r2,r6,8105b8 <strcmp+0xbc>
  81058c:	21000044 	addi	r4,r4,1
  810590:	20c00003 	ldbu	r3,0(r4)
  810594:	29400044 	addi	r5,r5,1
  810598:	18803fcc 	andi	r2,r3,255
  81059c:	1080201c 	xori	r2,r2,128
  8105a0:	10bfe004 	addi	r2,r2,-128
  8105a4:	103ff71e 	bne	r2,zero,810584 <__alt_mem_onchip_mem+0xff808584>
  8105a8:	0007883a 	mov	r3,zero
  8105ac:	28800003 	ldbu	r2,0(r5)
  8105b0:	1885c83a 	sub	r2,r3,r2
  8105b4:	f800283a 	ret
  8105b8:	28800003 	ldbu	r2,0(r5)
  8105bc:	18c03fcc 	andi	r3,r3,255
  8105c0:	1885c83a 	sub	r2,r3,r2
  8105c4:	f800283a 	ret
  8105c8:	0005883a 	mov	r2,zero
  8105cc:	f800283a 	ret
  8105d0:	10c03fcc 	andi	r3,r2,255
  8105d4:	003ff506 	br	8105ac <__alt_mem_onchip_mem+0xff8085ac>

008105d8 <strlen>:
  8105d8:	208000cc 	andi	r2,r4,3
  8105dc:	10002026 	beq	r2,zero,810660 <strlen+0x88>
  8105e0:	20800007 	ldb	r2,0(r4)
  8105e4:	10002026 	beq	r2,zero,810668 <strlen+0x90>
  8105e8:	2005883a 	mov	r2,r4
  8105ec:	00000206 	br	8105f8 <strlen+0x20>
  8105f0:	10c00007 	ldb	r3,0(r2)
  8105f4:	18001826 	beq	r3,zero,810658 <strlen+0x80>
  8105f8:	10800044 	addi	r2,r2,1
  8105fc:	10c000cc 	andi	r3,r2,3
  810600:	183ffb1e 	bne	r3,zero,8105f0 <__alt_mem_onchip_mem+0xff8085f0>
  810604:	10c00017 	ldw	r3,0(r2)
  810608:	01ffbff4 	movhi	r7,65279
  81060c:	39ffbfc4 	addi	r7,r7,-257
  810610:	00ca303a 	nor	r5,zero,r3
  810614:	01a02074 	movhi	r6,32897
  810618:	19c7883a 	add	r3,r3,r7
  81061c:	31a02004 	addi	r6,r6,-32640
  810620:	1946703a 	and	r3,r3,r5
  810624:	1986703a 	and	r3,r3,r6
  810628:	1800091e 	bne	r3,zero,810650 <strlen+0x78>
  81062c:	10800104 	addi	r2,r2,4
  810630:	10c00017 	ldw	r3,0(r2)
  810634:	19cb883a 	add	r5,r3,r7
  810638:	00c6303a 	nor	r3,zero,r3
  81063c:	28c6703a 	and	r3,r5,r3
  810640:	1986703a 	and	r3,r3,r6
  810644:	183ff926 	beq	r3,zero,81062c <__alt_mem_onchip_mem+0xff80862c>
  810648:	00000106 	br	810650 <strlen+0x78>
  81064c:	10800044 	addi	r2,r2,1
  810650:	10c00007 	ldb	r3,0(r2)
  810654:	183ffd1e 	bne	r3,zero,81064c <__alt_mem_onchip_mem+0xff80864c>
  810658:	1105c83a 	sub	r2,r2,r4
  81065c:	f800283a 	ret
  810660:	2005883a 	mov	r2,r4
  810664:	003fe706 	br	810604 <__alt_mem_onchip_mem+0xff808604>
  810668:	0005883a 	mov	r2,zero
  81066c:	f800283a 	ret

00810670 <__sprint_r.part.0>:
  810670:	28801917 	ldw	r2,100(r5)
  810674:	defff604 	addi	sp,sp,-40
  810678:	dd400515 	stw	r21,20(sp)
  81067c:	dfc00915 	stw	ra,36(sp)
  810680:	df000815 	stw	fp,32(sp)
  810684:	ddc00715 	stw	r23,28(sp)
  810688:	dd800615 	stw	r22,24(sp)
  81068c:	dd000415 	stw	r20,16(sp)
  810690:	dcc00315 	stw	r19,12(sp)
  810694:	dc800215 	stw	r18,8(sp)
  810698:	dc400115 	stw	r17,4(sp)
  81069c:	dc000015 	stw	r16,0(sp)
  8106a0:	1088000c 	andi	r2,r2,8192
  8106a4:	302b883a 	mov	r21,r6
  8106a8:	10002e26 	beq	r2,zero,810764 <__sprint_r.part.0+0xf4>
  8106ac:	30800217 	ldw	r2,8(r6)
  8106b0:	35800017 	ldw	r22,0(r6)
  8106b4:	10002926 	beq	r2,zero,81075c <__sprint_r.part.0+0xec>
  8106b8:	2827883a 	mov	r19,r5
  8106bc:	2029883a 	mov	r20,r4
  8106c0:	b5c00104 	addi	r23,r22,4
  8106c4:	04bfffc4 	movi	r18,-1
  8106c8:	bc400017 	ldw	r17,0(r23)
  8106cc:	b4000017 	ldw	r16,0(r22)
  8106d0:	0039883a 	mov	fp,zero
  8106d4:	8822d0ba 	srli	r17,r17,2
  8106d8:	8800031e 	bne	r17,zero,8106e8 <__sprint_r.part.0+0x78>
  8106dc:	00001806 	br	810740 <__sprint_r.part.0+0xd0>
  8106e0:	84000104 	addi	r16,r16,4
  8106e4:	8f001526 	beq	r17,fp,81073c <__sprint_r.part.0+0xcc>
  8106e8:	81400017 	ldw	r5,0(r16)
  8106ec:	980d883a 	mov	r6,r19
  8106f0:	a009883a 	mov	r4,r20
  8106f4:	08120980 	call	812098 <_fputwc_r>
  8106f8:	e7000044 	addi	fp,fp,1
  8106fc:	14bff81e 	bne	r2,r18,8106e0 <__alt_mem_onchip_mem+0xff8086e0>
  810700:	9005883a 	mov	r2,r18
  810704:	a8000215 	stw	zero,8(r21)
  810708:	a8000115 	stw	zero,4(r21)
  81070c:	dfc00917 	ldw	ra,36(sp)
  810710:	df000817 	ldw	fp,32(sp)
  810714:	ddc00717 	ldw	r23,28(sp)
  810718:	dd800617 	ldw	r22,24(sp)
  81071c:	dd400517 	ldw	r21,20(sp)
  810720:	dd000417 	ldw	r20,16(sp)
  810724:	dcc00317 	ldw	r19,12(sp)
  810728:	dc800217 	ldw	r18,8(sp)
  81072c:	dc400117 	ldw	r17,4(sp)
  810730:	dc000017 	ldw	r16,0(sp)
  810734:	dec00a04 	addi	sp,sp,40
  810738:	f800283a 	ret
  81073c:	a8800217 	ldw	r2,8(r21)
  810740:	8c63883a 	add	r17,r17,r17
  810744:	8c63883a 	add	r17,r17,r17
  810748:	1445c83a 	sub	r2,r2,r17
  81074c:	a8800215 	stw	r2,8(r21)
  810750:	b5800204 	addi	r22,r22,8
  810754:	bdc00204 	addi	r23,r23,8
  810758:	103fdb1e 	bne	r2,zero,8106c8 <__alt_mem_onchip_mem+0xff8086c8>
  81075c:	0005883a 	mov	r2,zero
  810760:	003fe806 	br	810704 <__alt_mem_onchip_mem+0xff808704>
  810764:	08121980 	call	812198 <__sfvwrite_r>
  810768:	003fe606 	br	810704 <__alt_mem_onchip_mem+0xff808704>

0081076c <__sprint_r>:
  81076c:	30c00217 	ldw	r3,8(r6)
  810770:	18000126 	beq	r3,zero,810778 <__sprint_r+0xc>
  810774:	08106701 	jmpi	810670 <__sprint_r.part.0>
  810778:	30000115 	stw	zero,4(r6)
  81077c:	0005883a 	mov	r2,zero
  810780:	f800283a 	ret

00810784 <___vfiprintf_internal_r>:
  810784:	deffc904 	addi	sp,sp,-220
  810788:	df003515 	stw	fp,212(sp)
  81078c:	dd003115 	stw	r20,196(sp)
  810790:	dfc03615 	stw	ra,216(sp)
  810794:	ddc03415 	stw	r23,208(sp)
  810798:	dd803315 	stw	r22,204(sp)
  81079c:	dd403215 	stw	r21,200(sp)
  8107a0:	dcc03015 	stw	r19,192(sp)
  8107a4:	dc802f15 	stw	r18,188(sp)
  8107a8:	dc402e15 	stw	r17,184(sp)
  8107ac:	dc002d15 	stw	r16,180(sp)
  8107b0:	d9002015 	stw	r4,128(sp)
  8107b4:	d9c02215 	stw	r7,136(sp)
  8107b8:	2829883a 	mov	r20,r5
  8107bc:	3039883a 	mov	fp,r6
  8107c0:	20000226 	beq	r4,zero,8107cc <___vfiprintf_internal_r+0x48>
  8107c4:	20800e17 	ldw	r2,56(r4)
  8107c8:	1000cf26 	beq	r2,zero,810b08 <___vfiprintf_internal_r+0x384>
  8107cc:	a080030b 	ldhu	r2,12(r20)
  8107d0:	10c8000c 	andi	r3,r2,8192
  8107d4:	1800061e 	bne	r3,zero,8107f0 <___vfiprintf_internal_r+0x6c>
  8107d8:	a1001917 	ldw	r4,100(r20)
  8107dc:	00f7ffc4 	movi	r3,-8193
  8107e0:	10880014 	ori	r2,r2,8192
  8107e4:	20c6703a 	and	r3,r4,r3
  8107e8:	a080030d 	sth	r2,12(r20)
  8107ec:	a0c01915 	stw	r3,100(r20)
  8107f0:	10c0020c 	andi	r3,r2,8
  8107f4:	1800a926 	beq	r3,zero,810a9c <___vfiprintf_internal_r+0x318>
  8107f8:	a0c00417 	ldw	r3,16(r20)
  8107fc:	1800a726 	beq	r3,zero,810a9c <___vfiprintf_internal_r+0x318>
  810800:	1080068c 	andi	r2,r2,26
  810804:	00c00284 	movi	r3,10
  810808:	10c0ac26 	beq	r2,r3,810abc <___vfiprintf_internal_r+0x338>
  81080c:	da801a04 	addi	r10,sp,104
  810810:	da801e15 	stw	r10,120(sp)
  810814:	d8801e17 	ldw	r2,120(sp)
  810818:	da8019c4 	addi	r10,sp,103
  81081c:	058020b4 	movhi	r22,130
  810820:	05c020b4 	movhi	r23,130
  810824:	da801f15 	stw	r10,124(sp)
  810828:	1295c83a 	sub	r10,r2,r10
  81082c:	b5a2f904 	addi	r22,r22,-29724
  810830:	bde2f504 	addi	r23,r23,-29740
  810834:	dec01a15 	stw	sp,104(sp)
  810838:	d8001c15 	stw	zero,112(sp)
  81083c:	d8001b15 	stw	zero,108(sp)
  810840:	d8002615 	stw	zero,152(sp)
  810844:	d8002315 	stw	zero,140(sp)
  810848:	da802715 	stw	r10,156(sp)
  81084c:	d811883a 	mov	r8,sp
  810850:	dd002115 	stw	r20,132(sp)
  810854:	e021883a 	mov	r16,fp
  810858:	80800007 	ldb	r2,0(r16)
  81085c:	1003ea26 	beq	r2,zero,811808 <___vfiprintf_internal_r+0x1084>
  810860:	00c00944 	movi	r3,37
  810864:	8025883a 	mov	r18,r16
  810868:	10c0021e 	bne	r2,r3,810874 <___vfiprintf_internal_r+0xf0>
  81086c:	00001606 	br	8108c8 <___vfiprintf_internal_r+0x144>
  810870:	10c00326 	beq	r2,r3,810880 <___vfiprintf_internal_r+0xfc>
  810874:	94800044 	addi	r18,r18,1
  810878:	90800007 	ldb	r2,0(r18)
  81087c:	103ffc1e 	bne	r2,zero,810870 <__alt_mem_onchip_mem+0xff808870>
  810880:	9423c83a 	sub	r17,r18,r16
  810884:	88001026 	beq	r17,zero,8108c8 <___vfiprintf_internal_r+0x144>
  810888:	d8c01c17 	ldw	r3,112(sp)
  81088c:	d8801b17 	ldw	r2,108(sp)
  810890:	44000015 	stw	r16,0(r8)
  810894:	88c7883a 	add	r3,r17,r3
  810898:	10800044 	addi	r2,r2,1
  81089c:	44400115 	stw	r17,4(r8)
  8108a0:	d8c01c15 	stw	r3,112(sp)
  8108a4:	d8801b15 	stw	r2,108(sp)
  8108a8:	010001c4 	movi	r4,7
  8108ac:	2080760e 	bge	r4,r2,810a88 <___vfiprintf_internal_r+0x304>
  8108b0:	1803821e 	bne	r3,zero,8116bc <___vfiprintf_internal_r+0xf38>
  8108b4:	da802317 	ldw	r10,140(sp)
  8108b8:	d8001b15 	stw	zero,108(sp)
  8108bc:	d811883a 	mov	r8,sp
  8108c0:	5455883a 	add	r10,r10,r17
  8108c4:	da802315 	stw	r10,140(sp)
  8108c8:	90800007 	ldb	r2,0(r18)
  8108cc:	10044626 	beq	r2,zero,8119e8 <___vfiprintf_internal_r+0x1264>
  8108d0:	90c00047 	ldb	r3,1(r18)
  8108d4:	94000044 	addi	r16,r18,1
  8108d8:	d8001d85 	stb	zero,118(sp)
  8108dc:	0009883a 	mov	r4,zero
  8108e0:	000f883a 	mov	r7,zero
  8108e4:	027fffc4 	movi	r9,-1
  8108e8:	0023883a 	mov	r17,zero
  8108ec:	0029883a 	mov	r20,zero
  8108f0:	01401604 	movi	r5,88
  8108f4:	01800244 	movi	r6,9
  8108f8:	03400a84 	movi	r13,42
  8108fc:	03001b04 	movi	r12,108
  810900:	84000044 	addi	r16,r16,1
  810904:	18bff804 	addi	r2,r3,-32
  810908:	28827336 	bltu	r5,r2,8112d8 <___vfiprintf_internal_r+0xb54>
  81090c:	100490ba 	slli	r2,r2,2
  810910:	02802074 	movhi	r10,129
  810914:	52824904 	addi	r10,r10,2340
  810918:	1285883a 	add	r2,r2,r10
  81091c:	10800017 	ldw	r2,0(r2)
  810920:	1000683a 	jmp	r2
  810924:	0081100c 	andi	r2,zero,1088
  810928:	008112d8 	cmpnei	r2,zero,1099
  81092c:	008112d8 	cmpnei	r2,zero,1099
  810930:	0081102c 	andhi	r2,zero,1088
  810934:	008112d8 	cmpnei	r2,zero,1099
  810938:	008112d8 	cmpnei	r2,zero,1099
  81093c:	008112d8 	cmpnei	r2,zero,1099
  810940:	008112d8 	cmpnei	r2,zero,1099
  810944:	008112d8 	cmpnei	r2,zero,1099
  810948:	008112d8 	cmpnei	r2,zero,1099
  81094c:	00811214 	movui	r2,1096
  810950:	00811230 	cmpltui	r2,zero,1096
  810954:	008112d8 	cmpnei	r2,zero,1099
  810958:	00810b18 	cmpnei	r2,zero,1068
  81095c:	00811240 	call	81124 <__alt_mem_sdram-0x77eedc>
  810960:	008112d8 	cmpnei	r2,zero,1099
  810964:	00811038 	rdprs	r2,zero,1088
  810968:	00811044 	movi	r2,1089
  81096c:	00811044 	movi	r2,1089
  810970:	00811044 	movi	r2,1089
  810974:	00811044 	movi	r2,1089
  810978:	00811044 	movi	r2,1089
  81097c:	00811044 	movi	r2,1089
  810980:	00811044 	movi	r2,1089
  810984:	00811044 	movi	r2,1089
  810988:	00811044 	movi	r2,1089
  81098c:	008112d8 	cmpnei	r2,zero,1099
  810990:	008112d8 	cmpnei	r2,zero,1099
  810994:	008112d8 	cmpnei	r2,zero,1099
  810998:	008112d8 	cmpnei	r2,zero,1099
  81099c:	008112d8 	cmpnei	r2,zero,1099
  8109a0:	008112d8 	cmpnei	r2,zero,1099
  8109a4:	008112d8 	cmpnei	r2,zero,1099
  8109a8:	008112d8 	cmpnei	r2,zero,1099
  8109ac:	008112d8 	cmpnei	r2,zero,1099
  8109b0:	008112d8 	cmpnei	r2,zero,1099
  8109b4:	00811070 	cmpltui	r2,zero,1089
  8109b8:	008112d8 	cmpnei	r2,zero,1099
  8109bc:	008112d8 	cmpnei	r2,zero,1099
  8109c0:	008112d8 	cmpnei	r2,zero,1099
  8109c4:	008112d8 	cmpnei	r2,zero,1099
  8109c8:	008112d8 	cmpnei	r2,zero,1099
  8109cc:	008112d8 	cmpnei	r2,zero,1099
  8109d0:	008112d8 	cmpnei	r2,zero,1099
  8109d4:	008112d8 	cmpnei	r2,zero,1099
  8109d8:	008112d8 	cmpnei	r2,zero,1099
  8109dc:	008112d8 	cmpnei	r2,zero,1099
  8109e0:	008110a8 	cmpgeui	r2,zero,1090
  8109e4:	008112d8 	cmpnei	r2,zero,1099
  8109e8:	008112d8 	cmpnei	r2,zero,1099
  8109ec:	008112d8 	cmpnei	r2,zero,1099
  8109f0:	008112d8 	cmpnei	r2,zero,1099
  8109f4:	008112d8 	cmpnei	r2,zero,1099
  8109f8:	00811100 	call	81110 <__alt_mem_sdram-0x77eef0>
  8109fc:	008112d8 	cmpnei	r2,zero,1099
  810a00:	008112d8 	cmpnei	r2,zero,1099
  810a04:	00811170 	cmpltui	r2,zero,1093
  810a08:	008112d8 	cmpnei	r2,zero,1099
  810a0c:	008112d8 	cmpnei	r2,zero,1099
  810a10:	008112d8 	cmpnei	r2,zero,1099
  810a14:	008112d8 	cmpnei	r2,zero,1099
  810a18:	008112d8 	cmpnei	r2,zero,1099
  810a1c:	008112d8 	cmpnei	r2,zero,1099
  810a20:	008112d8 	cmpnei	r2,zero,1099
  810a24:	008112d8 	cmpnei	r2,zero,1099
  810a28:	008112d8 	cmpnei	r2,zero,1099
  810a2c:	008112d8 	cmpnei	r2,zero,1099
  810a30:	00810f1c 	xori	r2,zero,1084
  810a34:	00810f48 	cmpgei	r2,zero,1085
  810a38:	008112d8 	cmpnei	r2,zero,1099
  810a3c:	008112d8 	cmpnei	r2,zero,1099
  810a40:	008112d8 	cmpnei	r2,zero,1099
  810a44:	00811280 	call	81128 <__alt_mem_sdram-0x77eed8>
  810a48:	00810f48 	cmpgei	r2,zero,1085
  810a4c:	008112d8 	cmpnei	r2,zero,1099
  810a50:	008112d8 	cmpnei	r2,zero,1099
  810a54:	00810ddc 	xori	r2,zero,1079
  810a58:	008112d8 	cmpnei	r2,zero,1099
  810a5c:	00810dec 	andhi	r2,zero,1079
  810a60:	00810e28 	cmpgeui	r2,zero,1080
  810a64:	00810b24 	muli	r2,zero,1068
  810a68:	00810dd0 	cmplti	r2,zero,1079
  810a6c:	008112d8 	cmpnei	r2,zero,1099
  810a70:	008111ac 	andhi	r2,zero,1094
  810a74:	008112d8 	cmpnei	r2,zero,1099
  810a78:	00811204 	movi	r2,1096
  810a7c:	008112d8 	cmpnei	r2,zero,1099
  810a80:	008112d8 	cmpnei	r2,zero,1099
  810a84:	00810ec8 	cmpgei	r2,zero,1083
  810a88:	42000204 	addi	r8,r8,8
  810a8c:	da802317 	ldw	r10,140(sp)
  810a90:	5455883a 	add	r10,r10,r17
  810a94:	da802315 	stw	r10,140(sp)
  810a98:	003f8b06 	br	8108c8 <__alt_mem_onchip_mem+0xff8088c8>
  810a9c:	d9002017 	ldw	r4,128(sp)
  810aa0:	a00b883a 	mov	r5,r20
  810aa4:	080bf240 	call	80bf24 <__swsetup_r>
  810aa8:	1003b11e 	bne	r2,zero,811970 <___vfiprintf_internal_r+0x11ec>
  810aac:	a080030b 	ldhu	r2,12(r20)
  810ab0:	00c00284 	movi	r3,10
  810ab4:	1080068c 	andi	r2,r2,26
  810ab8:	10ff541e 	bne	r2,r3,81080c <__alt_mem_onchip_mem+0xff80880c>
  810abc:	a080038f 	ldh	r2,14(r20)
  810ac0:	103f5216 	blt	r2,zero,81080c <__alt_mem_onchip_mem+0xff80880c>
  810ac4:	d9c02217 	ldw	r7,136(sp)
  810ac8:	d9002017 	ldw	r4,128(sp)
  810acc:	e00d883a 	mov	r6,fp
  810ad0:	a00b883a 	mov	r5,r20
  810ad4:	0811bfc0 	call	811bfc <__sbprintf>
  810ad8:	dfc03617 	ldw	ra,216(sp)
  810adc:	df003517 	ldw	fp,212(sp)
  810ae0:	ddc03417 	ldw	r23,208(sp)
  810ae4:	dd803317 	ldw	r22,204(sp)
  810ae8:	dd403217 	ldw	r21,200(sp)
  810aec:	dd003117 	ldw	r20,196(sp)
  810af0:	dcc03017 	ldw	r19,192(sp)
  810af4:	dc802f17 	ldw	r18,188(sp)
  810af8:	dc402e17 	ldw	r17,184(sp)
  810afc:	dc002d17 	ldw	r16,180(sp)
  810b00:	dec03704 	addi	sp,sp,220
  810b04:	f800283a 	ret
  810b08:	080def80 	call	80def8 <__sinit>
  810b0c:	003f2f06 	br	8107cc <__alt_mem_onchip_mem+0xff8087cc>
  810b10:	0463c83a 	sub	r17,zero,r17
  810b14:	d8802215 	stw	r2,136(sp)
  810b18:	a5000114 	ori	r20,r20,4
  810b1c:	80c00007 	ldb	r3,0(r16)
  810b20:	003f7706 	br	810900 <__alt_mem_onchip_mem+0xff808900>
  810b24:	00800c04 	movi	r2,48
  810b28:	da802217 	ldw	r10,136(sp)
  810b2c:	d8801d05 	stb	r2,116(sp)
  810b30:	00801e04 	movi	r2,120
  810b34:	d8801d45 	stb	r2,117(sp)
  810b38:	d8001d85 	stb	zero,118(sp)
  810b3c:	50c00104 	addi	r3,r10,4
  810b40:	54800017 	ldw	r18,0(r10)
  810b44:	0027883a 	mov	r19,zero
  810b48:	a0800094 	ori	r2,r20,2
  810b4c:	48030b16 	blt	r9,zero,81177c <___vfiprintf_internal_r+0xff8>
  810b50:	00bfdfc4 	movi	r2,-129
  810b54:	a096703a 	and	r11,r20,r2
  810b58:	d8c02215 	stw	r3,136(sp)
  810b5c:	5d000094 	ori	r20,r11,2
  810b60:	90032b1e 	bne	r18,zero,811810 <___vfiprintf_internal_r+0x108c>
  810b64:	008020b4 	movhi	r2,130
  810b68:	10a29404 	addi	r2,r2,-30128
  810b6c:	d8802615 	stw	r2,152(sp)
  810b70:	0039883a 	mov	fp,zero
  810b74:	48017b1e 	bne	r9,zero,811164 <___vfiprintf_internal_r+0x9e0>
  810b78:	0013883a 	mov	r9,zero
  810b7c:	0027883a 	mov	r19,zero
  810b80:	dd401a04 	addi	r21,sp,104
  810b84:	4825883a 	mov	r18,r9
  810b88:	4cc0010e 	bge	r9,r19,810b90 <___vfiprintf_internal_r+0x40c>
  810b8c:	9825883a 	mov	r18,r19
  810b90:	e7003fcc 	andi	fp,fp,255
  810b94:	e700201c 	xori	fp,fp,128
  810b98:	e73fe004 	addi	fp,fp,-128
  810b9c:	e0000126 	beq	fp,zero,810ba4 <___vfiprintf_internal_r+0x420>
  810ba0:	94800044 	addi	r18,r18,1
  810ba4:	a380008c 	andi	r14,r20,2
  810ba8:	70000126 	beq	r14,zero,810bb0 <___vfiprintf_internal_r+0x42c>
  810bac:	94800084 	addi	r18,r18,2
  810bb0:	a700210c 	andi	fp,r20,132
  810bb4:	e001df1e 	bne	fp,zero,811334 <___vfiprintf_internal_r+0xbb0>
  810bb8:	8c87c83a 	sub	r3,r17,r18
  810bbc:	00c1dd0e 	bge	zero,r3,811334 <___vfiprintf_internal_r+0xbb0>
  810bc0:	01c00404 	movi	r7,16
  810bc4:	d8801c17 	ldw	r2,112(sp)
  810bc8:	38c3ad0e 	bge	r7,r3,811a80 <___vfiprintf_internal_r+0x12fc>
  810bcc:	028020b4 	movhi	r10,130
  810bd0:	52a2f904 	addi	r10,r10,-29724
  810bd4:	dc002915 	stw	r16,164(sp)
  810bd8:	d9801b17 	ldw	r6,108(sp)
  810bdc:	da802415 	stw	r10,144(sp)
  810be0:	03c001c4 	movi	r15,7
  810be4:	da402515 	stw	r9,148(sp)
  810be8:	db802815 	stw	r14,160(sp)
  810bec:	1821883a 	mov	r16,r3
  810bf0:	00000506 	br	810c08 <___vfiprintf_internal_r+0x484>
  810bf4:	31400084 	addi	r5,r6,2
  810bf8:	42000204 	addi	r8,r8,8
  810bfc:	200d883a 	mov	r6,r4
  810c00:	843ffc04 	addi	r16,r16,-16
  810c04:	3c000d0e 	bge	r7,r16,810c3c <___vfiprintf_internal_r+0x4b8>
  810c08:	10800404 	addi	r2,r2,16
  810c0c:	31000044 	addi	r4,r6,1
  810c10:	45800015 	stw	r22,0(r8)
  810c14:	41c00115 	stw	r7,4(r8)
  810c18:	d8801c15 	stw	r2,112(sp)
  810c1c:	d9001b15 	stw	r4,108(sp)
  810c20:	793ff40e 	bge	r15,r4,810bf4 <__alt_mem_onchip_mem+0xff808bf4>
  810c24:	1001b51e 	bne	r2,zero,8112fc <___vfiprintf_internal_r+0xb78>
  810c28:	843ffc04 	addi	r16,r16,-16
  810c2c:	000d883a 	mov	r6,zero
  810c30:	01400044 	movi	r5,1
  810c34:	d811883a 	mov	r8,sp
  810c38:	3c3ff316 	blt	r7,r16,810c08 <__alt_mem_onchip_mem+0xff808c08>
  810c3c:	8007883a 	mov	r3,r16
  810c40:	da402517 	ldw	r9,148(sp)
  810c44:	db802817 	ldw	r14,160(sp)
  810c48:	dc002917 	ldw	r16,164(sp)
  810c4c:	da802417 	ldw	r10,144(sp)
  810c50:	1885883a 	add	r2,r3,r2
  810c54:	40c00115 	stw	r3,4(r8)
  810c58:	42800015 	stw	r10,0(r8)
  810c5c:	d8801c15 	stw	r2,112(sp)
  810c60:	d9401b15 	stw	r5,108(sp)
  810c64:	00c001c4 	movi	r3,7
  810c68:	19426016 	blt	r3,r5,8115ec <___vfiprintf_internal_r+0xe68>
  810c6c:	d8c01d87 	ldb	r3,118(sp)
  810c70:	42000204 	addi	r8,r8,8
  810c74:	29000044 	addi	r4,r5,1
  810c78:	1801b31e 	bne	r3,zero,811348 <___vfiprintf_internal_r+0xbc4>
  810c7c:	7001c026 	beq	r14,zero,811380 <___vfiprintf_internal_r+0xbfc>
  810c80:	d8c01d04 	addi	r3,sp,116
  810c84:	10800084 	addi	r2,r2,2
  810c88:	40c00015 	stw	r3,0(r8)
  810c8c:	00c00084 	movi	r3,2
  810c90:	40c00115 	stw	r3,4(r8)
  810c94:	d8801c15 	stw	r2,112(sp)
  810c98:	d9001b15 	stw	r4,108(sp)
  810c9c:	00c001c4 	movi	r3,7
  810ca0:	1902650e 	bge	r3,r4,811638 <___vfiprintf_internal_r+0xeb4>
  810ca4:	10029a1e 	bne	r2,zero,811710 <___vfiprintf_internal_r+0xf8c>
  810ca8:	00c02004 	movi	r3,128
  810cac:	01000044 	movi	r4,1
  810cb0:	000b883a 	mov	r5,zero
  810cb4:	d811883a 	mov	r8,sp
  810cb8:	e0c1b31e 	bne	fp,r3,811388 <___vfiprintf_internal_r+0xc04>
  810cbc:	8cb9c83a 	sub	fp,r17,r18
  810cc0:	0701b10e 	bge	zero,fp,811388 <___vfiprintf_internal_r+0xc04>
  810cc4:	01c00404 	movi	r7,16
  810cc8:	3f03890e 	bge	r7,fp,811af0 <___vfiprintf_internal_r+0x136c>
  810ccc:	00c020b4 	movhi	r3,130
  810cd0:	18e2f504 	addi	r3,r3,-29740
  810cd4:	d8c02415 	stw	r3,144(sp)
  810cd8:	8007883a 	mov	r3,r16
  810cdc:	034001c4 	movi	r13,7
  810ce0:	e021883a 	mov	r16,fp
  810ce4:	da402515 	stw	r9,148(sp)
  810ce8:	1839883a 	mov	fp,r3
  810cec:	00000506 	br	810d04 <___vfiprintf_internal_r+0x580>
  810cf0:	29800084 	addi	r6,r5,2
  810cf4:	42000204 	addi	r8,r8,8
  810cf8:	180b883a 	mov	r5,r3
  810cfc:	843ffc04 	addi	r16,r16,-16
  810d00:	3c000d0e 	bge	r7,r16,810d38 <___vfiprintf_internal_r+0x5b4>
  810d04:	10800404 	addi	r2,r2,16
  810d08:	28c00044 	addi	r3,r5,1
  810d0c:	45c00015 	stw	r23,0(r8)
  810d10:	41c00115 	stw	r7,4(r8)
  810d14:	d8801c15 	stw	r2,112(sp)
  810d18:	d8c01b15 	stw	r3,108(sp)
  810d1c:	68fff40e 	bge	r13,r3,810cf0 <__alt_mem_onchip_mem+0xff808cf0>
  810d20:	1002241e 	bne	r2,zero,8115b4 <___vfiprintf_internal_r+0xe30>
  810d24:	843ffc04 	addi	r16,r16,-16
  810d28:	01800044 	movi	r6,1
  810d2c:	000b883a 	mov	r5,zero
  810d30:	d811883a 	mov	r8,sp
  810d34:	3c3ff316 	blt	r7,r16,810d04 <__alt_mem_onchip_mem+0xff808d04>
  810d38:	da402517 	ldw	r9,148(sp)
  810d3c:	e007883a 	mov	r3,fp
  810d40:	8039883a 	mov	fp,r16
  810d44:	1821883a 	mov	r16,r3
  810d48:	d8c02417 	ldw	r3,144(sp)
  810d4c:	1705883a 	add	r2,r2,fp
  810d50:	47000115 	stw	fp,4(r8)
  810d54:	40c00015 	stw	r3,0(r8)
  810d58:	d8801c15 	stw	r2,112(sp)
  810d5c:	d9801b15 	stw	r6,108(sp)
  810d60:	00c001c4 	movi	r3,7
  810d64:	19827616 	blt	r3,r6,811740 <___vfiprintf_internal_r+0xfbc>
  810d68:	4cf9c83a 	sub	fp,r9,r19
  810d6c:	42000204 	addi	r8,r8,8
  810d70:	31000044 	addi	r4,r6,1
  810d74:	300b883a 	mov	r5,r6
  810d78:	07018516 	blt	zero,fp,811390 <___vfiprintf_internal_r+0xc0c>
  810d7c:	9885883a 	add	r2,r19,r2
  810d80:	45400015 	stw	r21,0(r8)
  810d84:	44c00115 	stw	r19,4(r8)
  810d88:	d8801c15 	stw	r2,112(sp)
  810d8c:	d9001b15 	stw	r4,108(sp)
  810d90:	00c001c4 	movi	r3,7
  810d94:	1901dd0e 	bge	r3,r4,81150c <___vfiprintf_internal_r+0xd88>
  810d98:	1002401e 	bne	r2,zero,81169c <___vfiprintf_internal_r+0xf18>
  810d9c:	d8001b15 	stw	zero,108(sp)
  810da0:	a2c0010c 	andi	r11,r20,4
  810da4:	58000226 	beq	r11,zero,810db0 <___vfiprintf_internal_r+0x62c>
  810da8:	8ca7c83a 	sub	r19,r17,r18
  810dac:	04c2f216 	blt	zero,r19,811978 <___vfiprintf_internal_r+0x11f4>
  810db0:	8c80010e 	bge	r17,r18,810db8 <___vfiprintf_internal_r+0x634>
  810db4:	9023883a 	mov	r17,r18
  810db8:	da802317 	ldw	r10,140(sp)
  810dbc:	5455883a 	add	r10,r10,r17
  810dc0:	da802315 	stw	r10,140(sp)
  810dc4:	d8001b15 	stw	zero,108(sp)
  810dc8:	d811883a 	mov	r8,sp
  810dcc:	003ea206 	br	810858 <__alt_mem_onchip_mem+0xff808858>
  810dd0:	a5000814 	ori	r20,r20,32
  810dd4:	80c00007 	ldb	r3,0(r16)
  810dd8:	003ec906 	br	810900 <__alt_mem_onchip_mem+0xff808900>
  810ddc:	80c00007 	ldb	r3,0(r16)
  810de0:	1b030926 	beq	r3,r12,811a08 <___vfiprintf_internal_r+0x1284>
  810de4:	a5000414 	ori	r20,r20,16
  810de8:	003ec506 	br	810900 <__alt_mem_onchip_mem+0xff808900>
  810dec:	21003fcc 	andi	r4,r4,255
  810df0:	20035e1e 	bne	r4,zero,811b6c <___vfiprintf_internal_r+0x13e8>
  810df4:	a080080c 	andi	r2,r20,32
  810df8:	1002a526 	beq	r2,zero,811890 <___vfiprintf_internal_r+0x110c>
  810dfc:	da802217 	ldw	r10,136(sp)
  810e00:	50800017 	ldw	r2,0(r10)
  810e04:	da802317 	ldw	r10,140(sp)
  810e08:	5007d7fa 	srai	r3,r10,31
  810e0c:	da802217 	ldw	r10,136(sp)
  810e10:	10c00115 	stw	r3,4(r2)
  810e14:	52800104 	addi	r10,r10,4
  810e18:	da802215 	stw	r10,136(sp)
  810e1c:	da802317 	ldw	r10,140(sp)
  810e20:	12800015 	stw	r10,0(r2)
  810e24:	003e8c06 	br	810858 <__alt_mem_onchip_mem+0xff808858>
  810e28:	21003fcc 	andi	r4,r4,255
  810e2c:	2003511e 	bne	r4,zero,811b74 <___vfiprintf_internal_r+0x13f0>
  810e30:	a080080c 	andi	r2,r20,32
  810e34:	1000a126 	beq	r2,zero,8110bc <___vfiprintf_internal_r+0x938>
  810e38:	da802217 	ldw	r10,136(sp)
  810e3c:	d8001d85 	stb	zero,118(sp)
  810e40:	50800204 	addi	r2,r10,8
  810e44:	54800017 	ldw	r18,0(r10)
  810e48:	54c00117 	ldw	r19,4(r10)
  810e4c:	4802b416 	blt	r9,zero,811920 <___vfiprintf_internal_r+0x119c>
  810e50:	013fdfc4 	movi	r4,-129
  810e54:	94c6b03a 	or	r3,r18,r19
  810e58:	d8802215 	stw	r2,136(sp)
  810e5c:	a128703a 	and	r20,r20,r4
  810e60:	1800a226 	beq	r3,zero,8110ec <___vfiprintf_internal_r+0x968>
  810e64:	0039883a 	mov	fp,zero
  810e68:	dd401a04 	addi	r21,sp,104
  810e6c:	9006d0fa 	srli	r3,r18,3
  810e70:	9808977a 	slli	r4,r19,29
  810e74:	9826d0fa 	srli	r19,r19,3
  810e78:	948001cc 	andi	r18,r18,7
  810e7c:	90800c04 	addi	r2,r18,48
  810e80:	ad7fffc4 	addi	r21,r21,-1
  810e84:	20e4b03a 	or	r18,r4,r3
  810e88:	a8800005 	stb	r2,0(r21)
  810e8c:	94c6b03a 	or	r3,r18,r19
  810e90:	183ff61e 	bne	r3,zero,810e6c <__alt_mem_onchip_mem+0xff808e6c>
  810e94:	a0c0004c 	andi	r3,r20,1
  810e98:	18005926 	beq	r3,zero,811000 <___vfiprintf_internal_r+0x87c>
  810e9c:	10803fcc 	andi	r2,r2,255
  810ea0:	1080201c 	xori	r2,r2,128
  810ea4:	10bfe004 	addi	r2,r2,-128
  810ea8:	00c00c04 	movi	r3,48
  810eac:	10c05426 	beq	r2,r3,811000 <___vfiprintf_internal_r+0x87c>
  810eb0:	da801e17 	ldw	r10,120(sp)
  810eb4:	a8bfffc4 	addi	r2,r21,-1
  810eb8:	a8ffffc5 	stb	r3,-1(r21)
  810ebc:	50a7c83a 	sub	r19,r10,r2
  810ec0:	102b883a 	mov	r21,r2
  810ec4:	003f2f06 	br	810b84 <__alt_mem_onchip_mem+0xff808b84>
  810ec8:	21003fcc 	andi	r4,r4,255
  810ecc:	2003421e 	bne	r4,zero,811bd8 <___vfiprintf_internal_r+0x1454>
  810ed0:	008020b4 	movhi	r2,130
  810ed4:	10a29404 	addi	r2,r2,-30128
  810ed8:	d8802615 	stw	r2,152(sp)
  810edc:	a080080c 	andi	r2,r20,32
  810ee0:	1000aa26 	beq	r2,zero,81118c <___vfiprintf_internal_r+0xa08>
  810ee4:	da802217 	ldw	r10,136(sp)
  810ee8:	54800017 	ldw	r18,0(r10)
  810eec:	54c00117 	ldw	r19,4(r10)
  810ef0:	52800204 	addi	r10,r10,8
  810ef4:	da802215 	stw	r10,136(sp)
  810ef8:	a080004c 	andi	r2,r20,1
  810efc:	1001d226 	beq	r2,zero,811648 <___vfiprintf_internal_r+0xec4>
  810f00:	94c4b03a 	or	r2,r18,r19
  810f04:	1002351e 	bne	r2,zero,8117dc <___vfiprintf_internal_r+0x1058>
  810f08:	d8001d85 	stb	zero,118(sp)
  810f0c:	48022216 	blt	r9,zero,811798 <___vfiprintf_internal_r+0x1014>
  810f10:	00bfdfc4 	movi	r2,-129
  810f14:	a0a8703a 	and	r20,r20,r2
  810f18:	003f1506 	br	810b70 <__alt_mem_onchip_mem+0xff808b70>
  810f1c:	da802217 	ldw	r10,136(sp)
  810f20:	04800044 	movi	r18,1
  810f24:	d8001d85 	stb	zero,118(sp)
  810f28:	50800017 	ldw	r2,0(r10)
  810f2c:	52800104 	addi	r10,r10,4
  810f30:	da802215 	stw	r10,136(sp)
  810f34:	d8801005 	stb	r2,64(sp)
  810f38:	9027883a 	mov	r19,r18
  810f3c:	dd401004 	addi	r21,sp,64
  810f40:	0013883a 	mov	r9,zero
  810f44:	003f1706 	br	810ba4 <__alt_mem_onchip_mem+0xff808ba4>
  810f48:	21003fcc 	andi	r4,r4,255
  810f4c:	2003201e 	bne	r4,zero,811bd0 <___vfiprintf_internal_r+0x144c>
  810f50:	a080080c 	andi	r2,r20,32
  810f54:	10004b26 	beq	r2,zero,811084 <___vfiprintf_internal_r+0x900>
  810f58:	da802217 	ldw	r10,136(sp)
  810f5c:	50800117 	ldw	r2,4(r10)
  810f60:	54800017 	ldw	r18,0(r10)
  810f64:	52800204 	addi	r10,r10,8
  810f68:	da802215 	stw	r10,136(sp)
  810f6c:	1027883a 	mov	r19,r2
  810f70:	10022c16 	blt	r2,zero,811824 <___vfiprintf_internal_r+0x10a0>
  810f74:	df001d83 	ldbu	fp,118(sp)
  810f78:	48007216 	blt	r9,zero,811144 <___vfiprintf_internal_r+0x9c0>
  810f7c:	00ffdfc4 	movi	r3,-129
  810f80:	94c4b03a 	or	r2,r18,r19
  810f84:	a0e8703a 	and	r20,r20,r3
  810f88:	1000cc26 	beq	r2,zero,8112bc <___vfiprintf_internal_r+0xb38>
  810f8c:	98021026 	beq	r19,zero,8117d0 <___vfiprintf_internal_r+0x104c>
  810f90:	dc402415 	stw	r17,144(sp)
  810f94:	dc002515 	stw	r16,148(sp)
  810f98:	9823883a 	mov	r17,r19
  810f9c:	9021883a 	mov	r16,r18
  810fa0:	dd401a04 	addi	r21,sp,104
  810fa4:	4825883a 	mov	r18,r9
  810fa8:	4027883a 	mov	r19,r8
  810fac:	8009883a 	mov	r4,r16
  810fb0:	880b883a 	mov	r5,r17
  810fb4:	01800284 	movi	r6,10
  810fb8:	000f883a 	mov	r7,zero
  810fbc:	08136e00 	call	8136e0 <__umoddi3>
  810fc0:	10800c04 	addi	r2,r2,48
  810fc4:	ad7fffc4 	addi	r21,r21,-1
  810fc8:	8009883a 	mov	r4,r16
  810fcc:	880b883a 	mov	r5,r17
  810fd0:	a8800005 	stb	r2,0(r21)
  810fd4:	01800284 	movi	r6,10
  810fd8:	000f883a 	mov	r7,zero
  810fdc:	08131680 	call	813168 <__udivdi3>
  810fe0:	1021883a 	mov	r16,r2
  810fe4:	10c4b03a 	or	r2,r2,r3
  810fe8:	1823883a 	mov	r17,r3
  810fec:	103fef1e 	bne	r2,zero,810fac <__alt_mem_onchip_mem+0xff808fac>
  810ff0:	dc402417 	ldw	r17,144(sp)
  810ff4:	dc002517 	ldw	r16,148(sp)
  810ff8:	9013883a 	mov	r9,r18
  810ffc:	9811883a 	mov	r8,r19
  811000:	da801e17 	ldw	r10,120(sp)
  811004:	5567c83a 	sub	r19,r10,r21
  811008:	003ede06 	br	810b84 <__alt_mem_onchip_mem+0xff808b84>
  81100c:	38803fcc 	andi	r2,r7,255
  811010:	1080201c 	xori	r2,r2,128
  811014:	10bfe004 	addi	r2,r2,-128
  811018:	1002371e 	bne	r2,zero,8118f8 <___vfiprintf_internal_r+0x1174>
  81101c:	01000044 	movi	r4,1
  811020:	01c00804 	movi	r7,32
  811024:	80c00007 	ldb	r3,0(r16)
  811028:	003e3506 	br	810900 <__alt_mem_onchip_mem+0xff808900>
  81102c:	a5000054 	ori	r20,r20,1
  811030:	80c00007 	ldb	r3,0(r16)
  811034:	003e3206 	br	810900 <__alt_mem_onchip_mem+0xff808900>
  811038:	a5002014 	ori	r20,r20,128
  81103c:	80c00007 	ldb	r3,0(r16)
  811040:	003e2f06 	br	810900 <__alt_mem_onchip_mem+0xff808900>
  811044:	8015883a 	mov	r10,r16
  811048:	0023883a 	mov	r17,zero
  81104c:	18bff404 	addi	r2,r3,-48
  811050:	50c00007 	ldb	r3,0(r10)
  811054:	8c4002a4 	muli	r17,r17,10
  811058:	84000044 	addi	r16,r16,1
  81105c:	8015883a 	mov	r10,r16
  811060:	1463883a 	add	r17,r2,r17
  811064:	18bff404 	addi	r2,r3,-48
  811068:	30bff92e 	bgeu	r6,r2,811050 <__alt_mem_onchip_mem+0xff809050>
  81106c:	003e2506 	br	810904 <__alt_mem_onchip_mem+0xff808904>
  811070:	21003fcc 	andi	r4,r4,255
  811074:	2002d41e 	bne	r4,zero,811bc8 <___vfiprintf_internal_r+0x1444>
  811078:	a5000414 	ori	r20,r20,16
  81107c:	a080080c 	andi	r2,r20,32
  811080:	103fb51e 	bne	r2,zero,810f58 <__alt_mem_onchip_mem+0xff808f58>
  811084:	a080040c 	andi	r2,r20,16
  811088:	1001f826 	beq	r2,zero,81186c <___vfiprintf_internal_r+0x10e8>
  81108c:	da802217 	ldw	r10,136(sp)
  811090:	54800017 	ldw	r18,0(r10)
  811094:	52800104 	addi	r10,r10,4
  811098:	da802215 	stw	r10,136(sp)
  81109c:	9027d7fa 	srai	r19,r18,31
  8110a0:	9805883a 	mov	r2,r19
  8110a4:	003fb206 	br	810f70 <__alt_mem_onchip_mem+0xff808f70>
  8110a8:	21003fcc 	andi	r4,r4,255
  8110ac:	2002c41e 	bne	r4,zero,811bc0 <___vfiprintf_internal_r+0x143c>
  8110b0:	a5000414 	ori	r20,r20,16
  8110b4:	a080080c 	andi	r2,r20,32
  8110b8:	103f5f1e 	bne	r2,zero,810e38 <__alt_mem_onchip_mem+0xff808e38>
  8110bc:	a080040c 	andi	r2,r20,16
  8110c0:	10020f26 	beq	r2,zero,811900 <___vfiprintf_internal_r+0x117c>
  8110c4:	da802217 	ldw	r10,136(sp)
  8110c8:	d8001d85 	stb	zero,118(sp)
  8110cc:	0027883a 	mov	r19,zero
  8110d0:	50800104 	addi	r2,r10,4
  8110d4:	54800017 	ldw	r18,0(r10)
  8110d8:	48021116 	blt	r9,zero,811920 <___vfiprintf_internal_r+0x119c>
  8110dc:	00ffdfc4 	movi	r3,-129
  8110e0:	d8802215 	stw	r2,136(sp)
  8110e4:	a0e8703a 	and	r20,r20,r3
  8110e8:	903f5e1e 	bne	r18,zero,810e64 <__alt_mem_onchip_mem+0xff808e64>
  8110ec:	0039883a 	mov	fp,zero
  8110f0:	4802a626 	beq	r9,zero,811b8c <___vfiprintf_internal_r+0x1408>
  8110f4:	0025883a 	mov	r18,zero
  8110f8:	0027883a 	mov	r19,zero
  8110fc:	003f5a06 	br	810e68 <__alt_mem_onchip_mem+0xff808e68>
  811100:	21003fcc 	andi	r4,r4,255
  811104:	20029f1e 	bne	r4,zero,811b84 <___vfiprintf_internal_r+0x1400>
  811108:	a5000414 	ori	r20,r20,16
  81110c:	a080080c 	andi	r2,r20,32
  811110:	10005e1e 	bne	r2,zero,81128c <___vfiprintf_internal_r+0xb08>
  811114:	a080040c 	andi	r2,r20,16
  811118:	1001a21e 	bne	r2,zero,8117a4 <___vfiprintf_internal_r+0x1020>
  81111c:	a080100c 	andi	r2,r20,64
  811120:	d8001d85 	stb	zero,118(sp)
  811124:	da802217 	ldw	r10,136(sp)
  811128:	1002231e 	bne	r2,zero,8119b8 <___vfiprintf_internal_r+0x1234>
  81112c:	50800104 	addi	r2,r10,4
  811130:	54800017 	ldw	r18,0(r10)
  811134:	0027883a 	mov	r19,zero
  811138:	4801a00e 	bge	r9,zero,8117bc <___vfiprintf_internal_r+0x1038>
  81113c:	d8802215 	stw	r2,136(sp)
  811140:	0039883a 	mov	fp,zero
  811144:	94c4b03a 	or	r2,r18,r19
  811148:	103f901e 	bne	r2,zero,810f8c <__alt_mem_onchip_mem+0xff808f8c>
  81114c:	00800044 	movi	r2,1
  811150:	10803fcc 	andi	r2,r2,255
  811154:	00c00044 	movi	r3,1
  811158:	10c05926 	beq	r2,r3,8112c0 <___vfiprintf_internal_r+0xb3c>
  81115c:	00c00084 	movi	r3,2
  811160:	10ffe41e 	bne	r2,r3,8110f4 <__alt_mem_onchip_mem+0xff8090f4>
  811164:	0025883a 	mov	r18,zero
  811168:	0027883a 	mov	r19,zero
  81116c:	00013d06 	br	811664 <___vfiprintf_internal_r+0xee0>
  811170:	21003fcc 	andi	r4,r4,255
  811174:	2002811e 	bne	r4,zero,811b7c <___vfiprintf_internal_r+0x13f8>
  811178:	008020b4 	movhi	r2,130
  81117c:	10a28f04 	addi	r2,r2,-30148
  811180:	d8802615 	stw	r2,152(sp)
  811184:	a080080c 	andi	r2,r20,32
  811188:	103f561e 	bne	r2,zero,810ee4 <__alt_mem_onchip_mem+0xff808ee4>
  81118c:	a080040c 	andi	r2,r20,16
  811190:	1001d126 	beq	r2,zero,8118d8 <___vfiprintf_internal_r+0x1154>
  811194:	da802217 	ldw	r10,136(sp)
  811198:	0027883a 	mov	r19,zero
  81119c:	54800017 	ldw	r18,0(r10)
  8111a0:	52800104 	addi	r10,r10,4
  8111a4:	da802215 	stw	r10,136(sp)
  8111a8:	003f5306 	br	810ef8 <__alt_mem_onchip_mem+0xff808ef8>
  8111ac:	da802217 	ldw	r10,136(sp)
  8111b0:	d8001d85 	stb	zero,118(sp)
  8111b4:	55400017 	ldw	r21,0(r10)
  8111b8:	50c00104 	addi	r3,r10,4
  8111bc:	a8024226 	beq	r21,zero,811ac8 <___vfiprintf_internal_r+0x1344>
  8111c0:	48021816 	blt	r9,zero,811a24 <___vfiprintf_internal_r+0x12a0>
  8111c4:	480d883a 	mov	r6,r9
  8111c8:	000b883a 	mov	r5,zero
  8111cc:	a809883a 	mov	r4,r21
  8111d0:	d8c02a15 	stw	r3,168(sp)
  8111d4:	da002b15 	stw	r8,172(sp)
  8111d8:	da402c15 	stw	r9,176(sp)
  8111dc:	080efa80 	call	80efa8 <memchr>
  8111e0:	d8c02a17 	ldw	r3,168(sp)
  8111e4:	da002b17 	ldw	r8,172(sp)
  8111e8:	da402c17 	ldw	r9,176(sp)
  8111ec:	10024826 	beq	r2,zero,811b10 <___vfiprintf_internal_r+0x138c>
  8111f0:	1567c83a 	sub	r19,r2,r21
  8111f4:	df001d83 	ldbu	fp,118(sp)
  8111f8:	d8c02215 	stw	r3,136(sp)
  8111fc:	0013883a 	mov	r9,zero
  811200:	003e6006 	br	810b84 <__alt_mem_onchip_mem+0xff808b84>
  811204:	21003fcc 	andi	r4,r4,255
  811208:	203fc026 	beq	r4,zero,81110c <__alt_mem_onchip_mem+0xff80910c>
  81120c:	d9c01d85 	stb	r7,118(sp)
  811210:	003fbe06 	br	81110c <__alt_mem_onchip_mem+0xff80910c>
  811214:	da802217 	ldw	r10,136(sp)
  811218:	54400017 	ldw	r17,0(r10)
  81121c:	50800104 	addi	r2,r10,4
  811220:	883e3b16 	blt	r17,zero,810b10 <__alt_mem_onchip_mem+0xff808b10>
  811224:	d8802215 	stw	r2,136(sp)
  811228:	80c00007 	ldb	r3,0(r16)
  81122c:	003db406 	br	810900 <__alt_mem_onchip_mem+0xff808900>
  811230:	01000044 	movi	r4,1
  811234:	01c00ac4 	movi	r7,43
  811238:	80c00007 	ldb	r3,0(r16)
  81123c:	003db006 	br	810900 <__alt_mem_onchip_mem+0xff808900>
  811240:	80c00007 	ldb	r3,0(r16)
  811244:	82800044 	addi	r10,r16,1
  811248:	1b423c26 	beq	r3,r13,811b3c <___vfiprintf_internal_r+0x13b8>
  81124c:	18bff404 	addi	r2,r3,-48
  811250:	0013883a 	mov	r9,zero
  811254:	30822b36 	bltu	r6,r2,811b04 <___vfiprintf_internal_r+0x1380>
  811258:	50c00007 	ldb	r3,0(r10)
  81125c:	4a4002a4 	muli	r9,r9,10
  811260:	54000044 	addi	r16,r10,1
  811264:	8015883a 	mov	r10,r16
  811268:	4893883a 	add	r9,r9,r2
  81126c:	18bff404 	addi	r2,r3,-48
  811270:	30bff92e 	bgeu	r6,r2,811258 <__alt_mem_onchip_mem+0xff809258>
  811274:	483da30e 	bge	r9,zero,810904 <__alt_mem_onchip_mem+0xff808904>
  811278:	027fffc4 	movi	r9,-1
  81127c:	003da106 	br	810904 <__alt_mem_onchip_mem+0xff808904>
  811280:	a5001014 	ori	r20,r20,64
  811284:	80c00007 	ldb	r3,0(r16)
  811288:	003d9d06 	br	810900 <__alt_mem_onchip_mem+0xff808900>
  81128c:	da802217 	ldw	r10,136(sp)
  811290:	d8001d85 	stb	zero,118(sp)
  811294:	50c00204 	addi	r3,r10,8
  811298:	54800017 	ldw	r18,0(r10)
  81129c:	54c00117 	ldw	r19,4(r10)
  8112a0:	4801ca16 	blt	r9,zero,8119cc <___vfiprintf_internal_r+0x1248>
  8112a4:	013fdfc4 	movi	r4,-129
  8112a8:	94c4b03a 	or	r2,r18,r19
  8112ac:	d8c02215 	stw	r3,136(sp)
  8112b0:	a128703a 	and	r20,r20,r4
  8112b4:	0039883a 	mov	fp,zero
  8112b8:	103f341e 	bne	r2,zero,810f8c <__alt_mem_onchip_mem+0xff808f8c>
  8112bc:	483e2e26 	beq	r9,zero,810b78 <__alt_mem_onchip_mem+0xff808b78>
  8112c0:	0025883a 	mov	r18,zero
  8112c4:	94800c04 	addi	r18,r18,48
  8112c8:	dc8019c5 	stb	r18,103(sp)
  8112cc:	dcc02717 	ldw	r19,156(sp)
  8112d0:	dd4019c4 	addi	r21,sp,103
  8112d4:	003e2b06 	br	810b84 <__alt_mem_onchip_mem+0xff808b84>
  8112d8:	21003fcc 	andi	r4,r4,255
  8112dc:	2002361e 	bne	r4,zero,811bb8 <___vfiprintf_internal_r+0x1434>
  8112e0:	1801c126 	beq	r3,zero,8119e8 <___vfiprintf_internal_r+0x1264>
  8112e4:	04800044 	movi	r18,1
  8112e8:	d8c01005 	stb	r3,64(sp)
  8112ec:	d8001d85 	stb	zero,118(sp)
  8112f0:	9027883a 	mov	r19,r18
  8112f4:	dd401004 	addi	r21,sp,64
  8112f8:	003f1106 	br	810f40 <__alt_mem_onchip_mem+0xff808f40>
  8112fc:	d9402117 	ldw	r5,132(sp)
  811300:	d9002017 	ldw	r4,128(sp)
  811304:	d9801a04 	addi	r6,sp,104
  811308:	d9c02b15 	stw	r7,172(sp)
  81130c:	dbc02a15 	stw	r15,168(sp)
  811310:	08106700 	call	810670 <__sprint_r.part.0>
  811314:	d9c02b17 	ldw	r7,172(sp)
  811318:	dbc02a17 	ldw	r15,168(sp)
  81131c:	10006d1e 	bne	r2,zero,8114d4 <___vfiprintf_internal_r+0xd50>
  811320:	d9801b17 	ldw	r6,108(sp)
  811324:	d8801c17 	ldw	r2,112(sp)
  811328:	d811883a 	mov	r8,sp
  81132c:	31400044 	addi	r5,r6,1
  811330:	003e3306 	br	810c00 <__alt_mem_onchip_mem+0xff808c00>
  811334:	d9401b17 	ldw	r5,108(sp)
  811338:	d8801c17 	ldw	r2,112(sp)
  81133c:	29000044 	addi	r4,r5,1
  811340:	d8c01d87 	ldb	r3,118(sp)
  811344:	183e4d26 	beq	r3,zero,810c7c <__alt_mem_onchip_mem+0xff808c7c>
  811348:	00c00044 	movi	r3,1
  81134c:	d9401d84 	addi	r5,sp,118
  811350:	10c5883a 	add	r2,r2,r3
  811354:	41400015 	stw	r5,0(r8)
  811358:	40c00115 	stw	r3,4(r8)
  81135c:	d8801c15 	stw	r2,112(sp)
  811360:	d9001b15 	stw	r4,108(sp)
  811364:	014001c4 	movi	r5,7
  811368:	2900a90e 	bge	r5,r4,811610 <___vfiprintf_internal_r+0xe8c>
  81136c:	1000da1e 	bne	r2,zero,8116d8 <___vfiprintf_internal_r+0xf54>
  811370:	7000ab1e 	bne	r14,zero,811620 <___vfiprintf_internal_r+0xe9c>
  811374:	000b883a 	mov	r5,zero
  811378:	1809883a 	mov	r4,r3
  81137c:	d811883a 	mov	r8,sp
  811380:	00c02004 	movi	r3,128
  811384:	e0fe4d26 	beq	fp,r3,810cbc <__alt_mem_onchip_mem+0xff808cbc>
  811388:	4cf9c83a 	sub	fp,r9,r19
  81138c:	073e7b0e 	bge	zero,fp,810d7c <__alt_mem_onchip_mem+0xff808d7c>
  811390:	01c00404 	movi	r7,16
  811394:	3f01900e 	bge	r7,fp,8119d8 <___vfiprintf_internal_r+0x1254>
  811398:	00c020b4 	movhi	r3,130
  81139c:	18e2f504 	addi	r3,r3,-29740
  8113a0:	d8c02415 	stw	r3,144(sp)
  8113a4:	034001c4 	movi	r13,7
  8113a8:	00000506 	br	8113c0 <___vfiprintf_internal_r+0xc3c>
  8113ac:	29000084 	addi	r4,r5,2
  8113b0:	42000204 	addi	r8,r8,8
  8113b4:	180b883a 	mov	r5,r3
  8113b8:	e73ffc04 	addi	fp,fp,-16
  8113bc:	3f000d0e 	bge	r7,fp,8113f4 <___vfiprintf_internal_r+0xc70>
  8113c0:	10800404 	addi	r2,r2,16
  8113c4:	28c00044 	addi	r3,r5,1
  8113c8:	45c00015 	stw	r23,0(r8)
  8113cc:	41c00115 	stw	r7,4(r8)
  8113d0:	d8801c15 	stw	r2,112(sp)
  8113d4:	d8c01b15 	stw	r3,108(sp)
  8113d8:	68fff40e 	bge	r13,r3,8113ac <__alt_mem_onchip_mem+0xff8093ac>
  8113dc:	1000101e 	bne	r2,zero,811420 <___vfiprintf_internal_r+0xc9c>
  8113e0:	e73ffc04 	addi	fp,fp,-16
  8113e4:	01000044 	movi	r4,1
  8113e8:	000b883a 	mov	r5,zero
  8113ec:	d811883a 	mov	r8,sp
  8113f0:	3f3ff316 	blt	r7,fp,8113c0 <__alt_mem_onchip_mem+0xff8093c0>
  8113f4:	da802417 	ldw	r10,144(sp)
  8113f8:	1705883a 	add	r2,r2,fp
  8113fc:	47000115 	stw	fp,4(r8)
  811400:	42800015 	stw	r10,0(r8)
  811404:	d8801c15 	stw	r2,112(sp)
  811408:	d9001b15 	stw	r4,108(sp)
  81140c:	00c001c4 	movi	r3,7
  811410:	19003616 	blt	r3,r4,8114ec <___vfiprintf_internal_r+0xd68>
  811414:	42000204 	addi	r8,r8,8
  811418:	21000044 	addi	r4,r4,1
  81141c:	003e5706 	br	810d7c <__alt_mem_onchip_mem+0xff808d7c>
  811420:	d9402117 	ldw	r5,132(sp)
  811424:	d9002017 	ldw	r4,128(sp)
  811428:	d9801a04 	addi	r6,sp,104
  81142c:	d9c02b15 	stw	r7,172(sp)
  811430:	db402a15 	stw	r13,168(sp)
  811434:	08106700 	call	810670 <__sprint_r.part.0>
  811438:	d9c02b17 	ldw	r7,172(sp)
  81143c:	db402a17 	ldw	r13,168(sp)
  811440:	1000241e 	bne	r2,zero,8114d4 <___vfiprintf_internal_r+0xd50>
  811444:	d9401b17 	ldw	r5,108(sp)
  811448:	d8801c17 	ldw	r2,112(sp)
  81144c:	d811883a 	mov	r8,sp
  811450:	29000044 	addi	r4,r5,1
  811454:	003fd806 	br	8113b8 <__alt_mem_onchip_mem+0xff8093b8>
  811458:	d9401b17 	ldw	r5,108(sp)
  81145c:	00c020b4 	movhi	r3,130
  811460:	18e2f904 	addi	r3,r3,-29724
  811464:	d8c02415 	stw	r3,144(sp)
  811468:	29400044 	addi	r5,r5,1
  81146c:	d8c02417 	ldw	r3,144(sp)
  811470:	14c5883a 	add	r2,r2,r19
  811474:	44c00115 	stw	r19,4(r8)
  811478:	40c00015 	stw	r3,0(r8)
  81147c:	d8801c15 	stw	r2,112(sp)
  811480:	d9401b15 	stw	r5,108(sp)
  811484:	00c001c4 	movi	r3,7
  811488:	1940070e 	bge	r3,r5,8114a8 <___vfiprintf_internal_r+0xd24>
  81148c:	103e4826 	beq	r2,zero,810db0 <__alt_mem_onchip_mem+0xff808db0>
  811490:	d9402117 	ldw	r5,132(sp)
  811494:	d9002017 	ldw	r4,128(sp)
  811498:	d9801a04 	addi	r6,sp,104
  81149c:	08106700 	call	810670 <__sprint_r.part.0>
  8114a0:	10000c1e 	bne	r2,zero,8114d4 <___vfiprintf_internal_r+0xd50>
  8114a4:	d8801c17 	ldw	r2,112(sp)
  8114a8:	8c80010e 	bge	r17,r18,8114b0 <___vfiprintf_internal_r+0xd2c>
  8114ac:	9023883a 	mov	r17,r18
  8114b0:	da802317 	ldw	r10,140(sp)
  8114b4:	5455883a 	add	r10,r10,r17
  8114b8:	da802315 	stw	r10,140(sp)
  8114bc:	103e4126 	beq	r2,zero,810dc4 <__alt_mem_onchip_mem+0xff808dc4>
  8114c0:	d9402117 	ldw	r5,132(sp)
  8114c4:	d9002017 	ldw	r4,128(sp)
  8114c8:	d9801a04 	addi	r6,sp,104
  8114cc:	08106700 	call	810670 <__sprint_r.part.0>
  8114d0:	103e3c26 	beq	r2,zero,810dc4 <__alt_mem_onchip_mem+0xff808dc4>
  8114d4:	dd002117 	ldw	r20,132(sp)
  8114d8:	a080030b 	ldhu	r2,12(r20)
  8114dc:	1080100c 	andi	r2,r2,64
  8114e0:	1001231e 	bne	r2,zero,811970 <___vfiprintf_internal_r+0x11ec>
  8114e4:	d8802317 	ldw	r2,140(sp)
  8114e8:	003d7b06 	br	810ad8 <__alt_mem_onchip_mem+0xff808ad8>
  8114ec:	1000991e 	bne	r2,zero,811754 <___vfiprintf_internal_r+0xfd0>
  8114f0:	00c00044 	movi	r3,1
  8114f4:	9805883a 	mov	r2,r19
  8114f8:	dd400015 	stw	r21,0(sp)
  8114fc:	dcc00115 	stw	r19,4(sp)
  811500:	dcc01c15 	stw	r19,112(sp)
  811504:	d8c01b15 	stw	r3,108(sp)
  811508:	d811883a 	mov	r8,sp
  81150c:	42000204 	addi	r8,r8,8
  811510:	a2c0010c 	andi	r11,r20,4
  811514:	583fe426 	beq	r11,zero,8114a8 <__alt_mem_onchip_mem+0xff8094a8>
  811518:	8ca7c83a 	sub	r19,r17,r18
  81151c:	04ffe20e 	bge	zero,r19,8114a8 <__alt_mem_onchip_mem+0xff8094a8>
  811520:	01c00404 	movi	r7,16
  811524:	3cffcc0e 	bge	r7,r19,811458 <__alt_mem_onchip_mem+0xff809458>
  811528:	028020b4 	movhi	r10,130
  81152c:	52a2f904 	addi	r10,r10,-29724
  811530:	d9001b17 	ldw	r4,108(sp)
  811534:	da802415 	stw	r10,144(sp)
  811538:	382b883a 	mov	r21,r7
  81153c:	050001c4 	movi	r20,7
  811540:	df002017 	ldw	fp,128(sp)
  811544:	00000506 	br	81155c <___vfiprintf_internal_r+0xdd8>
  811548:	21400084 	addi	r5,r4,2
  81154c:	42000204 	addi	r8,r8,8
  811550:	1809883a 	mov	r4,r3
  811554:	9cfffc04 	addi	r19,r19,-16
  811558:	acffc40e 	bge	r21,r19,81146c <__alt_mem_onchip_mem+0xff80946c>
  81155c:	10800404 	addi	r2,r2,16
  811560:	20c00044 	addi	r3,r4,1
  811564:	45800015 	stw	r22,0(r8)
  811568:	45400115 	stw	r21,4(r8)
  81156c:	d8801c15 	stw	r2,112(sp)
  811570:	d8c01b15 	stw	r3,108(sp)
  811574:	a0fff40e 	bge	r20,r3,811548 <__alt_mem_onchip_mem+0xff809548>
  811578:	1000041e 	bne	r2,zero,81158c <___vfiprintf_internal_r+0xe08>
  81157c:	01400044 	movi	r5,1
  811580:	0009883a 	mov	r4,zero
  811584:	d811883a 	mov	r8,sp
  811588:	003ff206 	br	811554 <__alt_mem_onchip_mem+0xff809554>
  81158c:	d9402117 	ldw	r5,132(sp)
  811590:	d9801a04 	addi	r6,sp,104
  811594:	e009883a 	mov	r4,fp
  811598:	08106700 	call	810670 <__sprint_r.part.0>
  81159c:	103fcd1e 	bne	r2,zero,8114d4 <__alt_mem_onchip_mem+0xff8094d4>
  8115a0:	d9001b17 	ldw	r4,108(sp)
  8115a4:	d8801c17 	ldw	r2,112(sp)
  8115a8:	d811883a 	mov	r8,sp
  8115ac:	21400044 	addi	r5,r4,1
  8115b0:	003fe806 	br	811554 <__alt_mem_onchip_mem+0xff809554>
  8115b4:	d9402117 	ldw	r5,132(sp)
  8115b8:	d9002017 	ldw	r4,128(sp)
  8115bc:	d9801a04 	addi	r6,sp,104
  8115c0:	d9c02b15 	stw	r7,172(sp)
  8115c4:	db402a15 	stw	r13,168(sp)
  8115c8:	08106700 	call	810670 <__sprint_r.part.0>
  8115cc:	d9c02b17 	ldw	r7,172(sp)
  8115d0:	db402a17 	ldw	r13,168(sp)
  8115d4:	103fbf1e 	bne	r2,zero,8114d4 <__alt_mem_onchip_mem+0xff8094d4>
  8115d8:	d9401b17 	ldw	r5,108(sp)
  8115dc:	d8801c17 	ldw	r2,112(sp)
  8115e0:	d811883a 	mov	r8,sp
  8115e4:	29800044 	addi	r6,r5,1
  8115e8:	003dc406 	br	810cfc <__alt_mem_onchip_mem+0xff808cfc>
  8115ec:	1000d21e 	bne	r2,zero,811938 <___vfiprintf_internal_r+0x11b4>
  8115f0:	d8c01d87 	ldb	r3,118(sp)
  8115f4:	18009526 	beq	r3,zero,81184c <___vfiprintf_internal_r+0x10c8>
  8115f8:	00800044 	movi	r2,1
  8115fc:	d8c01d84 	addi	r3,sp,118
  811600:	1009883a 	mov	r4,r2
  811604:	d8c00015 	stw	r3,0(sp)
  811608:	d8800115 	stw	r2,4(sp)
  81160c:	d811883a 	mov	r8,sp
  811610:	200b883a 	mov	r5,r4
  811614:	42000204 	addi	r8,r8,8
  811618:	21000044 	addi	r4,r4,1
  81161c:	003d9706 	br	810c7c <__alt_mem_onchip_mem+0xff808c7c>
  811620:	d9001d04 	addi	r4,sp,116
  811624:	00800084 	movi	r2,2
  811628:	d9000015 	stw	r4,0(sp)
  81162c:	d8800115 	stw	r2,4(sp)
  811630:	1809883a 	mov	r4,r3
  811634:	d811883a 	mov	r8,sp
  811638:	200b883a 	mov	r5,r4
  81163c:	42000204 	addi	r8,r8,8
  811640:	21000044 	addi	r4,r4,1
  811644:	003f4e06 	br	811380 <__alt_mem_onchip_mem+0xff809380>
  811648:	d8001d85 	stb	zero,118(sp)
  81164c:	48005016 	blt	r9,zero,811790 <___vfiprintf_internal_r+0x100c>
  811650:	00ffdfc4 	movi	r3,-129
  811654:	94c4b03a 	or	r2,r18,r19
  811658:	a0e8703a 	and	r20,r20,r3
  81165c:	103d4426 	beq	r2,zero,810b70 <__alt_mem_onchip_mem+0xff808b70>
  811660:	0039883a 	mov	fp,zero
  811664:	d9002617 	ldw	r4,152(sp)
  811668:	dd401a04 	addi	r21,sp,104
  81166c:	908003cc 	andi	r2,r18,15
  811670:	9806973a 	slli	r3,r19,28
  811674:	2085883a 	add	r2,r4,r2
  811678:	9024d13a 	srli	r18,r18,4
  81167c:	10800003 	ldbu	r2,0(r2)
  811680:	9826d13a 	srli	r19,r19,4
  811684:	ad7fffc4 	addi	r21,r21,-1
  811688:	1ca4b03a 	or	r18,r3,r18
  81168c:	a8800005 	stb	r2,0(r21)
  811690:	94c4b03a 	or	r2,r18,r19
  811694:	103ff51e 	bne	r2,zero,81166c <__alt_mem_onchip_mem+0xff80966c>
  811698:	003e5906 	br	811000 <__alt_mem_onchip_mem+0xff809000>
  81169c:	d9402117 	ldw	r5,132(sp)
  8116a0:	d9002017 	ldw	r4,128(sp)
  8116a4:	d9801a04 	addi	r6,sp,104
  8116a8:	08106700 	call	810670 <__sprint_r.part.0>
  8116ac:	103f891e 	bne	r2,zero,8114d4 <__alt_mem_onchip_mem+0xff8094d4>
  8116b0:	d8801c17 	ldw	r2,112(sp)
  8116b4:	d811883a 	mov	r8,sp
  8116b8:	003f9506 	br	811510 <__alt_mem_onchip_mem+0xff809510>
  8116bc:	d9402117 	ldw	r5,132(sp)
  8116c0:	d9002017 	ldw	r4,128(sp)
  8116c4:	d9801a04 	addi	r6,sp,104
  8116c8:	08106700 	call	810670 <__sprint_r.part.0>
  8116cc:	103f811e 	bne	r2,zero,8114d4 <__alt_mem_onchip_mem+0xff8094d4>
  8116d0:	d811883a 	mov	r8,sp
  8116d4:	003ced06 	br	810a8c <__alt_mem_onchip_mem+0xff808a8c>
  8116d8:	d9402117 	ldw	r5,132(sp)
  8116dc:	d9002017 	ldw	r4,128(sp)
  8116e0:	d9801a04 	addi	r6,sp,104
  8116e4:	da402c15 	stw	r9,176(sp)
  8116e8:	db802a15 	stw	r14,168(sp)
  8116ec:	08106700 	call	810670 <__sprint_r.part.0>
  8116f0:	da402c17 	ldw	r9,176(sp)
  8116f4:	db802a17 	ldw	r14,168(sp)
  8116f8:	103f761e 	bne	r2,zero,8114d4 <__alt_mem_onchip_mem+0xff8094d4>
  8116fc:	d9401b17 	ldw	r5,108(sp)
  811700:	d8801c17 	ldw	r2,112(sp)
  811704:	d811883a 	mov	r8,sp
  811708:	29000044 	addi	r4,r5,1
  81170c:	003d5b06 	br	810c7c <__alt_mem_onchip_mem+0xff808c7c>
  811710:	d9402117 	ldw	r5,132(sp)
  811714:	d9002017 	ldw	r4,128(sp)
  811718:	d9801a04 	addi	r6,sp,104
  81171c:	da402c15 	stw	r9,176(sp)
  811720:	08106700 	call	810670 <__sprint_r.part.0>
  811724:	da402c17 	ldw	r9,176(sp)
  811728:	103f6a1e 	bne	r2,zero,8114d4 <__alt_mem_onchip_mem+0xff8094d4>
  81172c:	d9401b17 	ldw	r5,108(sp)
  811730:	d8801c17 	ldw	r2,112(sp)
  811734:	d811883a 	mov	r8,sp
  811738:	29000044 	addi	r4,r5,1
  81173c:	003f1006 	br	811380 <__alt_mem_onchip_mem+0xff809380>
  811740:	1000c31e 	bne	r2,zero,811a50 <___vfiprintf_internal_r+0x12cc>
  811744:	01000044 	movi	r4,1
  811748:	000b883a 	mov	r5,zero
  81174c:	d811883a 	mov	r8,sp
  811750:	003f0d06 	br	811388 <__alt_mem_onchip_mem+0xff809388>
  811754:	d9402117 	ldw	r5,132(sp)
  811758:	d9002017 	ldw	r4,128(sp)
  81175c:	d9801a04 	addi	r6,sp,104
  811760:	08106700 	call	810670 <__sprint_r.part.0>
  811764:	103f5b1e 	bne	r2,zero,8114d4 <__alt_mem_onchip_mem+0xff8094d4>
  811768:	d9001b17 	ldw	r4,108(sp)
  81176c:	d8801c17 	ldw	r2,112(sp)
  811770:	d811883a 	mov	r8,sp
  811774:	21000044 	addi	r4,r4,1
  811778:	003d8006 	br	810d7c <__alt_mem_onchip_mem+0xff808d7c>
  81177c:	010020b4 	movhi	r4,130
  811780:	21229404 	addi	r4,r4,-30128
  811784:	d9002615 	stw	r4,152(sp)
  811788:	d8c02215 	stw	r3,136(sp)
  81178c:	1029883a 	mov	r20,r2
  811790:	94c4b03a 	or	r2,r18,r19
  811794:	103fb21e 	bne	r2,zero,811660 <__alt_mem_onchip_mem+0xff809660>
  811798:	0039883a 	mov	fp,zero
  81179c:	00800084 	movi	r2,2
  8117a0:	003e6b06 	br	811150 <__alt_mem_onchip_mem+0xff809150>
  8117a4:	da802217 	ldw	r10,136(sp)
  8117a8:	d8001d85 	stb	zero,118(sp)
  8117ac:	0027883a 	mov	r19,zero
  8117b0:	50800104 	addi	r2,r10,4
  8117b4:	54800017 	ldw	r18,0(r10)
  8117b8:	483e6016 	blt	r9,zero,81113c <__alt_mem_onchip_mem+0xff80913c>
  8117bc:	00ffdfc4 	movi	r3,-129
  8117c0:	d8802215 	stw	r2,136(sp)
  8117c4:	a0e8703a 	and	r20,r20,r3
  8117c8:	0039883a 	mov	fp,zero
  8117cc:	903ebb26 	beq	r18,zero,8112bc <__alt_mem_onchip_mem+0xff8092bc>
  8117d0:	00800244 	movi	r2,9
  8117d4:	14bdee36 	bltu	r2,r18,810f90 <__alt_mem_onchip_mem+0xff808f90>
  8117d8:	003eba06 	br	8112c4 <__alt_mem_onchip_mem+0xff8092c4>
  8117dc:	00800c04 	movi	r2,48
  8117e0:	d8c01d45 	stb	r3,117(sp)
  8117e4:	d8801d05 	stb	r2,116(sp)
  8117e8:	d8001d85 	stb	zero,118(sp)
  8117ec:	a0c00094 	ori	r3,r20,2
  8117f0:	4800a916 	blt	r9,zero,811a98 <___vfiprintf_internal_r+0x1314>
  8117f4:	00bfdfc4 	movi	r2,-129
  8117f8:	a096703a 	and	r11,r20,r2
  8117fc:	5d000094 	ori	r20,r11,2
  811800:	0039883a 	mov	fp,zero
  811804:	003f9706 	br	811664 <__alt_mem_onchip_mem+0xff809664>
  811808:	8025883a 	mov	r18,r16
  81180c:	003c2e06 	br	8108c8 <__alt_mem_onchip_mem+0xff8088c8>
  811810:	008020b4 	movhi	r2,130
  811814:	10a29404 	addi	r2,r2,-30128
  811818:	0039883a 	mov	fp,zero
  81181c:	d8802615 	stw	r2,152(sp)
  811820:	003f9006 	br	811664 <__alt_mem_onchip_mem+0xff809664>
  811824:	04a5c83a 	sub	r18,zero,r18
  811828:	07000b44 	movi	fp,45
  81182c:	9004c03a 	cmpne	r2,r18,zero
  811830:	04e7c83a 	sub	r19,zero,r19
  811834:	df001d85 	stb	fp,118(sp)
  811838:	98a7c83a 	sub	r19,r19,r2
  81183c:	48009f16 	blt	r9,zero,811abc <___vfiprintf_internal_r+0x1338>
  811840:	00bfdfc4 	movi	r2,-129
  811844:	a0a8703a 	and	r20,r20,r2
  811848:	003dd006 	br	810f8c <__alt_mem_onchip_mem+0xff808f8c>
  81184c:	70004c26 	beq	r14,zero,811980 <___vfiprintf_internal_r+0x11fc>
  811850:	00800084 	movi	r2,2
  811854:	d8c01d04 	addi	r3,sp,116
  811858:	d8c00015 	stw	r3,0(sp)
  81185c:	d8800115 	stw	r2,4(sp)
  811860:	01000044 	movi	r4,1
  811864:	d811883a 	mov	r8,sp
  811868:	003f7306 	br	811638 <__alt_mem_onchip_mem+0xff809638>
  81186c:	a080100c 	andi	r2,r20,64
  811870:	da802217 	ldw	r10,136(sp)
  811874:	103e0626 	beq	r2,zero,811090 <__alt_mem_onchip_mem+0xff809090>
  811878:	5480000f 	ldh	r18,0(r10)
  81187c:	52800104 	addi	r10,r10,4
  811880:	da802215 	stw	r10,136(sp)
  811884:	9027d7fa 	srai	r19,r18,31
  811888:	9805883a 	mov	r2,r19
  81188c:	003db806 	br	810f70 <__alt_mem_onchip_mem+0xff808f70>
  811890:	a080040c 	andi	r2,r20,16
  811894:	1000091e 	bne	r2,zero,8118bc <___vfiprintf_internal_r+0x1138>
  811898:	a2c0100c 	andi	r11,r20,64
  81189c:	58000726 	beq	r11,zero,8118bc <___vfiprintf_internal_r+0x1138>
  8118a0:	da802217 	ldw	r10,136(sp)
  8118a4:	50800017 	ldw	r2,0(r10)
  8118a8:	52800104 	addi	r10,r10,4
  8118ac:	da802215 	stw	r10,136(sp)
  8118b0:	da802317 	ldw	r10,140(sp)
  8118b4:	1280000d 	sth	r10,0(r2)
  8118b8:	003be706 	br	810858 <__alt_mem_onchip_mem+0xff808858>
  8118bc:	da802217 	ldw	r10,136(sp)
  8118c0:	50800017 	ldw	r2,0(r10)
  8118c4:	52800104 	addi	r10,r10,4
  8118c8:	da802215 	stw	r10,136(sp)
  8118cc:	da802317 	ldw	r10,140(sp)
  8118d0:	12800015 	stw	r10,0(r2)
  8118d4:	003be006 	br	810858 <__alt_mem_onchip_mem+0xff808858>
  8118d8:	a080100c 	andi	r2,r20,64
  8118dc:	da802217 	ldw	r10,136(sp)
  8118e0:	10003026 	beq	r2,zero,8119a4 <___vfiprintf_internal_r+0x1220>
  8118e4:	5480000b 	ldhu	r18,0(r10)
  8118e8:	52800104 	addi	r10,r10,4
  8118ec:	0027883a 	mov	r19,zero
  8118f0:	da802215 	stw	r10,136(sp)
  8118f4:	003d8006 	br	810ef8 <__alt_mem_onchip_mem+0xff808ef8>
  8118f8:	80c00007 	ldb	r3,0(r16)
  8118fc:	003c0006 	br	810900 <__alt_mem_onchip_mem+0xff808900>
  811900:	a080100c 	andi	r2,r20,64
  811904:	d8001d85 	stb	zero,118(sp)
  811908:	da802217 	ldw	r10,136(sp)
  81190c:	1000201e 	bne	r2,zero,811990 <___vfiprintf_internal_r+0x120c>
  811910:	50800104 	addi	r2,r10,4
  811914:	54800017 	ldw	r18,0(r10)
  811918:	0027883a 	mov	r19,zero
  81191c:	483def0e 	bge	r9,zero,8110dc <__alt_mem_onchip_mem+0xff8090dc>
  811920:	94c6b03a 	or	r3,r18,r19
  811924:	d8802215 	stw	r2,136(sp)
  811928:	183d4e1e 	bne	r3,zero,810e64 <__alt_mem_onchip_mem+0xff808e64>
  81192c:	0039883a 	mov	fp,zero
  811930:	0005883a 	mov	r2,zero
  811934:	003e0606 	br	811150 <__alt_mem_onchip_mem+0xff809150>
  811938:	d9402117 	ldw	r5,132(sp)
  81193c:	d9002017 	ldw	r4,128(sp)
  811940:	d9801a04 	addi	r6,sp,104
  811944:	da402c15 	stw	r9,176(sp)
  811948:	db802a15 	stw	r14,168(sp)
  81194c:	08106700 	call	810670 <__sprint_r.part.0>
  811950:	da402c17 	ldw	r9,176(sp)
  811954:	db802a17 	ldw	r14,168(sp)
  811958:	103ede1e 	bne	r2,zero,8114d4 <__alt_mem_onchip_mem+0xff8094d4>
  81195c:	d9401b17 	ldw	r5,108(sp)
  811960:	d8801c17 	ldw	r2,112(sp)
  811964:	d811883a 	mov	r8,sp
  811968:	29000044 	addi	r4,r5,1
  81196c:	003e7406 	br	811340 <__alt_mem_onchip_mem+0xff809340>
  811970:	00bfffc4 	movi	r2,-1
  811974:	003c5806 	br	810ad8 <__alt_mem_onchip_mem+0xff808ad8>
  811978:	d811883a 	mov	r8,sp
  81197c:	003ee806 	br	811520 <__alt_mem_onchip_mem+0xff809520>
  811980:	000b883a 	mov	r5,zero
  811984:	01000044 	movi	r4,1
  811988:	d811883a 	mov	r8,sp
  81198c:	003e7c06 	br	811380 <__alt_mem_onchip_mem+0xff809380>
  811990:	50800104 	addi	r2,r10,4
  811994:	5480000b 	ldhu	r18,0(r10)
  811998:	0027883a 	mov	r19,zero
  81199c:	483dcf0e 	bge	r9,zero,8110dc <__alt_mem_onchip_mem+0xff8090dc>
  8119a0:	003fdf06 	br	811920 <__alt_mem_onchip_mem+0xff809920>
  8119a4:	54800017 	ldw	r18,0(r10)
  8119a8:	52800104 	addi	r10,r10,4
  8119ac:	0027883a 	mov	r19,zero
  8119b0:	da802215 	stw	r10,136(sp)
  8119b4:	003d5006 	br	810ef8 <__alt_mem_onchip_mem+0xff808ef8>
  8119b8:	50800104 	addi	r2,r10,4
  8119bc:	5480000b 	ldhu	r18,0(r10)
  8119c0:	0027883a 	mov	r19,zero
  8119c4:	483f7d0e 	bge	r9,zero,8117bc <__alt_mem_onchip_mem+0xff8097bc>
  8119c8:	003ddc06 	br	81113c <__alt_mem_onchip_mem+0xff80913c>
  8119cc:	d8c02215 	stw	r3,136(sp)
  8119d0:	0039883a 	mov	fp,zero
  8119d4:	003ddb06 	br	811144 <__alt_mem_onchip_mem+0xff809144>
  8119d8:	028020b4 	movhi	r10,130
  8119dc:	52a2f504 	addi	r10,r10,-29740
  8119e0:	da802415 	stw	r10,144(sp)
  8119e4:	003e8306 	br	8113f4 <__alt_mem_onchip_mem+0xff8093f4>
  8119e8:	d8801c17 	ldw	r2,112(sp)
  8119ec:	dd002117 	ldw	r20,132(sp)
  8119f0:	103eb926 	beq	r2,zero,8114d8 <__alt_mem_onchip_mem+0xff8094d8>
  8119f4:	d9002017 	ldw	r4,128(sp)
  8119f8:	d9801a04 	addi	r6,sp,104
  8119fc:	a00b883a 	mov	r5,r20
  811a00:	08106700 	call	810670 <__sprint_r.part.0>
  811a04:	003eb406 	br	8114d8 <__alt_mem_onchip_mem+0xff8094d8>
  811a08:	80c00043 	ldbu	r3,1(r16)
  811a0c:	a5000814 	ori	r20,r20,32
  811a10:	84000044 	addi	r16,r16,1
  811a14:	18c03fcc 	andi	r3,r3,255
  811a18:	18c0201c 	xori	r3,r3,128
  811a1c:	18ffe004 	addi	r3,r3,-128
  811a20:	003bb706 	br	810900 <__alt_mem_onchip_mem+0xff808900>
  811a24:	a809883a 	mov	r4,r21
  811a28:	d8c02a15 	stw	r3,168(sp)
  811a2c:	da002b15 	stw	r8,172(sp)
  811a30:	08105d80 	call	8105d8 <strlen>
  811a34:	d8c02a17 	ldw	r3,168(sp)
  811a38:	1027883a 	mov	r19,r2
  811a3c:	df001d83 	ldbu	fp,118(sp)
  811a40:	d8c02215 	stw	r3,136(sp)
  811a44:	0013883a 	mov	r9,zero
  811a48:	da002b17 	ldw	r8,172(sp)
  811a4c:	003c4d06 	br	810b84 <__alt_mem_onchip_mem+0xff808b84>
  811a50:	d9402117 	ldw	r5,132(sp)
  811a54:	d9002017 	ldw	r4,128(sp)
  811a58:	d9801a04 	addi	r6,sp,104
  811a5c:	da402c15 	stw	r9,176(sp)
  811a60:	08106700 	call	810670 <__sprint_r.part.0>
  811a64:	da402c17 	ldw	r9,176(sp)
  811a68:	103e9a1e 	bne	r2,zero,8114d4 <__alt_mem_onchip_mem+0xff8094d4>
  811a6c:	d9401b17 	ldw	r5,108(sp)
  811a70:	d8801c17 	ldw	r2,112(sp)
  811a74:	d811883a 	mov	r8,sp
  811a78:	29000044 	addi	r4,r5,1
  811a7c:	003e4206 	br	811388 <__alt_mem_onchip_mem+0xff809388>
  811a80:	d9401b17 	ldw	r5,108(sp)
  811a84:	010020b4 	movhi	r4,130
  811a88:	2122f904 	addi	r4,r4,-29724
  811a8c:	d9002415 	stw	r4,144(sp)
  811a90:	29400044 	addi	r5,r5,1
  811a94:	003c6d06 	br	810c4c <__alt_mem_onchip_mem+0xff808c4c>
  811a98:	0039883a 	mov	fp,zero
  811a9c:	00800084 	movi	r2,2
  811aa0:	10803fcc 	andi	r2,r2,255
  811aa4:	01000044 	movi	r4,1
  811aa8:	11001e26 	beq	r2,r4,811b24 <___vfiprintf_internal_r+0x13a0>
  811aac:	01000084 	movi	r4,2
  811ab0:	11001e1e 	bne	r2,r4,811b2c <___vfiprintf_internal_r+0x13a8>
  811ab4:	1829883a 	mov	r20,r3
  811ab8:	003eea06 	br	811664 <__alt_mem_onchip_mem+0xff809664>
  811abc:	a007883a 	mov	r3,r20
  811ac0:	00800044 	movi	r2,1
  811ac4:	003ff606 	br	811aa0 <__alt_mem_onchip_mem+0xff809aa0>
  811ac8:	00800184 	movi	r2,6
  811acc:	1240012e 	bgeu	r2,r9,811ad4 <___vfiprintf_internal_r+0x1350>
  811ad0:	1013883a 	mov	r9,r2
  811ad4:	4827883a 	mov	r19,r9
  811ad8:	4825883a 	mov	r18,r9
  811adc:	48001516 	blt	r9,zero,811b34 <___vfiprintf_internal_r+0x13b0>
  811ae0:	054020b4 	movhi	r21,130
  811ae4:	d8c02215 	stw	r3,136(sp)
  811ae8:	ad629904 	addi	r21,r21,-30108
  811aec:	003d1406 	br	810f40 <__alt_mem_onchip_mem+0xff808f40>
  811af0:	028020b4 	movhi	r10,130
  811af4:	52a2f504 	addi	r10,r10,-29740
  811af8:	da802415 	stw	r10,144(sp)
  811afc:	200d883a 	mov	r6,r4
  811b00:	003c9106 	br	810d48 <__alt_mem_onchip_mem+0xff808d48>
  811b04:	5021883a 	mov	r16,r10
  811b08:	0013883a 	mov	r9,zero
  811b0c:	003b7d06 	br	810904 <__alt_mem_onchip_mem+0xff808904>
  811b10:	4827883a 	mov	r19,r9
  811b14:	df001d83 	ldbu	fp,118(sp)
  811b18:	d8c02215 	stw	r3,136(sp)
  811b1c:	0013883a 	mov	r9,zero
  811b20:	003c1806 	br	810b84 <__alt_mem_onchip_mem+0xff808b84>
  811b24:	1829883a 	mov	r20,r3
  811b28:	003d1806 	br	810f8c <__alt_mem_onchip_mem+0xff808f8c>
  811b2c:	1829883a 	mov	r20,r3
  811b30:	003ccd06 	br	810e68 <__alt_mem_onchip_mem+0xff808e68>
  811b34:	0025883a 	mov	r18,zero
  811b38:	003fe906 	br	811ae0 <__alt_mem_onchip_mem+0xff809ae0>
  811b3c:	d8802217 	ldw	r2,136(sp)
  811b40:	80c00043 	ldbu	r3,1(r16)
  811b44:	5021883a 	mov	r16,r10
  811b48:	12400017 	ldw	r9,0(r2)
  811b4c:	10800104 	addi	r2,r2,4
  811b50:	d8802215 	stw	r2,136(sp)
  811b54:	483faf0e 	bge	r9,zero,811a14 <__alt_mem_onchip_mem+0xff809a14>
  811b58:	18c03fcc 	andi	r3,r3,255
  811b5c:	18c0201c 	xori	r3,r3,128
  811b60:	027fffc4 	movi	r9,-1
  811b64:	18ffe004 	addi	r3,r3,-128
  811b68:	003b6506 	br	810900 <__alt_mem_onchip_mem+0xff808900>
  811b6c:	d9c01d85 	stb	r7,118(sp)
  811b70:	003ca006 	br	810df4 <__alt_mem_onchip_mem+0xff808df4>
  811b74:	d9c01d85 	stb	r7,118(sp)
  811b78:	003cad06 	br	810e30 <__alt_mem_onchip_mem+0xff808e30>
  811b7c:	d9c01d85 	stb	r7,118(sp)
  811b80:	003d7d06 	br	811178 <__alt_mem_onchip_mem+0xff809178>
  811b84:	d9c01d85 	stb	r7,118(sp)
  811b88:	003d5f06 	br	811108 <__alt_mem_onchip_mem+0xff809108>
  811b8c:	a080004c 	andi	r2,r20,1
  811b90:	0039883a 	mov	fp,zero
  811b94:	10000526 	beq	r2,zero,811bac <___vfiprintf_internal_r+0x1428>
  811b98:	00800c04 	movi	r2,48
  811b9c:	d88019c5 	stb	r2,103(sp)
  811ba0:	dcc02717 	ldw	r19,156(sp)
  811ba4:	dd4019c4 	addi	r21,sp,103
  811ba8:	003bf606 	br	810b84 <__alt_mem_onchip_mem+0xff808b84>
  811bac:	0027883a 	mov	r19,zero
  811bb0:	dd401a04 	addi	r21,sp,104
  811bb4:	003bf306 	br	810b84 <__alt_mem_onchip_mem+0xff808b84>
  811bb8:	d9c01d85 	stb	r7,118(sp)
  811bbc:	003dc806 	br	8112e0 <__alt_mem_onchip_mem+0xff8092e0>
  811bc0:	d9c01d85 	stb	r7,118(sp)
  811bc4:	003d3a06 	br	8110b0 <__alt_mem_onchip_mem+0xff8090b0>
  811bc8:	d9c01d85 	stb	r7,118(sp)
  811bcc:	003d2a06 	br	811078 <__alt_mem_onchip_mem+0xff809078>
  811bd0:	d9c01d85 	stb	r7,118(sp)
  811bd4:	003cde06 	br	810f50 <__alt_mem_onchip_mem+0xff808f50>
  811bd8:	d9c01d85 	stb	r7,118(sp)
  811bdc:	003cbc06 	br	810ed0 <__alt_mem_onchip_mem+0xff808ed0>

00811be0 <__vfiprintf_internal>:
  811be0:	008020b4 	movhi	r2,130
  811be4:	10aad304 	addi	r2,r2,-21684
  811be8:	300f883a 	mov	r7,r6
  811bec:	280d883a 	mov	r6,r5
  811bf0:	200b883a 	mov	r5,r4
  811bf4:	11000017 	ldw	r4,0(r2)
  811bf8:	08107841 	jmpi	810784 <___vfiprintf_internal_r>

00811bfc <__sbprintf>:
  811bfc:	2880030b 	ldhu	r2,12(r5)
  811c00:	2ac01917 	ldw	r11,100(r5)
  811c04:	2a80038b 	ldhu	r10,14(r5)
  811c08:	2a400717 	ldw	r9,28(r5)
  811c0c:	2a000917 	ldw	r8,36(r5)
  811c10:	defee204 	addi	sp,sp,-1144
  811c14:	00c10004 	movi	r3,1024
  811c18:	dc011a15 	stw	r16,1128(sp)
  811c1c:	10bfff4c 	andi	r2,r2,65533
  811c20:	2821883a 	mov	r16,r5
  811c24:	d8cb883a 	add	r5,sp,r3
  811c28:	dc811c15 	stw	r18,1136(sp)
  811c2c:	dc411b15 	stw	r17,1132(sp)
  811c30:	dfc11d15 	stw	ra,1140(sp)
  811c34:	2025883a 	mov	r18,r4
  811c38:	d881030d 	sth	r2,1036(sp)
  811c3c:	dac11915 	stw	r11,1124(sp)
  811c40:	da81038d 	sth	r10,1038(sp)
  811c44:	da410715 	stw	r9,1052(sp)
  811c48:	da010915 	stw	r8,1060(sp)
  811c4c:	dec10015 	stw	sp,1024(sp)
  811c50:	dec10415 	stw	sp,1040(sp)
  811c54:	d8c10215 	stw	r3,1032(sp)
  811c58:	d8c10515 	stw	r3,1044(sp)
  811c5c:	d8010615 	stw	zero,1048(sp)
  811c60:	08107840 	call	810784 <___vfiprintf_internal_r>
  811c64:	1023883a 	mov	r17,r2
  811c68:	10000416 	blt	r2,zero,811c7c <__sbprintf+0x80>
  811c6c:	d9410004 	addi	r5,sp,1024
  811c70:	9009883a 	mov	r4,r18
  811c74:	080db1c0 	call	80db1c <_fflush_r>
  811c78:	10000d1e 	bne	r2,zero,811cb0 <__sbprintf+0xb4>
  811c7c:	d881030b 	ldhu	r2,1036(sp)
  811c80:	1080100c 	andi	r2,r2,64
  811c84:	10000326 	beq	r2,zero,811c94 <__sbprintf+0x98>
  811c88:	8080030b 	ldhu	r2,12(r16)
  811c8c:	10801014 	ori	r2,r2,64
  811c90:	8080030d 	sth	r2,12(r16)
  811c94:	8805883a 	mov	r2,r17
  811c98:	dfc11d17 	ldw	ra,1140(sp)
  811c9c:	dc811c17 	ldw	r18,1136(sp)
  811ca0:	dc411b17 	ldw	r17,1132(sp)
  811ca4:	dc011a17 	ldw	r16,1128(sp)
  811ca8:	dec11e04 	addi	sp,sp,1144
  811cac:	f800283a 	ret
  811cb0:	047fffc4 	movi	r17,-1
  811cb4:	003ff106 	br	811c7c <__alt_mem_onchip_mem+0xff809c7c>

00811cb8 <_write_r>:
  811cb8:	defffd04 	addi	sp,sp,-12
  811cbc:	2805883a 	mov	r2,r5
  811cc0:	dc000015 	stw	r16,0(sp)
  811cc4:	040020b4 	movhi	r16,130
  811cc8:	dc400115 	stw	r17,4(sp)
  811ccc:	300b883a 	mov	r5,r6
  811cd0:	84322c04 	addi	r16,r16,-14160
  811cd4:	2023883a 	mov	r17,r4
  811cd8:	380d883a 	mov	r6,r7
  811cdc:	1009883a 	mov	r4,r2
  811ce0:	dfc00215 	stw	ra,8(sp)
  811ce4:	80000015 	stw	zero,0(r16)
  811ce8:	08155780 	call	815578 <write>
  811cec:	00ffffc4 	movi	r3,-1
  811cf0:	10c00526 	beq	r2,r3,811d08 <_write_r+0x50>
  811cf4:	dfc00217 	ldw	ra,8(sp)
  811cf8:	dc400117 	ldw	r17,4(sp)
  811cfc:	dc000017 	ldw	r16,0(sp)
  811d00:	dec00304 	addi	sp,sp,12
  811d04:	f800283a 	ret
  811d08:	80c00017 	ldw	r3,0(r16)
  811d0c:	183ff926 	beq	r3,zero,811cf4 <__alt_mem_onchip_mem+0xff809cf4>
  811d10:	88c00015 	stw	r3,0(r17)
  811d14:	003ff706 	br	811cf4 <__alt_mem_onchip_mem+0xff809cf4>

00811d18 <_close_r>:
  811d18:	defffd04 	addi	sp,sp,-12
  811d1c:	dc000015 	stw	r16,0(sp)
  811d20:	040020b4 	movhi	r16,130
  811d24:	dc400115 	stw	r17,4(sp)
  811d28:	84322c04 	addi	r16,r16,-14160
  811d2c:	2023883a 	mov	r17,r4
  811d30:	2809883a 	mov	r4,r5
  811d34:	dfc00215 	stw	ra,8(sp)
  811d38:	80000015 	stw	zero,0(r16)
  811d3c:	08149240 	call	814924 <close>
  811d40:	00ffffc4 	movi	r3,-1
  811d44:	10c00526 	beq	r2,r3,811d5c <_close_r+0x44>
  811d48:	dfc00217 	ldw	ra,8(sp)
  811d4c:	dc400117 	ldw	r17,4(sp)
  811d50:	dc000017 	ldw	r16,0(sp)
  811d54:	dec00304 	addi	sp,sp,12
  811d58:	f800283a 	ret
  811d5c:	80c00017 	ldw	r3,0(r16)
  811d60:	183ff926 	beq	r3,zero,811d48 <__alt_mem_onchip_mem+0xff809d48>
  811d64:	88c00015 	stw	r3,0(r17)
  811d68:	003ff706 	br	811d48 <__alt_mem_onchip_mem+0xff809d48>

00811d6c <_calloc_r>:
  811d6c:	298b383a 	mul	r5,r5,r6
  811d70:	defffe04 	addi	sp,sp,-8
  811d74:	dfc00115 	stw	ra,4(sp)
  811d78:	dc000015 	stw	r16,0(sp)
  811d7c:	080e79c0 	call	80e79c <_malloc_r>
  811d80:	10002926 	beq	r2,zero,811e28 <_calloc_r+0xbc>
  811d84:	11bfff17 	ldw	r6,-4(r2)
  811d88:	1021883a 	mov	r16,r2
  811d8c:	00bfff04 	movi	r2,-4
  811d90:	308c703a 	and	r6,r6,r2
  811d94:	00c00904 	movi	r3,36
  811d98:	308d883a 	add	r6,r6,r2
  811d9c:	19801636 	bltu	r3,r6,811df8 <_calloc_r+0x8c>
  811da0:	008004c4 	movi	r2,19
  811da4:	11800b2e 	bgeu	r2,r6,811dd4 <_calloc_r+0x68>
  811da8:	80000015 	stw	zero,0(r16)
  811dac:	80000115 	stw	zero,4(r16)
  811db0:	008006c4 	movi	r2,27
  811db4:	11801a2e 	bgeu	r2,r6,811e20 <_calloc_r+0xb4>
  811db8:	80000215 	stw	zero,8(r16)
  811dbc:	80000315 	stw	zero,12(r16)
  811dc0:	30c0151e 	bne	r6,r3,811e18 <_calloc_r+0xac>
  811dc4:	80000415 	stw	zero,16(r16)
  811dc8:	80800604 	addi	r2,r16,24
  811dcc:	80000515 	stw	zero,20(r16)
  811dd0:	00000106 	br	811dd8 <_calloc_r+0x6c>
  811dd4:	8005883a 	mov	r2,r16
  811dd8:	10000015 	stw	zero,0(r2)
  811ddc:	10000115 	stw	zero,4(r2)
  811de0:	10000215 	stw	zero,8(r2)
  811de4:	8005883a 	mov	r2,r16
  811de8:	dfc00117 	ldw	ra,4(sp)
  811dec:	dc000017 	ldw	r16,0(sp)
  811df0:	dec00204 	addi	sp,sp,8
  811df4:	f800283a 	ret
  811df8:	000b883a 	mov	r5,zero
  811dfc:	8009883a 	mov	r4,r16
  811e00:	080f1d40 	call	80f1d4 <memset>
  811e04:	8005883a 	mov	r2,r16
  811e08:	dfc00117 	ldw	ra,4(sp)
  811e0c:	dc000017 	ldw	r16,0(sp)
  811e10:	dec00204 	addi	sp,sp,8
  811e14:	f800283a 	ret
  811e18:	80800404 	addi	r2,r16,16
  811e1c:	003fee06 	br	811dd8 <__alt_mem_onchip_mem+0xff809dd8>
  811e20:	80800204 	addi	r2,r16,8
  811e24:	003fec06 	br	811dd8 <__alt_mem_onchip_mem+0xff809dd8>
  811e28:	0005883a 	mov	r2,zero
  811e2c:	003fee06 	br	811de8 <__alt_mem_onchip_mem+0xff809de8>

00811e30 <_fclose_r>:
  811e30:	28003926 	beq	r5,zero,811f18 <_fclose_r+0xe8>
  811e34:	defffc04 	addi	sp,sp,-16
  811e38:	dc400115 	stw	r17,4(sp)
  811e3c:	dc000015 	stw	r16,0(sp)
  811e40:	dfc00315 	stw	ra,12(sp)
  811e44:	dc800215 	stw	r18,8(sp)
  811e48:	2023883a 	mov	r17,r4
  811e4c:	2821883a 	mov	r16,r5
  811e50:	20000226 	beq	r4,zero,811e5c <_fclose_r+0x2c>
  811e54:	20800e17 	ldw	r2,56(r4)
  811e58:	10002726 	beq	r2,zero,811ef8 <_fclose_r+0xc8>
  811e5c:	8080030f 	ldh	r2,12(r16)
  811e60:	1000071e 	bne	r2,zero,811e80 <_fclose_r+0x50>
  811e64:	0005883a 	mov	r2,zero
  811e68:	dfc00317 	ldw	ra,12(sp)
  811e6c:	dc800217 	ldw	r18,8(sp)
  811e70:	dc400117 	ldw	r17,4(sp)
  811e74:	dc000017 	ldw	r16,0(sp)
  811e78:	dec00404 	addi	sp,sp,16
  811e7c:	f800283a 	ret
  811e80:	800b883a 	mov	r5,r16
  811e84:	8809883a 	mov	r4,r17
  811e88:	080d9000 	call	80d900 <__sflush_r>
  811e8c:	1025883a 	mov	r18,r2
  811e90:	80800b17 	ldw	r2,44(r16)
  811e94:	10000426 	beq	r2,zero,811ea8 <_fclose_r+0x78>
  811e98:	81400717 	ldw	r5,28(r16)
  811e9c:	8809883a 	mov	r4,r17
  811ea0:	103ee83a 	callr	r2
  811ea4:	10001616 	blt	r2,zero,811f00 <_fclose_r+0xd0>
  811ea8:	8080030b 	ldhu	r2,12(r16)
  811eac:	1080200c 	andi	r2,r2,128
  811eb0:	1000151e 	bne	r2,zero,811f08 <_fclose_r+0xd8>
  811eb4:	81400c17 	ldw	r5,48(r16)
  811eb8:	28000526 	beq	r5,zero,811ed0 <_fclose_r+0xa0>
  811ebc:	80801004 	addi	r2,r16,64
  811ec0:	28800226 	beq	r5,r2,811ecc <_fclose_r+0x9c>
  811ec4:	8809883a 	mov	r4,r17
  811ec8:	080e06c0 	call	80e06c <_free_r>
  811ecc:	80000c15 	stw	zero,48(r16)
  811ed0:	81401117 	ldw	r5,68(r16)
  811ed4:	28000326 	beq	r5,zero,811ee4 <_fclose_r+0xb4>
  811ed8:	8809883a 	mov	r4,r17
  811edc:	080e06c0 	call	80e06c <_free_r>
  811ee0:	80001115 	stw	zero,68(r16)
  811ee4:	080df080 	call	80df08 <__sfp_lock_acquire>
  811ee8:	8000030d 	sth	zero,12(r16)
  811eec:	080df0c0 	call	80df0c <__sfp_lock_release>
  811ef0:	9005883a 	mov	r2,r18
  811ef4:	003fdc06 	br	811e68 <__alt_mem_onchip_mem+0xff809e68>
  811ef8:	080def80 	call	80def8 <__sinit>
  811efc:	003fd706 	br	811e5c <__alt_mem_onchip_mem+0xff809e5c>
  811f00:	04bfffc4 	movi	r18,-1
  811f04:	003fe806 	br	811ea8 <__alt_mem_onchip_mem+0xff809ea8>
  811f08:	81400417 	ldw	r5,16(r16)
  811f0c:	8809883a 	mov	r4,r17
  811f10:	080e06c0 	call	80e06c <_free_r>
  811f14:	003fe706 	br	811eb4 <__alt_mem_onchip_mem+0xff809eb4>
  811f18:	0005883a 	mov	r2,zero
  811f1c:	f800283a 	ret

00811f20 <fclose>:
  811f20:	008020b4 	movhi	r2,130
  811f24:	10aad304 	addi	r2,r2,-21684
  811f28:	200b883a 	mov	r5,r4
  811f2c:	11000017 	ldw	r4,0(r2)
  811f30:	0811e301 	jmpi	811e30 <_fclose_r>

00811f34 <__fputwc>:
  811f34:	defff804 	addi	sp,sp,-32
  811f38:	dcc00415 	stw	r19,16(sp)
  811f3c:	dc800315 	stw	r18,12(sp)
  811f40:	dc000115 	stw	r16,4(sp)
  811f44:	dfc00715 	stw	ra,28(sp)
  811f48:	dd400615 	stw	r21,24(sp)
  811f4c:	dd000515 	stw	r20,20(sp)
  811f50:	dc400215 	stw	r17,8(sp)
  811f54:	2027883a 	mov	r19,r4
  811f58:	2825883a 	mov	r18,r5
  811f5c:	3021883a 	mov	r16,r6
  811f60:	080e58c0 	call	80e58c <__locale_mb_cur_max>
  811f64:	00c00044 	movi	r3,1
  811f68:	10c03e26 	beq	r2,r3,812064 <__fputwc+0x130>
  811f6c:	81c01704 	addi	r7,r16,92
  811f70:	900d883a 	mov	r6,r18
  811f74:	d80b883a 	mov	r5,sp
  811f78:	9809883a 	mov	r4,r19
  811f7c:	0812f800 	call	812f80 <_wcrtomb_r>
  811f80:	1029883a 	mov	r20,r2
  811f84:	00bfffc4 	movi	r2,-1
  811f88:	a0802026 	beq	r20,r2,81200c <__fputwc+0xd8>
  811f8c:	d9400003 	ldbu	r5,0(sp)
  811f90:	a0001c26 	beq	r20,zero,812004 <__fputwc+0xd0>
  811f94:	0023883a 	mov	r17,zero
  811f98:	05400284 	movi	r21,10
  811f9c:	00000906 	br	811fc4 <__fputwc+0x90>
  811fa0:	80800017 	ldw	r2,0(r16)
  811fa4:	11400005 	stb	r5,0(r2)
  811fa8:	80c00017 	ldw	r3,0(r16)
  811fac:	18c00044 	addi	r3,r3,1
  811fb0:	80c00015 	stw	r3,0(r16)
  811fb4:	8c400044 	addi	r17,r17,1
  811fb8:	dc45883a 	add	r2,sp,r17
  811fbc:	8d00112e 	bgeu	r17,r20,812004 <__fputwc+0xd0>
  811fc0:	11400003 	ldbu	r5,0(r2)
  811fc4:	80c00217 	ldw	r3,8(r16)
  811fc8:	18ffffc4 	addi	r3,r3,-1
  811fcc:	80c00215 	stw	r3,8(r16)
  811fd0:	183ff30e 	bge	r3,zero,811fa0 <__alt_mem_onchip_mem+0xff809fa0>
  811fd4:	80800617 	ldw	r2,24(r16)
  811fd8:	18801916 	blt	r3,r2,812040 <__fputwc+0x10c>
  811fdc:	80800017 	ldw	r2,0(r16)
  811fe0:	11400005 	stb	r5,0(r2)
  811fe4:	80800017 	ldw	r2,0(r16)
  811fe8:	10c00003 	ldbu	r3,0(r2)
  811fec:	10800044 	addi	r2,r2,1
  811ff0:	1d402326 	beq	r3,r21,812080 <__fputwc+0x14c>
  811ff4:	80800015 	stw	r2,0(r16)
  811ff8:	8c400044 	addi	r17,r17,1
  811ffc:	dc45883a 	add	r2,sp,r17
  812000:	8d3fef36 	bltu	r17,r20,811fc0 <__alt_mem_onchip_mem+0xff809fc0>
  812004:	9005883a 	mov	r2,r18
  812008:	00000406 	br	81201c <__fputwc+0xe8>
  81200c:	80c0030b 	ldhu	r3,12(r16)
  812010:	a005883a 	mov	r2,r20
  812014:	18c01014 	ori	r3,r3,64
  812018:	80c0030d 	sth	r3,12(r16)
  81201c:	dfc00717 	ldw	ra,28(sp)
  812020:	dd400617 	ldw	r21,24(sp)
  812024:	dd000517 	ldw	r20,20(sp)
  812028:	dcc00417 	ldw	r19,16(sp)
  81202c:	dc800317 	ldw	r18,12(sp)
  812030:	dc400217 	ldw	r17,8(sp)
  812034:	dc000117 	ldw	r16,4(sp)
  812038:	dec00804 	addi	sp,sp,32
  81203c:	f800283a 	ret
  812040:	800d883a 	mov	r6,r16
  812044:	29403fcc 	andi	r5,r5,255
  812048:	9809883a 	mov	r4,r19
  81204c:	0812e280 	call	812e28 <__swbuf_r>
  812050:	10bfffe0 	cmpeqi	r2,r2,-1
  812054:	10803fcc 	andi	r2,r2,255
  812058:	103fd626 	beq	r2,zero,811fb4 <__alt_mem_onchip_mem+0xff809fb4>
  81205c:	00bfffc4 	movi	r2,-1
  812060:	003fee06 	br	81201c <__alt_mem_onchip_mem+0xff80a01c>
  812064:	90ffffc4 	addi	r3,r18,-1
  812068:	01003f84 	movi	r4,254
  81206c:	20ffbf36 	bltu	r4,r3,811f6c <__alt_mem_onchip_mem+0xff809f6c>
  812070:	900b883a 	mov	r5,r18
  812074:	dc800005 	stb	r18,0(sp)
  812078:	1029883a 	mov	r20,r2
  81207c:	003fc506 	br	811f94 <__alt_mem_onchip_mem+0xff809f94>
  812080:	800d883a 	mov	r6,r16
  812084:	a80b883a 	mov	r5,r21
  812088:	9809883a 	mov	r4,r19
  81208c:	0812e280 	call	812e28 <__swbuf_r>
  812090:	10bfffe0 	cmpeqi	r2,r2,-1
  812094:	003fef06 	br	812054 <__alt_mem_onchip_mem+0xff80a054>

00812098 <_fputwc_r>:
  812098:	3080030b 	ldhu	r2,12(r6)
  81209c:	10c8000c 	andi	r3,r2,8192
  8120a0:	1800051e 	bne	r3,zero,8120b8 <_fputwc_r+0x20>
  8120a4:	30c01917 	ldw	r3,100(r6)
  8120a8:	10880014 	ori	r2,r2,8192
  8120ac:	3080030d 	sth	r2,12(r6)
  8120b0:	18880014 	ori	r2,r3,8192
  8120b4:	30801915 	stw	r2,100(r6)
  8120b8:	0811f341 	jmpi	811f34 <__fputwc>

008120bc <fputwc>:
  8120bc:	008020b4 	movhi	r2,130
  8120c0:	defffc04 	addi	sp,sp,-16
  8120c4:	10aad304 	addi	r2,r2,-21684
  8120c8:	dc000115 	stw	r16,4(sp)
  8120cc:	14000017 	ldw	r16,0(r2)
  8120d0:	dc400215 	stw	r17,8(sp)
  8120d4:	dfc00315 	stw	ra,12(sp)
  8120d8:	2023883a 	mov	r17,r4
  8120dc:	80000226 	beq	r16,zero,8120e8 <fputwc+0x2c>
  8120e0:	80800e17 	ldw	r2,56(r16)
  8120e4:	10001026 	beq	r2,zero,812128 <fputwc+0x6c>
  8120e8:	2880030b 	ldhu	r2,12(r5)
  8120ec:	10c8000c 	andi	r3,r2,8192
  8120f0:	1800051e 	bne	r3,zero,812108 <fputwc+0x4c>
  8120f4:	28c01917 	ldw	r3,100(r5)
  8120f8:	10880014 	ori	r2,r2,8192
  8120fc:	2880030d 	sth	r2,12(r5)
  812100:	18880014 	ori	r2,r3,8192
  812104:	28801915 	stw	r2,100(r5)
  812108:	280d883a 	mov	r6,r5
  81210c:	8009883a 	mov	r4,r16
  812110:	880b883a 	mov	r5,r17
  812114:	dfc00317 	ldw	ra,12(sp)
  812118:	dc400217 	ldw	r17,8(sp)
  81211c:	dc000117 	ldw	r16,4(sp)
  812120:	dec00404 	addi	sp,sp,16
  812124:	0811f341 	jmpi	811f34 <__fputwc>
  812128:	8009883a 	mov	r4,r16
  81212c:	d9400015 	stw	r5,0(sp)
  812130:	080def80 	call	80def8 <__sinit>
  812134:	d9400017 	ldw	r5,0(sp)
  812138:	003feb06 	br	8120e8 <__alt_mem_onchip_mem+0xff80a0e8>

0081213c <_fstat_r>:
  81213c:	defffd04 	addi	sp,sp,-12
  812140:	2805883a 	mov	r2,r5
  812144:	dc000015 	stw	r16,0(sp)
  812148:	040020b4 	movhi	r16,130
  81214c:	dc400115 	stw	r17,4(sp)
  812150:	84322c04 	addi	r16,r16,-14160
  812154:	2023883a 	mov	r17,r4
  812158:	300b883a 	mov	r5,r6
  81215c:	1009883a 	mov	r4,r2
  812160:	dfc00215 	stw	ra,8(sp)
  812164:	80000015 	stw	zero,0(r16)
  812168:	0814a5c0 	call	814a5c <fstat>
  81216c:	00ffffc4 	movi	r3,-1
  812170:	10c00526 	beq	r2,r3,812188 <_fstat_r+0x4c>
  812174:	dfc00217 	ldw	ra,8(sp)
  812178:	dc400117 	ldw	r17,4(sp)
  81217c:	dc000017 	ldw	r16,0(sp)
  812180:	dec00304 	addi	sp,sp,12
  812184:	f800283a 	ret
  812188:	80c00017 	ldw	r3,0(r16)
  81218c:	183ff926 	beq	r3,zero,812174 <__alt_mem_onchip_mem+0xff80a174>
  812190:	88c00015 	stw	r3,0(r17)
  812194:	003ff706 	br	812174 <__alt_mem_onchip_mem+0xff80a174>

00812198 <__sfvwrite_r>:
  812198:	30800217 	ldw	r2,8(r6)
  81219c:	10006726 	beq	r2,zero,81233c <__sfvwrite_r+0x1a4>
  8121a0:	28c0030b 	ldhu	r3,12(r5)
  8121a4:	defff404 	addi	sp,sp,-48
  8121a8:	dd400715 	stw	r21,28(sp)
  8121ac:	dd000615 	stw	r20,24(sp)
  8121b0:	dc000215 	stw	r16,8(sp)
  8121b4:	dfc00b15 	stw	ra,44(sp)
  8121b8:	df000a15 	stw	fp,40(sp)
  8121bc:	ddc00915 	stw	r23,36(sp)
  8121c0:	dd800815 	stw	r22,32(sp)
  8121c4:	dcc00515 	stw	r19,20(sp)
  8121c8:	dc800415 	stw	r18,16(sp)
  8121cc:	dc400315 	stw	r17,12(sp)
  8121d0:	1880020c 	andi	r2,r3,8
  8121d4:	2821883a 	mov	r16,r5
  8121d8:	202b883a 	mov	r21,r4
  8121dc:	3029883a 	mov	r20,r6
  8121e0:	10002726 	beq	r2,zero,812280 <__sfvwrite_r+0xe8>
  8121e4:	28800417 	ldw	r2,16(r5)
  8121e8:	10002526 	beq	r2,zero,812280 <__sfvwrite_r+0xe8>
  8121ec:	1880008c 	andi	r2,r3,2
  8121f0:	a4400017 	ldw	r17,0(r20)
  8121f4:	10002a26 	beq	r2,zero,8122a0 <__sfvwrite_r+0x108>
  8121f8:	05a00034 	movhi	r22,32768
  8121fc:	0027883a 	mov	r19,zero
  812200:	0025883a 	mov	r18,zero
  812204:	b5bf0004 	addi	r22,r22,-1024
  812208:	980d883a 	mov	r6,r19
  81220c:	a809883a 	mov	r4,r21
  812210:	90004626 	beq	r18,zero,81232c <__sfvwrite_r+0x194>
  812214:	900f883a 	mov	r7,r18
  812218:	b480022e 	bgeu	r22,r18,812224 <__sfvwrite_r+0x8c>
  81221c:	01e00034 	movhi	r7,32768
  812220:	39ff0004 	addi	r7,r7,-1024
  812224:	80800917 	ldw	r2,36(r16)
  812228:	81400717 	ldw	r5,28(r16)
  81222c:	103ee83a 	callr	r2
  812230:	0080570e 	bge	zero,r2,812390 <__sfvwrite_r+0x1f8>
  812234:	a0c00217 	ldw	r3,8(r20)
  812238:	98a7883a 	add	r19,r19,r2
  81223c:	90a5c83a 	sub	r18,r18,r2
  812240:	1885c83a 	sub	r2,r3,r2
  812244:	a0800215 	stw	r2,8(r20)
  812248:	103fef1e 	bne	r2,zero,812208 <__alt_mem_onchip_mem+0xff80a208>
  81224c:	0005883a 	mov	r2,zero
  812250:	dfc00b17 	ldw	ra,44(sp)
  812254:	df000a17 	ldw	fp,40(sp)
  812258:	ddc00917 	ldw	r23,36(sp)
  81225c:	dd800817 	ldw	r22,32(sp)
  812260:	dd400717 	ldw	r21,28(sp)
  812264:	dd000617 	ldw	r20,24(sp)
  812268:	dcc00517 	ldw	r19,20(sp)
  81226c:	dc800417 	ldw	r18,16(sp)
  812270:	dc400317 	ldw	r17,12(sp)
  812274:	dc000217 	ldw	r16,8(sp)
  812278:	dec00c04 	addi	sp,sp,48
  81227c:	f800283a 	ret
  812280:	800b883a 	mov	r5,r16
  812284:	a809883a 	mov	r4,r21
  812288:	080bf240 	call	80bf24 <__swsetup_r>
  81228c:	1000eb1e 	bne	r2,zero,81263c <__sfvwrite_r+0x4a4>
  812290:	80c0030b 	ldhu	r3,12(r16)
  812294:	a4400017 	ldw	r17,0(r20)
  812298:	1880008c 	andi	r2,r3,2
  81229c:	103fd61e 	bne	r2,zero,8121f8 <__alt_mem_onchip_mem+0xff80a1f8>
  8122a0:	1880004c 	andi	r2,r3,1
  8122a4:	10003f1e 	bne	r2,zero,8123a4 <__sfvwrite_r+0x20c>
  8122a8:	0039883a 	mov	fp,zero
  8122ac:	0025883a 	mov	r18,zero
  8122b0:	90001a26 	beq	r18,zero,81231c <__sfvwrite_r+0x184>
  8122b4:	1880800c 	andi	r2,r3,512
  8122b8:	84c00217 	ldw	r19,8(r16)
  8122bc:	10002126 	beq	r2,zero,812344 <__sfvwrite_r+0x1ac>
  8122c0:	982f883a 	mov	r23,r19
  8122c4:	94c09336 	bltu	r18,r19,812514 <__sfvwrite_r+0x37c>
  8122c8:	1881200c 	andi	r2,r3,1152
  8122cc:	10009e1e 	bne	r2,zero,812548 <__sfvwrite_r+0x3b0>
  8122d0:	81000017 	ldw	r4,0(r16)
  8122d4:	b80d883a 	mov	r6,r23
  8122d8:	e00b883a 	mov	r5,fp
  8122dc:	08127080 	call	812708 <memmove>
  8122e0:	80c00217 	ldw	r3,8(r16)
  8122e4:	81000017 	ldw	r4,0(r16)
  8122e8:	9005883a 	mov	r2,r18
  8122ec:	1ce7c83a 	sub	r19,r3,r19
  8122f0:	25cf883a 	add	r7,r4,r23
  8122f4:	84c00215 	stw	r19,8(r16)
  8122f8:	81c00015 	stw	r7,0(r16)
  8122fc:	a0c00217 	ldw	r3,8(r20)
  812300:	e0b9883a 	add	fp,fp,r2
  812304:	90a5c83a 	sub	r18,r18,r2
  812308:	18a7c83a 	sub	r19,r3,r2
  81230c:	a4c00215 	stw	r19,8(r20)
  812310:	983fce26 	beq	r19,zero,81224c <__alt_mem_onchip_mem+0xff80a24c>
  812314:	80c0030b 	ldhu	r3,12(r16)
  812318:	903fe61e 	bne	r18,zero,8122b4 <__alt_mem_onchip_mem+0xff80a2b4>
  81231c:	8f000017 	ldw	fp,0(r17)
  812320:	8c800117 	ldw	r18,4(r17)
  812324:	8c400204 	addi	r17,r17,8
  812328:	003fe106 	br	8122b0 <__alt_mem_onchip_mem+0xff80a2b0>
  81232c:	8cc00017 	ldw	r19,0(r17)
  812330:	8c800117 	ldw	r18,4(r17)
  812334:	8c400204 	addi	r17,r17,8
  812338:	003fb306 	br	812208 <__alt_mem_onchip_mem+0xff80a208>
  81233c:	0005883a 	mov	r2,zero
  812340:	f800283a 	ret
  812344:	81000017 	ldw	r4,0(r16)
  812348:	80800417 	ldw	r2,16(r16)
  81234c:	11005736 	bltu	r2,r4,8124ac <__sfvwrite_r+0x314>
  812350:	85c00517 	ldw	r23,20(r16)
  812354:	95c05536 	bltu	r18,r23,8124ac <__sfvwrite_r+0x314>
  812358:	00a00034 	movhi	r2,32768
  81235c:	10bfffc4 	addi	r2,r2,-1
  812360:	9009883a 	mov	r4,r18
  812364:	1480012e 	bgeu	r2,r18,81236c <__sfvwrite_r+0x1d4>
  812368:	1009883a 	mov	r4,r2
  81236c:	b80b883a 	mov	r5,r23
  812370:	0813c180 	call	813c18 <__divsi3>
  812374:	15cf383a 	mul	r7,r2,r23
  812378:	81400717 	ldw	r5,28(r16)
  81237c:	80800917 	ldw	r2,36(r16)
  812380:	e00d883a 	mov	r6,fp
  812384:	a809883a 	mov	r4,r21
  812388:	103ee83a 	callr	r2
  81238c:	00bfdb16 	blt	zero,r2,8122fc <__alt_mem_onchip_mem+0xff80a2fc>
  812390:	8080030b 	ldhu	r2,12(r16)
  812394:	10801014 	ori	r2,r2,64
  812398:	8080030d 	sth	r2,12(r16)
  81239c:	00bfffc4 	movi	r2,-1
  8123a0:	003fab06 	br	812250 <__alt_mem_onchip_mem+0xff80a250>
  8123a4:	0027883a 	mov	r19,zero
  8123a8:	0011883a 	mov	r8,zero
  8123ac:	0039883a 	mov	fp,zero
  8123b0:	0025883a 	mov	r18,zero
  8123b4:	90001f26 	beq	r18,zero,812434 <__sfvwrite_r+0x29c>
  8123b8:	40005a26 	beq	r8,zero,812524 <__sfvwrite_r+0x38c>
  8123bc:	982d883a 	mov	r22,r19
  8123c0:	94c0012e 	bgeu	r18,r19,8123c8 <__sfvwrite_r+0x230>
  8123c4:	902d883a 	mov	r22,r18
  8123c8:	81000017 	ldw	r4,0(r16)
  8123cc:	80800417 	ldw	r2,16(r16)
  8123d0:	b02f883a 	mov	r23,r22
  8123d4:	81c00517 	ldw	r7,20(r16)
  8123d8:	1100032e 	bgeu	r2,r4,8123e8 <__sfvwrite_r+0x250>
  8123dc:	80c00217 	ldw	r3,8(r16)
  8123e0:	38c7883a 	add	r3,r7,r3
  8123e4:	1d801816 	blt	r3,r22,812448 <__sfvwrite_r+0x2b0>
  8123e8:	b1c03e16 	blt	r22,r7,8124e4 <__sfvwrite_r+0x34c>
  8123ec:	80800917 	ldw	r2,36(r16)
  8123f0:	81400717 	ldw	r5,28(r16)
  8123f4:	e00d883a 	mov	r6,fp
  8123f8:	da000115 	stw	r8,4(sp)
  8123fc:	a809883a 	mov	r4,r21
  812400:	103ee83a 	callr	r2
  812404:	102f883a 	mov	r23,r2
  812408:	da000117 	ldw	r8,4(sp)
  81240c:	00bfe00e 	bge	zero,r2,812390 <__alt_mem_onchip_mem+0xff80a390>
  812410:	9de7c83a 	sub	r19,r19,r23
  812414:	98001f26 	beq	r19,zero,812494 <__sfvwrite_r+0x2fc>
  812418:	a0800217 	ldw	r2,8(r20)
  81241c:	e5f9883a 	add	fp,fp,r23
  812420:	95e5c83a 	sub	r18,r18,r23
  812424:	15efc83a 	sub	r23,r2,r23
  812428:	a5c00215 	stw	r23,8(r20)
  81242c:	b83f8726 	beq	r23,zero,81224c <__alt_mem_onchip_mem+0xff80a24c>
  812430:	903fe11e 	bne	r18,zero,8123b8 <__alt_mem_onchip_mem+0xff80a3b8>
  812434:	8f000017 	ldw	fp,0(r17)
  812438:	8c800117 	ldw	r18,4(r17)
  81243c:	0011883a 	mov	r8,zero
  812440:	8c400204 	addi	r17,r17,8
  812444:	003fdb06 	br	8123b4 <__alt_mem_onchip_mem+0xff80a3b4>
  812448:	180d883a 	mov	r6,r3
  81244c:	e00b883a 	mov	r5,fp
  812450:	da000115 	stw	r8,4(sp)
  812454:	d8c00015 	stw	r3,0(sp)
  812458:	08127080 	call	812708 <memmove>
  81245c:	d8c00017 	ldw	r3,0(sp)
  812460:	80800017 	ldw	r2,0(r16)
  812464:	800b883a 	mov	r5,r16
  812468:	a809883a 	mov	r4,r21
  81246c:	10c5883a 	add	r2,r2,r3
  812470:	80800015 	stw	r2,0(r16)
  812474:	d8c00015 	stw	r3,0(sp)
  812478:	080db1c0 	call	80db1c <_fflush_r>
  81247c:	d8c00017 	ldw	r3,0(sp)
  812480:	da000117 	ldw	r8,4(sp)
  812484:	103fc21e 	bne	r2,zero,812390 <__alt_mem_onchip_mem+0xff80a390>
  812488:	182f883a 	mov	r23,r3
  81248c:	9de7c83a 	sub	r19,r19,r23
  812490:	983fe11e 	bne	r19,zero,812418 <__alt_mem_onchip_mem+0xff80a418>
  812494:	800b883a 	mov	r5,r16
  812498:	a809883a 	mov	r4,r21
  81249c:	080db1c0 	call	80db1c <_fflush_r>
  8124a0:	103fbb1e 	bne	r2,zero,812390 <__alt_mem_onchip_mem+0xff80a390>
  8124a4:	0011883a 	mov	r8,zero
  8124a8:	003fdb06 	br	812418 <__alt_mem_onchip_mem+0xff80a418>
  8124ac:	94c0012e 	bgeu	r18,r19,8124b4 <__sfvwrite_r+0x31c>
  8124b0:	9027883a 	mov	r19,r18
  8124b4:	980d883a 	mov	r6,r19
  8124b8:	e00b883a 	mov	r5,fp
  8124bc:	08127080 	call	812708 <memmove>
  8124c0:	80800217 	ldw	r2,8(r16)
  8124c4:	80c00017 	ldw	r3,0(r16)
  8124c8:	14c5c83a 	sub	r2,r2,r19
  8124cc:	1cc7883a 	add	r3,r3,r19
  8124d0:	80800215 	stw	r2,8(r16)
  8124d4:	80c00015 	stw	r3,0(r16)
  8124d8:	10004326 	beq	r2,zero,8125e8 <__sfvwrite_r+0x450>
  8124dc:	9805883a 	mov	r2,r19
  8124e0:	003f8606 	br	8122fc <__alt_mem_onchip_mem+0xff80a2fc>
  8124e4:	b00d883a 	mov	r6,r22
  8124e8:	e00b883a 	mov	r5,fp
  8124ec:	da000115 	stw	r8,4(sp)
  8124f0:	08127080 	call	812708 <memmove>
  8124f4:	80800217 	ldw	r2,8(r16)
  8124f8:	80c00017 	ldw	r3,0(r16)
  8124fc:	da000117 	ldw	r8,4(sp)
  812500:	1585c83a 	sub	r2,r2,r22
  812504:	1dad883a 	add	r22,r3,r22
  812508:	80800215 	stw	r2,8(r16)
  81250c:	85800015 	stw	r22,0(r16)
  812510:	003fbf06 	br	812410 <__alt_mem_onchip_mem+0xff80a410>
  812514:	81000017 	ldw	r4,0(r16)
  812518:	9027883a 	mov	r19,r18
  81251c:	902f883a 	mov	r23,r18
  812520:	003f6c06 	br	8122d4 <__alt_mem_onchip_mem+0xff80a2d4>
  812524:	900d883a 	mov	r6,r18
  812528:	01400284 	movi	r5,10
  81252c:	e009883a 	mov	r4,fp
  812530:	080efa80 	call	80efa8 <memchr>
  812534:	10003e26 	beq	r2,zero,812630 <__sfvwrite_r+0x498>
  812538:	10800044 	addi	r2,r2,1
  81253c:	1727c83a 	sub	r19,r2,fp
  812540:	02000044 	movi	r8,1
  812544:	003f9d06 	br	8123bc <__alt_mem_onchip_mem+0xff80a3bc>
  812548:	80800517 	ldw	r2,20(r16)
  81254c:	81400417 	ldw	r5,16(r16)
  812550:	81c00017 	ldw	r7,0(r16)
  812554:	10a7883a 	add	r19,r2,r2
  812558:	9885883a 	add	r2,r19,r2
  81255c:	1026d7fa 	srli	r19,r2,31
  812560:	396dc83a 	sub	r22,r7,r5
  812564:	b1000044 	addi	r4,r22,1
  812568:	9885883a 	add	r2,r19,r2
  81256c:	1027d07a 	srai	r19,r2,1
  812570:	2485883a 	add	r2,r4,r18
  812574:	980d883a 	mov	r6,r19
  812578:	9880022e 	bgeu	r19,r2,812584 <__sfvwrite_r+0x3ec>
  81257c:	1027883a 	mov	r19,r2
  812580:	100d883a 	mov	r6,r2
  812584:	18c1000c 	andi	r3,r3,1024
  812588:	18001c26 	beq	r3,zero,8125fc <__sfvwrite_r+0x464>
  81258c:	300b883a 	mov	r5,r6
  812590:	a809883a 	mov	r4,r21
  812594:	080e79c0 	call	80e79c <_malloc_r>
  812598:	102f883a 	mov	r23,r2
  81259c:	10002926 	beq	r2,zero,812644 <__sfvwrite_r+0x4ac>
  8125a0:	81400417 	ldw	r5,16(r16)
  8125a4:	b00d883a 	mov	r6,r22
  8125a8:	1009883a 	mov	r4,r2
  8125ac:	080f08c0 	call	80f08c <memcpy>
  8125b0:	8080030b 	ldhu	r2,12(r16)
  8125b4:	00fedfc4 	movi	r3,-1153
  8125b8:	10c4703a 	and	r2,r2,r3
  8125bc:	10802014 	ori	r2,r2,128
  8125c0:	8080030d 	sth	r2,12(r16)
  8125c4:	bd89883a 	add	r4,r23,r22
  8125c8:	9d8fc83a 	sub	r7,r19,r22
  8125cc:	85c00415 	stw	r23,16(r16)
  8125d0:	84c00515 	stw	r19,20(r16)
  8125d4:	81000015 	stw	r4,0(r16)
  8125d8:	9027883a 	mov	r19,r18
  8125dc:	81c00215 	stw	r7,8(r16)
  8125e0:	902f883a 	mov	r23,r18
  8125e4:	003f3b06 	br	8122d4 <__alt_mem_onchip_mem+0xff80a2d4>
  8125e8:	800b883a 	mov	r5,r16
  8125ec:	a809883a 	mov	r4,r21
  8125f0:	080db1c0 	call	80db1c <_fflush_r>
  8125f4:	103fb926 	beq	r2,zero,8124dc <__alt_mem_onchip_mem+0xff80a4dc>
  8125f8:	003f6506 	br	812390 <__alt_mem_onchip_mem+0xff80a390>
  8125fc:	a809883a 	mov	r4,r21
  812600:	08128c40 	call	8128c4 <_realloc_r>
  812604:	102f883a 	mov	r23,r2
  812608:	103fee1e 	bne	r2,zero,8125c4 <__alt_mem_onchip_mem+0xff80a5c4>
  81260c:	81400417 	ldw	r5,16(r16)
  812610:	a809883a 	mov	r4,r21
  812614:	080e06c0 	call	80e06c <_free_r>
  812618:	8080030b 	ldhu	r2,12(r16)
  81261c:	00ffdfc4 	movi	r3,-129
  812620:	1884703a 	and	r2,r3,r2
  812624:	00c00304 	movi	r3,12
  812628:	a8c00015 	stw	r3,0(r21)
  81262c:	003f5906 	br	812394 <__alt_mem_onchip_mem+0xff80a394>
  812630:	94c00044 	addi	r19,r18,1
  812634:	02000044 	movi	r8,1
  812638:	003f6006 	br	8123bc <__alt_mem_onchip_mem+0xff80a3bc>
  81263c:	00bfffc4 	movi	r2,-1
  812640:	003f0306 	br	812250 <__alt_mem_onchip_mem+0xff80a250>
  812644:	00800304 	movi	r2,12
  812648:	a8800015 	stw	r2,0(r21)
  81264c:	8080030b 	ldhu	r2,12(r16)
  812650:	003f5006 	br	812394 <__alt_mem_onchip_mem+0xff80a394>

00812654 <_isatty_r>:
  812654:	defffd04 	addi	sp,sp,-12
  812658:	dc000015 	stw	r16,0(sp)
  81265c:	040020b4 	movhi	r16,130
  812660:	dc400115 	stw	r17,4(sp)
  812664:	84322c04 	addi	r16,r16,-14160
  812668:	2023883a 	mov	r17,r4
  81266c:	2809883a 	mov	r4,r5
  812670:	dfc00215 	stw	ra,8(sp)
  812674:	80000015 	stw	zero,0(r16)
  812678:	0814de80 	call	814de8 <isatty>
  81267c:	00ffffc4 	movi	r3,-1
  812680:	10c00526 	beq	r2,r3,812698 <_isatty_r+0x44>
  812684:	dfc00217 	ldw	ra,8(sp)
  812688:	dc400117 	ldw	r17,4(sp)
  81268c:	dc000017 	ldw	r16,0(sp)
  812690:	dec00304 	addi	sp,sp,12
  812694:	f800283a 	ret
  812698:	80c00017 	ldw	r3,0(r16)
  81269c:	183ff926 	beq	r3,zero,812684 <__alt_mem_onchip_mem+0xff80a684>
  8126a0:	88c00015 	stw	r3,0(r17)
  8126a4:	003ff706 	br	812684 <__alt_mem_onchip_mem+0xff80a684>

008126a8 <_lseek_r>:
  8126a8:	defffd04 	addi	sp,sp,-12
  8126ac:	2805883a 	mov	r2,r5
  8126b0:	dc000015 	stw	r16,0(sp)
  8126b4:	040020b4 	movhi	r16,130
  8126b8:	dc400115 	stw	r17,4(sp)
  8126bc:	300b883a 	mov	r5,r6
  8126c0:	84322c04 	addi	r16,r16,-14160
  8126c4:	2023883a 	mov	r17,r4
  8126c8:	380d883a 	mov	r6,r7
  8126cc:	1009883a 	mov	r4,r2
  8126d0:	dfc00215 	stw	ra,8(sp)
  8126d4:	80000015 	stw	zero,0(r16)
  8126d8:	0814fb40 	call	814fb4 <lseek>
  8126dc:	00ffffc4 	movi	r3,-1
  8126e0:	10c00526 	beq	r2,r3,8126f8 <_lseek_r+0x50>
  8126e4:	dfc00217 	ldw	ra,8(sp)
  8126e8:	dc400117 	ldw	r17,4(sp)
  8126ec:	dc000017 	ldw	r16,0(sp)
  8126f0:	dec00304 	addi	sp,sp,12
  8126f4:	f800283a 	ret
  8126f8:	80c00017 	ldw	r3,0(r16)
  8126fc:	183ff926 	beq	r3,zero,8126e4 <__alt_mem_onchip_mem+0xff80a6e4>
  812700:	88c00015 	stw	r3,0(r17)
  812704:	003ff706 	br	8126e4 <__alt_mem_onchip_mem+0xff80a6e4>

00812708 <memmove>:
  812708:	2005883a 	mov	r2,r4
  81270c:	29000b2e 	bgeu	r5,r4,81273c <memmove+0x34>
  812710:	298f883a 	add	r7,r5,r6
  812714:	21c0092e 	bgeu	r4,r7,81273c <memmove+0x34>
  812718:	2187883a 	add	r3,r4,r6
  81271c:	198bc83a 	sub	r5,r3,r6
  812720:	30004826 	beq	r6,zero,812844 <memmove+0x13c>
  812724:	39ffffc4 	addi	r7,r7,-1
  812728:	39000003 	ldbu	r4,0(r7)
  81272c:	18ffffc4 	addi	r3,r3,-1
  812730:	19000005 	stb	r4,0(r3)
  812734:	28fffb1e 	bne	r5,r3,812724 <__alt_mem_onchip_mem+0xff80a724>
  812738:	f800283a 	ret
  81273c:	00c003c4 	movi	r3,15
  812740:	1980412e 	bgeu	r3,r6,812848 <memmove+0x140>
  812744:	2886b03a 	or	r3,r5,r2
  812748:	18c000cc 	andi	r3,r3,3
  81274c:	1800401e 	bne	r3,zero,812850 <memmove+0x148>
  812750:	33fffc04 	addi	r15,r6,-16
  812754:	781ed13a 	srli	r15,r15,4
  812758:	28c00104 	addi	r3,r5,4
  81275c:	13400104 	addi	r13,r2,4
  812760:	781c913a 	slli	r14,r15,4
  812764:	2b000204 	addi	r12,r5,8
  812768:	12c00204 	addi	r11,r2,8
  81276c:	73800504 	addi	r14,r14,20
  812770:	2a800304 	addi	r10,r5,12
  812774:	12400304 	addi	r9,r2,12
  812778:	2b9d883a 	add	r14,r5,r14
  81277c:	2811883a 	mov	r8,r5
  812780:	100f883a 	mov	r7,r2
  812784:	41000017 	ldw	r4,0(r8)
  812788:	39c00404 	addi	r7,r7,16
  81278c:	18c00404 	addi	r3,r3,16
  812790:	393ffc15 	stw	r4,-16(r7)
  812794:	193ffc17 	ldw	r4,-16(r3)
  812798:	6b400404 	addi	r13,r13,16
  81279c:	5ac00404 	addi	r11,r11,16
  8127a0:	693ffc15 	stw	r4,-16(r13)
  8127a4:	61000017 	ldw	r4,0(r12)
  8127a8:	4a400404 	addi	r9,r9,16
  8127ac:	42000404 	addi	r8,r8,16
  8127b0:	593ffc15 	stw	r4,-16(r11)
  8127b4:	51000017 	ldw	r4,0(r10)
  8127b8:	63000404 	addi	r12,r12,16
  8127bc:	52800404 	addi	r10,r10,16
  8127c0:	493ffc15 	stw	r4,-16(r9)
  8127c4:	1bbfef1e 	bne	r3,r14,812784 <__alt_mem_onchip_mem+0xff80a784>
  8127c8:	79000044 	addi	r4,r15,1
  8127cc:	2008913a 	slli	r4,r4,4
  8127d0:	328003cc 	andi	r10,r6,15
  8127d4:	02c000c4 	movi	r11,3
  8127d8:	1107883a 	add	r3,r2,r4
  8127dc:	290b883a 	add	r5,r5,r4
  8127e0:	5a801e2e 	bgeu	r11,r10,81285c <memmove+0x154>
  8127e4:	1813883a 	mov	r9,r3
  8127e8:	2811883a 	mov	r8,r5
  8127ec:	500f883a 	mov	r7,r10
  8127f0:	41000017 	ldw	r4,0(r8)
  8127f4:	4a400104 	addi	r9,r9,4
  8127f8:	39ffff04 	addi	r7,r7,-4
  8127fc:	493fff15 	stw	r4,-4(r9)
  812800:	42000104 	addi	r8,r8,4
  812804:	59fffa36 	bltu	r11,r7,8127f0 <__alt_mem_onchip_mem+0xff80a7f0>
  812808:	513fff04 	addi	r4,r10,-4
  81280c:	2008d0ba 	srli	r4,r4,2
  812810:	318000cc 	andi	r6,r6,3
  812814:	21000044 	addi	r4,r4,1
  812818:	2109883a 	add	r4,r4,r4
  81281c:	2109883a 	add	r4,r4,r4
  812820:	1907883a 	add	r3,r3,r4
  812824:	290b883a 	add	r5,r5,r4
  812828:	30000b26 	beq	r6,zero,812858 <memmove+0x150>
  81282c:	198d883a 	add	r6,r3,r6
  812830:	29c00003 	ldbu	r7,0(r5)
  812834:	18c00044 	addi	r3,r3,1
  812838:	29400044 	addi	r5,r5,1
  81283c:	19ffffc5 	stb	r7,-1(r3)
  812840:	19bffb1e 	bne	r3,r6,812830 <__alt_mem_onchip_mem+0xff80a830>
  812844:	f800283a 	ret
  812848:	1007883a 	mov	r3,r2
  81284c:	003ff606 	br	812828 <__alt_mem_onchip_mem+0xff80a828>
  812850:	1007883a 	mov	r3,r2
  812854:	003ff506 	br	81282c <__alt_mem_onchip_mem+0xff80a82c>
  812858:	f800283a 	ret
  81285c:	500d883a 	mov	r6,r10
  812860:	003ff106 	br	812828 <__alt_mem_onchip_mem+0xff80a828>

00812864 <_read_r>:
  812864:	defffd04 	addi	sp,sp,-12
  812868:	2805883a 	mov	r2,r5
  81286c:	dc000015 	stw	r16,0(sp)
  812870:	040020b4 	movhi	r16,130
  812874:	dc400115 	stw	r17,4(sp)
  812878:	300b883a 	mov	r5,r6
  81287c:	84322c04 	addi	r16,r16,-14160
  812880:	2023883a 	mov	r17,r4
  812884:	380d883a 	mov	r6,r7
  812888:	1009883a 	mov	r4,r2
  81288c:	dfc00215 	stw	ra,8(sp)
  812890:	80000015 	stw	zero,0(r16)
  812894:	08151880 	call	815188 <read>
  812898:	00ffffc4 	movi	r3,-1
  81289c:	10c00526 	beq	r2,r3,8128b4 <_read_r+0x50>
  8128a0:	dfc00217 	ldw	ra,8(sp)
  8128a4:	dc400117 	ldw	r17,4(sp)
  8128a8:	dc000017 	ldw	r16,0(sp)
  8128ac:	dec00304 	addi	sp,sp,12
  8128b0:	f800283a 	ret
  8128b4:	80c00017 	ldw	r3,0(r16)
  8128b8:	183ff926 	beq	r3,zero,8128a0 <__alt_mem_onchip_mem+0xff80a8a0>
  8128bc:	88c00015 	stw	r3,0(r17)
  8128c0:	003ff706 	br	8128a0 <__alt_mem_onchip_mem+0xff80a8a0>

008128c4 <_realloc_r>:
  8128c4:	defff604 	addi	sp,sp,-40
  8128c8:	dc800215 	stw	r18,8(sp)
  8128cc:	dfc00915 	stw	ra,36(sp)
  8128d0:	df000815 	stw	fp,32(sp)
  8128d4:	ddc00715 	stw	r23,28(sp)
  8128d8:	dd800615 	stw	r22,24(sp)
  8128dc:	dd400515 	stw	r21,20(sp)
  8128e0:	dd000415 	stw	r20,16(sp)
  8128e4:	dcc00315 	stw	r19,12(sp)
  8128e8:	dc400115 	stw	r17,4(sp)
  8128ec:	dc000015 	stw	r16,0(sp)
  8128f0:	3025883a 	mov	r18,r6
  8128f4:	2800b726 	beq	r5,zero,812bd4 <_realloc_r+0x310>
  8128f8:	282b883a 	mov	r21,r5
  8128fc:	2029883a 	mov	r20,r4
  812900:	08151040 	call	815104 <__malloc_lock>
  812904:	a8bfff17 	ldw	r2,-4(r21)
  812908:	043fff04 	movi	r16,-4
  81290c:	90c002c4 	addi	r3,r18,11
  812910:	01000584 	movi	r4,22
  812914:	acfffe04 	addi	r19,r21,-8
  812918:	1420703a 	and	r16,r2,r16
  81291c:	20c0332e 	bgeu	r4,r3,8129ec <_realloc_r+0x128>
  812920:	047ffe04 	movi	r17,-8
  812924:	1c62703a 	and	r17,r3,r17
  812928:	8807883a 	mov	r3,r17
  81292c:	88005816 	blt	r17,zero,812a90 <_realloc_r+0x1cc>
  812930:	8c805736 	bltu	r17,r18,812a90 <_realloc_r+0x1cc>
  812934:	80c0300e 	bge	r16,r3,8129f8 <_realloc_r+0x134>
  812938:	070020b4 	movhi	fp,130
  81293c:	e724d504 	addi	fp,fp,-27820
  812940:	e1c00217 	ldw	r7,8(fp)
  812944:	9c09883a 	add	r4,r19,r16
  812948:	22000117 	ldw	r8,4(r4)
  81294c:	21c06326 	beq	r4,r7,812adc <_realloc_r+0x218>
  812950:	017fff84 	movi	r5,-2
  812954:	414a703a 	and	r5,r8,r5
  812958:	214b883a 	add	r5,r4,r5
  81295c:	29800117 	ldw	r6,4(r5)
  812960:	3180004c 	andi	r6,r6,1
  812964:	30003f26 	beq	r6,zero,812a64 <_realloc_r+0x1a0>
  812968:	1080004c 	andi	r2,r2,1
  81296c:	10008326 	beq	r2,zero,812b7c <_realloc_r+0x2b8>
  812970:	900b883a 	mov	r5,r18
  812974:	a009883a 	mov	r4,r20
  812978:	080e79c0 	call	80e79c <_malloc_r>
  81297c:	1025883a 	mov	r18,r2
  812980:	10011e26 	beq	r2,zero,812dfc <_realloc_r+0x538>
  812984:	a93fff17 	ldw	r4,-4(r21)
  812988:	10fffe04 	addi	r3,r2,-8
  81298c:	00bfff84 	movi	r2,-2
  812990:	2084703a 	and	r2,r4,r2
  812994:	9885883a 	add	r2,r19,r2
  812998:	1880ee26 	beq	r3,r2,812d54 <_realloc_r+0x490>
  81299c:	81bfff04 	addi	r6,r16,-4
  8129a0:	00800904 	movi	r2,36
  8129a4:	1180b836 	bltu	r2,r6,812c88 <_realloc_r+0x3c4>
  8129a8:	00c004c4 	movi	r3,19
  8129ac:	19809636 	bltu	r3,r6,812c08 <_realloc_r+0x344>
  8129b0:	9005883a 	mov	r2,r18
  8129b4:	a807883a 	mov	r3,r21
  8129b8:	19000017 	ldw	r4,0(r3)
  8129bc:	11000015 	stw	r4,0(r2)
  8129c0:	19000117 	ldw	r4,4(r3)
  8129c4:	11000115 	stw	r4,4(r2)
  8129c8:	18c00217 	ldw	r3,8(r3)
  8129cc:	10c00215 	stw	r3,8(r2)
  8129d0:	a80b883a 	mov	r5,r21
  8129d4:	a009883a 	mov	r4,r20
  8129d8:	080e06c0 	call	80e06c <_free_r>
  8129dc:	a009883a 	mov	r4,r20
  8129e0:	08151280 	call	815128 <__malloc_unlock>
  8129e4:	9005883a 	mov	r2,r18
  8129e8:	00001206 	br	812a34 <_realloc_r+0x170>
  8129ec:	00c00404 	movi	r3,16
  8129f0:	1823883a 	mov	r17,r3
  8129f4:	003fce06 	br	812930 <__alt_mem_onchip_mem+0xff80a930>
  8129f8:	a825883a 	mov	r18,r21
  8129fc:	8445c83a 	sub	r2,r16,r17
  812a00:	00c003c4 	movi	r3,15
  812a04:	18802636 	bltu	r3,r2,812aa0 <_realloc_r+0x1dc>
  812a08:	99800117 	ldw	r6,4(r19)
  812a0c:	9c07883a 	add	r3,r19,r16
  812a10:	3180004c 	andi	r6,r6,1
  812a14:	3420b03a 	or	r16,r6,r16
  812a18:	9c000115 	stw	r16,4(r19)
  812a1c:	18800117 	ldw	r2,4(r3)
  812a20:	10800054 	ori	r2,r2,1
  812a24:	18800115 	stw	r2,4(r3)
  812a28:	a009883a 	mov	r4,r20
  812a2c:	08151280 	call	815128 <__malloc_unlock>
  812a30:	9005883a 	mov	r2,r18
  812a34:	dfc00917 	ldw	ra,36(sp)
  812a38:	df000817 	ldw	fp,32(sp)
  812a3c:	ddc00717 	ldw	r23,28(sp)
  812a40:	dd800617 	ldw	r22,24(sp)
  812a44:	dd400517 	ldw	r21,20(sp)
  812a48:	dd000417 	ldw	r20,16(sp)
  812a4c:	dcc00317 	ldw	r19,12(sp)
  812a50:	dc800217 	ldw	r18,8(sp)
  812a54:	dc400117 	ldw	r17,4(sp)
  812a58:	dc000017 	ldw	r16,0(sp)
  812a5c:	dec00a04 	addi	sp,sp,40
  812a60:	f800283a 	ret
  812a64:	017fff04 	movi	r5,-4
  812a68:	414a703a 	and	r5,r8,r5
  812a6c:	814d883a 	add	r6,r16,r5
  812a70:	30c01f16 	blt	r6,r3,812af0 <_realloc_r+0x22c>
  812a74:	20800317 	ldw	r2,12(r4)
  812a78:	20c00217 	ldw	r3,8(r4)
  812a7c:	a825883a 	mov	r18,r21
  812a80:	3021883a 	mov	r16,r6
  812a84:	18800315 	stw	r2,12(r3)
  812a88:	10c00215 	stw	r3,8(r2)
  812a8c:	003fdb06 	br	8129fc <__alt_mem_onchip_mem+0xff80a9fc>
  812a90:	00800304 	movi	r2,12
  812a94:	a0800015 	stw	r2,0(r20)
  812a98:	0005883a 	mov	r2,zero
  812a9c:	003fe506 	br	812a34 <__alt_mem_onchip_mem+0xff80aa34>
  812aa0:	98c00117 	ldw	r3,4(r19)
  812aa4:	9c4b883a 	add	r5,r19,r17
  812aa8:	11000054 	ori	r4,r2,1
  812aac:	18c0004c 	andi	r3,r3,1
  812ab0:	1c62b03a 	or	r17,r3,r17
  812ab4:	9c400115 	stw	r17,4(r19)
  812ab8:	29000115 	stw	r4,4(r5)
  812abc:	2885883a 	add	r2,r5,r2
  812ac0:	10c00117 	ldw	r3,4(r2)
  812ac4:	29400204 	addi	r5,r5,8
  812ac8:	a009883a 	mov	r4,r20
  812acc:	18c00054 	ori	r3,r3,1
  812ad0:	10c00115 	stw	r3,4(r2)
  812ad4:	080e06c0 	call	80e06c <_free_r>
  812ad8:	003fd306 	br	812a28 <__alt_mem_onchip_mem+0xff80aa28>
  812adc:	017fff04 	movi	r5,-4
  812ae0:	414a703a 	and	r5,r8,r5
  812ae4:	89800404 	addi	r6,r17,16
  812ae8:	8151883a 	add	r8,r16,r5
  812aec:	4180590e 	bge	r8,r6,812c54 <_realloc_r+0x390>
  812af0:	1080004c 	andi	r2,r2,1
  812af4:	103f9e1e 	bne	r2,zero,812970 <__alt_mem_onchip_mem+0xff80a970>
  812af8:	adbffe17 	ldw	r22,-8(r21)
  812afc:	00bfff04 	movi	r2,-4
  812b00:	9dadc83a 	sub	r22,r19,r22
  812b04:	b1800117 	ldw	r6,4(r22)
  812b08:	3084703a 	and	r2,r6,r2
  812b0c:	20002026 	beq	r4,zero,812b90 <_realloc_r+0x2cc>
  812b10:	80af883a 	add	r23,r16,r2
  812b14:	b96f883a 	add	r23,r23,r5
  812b18:	21c05f26 	beq	r4,r7,812c98 <_realloc_r+0x3d4>
  812b1c:	b8c01c16 	blt	r23,r3,812b90 <_realloc_r+0x2cc>
  812b20:	20800317 	ldw	r2,12(r4)
  812b24:	20c00217 	ldw	r3,8(r4)
  812b28:	81bfff04 	addi	r6,r16,-4
  812b2c:	01000904 	movi	r4,36
  812b30:	18800315 	stw	r2,12(r3)
  812b34:	10c00215 	stw	r3,8(r2)
  812b38:	b0c00217 	ldw	r3,8(r22)
  812b3c:	b0800317 	ldw	r2,12(r22)
  812b40:	b4800204 	addi	r18,r22,8
  812b44:	18800315 	stw	r2,12(r3)
  812b48:	10c00215 	stw	r3,8(r2)
  812b4c:	21801b36 	bltu	r4,r6,812bbc <_realloc_r+0x2f8>
  812b50:	008004c4 	movi	r2,19
  812b54:	1180352e 	bgeu	r2,r6,812c2c <_realloc_r+0x368>
  812b58:	a8800017 	ldw	r2,0(r21)
  812b5c:	b0800215 	stw	r2,8(r22)
  812b60:	a8800117 	ldw	r2,4(r21)
  812b64:	b0800315 	stw	r2,12(r22)
  812b68:	008006c4 	movi	r2,27
  812b6c:	11807f36 	bltu	r2,r6,812d6c <_realloc_r+0x4a8>
  812b70:	b0800404 	addi	r2,r22,16
  812b74:	ad400204 	addi	r21,r21,8
  812b78:	00002d06 	br	812c30 <_realloc_r+0x36c>
  812b7c:	adbffe17 	ldw	r22,-8(r21)
  812b80:	00bfff04 	movi	r2,-4
  812b84:	9dadc83a 	sub	r22,r19,r22
  812b88:	b1000117 	ldw	r4,4(r22)
  812b8c:	2084703a 	and	r2,r4,r2
  812b90:	b03f7726 	beq	r22,zero,812970 <__alt_mem_onchip_mem+0xff80a970>
  812b94:	80af883a 	add	r23,r16,r2
  812b98:	b8ff7516 	blt	r23,r3,812970 <__alt_mem_onchip_mem+0xff80a970>
  812b9c:	b0800317 	ldw	r2,12(r22)
  812ba0:	b0c00217 	ldw	r3,8(r22)
  812ba4:	81bfff04 	addi	r6,r16,-4
  812ba8:	01000904 	movi	r4,36
  812bac:	18800315 	stw	r2,12(r3)
  812bb0:	10c00215 	stw	r3,8(r2)
  812bb4:	b4800204 	addi	r18,r22,8
  812bb8:	21bfe52e 	bgeu	r4,r6,812b50 <__alt_mem_onchip_mem+0xff80ab50>
  812bbc:	a80b883a 	mov	r5,r21
  812bc0:	9009883a 	mov	r4,r18
  812bc4:	08127080 	call	812708 <memmove>
  812bc8:	b821883a 	mov	r16,r23
  812bcc:	b027883a 	mov	r19,r22
  812bd0:	003f8a06 	br	8129fc <__alt_mem_onchip_mem+0xff80a9fc>
  812bd4:	300b883a 	mov	r5,r6
  812bd8:	dfc00917 	ldw	ra,36(sp)
  812bdc:	df000817 	ldw	fp,32(sp)
  812be0:	ddc00717 	ldw	r23,28(sp)
  812be4:	dd800617 	ldw	r22,24(sp)
  812be8:	dd400517 	ldw	r21,20(sp)
  812bec:	dd000417 	ldw	r20,16(sp)
  812bf0:	dcc00317 	ldw	r19,12(sp)
  812bf4:	dc800217 	ldw	r18,8(sp)
  812bf8:	dc400117 	ldw	r17,4(sp)
  812bfc:	dc000017 	ldw	r16,0(sp)
  812c00:	dec00a04 	addi	sp,sp,40
  812c04:	080e79c1 	jmpi	80e79c <_malloc_r>
  812c08:	a8c00017 	ldw	r3,0(r21)
  812c0c:	90c00015 	stw	r3,0(r18)
  812c10:	a8c00117 	ldw	r3,4(r21)
  812c14:	90c00115 	stw	r3,4(r18)
  812c18:	00c006c4 	movi	r3,27
  812c1c:	19804536 	bltu	r3,r6,812d34 <_realloc_r+0x470>
  812c20:	90800204 	addi	r2,r18,8
  812c24:	a8c00204 	addi	r3,r21,8
  812c28:	003f6306 	br	8129b8 <__alt_mem_onchip_mem+0xff80a9b8>
  812c2c:	9005883a 	mov	r2,r18
  812c30:	a8c00017 	ldw	r3,0(r21)
  812c34:	b821883a 	mov	r16,r23
  812c38:	b027883a 	mov	r19,r22
  812c3c:	10c00015 	stw	r3,0(r2)
  812c40:	a8c00117 	ldw	r3,4(r21)
  812c44:	10c00115 	stw	r3,4(r2)
  812c48:	a8c00217 	ldw	r3,8(r21)
  812c4c:	10c00215 	stw	r3,8(r2)
  812c50:	003f6a06 	br	8129fc <__alt_mem_onchip_mem+0xff80a9fc>
  812c54:	9c67883a 	add	r19,r19,r17
  812c58:	4445c83a 	sub	r2,r8,r17
  812c5c:	e4c00215 	stw	r19,8(fp)
  812c60:	10800054 	ori	r2,r2,1
  812c64:	98800115 	stw	r2,4(r19)
  812c68:	a8bfff17 	ldw	r2,-4(r21)
  812c6c:	a009883a 	mov	r4,r20
  812c70:	1080004c 	andi	r2,r2,1
  812c74:	1462b03a 	or	r17,r2,r17
  812c78:	ac7fff15 	stw	r17,-4(r21)
  812c7c:	08151280 	call	815128 <__malloc_unlock>
  812c80:	a805883a 	mov	r2,r21
  812c84:	003f6b06 	br	812a34 <__alt_mem_onchip_mem+0xff80aa34>
  812c88:	a80b883a 	mov	r5,r21
  812c8c:	9009883a 	mov	r4,r18
  812c90:	08127080 	call	812708 <memmove>
  812c94:	003f4e06 	br	8129d0 <__alt_mem_onchip_mem+0xff80a9d0>
  812c98:	89000404 	addi	r4,r17,16
  812c9c:	b93fbc16 	blt	r23,r4,812b90 <__alt_mem_onchip_mem+0xff80ab90>
  812ca0:	b0800317 	ldw	r2,12(r22)
  812ca4:	b0c00217 	ldw	r3,8(r22)
  812ca8:	81bfff04 	addi	r6,r16,-4
  812cac:	01000904 	movi	r4,36
  812cb0:	18800315 	stw	r2,12(r3)
  812cb4:	10c00215 	stw	r3,8(r2)
  812cb8:	b4800204 	addi	r18,r22,8
  812cbc:	21804336 	bltu	r4,r6,812dcc <_realloc_r+0x508>
  812cc0:	008004c4 	movi	r2,19
  812cc4:	11803f2e 	bgeu	r2,r6,812dc4 <_realloc_r+0x500>
  812cc8:	a8800017 	ldw	r2,0(r21)
  812ccc:	b0800215 	stw	r2,8(r22)
  812cd0:	a8800117 	ldw	r2,4(r21)
  812cd4:	b0800315 	stw	r2,12(r22)
  812cd8:	008006c4 	movi	r2,27
  812cdc:	11803f36 	bltu	r2,r6,812ddc <_realloc_r+0x518>
  812ce0:	b0800404 	addi	r2,r22,16
  812ce4:	ad400204 	addi	r21,r21,8
  812ce8:	a8c00017 	ldw	r3,0(r21)
  812cec:	10c00015 	stw	r3,0(r2)
  812cf0:	a8c00117 	ldw	r3,4(r21)
  812cf4:	10c00115 	stw	r3,4(r2)
  812cf8:	a8c00217 	ldw	r3,8(r21)
  812cfc:	10c00215 	stw	r3,8(r2)
  812d00:	b447883a 	add	r3,r22,r17
  812d04:	bc45c83a 	sub	r2,r23,r17
  812d08:	e0c00215 	stw	r3,8(fp)
  812d0c:	10800054 	ori	r2,r2,1
  812d10:	18800115 	stw	r2,4(r3)
  812d14:	b0800117 	ldw	r2,4(r22)
  812d18:	a009883a 	mov	r4,r20
  812d1c:	1080004c 	andi	r2,r2,1
  812d20:	1462b03a 	or	r17,r2,r17
  812d24:	b4400115 	stw	r17,4(r22)
  812d28:	08151280 	call	815128 <__malloc_unlock>
  812d2c:	9005883a 	mov	r2,r18
  812d30:	003f4006 	br	812a34 <__alt_mem_onchip_mem+0xff80aa34>
  812d34:	a8c00217 	ldw	r3,8(r21)
  812d38:	90c00215 	stw	r3,8(r18)
  812d3c:	a8c00317 	ldw	r3,12(r21)
  812d40:	90c00315 	stw	r3,12(r18)
  812d44:	30801126 	beq	r6,r2,812d8c <_realloc_r+0x4c8>
  812d48:	90800404 	addi	r2,r18,16
  812d4c:	a8c00404 	addi	r3,r21,16
  812d50:	003f1906 	br	8129b8 <__alt_mem_onchip_mem+0xff80a9b8>
  812d54:	90ffff17 	ldw	r3,-4(r18)
  812d58:	00bfff04 	movi	r2,-4
  812d5c:	a825883a 	mov	r18,r21
  812d60:	1884703a 	and	r2,r3,r2
  812d64:	80a1883a 	add	r16,r16,r2
  812d68:	003f2406 	br	8129fc <__alt_mem_onchip_mem+0xff80a9fc>
  812d6c:	a8800217 	ldw	r2,8(r21)
  812d70:	b0800415 	stw	r2,16(r22)
  812d74:	a8800317 	ldw	r2,12(r21)
  812d78:	b0800515 	stw	r2,20(r22)
  812d7c:	31000a26 	beq	r6,r4,812da8 <_realloc_r+0x4e4>
  812d80:	b0800604 	addi	r2,r22,24
  812d84:	ad400404 	addi	r21,r21,16
  812d88:	003fa906 	br	812c30 <__alt_mem_onchip_mem+0xff80ac30>
  812d8c:	a9000417 	ldw	r4,16(r21)
  812d90:	90800604 	addi	r2,r18,24
  812d94:	a8c00604 	addi	r3,r21,24
  812d98:	91000415 	stw	r4,16(r18)
  812d9c:	a9000517 	ldw	r4,20(r21)
  812da0:	91000515 	stw	r4,20(r18)
  812da4:	003f0406 	br	8129b8 <__alt_mem_onchip_mem+0xff80a9b8>
  812da8:	a8c00417 	ldw	r3,16(r21)
  812dac:	ad400604 	addi	r21,r21,24
  812db0:	b0800804 	addi	r2,r22,32
  812db4:	b0c00615 	stw	r3,24(r22)
  812db8:	a8ffff17 	ldw	r3,-4(r21)
  812dbc:	b0c00715 	stw	r3,28(r22)
  812dc0:	003f9b06 	br	812c30 <__alt_mem_onchip_mem+0xff80ac30>
  812dc4:	9005883a 	mov	r2,r18
  812dc8:	003fc706 	br	812ce8 <__alt_mem_onchip_mem+0xff80ace8>
  812dcc:	a80b883a 	mov	r5,r21
  812dd0:	9009883a 	mov	r4,r18
  812dd4:	08127080 	call	812708 <memmove>
  812dd8:	003fc906 	br	812d00 <__alt_mem_onchip_mem+0xff80ad00>
  812ddc:	a8800217 	ldw	r2,8(r21)
  812de0:	b0800415 	stw	r2,16(r22)
  812de4:	a8800317 	ldw	r2,12(r21)
  812de8:	b0800515 	stw	r2,20(r22)
  812dec:	31000726 	beq	r6,r4,812e0c <_realloc_r+0x548>
  812df0:	b0800604 	addi	r2,r22,24
  812df4:	ad400404 	addi	r21,r21,16
  812df8:	003fbb06 	br	812ce8 <__alt_mem_onchip_mem+0xff80ace8>
  812dfc:	a009883a 	mov	r4,r20
  812e00:	08151280 	call	815128 <__malloc_unlock>
  812e04:	0005883a 	mov	r2,zero
  812e08:	003f0a06 	br	812a34 <__alt_mem_onchip_mem+0xff80aa34>
  812e0c:	a8c00417 	ldw	r3,16(r21)
  812e10:	ad400604 	addi	r21,r21,24
  812e14:	b0800804 	addi	r2,r22,32
  812e18:	b0c00615 	stw	r3,24(r22)
  812e1c:	a8ffff17 	ldw	r3,-4(r21)
  812e20:	b0c00715 	stw	r3,28(r22)
  812e24:	003fb006 	br	812ce8 <__alt_mem_onchip_mem+0xff80ace8>

00812e28 <__swbuf_r>:
  812e28:	defffb04 	addi	sp,sp,-20
  812e2c:	dcc00315 	stw	r19,12(sp)
  812e30:	dc800215 	stw	r18,8(sp)
  812e34:	dc000015 	stw	r16,0(sp)
  812e38:	dfc00415 	stw	ra,16(sp)
  812e3c:	dc400115 	stw	r17,4(sp)
  812e40:	2025883a 	mov	r18,r4
  812e44:	2827883a 	mov	r19,r5
  812e48:	3021883a 	mov	r16,r6
  812e4c:	20000226 	beq	r4,zero,812e58 <__swbuf_r+0x30>
  812e50:	20800e17 	ldw	r2,56(r4)
  812e54:	10004226 	beq	r2,zero,812f60 <__swbuf_r+0x138>
  812e58:	80800617 	ldw	r2,24(r16)
  812e5c:	8100030b 	ldhu	r4,12(r16)
  812e60:	80800215 	stw	r2,8(r16)
  812e64:	2080020c 	andi	r2,r4,8
  812e68:	10003626 	beq	r2,zero,812f44 <__swbuf_r+0x11c>
  812e6c:	80c00417 	ldw	r3,16(r16)
  812e70:	18003426 	beq	r3,zero,812f44 <__swbuf_r+0x11c>
  812e74:	2088000c 	andi	r2,r4,8192
  812e78:	9c403fcc 	andi	r17,r19,255
  812e7c:	10001a26 	beq	r2,zero,812ee8 <__swbuf_r+0xc0>
  812e80:	80800017 	ldw	r2,0(r16)
  812e84:	81000517 	ldw	r4,20(r16)
  812e88:	10c7c83a 	sub	r3,r2,r3
  812e8c:	1900200e 	bge	r3,r4,812f10 <__swbuf_r+0xe8>
  812e90:	18c00044 	addi	r3,r3,1
  812e94:	81000217 	ldw	r4,8(r16)
  812e98:	11400044 	addi	r5,r2,1
  812e9c:	81400015 	stw	r5,0(r16)
  812ea0:	213fffc4 	addi	r4,r4,-1
  812ea4:	81000215 	stw	r4,8(r16)
  812ea8:	14c00005 	stb	r19,0(r2)
  812eac:	80800517 	ldw	r2,20(r16)
  812eb0:	10c01e26 	beq	r2,r3,812f2c <__swbuf_r+0x104>
  812eb4:	8080030b 	ldhu	r2,12(r16)
  812eb8:	1080004c 	andi	r2,r2,1
  812ebc:	10000226 	beq	r2,zero,812ec8 <__swbuf_r+0xa0>
  812ec0:	00800284 	movi	r2,10
  812ec4:	88801926 	beq	r17,r2,812f2c <__swbuf_r+0x104>
  812ec8:	8805883a 	mov	r2,r17
  812ecc:	dfc00417 	ldw	ra,16(sp)
  812ed0:	dcc00317 	ldw	r19,12(sp)
  812ed4:	dc800217 	ldw	r18,8(sp)
  812ed8:	dc400117 	ldw	r17,4(sp)
  812edc:	dc000017 	ldw	r16,0(sp)
  812ee0:	dec00504 	addi	sp,sp,20
  812ee4:	f800283a 	ret
  812ee8:	81401917 	ldw	r5,100(r16)
  812eec:	00b7ffc4 	movi	r2,-8193
  812ef0:	21080014 	ori	r4,r4,8192
  812ef4:	2884703a 	and	r2,r5,r2
  812ef8:	80801915 	stw	r2,100(r16)
  812efc:	80800017 	ldw	r2,0(r16)
  812f00:	8100030d 	sth	r4,12(r16)
  812f04:	81000517 	ldw	r4,20(r16)
  812f08:	10c7c83a 	sub	r3,r2,r3
  812f0c:	193fe016 	blt	r3,r4,812e90 <__alt_mem_onchip_mem+0xff80ae90>
  812f10:	800b883a 	mov	r5,r16
  812f14:	9009883a 	mov	r4,r18
  812f18:	080db1c0 	call	80db1c <_fflush_r>
  812f1c:	1000071e 	bne	r2,zero,812f3c <__swbuf_r+0x114>
  812f20:	80800017 	ldw	r2,0(r16)
  812f24:	00c00044 	movi	r3,1
  812f28:	003fda06 	br	812e94 <__alt_mem_onchip_mem+0xff80ae94>
  812f2c:	800b883a 	mov	r5,r16
  812f30:	9009883a 	mov	r4,r18
  812f34:	080db1c0 	call	80db1c <_fflush_r>
  812f38:	103fe326 	beq	r2,zero,812ec8 <__alt_mem_onchip_mem+0xff80aec8>
  812f3c:	00bfffc4 	movi	r2,-1
  812f40:	003fe206 	br	812ecc <__alt_mem_onchip_mem+0xff80aecc>
  812f44:	800b883a 	mov	r5,r16
  812f48:	9009883a 	mov	r4,r18
  812f4c:	080bf240 	call	80bf24 <__swsetup_r>
  812f50:	103ffa1e 	bne	r2,zero,812f3c <__alt_mem_onchip_mem+0xff80af3c>
  812f54:	8100030b 	ldhu	r4,12(r16)
  812f58:	80c00417 	ldw	r3,16(r16)
  812f5c:	003fc506 	br	812e74 <__alt_mem_onchip_mem+0xff80ae74>
  812f60:	080def80 	call	80def8 <__sinit>
  812f64:	003fbc06 	br	812e58 <__alt_mem_onchip_mem+0xff80ae58>

00812f68 <__swbuf>:
  812f68:	008020b4 	movhi	r2,130
  812f6c:	10aad304 	addi	r2,r2,-21684
  812f70:	280d883a 	mov	r6,r5
  812f74:	200b883a 	mov	r5,r4
  812f78:	11000017 	ldw	r4,0(r2)
  812f7c:	0812e281 	jmpi	812e28 <__swbuf_r>

00812f80 <_wcrtomb_r>:
  812f80:	defff604 	addi	sp,sp,-40
  812f84:	008020b4 	movhi	r2,130
  812f88:	dc800815 	stw	r18,32(sp)
  812f8c:	dc400715 	stw	r17,28(sp)
  812f90:	dc000615 	stw	r16,24(sp)
  812f94:	10aad704 	addi	r2,r2,-21668
  812f98:	dfc00915 	stw	ra,36(sp)
  812f9c:	2021883a 	mov	r16,r4
  812fa0:	3823883a 	mov	r17,r7
  812fa4:	14800017 	ldw	r18,0(r2)
  812fa8:	28001426 	beq	r5,zero,812ffc <_wcrtomb_r+0x7c>
  812fac:	d9400415 	stw	r5,16(sp)
  812fb0:	d9800515 	stw	r6,20(sp)
  812fb4:	080e5800 	call	80e580 <__locale_charset>
  812fb8:	d9800517 	ldw	r6,20(sp)
  812fbc:	d9400417 	ldw	r5,16(sp)
  812fc0:	100f883a 	mov	r7,r2
  812fc4:	dc400015 	stw	r17,0(sp)
  812fc8:	8009883a 	mov	r4,r16
  812fcc:	903ee83a 	callr	r18
  812fd0:	00ffffc4 	movi	r3,-1
  812fd4:	10c0031e 	bne	r2,r3,812fe4 <_wcrtomb_r+0x64>
  812fd8:	88000015 	stw	zero,0(r17)
  812fdc:	00c02284 	movi	r3,138
  812fe0:	80c00015 	stw	r3,0(r16)
  812fe4:	dfc00917 	ldw	ra,36(sp)
  812fe8:	dc800817 	ldw	r18,32(sp)
  812fec:	dc400717 	ldw	r17,28(sp)
  812ff0:	dc000617 	ldw	r16,24(sp)
  812ff4:	dec00a04 	addi	sp,sp,40
  812ff8:	f800283a 	ret
  812ffc:	080e5800 	call	80e580 <__locale_charset>
  813000:	100f883a 	mov	r7,r2
  813004:	dc400015 	stw	r17,0(sp)
  813008:	000d883a 	mov	r6,zero
  81300c:	d9400104 	addi	r5,sp,4
  813010:	8009883a 	mov	r4,r16
  813014:	903ee83a 	callr	r18
  813018:	003fed06 	br	812fd0 <__alt_mem_onchip_mem+0xff80afd0>

0081301c <wcrtomb>:
  81301c:	defff604 	addi	sp,sp,-40
  813020:	008020b4 	movhi	r2,130
  813024:	dc800615 	stw	r18,24(sp)
  813028:	dc400515 	stw	r17,20(sp)
  81302c:	10aad304 	addi	r2,r2,-21684
  813030:	dfc00915 	stw	ra,36(sp)
  813034:	dd000815 	stw	r20,32(sp)
  813038:	dcc00715 	stw	r19,28(sp)
  81303c:	dc000415 	stw	r16,16(sp)
  813040:	3025883a 	mov	r18,r6
  813044:	14400017 	ldw	r17,0(r2)
  813048:	20001926 	beq	r4,zero,8130b0 <wcrtomb+0x94>
  81304c:	008020b4 	movhi	r2,130
  813050:	10aad704 	addi	r2,r2,-21668
  813054:	15000017 	ldw	r20,0(r2)
  813058:	2021883a 	mov	r16,r4
  81305c:	2827883a 	mov	r19,r5
  813060:	080e5800 	call	80e580 <__locale_charset>
  813064:	100f883a 	mov	r7,r2
  813068:	dc800015 	stw	r18,0(sp)
  81306c:	980d883a 	mov	r6,r19
  813070:	800b883a 	mov	r5,r16
  813074:	8809883a 	mov	r4,r17
  813078:	a03ee83a 	callr	r20
  81307c:	00ffffc4 	movi	r3,-1
  813080:	10c0031e 	bne	r2,r3,813090 <wcrtomb+0x74>
  813084:	90000015 	stw	zero,0(r18)
  813088:	00c02284 	movi	r3,138
  81308c:	88c00015 	stw	r3,0(r17)
  813090:	dfc00917 	ldw	ra,36(sp)
  813094:	dd000817 	ldw	r20,32(sp)
  813098:	dcc00717 	ldw	r19,28(sp)
  81309c:	dc800617 	ldw	r18,24(sp)
  8130a0:	dc400517 	ldw	r17,20(sp)
  8130a4:	dc000417 	ldw	r16,16(sp)
  8130a8:	dec00a04 	addi	sp,sp,40
  8130ac:	f800283a 	ret
  8130b0:	008020b4 	movhi	r2,130
  8130b4:	10aad704 	addi	r2,r2,-21668
  8130b8:	14000017 	ldw	r16,0(r2)
  8130bc:	080e5800 	call	80e580 <__locale_charset>
  8130c0:	100f883a 	mov	r7,r2
  8130c4:	dc800015 	stw	r18,0(sp)
  8130c8:	000d883a 	mov	r6,zero
  8130cc:	d9400104 	addi	r5,sp,4
  8130d0:	8809883a 	mov	r4,r17
  8130d4:	803ee83a 	callr	r16
  8130d8:	003fe806 	br	81307c <__alt_mem_onchip_mem+0xff80b07c>

008130dc <__ascii_wctomb>:
  8130dc:	28000526 	beq	r5,zero,8130f4 <__ascii_wctomb+0x18>
  8130e0:	00803fc4 	movi	r2,255
  8130e4:	11800536 	bltu	r2,r6,8130fc <__ascii_wctomb+0x20>
  8130e8:	29800005 	stb	r6,0(r5)
  8130ec:	00800044 	movi	r2,1
  8130f0:	f800283a 	ret
  8130f4:	0005883a 	mov	r2,zero
  8130f8:	f800283a 	ret
  8130fc:	00802284 	movi	r2,138
  813100:	20800015 	stw	r2,0(r4)
  813104:	00bfffc4 	movi	r2,-1
  813108:	f800283a 	ret

0081310c <_wctomb_r>:
  81310c:	008020b4 	movhi	r2,130
  813110:	defff904 	addi	sp,sp,-28
  813114:	10aad704 	addi	r2,r2,-21668
  813118:	dfc00615 	stw	ra,24(sp)
  81311c:	dc400515 	stw	r17,20(sp)
  813120:	dc000415 	stw	r16,16(sp)
  813124:	3823883a 	mov	r17,r7
  813128:	14000017 	ldw	r16,0(r2)
  81312c:	d9000115 	stw	r4,4(sp)
  813130:	d9400215 	stw	r5,8(sp)
  813134:	d9800315 	stw	r6,12(sp)
  813138:	080e5800 	call	80e580 <__locale_charset>
  81313c:	d9800317 	ldw	r6,12(sp)
  813140:	d9400217 	ldw	r5,8(sp)
  813144:	d9000117 	ldw	r4,4(sp)
  813148:	100f883a 	mov	r7,r2
  81314c:	dc400015 	stw	r17,0(sp)
  813150:	803ee83a 	callr	r16
  813154:	dfc00617 	ldw	ra,24(sp)
  813158:	dc400517 	ldw	r17,20(sp)
  81315c:	dc000417 	ldw	r16,16(sp)
  813160:	dec00704 	addi	sp,sp,28
  813164:	f800283a 	ret

00813168 <__udivdi3>:
  813168:	defff504 	addi	sp,sp,-44
  81316c:	dcc00415 	stw	r19,16(sp)
  813170:	dc000115 	stw	r16,4(sp)
  813174:	dfc00a15 	stw	ra,40(sp)
  813178:	df000915 	stw	fp,36(sp)
  81317c:	ddc00815 	stw	r23,32(sp)
  813180:	dd800715 	stw	r22,28(sp)
  813184:	dd400615 	stw	r21,24(sp)
  813188:	dd000515 	stw	r20,20(sp)
  81318c:	dc800315 	stw	r18,12(sp)
  813190:	dc400215 	stw	r17,8(sp)
  813194:	2027883a 	mov	r19,r4
  813198:	2821883a 	mov	r16,r5
  81319c:	3800411e 	bne	r7,zero,8132a4 <__udivdi3+0x13c>
  8131a0:	3023883a 	mov	r17,r6
  8131a4:	2025883a 	mov	r18,r4
  8131a8:	2980522e 	bgeu	r5,r6,8132f4 <__udivdi3+0x18c>
  8131ac:	00bfffd4 	movui	r2,65535
  8131b0:	282d883a 	mov	r22,r5
  8131b4:	1180a836 	bltu	r2,r6,813458 <__udivdi3+0x2f0>
  8131b8:	00803fc4 	movi	r2,255
  8131bc:	1185803a 	cmpltu	r2,r2,r6
  8131c0:	100490fa 	slli	r2,r2,3
  8131c4:	3086d83a 	srl	r3,r6,r2
  8131c8:	010020b4 	movhi	r4,130
  8131cc:	21224b04 	addi	r4,r4,-30420
  8131d0:	20c7883a 	add	r3,r4,r3
  8131d4:	18c00003 	ldbu	r3,0(r3)
  8131d8:	1885883a 	add	r2,r3,r2
  8131dc:	00c00804 	movi	r3,32
  8131e0:	1887c83a 	sub	r3,r3,r2
  8131e4:	18000526 	beq	r3,zero,8131fc <__udivdi3+0x94>
  8131e8:	80e0983a 	sll	r16,r16,r3
  8131ec:	9884d83a 	srl	r2,r19,r2
  8131f0:	30e2983a 	sll	r17,r6,r3
  8131f4:	98e4983a 	sll	r18,r19,r3
  8131f8:	142cb03a 	or	r22,r2,r16
  8131fc:	882ad43a 	srli	r21,r17,16
  813200:	b009883a 	mov	r4,r22
  813204:	8d3fffcc 	andi	r20,r17,65535
  813208:	a80b883a 	mov	r5,r21
  81320c:	0813d740 	call	813d74 <__umodsi3>
  813210:	b009883a 	mov	r4,r22
  813214:	a80b883a 	mov	r5,r21
  813218:	1027883a 	mov	r19,r2
  81321c:	0813d100 	call	813d10 <__udivsi3>
  813220:	102d883a 	mov	r22,r2
  813224:	9826943a 	slli	r19,r19,16
  813228:	9004d43a 	srli	r2,r18,16
  81322c:	a5a1383a 	mul	r16,r20,r22
  813230:	14c4b03a 	or	r2,r2,r19
  813234:	1400052e 	bgeu	r2,r16,81324c <__udivdi3+0xe4>
  813238:	1445883a 	add	r2,r2,r17
  81323c:	b0ffffc4 	addi	r3,r22,-1
  813240:	14400136 	bltu	r2,r17,813248 <__udivdi3+0xe0>
  813244:	14012336 	bltu	r2,r16,8136d4 <__udivdi3+0x56c>
  813248:	182d883a 	mov	r22,r3
  81324c:	1421c83a 	sub	r16,r2,r16
  813250:	a80b883a 	mov	r5,r21
  813254:	8009883a 	mov	r4,r16
  813258:	0813d740 	call	813d74 <__umodsi3>
  81325c:	1027883a 	mov	r19,r2
  813260:	a80b883a 	mov	r5,r21
  813264:	8009883a 	mov	r4,r16
  813268:	0813d100 	call	813d10 <__udivsi3>
  81326c:	9826943a 	slli	r19,r19,16
  813270:	a0a9383a 	mul	r20,r20,r2
  813274:	94bfffcc 	andi	r18,r18,65535
  813278:	94e4b03a 	or	r18,r18,r19
  81327c:	9500052e 	bgeu	r18,r20,813294 <__udivdi3+0x12c>
  813280:	8ca5883a 	add	r18,r17,r18
  813284:	10ffffc4 	addi	r3,r2,-1
  813288:	9440f136 	bltu	r18,r17,813650 <__udivdi3+0x4e8>
  81328c:	9500f02e 	bgeu	r18,r20,813650 <__udivdi3+0x4e8>
  813290:	10bfff84 	addi	r2,r2,-2
  813294:	b00c943a 	slli	r6,r22,16
  813298:	0007883a 	mov	r3,zero
  81329c:	3084b03a 	or	r2,r6,r2
  8132a0:	00005906 	br	813408 <__udivdi3+0x2a0>
  8132a4:	29c05636 	bltu	r5,r7,813400 <__udivdi3+0x298>
  8132a8:	00bfffd4 	movui	r2,65535
  8132ac:	11c0622e 	bgeu	r2,r7,813438 <__udivdi3+0x2d0>
  8132b0:	00804034 	movhi	r2,256
  8132b4:	10bfffc4 	addi	r2,r2,-1
  8132b8:	11c0ee36 	bltu	r2,r7,813674 <__udivdi3+0x50c>
  8132bc:	00800404 	movi	r2,16
  8132c0:	3886d83a 	srl	r3,r7,r2
  8132c4:	010020b4 	movhi	r4,130
  8132c8:	21224b04 	addi	r4,r4,-30420
  8132cc:	20c7883a 	add	r3,r4,r3
  8132d0:	18c00003 	ldbu	r3,0(r3)
  8132d4:	05400804 	movi	r21,32
  8132d8:	1885883a 	add	r2,r3,r2
  8132dc:	a8abc83a 	sub	r21,r21,r2
  8132e0:	a800621e 	bne	r21,zero,81346c <__udivdi3+0x304>
  8132e4:	3c00e936 	bltu	r7,r16,81368c <__udivdi3+0x524>
  8132e8:	9985403a 	cmpgeu	r2,r19,r6
  8132ec:	0007883a 	mov	r3,zero
  8132f0:	00004506 	br	813408 <__udivdi3+0x2a0>
  8132f4:	3000041e 	bne	r6,zero,813308 <__udivdi3+0x1a0>
  8132f8:	000b883a 	mov	r5,zero
  8132fc:	01000044 	movi	r4,1
  813300:	0813d100 	call	813d10 <__udivsi3>
  813304:	1023883a 	mov	r17,r2
  813308:	00bfffd4 	movui	r2,65535
  81330c:	14404e2e 	bgeu	r2,r17,813448 <__udivdi3+0x2e0>
  813310:	00804034 	movhi	r2,256
  813314:	10bfffc4 	addi	r2,r2,-1
  813318:	1440d836 	bltu	r2,r17,81367c <__udivdi3+0x514>
  81331c:	00800404 	movi	r2,16
  813320:	8886d83a 	srl	r3,r17,r2
  813324:	010020b4 	movhi	r4,130
  813328:	21224b04 	addi	r4,r4,-30420
  81332c:	20c7883a 	add	r3,r4,r3
  813330:	18c00003 	ldbu	r3,0(r3)
  813334:	1885883a 	add	r2,r3,r2
  813338:	00c00804 	movi	r3,32
  81333c:	1887c83a 	sub	r3,r3,r2
  813340:	18008f1e 	bne	r3,zero,813580 <__udivdi3+0x418>
  813344:	882ad43a 	srli	r21,r17,16
  813348:	8461c83a 	sub	r16,r16,r17
  81334c:	8d3fffcc 	andi	r20,r17,65535
  813350:	00c00044 	movi	r3,1
  813354:	8009883a 	mov	r4,r16
  813358:	a80b883a 	mov	r5,r21
  81335c:	d8c00015 	stw	r3,0(sp)
  813360:	0813d740 	call	813d74 <__umodsi3>
  813364:	8009883a 	mov	r4,r16
  813368:	a80b883a 	mov	r5,r21
  81336c:	1027883a 	mov	r19,r2
  813370:	0813d100 	call	813d10 <__udivsi3>
  813374:	9826943a 	slli	r19,r19,16
  813378:	9008d43a 	srli	r4,r18,16
  81337c:	1521383a 	mul	r16,r2,r20
  813380:	102d883a 	mov	r22,r2
  813384:	24c8b03a 	or	r4,r4,r19
  813388:	d8c00017 	ldw	r3,0(sp)
  81338c:	2400052e 	bgeu	r4,r16,8133a4 <__udivdi3+0x23c>
  813390:	2449883a 	add	r4,r4,r17
  813394:	b0bfffc4 	addi	r2,r22,-1
  813398:	24400136 	bltu	r4,r17,8133a0 <__udivdi3+0x238>
  81339c:	2400ca36 	bltu	r4,r16,8136c8 <__udivdi3+0x560>
  8133a0:	102d883a 	mov	r22,r2
  8133a4:	2421c83a 	sub	r16,r4,r16
  8133a8:	a80b883a 	mov	r5,r21
  8133ac:	8009883a 	mov	r4,r16
  8133b0:	d8c00015 	stw	r3,0(sp)
  8133b4:	0813d740 	call	813d74 <__umodsi3>
  8133b8:	1027883a 	mov	r19,r2
  8133bc:	a80b883a 	mov	r5,r21
  8133c0:	8009883a 	mov	r4,r16
  8133c4:	0813d100 	call	813d10 <__udivsi3>
  8133c8:	9826943a 	slli	r19,r19,16
  8133cc:	1529383a 	mul	r20,r2,r20
  8133d0:	94bfffcc 	andi	r18,r18,65535
  8133d4:	94e4b03a 	or	r18,r18,r19
  8133d8:	d8c00017 	ldw	r3,0(sp)
  8133dc:	9500052e 	bgeu	r18,r20,8133f4 <__udivdi3+0x28c>
  8133e0:	8ca5883a 	add	r18,r17,r18
  8133e4:	113fffc4 	addi	r4,r2,-1
  8133e8:	94409736 	bltu	r18,r17,813648 <__udivdi3+0x4e0>
  8133ec:	9500962e 	bgeu	r18,r20,813648 <__udivdi3+0x4e0>
  8133f0:	10bfff84 	addi	r2,r2,-2
  8133f4:	b00c943a 	slli	r6,r22,16
  8133f8:	3084b03a 	or	r2,r6,r2
  8133fc:	00000206 	br	813408 <__udivdi3+0x2a0>
  813400:	0007883a 	mov	r3,zero
  813404:	0005883a 	mov	r2,zero
  813408:	dfc00a17 	ldw	ra,40(sp)
  81340c:	df000917 	ldw	fp,36(sp)
  813410:	ddc00817 	ldw	r23,32(sp)
  813414:	dd800717 	ldw	r22,28(sp)
  813418:	dd400617 	ldw	r21,24(sp)
  81341c:	dd000517 	ldw	r20,20(sp)
  813420:	dcc00417 	ldw	r19,16(sp)
  813424:	dc800317 	ldw	r18,12(sp)
  813428:	dc400217 	ldw	r17,8(sp)
  81342c:	dc000117 	ldw	r16,4(sp)
  813430:	dec00b04 	addi	sp,sp,44
  813434:	f800283a 	ret
  813438:	00803fc4 	movi	r2,255
  81343c:	11c5803a 	cmpltu	r2,r2,r7
  813440:	100490fa 	slli	r2,r2,3
  813444:	003f9e06 	br	8132c0 <__alt_mem_onchip_mem+0xff80b2c0>
  813448:	00803fc4 	movi	r2,255
  81344c:	1445803a 	cmpltu	r2,r2,r17
  813450:	100490fa 	slli	r2,r2,3
  813454:	003fb206 	br	813320 <__alt_mem_onchip_mem+0xff80b320>
  813458:	00804034 	movhi	r2,256
  81345c:	10bfffc4 	addi	r2,r2,-1
  813460:	11808836 	bltu	r2,r6,813684 <__udivdi3+0x51c>
  813464:	00800404 	movi	r2,16
  813468:	003f5606 	br	8131c4 <__alt_mem_onchip_mem+0xff80b1c4>
  81346c:	30aed83a 	srl	r23,r6,r2
  813470:	3d4e983a 	sll	r7,r7,r21
  813474:	80acd83a 	srl	r22,r16,r2
  813478:	9884d83a 	srl	r2,r19,r2
  81347c:	3deeb03a 	or	r23,r7,r23
  813480:	b824d43a 	srli	r18,r23,16
  813484:	8560983a 	sll	r16,r16,r21
  813488:	b009883a 	mov	r4,r22
  81348c:	900b883a 	mov	r5,r18
  813490:	3568983a 	sll	r20,r6,r21
  813494:	1420b03a 	or	r16,r2,r16
  813498:	0813d740 	call	813d74 <__umodsi3>
  81349c:	b009883a 	mov	r4,r22
  8134a0:	900b883a 	mov	r5,r18
  8134a4:	1023883a 	mov	r17,r2
  8134a8:	0813d100 	call	813d10 <__udivsi3>
  8134ac:	8808943a 	slli	r4,r17,16
  8134b0:	bf3fffcc 	andi	fp,r23,65535
  8134b4:	8006d43a 	srli	r3,r16,16
  8134b8:	e0a3383a 	mul	r17,fp,r2
  8134bc:	100d883a 	mov	r6,r2
  8134c0:	1906b03a 	or	r3,r3,r4
  8134c4:	1c40042e 	bgeu	r3,r17,8134d8 <__udivdi3+0x370>
  8134c8:	1dc7883a 	add	r3,r3,r23
  8134cc:	10bfffc4 	addi	r2,r2,-1
  8134d0:	1dc0752e 	bgeu	r3,r23,8136a8 <__udivdi3+0x540>
  8134d4:	100d883a 	mov	r6,r2
  8134d8:	1c63c83a 	sub	r17,r3,r17
  8134dc:	900b883a 	mov	r5,r18
  8134e0:	8809883a 	mov	r4,r17
  8134e4:	d9800015 	stw	r6,0(sp)
  8134e8:	0813d740 	call	813d74 <__umodsi3>
  8134ec:	102d883a 	mov	r22,r2
  8134f0:	8809883a 	mov	r4,r17
  8134f4:	900b883a 	mov	r5,r18
  8134f8:	0813d100 	call	813d10 <__udivsi3>
  8134fc:	b02c943a 	slli	r22,r22,16
  813500:	e089383a 	mul	r4,fp,r2
  813504:	843fffcc 	andi	r16,r16,65535
  813508:	85a0b03a 	or	r16,r16,r22
  81350c:	d9800017 	ldw	r6,0(sp)
  813510:	8100042e 	bgeu	r16,r4,813524 <__udivdi3+0x3bc>
  813514:	85e1883a 	add	r16,r16,r23
  813518:	10ffffc4 	addi	r3,r2,-1
  81351c:	85c05e2e 	bgeu	r16,r23,813698 <__udivdi3+0x530>
  813520:	1805883a 	mov	r2,r3
  813524:	300c943a 	slli	r6,r6,16
  813528:	a17fffcc 	andi	r5,r20,65535
  81352c:	a028d43a 	srli	r20,r20,16
  813530:	3084b03a 	or	r2,r6,r2
  813534:	10ffffcc 	andi	r3,r2,65535
  813538:	100cd43a 	srli	r6,r2,16
  81353c:	194f383a 	mul	r7,r3,r5
  813540:	1d07383a 	mul	r3,r3,r20
  813544:	314b383a 	mul	r5,r6,r5
  813548:	3810d43a 	srli	r8,r7,16
  81354c:	8121c83a 	sub	r16,r16,r4
  813550:	1947883a 	add	r3,r3,r5
  813554:	40c7883a 	add	r3,r8,r3
  813558:	350d383a 	mul	r6,r6,r20
  81355c:	1940022e 	bgeu	r3,r5,813568 <__udivdi3+0x400>
  813560:	01000074 	movhi	r4,1
  813564:	310d883a 	add	r6,r6,r4
  813568:	1828d43a 	srli	r20,r3,16
  81356c:	a18d883a 	add	r6,r20,r6
  813570:	81803e36 	bltu	r16,r6,81366c <__udivdi3+0x504>
  813574:	81803826 	beq	r16,r6,813658 <__udivdi3+0x4f0>
  813578:	0007883a 	mov	r3,zero
  81357c:	003fa206 	br	813408 <__alt_mem_onchip_mem+0xff80b408>
  813580:	88e2983a 	sll	r17,r17,r3
  813584:	80a8d83a 	srl	r20,r16,r2
  813588:	80e0983a 	sll	r16,r16,r3
  81358c:	882ad43a 	srli	r21,r17,16
  813590:	9884d83a 	srl	r2,r19,r2
  813594:	a009883a 	mov	r4,r20
  813598:	a80b883a 	mov	r5,r21
  81359c:	142eb03a 	or	r23,r2,r16
  8135a0:	98e4983a 	sll	r18,r19,r3
  8135a4:	0813d740 	call	813d74 <__umodsi3>
  8135a8:	a009883a 	mov	r4,r20
  8135ac:	a80b883a 	mov	r5,r21
  8135b0:	1021883a 	mov	r16,r2
  8135b4:	0813d100 	call	813d10 <__udivsi3>
  8135b8:	1039883a 	mov	fp,r2
  8135bc:	8d3fffcc 	andi	r20,r17,65535
  8135c0:	8020943a 	slli	r16,r16,16
  8135c4:	b804d43a 	srli	r2,r23,16
  8135c8:	a72d383a 	mul	r22,r20,fp
  8135cc:	1404b03a 	or	r2,r2,r16
  8135d0:	1580062e 	bgeu	r2,r22,8135ec <__udivdi3+0x484>
  8135d4:	1445883a 	add	r2,r2,r17
  8135d8:	e0ffffc4 	addi	r3,fp,-1
  8135dc:	14403836 	bltu	r2,r17,8136c0 <__udivdi3+0x558>
  8135e0:	1580372e 	bgeu	r2,r22,8136c0 <__udivdi3+0x558>
  8135e4:	e73fff84 	addi	fp,fp,-2
  8135e8:	1445883a 	add	r2,r2,r17
  8135ec:	15adc83a 	sub	r22,r2,r22
  8135f0:	a80b883a 	mov	r5,r21
  8135f4:	b009883a 	mov	r4,r22
  8135f8:	0813d740 	call	813d74 <__umodsi3>
  8135fc:	1027883a 	mov	r19,r2
  813600:	b009883a 	mov	r4,r22
  813604:	a80b883a 	mov	r5,r21
  813608:	0813d100 	call	813d10 <__udivsi3>
  81360c:	9826943a 	slli	r19,r19,16
  813610:	a0a1383a 	mul	r16,r20,r2
  813614:	b93fffcc 	andi	r4,r23,65535
  813618:	24c8b03a 	or	r4,r4,r19
  81361c:	2400062e 	bgeu	r4,r16,813638 <__udivdi3+0x4d0>
  813620:	2449883a 	add	r4,r4,r17
  813624:	10ffffc4 	addi	r3,r2,-1
  813628:	24402336 	bltu	r4,r17,8136b8 <__udivdi3+0x550>
  81362c:	2400222e 	bgeu	r4,r16,8136b8 <__udivdi3+0x550>
  813630:	10bfff84 	addi	r2,r2,-2
  813634:	2449883a 	add	r4,r4,r17
  813638:	e038943a 	slli	fp,fp,16
  81363c:	2421c83a 	sub	r16,r4,r16
  813640:	e086b03a 	or	r3,fp,r2
  813644:	003f4306 	br	813354 <__alt_mem_onchip_mem+0xff80b354>
  813648:	2005883a 	mov	r2,r4
  81364c:	003f6906 	br	8133f4 <__alt_mem_onchip_mem+0xff80b3f4>
  813650:	1805883a 	mov	r2,r3
  813654:	003f0f06 	br	813294 <__alt_mem_onchip_mem+0xff80b294>
  813658:	1806943a 	slli	r3,r3,16
  81365c:	9d66983a 	sll	r19,r19,r21
  813660:	39ffffcc 	andi	r7,r7,65535
  813664:	19c7883a 	add	r3,r3,r7
  813668:	98ffc32e 	bgeu	r19,r3,813578 <__alt_mem_onchip_mem+0xff80b578>
  81366c:	10bfffc4 	addi	r2,r2,-1
  813670:	003fc106 	br	813578 <__alt_mem_onchip_mem+0xff80b578>
  813674:	00800604 	movi	r2,24
  813678:	003f1106 	br	8132c0 <__alt_mem_onchip_mem+0xff80b2c0>
  81367c:	00800604 	movi	r2,24
  813680:	003f2706 	br	813320 <__alt_mem_onchip_mem+0xff80b320>
  813684:	00800604 	movi	r2,24
  813688:	003ece06 	br	8131c4 <__alt_mem_onchip_mem+0xff80b1c4>
  81368c:	0007883a 	mov	r3,zero
  813690:	00800044 	movi	r2,1
  813694:	003f5c06 	br	813408 <__alt_mem_onchip_mem+0xff80b408>
  813698:	813fa12e 	bgeu	r16,r4,813520 <__alt_mem_onchip_mem+0xff80b520>
  81369c:	10bfff84 	addi	r2,r2,-2
  8136a0:	85e1883a 	add	r16,r16,r23
  8136a4:	003f9f06 	br	813524 <__alt_mem_onchip_mem+0xff80b524>
  8136a8:	1c7f8a2e 	bgeu	r3,r17,8134d4 <__alt_mem_onchip_mem+0xff80b4d4>
  8136ac:	31bfff84 	addi	r6,r6,-2
  8136b0:	1dc7883a 	add	r3,r3,r23
  8136b4:	003f8806 	br	8134d8 <__alt_mem_onchip_mem+0xff80b4d8>
  8136b8:	1805883a 	mov	r2,r3
  8136bc:	003fde06 	br	813638 <__alt_mem_onchip_mem+0xff80b638>
  8136c0:	1839883a 	mov	fp,r3
  8136c4:	003fc906 	br	8135ec <__alt_mem_onchip_mem+0xff80b5ec>
  8136c8:	b5bfff84 	addi	r22,r22,-2
  8136cc:	2449883a 	add	r4,r4,r17
  8136d0:	003f3406 	br	8133a4 <__alt_mem_onchip_mem+0xff80b3a4>
  8136d4:	b5bfff84 	addi	r22,r22,-2
  8136d8:	1445883a 	add	r2,r2,r17
  8136dc:	003edb06 	br	81324c <__alt_mem_onchip_mem+0xff80b24c>

008136e0 <__umoddi3>:
  8136e0:	defff404 	addi	sp,sp,-48
  8136e4:	df000a15 	stw	fp,40(sp)
  8136e8:	dc400315 	stw	r17,12(sp)
  8136ec:	dc000215 	stw	r16,8(sp)
  8136f0:	dfc00b15 	stw	ra,44(sp)
  8136f4:	ddc00915 	stw	r23,36(sp)
  8136f8:	dd800815 	stw	r22,32(sp)
  8136fc:	dd400715 	stw	r21,28(sp)
  813700:	dd000615 	stw	r20,24(sp)
  813704:	dcc00515 	stw	r19,20(sp)
  813708:	dc800415 	stw	r18,16(sp)
  81370c:	2021883a 	mov	r16,r4
  813710:	2823883a 	mov	r17,r5
  813714:	2839883a 	mov	fp,r5
  813718:	38003c1e 	bne	r7,zero,81380c <__umoddi3+0x12c>
  81371c:	3027883a 	mov	r19,r6
  813720:	2029883a 	mov	r20,r4
  813724:	2980512e 	bgeu	r5,r6,81386c <__umoddi3+0x18c>
  813728:	00bfffd4 	movui	r2,65535
  81372c:	11809a36 	bltu	r2,r6,813998 <__umoddi3+0x2b8>
  813730:	01003fc4 	movi	r4,255
  813734:	2189803a 	cmpltu	r4,r4,r6
  813738:	200890fa 	slli	r4,r4,3
  81373c:	3104d83a 	srl	r2,r6,r4
  813740:	00c020b4 	movhi	r3,130
  813744:	18e24b04 	addi	r3,r3,-30420
  813748:	1885883a 	add	r2,r3,r2
  81374c:	10c00003 	ldbu	r3,0(r2)
  813750:	00800804 	movi	r2,32
  813754:	1909883a 	add	r4,r3,r4
  813758:	1125c83a 	sub	r18,r2,r4
  81375c:	90000526 	beq	r18,zero,813774 <__umoddi3+0x94>
  813760:	8ca2983a 	sll	r17,r17,r18
  813764:	8108d83a 	srl	r4,r16,r4
  813768:	34a6983a 	sll	r19,r6,r18
  81376c:	84a8983a 	sll	r20,r16,r18
  813770:	2478b03a 	or	fp,r4,r17
  813774:	982ed43a 	srli	r23,r19,16
  813778:	e009883a 	mov	r4,fp
  81377c:	9dbfffcc 	andi	r22,r19,65535
  813780:	b80b883a 	mov	r5,r23
  813784:	0813d740 	call	813d74 <__umodsi3>
  813788:	e009883a 	mov	r4,fp
  81378c:	b80b883a 	mov	r5,r23
  813790:	102b883a 	mov	r21,r2
  813794:	0813d100 	call	813d10 <__udivsi3>
  813798:	a806943a 	slli	r3,r21,16
  81379c:	a008d43a 	srli	r4,r20,16
  8137a0:	b085383a 	mul	r2,r22,r2
  8137a4:	20c8b03a 	or	r4,r4,r3
  8137a8:	2080032e 	bgeu	r4,r2,8137b8 <__umoddi3+0xd8>
  8137ac:	24c9883a 	add	r4,r4,r19
  8137b0:	24c00136 	bltu	r4,r19,8137b8 <__umoddi3+0xd8>
  8137b4:	20811036 	bltu	r4,r2,813bf8 <__umoddi3+0x518>
  8137b8:	20abc83a 	sub	r21,r4,r2
  8137bc:	b80b883a 	mov	r5,r23
  8137c0:	a809883a 	mov	r4,r21
  8137c4:	0813d740 	call	813d74 <__umodsi3>
  8137c8:	1023883a 	mov	r17,r2
  8137cc:	b80b883a 	mov	r5,r23
  8137d0:	a809883a 	mov	r4,r21
  8137d4:	0813d100 	call	813d10 <__udivsi3>
  8137d8:	8822943a 	slli	r17,r17,16
  8137dc:	b085383a 	mul	r2,r22,r2
  8137e0:	a0ffffcc 	andi	r3,r20,65535
  8137e4:	1c46b03a 	or	r3,r3,r17
  8137e8:	1880042e 	bgeu	r3,r2,8137fc <__umoddi3+0x11c>
  8137ec:	1cc7883a 	add	r3,r3,r19
  8137f0:	1cc00236 	bltu	r3,r19,8137fc <__umoddi3+0x11c>
  8137f4:	1880012e 	bgeu	r3,r2,8137fc <__umoddi3+0x11c>
  8137f8:	1cc7883a 	add	r3,r3,r19
  8137fc:	1885c83a 	sub	r2,r3,r2
  813800:	1484d83a 	srl	r2,r2,r18
  813804:	0007883a 	mov	r3,zero
  813808:	00004f06 	br	813948 <__umoddi3+0x268>
  81380c:	29c04c36 	bltu	r5,r7,813940 <__umoddi3+0x260>
  813810:	00bfffd4 	movui	r2,65535
  813814:	11c0582e 	bgeu	r2,r7,813978 <__umoddi3+0x298>
  813818:	00804034 	movhi	r2,256
  81381c:	10bfffc4 	addi	r2,r2,-1
  813820:	11c0e736 	bltu	r2,r7,813bc0 <__umoddi3+0x4e0>
  813824:	01000404 	movi	r4,16
  813828:	3904d83a 	srl	r2,r7,r4
  81382c:	00c020b4 	movhi	r3,130
  813830:	18e24b04 	addi	r3,r3,-30420
  813834:	1885883a 	add	r2,r3,r2
  813838:	14c00003 	ldbu	r19,0(r2)
  81383c:	00c00804 	movi	r3,32
  813840:	9927883a 	add	r19,r19,r4
  813844:	1ce9c83a 	sub	r20,r3,r19
  813848:	a000581e 	bne	r20,zero,8139ac <__umoddi3+0x2cc>
  81384c:	3c400136 	bltu	r7,r17,813854 <__umoddi3+0x174>
  813850:	8180eb36 	bltu	r16,r6,813c00 <__umoddi3+0x520>
  813854:	8185c83a 	sub	r2,r16,r6
  813858:	89e3c83a 	sub	r17,r17,r7
  81385c:	8089803a 	cmpltu	r4,r16,r2
  813860:	8939c83a 	sub	fp,r17,r4
  813864:	e007883a 	mov	r3,fp
  813868:	00003706 	br	813948 <__umoddi3+0x268>
  81386c:	3000041e 	bne	r6,zero,813880 <__umoddi3+0x1a0>
  813870:	000b883a 	mov	r5,zero
  813874:	01000044 	movi	r4,1
  813878:	0813d100 	call	813d10 <__udivsi3>
  81387c:	1027883a 	mov	r19,r2
  813880:	00bfffd4 	movui	r2,65535
  813884:	14c0402e 	bgeu	r2,r19,813988 <__umoddi3+0x2a8>
  813888:	00804034 	movhi	r2,256
  81388c:	10bfffc4 	addi	r2,r2,-1
  813890:	14c0cd36 	bltu	r2,r19,813bc8 <__umoddi3+0x4e8>
  813894:	00800404 	movi	r2,16
  813898:	9886d83a 	srl	r3,r19,r2
  81389c:	010020b4 	movhi	r4,130
  8138a0:	21224b04 	addi	r4,r4,-30420
  8138a4:	20c7883a 	add	r3,r4,r3
  8138a8:	18c00003 	ldbu	r3,0(r3)
  8138ac:	1887883a 	add	r3,r3,r2
  8138b0:	00800804 	movi	r2,32
  8138b4:	10e5c83a 	sub	r18,r2,r3
  8138b8:	9000901e 	bne	r18,zero,813afc <__umoddi3+0x41c>
  8138bc:	982cd43a 	srli	r22,r19,16
  8138c0:	8ce3c83a 	sub	r17,r17,r19
  8138c4:	9d7fffcc 	andi	r21,r19,65535
  8138c8:	b00b883a 	mov	r5,r22
  8138cc:	8809883a 	mov	r4,r17
  8138d0:	0813d740 	call	813d74 <__umodsi3>
  8138d4:	8809883a 	mov	r4,r17
  8138d8:	b00b883a 	mov	r5,r22
  8138dc:	1021883a 	mov	r16,r2
  8138e0:	0813d100 	call	813d10 <__udivsi3>
  8138e4:	8006943a 	slli	r3,r16,16
  8138e8:	a008d43a 	srli	r4,r20,16
  8138ec:	1545383a 	mul	r2,r2,r21
  8138f0:	20c8b03a 	or	r4,r4,r3
  8138f4:	2080042e 	bgeu	r4,r2,813908 <__umoddi3+0x228>
  8138f8:	24c9883a 	add	r4,r4,r19
  8138fc:	24c00236 	bltu	r4,r19,813908 <__umoddi3+0x228>
  813900:	2080012e 	bgeu	r4,r2,813908 <__umoddi3+0x228>
  813904:	24c9883a 	add	r4,r4,r19
  813908:	20a1c83a 	sub	r16,r4,r2
  81390c:	b00b883a 	mov	r5,r22
  813910:	8009883a 	mov	r4,r16
  813914:	0813d740 	call	813d74 <__umodsi3>
  813918:	1023883a 	mov	r17,r2
  81391c:	b00b883a 	mov	r5,r22
  813920:	8009883a 	mov	r4,r16
  813924:	0813d100 	call	813d10 <__udivsi3>
  813928:	8822943a 	slli	r17,r17,16
  81392c:	1545383a 	mul	r2,r2,r21
  813930:	a53fffcc 	andi	r20,r20,65535
  813934:	a446b03a 	or	r3,r20,r17
  813938:	18bfb02e 	bgeu	r3,r2,8137fc <__alt_mem_onchip_mem+0xff80b7fc>
  81393c:	003fab06 	br	8137ec <__alt_mem_onchip_mem+0xff80b7ec>
  813940:	2005883a 	mov	r2,r4
  813944:	2807883a 	mov	r3,r5
  813948:	dfc00b17 	ldw	ra,44(sp)
  81394c:	df000a17 	ldw	fp,40(sp)
  813950:	ddc00917 	ldw	r23,36(sp)
  813954:	dd800817 	ldw	r22,32(sp)
  813958:	dd400717 	ldw	r21,28(sp)
  81395c:	dd000617 	ldw	r20,24(sp)
  813960:	dcc00517 	ldw	r19,20(sp)
  813964:	dc800417 	ldw	r18,16(sp)
  813968:	dc400317 	ldw	r17,12(sp)
  81396c:	dc000217 	ldw	r16,8(sp)
  813970:	dec00c04 	addi	sp,sp,48
  813974:	f800283a 	ret
  813978:	04c03fc4 	movi	r19,255
  81397c:	99c9803a 	cmpltu	r4,r19,r7
  813980:	200890fa 	slli	r4,r4,3
  813984:	003fa806 	br	813828 <__alt_mem_onchip_mem+0xff80b828>
  813988:	00803fc4 	movi	r2,255
  81398c:	14c5803a 	cmpltu	r2,r2,r19
  813990:	100490fa 	slli	r2,r2,3
  813994:	003fc006 	br	813898 <__alt_mem_onchip_mem+0xff80b898>
  813998:	00804034 	movhi	r2,256
  81399c:	10bfffc4 	addi	r2,r2,-1
  8139a0:	11808b36 	bltu	r2,r6,813bd0 <__umoddi3+0x4f0>
  8139a4:	01000404 	movi	r4,16
  8139a8:	003f6406 	br	81373c <__alt_mem_onchip_mem+0xff80b73c>
  8139ac:	34c4d83a 	srl	r2,r6,r19
  8139b0:	3d0e983a 	sll	r7,r7,r20
  8139b4:	8cf8d83a 	srl	fp,r17,r19
  8139b8:	8d10983a 	sll	r8,r17,r20
  8139bc:	38aab03a 	or	r21,r7,r2
  8139c0:	a82cd43a 	srli	r22,r21,16
  8139c4:	84e2d83a 	srl	r17,r16,r19
  8139c8:	e009883a 	mov	r4,fp
  8139cc:	b00b883a 	mov	r5,r22
  8139d0:	8a22b03a 	or	r17,r17,r8
  8139d4:	3524983a 	sll	r18,r6,r20
  8139d8:	0813d740 	call	813d74 <__umodsi3>
  8139dc:	e009883a 	mov	r4,fp
  8139e0:	b00b883a 	mov	r5,r22
  8139e4:	102f883a 	mov	r23,r2
  8139e8:	0813d100 	call	813d10 <__udivsi3>
  8139ec:	100d883a 	mov	r6,r2
  8139f0:	b808943a 	slli	r4,r23,16
  8139f4:	aa3fffcc 	andi	r8,r21,65535
  8139f8:	8804d43a 	srli	r2,r17,16
  8139fc:	41af383a 	mul	r23,r8,r6
  813a00:	8520983a 	sll	r16,r16,r20
  813a04:	1104b03a 	or	r2,r2,r4
  813a08:	15c0042e 	bgeu	r2,r23,813a1c <__umoddi3+0x33c>
  813a0c:	1545883a 	add	r2,r2,r21
  813a10:	30ffffc4 	addi	r3,r6,-1
  813a14:	1540742e 	bgeu	r2,r21,813be8 <__umoddi3+0x508>
  813a18:	180d883a 	mov	r6,r3
  813a1c:	15efc83a 	sub	r23,r2,r23
  813a20:	b00b883a 	mov	r5,r22
  813a24:	b809883a 	mov	r4,r23
  813a28:	d9800115 	stw	r6,4(sp)
  813a2c:	da000015 	stw	r8,0(sp)
  813a30:	0813d740 	call	813d74 <__umodsi3>
  813a34:	b00b883a 	mov	r5,r22
  813a38:	b809883a 	mov	r4,r23
  813a3c:	1039883a 	mov	fp,r2
  813a40:	0813d100 	call	813d10 <__udivsi3>
  813a44:	da000017 	ldw	r8,0(sp)
  813a48:	e038943a 	slli	fp,fp,16
  813a4c:	100b883a 	mov	r5,r2
  813a50:	4089383a 	mul	r4,r8,r2
  813a54:	8a3fffcc 	andi	r8,r17,65535
  813a58:	4710b03a 	or	r8,r8,fp
  813a5c:	d9800117 	ldw	r6,4(sp)
  813a60:	4100042e 	bgeu	r8,r4,813a74 <__umoddi3+0x394>
  813a64:	4551883a 	add	r8,r8,r21
  813a68:	10bfffc4 	addi	r2,r2,-1
  813a6c:	45405a2e 	bgeu	r8,r21,813bd8 <__umoddi3+0x4f8>
  813a70:	100b883a 	mov	r5,r2
  813a74:	300c943a 	slli	r6,r6,16
  813a78:	91ffffcc 	andi	r7,r18,65535
  813a7c:	9004d43a 	srli	r2,r18,16
  813a80:	314cb03a 	or	r6,r6,r5
  813a84:	317fffcc 	andi	r5,r6,65535
  813a88:	300cd43a 	srli	r6,r6,16
  813a8c:	29d3383a 	mul	r9,r5,r7
  813a90:	288b383a 	mul	r5,r5,r2
  813a94:	31cf383a 	mul	r7,r6,r7
  813a98:	4806d43a 	srli	r3,r9,16
  813a9c:	4111c83a 	sub	r8,r8,r4
  813aa0:	29cb883a 	add	r5,r5,r7
  813aa4:	194b883a 	add	r5,r3,r5
  813aa8:	3085383a 	mul	r2,r6,r2
  813aac:	29c0022e 	bgeu	r5,r7,813ab8 <__umoddi3+0x3d8>
  813ab0:	00c00074 	movhi	r3,1
  813ab4:	10c5883a 	add	r2,r2,r3
  813ab8:	2808d43a 	srli	r4,r5,16
  813abc:	280a943a 	slli	r5,r5,16
  813ac0:	4a7fffcc 	andi	r9,r9,65535
  813ac4:	2085883a 	add	r2,r4,r2
  813ac8:	2a4b883a 	add	r5,r5,r9
  813acc:	40803636 	bltu	r8,r2,813ba8 <__umoddi3+0x4c8>
  813ad0:	40804d26 	beq	r8,r2,813c08 <__umoddi3+0x528>
  813ad4:	4089c83a 	sub	r4,r8,r2
  813ad8:	280f883a 	mov	r7,r5
  813adc:	81cfc83a 	sub	r7,r16,r7
  813ae0:	81c7803a 	cmpltu	r3,r16,r7
  813ae4:	20c7c83a 	sub	r3,r4,r3
  813ae8:	1cc4983a 	sll	r2,r3,r19
  813aec:	3d0ed83a 	srl	r7,r7,r20
  813af0:	1d06d83a 	srl	r3,r3,r20
  813af4:	11c4b03a 	or	r2,r2,r7
  813af8:	003f9306 	br	813948 <__alt_mem_onchip_mem+0xff80b948>
  813afc:	9ca6983a 	sll	r19,r19,r18
  813b00:	88e8d83a 	srl	r20,r17,r3
  813b04:	80c4d83a 	srl	r2,r16,r3
  813b08:	982cd43a 	srli	r22,r19,16
  813b0c:	8ca2983a 	sll	r17,r17,r18
  813b10:	a009883a 	mov	r4,r20
  813b14:	b00b883a 	mov	r5,r22
  813b18:	1478b03a 	or	fp,r2,r17
  813b1c:	0813d740 	call	813d74 <__umodsi3>
  813b20:	a009883a 	mov	r4,r20
  813b24:	b00b883a 	mov	r5,r22
  813b28:	1023883a 	mov	r17,r2
  813b2c:	0813d100 	call	813d10 <__udivsi3>
  813b30:	9d7fffcc 	andi	r21,r19,65535
  813b34:	880a943a 	slli	r5,r17,16
  813b38:	e008d43a 	srli	r4,fp,16
  813b3c:	a885383a 	mul	r2,r21,r2
  813b40:	84a8983a 	sll	r20,r16,r18
  813b44:	2148b03a 	or	r4,r4,r5
  813b48:	2080042e 	bgeu	r4,r2,813b5c <__umoddi3+0x47c>
  813b4c:	24c9883a 	add	r4,r4,r19
  813b50:	24c00236 	bltu	r4,r19,813b5c <__umoddi3+0x47c>
  813b54:	2080012e 	bgeu	r4,r2,813b5c <__umoddi3+0x47c>
  813b58:	24c9883a 	add	r4,r4,r19
  813b5c:	20a3c83a 	sub	r17,r4,r2
  813b60:	b00b883a 	mov	r5,r22
  813b64:	8809883a 	mov	r4,r17
  813b68:	0813d740 	call	813d74 <__umodsi3>
  813b6c:	102f883a 	mov	r23,r2
  813b70:	8809883a 	mov	r4,r17
  813b74:	b00b883a 	mov	r5,r22
  813b78:	0813d100 	call	813d10 <__udivsi3>
  813b7c:	b82e943a 	slli	r23,r23,16
  813b80:	a885383a 	mul	r2,r21,r2
  813b84:	e13fffcc 	andi	r4,fp,65535
  813b88:	25c8b03a 	or	r4,r4,r23
  813b8c:	2080042e 	bgeu	r4,r2,813ba0 <__umoddi3+0x4c0>
  813b90:	24c9883a 	add	r4,r4,r19
  813b94:	24c00236 	bltu	r4,r19,813ba0 <__umoddi3+0x4c0>
  813b98:	2080012e 	bgeu	r4,r2,813ba0 <__umoddi3+0x4c0>
  813b9c:	24c9883a 	add	r4,r4,r19
  813ba0:	20a3c83a 	sub	r17,r4,r2
  813ba4:	003f4806 	br	8138c8 <__alt_mem_onchip_mem+0xff80b8c8>
  813ba8:	2c8fc83a 	sub	r7,r5,r18
  813bac:	1545c83a 	sub	r2,r2,r21
  813bb0:	29cb803a 	cmpltu	r5,r5,r7
  813bb4:	1145c83a 	sub	r2,r2,r5
  813bb8:	4089c83a 	sub	r4,r8,r2
  813bbc:	003fc706 	br	813adc <__alt_mem_onchip_mem+0xff80badc>
  813bc0:	01000604 	movi	r4,24
  813bc4:	003f1806 	br	813828 <__alt_mem_onchip_mem+0xff80b828>
  813bc8:	00800604 	movi	r2,24
  813bcc:	003f3206 	br	813898 <__alt_mem_onchip_mem+0xff80b898>
  813bd0:	01000604 	movi	r4,24
  813bd4:	003ed906 	br	81373c <__alt_mem_onchip_mem+0xff80b73c>
  813bd8:	413fa52e 	bgeu	r8,r4,813a70 <__alt_mem_onchip_mem+0xff80ba70>
  813bdc:	297fff84 	addi	r5,r5,-2
  813be0:	4551883a 	add	r8,r8,r21
  813be4:	003fa306 	br	813a74 <__alt_mem_onchip_mem+0xff80ba74>
  813be8:	15ff8b2e 	bgeu	r2,r23,813a18 <__alt_mem_onchip_mem+0xff80ba18>
  813bec:	31bfff84 	addi	r6,r6,-2
  813bf0:	1545883a 	add	r2,r2,r21
  813bf4:	003f8906 	br	813a1c <__alt_mem_onchip_mem+0xff80ba1c>
  813bf8:	24c9883a 	add	r4,r4,r19
  813bfc:	003eee06 	br	8137b8 <__alt_mem_onchip_mem+0xff80b7b8>
  813c00:	8005883a 	mov	r2,r16
  813c04:	003f1706 	br	813864 <__alt_mem_onchip_mem+0xff80b864>
  813c08:	817fe736 	bltu	r16,r5,813ba8 <__alt_mem_onchip_mem+0xff80bba8>
  813c0c:	280f883a 	mov	r7,r5
  813c10:	0009883a 	mov	r4,zero
  813c14:	003fb106 	br	813adc <__alt_mem_onchip_mem+0xff80badc>

00813c18 <__divsi3>:
  813c18:	20001b16 	blt	r4,zero,813c88 <__divsi3+0x70>
  813c1c:	000f883a 	mov	r7,zero
  813c20:	28001616 	blt	r5,zero,813c7c <__divsi3+0x64>
  813c24:	200d883a 	mov	r6,r4
  813c28:	29001a2e 	bgeu	r5,r4,813c94 <__divsi3+0x7c>
  813c2c:	00800804 	movi	r2,32
  813c30:	00c00044 	movi	r3,1
  813c34:	00000106 	br	813c3c <__divsi3+0x24>
  813c38:	10000d26 	beq	r2,zero,813c70 <__divsi3+0x58>
  813c3c:	294b883a 	add	r5,r5,r5
  813c40:	10bfffc4 	addi	r2,r2,-1
  813c44:	18c7883a 	add	r3,r3,r3
  813c48:	293ffb36 	bltu	r5,r4,813c38 <__alt_mem_onchip_mem+0xff80bc38>
  813c4c:	0005883a 	mov	r2,zero
  813c50:	18000726 	beq	r3,zero,813c70 <__divsi3+0x58>
  813c54:	0005883a 	mov	r2,zero
  813c58:	31400236 	bltu	r6,r5,813c64 <__divsi3+0x4c>
  813c5c:	314dc83a 	sub	r6,r6,r5
  813c60:	10c4b03a 	or	r2,r2,r3
  813c64:	1806d07a 	srli	r3,r3,1
  813c68:	280ad07a 	srli	r5,r5,1
  813c6c:	183ffa1e 	bne	r3,zero,813c58 <__alt_mem_onchip_mem+0xff80bc58>
  813c70:	38000126 	beq	r7,zero,813c78 <__divsi3+0x60>
  813c74:	0085c83a 	sub	r2,zero,r2
  813c78:	f800283a 	ret
  813c7c:	014bc83a 	sub	r5,zero,r5
  813c80:	39c0005c 	xori	r7,r7,1
  813c84:	003fe706 	br	813c24 <__alt_mem_onchip_mem+0xff80bc24>
  813c88:	0109c83a 	sub	r4,zero,r4
  813c8c:	01c00044 	movi	r7,1
  813c90:	003fe306 	br	813c20 <__alt_mem_onchip_mem+0xff80bc20>
  813c94:	00c00044 	movi	r3,1
  813c98:	003fee06 	br	813c54 <__alt_mem_onchip_mem+0xff80bc54>

00813c9c <__modsi3>:
  813c9c:	20001716 	blt	r4,zero,813cfc <__modsi3+0x60>
  813ca0:	000f883a 	mov	r7,zero
  813ca4:	2005883a 	mov	r2,r4
  813ca8:	28001216 	blt	r5,zero,813cf4 <__modsi3+0x58>
  813cac:	2900162e 	bgeu	r5,r4,813d08 <__modsi3+0x6c>
  813cb0:	01800804 	movi	r6,32
  813cb4:	00c00044 	movi	r3,1
  813cb8:	00000106 	br	813cc0 <__modsi3+0x24>
  813cbc:	30000a26 	beq	r6,zero,813ce8 <__modsi3+0x4c>
  813cc0:	294b883a 	add	r5,r5,r5
  813cc4:	31bfffc4 	addi	r6,r6,-1
  813cc8:	18c7883a 	add	r3,r3,r3
  813ccc:	293ffb36 	bltu	r5,r4,813cbc <__alt_mem_onchip_mem+0xff80bcbc>
  813cd0:	18000526 	beq	r3,zero,813ce8 <__modsi3+0x4c>
  813cd4:	1806d07a 	srli	r3,r3,1
  813cd8:	11400136 	bltu	r2,r5,813ce0 <__modsi3+0x44>
  813cdc:	1145c83a 	sub	r2,r2,r5
  813ce0:	280ad07a 	srli	r5,r5,1
  813ce4:	183ffb1e 	bne	r3,zero,813cd4 <__alt_mem_onchip_mem+0xff80bcd4>
  813ce8:	38000126 	beq	r7,zero,813cf0 <__modsi3+0x54>
  813cec:	0085c83a 	sub	r2,zero,r2
  813cf0:	f800283a 	ret
  813cf4:	014bc83a 	sub	r5,zero,r5
  813cf8:	003fec06 	br	813cac <__alt_mem_onchip_mem+0xff80bcac>
  813cfc:	0109c83a 	sub	r4,zero,r4
  813d00:	01c00044 	movi	r7,1
  813d04:	003fe706 	br	813ca4 <__alt_mem_onchip_mem+0xff80bca4>
  813d08:	00c00044 	movi	r3,1
  813d0c:	003ff106 	br	813cd4 <__alt_mem_onchip_mem+0xff80bcd4>

00813d10 <__udivsi3>:
  813d10:	200d883a 	mov	r6,r4
  813d14:	2900152e 	bgeu	r5,r4,813d6c <__udivsi3+0x5c>
  813d18:	28001416 	blt	r5,zero,813d6c <__udivsi3+0x5c>
  813d1c:	00800804 	movi	r2,32
  813d20:	00c00044 	movi	r3,1
  813d24:	00000206 	br	813d30 <__udivsi3+0x20>
  813d28:	10000e26 	beq	r2,zero,813d64 <__udivsi3+0x54>
  813d2c:	28000516 	blt	r5,zero,813d44 <__udivsi3+0x34>
  813d30:	294b883a 	add	r5,r5,r5
  813d34:	10bfffc4 	addi	r2,r2,-1
  813d38:	18c7883a 	add	r3,r3,r3
  813d3c:	293ffa36 	bltu	r5,r4,813d28 <__alt_mem_onchip_mem+0xff80bd28>
  813d40:	18000826 	beq	r3,zero,813d64 <__udivsi3+0x54>
  813d44:	0005883a 	mov	r2,zero
  813d48:	31400236 	bltu	r6,r5,813d54 <__udivsi3+0x44>
  813d4c:	314dc83a 	sub	r6,r6,r5
  813d50:	10c4b03a 	or	r2,r2,r3
  813d54:	1806d07a 	srli	r3,r3,1
  813d58:	280ad07a 	srli	r5,r5,1
  813d5c:	183ffa1e 	bne	r3,zero,813d48 <__alt_mem_onchip_mem+0xff80bd48>
  813d60:	f800283a 	ret
  813d64:	0005883a 	mov	r2,zero
  813d68:	f800283a 	ret
  813d6c:	00c00044 	movi	r3,1
  813d70:	003ff406 	br	813d44 <__alt_mem_onchip_mem+0xff80bd44>

00813d74 <__umodsi3>:
  813d74:	2005883a 	mov	r2,r4
  813d78:	2900122e 	bgeu	r5,r4,813dc4 <__umodsi3+0x50>
  813d7c:	28001116 	blt	r5,zero,813dc4 <__umodsi3+0x50>
  813d80:	01800804 	movi	r6,32
  813d84:	00c00044 	movi	r3,1
  813d88:	00000206 	br	813d94 <__umodsi3+0x20>
  813d8c:	30000c26 	beq	r6,zero,813dc0 <__umodsi3+0x4c>
  813d90:	28000516 	blt	r5,zero,813da8 <__umodsi3+0x34>
  813d94:	294b883a 	add	r5,r5,r5
  813d98:	31bfffc4 	addi	r6,r6,-1
  813d9c:	18c7883a 	add	r3,r3,r3
  813da0:	293ffa36 	bltu	r5,r4,813d8c <__alt_mem_onchip_mem+0xff80bd8c>
  813da4:	18000626 	beq	r3,zero,813dc0 <__umodsi3+0x4c>
  813da8:	1806d07a 	srli	r3,r3,1
  813dac:	11400136 	bltu	r2,r5,813db4 <__umodsi3+0x40>
  813db0:	1145c83a 	sub	r2,r2,r5
  813db4:	280ad07a 	srli	r5,r5,1
  813db8:	183ffb1e 	bne	r3,zero,813da8 <__alt_mem_onchip_mem+0xff80bda8>
  813dbc:	f800283a 	ret
  813dc0:	f800283a 	ret
  813dc4:	00c00044 	movi	r3,1
  813dc8:	003ff706 	br	813da8 <__alt_mem_onchip_mem+0xff80bda8>

00813dcc <__divdf3>:
  813dcc:	defff204 	addi	sp,sp,-56
  813dd0:	dd400915 	stw	r21,36(sp)
  813dd4:	282ad53a 	srli	r21,r5,20
  813dd8:	dd000815 	stw	r20,32(sp)
  813ddc:	2828d7fa 	srli	r20,r5,31
  813de0:	dc000415 	stw	r16,16(sp)
  813de4:	04000434 	movhi	r16,16
  813de8:	df000c15 	stw	fp,48(sp)
  813dec:	843fffc4 	addi	r16,r16,-1
  813df0:	dfc00d15 	stw	ra,52(sp)
  813df4:	ddc00b15 	stw	r23,44(sp)
  813df8:	dd800a15 	stw	r22,40(sp)
  813dfc:	dcc00715 	stw	r19,28(sp)
  813e00:	dc800615 	stw	r18,24(sp)
  813e04:	dc400515 	stw	r17,20(sp)
  813e08:	ad41ffcc 	andi	r21,r21,2047
  813e0c:	2c20703a 	and	r16,r5,r16
  813e10:	a7003fcc 	andi	fp,r20,255
  813e14:	a8006126 	beq	r21,zero,813f9c <__divdf3+0x1d0>
  813e18:	0081ffc4 	movi	r2,2047
  813e1c:	2025883a 	mov	r18,r4
  813e20:	a8803726 	beq	r21,r2,813f00 <__divdf3+0x134>
  813e24:	80800434 	orhi	r2,r16,16
  813e28:	100490fa 	slli	r2,r2,3
  813e2c:	2020d77a 	srli	r16,r4,29
  813e30:	202490fa 	slli	r18,r4,3
  813e34:	ad7f0044 	addi	r21,r21,-1023
  813e38:	80a0b03a 	or	r16,r16,r2
  813e3c:	0027883a 	mov	r19,zero
  813e40:	0013883a 	mov	r9,zero
  813e44:	3804d53a 	srli	r2,r7,20
  813e48:	382cd7fa 	srli	r22,r7,31
  813e4c:	04400434 	movhi	r17,16
  813e50:	8c7fffc4 	addi	r17,r17,-1
  813e54:	1081ffcc 	andi	r2,r2,2047
  813e58:	3011883a 	mov	r8,r6
  813e5c:	3c62703a 	and	r17,r7,r17
  813e60:	b5c03fcc 	andi	r23,r22,255
  813e64:	10006c26 	beq	r2,zero,814018 <__divdf3+0x24c>
  813e68:	00c1ffc4 	movi	r3,2047
  813e6c:	10c06426 	beq	r2,r3,814000 <__divdf3+0x234>
  813e70:	88c00434 	orhi	r3,r17,16
  813e74:	180690fa 	slli	r3,r3,3
  813e78:	3022d77a 	srli	r17,r6,29
  813e7c:	301090fa 	slli	r8,r6,3
  813e80:	10bf0044 	addi	r2,r2,-1023
  813e84:	88e2b03a 	or	r17,r17,r3
  813e88:	000f883a 	mov	r7,zero
  813e8c:	a58cf03a 	xor	r6,r20,r22
  813e90:	3cc8b03a 	or	r4,r7,r19
  813e94:	a8abc83a 	sub	r21,r21,r2
  813e98:	008003c4 	movi	r2,15
  813e9c:	3007883a 	mov	r3,r6
  813ea0:	34c03fcc 	andi	r19,r6,255
  813ea4:	11009036 	bltu	r2,r4,8140e8 <__divdf3+0x31c>
  813ea8:	200890ba 	slli	r4,r4,2
  813eac:	00802074 	movhi	r2,129
  813eb0:	108fb004 	addi	r2,r2,16064
  813eb4:	2089883a 	add	r4,r4,r2
  813eb8:	20800017 	ldw	r2,0(r4)
  813ebc:	1000683a 	jmp	r2
  813ec0:	008140e8 	cmpgeui	r2,zero,1283
  813ec4:	00813f38 	rdprs	r2,zero,1276
  813ec8:	008140d8 	cmpnei	r2,zero,1283
  813ecc:	00813f2c 	andhi	r2,zero,1276
  813ed0:	008140d8 	cmpnei	r2,zero,1283
  813ed4:	008140ac 	andhi	r2,zero,1282
  813ed8:	008140d8 	cmpnei	r2,zero,1283
  813edc:	00813f2c 	andhi	r2,zero,1276
  813ee0:	00813f38 	rdprs	r2,zero,1276
  813ee4:	00813f38 	rdprs	r2,zero,1276
  813ee8:	008140ac 	andhi	r2,zero,1282
  813eec:	00813f2c 	andhi	r2,zero,1276
  813ef0:	00813f1c 	xori	r2,zero,1276
  813ef4:	00813f1c 	xori	r2,zero,1276
  813ef8:	00813f1c 	xori	r2,zero,1276
  813efc:	008143cc 	andi	r2,zero,1295
  813f00:	2404b03a 	or	r2,r4,r16
  813f04:	1000661e 	bne	r2,zero,8140a0 <__divdf3+0x2d4>
  813f08:	04c00204 	movi	r19,8
  813f0c:	0021883a 	mov	r16,zero
  813f10:	0025883a 	mov	r18,zero
  813f14:	02400084 	movi	r9,2
  813f18:	003fca06 	br	813e44 <__alt_mem_onchip_mem+0xff80be44>
  813f1c:	8023883a 	mov	r17,r16
  813f20:	9011883a 	mov	r8,r18
  813f24:	e02f883a 	mov	r23,fp
  813f28:	480f883a 	mov	r7,r9
  813f2c:	00800084 	movi	r2,2
  813f30:	3881311e 	bne	r7,r2,8143f8 <__divdf3+0x62c>
  813f34:	b827883a 	mov	r19,r23
  813f38:	98c0004c 	andi	r3,r19,1
  813f3c:	0081ffc4 	movi	r2,2047
  813f40:	000b883a 	mov	r5,zero
  813f44:	0025883a 	mov	r18,zero
  813f48:	1004953a 	slli	r2,r2,20
  813f4c:	18c03fcc 	andi	r3,r3,255
  813f50:	04400434 	movhi	r17,16
  813f54:	8c7fffc4 	addi	r17,r17,-1
  813f58:	180697fa 	slli	r3,r3,31
  813f5c:	2c4a703a 	and	r5,r5,r17
  813f60:	288ab03a 	or	r5,r5,r2
  813f64:	28c6b03a 	or	r3,r5,r3
  813f68:	9005883a 	mov	r2,r18
  813f6c:	dfc00d17 	ldw	ra,52(sp)
  813f70:	df000c17 	ldw	fp,48(sp)
  813f74:	ddc00b17 	ldw	r23,44(sp)
  813f78:	dd800a17 	ldw	r22,40(sp)
  813f7c:	dd400917 	ldw	r21,36(sp)
  813f80:	dd000817 	ldw	r20,32(sp)
  813f84:	dcc00717 	ldw	r19,28(sp)
  813f88:	dc800617 	ldw	r18,24(sp)
  813f8c:	dc400517 	ldw	r17,20(sp)
  813f90:	dc000417 	ldw	r16,16(sp)
  813f94:	dec00e04 	addi	sp,sp,56
  813f98:	f800283a 	ret
  813f9c:	2404b03a 	or	r2,r4,r16
  813fa0:	2027883a 	mov	r19,r4
  813fa4:	10003926 	beq	r2,zero,81408c <__divdf3+0x2c0>
  813fa8:	80012e26 	beq	r16,zero,814464 <__divdf3+0x698>
  813fac:	8009883a 	mov	r4,r16
  813fb0:	d9800315 	stw	r6,12(sp)
  813fb4:	d9c00215 	stw	r7,8(sp)
  813fb8:	0809b840 	call	809b84 <__clzsi2>
  813fbc:	d9800317 	ldw	r6,12(sp)
  813fc0:	d9c00217 	ldw	r7,8(sp)
  813fc4:	113ffd44 	addi	r4,r2,-11
  813fc8:	00c00704 	movi	r3,28
  813fcc:	19012116 	blt	r3,r4,814454 <__divdf3+0x688>
  813fd0:	00c00744 	movi	r3,29
  813fd4:	147ffe04 	addi	r17,r2,-8
  813fd8:	1907c83a 	sub	r3,r3,r4
  813fdc:	8460983a 	sll	r16,r16,r17
  813fe0:	98c6d83a 	srl	r3,r19,r3
  813fe4:	9c64983a 	sll	r18,r19,r17
  813fe8:	1c20b03a 	or	r16,r3,r16
  813fec:	1080fcc4 	addi	r2,r2,1011
  813ff0:	00abc83a 	sub	r21,zero,r2
  813ff4:	0027883a 	mov	r19,zero
  813ff8:	0013883a 	mov	r9,zero
  813ffc:	003f9106 	br	813e44 <__alt_mem_onchip_mem+0xff80be44>
  814000:	3446b03a 	or	r3,r6,r17
  814004:	18001f1e 	bne	r3,zero,814084 <__divdf3+0x2b8>
  814008:	0023883a 	mov	r17,zero
  81400c:	0011883a 	mov	r8,zero
  814010:	01c00084 	movi	r7,2
  814014:	003f9d06 	br	813e8c <__alt_mem_onchip_mem+0xff80be8c>
  814018:	3446b03a 	or	r3,r6,r17
  81401c:	18001526 	beq	r3,zero,814074 <__divdf3+0x2a8>
  814020:	88011b26 	beq	r17,zero,814490 <__divdf3+0x6c4>
  814024:	8809883a 	mov	r4,r17
  814028:	d9800315 	stw	r6,12(sp)
  81402c:	da400115 	stw	r9,4(sp)
  814030:	0809b840 	call	809b84 <__clzsi2>
  814034:	d9800317 	ldw	r6,12(sp)
  814038:	da400117 	ldw	r9,4(sp)
  81403c:	113ffd44 	addi	r4,r2,-11
  814040:	00c00704 	movi	r3,28
  814044:	19010e16 	blt	r3,r4,814480 <__divdf3+0x6b4>
  814048:	00c00744 	movi	r3,29
  81404c:	123ffe04 	addi	r8,r2,-8
  814050:	1907c83a 	sub	r3,r3,r4
  814054:	8a22983a 	sll	r17,r17,r8
  814058:	30c6d83a 	srl	r3,r6,r3
  81405c:	3210983a 	sll	r8,r6,r8
  814060:	1c62b03a 	or	r17,r3,r17
  814064:	1080fcc4 	addi	r2,r2,1011
  814068:	0085c83a 	sub	r2,zero,r2
  81406c:	000f883a 	mov	r7,zero
  814070:	003f8606 	br	813e8c <__alt_mem_onchip_mem+0xff80be8c>
  814074:	0023883a 	mov	r17,zero
  814078:	0011883a 	mov	r8,zero
  81407c:	01c00044 	movi	r7,1
  814080:	003f8206 	br	813e8c <__alt_mem_onchip_mem+0xff80be8c>
  814084:	01c000c4 	movi	r7,3
  814088:	003f8006 	br	813e8c <__alt_mem_onchip_mem+0xff80be8c>
  81408c:	04c00104 	movi	r19,4
  814090:	0021883a 	mov	r16,zero
  814094:	0025883a 	mov	r18,zero
  814098:	02400044 	movi	r9,1
  81409c:	003f6906 	br	813e44 <__alt_mem_onchip_mem+0xff80be44>
  8140a0:	04c00304 	movi	r19,12
  8140a4:	024000c4 	movi	r9,3
  8140a8:	003f6606 	br	813e44 <__alt_mem_onchip_mem+0xff80be44>
  8140ac:	01400434 	movhi	r5,16
  8140b0:	0007883a 	mov	r3,zero
  8140b4:	297fffc4 	addi	r5,r5,-1
  8140b8:	04bfffc4 	movi	r18,-1
  8140bc:	0081ffc4 	movi	r2,2047
  8140c0:	003fa106 	br	813f48 <__alt_mem_onchip_mem+0xff80bf48>
  8140c4:	00c00044 	movi	r3,1
  8140c8:	1887c83a 	sub	r3,r3,r2
  8140cc:	01000e04 	movi	r4,56
  8140d0:	20c1210e 	bge	r4,r3,814558 <__divdf3+0x78c>
  8140d4:	98c0004c 	andi	r3,r19,1
  8140d8:	0005883a 	mov	r2,zero
  8140dc:	000b883a 	mov	r5,zero
  8140e0:	0025883a 	mov	r18,zero
  8140e4:	003f9806 	br	813f48 <__alt_mem_onchip_mem+0xff80bf48>
  8140e8:	8c00fd36 	bltu	r17,r16,8144e0 <__divdf3+0x714>
  8140ec:	8440fb26 	beq	r16,r17,8144dc <__divdf3+0x710>
  8140f0:	8007883a 	mov	r3,r16
  8140f4:	ad7fffc4 	addi	r21,r21,-1
  8140f8:	0021883a 	mov	r16,zero
  8140fc:	4004d63a 	srli	r2,r8,24
  814100:	8822923a 	slli	r17,r17,8
  814104:	1809883a 	mov	r4,r3
  814108:	402c923a 	slli	r22,r8,8
  81410c:	88b8b03a 	or	fp,r17,r2
  814110:	e028d43a 	srli	r20,fp,16
  814114:	d8c00015 	stw	r3,0(sp)
  814118:	e5ffffcc 	andi	r23,fp,65535
  81411c:	a00b883a 	mov	r5,r20
  814120:	0813d100 	call	813d10 <__udivsi3>
  814124:	d8c00017 	ldw	r3,0(sp)
  814128:	a00b883a 	mov	r5,r20
  81412c:	d8800315 	stw	r2,12(sp)
  814130:	1809883a 	mov	r4,r3
  814134:	0813d740 	call	813d74 <__umodsi3>
  814138:	d9800317 	ldw	r6,12(sp)
  81413c:	1006943a 	slli	r3,r2,16
  814140:	9004d43a 	srli	r2,r18,16
  814144:	b9a3383a 	mul	r17,r23,r6
  814148:	10c4b03a 	or	r2,r2,r3
  81414c:	1440062e 	bgeu	r2,r17,814168 <__divdf3+0x39c>
  814150:	1705883a 	add	r2,r2,fp
  814154:	30ffffc4 	addi	r3,r6,-1
  814158:	1700ee36 	bltu	r2,fp,814514 <__divdf3+0x748>
  81415c:	1440ed2e 	bgeu	r2,r17,814514 <__divdf3+0x748>
  814160:	31bfff84 	addi	r6,r6,-2
  814164:	1705883a 	add	r2,r2,fp
  814168:	1463c83a 	sub	r17,r2,r17
  81416c:	a00b883a 	mov	r5,r20
  814170:	8809883a 	mov	r4,r17
  814174:	d9800315 	stw	r6,12(sp)
  814178:	0813d100 	call	813d10 <__udivsi3>
  81417c:	a00b883a 	mov	r5,r20
  814180:	8809883a 	mov	r4,r17
  814184:	d8800215 	stw	r2,8(sp)
  814188:	0813d740 	call	813d74 <__umodsi3>
  81418c:	d9c00217 	ldw	r7,8(sp)
  814190:	1004943a 	slli	r2,r2,16
  814194:	94bfffcc 	andi	r18,r18,65535
  814198:	b9d1383a 	mul	r8,r23,r7
  81419c:	90a4b03a 	or	r18,r18,r2
  8141a0:	d9800317 	ldw	r6,12(sp)
  8141a4:	9200062e 	bgeu	r18,r8,8141c0 <__divdf3+0x3f4>
  8141a8:	9725883a 	add	r18,r18,fp
  8141ac:	38bfffc4 	addi	r2,r7,-1
  8141b0:	9700d636 	bltu	r18,fp,81450c <__divdf3+0x740>
  8141b4:	9200d52e 	bgeu	r18,r8,81450c <__divdf3+0x740>
  8141b8:	39ffff84 	addi	r7,r7,-2
  8141bc:	9725883a 	add	r18,r18,fp
  8141c0:	3004943a 	slli	r2,r6,16
  8141c4:	b012d43a 	srli	r9,r22,16
  8141c8:	b1bfffcc 	andi	r6,r22,65535
  8141cc:	11e2b03a 	or	r17,r2,r7
  8141d0:	8806d43a 	srli	r3,r17,16
  8141d4:	893fffcc 	andi	r4,r17,65535
  8141d8:	218b383a 	mul	r5,r4,r6
  8141dc:	30c5383a 	mul	r2,r6,r3
  8141e0:	2249383a 	mul	r4,r4,r9
  8141e4:	280ed43a 	srli	r7,r5,16
  8141e8:	9225c83a 	sub	r18,r18,r8
  8141ec:	2089883a 	add	r4,r4,r2
  8141f0:	3909883a 	add	r4,r7,r4
  8141f4:	1a47383a 	mul	r3,r3,r9
  8141f8:	2080022e 	bgeu	r4,r2,814204 <__divdf3+0x438>
  8141fc:	00800074 	movhi	r2,1
  814200:	1887883a 	add	r3,r3,r2
  814204:	2004d43a 	srli	r2,r4,16
  814208:	2008943a 	slli	r4,r4,16
  81420c:	297fffcc 	andi	r5,r5,65535
  814210:	10c7883a 	add	r3,r2,r3
  814214:	2149883a 	add	r4,r4,r5
  814218:	90c0a536 	bltu	r18,r3,8144b0 <__divdf3+0x6e4>
  81421c:	90c0bf26 	beq	r18,r3,81451c <__divdf3+0x750>
  814220:	90c7c83a 	sub	r3,r18,r3
  814224:	810fc83a 	sub	r7,r16,r4
  814228:	81e5803a 	cmpltu	r18,r16,r7
  81422c:	1ca5c83a 	sub	r18,r3,r18
  814230:	e480c126 	beq	fp,r18,814538 <__divdf3+0x76c>
  814234:	a00b883a 	mov	r5,r20
  814238:	9009883a 	mov	r4,r18
  81423c:	d9800315 	stw	r6,12(sp)
  814240:	d9c00215 	stw	r7,8(sp)
  814244:	da400115 	stw	r9,4(sp)
  814248:	0813d100 	call	813d10 <__udivsi3>
  81424c:	a00b883a 	mov	r5,r20
  814250:	9009883a 	mov	r4,r18
  814254:	d8800015 	stw	r2,0(sp)
  814258:	0813d740 	call	813d74 <__umodsi3>
  81425c:	d9c00217 	ldw	r7,8(sp)
  814260:	da000017 	ldw	r8,0(sp)
  814264:	1006943a 	slli	r3,r2,16
  814268:	3804d43a 	srli	r2,r7,16
  81426c:	ba21383a 	mul	r16,r23,r8
  814270:	d9800317 	ldw	r6,12(sp)
  814274:	10c4b03a 	or	r2,r2,r3
  814278:	da400117 	ldw	r9,4(sp)
  81427c:	1400062e 	bgeu	r2,r16,814298 <__divdf3+0x4cc>
  814280:	1705883a 	add	r2,r2,fp
  814284:	40ffffc4 	addi	r3,r8,-1
  814288:	1700ad36 	bltu	r2,fp,814540 <__divdf3+0x774>
  81428c:	1400ac2e 	bgeu	r2,r16,814540 <__divdf3+0x774>
  814290:	423fff84 	addi	r8,r8,-2
  814294:	1705883a 	add	r2,r2,fp
  814298:	1421c83a 	sub	r16,r2,r16
  81429c:	a00b883a 	mov	r5,r20
  8142a0:	8009883a 	mov	r4,r16
  8142a4:	d9800315 	stw	r6,12(sp)
  8142a8:	d9c00215 	stw	r7,8(sp)
  8142ac:	da000015 	stw	r8,0(sp)
  8142b0:	da400115 	stw	r9,4(sp)
  8142b4:	0813d100 	call	813d10 <__udivsi3>
  8142b8:	8009883a 	mov	r4,r16
  8142bc:	a00b883a 	mov	r5,r20
  8142c0:	1025883a 	mov	r18,r2
  8142c4:	0813d740 	call	813d74 <__umodsi3>
  8142c8:	d9c00217 	ldw	r7,8(sp)
  8142cc:	1004943a 	slli	r2,r2,16
  8142d0:	bcaf383a 	mul	r23,r23,r18
  8142d4:	393fffcc 	andi	r4,r7,65535
  8142d8:	2088b03a 	or	r4,r4,r2
  8142dc:	d9800317 	ldw	r6,12(sp)
  8142e0:	da000017 	ldw	r8,0(sp)
  8142e4:	da400117 	ldw	r9,4(sp)
  8142e8:	25c0062e 	bgeu	r4,r23,814304 <__divdf3+0x538>
  8142ec:	2709883a 	add	r4,r4,fp
  8142f0:	90bfffc4 	addi	r2,r18,-1
  8142f4:	27009436 	bltu	r4,fp,814548 <__divdf3+0x77c>
  8142f8:	25c0932e 	bgeu	r4,r23,814548 <__divdf3+0x77c>
  8142fc:	94bfff84 	addi	r18,r18,-2
  814300:	2709883a 	add	r4,r4,fp
  814304:	4004943a 	slli	r2,r8,16
  814308:	25efc83a 	sub	r23,r4,r23
  81430c:	1490b03a 	or	r8,r2,r18
  814310:	4008d43a 	srli	r4,r8,16
  814314:	40ffffcc 	andi	r3,r8,65535
  814318:	30c5383a 	mul	r2,r6,r3
  81431c:	1a47383a 	mul	r3,r3,r9
  814320:	310d383a 	mul	r6,r6,r4
  814324:	100ad43a 	srli	r5,r2,16
  814328:	4913383a 	mul	r9,r9,r4
  81432c:	1987883a 	add	r3,r3,r6
  814330:	28c7883a 	add	r3,r5,r3
  814334:	1980022e 	bgeu	r3,r6,814340 <__divdf3+0x574>
  814338:	01000074 	movhi	r4,1
  81433c:	4913883a 	add	r9,r9,r4
  814340:	1808d43a 	srli	r4,r3,16
  814344:	1806943a 	slli	r3,r3,16
  814348:	10bfffcc 	andi	r2,r2,65535
  81434c:	2253883a 	add	r9,r4,r9
  814350:	1887883a 	add	r3,r3,r2
  814354:	ba403836 	bltu	r23,r9,814438 <__divdf3+0x66c>
  814358:	ba403626 	beq	r23,r9,814434 <__divdf3+0x668>
  81435c:	42000054 	ori	r8,r8,1
  814360:	a880ffc4 	addi	r2,r21,1023
  814364:	00bf570e 	bge	zero,r2,8140c4 <__alt_mem_onchip_mem+0xff80c0c4>
  814368:	40c001cc 	andi	r3,r8,7
  81436c:	18000726 	beq	r3,zero,81438c <__divdf3+0x5c0>
  814370:	40c003cc 	andi	r3,r8,15
  814374:	01000104 	movi	r4,4
  814378:	19000426 	beq	r3,r4,81438c <__divdf3+0x5c0>
  81437c:	4107883a 	add	r3,r8,r4
  814380:	1a11803a 	cmpltu	r8,r3,r8
  814384:	8a23883a 	add	r17,r17,r8
  814388:	1811883a 	mov	r8,r3
  81438c:	88c0402c 	andhi	r3,r17,256
  814390:	18000426 	beq	r3,zero,8143a4 <__divdf3+0x5d8>
  814394:	00ffc034 	movhi	r3,65280
  814398:	18ffffc4 	addi	r3,r3,-1
  81439c:	a8810004 	addi	r2,r21,1024
  8143a0:	88e2703a 	and	r17,r17,r3
  8143a4:	00c1ff84 	movi	r3,2046
  8143a8:	18bee316 	blt	r3,r2,813f38 <__alt_mem_onchip_mem+0xff80bf38>
  8143ac:	8824977a 	slli	r18,r17,29
  8143b0:	4010d0fa 	srli	r8,r8,3
  8143b4:	8822927a 	slli	r17,r17,9
  8143b8:	1081ffcc 	andi	r2,r2,2047
  8143bc:	9224b03a 	or	r18,r18,r8
  8143c0:	880ad33a 	srli	r5,r17,12
  8143c4:	98c0004c 	andi	r3,r19,1
  8143c8:	003edf06 	br	813f48 <__alt_mem_onchip_mem+0xff80bf48>
  8143cc:	8080022c 	andhi	r2,r16,8
  8143d0:	10001226 	beq	r2,zero,81441c <__divdf3+0x650>
  8143d4:	8880022c 	andhi	r2,r17,8
  8143d8:	1000101e 	bne	r2,zero,81441c <__divdf3+0x650>
  8143dc:	00800434 	movhi	r2,16
  8143e0:	89400234 	orhi	r5,r17,8
  8143e4:	10bfffc4 	addi	r2,r2,-1
  8143e8:	b007883a 	mov	r3,r22
  8143ec:	288a703a 	and	r5,r5,r2
  8143f0:	4025883a 	mov	r18,r8
  8143f4:	003f3106 	br	8140bc <__alt_mem_onchip_mem+0xff80c0bc>
  8143f8:	008000c4 	movi	r2,3
  8143fc:	3880a626 	beq	r7,r2,814698 <__divdf3+0x8cc>
  814400:	00800044 	movi	r2,1
  814404:	3880521e 	bne	r7,r2,814550 <__divdf3+0x784>
  814408:	b807883a 	mov	r3,r23
  81440c:	0005883a 	mov	r2,zero
  814410:	000b883a 	mov	r5,zero
  814414:	0025883a 	mov	r18,zero
  814418:	003ecb06 	br	813f48 <__alt_mem_onchip_mem+0xff80bf48>
  81441c:	00800434 	movhi	r2,16
  814420:	81400234 	orhi	r5,r16,8
  814424:	10bfffc4 	addi	r2,r2,-1
  814428:	a007883a 	mov	r3,r20
  81442c:	288a703a 	and	r5,r5,r2
  814430:	003f2206 	br	8140bc <__alt_mem_onchip_mem+0xff80c0bc>
  814434:	183fca26 	beq	r3,zero,814360 <__alt_mem_onchip_mem+0xff80c360>
  814438:	e5ef883a 	add	r23,fp,r23
  81443c:	40bfffc4 	addi	r2,r8,-1
  814440:	bf00392e 	bgeu	r23,fp,814528 <__divdf3+0x75c>
  814444:	1011883a 	mov	r8,r2
  814448:	ba7fc41e 	bne	r23,r9,81435c <__alt_mem_onchip_mem+0xff80c35c>
  81444c:	b0ffc31e 	bne	r22,r3,81435c <__alt_mem_onchip_mem+0xff80c35c>
  814450:	003fc306 	br	814360 <__alt_mem_onchip_mem+0xff80c360>
  814454:	143ff604 	addi	r16,r2,-40
  814458:	9c20983a 	sll	r16,r19,r16
  81445c:	0025883a 	mov	r18,zero
  814460:	003ee206 	br	813fec <__alt_mem_onchip_mem+0xff80bfec>
  814464:	d9800315 	stw	r6,12(sp)
  814468:	d9c00215 	stw	r7,8(sp)
  81446c:	0809b840 	call	809b84 <__clzsi2>
  814470:	10800804 	addi	r2,r2,32
  814474:	d9c00217 	ldw	r7,8(sp)
  814478:	d9800317 	ldw	r6,12(sp)
  81447c:	003ed106 	br	813fc4 <__alt_mem_onchip_mem+0xff80bfc4>
  814480:	147ff604 	addi	r17,r2,-40
  814484:	3462983a 	sll	r17,r6,r17
  814488:	0011883a 	mov	r8,zero
  81448c:	003ef506 	br	814064 <__alt_mem_onchip_mem+0xff80c064>
  814490:	3009883a 	mov	r4,r6
  814494:	d9800315 	stw	r6,12(sp)
  814498:	da400115 	stw	r9,4(sp)
  81449c:	0809b840 	call	809b84 <__clzsi2>
  8144a0:	10800804 	addi	r2,r2,32
  8144a4:	da400117 	ldw	r9,4(sp)
  8144a8:	d9800317 	ldw	r6,12(sp)
  8144ac:	003ee306 	br	81403c <__alt_mem_onchip_mem+0xff80c03c>
  8144b0:	85a1883a 	add	r16,r16,r22
  8144b4:	8585803a 	cmpltu	r2,r16,r22
  8144b8:	1705883a 	add	r2,r2,fp
  8144bc:	14a5883a 	add	r18,r2,r18
  8144c0:	88bfffc4 	addi	r2,r17,-1
  8144c4:	e4800c2e 	bgeu	fp,r18,8144f8 <__divdf3+0x72c>
  8144c8:	90c03e36 	bltu	r18,r3,8145c4 <__divdf3+0x7f8>
  8144cc:	1c806926 	beq	r3,r18,814674 <__divdf3+0x8a8>
  8144d0:	90c7c83a 	sub	r3,r18,r3
  8144d4:	1023883a 	mov	r17,r2
  8144d8:	003f5206 	br	814224 <__alt_mem_onchip_mem+0xff80c224>
  8144dc:	923f0436 	bltu	r18,r8,8140f0 <__alt_mem_onchip_mem+0xff80c0f0>
  8144e0:	800897fa 	slli	r4,r16,31
  8144e4:	9004d07a 	srli	r2,r18,1
  8144e8:	8006d07a 	srli	r3,r16,1
  8144ec:	902097fa 	slli	r16,r18,31
  8144f0:	20a4b03a 	or	r18,r4,r2
  8144f4:	003f0106 	br	8140fc <__alt_mem_onchip_mem+0xff80c0fc>
  8144f8:	e4bff51e 	bne	fp,r18,8144d0 <__alt_mem_onchip_mem+0xff80c4d0>
  8144fc:	85bff22e 	bgeu	r16,r22,8144c8 <__alt_mem_onchip_mem+0xff80c4c8>
  814500:	e0c7c83a 	sub	r3,fp,r3
  814504:	1023883a 	mov	r17,r2
  814508:	003f4606 	br	814224 <__alt_mem_onchip_mem+0xff80c224>
  81450c:	100f883a 	mov	r7,r2
  814510:	003f2b06 	br	8141c0 <__alt_mem_onchip_mem+0xff80c1c0>
  814514:	180d883a 	mov	r6,r3
  814518:	003f1306 	br	814168 <__alt_mem_onchip_mem+0xff80c168>
  81451c:	813fe436 	bltu	r16,r4,8144b0 <__alt_mem_onchip_mem+0xff80c4b0>
  814520:	0007883a 	mov	r3,zero
  814524:	003f3f06 	br	814224 <__alt_mem_onchip_mem+0xff80c224>
  814528:	ba402c36 	bltu	r23,r9,8145dc <__divdf3+0x810>
  81452c:	4dc05426 	beq	r9,r23,814680 <__divdf3+0x8b4>
  814530:	1011883a 	mov	r8,r2
  814534:	003f8906 	br	81435c <__alt_mem_onchip_mem+0xff80c35c>
  814538:	023fffc4 	movi	r8,-1
  81453c:	003f8806 	br	814360 <__alt_mem_onchip_mem+0xff80c360>
  814540:	1811883a 	mov	r8,r3
  814544:	003f5406 	br	814298 <__alt_mem_onchip_mem+0xff80c298>
  814548:	1025883a 	mov	r18,r2
  81454c:	003f6d06 	br	814304 <__alt_mem_onchip_mem+0xff80c304>
  814550:	b827883a 	mov	r19,r23
  814554:	003f8206 	br	814360 <__alt_mem_onchip_mem+0xff80c360>
  814558:	010007c4 	movi	r4,31
  81455c:	20c02616 	blt	r4,r3,8145f8 <__divdf3+0x82c>
  814560:	00800804 	movi	r2,32
  814564:	10c5c83a 	sub	r2,r2,r3
  814568:	888a983a 	sll	r5,r17,r2
  81456c:	40c8d83a 	srl	r4,r8,r3
  814570:	4084983a 	sll	r2,r8,r2
  814574:	88e2d83a 	srl	r17,r17,r3
  814578:	2906b03a 	or	r3,r5,r4
  81457c:	1004c03a 	cmpne	r2,r2,zero
  814580:	1886b03a 	or	r3,r3,r2
  814584:	188001cc 	andi	r2,r3,7
  814588:	10000726 	beq	r2,zero,8145a8 <__divdf3+0x7dc>
  81458c:	188003cc 	andi	r2,r3,15
  814590:	01000104 	movi	r4,4
  814594:	11000426 	beq	r2,r4,8145a8 <__divdf3+0x7dc>
  814598:	1805883a 	mov	r2,r3
  81459c:	10c00104 	addi	r3,r2,4
  8145a0:	1885803a 	cmpltu	r2,r3,r2
  8145a4:	88a3883a 	add	r17,r17,r2
  8145a8:	8880202c 	andhi	r2,r17,128
  8145ac:	10002726 	beq	r2,zero,81464c <__divdf3+0x880>
  8145b0:	98c0004c 	andi	r3,r19,1
  8145b4:	00800044 	movi	r2,1
  8145b8:	000b883a 	mov	r5,zero
  8145bc:	0025883a 	mov	r18,zero
  8145c0:	003e6106 	br	813f48 <__alt_mem_onchip_mem+0xff80bf48>
  8145c4:	85a1883a 	add	r16,r16,r22
  8145c8:	8585803a 	cmpltu	r2,r16,r22
  8145cc:	1705883a 	add	r2,r2,fp
  8145d0:	14a5883a 	add	r18,r2,r18
  8145d4:	8c7fff84 	addi	r17,r17,-2
  8145d8:	003f1106 	br	814220 <__alt_mem_onchip_mem+0xff80c220>
  8145dc:	b589883a 	add	r4,r22,r22
  8145e0:	25ad803a 	cmpltu	r22,r4,r22
  8145e4:	b739883a 	add	fp,r22,fp
  8145e8:	40bfff84 	addi	r2,r8,-2
  8145ec:	bf2f883a 	add	r23,r23,fp
  8145f0:	202d883a 	mov	r22,r4
  8145f4:	003f9306 	br	814444 <__alt_mem_onchip_mem+0xff80c444>
  8145f8:	013ff844 	movi	r4,-31
  8145fc:	2085c83a 	sub	r2,r4,r2
  814600:	8888d83a 	srl	r4,r17,r2
  814604:	00800804 	movi	r2,32
  814608:	18802126 	beq	r3,r2,814690 <__divdf3+0x8c4>
  81460c:	00801004 	movi	r2,64
  814610:	10c5c83a 	sub	r2,r2,r3
  814614:	8884983a 	sll	r2,r17,r2
  814618:	1204b03a 	or	r2,r2,r8
  81461c:	1004c03a 	cmpne	r2,r2,zero
  814620:	2084b03a 	or	r2,r4,r2
  814624:	144001cc 	andi	r17,r2,7
  814628:	88000d1e 	bne	r17,zero,814660 <__divdf3+0x894>
  81462c:	000b883a 	mov	r5,zero
  814630:	1024d0fa 	srli	r18,r2,3
  814634:	98c0004c 	andi	r3,r19,1
  814638:	0005883a 	mov	r2,zero
  81463c:	9464b03a 	or	r18,r18,r17
  814640:	003e4106 	br	813f48 <__alt_mem_onchip_mem+0xff80bf48>
  814644:	1007883a 	mov	r3,r2
  814648:	0023883a 	mov	r17,zero
  81464c:	880a927a 	slli	r5,r17,9
  814650:	1805883a 	mov	r2,r3
  814654:	8822977a 	slli	r17,r17,29
  814658:	280ad33a 	srli	r5,r5,12
  81465c:	003ff406 	br	814630 <__alt_mem_onchip_mem+0xff80c630>
  814660:	10c003cc 	andi	r3,r2,15
  814664:	01000104 	movi	r4,4
  814668:	193ff626 	beq	r3,r4,814644 <__alt_mem_onchip_mem+0xff80c644>
  81466c:	0023883a 	mov	r17,zero
  814670:	003fca06 	br	81459c <__alt_mem_onchip_mem+0xff80c59c>
  814674:	813fd336 	bltu	r16,r4,8145c4 <__alt_mem_onchip_mem+0xff80c5c4>
  814678:	1023883a 	mov	r17,r2
  81467c:	003fa806 	br	814520 <__alt_mem_onchip_mem+0xff80c520>
  814680:	b0ffd636 	bltu	r22,r3,8145dc <__alt_mem_onchip_mem+0xff80c5dc>
  814684:	1011883a 	mov	r8,r2
  814688:	b0ff341e 	bne	r22,r3,81435c <__alt_mem_onchip_mem+0xff80c35c>
  81468c:	003f3406 	br	814360 <__alt_mem_onchip_mem+0xff80c360>
  814690:	0005883a 	mov	r2,zero
  814694:	003fe006 	br	814618 <__alt_mem_onchip_mem+0xff80c618>
  814698:	00800434 	movhi	r2,16
  81469c:	89400234 	orhi	r5,r17,8
  8146a0:	10bfffc4 	addi	r2,r2,-1
  8146a4:	b807883a 	mov	r3,r23
  8146a8:	288a703a 	and	r5,r5,r2
  8146ac:	4025883a 	mov	r18,r8
  8146b0:	003e8206 	br	8140bc <__alt_mem_onchip_mem+0xff80c0bc>

008146b4 <__eqdf2>:
  8146b4:	2804d53a 	srli	r2,r5,20
  8146b8:	3806d53a 	srli	r3,r7,20
  8146bc:	02000434 	movhi	r8,16
  8146c0:	423fffc4 	addi	r8,r8,-1
  8146c4:	1081ffcc 	andi	r2,r2,2047
  8146c8:	0281ffc4 	movi	r10,2047
  8146cc:	2a12703a 	and	r9,r5,r8
  8146d0:	18c1ffcc 	andi	r3,r3,2047
  8146d4:	3a10703a 	and	r8,r7,r8
  8146d8:	280ad7fa 	srli	r5,r5,31
  8146dc:	380ed7fa 	srli	r7,r7,31
  8146e0:	12801026 	beq	r2,r10,814724 <__eqdf2+0x70>
  8146e4:	0281ffc4 	movi	r10,2047
  8146e8:	1a800a26 	beq	r3,r10,814714 <__eqdf2+0x60>
  8146ec:	10c00226 	beq	r2,r3,8146f8 <__eqdf2+0x44>
  8146f0:	00800044 	movi	r2,1
  8146f4:	f800283a 	ret
  8146f8:	4a3ffd1e 	bne	r9,r8,8146f0 <__alt_mem_onchip_mem+0xff80c6f0>
  8146fc:	21bffc1e 	bne	r4,r6,8146f0 <__alt_mem_onchip_mem+0xff80c6f0>
  814700:	29c00c26 	beq	r5,r7,814734 <__eqdf2+0x80>
  814704:	103ffa1e 	bne	r2,zero,8146f0 <__alt_mem_onchip_mem+0xff80c6f0>
  814708:	2244b03a 	or	r2,r4,r9
  81470c:	1004c03a 	cmpne	r2,r2,zero
  814710:	f800283a 	ret
  814714:	3214b03a 	or	r10,r6,r8
  814718:	503ff426 	beq	r10,zero,8146ec <__alt_mem_onchip_mem+0xff80c6ec>
  81471c:	00800044 	movi	r2,1
  814720:	f800283a 	ret
  814724:	2254b03a 	or	r10,r4,r9
  814728:	503fee26 	beq	r10,zero,8146e4 <__alt_mem_onchip_mem+0xff80c6e4>
  81472c:	00800044 	movi	r2,1
  814730:	f800283a 	ret
  814734:	0005883a 	mov	r2,zero
  814738:	f800283a 	ret

0081473c <__fixdfsi>:
  81473c:	280cd53a 	srli	r6,r5,20
  814740:	00c00434 	movhi	r3,16
  814744:	18ffffc4 	addi	r3,r3,-1
  814748:	3181ffcc 	andi	r6,r6,2047
  81474c:	01c0ff84 	movi	r7,1022
  814750:	28c6703a 	and	r3,r5,r3
  814754:	280ad7fa 	srli	r5,r5,31
  814758:	3980120e 	bge	r7,r6,8147a4 <__fixdfsi+0x68>
  81475c:	00810744 	movi	r2,1053
  814760:	11800c16 	blt	r2,r6,814794 <__fixdfsi+0x58>
  814764:	00810cc4 	movi	r2,1075
  814768:	1185c83a 	sub	r2,r2,r6
  81476c:	01c007c4 	movi	r7,31
  814770:	18c00434 	orhi	r3,r3,16
  814774:	38800d16 	blt	r7,r2,8147ac <__fixdfsi+0x70>
  814778:	31befb44 	addi	r6,r6,-1043
  81477c:	2084d83a 	srl	r2,r4,r2
  814780:	1986983a 	sll	r3,r3,r6
  814784:	1884b03a 	or	r2,r3,r2
  814788:	28000726 	beq	r5,zero,8147a8 <__fixdfsi+0x6c>
  81478c:	0085c83a 	sub	r2,zero,r2
  814790:	f800283a 	ret
  814794:	00a00034 	movhi	r2,32768
  814798:	10bfffc4 	addi	r2,r2,-1
  81479c:	2885883a 	add	r2,r5,r2
  8147a0:	f800283a 	ret
  8147a4:	0005883a 	mov	r2,zero
  8147a8:	f800283a 	ret
  8147ac:	008104c4 	movi	r2,1043
  8147b0:	1185c83a 	sub	r2,r2,r6
  8147b4:	1884d83a 	srl	r2,r3,r2
  8147b8:	003ff306 	br	814788 <__alt_mem_onchip_mem+0xff80c788>

008147bc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  8147bc:	defff504 	addi	sp,sp,-44
  8147c0:	df000a15 	stw	fp,40(sp)
  8147c4:	df000a04 	addi	fp,sp,40
  8147c8:	e13ffc15 	stw	r4,-16(fp)
  8147cc:	e17ffd15 	stw	r5,-12(fp)
  8147d0:	e1bffe15 	stw	r6,-8(fp)
  8147d4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  8147d8:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  8147dc:	d0a75f17 	ldw	r2,-25220(gp)
  
  if (alt_ticks_per_second ())
  8147e0:	10003c26 	beq	r2,zero,8148d4 <alt_alarm_start+0x118>
  {
    if (alarm)
  8147e4:	e0bffc17 	ldw	r2,-16(fp)
  8147e8:	10003826 	beq	r2,zero,8148cc <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
  8147ec:	e0bffc17 	ldw	r2,-16(fp)
  8147f0:	e0fffe17 	ldw	r3,-8(fp)
  8147f4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  8147f8:	e0bffc17 	ldw	r2,-16(fp)
  8147fc:	e0ffff17 	ldw	r3,-4(fp)
  814800:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814804:	0005303a 	rdctl	r2,status
  814808:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81480c:	e0fff917 	ldw	r3,-28(fp)
  814810:	00bfff84 	movi	r2,-2
  814814:	1884703a 	and	r2,r3,r2
  814818:	1001703a 	wrctl	status,r2
  
  return context;
  81481c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
  814820:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  814824:	d0a76017 	ldw	r2,-25216(gp)
      
      current_nticks = alt_nticks();
  814828:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  81482c:	e0fffd17 	ldw	r3,-12(fp)
  814830:	e0bff617 	ldw	r2,-40(fp)
  814834:	1885883a 	add	r2,r3,r2
  814838:	10c00044 	addi	r3,r2,1
  81483c:	e0bffc17 	ldw	r2,-16(fp)
  814840:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  814844:	e0bffc17 	ldw	r2,-16(fp)
  814848:	10c00217 	ldw	r3,8(r2)
  81484c:	e0bff617 	ldw	r2,-40(fp)
  814850:	1880042e 	bgeu	r3,r2,814864 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
  814854:	e0bffc17 	ldw	r2,-16(fp)
  814858:	00c00044 	movi	r3,1
  81485c:	10c00405 	stb	r3,16(r2)
  814860:	00000206 	br	81486c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
  814864:	e0bffc17 	ldw	r2,-16(fp)
  814868:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  81486c:	e0bffc17 	ldw	r2,-16(fp)
  814870:	d0e00e04 	addi	r3,gp,-32712
  814874:	e0fffa15 	stw	r3,-24(fp)
  814878:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  81487c:	e0bffb17 	ldw	r2,-20(fp)
  814880:	e0fffa17 	ldw	r3,-24(fp)
  814884:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  814888:	e0bffa17 	ldw	r2,-24(fp)
  81488c:	10c00017 	ldw	r3,0(r2)
  814890:	e0bffb17 	ldw	r2,-20(fp)
  814894:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  814898:	e0bffa17 	ldw	r2,-24(fp)
  81489c:	10800017 	ldw	r2,0(r2)
  8148a0:	e0fffb17 	ldw	r3,-20(fp)
  8148a4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  8148a8:	e0bffa17 	ldw	r2,-24(fp)
  8148ac:	e0fffb17 	ldw	r3,-20(fp)
  8148b0:	10c00015 	stw	r3,0(r2)
  8148b4:	e0bff817 	ldw	r2,-32(fp)
  8148b8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8148bc:	e0bff717 	ldw	r2,-36(fp)
  8148c0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  8148c4:	0005883a 	mov	r2,zero
  8148c8:	00000306 	br	8148d8 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
  8148cc:	00bffa84 	movi	r2,-22
  8148d0:	00000106 	br	8148d8 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
  8148d4:	00bfde84 	movi	r2,-134
  }
}
  8148d8:	e037883a 	mov	sp,fp
  8148dc:	df000017 	ldw	fp,0(sp)
  8148e0:	dec00104 	addi	sp,sp,4
  8148e4:	f800283a 	ret

008148e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8148e8:	defffe04 	addi	sp,sp,-8
  8148ec:	dfc00115 	stw	ra,4(sp)
  8148f0:	df000015 	stw	fp,0(sp)
  8148f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8148f8:	d0a00b17 	ldw	r2,-32724(gp)
  8148fc:	10000326 	beq	r2,zero,81490c <alt_get_errno+0x24>
  814900:	d0a00b17 	ldw	r2,-32724(gp)
  814904:	103ee83a 	callr	r2
  814908:	00000106 	br	814910 <alt_get_errno+0x28>
  81490c:	d0a75a04 	addi	r2,gp,-25240
}
  814910:	e037883a 	mov	sp,fp
  814914:	dfc00117 	ldw	ra,4(sp)
  814918:	df000017 	ldw	fp,0(sp)
  81491c:	dec00204 	addi	sp,sp,8
  814920:	f800283a 	ret

00814924 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  814924:	defffb04 	addi	sp,sp,-20
  814928:	dfc00415 	stw	ra,16(sp)
  81492c:	df000315 	stw	fp,12(sp)
  814930:	df000304 	addi	fp,sp,12
  814934:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  814938:	e0bfff17 	ldw	r2,-4(fp)
  81493c:	10000616 	blt	r2,zero,814958 <close+0x34>
  814940:	e0bfff17 	ldw	r2,-4(fp)
  814944:	10c00324 	muli	r3,r2,12
  814948:	008020b4 	movhi	r2,130
  81494c:	10a5e104 	addi	r2,r2,-26748
  814950:	1885883a 	add	r2,r3,r2
  814954:	00000106 	br	81495c <close+0x38>
  814958:	0005883a 	mov	r2,zero
  81495c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  814960:	e0bffd17 	ldw	r2,-12(fp)
  814964:	10001926 	beq	r2,zero,8149cc <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  814968:	e0bffd17 	ldw	r2,-12(fp)
  81496c:	10800017 	ldw	r2,0(r2)
  814970:	10800417 	ldw	r2,16(r2)
  814974:	10000626 	beq	r2,zero,814990 <close+0x6c>
  814978:	e0bffd17 	ldw	r2,-12(fp)
  81497c:	10800017 	ldw	r2,0(r2)
  814980:	10800417 	ldw	r2,16(r2)
  814984:	e13ffd17 	ldw	r4,-12(fp)
  814988:	103ee83a 	callr	r2
  81498c:	00000106 	br	814994 <close+0x70>
  814990:	0005883a 	mov	r2,zero
  814994:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  814998:	e13fff17 	ldw	r4,-4(fp)
  81499c:	08152840 	call	815284 <alt_release_fd>
    if (rval < 0)
  8149a0:	e0bffe17 	ldw	r2,-8(fp)
  8149a4:	1000070e 	bge	r2,zero,8149c4 <close+0xa0>
    {
      ALT_ERRNO = -rval;
  8149a8:	08148e80 	call	8148e8 <alt_get_errno>
  8149ac:	1007883a 	mov	r3,r2
  8149b0:	e0bffe17 	ldw	r2,-8(fp)
  8149b4:	0085c83a 	sub	r2,zero,r2
  8149b8:	18800015 	stw	r2,0(r3)
      return -1;
  8149bc:	00bfffc4 	movi	r2,-1
  8149c0:	00000706 	br	8149e0 <close+0xbc>
    }
    return 0;
  8149c4:	0005883a 	mov	r2,zero
  8149c8:	00000506 	br	8149e0 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  8149cc:	08148e80 	call	8148e8 <alt_get_errno>
  8149d0:	1007883a 	mov	r3,r2
  8149d4:	00801444 	movi	r2,81
  8149d8:	18800015 	stw	r2,0(r3)
    return -1;
  8149dc:	00bfffc4 	movi	r2,-1
  }
}
  8149e0:	e037883a 	mov	sp,fp
  8149e4:	dfc00117 	ldw	ra,4(sp)
  8149e8:	df000017 	ldw	fp,0(sp)
  8149ec:	dec00204 	addi	sp,sp,8
  8149f0:	f800283a 	ret

008149f4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  8149f4:	defffc04 	addi	sp,sp,-16
  8149f8:	df000315 	stw	fp,12(sp)
  8149fc:	df000304 	addi	fp,sp,12
  814a00:	e13ffd15 	stw	r4,-12(fp)
  814a04:	e17ffe15 	stw	r5,-8(fp)
  814a08:	e1bfff15 	stw	r6,-4(fp)
  return len;
  814a0c:	e0bfff17 	ldw	r2,-4(fp)
}
  814a10:	e037883a 	mov	sp,fp
  814a14:	df000017 	ldw	fp,0(sp)
  814a18:	dec00104 	addi	sp,sp,4
  814a1c:	f800283a 	ret

00814a20 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  814a20:	defffe04 	addi	sp,sp,-8
  814a24:	dfc00115 	stw	ra,4(sp)
  814a28:	df000015 	stw	fp,0(sp)
  814a2c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  814a30:	d0a00b17 	ldw	r2,-32724(gp)
  814a34:	10000326 	beq	r2,zero,814a44 <alt_get_errno+0x24>
  814a38:	d0a00b17 	ldw	r2,-32724(gp)
  814a3c:	103ee83a 	callr	r2
  814a40:	00000106 	br	814a48 <alt_get_errno+0x28>
  814a44:	d0a75a04 	addi	r2,gp,-25240
}
  814a48:	e037883a 	mov	sp,fp
  814a4c:	dfc00117 	ldw	ra,4(sp)
  814a50:	df000017 	ldw	fp,0(sp)
  814a54:	dec00204 	addi	sp,sp,8
  814a58:	f800283a 	ret

00814a5c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  814a5c:	defffb04 	addi	sp,sp,-20
  814a60:	dfc00415 	stw	ra,16(sp)
  814a64:	df000315 	stw	fp,12(sp)
  814a68:	df000304 	addi	fp,sp,12
  814a6c:	e13ffe15 	stw	r4,-8(fp)
  814a70:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  814a74:	e0bffe17 	ldw	r2,-8(fp)
  814a78:	10000616 	blt	r2,zero,814a94 <fstat+0x38>
  814a7c:	e0bffe17 	ldw	r2,-8(fp)
  814a80:	10c00324 	muli	r3,r2,12
  814a84:	008020b4 	movhi	r2,130
  814a88:	10a5e104 	addi	r2,r2,-26748
  814a8c:	1885883a 	add	r2,r3,r2
  814a90:	00000106 	br	814a98 <fstat+0x3c>
  814a94:	0005883a 	mov	r2,zero
  814a98:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
  814a9c:	e0bffd17 	ldw	r2,-12(fp)
  814aa0:	10001026 	beq	r2,zero,814ae4 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  814aa4:	e0bffd17 	ldw	r2,-12(fp)
  814aa8:	10800017 	ldw	r2,0(r2)
  814aac:	10800817 	ldw	r2,32(r2)
  814ab0:	10000726 	beq	r2,zero,814ad0 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
  814ab4:	e0bffd17 	ldw	r2,-12(fp)
  814ab8:	10800017 	ldw	r2,0(r2)
  814abc:	10800817 	ldw	r2,32(r2)
  814ac0:	e17fff17 	ldw	r5,-4(fp)
  814ac4:	e13ffd17 	ldw	r4,-12(fp)
  814ac8:	103ee83a 	callr	r2
  814acc:	00000a06 	br	814af8 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  814ad0:	e0bfff17 	ldw	r2,-4(fp)
  814ad4:	00c80004 	movi	r3,8192
  814ad8:	10c00115 	stw	r3,4(r2)
      return 0;
  814adc:	0005883a 	mov	r2,zero
  814ae0:	00000506 	br	814af8 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  814ae4:	0814a200 	call	814a20 <alt_get_errno>
  814ae8:	1007883a 	mov	r3,r2
  814aec:	00801444 	movi	r2,81
  814af0:	18800015 	stw	r2,0(r3)
    return -1;
  814af4:	00bfffc4 	movi	r2,-1
  }
}
  814af8:	e037883a 	mov	sp,fp
  814afc:	dfc00117 	ldw	ra,4(sp)
  814b00:	df000017 	ldw	fp,0(sp)
  814b04:	dec00204 	addi	sp,sp,8
  814b08:	f800283a 	ret

00814b0c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  814b0c:	defff904 	addi	sp,sp,-28
  814b10:	dfc00615 	stw	ra,24(sp)
  814b14:	df000515 	stw	fp,20(sp)
  814b18:	df000504 	addi	fp,sp,20
  814b1c:	e13ffc15 	stw	r4,-16(fp)
  814b20:	e17ffd15 	stw	r5,-12(fp)
  814b24:	e1bffe15 	stw	r6,-8(fp)
  814b28:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  814b2c:	e0800217 	ldw	r2,8(fp)
  814b30:	d8800015 	stw	r2,0(sp)
  814b34:	e1ffff17 	ldw	r7,-4(fp)
  814b38:	e1bffe17 	ldw	r6,-8(fp)
  814b3c:	e17ffd17 	ldw	r5,-12(fp)
  814b40:	e13ffc17 	ldw	r4,-16(fp)
  814b44:	0814cbc0 	call	814cbc <alt_iic_isr_register>
}  
  814b48:	e037883a 	mov	sp,fp
  814b4c:	dfc00117 	ldw	ra,4(sp)
  814b50:	df000017 	ldw	fp,0(sp)
  814b54:	dec00204 	addi	sp,sp,8
  814b58:	f800283a 	ret

00814b5c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  814b5c:	defff904 	addi	sp,sp,-28
  814b60:	df000615 	stw	fp,24(sp)
  814b64:	df000604 	addi	fp,sp,24
  814b68:	e13ffe15 	stw	r4,-8(fp)
  814b6c:	e17fff15 	stw	r5,-4(fp)
  814b70:	e0bfff17 	ldw	r2,-4(fp)
  814b74:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814b78:	0005303a 	rdctl	r2,status
  814b7c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814b80:	e0fffb17 	ldw	r3,-20(fp)
  814b84:	00bfff84 	movi	r2,-2
  814b88:	1884703a 	and	r2,r3,r2
  814b8c:	1001703a 	wrctl	status,r2
  
  return context;
  814b90:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  814b94:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
  814b98:	00c00044 	movi	r3,1
  814b9c:	e0bffa17 	ldw	r2,-24(fp)
  814ba0:	1884983a 	sll	r2,r3,r2
  814ba4:	1007883a 	mov	r3,r2
  814ba8:	d0a75b17 	ldw	r2,-25236(gp)
  814bac:	1884b03a 	or	r2,r3,r2
  814bb0:	d0a75b15 	stw	r2,-25236(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  814bb4:	d0a75b17 	ldw	r2,-25236(gp)
  814bb8:	100170fa 	wrctl	ienable,r2
  814bbc:	e0bffc17 	ldw	r2,-16(fp)
  814bc0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814bc4:	e0bffd17 	ldw	r2,-12(fp)
  814bc8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  814bcc:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
  814bd0:	0001883a 	nop
}
  814bd4:	e037883a 	mov	sp,fp
  814bd8:	df000017 	ldw	fp,0(sp)
  814bdc:	dec00104 	addi	sp,sp,4
  814be0:	f800283a 	ret

00814be4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  814be4:	defff904 	addi	sp,sp,-28
  814be8:	df000615 	stw	fp,24(sp)
  814bec:	df000604 	addi	fp,sp,24
  814bf0:	e13ffe15 	stw	r4,-8(fp)
  814bf4:	e17fff15 	stw	r5,-4(fp)
  814bf8:	e0bfff17 	ldw	r2,-4(fp)
  814bfc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814c00:	0005303a 	rdctl	r2,status
  814c04:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814c08:	e0fffb17 	ldw	r3,-20(fp)
  814c0c:	00bfff84 	movi	r2,-2
  814c10:	1884703a 	and	r2,r3,r2
  814c14:	1001703a 	wrctl	status,r2
  
  return context;
  814c18:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  814c1c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
  814c20:	00c00044 	movi	r3,1
  814c24:	e0bffa17 	ldw	r2,-24(fp)
  814c28:	1884983a 	sll	r2,r3,r2
  814c2c:	0084303a 	nor	r2,zero,r2
  814c30:	1007883a 	mov	r3,r2
  814c34:	d0a75b17 	ldw	r2,-25236(gp)
  814c38:	1884703a 	and	r2,r3,r2
  814c3c:	d0a75b15 	stw	r2,-25236(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  814c40:	d0a75b17 	ldw	r2,-25236(gp)
  814c44:	100170fa 	wrctl	ienable,r2
  814c48:	e0bffc17 	ldw	r2,-16(fp)
  814c4c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814c50:	e0bffd17 	ldw	r2,-12(fp)
  814c54:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  814c58:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
  814c5c:	0001883a 	nop
}
  814c60:	e037883a 	mov	sp,fp
  814c64:	df000017 	ldw	fp,0(sp)
  814c68:	dec00104 	addi	sp,sp,4
  814c6c:	f800283a 	ret

00814c70 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  814c70:	defffc04 	addi	sp,sp,-16
  814c74:	df000315 	stw	fp,12(sp)
  814c78:	df000304 	addi	fp,sp,12
  814c7c:	e13ffe15 	stw	r4,-8(fp)
  814c80:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  814c84:	000530fa 	rdctl	r2,ienable
  814c88:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  814c8c:	00c00044 	movi	r3,1
  814c90:	e0bfff17 	ldw	r2,-4(fp)
  814c94:	1884983a 	sll	r2,r3,r2
  814c98:	1007883a 	mov	r3,r2
  814c9c:	e0bffd17 	ldw	r2,-12(fp)
  814ca0:	1884703a 	and	r2,r3,r2
  814ca4:	1004c03a 	cmpne	r2,r2,zero
  814ca8:	10803fcc 	andi	r2,r2,255
}
  814cac:	e037883a 	mov	sp,fp
  814cb0:	df000017 	ldw	fp,0(sp)
  814cb4:	dec00104 	addi	sp,sp,4
  814cb8:	f800283a 	ret

00814cbc <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  814cbc:	defff504 	addi	sp,sp,-44
  814cc0:	dfc00a15 	stw	ra,40(sp)
  814cc4:	df000915 	stw	fp,36(sp)
  814cc8:	df000904 	addi	fp,sp,36
  814ccc:	e13ffc15 	stw	r4,-16(fp)
  814cd0:	e17ffd15 	stw	r5,-12(fp)
  814cd4:	e1bffe15 	stw	r6,-8(fp)
  814cd8:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
  814cdc:	00bffa84 	movi	r2,-22
  814ce0:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  814ce4:	e0bffd17 	ldw	r2,-12(fp)
  814ce8:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  814cec:	e0bff817 	ldw	r2,-32(fp)
  814cf0:	10800808 	cmpgei	r2,r2,32
  814cf4:	1000271e 	bne	r2,zero,814d94 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814cf8:	0005303a 	rdctl	r2,status
  814cfc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814d00:	e0fffb17 	ldw	r3,-20(fp)
  814d04:	00bfff84 	movi	r2,-2
  814d08:	1884703a 	and	r2,r3,r2
  814d0c:	1001703a 	wrctl	status,r2
  
  return context;
  814d10:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  814d14:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
  814d18:	008020b4 	movhi	r2,130
  814d1c:	10b23e04 	addi	r2,r2,-14088
  814d20:	e0fff817 	ldw	r3,-32(fp)
  814d24:	180690fa 	slli	r3,r3,3
  814d28:	10c5883a 	add	r2,r2,r3
  814d2c:	e0fffe17 	ldw	r3,-8(fp)
  814d30:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
  814d34:	008020b4 	movhi	r2,130
  814d38:	10b23e04 	addi	r2,r2,-14088
  814d3c:	e0fff817 	ldw	r3,-32(fp)
  814d40:	180690fa 	slli	r3,r3,3
  814d44:	10c5883a 	add	r2,r2,r3
  814d48:	10800104 	addi	r2,r2,4
  814d4c:	e0ffff17 	ldw	r3,-4(fp)
  814d50:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  814d54:	e0bffe17 	ldw	r2,-8(fp)
  814d58:	10000526 	beq	r2,zero,814d70 <alt_iic_isr_register+0xb4>
  814d5c:	e0bff817 	ldw	r2,-32(fp)
  814d60:	100b883a 	mov	r5,r2
  814d64:	e13ffc17 	ldw	r4,-16(fp)
  814d68:	0814b5c0 	call	814b5c <alt_ic_irq_enable>
  814d6c:	00000406 	br	814d80 <alt_iic_isr_register+0xc4>
  814d70:	e0bff817 	ldw	r2,-32(fp)
  814d74:	100b883a 	mov	r5,r2
  814d78:	e13ffc17 	ldw	r4,-16(fp)
  814d7c:	0814be40 	call	814be4 <alt_ic_irq_disable>
  814d80:	e0bff715 	stw	r2,-36(fp)
  814d84:	e0bffa17 	ldw	r2,-24(fp)
  814d88:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814d8c:	e0bff917 	ldw	r2,-28(fp)
  814d90:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  814d94:	e0bff717 	ldw	r2,-36(fp)
}
  814d98:	e037883a 	mov	sp,fp
  814d9c:	dfc00117 	ldw	ra,4(sp)
  814da0:	df000017 	ldw	fp,0(sp)
  814da4:	dec00204 	addi	sp,sp,8
  814da8:	f800283a 	ret

00814dac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  814dac:	defffe04 	addi	sp,sp,-8
  814db0:	dfc00115 	stw	ra,4(sp)
  814db4:	df000015 	stw	fp,0(sp)
  814db8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  814dbc:	d0a00b17 	ldw	r2,-32724(gp)
  814dc0:	10000326 	beq	r2,zero,814dd0 <alt_get_errno+0x24>
  814dc4:	d0a00b17 	ldw	r2,-32724(gp)
  814dc8:	103ee83a 	callr	r2
  814dcc:	00000106 	br	814dd4 <alt_get_errno+0x28>
  814dd0:	d0a75a04 	addi	r2,gp,-25240
}
  814dd4:	e037883a 	mov	sp,fp
  814dd8:	dfc00117 	ldw	ra,4(sp)
  814ddc:	df000017 	ldw	fp,0(sp)
  814de0:	dec00204 	addi	sp,sp,8
  814de4:	f800283a 	ret

00814de8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  814de8:	deffed04 	addi	sp,sp,-76
  814dec:	dfc01215 	stw	ra,72(sp)
  814df0:	df001115 	stw	fp,68(sp)
  814df4:	df001104 	addi	fp,sp,68
  814df8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  814dfc:	e0bfff17 	ldw	r2,-4(fp)
  814e00:	10000616 	blt	r2,zero,814e1c <isatty+0x34>
  814e04:	e0bfff17 	ldw	r2,-4(fp)
  814e08:	10c00324 	muli	r3,r2,12
  814e0c:	008020b4 	movhi	r2,130
  814e10:	10a5e104 	addi	r2,r2,-26748
  814e14:	1885883a 	add	r2,r3,r2
  814e18:	00000106 	br	814e20 <isatty+0x38>
  814e1c:	0005883a 	mov	r2,zero
  814e20:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
  814e24:	e0bfef17 	ldw	r2,-68(fp)
  814e28:	10000e26 	beq	r2,zero,814e64 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  814e2c:	e0bfef17 	ldw	r2,-68(fp)
  814e30:	10800017 	ldw	r2,0(r2)
  814e34:	10800817 	ldw	r2,32(r2)
  814e38:	1000021e 	bne	r2,zero,814e44 <isatty+0x5c>
    {
      return 1;
  814e3c:	00800044 	movi	r2,1
  814e40:	00000d06 	br	814e78 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  814e44:	e0bff004 	addi	r2,fp,-64
  814e48:	100b883a 	mov	r5,r2
  814e4c:	e13fff17 	ldw	r4,-4(fp)
  814e50:	0814a5c0 	call	814a5c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  814e54:	e0bff117 	ldw	r2,-60(fp)
  814e58:	10880020 	cmpeqi	r2,r2,8192
  814e5c:	10803fcc 	andi	r2,r2,255
  814e60:	00000506 	br	814e78 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  814e64:	0814dac0 	call	814dac <alt_get_errno>
  814e68:	1007883a 	mov	r3,r2
  814e6c:	00801444 	movi	r2,81
  814e70:	18800015 	stw	r2,0(r3)
    return 0;
  814e74:	0005883a 	mov	r2,zero
  }
}
  814e78:	e037883a 	mov	sp,fp
  814e7c:	dfc00117 	ldw	ra,4(sp)
  814e80:	df000017 	ldw	fp,0(sp)
  814e84:	dec00204 	addi	sp,sp,8
  814e88:	f800283a 	ret

00814e8c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  814e8c:	defffc04 	addi	sp,sp,-16
  814e90:	df000315 	stw	fp,12(sp)
  814e94:	df000304 	addi	fp,sp,12
  814e98:	e13ffd15 	stw	r4,-12(fp)
  814e9c:	e17ffe15 	stw	r5,-8(fp)
  814ea0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  814ea4:	e0fffe17 	ldw	r3,-8(fp)
  814ea8:	e0bffd17 	ldw	r2,-12(fp)
  814eac:	18800c26 	beq	r3,r2,814ee0 <alt_load_section+0x54>
  {
    while( to != end )
  814eb0:	00000806 	br	814ed4 <alt_load_section+0x48>
    {
      *to++ = *from++;
  814eb4:	e0bffe17 	ldw	r2,-8(fp)
  814eb8:	10c00104 	addi	r3,r2,4
  814ebc:	e0fffe15 	stw	r3,-8(fp)
  814ec0:	e0fffd17 	ldw	r3,-12(fp)
  814ec4:	19000104 	addi	r4,r3,4
  814ec8:	e13ffd15 	stw	r4,-12(fp)
  814ecc:	18c00017 	ldw	r3,0(r3)
  814ed0:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  814ed4:	e0fffe17 	ldw	r3,-8(fp)
  814ed8:	e0bfff17 	ldw	r2,-4(fp)
  814edc:	18bff51e 	bne	r3,r2,814eb4 <__alt_mem_onchip_mem+0xff80ceb4>
    {
      *to++ = *from++;
    }
  }
}
  814ee0:	0001883a 	nop
  814ee4:	e037883a 	mov	sp,fp
  814ee8:	df000017 	ldw	fp,0(sp)
  814eec:	dec00104 	addi	sp,sp,4
  814ef0:	f800283a 	ret

00814ef4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  814ef4:	defffe04 	addi	sp,sp,-8
  814ef8:	dfc00115 	stw	ra,4(sp)
  814efc:	df000015 	stw	fp,0(sp)
  814f00:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  814f04:	018020b4 	movhi	r6,130
  814f08:	31aae404 	addi	r6,r6,-21616
  814f0c:	014020b4 	movhi	r5,130
  814f10:	2963ae04 	addi	r5,r5,-29000
  814f14:	010020b4 	movhi	r4,130
  814f18:	212ae404 	addi	r4,r4,-21616
  814f1c:	0814e8c0 	call	814e8c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  814f20:	01802034 	movhi	r6,128
  814f24:	31809104 	addi	r6,r6,580
  814f28:	01402034 	movhi	r5,128
  814f2c:	29400804 	addi	r5,r5,32
  814f30:	01002034 	movhi	r4,128
  814f34:	21000804 	addi	r4,r4,32
  814f38:	0814e8c0 	call	814e8c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  814f3c:	018020b4 	movhi	r6,130
  814f40:	31a3ae04 	addi	r6,r6,-29000
  814f44:	014020b4 	movhi	r5,130
  814f48:	29623704 	addi	r5,r5,-30500
  814f4c:	010020b4 	movhi	r4,130
  814f50:	21223704 	addi	r4,r4,-30500
  814f54:	0814e8c0 	call	814e8c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  814f58:	0817a840 	call	817a84 <alt_dcache_flush_all>
  alt_icache_flush_all();
  814f5c:	0817c6c0 	call	817c6c <alt_icache_flush_all>
}
  814f60:	0001883a 	nop
  814f64:	e037883a 	mov	sp,fp
  814f68:	dfc00117 	ldw	ra,4(sp)
  814f6c:	df000017 	ldw	fp,0(sp)
  814f70:	dec00204 	addi	sp,sp,8
  814f74:	f800283a 	ret

00814f78 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  814f78:	defffe04 	addi	sp,sp,-8
  814f7c:	dfc00115 	stw	ra,4(sp)
  814f80:	df000015 	stw	fp,0(sp)
  814f84:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  814f88:	d0a00b17 	ldw	r2,-32724(gp)
  814f8c:	10000326 	beq	r2,zero,814f9c <alt_get_errno+0x24>
  814f90:	d0a00b17 	ldw	r2,-32724(gp)
  814f94:	103ee83a 	callr	r2
  814f98:	00000106 	br	814fa0 <alt_get_errno+0x28>
  814f9c:	d0a75a04 	addi	r2,gp,-25240
}
  814fa0:	e037883a 	mov	sp,fp
  814fa4:	dfc00117 	ldw	ra,4(sp)
  814fa8:	df000017 	ldw	fp,0(sp)
  814fac:	dec00204 	addi	sp,sp,8
  814fb0:	f800283a 	ret

00814fb4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  814fb4:	defff904 	addi	sp,sp,-28
  814fb8:	dfc00615 	stw	ra,24(sp)
  814fbc:	df000515 	stw	fp,20(sp)
  814fc0:	df000504 	addi	fp,sp,20
  814fc4:	e13ffd15 	stw	r4,-12(fp)
  814fc8:	e17ffe15 	stw	r5,-8(fp)
  814fcc:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  814fd0:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  814fd4:	e0bffd17 	ldw	r2,-12(fp)
  814fd8:	10000616 	blt	r2,zero,814ff4 <lseek+0x40>
  814fdc:	e0bffd17 	ldw	r2,-12(fp)
  814fe0:	10c00324 	muli	r3,r2,12
  814fe4:	008020b4 	movhi	r2,130
  814fe8:	10a5e104 	addi	r2,r2,-26748
  814fec:	1885883a 	add	r2,r3,r2
  814ff0:	00000106 	br	814ff8 <lseek+0x44>
  814ff4:	0005883a 	mov	r2,zero
  814ff8:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
  814ffc:	e0bffc17 	ldw	r2,-16(fp)
  815000:	10001026 	beq	r2,zero,815044 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  815004:	e0bffc17 	ldw	r2,-16(fp)
  815008:	10800017 	ldw	r2,0(r2)
  81500c:	10800717 	ldw	r2,28(r2)
  815010:	10000926 	beq	r2,zero,815038 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  815014:	e0bffc17 	ldw	r2,-16(fp)
  815018:	10800017 	ldw	r2,0(r2)
  81501c:	10800717 	ldw	r2,28(r2)
  815020:	e1bfff17 	ldw	r6,-4(fp)
  815024:	e17ffe17 	ldw	r5,-8(fp)
  815028:	e13ffc17 	ldw	r4,-16(fp)
  81502c:	103ee83a 	callr	r2
  815030:	e0bffb15 	stw	r2,-20(fp)
  815034:	00000506 	br	81504c <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  815038:	00bfde84 	movi	r2,-134
  81503c:	e0bffb15 	stw	r2,-20(fp)
  815040:	00000206 	br	81504c <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
  815044:	00bfebc4 	movi	r2,-81
  815048:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
  81504c:	e0bffb17 	ldw	r2,-20(fp)
  815050:	1000070e 	bge	r2,zero,815070 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
  815054:	0814f780 	call	814f78 <alt_get_errno>
  815058:	1007883a 	mov	r3,r2
  81505c:	e0bffb17 	ldw	r2,-20(fp)
  815060:	0085c83a 	sub	r2,zero,r2
  815064:	18800015 	stw	r2,0(r3)
    rc = -1;
  815068:	00bfffc4 	movi	r2,-1
  81506c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
  815070:	e0bffb17 	ldw	r2,-20(fp)
}
  815074:	e037883a 	mov	sp,fp
  815078:	dfc00117 	ldw	ra,4(sp)
  81507c:	df000017 	ldw	fp,0(sp)
  815080:	dec00204 	addi	sp,sp,8
  815084:	f800283a 	ret

00815088 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  815088:	defffd04 	addi	sp,sp,-12
  81508c:	dfc00215 	stw	ra,8(sp)
  815090:	df000115 	stw	fp,4(sp)
  815094:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  815098:	0009883a 	mov	r4,zero
  81509c:	08156a40 	call	8156a4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  8150a0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  8150a4:	08156dc0 	call	8156dc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  8150a8:	018020b4 	movhi	r6,130
  8150ac:	31a30004 	addi	r6,r6,-29696
  8150b0:	014020b4 	movhi	r5,130
  8150b4:	29630004 	addi	r5,r5,-29696
  8150b8:	010020b4 	movhi	r4,130
  8150bc:	21230004 	addi	r4,r4,-29696
  8150c0:	0817e000 	call	817e00 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  8150c4:	0817bac0 	call	817bac <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  8150c8:	01002074 	movhi	r4,129
  8150cc:	211f0304 	addi	r4,r4,31756
  8150d0:	08185480 	call	818548 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  8150d4:	d0a75c17 	ldw	r2,-25232(gp)
  8150d8:	d0e75d17 	ldw	r3,-25228(gp)
  8150dc:	d1275e17 	ldw	r4,-25224(gp)
  8150e0:	200d883a 	mov	r6,r4
  8150e4:	180b883a 	mov	r5,r3
  8150e8:	1009883a 	mov	r4,r2
  8150ec:	08006d40 	call	8006d4 <main>
  8150f0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  8150f4:	01000044 	movi	r4,1
  8150f8:	08149240 	call	814924 <close>
  exit (result);
  8150fc:	e13fff17 	ldw	r4,-4(fp)
  815100:	081855c0 	call	81855c <exit>

00815104 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  815104:	defffe04 	addi	sp,sp,-8
  815108:	df000115 	stw	fp,4(sp)
  81510c:	df000104 	addi	fp,sp,4
  815110:	e13fff15 	stw	r4,-4(fp)
}
  815114:	0001883a 	nop
  815118:	e037883a 	mov	sp,fp
  81511c:	df000017 	ldw	fp,0(sp)
  815120:	dec00104 	addi	sp,sp,4
  815124:	f800283a 	ret

00815128 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  815128:	defffe04 	addi	sp,sp,-8
  81512c:	df000115 	stw	fp,4(sp)
  815130:	df000104 	addi	fp,sp,4
  815134:	e13fff15 	stw	r4,-4(fp)
}
  815138:	0001883a 	nop
  81513c:	e037883a 	mov	sp,fp
  815140:	df000017 	ldw	fp,0(sp)
  815144:	dec00104 	addi	sp,sp,4
  815148:	f800283a 	ret

0081514c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81514c:	defffe04 	addi	sp,sp,-8
  815150:	dfc00115 	stw	ra,4(sp)
  815154:	df000015 	stw	fp,0(sp)
  815158:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  81515c:	d0a00b17 	ldw	r2,-32724(gp)
  815160:	10000326 	beq	r2,zero,815170 <alt_get_errno+0x24>
  815164:	d0a00b17 	ldw	r2,-32724(gp)
  815168:	103ee83a 	callr	r2
  81516c:	00000106 	br	815174 <alt_get_errno+0x28>
  815170:	d0a75a04 	addi	r2,gp,-25240
}
  815174:	e037883a 	mov	sp,fp
  815178:	dfc00117 	ldw	ra,4(sp)
  81517c:	df000017 	ldw	fp,0(sp)
  815180:	dec00204 	addi	sp,sp,8
  815184:	f800283a 	ret

00815188 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  815188:	defff904 	addi	sp,sp,-28
  81518c:	dfc00615 	stw	ra,24(sp)
  815190:	df000515 	stw	fp,20(sp)
  815194:	df000504 	addi	fp,sp,20
  815198:	e13ffd15 	stw	r4,-12(fp)
  81519c:	e17ffe15 	stw	r5,-8(fp)
  8151a0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8151a4:	e0bffd17 	ldw	r2,-12(fp)
  8151a8:	10000616 	blt	r2,zero,8151c4 <read+0x3c>
  8151ac:	e0bffd17 	ldw	r2,-12(fp)
  8151b0:	10c00324 	muli	r3,r2,12
  8151b4:	008020b4 	movhi	r2,130
  8151b8:	10a5e104 	addi	r2,r2,-26748
  8151bc:	1885883a 	add	r2,r3,r2
  8151c0:	00000106 	br	8151c8 <read+0x40>
  8151c4:	0005883a 	mov	r2,zero
  8151c8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  8151cc:	e0bffb17 	ldw	r2,-20(fp)
  8151d0:	10002226 	beq	r2,zero,81525c <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  8151d4:	e0bffb17 	ldw	r2,-20(fp)
  8151d8:	10800217 	ldw	r2,8(r2)
  8151dc:	108000cc 	andi	r2,r2,3
  8151e0:	10800060 	cmpeqi	r2,r2,1
  8151e4:	1000181e 	bne	r2,zero,815248 <read+0xc0>
        (fd->dev->read))
  8151e8:	e0bffb17 	ldw	r2,-20(fp)
  8151ec:	10800017 	ldw	r2,0(r2)
  8151f0:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  8151f4:	10001426 	beq	r2,zero,815248 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  8151f8:	e0bffb17 	ldw	r2,-20(fp)
  8151fc:	10800017 	ldw	r2,0(r2)
  815200:	10800517 	ldw	r2,20(r2)
  815204:	e0ffff17 	ldw	r3,-4(fp)
  815208:	180d883a 	mov	r6,r3
  81520c:	e17ffe17 	ldw	r5,-8(fp)
  815210:	e13ffb17 	ldw	r4,-20(fp)
  815214:	103ee83a 	callr	r2
  815218:	e0bffc15 	stw	r2,-16(fp)
  81521c:	e0bffc17 	ldw	r2,-16(fp)
  815220:	1000070e 	bge	r2,zero,815240 <read+0xb8>
        {
          ALT_ERRNO = -rval;
  815224:	081514c0 	call	81514c <alt_get_errno>
  815228:	1007883a 	mov	r3,r2
  81522c:	e0bffc17 	ldw	r2,-16(fp)
  815230:	0085c83a 	sub	r2,zero,r2
  815234:	18800015 	stw	r2,0(r3)
          return -1;
  815238:	00bfffc4 	movi	r2,-1
  81523c:	00000c06 	br	815270 <read+0xe8>
        }
        return rval;
  815240:	e0bffc17 	ldw	r2,-16(fp)
  815244:	00000a06 	br	815270 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
  815248:	081514c0 	call	81514c <alt_get_errno>
  81524c:	1007883a 	mov	r3,r2
  815250:	00800344 	movi	r2,13
  815254:	18800015 	stw	r2,0(r3)
  815258:	00000406 	br	81526c <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  81525c:	081514c0 	call	81514c <alt_get_errno>
  815260:	1007883a 	mov	r3,r2
  815264:	00801444 	movi	r2,81
  815268:	18800015 	stw	r2,0(r3)
  }
  return -1;
  81526c:	00bfffc4 	movi	r2,-1
}
  815270:	e037883a 	mov	sp,fp
  815274:	dfc00117 	ldw	ra,4(sp)
  815278:	df000017 	ldw	fp,0(sp)
  81527c:	dec00204 	addi	sp,sp,8
  815280:	f800283a 	ret

00815284 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  815284:	defffe04 	addi	sp,sp,-8
  815288:	df000115 	stw	fp,4(sp)
  81528c:	df000104 	addi	fp,sp,4
  815290:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  815294:	e0bfff17 	ldw	r2,-4(fp)
  815298:	108000d0 	cmplti	r2,r2,3
  81529c:	10000d1e 	bne	r2,zero,8152d4 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  8152a0:	008020b4 	movhi	r2,130
  8152a4:	10a5e104 	addi	r2,r2,-26748
  8152a8:	e0ffff17 	ldw	r3,-4(fp)
  8152ac:	18c00324 	muli	r3,r3,12
  8152b0:	10c5883a 	add	r2,r2,r3
  8152b4:	10800204 	addi	r2,r2,8
  8152b8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  8152bc:	008020b4 	movhi	r2,130
  8152c0:	10a5e104 	addi	r2,r2,-26748
  8152c4:	e0ffff17 	ldw	r3,-4(fp)
  8152c8:	18c00324 	muli	r3,r3,12
  8152cc:	10c5883a 	add	r2,r2,r3
  8152d0:	10000015 	stw	zero,0(r2)
  }
}
  8152d4:	0001883a 	nop
  8152d8:	e037883a 	mov	sp,fp
  8152dc:	df000017 	ldw	fp,0(sp)
  8152e0:	dec00104 	addi	sp,sp,4
  8152e4:	f800283a 	ret

008152e8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  8152e8:	defff904 	addi	sp,sp,-28
  8152ec:	df000615 	stw	fp,24(sp)
  8152f0:	df000604 	addi	fp,sp,24
  8152f4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8152f8:	0005303a 	rdctl	r2,status
  8152fc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  815300:	e0fffe17 	ldw	r3,-8(fp)
  815304:	00bfff84 	movi	r2,-2
  815308:	1884703a 	and	r2,r3,r2
  81530c:	1001703a 	wrctl	status,r2
  
  return context;
  815310:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  815314:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  815318:	d0a00d17 	ldw	r2,-32716(gp)
  81531c:	10c000c4 	addi	r3,r2,3
  815320:	00bfff04 	movi	r2,-4
  815324:	1884703a 	and	r2,r3,r2
  815328:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  81532c:	d0e00d17 	ldw	r3,-32716(gp)
  815330:	e0bfff17 	ldw	r2,-4(fp)
  815334:	1887883a 	add	r3,r3,r2
  815338:	00804034 	movhi	r2,256
  81533c:	10800004 	addi	r2,r2,0
  815340:	10c0062e 	bgeu	r2,r3,81535c <sbrk+0x74>
  815344:	e0bffb17 	ldw	r2,-20(fp)
  815348:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81534c:	e0bffa17 	ldw	r2,-24(fp)
  815350:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  815354:	00bfffc4 	movi	r2,-1
  815358:	00000b06 	br	815388 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
  81535c:	d0a00d17 	ldw	r2,-32716(gp)
  815360:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
  815364:	d0e00d17 	ldw	r3,-32716(gp)
  815368:	e0bfff17 	ldw	r2,-4(fp)
  81536c:	1885883a 	add	r2,r3,r2
  815370:	d0a00d15 	stw	r2,-32716(gp)
  815374:	e0bffb17 	ldw	r2,-20(fp)
  815378:	e0bffc15 	stw	r2,-16(fp)
  81537c:	e0bffc17 	ldw	r2,-16(fp)
  815380:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  815384:	e0bffd17 	ldw	r2,-12(fp)
} 
  815388:	e037883a 	mov	sp,fp
  81538c:	df000017 	ldw	fp,0(sp)
  815390:	dec00104 	addi	sp,sp,4
  815394:	f800283a 	ret

00815398 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  815398:	defffa04 	addi	sp,sp,-24
  81539c:	df000515 	stw	fp,20(sp)
  8153a0:	df000504 	addi	fp,sp,20
  8153a4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8153a8:	0005303a 	rdctl	r2,status
  8153ac:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8153b0:	e0fffc17 	ldw	r3,-16(fp)
  8153b4:	00bfff84 	movi	r2,-2
  8153b8:	1884703a 	and	r2,r3,r2
  8153bc:	1001703a 	wrctl	status,r2
  
  return context;
  8153c0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  8153c4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  8153c8:	e0bfff17 	ldw	r2,-4(fp)
  8153cc:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  8153d0:	e0bffd17 	ldw	r2,-12(fp)
  8153d4:	10800017 	ldw	r2,0(r2)
  8153d8:	e0fffd17 	ldw	r3,-12(fp)
  8153dc:	18c00117 	ldw	r3,4(r3)
  8153e0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  8153e4:	e0bffd17 	ldw	r2,-12(fp)
  8153e8:	10800117 	ldw	r2,4(r2)
  8153ec:	e0fffd17 	ldw	r3,-12(fp)
  8153f0:	18c00017 	ldw	r3,0(r3)
  8153f4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  8153f8:	e0bffd17 	ldw	r2,-12(fp)
  8153fc:	e0fffd17 	ldw	r3,-12(fp)
  815400:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  815404:	e0bffd17 	ldw	r2,-12(fp)
  815408:	e0fffd17 	ldw	r3,-12(fp)
  81540c:	10c00015 	stw	r3,0(r2)
  815410:	e0bffb17 	ldw	r2,-20(fp)
  815414:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815418:	e0bffe17 	ldw	r2,-8(fp)
  81541c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  815420:	0001883a 	nop
  815424:	e037883a 	mov	sp,fp
  815428:	df000017 	ldw	fp,0(sp)
  81542c:	dec00104 	addi	sp,sp,4
  815430:	f800283a 	ret

00815434 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  815434:	defffb04 	addi	sp,sp,-20
  815438:	dfc00415 	stw	ra,16(sp)
  81543c:	df000315 	stw	fp,12(sp)
  815440:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  815444:	d0a00e17 	ldw	r2,-32712(gp)
  815448:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  81544c:	d0a76017 	ldw	r2,-25216(gp)
  815450:	10800044 	addi	r2,r2,1
  815454:	d0a76015 	stw	r2,-25216(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  815458:	00002e06 	br	815514 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  81545c:	e0bffd17 	ldw	r2,-12(fp)
  815460:	10800017 	ldw	r2,0(r2)
  815464:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  815468:	e0bffd17 	ldw	r2,-12(fp)
  81546c:	10800403 	ldbu	r2,16(r2)
  815470:	10803fcc 	andi	r2,r2,255
  815474:	10000426 	beq	r2,zero,815488 <alt_tick+0x54>
  815478:	d0a76017 	ldw	r2,-25216(gp)
  81547c:	1000021e 	bne	r2,zero,815488 <alt_tick+0x54>
    {
      alarm->rollover = 0;
  815480:	e0bffd17 	ldw	r2,-12(fp)
  815484:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  815488:	e0bffd17 	ldw	r2,-12(fp)
  81548c:	10800217 	ldw	r2,8(r2)
  815490:	d0e76017 	ldw	r3,-25216(gp)
  815494:	18801d36 	bltu	r3,r2,81550c <alt_tick+0xd8>
  815498:	e0bffd17 	ldw	r2,-12(fp)
  81549c:	10800403 	ldbu	r2,16(r2)
  8154a0:	10803fcc 	andi	r2,r2,255
  8154a4:	1000191e 	bne	r2,zero,81550c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  8154a8:	e0bffd17 	ldw	r2,-12(fp)
  8154ac:	10800317 	ldw	r2,12(r2)
  8154b0:	e0fffd17 	ldw	r3,-12(fp)
  8154b4:	18c00517 	ldw	r3,20(r3)
  8154b8:	1809883a 	mov	r4,r3
  8154bc:	103ee83a 	callr	r2
  8154c0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  8154c4:	e0bfff17 	ldw	r2,-4(fp)
  8154c8:	1000031e 	bne	r2,zero,8154d8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  8154cc:	e13ffd17 	ldw	r4,-12(fp)
  8154d0:	08153980 	call	815398 <alt_alarm_stop>
  8154d4:	00000d06 	br	81550c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  8154d8:	e0bffd17 	ldw	r2,-12(fp)
  8154dc:	10c00217 	ldw	r3,8(r2)
  8154e0:	e0bfff17 	ldw	r2,-4(fp)
  8154e4:	1887883a 	add	r3,r3,r2
  8154e8:	e0bffd17 	ldw	r2,-12(fp)
  8154ec:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  8154f0:	e0bffd17 	ldw	r2,-12(fp)
  8154f4:	10c00217 	ldw	r3,8(r2)
  8154f8:	d0a76017 	ldw	r2,-25216(gp)
  8154fc:	1880032e 	bgeu	r3,r2,81550c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  815500:	e0bffd17 	ldw	r2,-12(fp)
  815504:	00c00044 	movi	r3,1
  815508:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  81550c:	e0bffe17 	ldw	r2,-8(fp)
  815510:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  815514:	e0fffd17 	ldw	r3,-12(fp)
  815518:	d0a00e04 	addi	r2,gp,-32712
  81551c:	18bfcf1e 	bne	r3,r2,81545c <__alt_mem_onchip_mem+0xff80d45c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  815520:	0001883a 	nop
}
  815524:	0001883a 	nop
  815528:	e037883a 	mov	sp,fp
  81552c:	dfc00117 	ldw	ra,4(sp)
  815530:	df000017 	ldw	fp,0(sp)
  815534:	dec00204 	addi	sp,sp,8
  815538:	f800283a 	ret

0081553c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81553c:	defffe04 	addi	sp,sp,-8
  815540:	dfc00115 	stw	ra,4(sp)
  815544:	df000015 	stw	fp,0(sp)
  815548:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  81554c:	d0a00b17 	ldw	r2,-32724(gp)
  815550:	10000326 	beq	r2,zero,815560 <alt_get_errno+0x24>
  815554:	d0a00b17 	ldw	r2,-32724(gp)
  815558:	103ee83a 	callr	r2
  81555c:	00000106 	br	815564 <alt_get_errno+0x28>
  815560:	d0a75a04 	addi	r2,gp,-25240
}
  815564:	e037883a 	mov	sp,fp
  815568:	dfc00117 	ldw	ra,4(sp)
  81556c:	df000017 	ldw	fp,0(sp)
  815570:	dec00204 	addi	sp,sp,8
  815574:	f800283a 	ret

00815578 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  815578:	defff904 	addi	sp,sp,-28
  81557c:	dfc00615 	stw	ra,24(sp)
  815580:	df000515 	stw	fp,20(sp)
  815584:	df000504 	addi	fp,sp,20
  815588:	e13ffd15 	stw	r4,-12(fp)
  81558c:	e17ffe15 	stw	r5,-8(fp)
  815590:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  815594:	e0bffd17 	ldw	r2,-12(fp)
  815598:	10000616 	blt	r2,zero,8155b4 <write+0x3c>
  81559c:	e0bffd17 	ldw	r2,-12(fp)
  8155a0:	10c00324 	muli	r3,r2,12
  8155a4:	008020b4 	movhi	r2,130
  8155a8:	10a5e104 	addi	r2,r2,-26748
  8155ac:	1885883a 	add	r2,r3,r2
  8155b0:	00000106 	br	8155b8 <write+0x40>
  8155b4:	0005883a 	mov	r2,zero
  8155b8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  8155bc:	e0bffb17 	ldw	r2,-20(fp)
  8155c0:	10002126 	beq	r2,zero,815648 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  8155c4:	e0bffb17 	ldw	r2,-20(fp)
  8155c8:	10800217 	ldw	r2,8(r2)
  8155cc:	108000cc 	andi	r2,r2,3
  8155d0:	10001826 	beq	r2,zero,815634 <write+0xbc>
  8155d4:	e0bffb17 	ldw	r2,-20(fp)
  8155d8:	10800017 	ldw	r2,0(r2)
  8155dc:	10800617 	ldw	r2,24(r2)
  8155e0:	10001426 	beq	r2,zero,815634 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  8155e4:	e0bffb17 	ldw	r2,-20(fp)
  8155e8:	10800017 	ldw	r2,0(r2)
  8155ec:	10800617 	ldw	r2,24(r2)
  8155f0:	e0ffff17 	ldw	r3,-4(fp)
  8155f4:	180d883a 	mov	r6,r3
  8155f8:	e17ffe17 	ldw	r5,-8(fp)
  8155fc:	e13ffb17 	ldw	r4,-20(fp)
  815600:	103ee83a 	callr	r2
  815604:	e0bffc15 	stw	r2,-16(fp)
  815608:	e0bffc17 	ldw	r2,-16(fp)
  81560c:	1000070e 	bge	r2,zero,81562c <write+0xb4>
      {
        ALT_ERRNO = -rval;
  815610:	081553c0 	call	81553c <alt_get_errno>
  815614:	1007883a 	mov	r3,r2
  815618:	e0bffc17 	ldw	r2,-16(fp)
  81561c:	0085c83a 	sub	r2,zero,r2
  815620:	18800015 	stw	r2,0(r3)
        return -1;
  815624:	00bfffc4 	movi	r2,-1
  815628:	00000c06 	br	81565c <write+0xe4>
      }
      return rval;
  81562c:	e0bffc17 	ldw	r2,-16(fp)
  815630:	00000a06 	br	81565c <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
  815634:	081553c0 	call	81553c <alt_get_errno>
  815638:	1007883a 	mov	r3,r2
  81563c:	00800344 	movi	r2,13
  815640:	18800015 	stw	r2,0(r3)
  815644:	00000406 	br	815658 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  815648:	081553c0 	call	81553c <alt_get_errno>
  81564c:	1007883a 	mov	r3,r2
  815650:	00801444 	movi	r2,81
  815654:	18800015 	stw	r2,0(r3)
  }
  return -1;
  815658:	00bfffc4 	movi	r2,-1
}
  81565c:	e037883a 	mov	sp,fp
  815660:	dfc00117 	ldw	ra,4(sp)
  815664:	df000017 	ldw	fp,0(sp)
  815668:	dec00204 	addi	sp,sp,8
  81566c:	f800283a 	ret

00815670 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  815670:	defffd04 	addi	sp,sp,-12
  815674:	dfc00215 	stw	ra,8(sp)
  815678:	df000115 	stw	fp,4(sp)
  81567c:	df000104 	addi	fp,sp,4
  815680:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  815684:	d1600804 	addi	r5,gp,-32736
  815688:	e13fff17 	ldw	r4,-4(fp)
  81568c:	0817b080 	call	817b08 <alt_dev_llist_insert>
}
  815690:	e037883a 	mov	sp,fp
  815694:	dfc00117 	ldw	ra,4(sp)
  815698:	df000017 	ldw	fp,0(sp)
  81569c:	dec00204 	addi	sp,sp,8
  8156a0:	f800283a 	ret

008156a4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  8156a4:	defffd04 	addi	sp,sp,-12
  8156a8:	dfc00215 	stw	ra,8(sp)
  8156ac:	df000115 	stw	fp,4(sp)
  8156b0:	df000104 	addi	fp,sp,4
  8156b4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
  8156b8:	08181000 	call	818100 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  8156bc:	00800044 	movi	r2,1
  8156c0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  8156c4:	0001883a 	nop
  8156c8:	e037883a 	mov	sp,fp
  8156cc:	dfc00117 	ldw	ra,4(sp)
  8156d0:	df000017 	ldw	fp,0(sp)
  8156d4:	dec00204 	addi	sp,sp,8
  8156d8:	f800283a 	ret

008156dc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  8156dc:	defffe04 	addi	sp,sp,-8
  8156e0:	dfc00115 	stw	ra,4(sp)
  8156e4:	df000015 	stw	fp,0(sp)
  8156e8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  8156ec:	01c0fa04 	movi	r7,1000
  8156f0:	01800084 	movi	r6,2
  8156f4:	000b883a 	mov	r5,zero
  8156f8:	01004074 	movhi	r4,257
  8156fc:	21040804 	addi	r4,r4,4128
  815700:	08171300 	call	817130 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  815704:	01800044 	movi	r6,1
  815708:	000b883a 	mov	r5,zero
  81570c:	010020b4 	movhi	r4,130
  815710:	21264b04 	addi	r4,r4,-26324
  815714:	08158d80 	call	8158d8 <altera_avalon_jtag_uart_init>
  815718:	010020b4 	movhi	r4,130
  81571c:	21264104 	addi	r4,r4,-26364
  815720:	08156700 	call	815670 <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD, lcd);
  815724:	010020b4 	movhi	r4,130
  815728:	212a6304 	addi	r4,r4,-22132
  81572c:	0816f240 	call	816f24 <altera_avalon_lcd_16207_init>
  815730:	010020b4 	movhi	r4,130
  815734:	212a5904 	addi	r4,r4,-22172
  815738:	08156700 	call	815670 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( UART, uart);
  81573c:	000d883a 	mov	r6,zero
  815740:	000b883a 	mov	r5,zero
  815744:	010020b4 	movhi	r4,130
  815748:	212aab04 	addi	r4,r4,-21844
  81574c:	08172bc0 	call	8172bc <altera_avalon_uart_init>
  815750:	010020b4 	movhi	r4,130
  815754:	212aa104 	addi	r4,r4,-21884
  815758:	08156700 	call	815670 <alt_dev_reg>
}
  81575c:	0001883a 	nop
  815760:	e037883a 	mov	sp,fp
  815764:	dfc00117 	ldw	ra,4(sp)
  815768:	df000017 	ldw	fp,0(sp)
  81576c:	dec00204 	addi	sp,sp,8
  815770:	f800283a 	ret

00815774 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  815774:	defffa04 	addi	sp,sp,-24
  815778:	dfc00515 	stw	ra,20(sp)
  81577c:	df000415 	stw	fp,16(sp)
  815780:	df000404 	addi	fp,sp,16
  815784:	e13ffd15 	stw	r4,-12(fp)
  815788:	e17ffe15 	stw	r5,-8(fp)
  81578c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  815790:	e0bffd17 	ldw	r2,-12(fp)
  815794:	10800017 	ldw	r2,0(r2)
  815798:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  81579c:	e0bffc17 	ldw	r2,-16(fp)
  8157a0:	10c00a04 	addi	r3,r2,40
  8157a4:	e0bffd17 	ldw	r2,-12(fp)
  8157a8:	10800217 	ldw	r2,8(r2)
  8157ac:	100f883a 	mov	r7,r2
  8157b0:	e1bfff17 	ldw	r6,-4(fp)
  8157b4:	e17ffe17 	ldw	r5,-8(fp)
  8157b8:	1809883a 	mov	r4,r3
  8157bc:	0815d9c0 	call	815d9c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  8157c0:	e037883a 	mov	sp,fp
  8157c4:	dfc00117 	ldw	ra,4(sp)
  8157c8:	df000017 	ldw	fp,0(sp)
  8157cc:	dec00204 	addi	sp,sp,8
  8157d0:	f800283a 	ret

008157d4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  8157d4:	defffa04 	addi	sp,sp,-24
  8157d8:	dfc00515 	stw	ra,20(sp)
  8157dc:	df000415 	stw	fp,16(sp)
  8157e0:	df000404 	addi	fp,sp,16
  8157e4:	e13ffd15 	stw	r4,-12(fp)
  8157e8:	e17ffe15 	stw	r5,-8(fp)
  8157ec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  8157f0:	e0bffd17 	ldw	r2,-12(fp)
  8157f4:	10800017 	ldw	r2,0(r2)
  8157f8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  8157fc:	e0bffc17 	ldw	r2,-16(fp)
  815800:	10c00a04 	addi	r3,r2,40
  815804:	e0bffd17 	ldw	r2,-12(fp)
  815808:	10800217 	ldw	r2,8(r2)
  81580c:	100f883a 	mov	r7,r2
  815810:	e1bfff17 	ldw	r6,-4(fp)
  815814:	e17ffe17 	ldw	r5,-8(fp)
  815818:	1809883a 	mov	r4,r3
  81581c:	0815fb80 	call	815fb8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  815820:	e037883a 	mov	sp,fp
  815824:	dfc00117 	ldw	ra,4(sp)
  815828:	df000017 	ldw	fp,0(sp)
  81582c:	dec00204 	addi	sp,sp,8
  815830:	f800283a 	ret

00815834 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  815834:	defffc04 	addi	sp,sp,-16
  815838:	dfc00315 	stw	ra,12(sp)
  81583c:	df000215 	stw	fp,8(sp)
  815840:	df000204 	addi	fp,sp,8
  815844:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  815848:	e0bfff17 	ldw	r2,-4(fp)
  81584c:	10800017 	ldw	r2,0(r2)
  815850:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  815854:	e0bffe17 	ldw	r2,-8(fp)
  815858:	10c00a04 	addi	r3,r2,40
  81585c:	e0bfff17 	ldw	r2,-4(fp)
  815860:	10800217 	ldw	r2,8(r2)
  815864:	100b883a 	mov	r5,r2
  815868:	1809883a 	mov	r4,r3
  81586c:	0815c440 	call	815c44 <altera_avalon_jtag_uart_close>
}
  815870:	e037883a 	mov	sp,fp
  815874:	dfc00117 	ldw	ra,4(sp)
  815878:	df000017 	ldw	fp,0(sp)
  81587c:	dec00204 	addi	sp,sp,8
  815880:	f800283a 	ret

00815884 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  815884:	defffa04 	addi	sp,sp,-24
  815888:	dfc00515 	stw	ra,20(sp)
  81588c:	df000415 	stw	fp,16(sp)
  815890:	df000404 	addi	fp,sp,16
  815894:	e13ffd15 	stw	r4,-12(fp)
  815898:	e17ffe15 	stw	r5,-8(fp)
  81589c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  8158a0:	e0bffd17 	ldw	r2,-12(fp)
  8158a4:	10800017 	ldw	r2,0(r2)
  8158a8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  8158ac:	e0bffc17 	ldw	r2,-16(fp)
  8158b0:	10800a04 	addi	r2,r2,40
  8158b4:	e1bfff17 	ldw	r6,-4(fp)
  8158b8:	e17ffe17 	ldw	r5,-8(fp)
  8158bc:	1009883a 	mov	r4,r2
  8158c0:	0815cac0 	call	815cac <altera_avalon_jtag_uart_ioctl>
}
  8158c4:	e037883a 	mov	sp,fp
  8158c8:	dfc00117 	ldw	ra,4(sp)
  8158cc:	df000017 	ldw	fp,0(sp)
  8158d0:	dec00204 	addi	sp,sp,8
  8158d4:	f800283a 	ret

008158d8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  8158d8:	defffa04 	addi	sp,sp,-24
  8158dc:	dfc00515 	stw	ra,20(sp)
  8158e0:	df000415 	stw	fp,16(sp)
  8158e4:	df000404 	addi	fp,sp,16
  8158e8:	e13ffd15 	stw	r4,-12(fp)
  8158ec:	e17ffe15 	stw	r5,-8(fp)
  8158f0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  8158f4:	e0bffd17 	ldw	r2,-12(fp)
  8158f8:	00c00044 	movi	r3,1
  8158fc:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  815900:	e0bffd17 	ldw	r2,-12(fp)
  815904:	10800017 	ldw	r2,0(r2)
  815908:	10800104 	addi	r2,r2,4
  81590c:	1007883a 	mov	r3,r2
  815910:	e0bffd17 	ldw	r2,-12(fp)
  815914:	10800817 	ldw	r2,32(r2)
  815918:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  81591c:	e0bffe17 	ldw	r2,-8(fp)
  815920:	e0ffff17 	ldw	r3,-4(fp)
  815924:	d8000015 	stw	zero,0(sp)
  815928:	e1fffd17 	ldw	r7,-12(fp)
  81592c:	01802074 	movhi	r6,129
  815930:	31966604 	addi	r6,r6,22936
  815934:	180b883a 	mov	r5,r3
  815938:	1009883a 	mov	r4,r2
  81593c:	0814b0c0 	call	814b0c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  815940:	e0bffd17 	ldw	r2,-12(fp)
  815944:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  815948:	e0bffd17 	ldw	r2,-12(fp)
  81594c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  815950:	d0e75f17 	ldw	r3,-25220(gp)
  815954:	e1fffd17 	ldw	r7,-12(fp)
  815958:	01802074 	movhi	r6,129
  81595c:	3196e904 	addi	r6,r6,23460
  815960:	180b883a 	mov	r5,r3
  815964:	1009883a 	mov	r4,r2
  815968:	08147bc0 	call	8147bc <alt_alarm_start>
  81596c:	1000040e 	bge	r2,zero,815980 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  815970:	e0fffd17 	ldw	r3,-12(fp)
  815974:	00a00034 	movhi	r2,32768
  815978:	10bfffc4 	addi	r2,r2,-1
  81597c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  815980:	0001883a 	nop
  815984:	e037883a 	mov	sp,fp
  815988:	dfc00117 	ldw	ra,4(sp)
  81598c:	df000017 	ldw	fp,0(sp)
  815990:	dec00204 	addi	sp,sp,8
  815994:	f800283a 	ret

00815998 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  815998:	defff804 	addi	sp,sp,-32
  81599c:	df000715 	stw	fp,28(sp)
  8159a0:	df000704 	addi	fp,sp,28
  8159a4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  8159a8:	e0bfff17 	ldw	r2,-4(fp)
  8159ac:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
  8159b0:	e0bffb17 	ldw	r2,-20(fp)
  8159b4:	10800017 	ldw	r2,0(r2)
  8159b8:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  8159bc:	e0bffc17 	ldw	r2,-16(fp)
  8159c0:	10800104 	addi	r2,r2,4
  8159c4:	10800037 	ldwio	r2,0(r2)
  8159c8:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  8159cc:	e0bffd17 	ldw	r2,-12(fp)
  8159d0:	1080c00c 	andi	r2,r2,768
  8159d4:	10006d26 	beq	r2,zero,815b8c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  8159d8:	e0bffd17 	ldw	r2,-12(fp)
  8159dc:	1080400c 	andi	r2,r2,256
  8159e0:	10003526 	beq	r2,zero,815ab8 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  8159e4:	00800074 	movhi	r2,1
  8159e8:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8159ec:	e0bffb17 	ldw	r2,-20(fp)
  8159f0:	10800a17 	ldw	r2,40(r2)
  8159f4:	10800044 	addi	r2,r2,1
  8159f8:	1081ffcc 	andi	r2,r2,2047
  8159fc:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
  815a00:	e0bffb17 	ldw	r2,-20(fp)
  815a04:	10c00b17 	ldw	r3,44(r2)
  815a08:	e0bffe17 	ldw	r2,-8(fp)
  815a0c:	18801526 	beq	r3,r2,815a64 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  815a10:	e0bffc17 	ldw	r2,-16(fp)
  815a14:	10800037 	ldwio	r2,0(r2)
  815a18:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  815a1c:	e0bff917 	ldw	r2,-28(fp)
  815a20:	10a0000c 	andi	r2,r2,32768
  815a24:	10001126 	beq	r2,zero,815a6c <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  815a28:	e0bffb17 	ldw	r2,-20(fp)
  815a2c:	10800a17 	ldw	r2,40(r2)
  815a30:	e0fff917 	ldw	r3,-28(fp)
  815a34:	1809883a 	mov	r4,r3
  815a38:	e0fffb17 	ldw	r3,-20(fp)
  815a3c:	1885883a 	add	r2,r3,r2
  815a40:	10800e04 	addi	r2,r2,56
  815a44:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  815a48:	e0bffb17 	ldw	r2,-20(fp)
  815a4c:	10800a17 	ldw	r2,40(r2)
  815a50:	10800044 	addi	r2,r2,1
  815a54:	10c1ffcc 	andi	r3,r2,2047
  815a58:	e0bffb17 	ldw	r2,-20(fp)
  815a5c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  815a60:	003fe206 	br	8159ec <__alt_mem_onchip_mem+0xff80d9ec>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
  815a64:	0001883a 	nop
  815a68:	00000106 	br	815a70 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
  815a6c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  815a70:	e0bff917 	ldw	r2,-28(fp)
  815a74:	10bfffec 	andhi	r2,r2,65535
  815a78:	10000f26 	beq	r2,zero,815ab8 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  815a7c:	e0bffb17 	ldw	r2,-20(fp)
  815a80:	10c00817 	ldw	r3,32(r2)
  815a84:	00bfff84 	movi	r2,-2
  815a88:	1886703a 	and	r3,r3,r2
  815a8c:	e0bffb17 	ldw	r2,-20(fp)
  815a90:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  815a94:	e0bffc17 	ldw	r2,-16(fp)
  815a98:	10800104 	addi	r2,r2,4
  815a9c:	1007883a 	mov	r3,r2
  815aa0:	e0bffb17 	ldw	r2,-20(fp)
  815aa4:	10800817 	ldw	r2,32(r2)
  815aa8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  815aac:	e0bffc17 	ldw	r2,-16(fp)
  815ab0:	10800104 	addi	r2,r2,4
  815ab4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  815ab8:	e0bffd17 	ldw	r2,-12(fp)
  815abc:	1080800c 	andi	r2,r2,512
  815ac0:	103fbe26 	beq	r2,zero,8159bc <__alt_mem_onchip_mem+0xff80d9bc>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  815ac4:	e0bffd17 	ldw	r2,-12(fp)
  815ac8:	1004d43a 	srli	r2,r2,16
  815acc:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  815ad0:	00001406 	br	815b24 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  815ad4:	e0bffc17 	ldw	r2,-16(fp)
  815ad8:	e0fffb17 	ldw	r3,-20(fp)
  815adc:	18c00d17 	ldw	r3,52(r3)
  815ae0:	e13ffb17 	ldw	r4,-20(fp)
  815ae4:	20c7883a 	add	r3,r4,r3
  815ae8:	18c20e04 	addi	r3,r3,2104
  815aec:	18c00003 	ldbu	r3,0(r3)
  815af0:	18c03fcc 	andi	r3,r3,255
  815af4:	18c0201c 	xori	r3,r3,128
  815af8:	18ffe004 	addi	r3,r3,-128
  815afc:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  815b00:	e0bffb17 	ldw	r2,-20(fp)
  815b04:	10800d17 	ldw	r2,52(r2)
  815b08:	10800044 	addi	r2,r2,1
  815b0c:	10c1ffcc 	andi	r3,r2,2047
  815b10:	e0bffb17 	ldw	r2,-20(fp)
  815b14:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  815b18:	e0bffa17 	ldw	r2,-24(fp)
  815b1c:	10bfffc4 	addi	r2,r2,-1
  815b20:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  815b24:	e0bffa17 	ldw	r2,-24(fp)
  815b28:	10000526 	beq	r2,zero,815b40 <altera_avalon_jtag_uart_irq+0x1a8>
  815b2c:	e0bffb17 	ldw	r2,-20(fp)
  815b30:	10c00d17 	ldw	r3,52(r2)
  815b34:	e0bffb17 	ldw	r2,-20(fp)
  815b38:	10800c17 	ldw	r2,48(r2)
  815b3c:	18bfe51e 	bne	r3,r2,815ad4 <__alt_mem_onchip_mem+0xff80dad4>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  815b40:	e0bffa17 	ldw	r2,-24(fp)
  815b44:	103f9d26 	beq	r2,zero,8159bc <__alt_mem_onchip_mem+0xff80d9bc>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  815b48:	e0bffb17 	ldw	r2,-20(fp)
  815b4c:	10c00817 	ldw	r3,32(r2)
  815b50:	00bfff44 	movi	r2,-3
  815b54:	1886703a 	and	r3,r3,r2
  815b58:	e0bffb17 	ldw	r2,-20(fp)
  815b5c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  815b60:	e0bffb17 	ldw	r2,-20(fp)
  815b64:	10800017 	ldw	r2,0(r2)
  815b68:	10800104 	addi	r2,r2,4
  815b6c:	1007883a 	mov	r3,r2
  815b70:	e0bffb17 	ldw	r2,-20(fp)
  815b74:	10800817 	ldw	r2,32(r2)
  815b78:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  815b7c:	e0bffc17 	ldw	r2,-16(fp)
  815b80:	10800104 	addi	r2,r2,4
  815b84:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  815b88:	003f8c06 	br	8159bc <__alt_mem_onchip_mem+0xff80d9bc>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
  815b8c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
  815b90:	0001883a 	nop
  815b94:	e037883a 	mov	sp,fp
  815b98:	df000017 	ldw	fp,0(sp)
  815b9c:	dec00104 	addi	sp,sp,4
  815ba0:	f800283a 	ret

00815ba4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  815ba4:	defff804 	addi	sp,sp,-32
  815ba8:	df000715 	stw	fp,28(sp)
  815bac:	df000704 	addi	fp,sp,28
  815bb0:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  815bb4:	e0bffb17 	ldw	r2,-20(fp)
  815bb8:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  815bbc:	e0bff917 	ldw	r2,-28(fp)
  815bc0:	10800017 	ldw	r2,0(r2)
  815bc4:	10800104 	addi	r2,r2,4
  815bc8:	10800037 	ldwio	r2,0(r2)
  815bcc:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  815bd0:	e0bffa17 	ldw	r2,-24(fp)
  815bd4:	1081000c 	andi	r2,r2,1024
  815bd8:	10000b26 	beq	r2,zero,815c08 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  815bdc:	e0bff917 	ldw	r2,-28(fp)
  815be0:	10800017 	ldw	r2,0(r2)
  815be4:	10800104 	addi	r2,r2,4
  815be8:	1007883a 	mov	r3,r2
  815bec:	e0bff917 	ldw	r2,-28(fp)
  815bf0:	10800817 	ldw	r2,32(r2)
  815bf4:	10810014 	ori	r2,r2,1024
  815bf8:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  815bfc:	e0bff917 	ldw	r2,-28(fp)
  815c00:	10000915 	stw	zero,36(r2)
  815c04:	00000a06 	br	815c30 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  815c08:	e0bff917 	ldw	r2,-28(fp)
  815c0c:	10c00917 	ldw	r3,36(r2)
  815c10:	00a00034 	movhi	r2,32768
  815c14:	10bfff04 	addi	r2,r2,-4
  815c18:	10c00536 	bltu	r2,r3,815c30 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
  815c1c:	e0bff917 	ldw	r2,-28(fp)
  815c20:	10800917 	ldw	r2,36(r2)
  815c24:	10c00044 	addi	r3,r2,1
  815c28:	e0bff917 	ldw	r2,-28(fp)
  815c2c:	10c00915 	stw	r3,36(r2)
  815c30:	d0a75f17 	ldw	r2,-25220(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  815c34:	e037883a 	mov	sp,fp
  815c38:	df000017 	ldw	fp,0(sp)
  815c3c:	dec00104 	addi	sp,sp,4
  815c40:	f800283a 	ret

00815c44 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  815c44:	defffd04 	addi	sp,sp,-12
  815c48:	df000215 	stw	fp,8(sp)
  815c4c:	df000204 	addi	fp,sp,8
  815c50:	e13ffe15 	stw	r4,-8(fp)
  815c54:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  815c58:	00000506 	br	815c70 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  815c5c:	e0bfff17 	ldw	r2,-4(fp)
  815c60:	1090000c 	andi	r2,r2,16384
  815c64:	10000226 	beq	r2,zero,815c70 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  815c68:	00bffd44 	movi	r2,-11
  815c6c:	00000b06 	br	815c9c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  815c70:	e0bffe17 	ldw	r2,-8(fp)
  815c74:	10c00d17 	ldw	r3,52(r2)
  815c78:	e0bffe17 	ldw	r2,-8(fp)
  815c7c:	10800c17 	ldw	r2,48(r2)
  815c80:	18800526 	beq	r3,r2,815c98 <altera_avalon_jtag_uart_close+0x54>
  815c84:	e0bffe17 	ldw	r2,-8(fp)
  815c88:	10c00917 	ldw	r3,36(r2)
  815c8c:	e0bffe17 	ldw	r2,-8(fp)
  815c90:	10800117 	ldw	r2,4(r2)
  815c94:	18bff136 	bltu	r3,r2,815c5c <__alt_mem_onchip_mem+0xff80dc5c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  815c98:	0005883a 	mov	r2,zero
}
  815c9c:	e037883a 	mov	sp,fp
  815ca0:	df000017 	ldw	fp,0(sp)
  815ca4:	dec00104 	addi	sp,sp,4
  815ca8:	f800283a 	ret

00815cac <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  815cac:	defffa04 	addi	sp,sp,-24
  815cb0:	df000515 	stw	fp,20(sp)
  815cb4:	df000504 	addi	fp,sp,20
  815cb8:	e13ffd15 	stw	r4,-12(fp)
  815cbc:	e17ffe15 	stw	r5,-8(fp)
  815cc0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
  815cc4:	00bff9c4 	movi	r2,-25
  815cc8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
  815ccc:	e0bffe17 	ldw	r2,-8(fp)
  815cd0:	10da8060 	cmpeqi	r3,r2,27137
  815cd4:	1800031e 	bne	r3,zero,815ce4 <altera_avalon_jtag_uart_ioctl+0x38>
  815cd8:	109a80a0 	cmpeqi	r2,r2,27138
  815cdc:	1000181e 	bne	r2,zero,815d40 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
  815ce0:	00002906 	br	815d88 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  815ce4:	e0bffd17 	ldw	r2,-12(fp)
  815ce8:	10c00117 	ldw	r3,4(r2)
  815cec:	00a00034 	movhi	r2,32768
  815cf0:	10bfffc4 	addi	r2,r2,-1
  815cf4:	18802126 	beq	r3,r2,815d7c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
  815cf8:	e0bfff17 	ldw	r2,-4(fp)
  815cfc:	10800017 	ldw	r2,0(r2)
  815d00:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  815d04:	e0bffc17 	ldw	r2,-16(fp)
  815d08:	10800090 	cmplti	r2,r2,2
  815d0c:	1000061e 	bne	r2,zero,815d28 <altera_avalon_jtag_uart_ioctl+0x7c>
  815d10:	e0fffc17 	ldw	r3,-16(fp)
  815d14:	00a00034 	movhi	r2,32768
  815d18:	10bfffc4 	addi	r2,r2,-1
  815d1c:	18800226 	beq	r3,r2,815d28 <altera_avalon_jtag_uart_ioctl+0x7c>
  815d20:	e0bffc17 	ldw	r2,-16(fp)
  815d24:	00000206 	br	815d30 <altera_avalon_jtag_uart_ioctl+0x84>
  815d28:	00a00034 	movhi	r2,32768
  815d2c:	10bfff84 	addi	r2,r2,-2
  815d30:	e0fffd17 	ldw	r3,-12(fp)
  815d34:	18800115 	stw	r2,4(r3)
      rc = 0;
  815d38:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  815d3c:	00000f06 	br	815d7c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  815d40:	e0bffd17 	ldw	r2,-12(fp)
  815d44:	10c00117 	ldw	r3,4(r2)
  815d48:	00a00034 	movhi	r2,32768
  815d4c:	10bfffc4 	addi	r2,r2,-1
  815d50:	18800c26 	beq	r3,r2,815d84 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  815d54:	e0bffd17 	ldw	r2,-12(fp)
  815d58:	10c00917 	ldw	r3,36(r2)
  815d5c:	e0bffd17 	ldw	r2,-12(fp)
  815d60:	10800117 	ldw	r2,4(r2)
  815d64:	1885803a 	cmpltu	r2,r3,r2
  815d68:	10c03fcc 	andi	r3,r2,255
  815d6c:	e0bfff17 	ldw	r2,-4(fp)
  815d70:	10c00015 	stw	r3,0(r2)
      rc = 0;
  815d74:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  815d78:	00000206 	br	815d84 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
  815d7c:	0001883a 	nop
  815d80:	00000106 	br	815d88 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
  815d84:	0001883a 	nop

  default:
    break;
  }

  return rc;
  815d88:	e0bffb17 	ldw	r2,-20(fp)
}
  815d8c:	e037883a 	mov	sp,fp
  815d90:	df000017 	ldw	fp,0(sp)
  815d94:	dec00104 	addi	sp,sp,4
  815d98:	f800283a 	ret

00815d9c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  815d9c:	defff304 	addi	sp,sp,-52
  815da0:	dfc00c15 	stw	ra,48(sp)
  815da4:	df000b15 	stw	fp,44(sp)
  815da8:	df000b04 	addi	fp,sp,44
  815dac:	e13ffc15 	stw	r4,-16(fp)
  815db0:	e17ffd15 	stw	r5,-12(fp)
  815db4:	e1bffe15 	stw	r6,-8(fp)
  815db8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
  815dbc:	e0bffd17 	ldw	r2,-12(fp)
  815dc0:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  815dc4:	00004706 	br	815ee4 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  815dc8:	e0bffc17 	ldw	r2,-16(fp)
  815dcc:	10800a17 	ldw	r2,40(r2)
  815dd0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  815dd4:	e0bffc17 	ldw	r2,-16(fp)
  815dd8:	10800b17 	ldw	r2,44(r2)
  815ddc:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
  815de0:	e0fff717 	ldw	r3,-36(fp)
  815de4:	e0bff817 	ldw	r2,-32(fp)
  815de8:	18800536 	bltu	r3,r2,815e00 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  815dec:	e0fff717 	ldw	r3,-36(fp)
  815df0:	e0bff817 	ldw	r2,-32(fp)
  815df4:	1885c83a 	sub	r2,r3,r2
  815df8:	e0bff615 	stw	r2,-40(fp)
  815dfc:	00000406 	br	815e10 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  815e00:	00c20004 	movi	r3,2048
  815e04:	e0bff817 	ldw	r2,-32(fp)
  815e08:	1885c83a 	sub	r2,r3,r2
  815e0c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  815e10:	e0bff617 	ldw	r2,-40(fp)
  815e14:	10001e26 	beq	r2,zero,815e90 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
  815e18:	e0fffe17 	ldw	r3,-8(fp)
  815e1c:	e0bff617 	ldw	r2,-40(fp)
  815e20:	1880022e 	bgeu	r3,r2,815e2c <altera_avalon_jtag_uart_read+0x90>
        n = space;
  815e24:	e0bffe17 	ldw	r2,-8(fp)
  815e28:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  815e2c:	e0bffc17 	ldw	r2,-16(fp)
  815e30:	10c00e04 	addi	r3,r2,56
  815e34:	e0bff817 	ldw	r2,-32(fp)
  815e38:	1885883a 	add	r2,r3,r2
  815e3c:	e1bff617 	ldw	r6,-40(fp)
  815e40:	100b883a 	mov	r5,r2
  815e44:	e13ff517 	ldw	r4,-44(fp)
  815e48:	080f08c0 	call	80f08c <memcpy>
      ptr   += n;
  815e4c:	e0fff517 	ldw	r3,-44(fp)
  815e50:	e0bff617 	ldw	r2,-40(fp)
  815e54:	1885883a 	add	r2,r3,r2
  815e58:	e0bff515 	stw	r2,-44(fp)
      space -= n;
  815e5c:	e0fffe17 	ldw	r3,-8(fp)
  815e60:	e0bff617 	ldw	r2,-40(fp)
  815e64:	1885c83a 	sub	r2,r3,r2
  815e68:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  815e6c:	e0fff817 	ldw	r3,-32(fp)
  815e70:	e0bff617 	ldw	r2,-40(fp)
  815e74:	1885883a 	add	r2,r3,r2
  815e78:	10c1ffcc 	andi	r3,r2,2047
  815e7c:	e0bffc17 	ldw	r2,-16(fp)
  815e80:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  815e84:	e0bffe17 	ldw	r2,-8(fp)
  815e88:	00bfcf16 	blt	zero,r2,815dc8 <__alt_mem_onchip_mem+0xff80ddc8>
  815e8c:	00000106 	br	815e94 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
  815e90:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  815e94:	e0fff517 	ldw	r3,-44(fp)
  815e98:	e0bffd17 	ldw	r2,-12(fp)
  815e9c:	1880141e 	bne	r3,r2,815ef0 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  815ea0:	e0bfff17 	ldw	r2,-4(fp)
  815ea4:	1090000c 	andi	r2,r2,16384
  815ea8:	1000131e 	bne	r2,zero,815ef8 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  815eac:	0001883a 	nop
  815eb0:	e0bffc17 	ldw	r2,-16(fp)
  815eb4:	10c00a17 	ldw	r3,40(r2)
  815eb8:	e0bff717 	ldw	r2,-36(fp)
  815ebc:	1880051e 	bne	r3,r2,815ed4 <altera_avalon_jtag_uart_read+0x138>
  815ec0:	e0bffc17 	ldw	r2,-16(fp)
  815ec4:	10c00917 	ldw	r3,36(r2)
  815ec8:	e0bffc17 	ldw	r2,-16(fp)
  815ecc:	10800117 	ldw	r2,4(r2)
  815ed0:	18bff736 	bltu	r3,r2,815eb0 <__alt_mem_onchip_mem+0xff80deb0>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  815ed4:	e0bffc17 	ldw	r2,-16(fp)
  815ed8:	10c00a17 	ldw	r3,40(r2)
  815edc:	e0bff717 	ldw	r2,-36(fp)
  815ee0:	18800726 	beq	r3,r2,815f00 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  815ee4:	e0bffe17 	ldw	r2,-8(fp)
  815ee8:	00bfb716 	blt	zero,r2,815dc8 <__alt_mem_onchip_mem+0xff80ddc8>
  815eec:	00000506 	br	815f04 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
  815ef0:	0001883a 	nop
  815ef4:	00000306 	br	815f04 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
  815ef8:	0001883a 	nop
  815efc:	00000106 	br	815f04 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
  815f00:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  815f04:	e0fff517 	ldw	r3,-44(fp)
  815f08:	e0bffd17 	ldw	r2,-12(fp)
  815f0c:	18801826 	beq	r3,r2,815f70 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  815f10:	0005303a 	rdctl	r2,status
  815f14:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  815f18:	e0fffb17 	ldw	r3,-20(fp)
  815f1c:	00bfff84 	movi	r2,-2
  815f20:	1884703a 	and	r2,r3,r2
  815f24:	1001703a 	wrctl	status,r2
  
  return context;
  815f28:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  815f2c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  815f30:	e0bffc17 	ldw	r2,-16(fp)
  815f34:	10800817 	ldw	r2,32(r2)
  815f38:	10c00054 	ori	r3,r2,1
  815f3c:	e0bffc17 	ldw	r2,-16(fp)
  815f40:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  815f44:	e0bffc17 	ldw	r2,-16(fp)
  815f48:	10800017 	ldw	r2,0(r2)
  815f4c:	10800104 	addi	r2,r2,4
  815f50:	1007883a 	mov	r3,r2
  815f54:	e0bffc17 	ldw	r2,-16(fp)
  815f58:	10800817 	ldw	r2,32(r2)
  815f5c:	18800035 	stwio	r2,0(r3)
  815f60:	e0bffa17 	ldw	r2,-24(fp)
  815f64:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815f68:	e0bff917 	ldw	r2,-28(fp)
  815f6c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  815f70:	e0fff517 	ldw	r3,-44(fp)
  815f74:	e0bffd17 	ldw	r2,-12(fp)
  815f78:	18800426 	beq	r3,r2,815f8c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
  815f7c:	e0fff517 	ldw	r3,-44(fp)
  815f80:	e0bffd17 	ldw	r2,-12(fp)
  815f84:	1885c83a 	sub	r2,r3,r2
  815f88:	00000606 	br	815fa4 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
  815f8c:	e0bfff17 	ldw	r2,-4(fp)
  815f90:	1090000c 	andi	r2,r2,16384
  815f94:	10000226 	beq	r2,zero,815fa0 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  815f98:	00bffd44 	movi	r2,-11
  815f9c:	00000106 	br	815fa4 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
  815fa0:	00bffec4 	movi	r2,-5
}
  815fa4:	e037883a 	mov	sp,fp
  815fa8:	dfc00117 	ldw	ra,4(sp)
  815fac:	df000017 	ldw	fp,0(sp)
  815fb0:	dec00204 	addi	sp,sp,8
  815fb4:	f800283a 	ret

00815fb8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  815fb8:	defff304 	addi	sp,sp,-52
  815fbc:	dfc00c15 	stw	ra,48(sp)
  815fc0:	df000b15 	stw	fp,44(sp)
  815fc4:	df000b04 	addi	fp,sp,44
  815fc8:	e13ffc15 	stw	r4,-16(fp)
  815fcc:	e17ffd15 	stw	r5,-12(fp)
  815fd0:	e1bffe15 	stw	r6,-8(fp)
  815fd4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  815fd8:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  815fdc:	e0bffd17 	ldw	r2,-12(fp)
  815fe0:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  815fe4:	00003706 	br	8160c4 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  815fe8:	e0bffc17 	ldw	r2,-16(fp)
  815fec:	10800c17 	ldw	r2,48(r2)
  815ff0:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
  815ff4:	e0bffc17 	ldw	r2,-16(fp)
  815ff8:	10800d17 	ldw	r2,52(r2)
  815ffc:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
  816000:	e0fff917 	ldw	r3,-28(fp)
  816004:	e0bff517 	ldw	r2,-44(fp)
  816008:	1880062e 	bgeu	r3,r2,816024 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  81600c:	e0fff517 	ldw	r3,-44(fp)
  816010:	e0bff917 	ldw	r2,-28(fp)
  816014:	1885c83a 	sub	r2,r3,r2
  816018:	10bfffc4 	addi	r2,r2,-1
  81601c:	e0bff615 	stw	r2,-40(fp)
  816020:	00000b06 	br	816050 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
  816024:	e0bff517 	ldw	r2,-44(fp)
  816028:	10000526 	beq	r2,zero,816040 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  81602c:	00c20004 	movi	r3,2048
  816030:	e0bff917 	ldw	r2,-28(fp)
  816034:	1885c83a 	sub	r2,r3,r2
  816038:	e0bff615 	stw	r2,-40(fp)
  81603c:	00000406 	br	816050 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  816040:	00c1ffc4 	movi	r3,2047
  816044:	e0bff917 	ldw	r2,-28(fp)
  816048:	1885c83a 	sub	r2,r3,r2
  81604c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  816050:	e0bff617 	ldw	r2,-40(fp)
  816054:	10001e26 	beq	r2,zero,8160d0 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
  816058:	e0fffe17 	ldw	r3,-8(fp)
  81605c:	e0bff617 	ldw	r2,-40(fp)
  816060:	1880022e 	bgeu	r3,r2,81606c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
  816064:	e0bffe17 	ldw	r2,-8(fp)
  816068:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  81606c:	e0bffc17 	ldw	r2,-16(fp)
  816070:	10c20e04 	addi	r3,r2,2104
  816074:	e0bff917 	ldw	r2,-28(fp)
  816078:	1885883a 	add	r2,r3,r2
  81607c:	e1bff617 	ldw	r6,-40(fp)
  816080:	e17ffd17 	ldw	r5,-12(fp)
  816084:	1009883a 	mov	r4,r2
  816088:	080f08c0 	call	80f08c <memcpy>
      ptr   += n;
  81608c:	e0fffd17 	ldw	r3,-12(fp)
  816090:	e0bff617 	ldw	r2,-40(fp)
  816094:	1885883a 	add	r2,r3,r2
  816098:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
  81609c:	e0fffe17 	ldw	r3,-8(fp)
  8160a0:	e0bff617 	ldw	r2,-40(fp)
  8160a4:	1885c83a 	sub	r2,r3,r2
  8160a8:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8160ac:	e0fff917 	ldw	r3,-28(fp)
  8160b0:	e0bff617 	ldw	r2,-40(fp)
  8160b4:	1885883a 	add	r2,r3,r2
  8160b8:	10c1ffcc 	andi	r3,r2,2047
  8160bc:	e0bffc17 	ldw	r2,-16(fp)
  8160c0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  8160c4:	e0bffe17 	ldw	r2,-8(fp)
  8160c8:	00bfc716 	blt	zero,r2,815fe8 <__alt_mem_onchip_mem+0xff80dfe8>
  8160cc:	00000106 	br	8160d4 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
  8160d0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8160d4:	0005303a 	rdctl	r2,status
  8160d8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8160dc:	e0fffb17 	ldw	r3,-20(fp)
  8160e0:	00bfff84 	movi	r2,-2
  8160e4:	1884703a 	and	r2,r3,r2
  8160e8:	1001703a 	wrctl	status,r2
  
  return context;
  8160ec:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  8160f0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  8160f4:	e0bffc17 	ldw	r2,-16(fp)
  8160f8:	10800817 	ldw	r2,32(r2)
  8160fc:	10c00094 	ori	r3,r2,2
  816100:	e0bffc17 	ldw	r2,-16(fp)
  816104:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  816108:	e0bffc17 	ldw	r2,-16(fp)
  81610c:	10800017 	ldw	r2,0(r2)
  816110:	10800104 	addi	r2,r2,4
  816114:	1007883a 	mov	r3,r2
  816118:	e0bffc17 	ldw	r2,-16(fp)
  81611c:	10800817 	ldw	r2,32(r2)
  816120:	18800035 	stwio	r2,0(r3)
  816124:	e0bffa17 	ldw	r2,-24(fp)
  816128:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81612c:	e0bff817 	ldw	r2,-32(fp)
  816130:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  816134:	e0bffe17 	ldw	r2,-8(fp)
  816138:	0080100e 	bge	zero,r2,81617c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
  81613c:	e0bfff17 	ldw	r2,-4(fp)
  816140:	1090000c 	andi	r2,r2,16384
  816144:	1000101e 	bne	r2,zero,816188 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  816148:	0001883a 	nop
  81614c:	e0bffc17 	ldw	r2,-16(fp)
  816150:	10c00d17 	ldw	r3,52(r2)
  816154:	e0bff517 	ldw	r2,-44(fp)
  816158:	1880051e 	bne	r3,r2,816170 <altera_avalon_jtag_uart_write+0x1b8>
  81615c:	e0bffc17 	ldw	r2,-16(fp)
  816160:	10c00917 	ldw	r3,36(r2)
  816164:	e0bffc17 	ldw	r2,-16(fp)
  816168:	10800117 	ldw	r2,4(r2)
  81616c:	18bff736 	bltu	r3,r2,81614c <__alt_mem_onchip_mem+0xff80e14c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  816170:	e0bffc17 	ldw	r2,-16(fp)
  816174:	10800917 	ldw	r2,36(r2)
  816178:	1000051e 	bne	r2,zero,816190 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
  81617c:	e0bffe17 	ldw	r2,-8(fp)
  816180:	00bfd016 	blt	zero,r2,8160c4 <__alt_mem_onchip_mem+0xff80e0c4>
  816184:	00000306 	br	816194 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
  816188:	0001883a 	nop
  81618c:	00000106 	br	816194 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
  816190:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  816194:	e0fffd17 	ldw	r3,-12(fp)
  816198:	e0bff717 	ldw	r2,-36(fp)
  81619c:	18800426 	beq	r3,r2,8161b0 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
  8161a0:	e0fffd17 	ldw	r3,-12(fp)
  8161a4:	e0bff717 	ldw	r2,-36(fp)
  8161a8:	1885c83a 	sub	r2,r3,r2
  8161ac:	00000606 	br	8161c8 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
  8161b0:	e0bfff17 	ldw	r2,-4(fp)
  8161b4:	1090000c 	andi	r2,r2,16384
  8161b8:	10000226 	beq	r2,zero,8161c4 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
  8161bc:	00bffd44 	movi	r2,-11
  8161c0:	00000106 	br	8161c8 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  8161c4:	00bffec4 	movi	r2,-5
}
  8161c8:	e037883a 	mov	sp,fp
  8161cc:	dfc00117 	ldw	ra,4(sp)
  8161d0:	df000017 	ldw	fp,0(sp)
  8161d4:	dec00204 	addi	sp,sp,8
  8161d8:	f800283a 	ret

008161dc <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
  8161dc:	defffa04 	addi	sp,sp,-24
  8161e0:	dfc00515 	stw	ra,20(sp)
  8161e4:	df000415 	stw	fp,16(sp)
  8161e8:	df000404 	addi	fp,sp,16
  8161ec:	e13ffe15 	stw	r4,-8(fp)
  8161f0:	2805883a 	mov	r2,r5
  8161f4:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  8161f8:	e0bffe17 	ldw	r2,-8(fp)
  8161fc:	10800017 	ldw	r2,0(r2)
  816200:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  816204:	008003f4 	movhi	r2,15
  816208:	10909004 	addi	r2,r2,16960
  81620c:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  816210:	e0bffe17 	ldw	r2,-8(fp)
  816214:	10800803 	ldbu	r2,32(r2)
  816218:	10803fcc 	andi	r2,r2,255
  81621c:	1080201c 	xori	r2,r2,128
  816220:	10bfe004 	addi	r2,r2,-128
  816224:	1000151e 	bne	r2,zero,81627c <lcd_write_command+0xa0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  816228:	00000906 	br	816250 <lcd_write_command+0x74>
    if (--i == 0)
  81622c:	e0bffc17 	ldw	r2,-16(fp)
  816230:	10bfffc4 	addi	r2,r2,-1
  816234:	e0bffc15 	stw	r2,-16(fp)
  816238:	e0bffc17 	ldw	r2,-16(fp)
  81623c:	1000041e 	bne	r2,zero,816250 <lcd_write_command+0x74>
    {
      sp->broken = 1;
  816240:	e0bffe17 	ldw	r2,-8(fp)
  816244:	00c00044 	movi	r3,1
  816248:	10c00805 	stb	r3,32(r2)
      return;
  81624c:	00000c06 	br	816280 <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  816250:	e0bffd17 	ldw	r2,-12(fp)
  816254:	10800104 	addi	r2,r2,4
  816258:	10800037 	ldwio	r2,0(r2)
  81625c:	1080200c 	andi	r2,r2,128
  816260:	103ff21e 	bne	r2,zero,81622c <__alt_mem_onchip_mem+0xff80e22c>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  816264:	01001904 	movi	r4,100
  816268:	08180d00 	call	8180d0 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
  81626c:	e0bffd17 	ldw	r2,-12(fp)
  816270:	e0ffff03 	ldbu	r3,-4(fp)
  816274:	10c00035 	stwio	r3,0(r2)
  816278:	00000106 	br	816280 <lcd_write_command+0xa4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  81627c:	0001883a 	nop
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
}
  816280:	e037883a 	mov	sp,fp
  816284:	dfc00117 	ldw	ra,4(sp)
  816288:	df000017 	ldw	fp,0(sp)
  81628c:	dec00204 	addi	sp,sp,8
  816290:	f800283a 	ret

00816294 <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
  816294:	defffa04 	addi	sp,sp,-24
  816298:	dfc00515 	stw	ra,20(sp)
  81629c:	df000415 	stw	fp,16(sp)
  8162a0:	df000404 	addi	fp,sp,16
  8162a4:	e13ffe15 	stw	r4,-8(fp)
  8162a8:	2805883a 	mov	r2,r5
  8162ac:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  8162b0:	e0bffe17 	ldw	r2,-8(fp)
  8162b4:	10800017 	ldw	r2,0(r2)
  8162b8:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  8162bc:	008003f4 	movhi	r2,15
  8162c0:	10909004 	addi	r2,r2,16960
  8162c4:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  8162c8:	e0bffe17 	ldw	r2,-8(fp)
  8162cc:	10800803 	ldbu	r2,32(r2)
  8162d0:	10803fcc 	andi	r2,r2,255
  8162d4:	1080201c 	xori	r2,r2,128
  8162d8:	10bfe004 	addi	r2,r2,-128
  8162dc:	10001d1e 	bne	r2,zero,816354 <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  8162e0:	00000906 	br	816308 <lcd_write_data+0x74>
    if (--i == 0)
  8162e4:	e0bffc17 	ldw	r2,-16(fp)
  8162e8:	10bfffc4 	addi	r2,r2,-1
  8162ec:	e0bffc15 	stw	r2,-16(fp)
  8162f0:	e0bffc17 	ldw	r2,-16(fp)
  8162f4:	1000041e 	bne	r2,zero,816308 <lcd_write_data+0x74>
    {
      sp->broken = 1;
  8162f8:	e0bffe17 	ldw	r2,-8(fp)
  8162fc:	00c00044 	movi	r3,1
  816300:	10c00805 	stb	r3,32(r2)
      return;
  816304:	00001406 	br	816358 <lcd_write_data+0xc4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  816308:	e0bffd17 	ldw	r2,-12(fp)
  81630c:	10800104 	addi	r2,r2,4
  816310:	10800037 	ldwio	r2,0(r2)
  816314:	1080200c 	andi	r2,r2,128
  816318:	103ff21e 	bne	r2,zero,8162e4 <__alt_mem_onchip_mem+0xff80e2e4>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  81631c:	01001904 	movi	r4,100
  816320:	08180d00 	call	8180d0 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
  816324:	e0bffd17 	ldw	r2,-12(fp)
  816328:	10800204 	addi	r2,r2,8
  81632c:	1007883a 	mov	r3,r2
  816330:	e0bfff03 	ldbu	r2,-4(fp)
  816334:	18800035 	stwio	r2,0(r3)

  sp->address++;
  816338:	e0bffe17 	ldw	r2,-8(fp)
  81633c:	108008c3 	ldbu	r2,35(r2)
  816340:	10800044 	addi	r2,r2,1
  816344:	1007883a 	mov	r3,r2
  816348:	e0bffe17 	ldw	r2,-8(fp)
  81634c:	10c008c5 	stb	r3,35(r2)
  816350:	00000106 	br	816358 <lcd_write_data+0xc4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  816354:	0001883a 	nop
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);

  sp->address++;
}
  816358:	e037883a 	mov	sp,fp
  81635c:	dfc00117 	ldw	ra,4(sp)
  816360:	df000017 	ldw	fp,0(sp)
  816364:	dec00204 	addi	sp,sp,8
  816368:	f800283a 	ret

0081636c <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
  81636c:	defffc04 	addi	sp,sp,-16
  816370:	dfc00315 	stw	ra,12(sp)
  816374:	df000215 	stw	fp,8(sp)
  816378:	df000204 	addi	fp,sp,8
  81637c:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
  816380:	01400044 	movi	r5,1
  816384:	e13fff17 	ldw	r4,-4(fp)
  816388:	08161dc0 	call	8161dc <lcd_write_command>

  sp->x = 0;
  81638c:	e0bfff17 	ldw	r2,-4(fp)
  816390:	10000845 	stb	zero,33(r2)
  sp->y = 0;
  816394:	e0bfff17 	ldw	r2,-4(fp)
  816398:	10000885 	stb	zero,34(r2)
  sp->address = 0;
  81639c:	e0bfff17 	ldw	r2,-4(fp)
  8163a0:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8163a4:	e03ffe15 	stw	zero,-8(fp)
  8163a8:	00001b06 	br	816418 <lcd_clear_screen+0xac>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
  8163ac:	e0bffe17 	ldw	r2,-8(fp)
  8163b0:	108018e4 	muli	r2,r2,99
  8163b4:	10801004 	addi	r2,r2,64
  8163b8:	e0ffff17 	ldw	r3,-4(fp)
  8163bc:	1885883a 	add	r2,r3,r2
  8163c0:	01801444 	movi	r6,81
  8163c4:	01400804 	movi	r5,32
  8163c8:	1009883a 	mov	r4,r2
  8163cc:	080f1d40 	call	80f1d4 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
  8163d0:	e0bffe17 	ldw	r2,-8(fp)
  8163d4:	108018e4 	muli	r2,r2,99
  8163d8:	10800c04 	addi	r2,r2,48
  8163dc:	e0ffff17 	ldw	r3,-4(fp)
  8163e0:	1885883a 	add	r2,r3,r2
  8163e4:	01800404 	movi	r6,16
  8163e8:	01400804 	movi	r5,32
  8163ec:	1009883a 	mov	r4,r2
  8163f0:	080f1d40 	call	80f1d4 <memset>
    sp->line[y].width = 0;
  8163f4:	e0ffff17 	ldw	r3,-4(fp)
  8163f8:	e0bffe17 	ldw	r2,-8(fp)
  8163fc:	108018e4 	muli	r2,r2,99
  816400:	1885883a 	add	r2,r3,r2
  816404:	10802444 	addi	r2,r2,145
  816408:	10000005 	stb	zero,0(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  81640c:	e0bffe17 	ldw	r2,-8(fp)
  816410:	10800044 	addi	r2,r2,1
  816414:	e0bffe15 	stw	r2,-8(fp)
  816418:	e0bffe17 	ldw	r2,-8(fp)
  81641c:	10800090 	cmplti	r2,r2,2
  816420:	103fe21e 	bne	r2,zero,8163ac <__alt_mem_onchip_mem+0xff80e3ac>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
  816424:	0001883a 	nop
  816428:	e037883a 	mov	sp,fp
  81642c:	dfc00117 	ldw	ra,4(sp)
  816430:	df000017 	ldw	fp,0(sp)
  816434:	dec00204 	addi	sp,sp,8
  816438:	f800283a 	ret

0081643c <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
  81643c:	defff704 	addi	sp,sp,-36
  816440:	dfc00815 	stw	ra,32(sp)
  816444:	df000715 	stw	fp,28(sp)
  816448:	df000704 	addi	fp,sp,28
  81644c:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
  816450:	e0bfff17 	ldw	r2,-4(fp)
  816454:	10800943 	ldbu	r2,37(r2)
  816458:	10803fcc 	andi	r2,r2,255
  81645c:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  816460:	e03ff915 	stw	zero,-28(fp)
  816464:	00006706 	br	816604 <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
  816468:	e0ffff17 	ldw	r3,-4(fp)
  81646c:	e0bff917 	ldw	r2,-28(fp)
  816470:	108018e4 	muli	r2,r2,99
  816474:	1885883a 	add	r2,r3,r2
  816478:	10802444 	addi	r2,r2,145
  81647c:	10800003 	ldbu	r2,0(r2)
  816480:	10803fcc 	andi	r2,r2,255
  816484:	1080201c 	xori	r2,r2,128
  816488:	10bfe004 	addi	r2,r2,-128
  81648c:	e0bffd15 	stw	r2,-12(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
  816490:	e0ffff17 	ldw	r3,-4(fp)
  816494:	e0bff917 	ldw	r2,-28(fp)
  816498:	108018e4 	muli	r2,r2,99
  81649c:	1885883a 	add	r2,r3,r2
  8164a0:	10802484 	addi	r2,r2,146
  8164a4:	10800003 	ldbu	r2,0(r2)
  8164a8:	10c03fcc 	andi	r3,r2,255
  8164ac:	e0bffc17 	ldw	r2,-16(fp)
  8164b0:	1885383a 	mul	r2,r3,r2
  8164b4:	1005d23a 	srai	r2,r2,8
  8164b8:	e0bffb15 	stw	r2,-20(fp)
    if (offset >= width)
  8164bc:	e0fffb17 	ldw	r3,-20(fp)
  8164c0:	e0bffd17 	ldw	r2,-12(fp)
  8164c4:	18800116 	blt	r3,r2,8164cc <lcd_repaint_screen+0x90>
      offset = 0;
  8164c8:	e03ffb15 	stw	zero,-20(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  8164cc:	e03ffa15 	stw	zero,-24(fp)
  8164d0:	00004606 	br	8165ec <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
  8164d4:	e0fffa17 	ldw	r3,-24(fp)
  8164d8:	e0bffb17 	ldw	r2,-20(fp)
  8164dc:	1885883a 	add	r2,r3,r2
  8164e0:	e17ffd17 	ldw	r5,-12(fp)
  8164e4:	1009883a 	mov	r4,r2
  8164e8:	0813c9c0 	call	813c9c <__modsi3>
  8164ec:	1009883a 	mov	r4,r2
  8164f0:	e0ffff17 	ldw	r3,-4(fp)
  8164f4:	e0bff917 	ldw	r2,-28(fp)
  8164f8:	108018e4 	muli	r2,r2,99
  8164fc:	1885883a 	add	r2,r3,r2
  816500:	1105883a 	add	r2,r2,r4
  816504:	10801004 	addi	r2,r2,64
  816508:	10800003 	ldbu	r2,0(r2)
  81650c:	e0bffe05 	stb	r2,-8(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
  816510:	e0ffff17 	ldw	r3,-4(fp)
  816514:	e0bff917 	ldw	r2,-28(fp)
  816518:	108018e4 	muli	r2,r2,99
  81651c:	1887883a 	add	r3,r3,r2
  816520:	e0bffa17 	ldw	r2,-24(fp)
  816524:	1885883a 	add	r2,r3,r2
  816528:	10800c04 	addi	r2,r2,48
  81652c:	10800003 	ldbu	r2,0(r2)
  816530:	10c03fcc 	andi	r3,r2,255
  816534:	18c0201c 	xori	r3,r3,128
  816538:	18ffe004 	addi	r3,r3,-128
  81653c:	e0bffe07 	ldb	r2,-8(fp)
  816540:	18802726 	beq	r3,r2,8165e0 <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
  816544:	e0fff917 	ldw	r3,-28(fp)
  816548:	d0a01004 	addi	r2,gp,-32704
  81654c:	1885883a 	add	r2,r3,r2
  816550:	10800003 	ldbu	r2,0(r2)
  816554:	1007883a 	mov	r3,r2
  816558:	e0bffa17 	ldw	r2,-24(fp)
  81655c:	1885883a 	add	r2,r3,r2
  816560:	e0bffe45 	stb	r2,-7(fp)

        if (address != sp->address)
  816564:	e0fffe43 	ldbu	r3,-7(fp)
  816568:	e0bfff17 	ldw	r2,-4(fp)
  81656c:	108008c3 	ldbu	r2,35(r2)
  816570:	10803fcc 	andi	r2,r2,255
  816574:	1080201c 	xori	r2,r2,128
  816578:	10bfe004 	addi	r2,r2,-128
  81657c:	18800a26 	beq	r3,r2,8165a8 <lcd_repaint_screen+0x16c>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
  816580:	e0fffe43 	ldbu	r3,-7(fp)
  816584:	00bfe004 	movi	r2,-128
  816588:	1884b03a 	or	r2,r3,r2
  81658c:	10803fcc 	andi	r2,r2,255
  816590:	100b883a 	mov	r5,r2
  816594:	e13fff17 	ldw	r4,-4(fp)
  816598:	08161dc0 	call	8161dc <lcd_write_command>
          sp->address = address;
  81659c:	e0fffe43 	ldbu	r3,-7(fp)
  8165a0:	e0bfff17 	ldw	r2,-4(fp)
  8165a4:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
  8165a8:	e0bffe03 	ldbu	r2,-8(fp)
  8165ac:	10803fcc 	andi	r2,r2,255
  8165b0:	100b883a 	mov	r5,r2
  8165b4:	e13fff17 	ldw	r4,-4(fp)
  8165b8:	08162940 	call	816294 <lcd_write_data>
        sp->line[y].visible[x] = c;
  8165bc:	e0ffff17 	ldw	r3,-4(fp)
  8165c0:	e0bff917 	ldw	r2,-28(fp)
  8165c4:	108018e4 	muli	r2,r2,99
  8165c8:	1887883a 	add	r3,r3,r2
  8165cc:	e0bffa17 	ldw	r2,-24(fp)
  8165d0:	1885883a 	add	r2,r3,r2
  8165d4:	10800c04 	addi	r2,r2,48
  8165d8:	e0fffe03 	ldbu	r3,-8(fp)
  8165dc:	10c00005 	stb	r3,0(r2)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  8165e0:	e0bffa17 	ldw	r2,-24(fp)
  8165e4:	10800044 	addi	r2,r2,1
  8165e8:	e0bffa15 	stw	r2,-24(fp)
  8165ec:	e0bffa17 	ldw	r2,-24(fp)
  8165f0:	10800410 	cmplti	r2,r2,16
  8165f4:	103fb71e 	bne	r2,zero,8164d4 <__alt_mem_onchip_mem+0xff80e4d4>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8165f8:	e0bff917 	ldw	r2,-28(fp)
  8165fc:	10800044 	addi	r2,r2,1
  816600:	e0bff915 	stw	r2,-28(fp)
  816604:	e0bff917 	ldw	r2,-28(fp)
  816608:	10800090 	cmplti	r2,r2,2
  81660c:	103f961e 	bne	r2,zero,816468 <__alt_mem_onchip_mem+0xff80e468>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
  816610:	0001883a 	nop
  816614:	e037883a 	mov	sp,fp
  816618:	dfc00117 	ldw	ra,4(sp)
  81661c:	df000017 	ldw	fp,0(sp)
  816620:	dec00204 	addi	sp,sp,8
  816624:	f800283a 	ret

00816628 <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  816628:	defffc04 	addi	sp,sp,-16
  81662c:	dfc00315 	stw	ra,12(sp)
  816630:	df000215 	stw	fp,8(sp)
  816634:	df000204 	addi	fp,sp,8
  816638:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  81663c:	e03ffe15 	stw	zero,-8(fp)
  816640:	00001d06 	br	8166b8 <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
  816644:	e0bffe17 	ldw	r2,-8(fp)
  816648:	00800f16 	blt	zero,r2,816688 <lcd_scroll_up+0x60>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
  81664c:	e0bffe17 	ldw	r2,-8(fp)
  816650:	108018e4 	muli	r2,r2,99
  816654:	10801004 	addi	r2,r2,64
  816658:	e0ffff17 	ldw	r3,-4(fp)
  81665c:	1889883a 	add	r4,r3,r2
  816660:	e0bffe17 	ldw	r2,-8(fp)
  816664:	10800044 	addi	r2,r2,1
  816668:	108018e4 	muli	r2,r2,99
  81666c:	10801004 	addi	r2,r2,64
  816670:	e0ffff17 	ldw	r3,-4(fp)
  816674:	1885883a 	add	r2,r3,r2
  816678:	01801404 	movi	r6,80
  81667c:	100b883a 	mov	r5,r2
  816680:	080f08c0 	call	80f08c <memcpy>
  816684:	00000906 	br	8166ac <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  816688:	e0bffe17 	ldw	r2,-8(fp)
  81668c:	108018e4 	muli	r2,r2,99
  816690:	10801004 	addi	r2,r2,64
  816694:	e0ffff17 	ldw	r3,-4(fp)
  816698:	1885883a 	add	r2,r3,r2
  81669c:	01801404 	movi	r6,80
  8166a0:	01400804 	movi	r5,32
  8166a4:	1009883a 	mov	r4,r2
  8166a8:	080f1d40 	call	80f1d4 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8166ac:	e0bffe17 	ldw	r2,-8(fp)
  8166b0:	10800044 	addi	r2,r2,1
  8166b4:	e0bffe15 	stw	r2,-8(fp)
  8166b8:	e0bffe17 	ldw	r2,-8(fp)
  8166bc:	10800090 	cmplti	r2,r2,2
  8166c0:	103fe01e 	bne	r2,zero,816644 <__alt_mem_onchip_mem+0xff80e644>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
  8166c4:	e0bfff17 	ldw	r2,-4(fp)
  8166c8:	10800883 	ldbu	r2,34(r2)
  8166cc:	10bfffc4 	addi	r2,r2,-1
  8166d0:	1007883a 	mov	r3,r2
  8166d4:	e0bfff17 	ldw	r2,-4(fp)
  8166d8:	10c00885 	stb	r3,34(r2)
}
  8166dc:	0001883a 	nop
  8166e0:	e037883a 	mov	sp,fp
  8166e4:	dfc00117 	ldw	ra,4(sp)
  8166e8:	df000017 	ldw	fp,0(sp)
  8166ec:	dec00204 	addi	sp,sp,8
  8166f0:	f800283a 	ret

008166f4 <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
  8166f4:	defff904 	addi	sp,sp,-28
  8166f8:	dfc00615 	stw	ra,24(sp)
  8166fc:	df000515 	stw	fp,20(sp)
  816700:	df000504 	addi	fp,sp,20
  816704:	e13ffe15 	stw	r4,-8(fp)
  816708:	2805883a 	mov	r2,r5
  81670c:	e0bfff05 	stb	r2,-4(fp)
  int parm1 = 0, parm2 = 0;
  816710:	e03ffb15 	stw	zero,-20(fp)
  816714:	e03ffc15 	stw	zero,-16(fp)

  if (sp->escape[0] == '[')
  816718:	e0bffe17 	ldw	r2,-8(fp)
  81671c:	10800a03 	ldbu	r2,40(r2)
  816720:	10803fcc 	andi	r2,r2,255
  816724:	1080201c 	xori	r2,r2,128
  816728:	10bfe004 	addi	r2,r2,-128
  81672c:	108016d8 	cmpnei	r2,r2,91
  816730:	1000411e 	bne	r2,zero,816838 <lcd_handle_escape+0x144>
  {
    char * ptr = sp->escape+1;
  816734:	e0bffe17 	ldw	r2,-8(fp)
  816738:	10800a04 	addi	r2,r2,40
  81673c:	10800044 	addi	r2,r2,1
  816740:	e0bffd15 	stw	r2,-12(fp)
    while (isdigit(*ptr))
  816744:	00000c06 	br	816778 <lcd_handle_escape+0x84>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
  816748:	e0bffb17 	ldw	r2,-20(fp)
  81674c:	10c002a4 	muli	r3,r2,10
  816750:	e0bffd17 	ldw	r2,-12(fp)
  816754:	11000044 	addi	r4,r2,1
  816758:	e13ffd15 	stw	r4,-12(fp)
  81675c:	10800003 	ldbu	r2,0(r2)
  816760:	10803fcc 	andi	r2,r2,255
  816764:	1080201c 	xori	r2,r2,128
  816768:	10bfe004 	addi	r2,r2,-128
  81676c:	10bff404 	addi	r2,r2,-48
  816770:	1885883a 	add	r2,r3,r2
  816774:	e0bffb15 	stw	r2,-20(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
  816778:	d0e01117 	ldw	r3,-32700(gp)
  81677c:	e0bffd17 	ldw	r2,-12(fp)
  816780:	10800003 	ldbu	r2,0(r2)
  816784:	10803fcc 	andi	r2,r2,255
  816788:	1080201c 	xori	r2,r2,128
  81678c:	10bfe004 	addi	r2,r2,-128
  816790:	10800044 	addi	r2,r2,1
  816794:	1885883a 	add	r2,r3,r2
  816798:	10800003 	ldbu	r2,0(r2)
  81679c:	10803fcc 	andi	r2,r2,255
  8167a0:	1080010c 	andi	r2,r2,4
  8167a4:	103fe81e 	bne	r2,zero,816748 <__alt_mem_onchip_mem+0xff80e748>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
  8167a8:	e0bffd17 	ldw	r2,-12(fp)
  8167ac:	10800003 	ldbu	r2,0(r2)
  8167b0:	10803fcc 	andi	r2,r2,255
  8167b4:	1080201c 	xori	r2,r2,128
  8167b8:	10bfe004 	addi	r2,r2,-128
  8167bc:	10800ed8 	cmpnei	r2,r2,59
  8167c0:	10001f1e 	bne	r2,zero,816840 <lcd_handle_escape+0x14c>
    {
      ptr++;
  8167c4:	e0bffd17 	ldw	r2,-12(fp)
  8167c8:	10800044 	addi	r2,r2,1
  8167cc:	e0bffd15 	stw	r2,-12(fp)
      while (isdigit(*ptr))
  8167d0:	00000c06 	br	816804 <lcd_handle_escape+0x110>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
  8167d4:	e0bffc17 	ldw	r2,-16(fp)
  8167d8:	10c002a4 	muli	r3,r2,10
  8167dc:	e0bffd17 	ldw	r2,-12(fp)
  8167e0:	11000044 	addi	r4,r2,1
  8167e4:	e13ffd15 	stw	r4,-12(fp)
  8167e8:	10800003 	ldbu	r2,0(r2)
  8167ec:	10803fcc 	andi	r2,r2,255
  8167f0:	1080201c 	xori	r2,r2,128
  8167f4:	10bfe004 	addi	r2,r2,-128
  8167f8:	10bff404 	addi	r2,r2,-48
  8167fc:	1885883a 	add	r2,r3,r2
  816800:	e0bffc15 	stw	r2,-16(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
  816804:	d0e01117 	ldw	r3,-32700(gp)
  816808:	e0bffd17 	ldw	r2,-12(fp)
  81680c:	10800003 	ldbu	r2,0(r2)
  816810:	10803fcc 	andi	r2,r2,255
  816814:	1080201c 	xori	r2,r2,128
  816818:	10bfe004 	addi	r2,r2,-128
  81681c:	10800044 	addi	r2,r2,1
  816820:	1885883a 	add	r2,r3,r2
  816824:	10800003 	ldbu	r2,0(r2)
  816828:	10803fcc 	andi	r2,r2,255
  81682c:	1080010c 	andi	r2,r2,4
  816830:	103fe81e 	bne	r2,zero,8167d4 <__alt_mem_onchip_mem+0xff80e7d4>
  816834:	00000206 	br	816840 <lcd_handle_escape+0x14c>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
  816838:	00bfffc4 	movi	r2,-1
  81683c:	e0bffb15 	stw	r2,-20(fp)

  switch (c)
  816840:	e0bfff07 	ldb	r2,-4(fp)
  816844:	10c012a0 	cmpeqi	r3,r2,74
  816848:	1800291e 	bne	r3,zero,8168f0 <lcd_handle_escape+0x1fc>
  81684c:	10c012c8 	cmpgei	r3,r2,75
  816850:	1800031e 	bne	r3,zero,816860 <lcd_handle_escape+0x16c>
  816854:	10801220 	cmpeqi	r2,r2,72
  816858:	1000061e 	bne	r2,zero,816874 <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  81685c:	00004a06 	br	816988 <lcd_handle_escape+0x294>
    }
  }
  else
    parm1 = -1;

  switch (c)
  816860:	10c012e0 	cmpeqi	r3,r2,75
  816864:	1800281e 	bne	r3,zero,816908 <lcd_handle_escape+0x214>
  816868:	108019a0 	cmpeqi	r2,r2,102
  81686c:	1000011e 	bne	r2,zero,816874 <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  816870:	00004506 	br	816988 <lcd_handle_escape+0x294>

  switch (c)
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
  816874:	e0bffc17 	ldw	r2,-16(fp)
  816878:	0080050e 	bge	zero,r2,816890 <lcd_handle_escape+0x19c>
      sp->x = parm2 - 1;
  81687c:	e0bffc17 	ldw	r2,-16(fp)
  816880:	10bfffc4 	addi	r2,r2,-1
  816884:	1007883a 	mov	r3,r2
  816888:	e0bffe17 	ldw	r2,-8(fp)
  81688c:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
  816890:	e0bffb17 	ldw	r2,-20(fp)
  816894:	0080370e 	bge	zero,r2,816974 <lcd_handle_escape+0x280>
    {
      sp->y = parm1 - 1;
  816898:	e0bffb17 	ldw	r2,-20(fp)
  81689c:	10bfffc4 	addi	r2,r2,-1
  8168a0:	1007883a 	mov	r3,r2
  8168a4:	e0bffe17 	ldw	r2,-8(fp)
  8168a8:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
  8168ac:	e0bffe17 	ldw	r2,-8(fp)
  8168b0:	10800883 	ldbu	r2,34(r2)
  8168b4:	10803fcc 	andi	r2,r2,255
  8168b8:	10800170 	cmpltui	r2,r2,5
  8168bc:	1000061e 	bne	r2,zero,8168d8 <lcd_handle_escape+0x1e4>
        sp->y = ALT_LCD_HEIGHT * 2;
  8168c0:	e0bffe17 	ldw	r2,-8(fp)
  8168c4:	00c00104 	movi	r3,4
  8168c8:	10c00885 	stb	r3,34(r2)
      while (sp->y > ALT_LCD_HEIGHT)
  8168cc:	00000206 	br	8168d8 <lcd_handle_escape+0x1e4>
        lcd_scroll_up(sp);
  8168d0:	e13ffe17 	ldw	r4,-8(fp)
  8168d4:	08166280 	call	816628 <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
  8168d8:	e0bffe17 	ldw	r2,-8(fp)
  8168dc:	10800883 	ldbu	r2,34(r2)
  8168e0:	10803fcc 	andi	r2,r2,255
  8168e4:	108000e8 	cmpgeui	r2,r2,3
  8168e8:	103ff91e 	bne	r2,zero,8168d0 <__alt_mem_onchip_mem+0xff80e8d0>
        lcd_scroll_up(sp);
    }
    break;
  8168ec:	00002106 	br	816974 <lcd_handle_escape+0x280>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
  8168f0:	e0bffb17 	ldw	r2,-20(fp)
  8168f4:	10800098 	cmpnei	r2,r2,2
  8168f8:	1000201e 	bne	r2,zero,81697c <lcd_handle_escape+0x288>
      lcd_clear_screen(sp);
  8168fc:	e13ffe17 	ldw	r4,-8(fp)
  816900:	081636c0 	call	81636c <lcd_clear_screen>
    break;
  816904:	00001d06 	br	81697c <lcd_handle_escape+0x288>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
  816908:	e0bffb17 	ldw	r2,-20(fp)
  81690c:	00801d16 	blt	zero,r2,816984 <lcd_handle_escape+0x290>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  816910:	e0bffe17 	ldw	r2,-8(fp)
  816914:	10800843 	ldbu	r2,33(r2)
  816918:	10803fcc 	andi	r2,r2,255
  81691c:	10801428 	cmpgeui	r2,r2,80
  816920:	1000181e 	bne	r2,zero,816984 <lcd_handle_escape+0x290>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
  816924:	e0bffe17 	ldw	r2,-8(fp)
  816928:	10800883 	ldbu	r2,34(r2)
  81692c:	10803fcc 	andi	r2,r2,255
  816930:	108018e4 	muli	r2,r2,99
  816934:	10801004 	addi	r2,r2,64
  816938:	e0fffe17 	ldw	r3,-8(fp)
  81693c:	1887883a 	add	r3,r3,r2
  816940:	e0bffe17 	ldw	r2,-8(fp)
  816944:	10800843 	ldbu	r2,33(r2)
  816948:	10803fcc 	andi	r2,r2,255
  81694c:	1889883a 	add	r4,r3,r2
  816950:	e0bffe17 	ldw	r2,-8(fp)
  816954:	10800843 	ldbu	r2,33(r2)
  816958:	10803fcc 	andi	r2,r2,255
  81695c:	00c01404 	movi	r3,80
  816960:	1885c83a 	sub	r2,r3,r2
  816964:	100d883a 	mov	r6,r2
  816968:	01400804 	movi	r5,32
  81696c:	080f1d40 	call	80f1d4 <memset>
    }
    break;
  816970:	00000406 	br	816984 <lcd_handle_escape+0x290>
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
        lcd_scroll_up(sp);
    }
    break;
  816974:	0001883a 	nop
  816978:	00000306 	br	816988 <lcd_handle_escape+0x294>
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
      lcd_clear_screen(sp);
    break;
  81697c:	0001883a 	nop
  816980:	00000106 	br	816988 <lcd_handle_escape+0x294>
    if (parm1 < 1)
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  816984:	0001883a 	nop
  }
}
  816988:	0001883a 	nop
  81698c:	e037883a 	mov	sp,fp
  816990:	dfc00117 	ldw	ra,4(sp)
  816994:	df000017 	ldw	fp,0(sp)
  816998:	dec00204 	addi	sp,sp,8
  81699c:	f800283a 	ret

008169a0 <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
  8169a0:	defff304 	addi	sp,sp,-52
  8169a4:	dfc00c15 	stw	ra,48(sp)
  8169a8:	df000b15 	stw	fp,44(sp)
  8169ac:	df000b04 	addi	fp,sp,44
  8169b0:	e13ffc15 	stw	r4,-16(fp)
  8169b4:	e17ffd15 	stw	r5,-12(fp)
  8169b8:	e1bffe15 	stw	r6,-8(fp)
  8169bc:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
  8169c0:	e0bffe17 	ldw	r2,-8(fp)
  8169c4:	e0fffd17 	ldw	r3,-12(fp)
  8169c8:	1885883a 	add	r2,r3,r2
  8169cc:	e0bff815 	stw	r2,-32(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
  8169d0:	e0bffc17 	ldw	r2,-16(fp)
  8169d4:	00c00044 	movi	r3,1
  8169d8:	10c009c5 	stb	r3,39(r2)

  for ( ; ptr < end ; ptr++)
  8169dc:	00009906 	br	816c44 <altera_avalon_lcd_16207_write+0x2a4>
  {
    char c = *ptr;
  8169e0:	e0bffd17 	ldw	r2,-12(fp)
  8169e4:	10800003 	ldbu	r2,0(r2)
  8169e8:	e0bff905 	stb	r2,-28(fp)

    if (sp->esccount >= 0)
  8169ec:	e0bffc17 	ldw	r2,-16(fp)
  8169f0:	10800903 	ldbu	r2,36(r2)
  8169f4:	10803fcc 	andi	r2,r2,255
  8169f8:	1080201c 	xori	r2,r2,128
  8169fc:	10bfe004 	addi	r2,r2,-128
  816a00:	10003716 	blt	r2,zero,816ae0 <altera_avalon_lcd_16207_write+0x140>
    {
      unsigned int esccount = sp->esccount;
  816a04:	e0bffc17 	ldw	r2,-16(fp)
  816a08:	10800903 	ldbu	r2,36(r2)
  816a0c:	10803fcc 	andi	r2,r2,255
  816a10:	1080201c 	xori	r2,r2,128
  816a14:	10bfe004 	addi	r2,r2,-128
  816a18:	e0bffa15 	stw	r2,-24(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  816a1c:	e0bffa17 	ldw	r2,-24(fp)
  816a20:	1000031e 	bne	r2,zero,816a30 <altera_avalon_lcd_16207_write+0x90>
  816a24:	e0bff907 	ldb	r2,-28(fp)
  816a28:	108016d8 	cmpnei	r2,r2,91
  816a2c:	10000d1e 	bne	r2,zero,816a64 <altera_avalon_lcd_16207_write+0xc4>
  816a30:	e0bffa17 	ldw	r2,-24(fp)
  816a34:	10001826 	beq	r2,zero,816a98 <altera_avalon_lcd_16207_write+0xf8>
          (esccount > 0 && !isdigit(c) && c != ';'))
  816a38:	d0e01117 	ldw	r3,-32700(gp)
  816a3c:	e0bff907 	ldb	r2,-28(fp)
  816a40:	10800044 	addi	r2,r2,1
  816a44:	1885883a 	add	r2,r3,r2
  816a48:	10800003 	ldbu	r2,0(r2)
  816a4c:	10803fcc 	andi	r2,r2,255
  816a50:	1080010c 	andi	r2,r2,4
  816a54:	1000101e 	bne	r2,zero,816a98 <altera_avalon_lcd_16207_write+0xf8>
  816a58:	e0bff907 	ldb	r2,-28(fp)
  816a5c:	10800ee0 	cmpeqi	r2,r2,59
  816a60:	10000d1e 	bne	r2,zero,816a98 <altera_avalon_lcd_16207_write+0xf8>
      {
        sp->escape[esccount] = 0;
  816a64:	e0fffc17 	ldw	r3,-16(fp)
  816a68:	e0bffa17 	ldw	r2,-24(fp)
  816a6c:	1885883a 	add	r2,r3,r2
  816a70:	10800a04 	addi	r2,r2,40
  816a74:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
  816a78:	e0bff907 	ldb	r2,-28(fp)
  816a7c:	100b883a 	mov	r5,r2
  816a80:	e13ffc17 	ldw	r4,-16(fp)
  816a84:	08166f40 	call	8166f4 <lcd_handle_escape>

        sp->esccount = -1;
  816a88:	e0bffc17 	ldw	r2,-16(fp)
  816a8c:	00ffffc4 	movi	r3,-1
  816a90:	10c00905 	stb	r3,36(r2)
  816a94:	00006806 	br	816c38 <altera_avalon_lcd_16207_write+0x298>
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
  816a98:	e0bffc17 	ldw	r2,-16(fp)
  816a9c:	10800903 	ldbu	r2,36(r2)
  816aa0:	10803fcc 	andi	r2,r2,255
  816aa4:	108001e8 	cmpgeui	r2,r2,7
  816aa8:	1000631e 	bne	r2,zero,816c38 <altera_avalon_lcd_16207_write+0x298>
      {
        sp->escape[esccount] = c;
  816aac:	e0fffc17 	ldw	r3,-16(fp)
  816ab0:	e0bffa17 	ldw	r2,-24(fp)
  816ab4:	1885883a 	add	r2,r3,r2
  816ab8:	10800a04 	addi	r2,r2,40
  816abc:	e0fff903 	ldbu	r3,-28(fp)
  816ac0:	10c00005 	stb	r3,0(r2)
        sp->esccount++;
  816ac4:	e0bffc17 	ldw	r2,-16(fp)
  816ac8:	10800903 	ldbu	r2,36(r2)
  816acc:	10800044 	addi	r2,r2,1
  816ad0:	1007883a 	mov	r3,r2
  816ad4:	e0bffc17 	ldw	r2,-16(fp)
  816ad8:	10c00905 	stb	r3,36(r2)
  816adc:	00005606 	br	816c38 <altera_avalon_lcd_16207_write+0x298>
      }
    }
    else if (c == 27) /* ESC */
  816ae0:	e0bff907 	ldb	r2,-28(fp)
  816ae4:	108006d8 	cmpnei	r2,r2,27
  816ae8:	1000031e 	bne	r2,zero,816af8 <altera_avalon_lcd_16207_write+0x158>
    {
      sp->esccount = 0;
  816aec:	e0bffc17 	ldw	r2,-16(fp)
  816af0:	10000905 	stb	zero,36(r2)
  816af4:	00005006 	br	816c38 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\r')
  816af8:	e0bff907 	ldb	r2,-28(fp)
  816afc:	10800358 	cmpnei	r2,r2,13
  816b00:	1000031e 	bne	r2,zero,816b10 <altera_avalon_lcd_16207_write+0x170>
    {
      sp->x = 0;
  816b04:	e0bffc17 	ldw	r2,-16(fp)
  816b08:	10000845 	stb	zero,33(r2)
  816b0c:	00004a06 	br	816c38 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\n')
  816b10:	e0bff907 	ldb	r2,-28(fp)
  816b14:	10800298 	cmpnei	r2,r2,10
  816b18:	1000101e 	bne	r2,zero,816b5c <altera_avalon_lcd_16207_write+0x1bc>
    {
      sp->x = 0;
  816b1c:	e0bffc17 	ldw	r2,-16(fp)
  816b20:	10000845 	stb	zero,33(r2)
      sp->y++;
  816b24:	e0bffc17 	ldw	r2,-16(fp)
  816b28:	10800883 	ldbu	r2,34(r2)
  816b2c:	10800044 	addi	r2,r2,1
  816b30:	1007883a 	mov	r3,r2
  816b34:	e0bffc17 	ldw	r2,-16(fp)
  816b38:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
  816b3c:	e0bffc17 	ldw	r2,-16(fp)
  816b40:	10800883 	ldbu	r2,34(r2)
  816b44:	10803fcc 	andi	r2,r2,255
  816b48:	108000f0 	cmpltui	r2,r2,3
  816b4c:	10003a1e 	bne	r2,zero,816c38 <altera_avalon_lcd_16207_write+0x298>
        lcd_scroll_up(sp);
  816b50:	e13ffc17 	ldw	r4,-16(fp)
  816b54:	08166280 	call	816628 <lcd_scroll_up>
  816b58:	00003706 	br	816c38 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\b')
  816b5c:	e0bff907 	ldb	r2,-28(fp)
  816b60:	10800218 	cmpnei	r2,r2,8
  816b64:	10000b1e 	bne	r2,zero,816b94 <altera_avalon_lcd_16207_write+0x1f4>
    {
      if (sp->x > 0)
  816b68:	e0bffc17 	ldw	r2,-16(fp)
  816b6c:	10800843 	ldbu	r2,33(r2)
  816b70:	10803fcc 	andi	r2,r2,255
  816b74:	10003026 	beq	r2,zero,816c38 <altera_avalon_lcd_16207_write+0x298>
        sp->x--;
  816b78:	e0bffc17 	ldw	r2,-16(fp)
  816b7c:	10800843 	ldbu	r2,33(r2)
  816b80:	10bfffc4 	addi	r2,r2,-1
  816b84:	1007883a 	mov	r3,r2
  816b88:	e0bffc17 	ldw	r2,-16(fp)
  816b8c:	10c00845 	stb	r3,33(r2)
  816b90:	00002906 	br	816c38 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (isprint(c))
  816b94:	d0e01117 	ldw	r3,-32700(gp)
  816b98:	e0bff907 	ldb	r2,-28(fp)
  816b9c:	10800044 	addi	r2,r2,1
  816ba0:	1885883a 	add	r2,r3,r2
  816ba4:	10800003 	ldbu	r2,0(r2)
  816ba8:	10803fcc 	andi	r2,r2,255
  816bac:	1080201c 	xori	r2,r2,128
  816bb0:	10bfe004 	addi	r2,r2,-128
  816bb4:	108025cc 	andi	r2,r2,151
  816bb8:	10001f26 	beq	r2,zero,816c38 <altera_avalon_lcd_16207_write+0x298>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
  816bbc:	e0bffc17 	ldw	r2,-16(fp)
  816bc0:	10800883 	ldbu	r2,34(r2)
  816bc4:	10803fcc 	andi	r2,r2,255
  816bc8:	108000b0 	cmpltui	r2,r2,2
  816bcc:	1000021e 	bne	r2,zero,816bd8 <altera_avalon_lcd_16207_write+0x238>
        lcd_scroll_up(sp);
  816bd0:	e13ffc17 	ldw	r4,-16(fp)
  816bd4:	08166280 	call	816628 <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  816bd8:	e0bffc17 	ldw	r2,-16(fp)
  816bdc:	10800843 	ldbu	r2,33(r2)
  816be0:	10803fcc 	andi	r2,r2,255
  816be4:	10801428 	cmpgeui	r2,r2,80
  816be8:	10000d1e 	bne	r2,zero,816c20 <altera_avalon_lcd_16207_write+0x280>
        sp->line[sp->y].data[sp->x] = c;
  816bec:	e0bffc17 	ldw	r2,-16(fp)
  816bf0:	10800883 	ldbu	r2,34(r2)
  816bf4:	10c03fcc 	andi	r3,r2,255
  816bf8:	e0bffc17 	ldw	r2,-16(fp)
  816bfc:	10800843 	ldbu	r2,33(r2)
  816c00:	10803fcc 	andi	r2,r2,255
  816c04:	e13ffc17 	ldw	r4,-16(fp)
  816c08:	18c018e4 	muli	r3,r3,99
  816c0c:	20c7883a 	add	r3,r4,r3
  816c10:	1885883a 	add	r2,r3,r2
  816c14:	10801004 	addi	r2,r2,64
  816c18:	e0fff903 	ldbu	r3,-28(fp)
  816c1c:	10c00005 	stb	r3,0(r2)

      sp->x++;
  816c20:	e0bffc17 	ldw	r2,-16(fp)
  816c24:	10800843 	ldbu	r2,33(r2)
  816c28:	10800044 	addi	r2,r2,1
  816c2c:	1007883a 	mov	r3,r2
  816c30:	e0bffc17 	ldw	r2,-16(fp)
  816c34:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
  816c38:	e0bffd17 	ldw	r2,-12(fp)
  816c3c:	10800044 	addi	r2,r2,1
  816c40:	e0bffd15 	stw	r2,-12(fp)
  816c44:	e0fffd17 	ldw	r3,-12(fp)
  816c48:	e0bff817 	ldw	r2,-32(fp)
  816c4c:	18bf6436 	bltu	r3,r2,8169e0 <__alt_mem_onchip_mem+0xff80e9e0>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  816c50:	00800404 	movi	r2,16
  816c54:	e0bff615 	stw	r2,-40(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  816c58:	e03ff515 	stw	zero,-44(fp)
  816c5c:	00003706 	br	816d3c <altera_avalon_lcd_16207_write+0x39c>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  816c60:	00801404 	movi	r2,80
  816c64:	e0bff715 	stw	r2,-36(fp)
  816c68:	00001106 	br	816cb0 <altera_avalon_lcd_16207_write+0x310>
      if (sp->line[y].data[width-1] != ' ')
  816c6c:	e0bff717 	ldw	r2,-36(fp)
  816c70:	10bfffc4 	addi	r2,r2,-1
  816c74:	e13ffc17 	ldw	r4,-16(fp)
  816c78:	e0fff517 	ldw	r3,-44(fp)
  816c7c:	18c018e4 	muli	r3,r3,99
  816c80:	20c7883a 	add	r3,r4,r3
  816c84:	1885883a 	add	r2,r3,r2
  816c88:	10801004 	addi	r2,r2,64
  816c8c:	10800003 	ldbu	r2,0(r2)
  816c90:	10803fcc 	andi	r2,r2,255
  816c94:	1080201c 	xori	r2,r2,128
  816c98:	10bfe004 	addi	r2,r2,-128
  816c9c:	10800820 	cmpeqi	r2,r2,32
  816ca0:	10000626 	beq	r2,zero,816cbc <altera_avalon_lcd_16207_write+0x31c>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  816ca4:	e0bff717 	ldw	r2,-36(fp)
  816ca8:	10bfffc4 	addi	r2,r2,-1
  816cac:	e0bff715 	stw	r2,-36(fp)
  816cb0:	e0bff717 	ldw	r2,-36(fp)
  816cb4:	00bfed16 	blt	zero,r2,816c6c <__alt_mem_onchip_mem+0xff80ec6c>
  816cb8:	00000106 	br	816cc0 <altera_avalon_lcd_16207_write+0x320>
      if (sp->line[y].data[width-1] != ' ')
        break;
  816cbc:	0001883a 	nop

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
  816cc0:	e0bff717 	ldw	r2,-36(fp)
  816cc4:	10800448 	cmpgei	r2,r2,17
  816cc8:	1000031e 	bne	r2,zero,816cd8 <altera_avalon_lcd_16207_write+0x338>
      width = ALT_LCD_WIDTH;
  816ccc:	00800404 	movi	r2,16
  816cd0:	e0bff715 	stw	r2,-36(fp)
  816cd4:	00000306 	br	816ce4 <altera_avalon_lcd_16207_write+0x344>
    else
      width++;
  816cd8:	e0bff717 	ldw	r2,-36(fp)
  816cdc:	10800044 	addi	r2,r2,1
  816ce0:	e0bff715 	stw	r2,-36(fp)

    sp->line[y].width = width;
  816ce4:	e0bff717 	ldw	r2,-36(fp)
  816ce8:	1009883a 	mov	r4,r2
  816cec:	e0fffc17 	ldw	r3,-16(fp)
  816cf0:	e0bff517 	ldw	r2,-44(fp)
  816cf4:	108018e4 	muli	r2,r2,99
  816cf8:	1885883a 	add	r2,r3,r2
  816cfc:	10802444 	addi	r2,r2,145
  816d00:	11000005 	stb	r4,0(r2)
    if (widthmax < width)
  816d04:	e0fff617 	ldw	r3,-40(fp)
  816d08:	e0bff717 	ldw	r2,-36(fp)
  816d0c:	1880020e 	bge	r3,r2,816d18 <altera_avalon_lcd_16207_write+0x378>
      widthmax = width;
  816d10:	e0bff717 	ldw	r2,-36(fp)
  816d14:	e0bff615 	stw	r2,-40(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
  816d18:	e0fffc17 	ldw	r3,-16(fp)
  816d1c:	e0bff517 	ldw	r2,-44(fp)
  816d20:	108018e4 	muli	r2,r2,99
  816d24:	1885883a 	add	r2,r3,r2
  816d28:	10802484 	addi	r2,r2,146
  816d2c:	10000005 	stb	zero,0(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  816d30:	e0bff517 	ldw	r2,-44(fp)
  816d34:	10800044 	addi	r2,r2,1
  816d38:	e0bff515 	stw	r2,-44(fp)
  816d3c:	e0bff517 	ldw	r2,-44(fp)
  816d40:	10800090 	cmplti	r2,r2,2
  816d44:	103fc61e 	bne	r2,zero,816c60 <__alt_mem_onchip_mem+0xff80ec60>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
  816d48:	e0bff617 	ldw	r2,-40(fp)
  816d4c:	10800448 	cmpgei	r2,r2,17
  816d50:	1000031e 	bne	r2,zero,816d60 <altera_avalon_lcd_16207_write+0x3c0>
    sp->scrollmax = 0;
  816d54:	e0bffc17 	ldw	r2,-16(fp)
  816d58:	10000985 	stb	zero,38(r2)
  816d5c:	00002e06 	br	816e18 <altera_avalon_lcd_16207_write+0x478>
  else
  {
    widthmax *= 2;
  816d60:	e0bff617 	ldw	r2,-40(fp)
  816d64:	1085883a 	add	r2,r2,r2
  816d68:	e0bff615 	stw	r2,-40(fp)
    sp->scrollmax = widthmax;
  816d6c:	e0bff617 	ldw	r2,-40(fp)
  816d70:	1007883a 	mov	r3,r2
  816d74:	e0bffc17 	ldw	r2,-16(fp)
  816d78:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  816d7c:	e03ff515 	stw	zero,-44(fp)
  816d80:	00002206 	br	816e0c <altera_avalon_lcd_16207_write+0x46c>
      if (sp->line[y].width > ALT_LCD_WIDTH)
  816d84:	e0fffc17 	ldw	r3,-16(fp)
  816d88:	e0bff517 	ldw	r2,-44(fp)
  816d8c:	108018e4 	muli	r2,r2,99
  816d90:	1885883a 	add	r2,r3,r2
  816d94:	10802444 	addi	r2,r2,145
  816d98:	10800003 	ldbu	r2,0(r2)
  816d9c:	10803fcc 	andi	r2,r2,255
  816da0:	1080201c 	xori	r2,r2,128
  816da4:	10bfe004 	addi	r2,r2,-128
  816da8:	10800450 	cmplti	r2,r2,17
  816dac:	1000141e 	bne	r2,zero,816e00 <altera_avalon_lcd_16207_write+0x460>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
  816db0:	e0fffc17 	ldw	r3,-16(fp)
  816db4:	e0bff517 	ldw	r2,-44(fp)
  816db8:	108018e4 	muli	r2,r2,99
  816dbc:	1885883a 	add	r2,r3,r2
  816dc0:	10802444 	addi	r2,r2,145
  816dc4:	10800003 	ldbu	r2,0(r2)
  816dc8:	10803fcc 	andi	r2,r2,255
  816dcc:	1080201c 	xori	r2,r2,128
  816dd0:	10bfe004 	addi	r2,r2,-128
  816dd4:	1004923a 	slli	r2,r2,8
  816dd8:	e17ff617 	ldw	r5,-40(fp)
  816ddc:	1009883a 	mov	r4,r2
  816de0:	0813c180 	call	813c18 <__divsi3>
  816de4:	1009883a 	mov	r4,r2
  816de8:	e0fffc17 	ldw	r3,-16(fp)
  816dec:	e0bff517 	ldw	r2,-44(fp)
  816df0:	108018e4 	muli	r2,r2,99
  816df4:	1885883a 	add	r2,r3,r2
  816df8:	10802484 	addi	r2,r2,146
  816dfc:	11000005 	stb	r4,0(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  816e00:	e0bff517 	ldw	r2,-44(fp)
  816e04:	10800044 	addi	r2,r2,1
  816e08:	e0bff515 	stw	r2,-44(fp)
  816e0c:	e0bff517 	ldw	r2,-44(fp)
  816e10:	10800090 	cmplti	r2,r2,2
  816e14:	103fdb1e 	bne	r2,zero,816d84 <__alt_mem_onchip_mem+0xff80ed84>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
  816e18:	e0bffc17 	ldw	r2,-16(fp)
  816e1c:	10800943 	ldbu	r2,37(r2)
  816e20:	10803fcc 	andi	r2,r2,255
  816e24:	e0bffb15 	stw	r2,-20(fp)

    lcd_repaint_screen(sp);
  816e28:	e13ffc17 	ldw	r4,-16(fp)
  816e2c:	081643c0 	call	81643c <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
  816e30:	e0bffc17 	ldw	r2,-16(fp)
  816e34:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
  816e38:	e0bffc17 	ldw	r2,-16(fp)
  816e3c:	10800943 	ldbu	r2,37(r2)
  816e40:	10c03fcc 	andi	r3,r2,255
  816e44:	e0bffb17 	ldw	r2,-20(fp)
  816e48:	18800426 	beq	r3,r2,816e5c <altera_avalon_lcd_16207_write+0x4bc>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
  816e4c:	e0bffc17 	ldw	r2,-16(fp)
  816e50:	00c00044 	movi	r3,1
  816e54:	10c009c5 	stb	r3,39(r2)
  }
  816e58:	003fef06 	br	816e18 <__alt_mem_onchip_mem+0xff80ee18>
    sp->active = 0;

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
      break;
  816e5c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
  816e60:	e0bffe17 	ldw	r2,-8(fp)
}
  816e64:	e037883a 	mov	sp,fp
  816e68:	dfc00117 	ldw	ra,4(sp)
  816e6c:	df000017 	ldw	fp,0(sp)
  816e70:	dec00204 	addi	sp,sp,8
  816e74:	f800283a 	ret

00816e78 <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
  816e78:	defffc04 	addi	sp,sp,-16
  816e7c:	dfc00315 	stw	ra,12(sp)
  816e80:	df000215 	stw	fp,8(sp)
  816e84:	df000204 	addi	fp,sp,8
  816e88:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
  816e8c:	e0bfff17 	ldw	r2,-4(fp)
  816e90:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
  816e94:	e0bffe17 	ldw	r2,-8(fp)
  816e98:	10800943 	ldbu	r2,37(r2)
  816e9c:	10803fcc 	andi	r2,r2,255
  816ea0:	10c00044 	addi	r3,r2,1
  816ea4:	e0bffe17 	ldw	r2,-8(fp)
  816ea8:	10800983 	ldbu	r2,38(r2)
  816eac:	10803fcc 	andi	r2,r2,255
  816eb0:	18800316 	blt	r3,r2,816ec0 <alt_lcd_16207_timeout+0x48>
    sp->scrollpos = 0;
  816eb4:	e0bffe17 	ldw	r2,-8(fp)
  816eb8:	10000945 	stb	zero,37(r2)
  816ebc:	00000606 	br	816ed8 <alt_lcd_16207_timeout+0x60>
  else
    sp->scrollpos = sp->scrollpos + 1;
  816ec0:	e0bffe17 	ldw	r2,-8(fp)
  816ec4:	10800943 	ldbu	r2,37(r2)
  816ec8:	10800044 	addi	r2,r2,1
  816ecc:	1007883a 	mov	r3,r2
  816ed0:	e0bffe17 	ldw	r2,-8(fp)
  816ed4:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
  816ed8:	e0bffe17 	ldw	r2,-8(fp)
  816edc:	10800983 	ldbu	r2,38(r2)
  816ee0:	10803fcc 	andi	r2,r2,255
  816ee4:	10000826 	beq	r2,zero,816f08 <alt_lcd_16207_timeout+0x90>
  816ee8:	e0bffe17 	ldw	r2,-8(fp)
  816eec:	108009c3 	ldbu	r2,39(r2)
  816ef0:	10803fcc 	andi	r2,r2,255
  816ef4:	1080201c 	xori	r2,r2,128
  816ef8:	10bfe004 	addi	r2,r2,-128
  816efc:	1000021e 	bne	r2,zero,816f08 <alt_lcd_16207_timeout+0x90>
    lcd_repaint_screen(sp);
  816f00:	e13ffe17 	ldw	r4,-8(fp)
  816f04:	081643c0 	call	81643c <lcd_repaint_screen>

  return sp->period;
  816f08:	e0bffe17 	ldw	r2,-8(fp)
  816f0c:	10800717 	ldw	r2,28(r2)
}
  816f10:	e037883a 	mov	sp,fp
  816f14:	dfc00117 	ldw	ra,4(sp)
  816f18:	df000017 	ldw	fp,0(sp)
  816f1c:	dec00204 	addi	sp,sp,8
  816f20:	f800283a 	ret

00816f24 <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
  816f24:	defffc04 	addi	sp,sp,-16
  816f28:	dfc00315 	stw	ra,12(sp)
  816f2c:	df000215 	stw	fp,8(sp)
  816f30:	df000204 	addi	fp,sp,8
  816f34:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
  816f38:	e0bfff17 	ldw	r2,-4(fp)
  816f3c:	10800017 	ldw	r2,0(r2)
  816f40:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
  816f44:	e0bfff17 	ldw	r2,-4(fp)
  816f48:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
  816f4c:	010ea604 	movi	r4,15000
  816f50:	08180d00 	call	8180d0 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  816f54:	e0bffe17 	ldw	r2,-8(fp)
  816f58:	00c00c04 	movi	r3,48
  816f5c:	10c00035 	stwio	r3,0(r2)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
  816f60:	01040104 	movi	r4,4100
  816f64:	08180d00 	call	8180d0 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  816f68:	e0bffe17 	ldw	r2,-8(fp)
  816f6c:	00c00c04 	movi	r3,48
  816f70:	10c00035 	stwio	r3,0(r2)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
  816f74:	0100fa04 	movi	r4,1000
  816f78:	08180d00 	call	8180d0 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  816f7c:	e0bffe17 	ldw	r2,-8(fp)
  816f80:	00c00c04 	movi	r3,48
  816f84:	10c00035 	stwio	r3,0(r2)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
  816f88:	01400e04 	movi	r5,56
  816f8c:	e13fff17 	ldw	r4,-4(fp)
  816f90:	08161dc0 	call	8161dc <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
  816f94:	01400204 	movi	r5,8
  816f98:	e13fff17 	ldw	r4,-4(fp)
  816f9c:	08161dc0 	call	8161dc <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
  816fa0:	e13fff17 	ldw	r4,-4(fp)
  816fa4:	081636c0 	call	81636c <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
  816fa8:	01400184 	movi	r5,6
  816fac:	e13fff17 	ldw	r4,-4(fp)
  816fb0:	08161dc0 	call	8161dc <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
  816fb4:	01400304 	movi	r5,12
  816fb8:	e13fff17 	ldw	r4,-4(fp)
  816fbc:	08161dc0 	call	8161dc <lcd_write_command>

  sp->esccount = -1;
  816fc0:	e0bfff17 	ldw	r2,-4(fp)
  816fc4:	00ffffc4 	movi	r3,-1
  816fc8:	10c00905 	stb	r3,36(r2)
  memset(sp->escape, 0, sizeof(sp->escape));
  816fcc:	e0bfff17 	ldw	r2,-4(fp)
  816fd0:	10800a04 	addi	r2,r2,40
  816fd4:	01800204 	movi	r6,8
  816fd8:	000b883a 	mov	r5,zero
  816fdc:	1009883a 	mov	r4,r2
  816fe0:	080f1d40 	call	80f1d4 <memset>

  sp->scrollpos = 0;
  816fe4:	e0bfff17 	ldw	r2,-4(fp)
  816fe8:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
  816fec:	e0bfff17 	ldw	r2,-4(fp)
  816ff0:	10000985 	stb	zero,38(r2)
  sp->active = 0;
  816ff4:	e0bfff17 	ldw	r2,-4(fp)
  816ff8:	100009c5 	stb	zero,39(r2)
  816ffc:	d0a75f17 	ldw	r2,-25220(gp)

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
  817000:	01400284 	movi	r5,10
  817004:	1009883a 	mov	r4,r2
  817008:	0813d100 	call	813d10 <__udivsi3>
  81700c:	1007883a 	mov	r3,r2
  817010:	e0bfff17 	ldw	r2,-4(fp)
  817014:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
  817018:	e0bfff17 	ldw	r2,-4(fp)
  81701c:	10c00104 	addi	r3,r2,4
  817020:	e0bfff17 	ldw	r2,-4(fp)
  817024:	10800717 	ldw	r2,28(r2)
  817028:	e1ffff17 	ldw	r7,-4(fp)
  81702c:	01802074 	movhi	r6,129
  817030:	319b9e04 	addi	r6,r6,28280
  817034:	100b883a 	mov	r5,r2
  817038:	1809883a 	mov	r4,r3
  81703c:	08147bc0 	call	8147bc <alt_alarm_start>
}
  817040:	0001883a 	nop
  817044:	e037883a 	mov	sp,fp
  817048:	dfc00117 	ldw	ra,4(sp)
  81704c:	df000017 	ldw	fp,0(sp)
  817050:	dec00204 	addi	sp,sp,8
  817054:	f800283a 	ret

00817058 <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
  817058:	defffa04 	addi	sp,sp,-24
  81705c:	dfc00515 	stw	ra,20(sp)
  817060:	df000415 	stw	fp,16(sp)
  817064:	df000404 	addi	fp,sp,16
  817068:	e13ffd15 	stw	r4,-12(fp)
  81706c:	e17ffe15 	stw	r5,-8(fp)
  817070:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
  817074:	e0bffd17 	ldw	r2,-12(fp)
  817078:	10800017 	ldw	r2,0(r2)
  81707c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
  817080:	e0bffc17 	ldw	r2,-16(fp)
  817084:	10c00a04 	addi	r3,r2,40
  817088:	e0bffd17 	ldw	r2,-12(fp)
  81708c:	10800217 	ldw	r2,8(r2)
  817090:	100f883a 	mov	r7,r2
  817094:	e1bfff17 	ldw	r6,-4(fp)
  817098:	e17ffe17 	ldw	r5,-8(fp)
  81709c:	1809883a 	mov	r4,r3
  8170a0:	08169a00 	call	8169a0 <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
  8170a4:	e037883a 	mov	sp,fp
  8170a8:	dfc00117 	ldw	ra,4(sp)
  8170ac:	df000017 	ldw	fp,0(sp)
  8170b0:	dec00204 	addi	sp,sp,8
  8170b4:	f800283a 	ret

008170b8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  8170b8:	defffa04 	addi	sp,sp,-24
  8170bc:	dfc00515 	stw	ra,20(sp)
  8170c0:	df000415 	stw	fp,16(sp)
  8170c4:	df000404 	addi	fp,sp,16
  8170c8:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  8170cc:	0007883a 	mov	r3,zero
  8170d0:	e0bfff17 	ldw	r2,-4(fp)
  8170d4:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  8170d8:	e0bfff17 	ldw	r2,-4(fp)
  8170dc:	10800104 	addi	r2,r2,4
  8170e0:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8170e4:	0005303a 	rdctl	r2,status
  8170e8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8170ec:	e0fffd17 	ldw	r3,-12(fp)
  8170f0:	00bfff84 	movi	r2,-2
  8170f4:	1884703a 	and	r2,r3,r2
  8170f8:	1001703a 	wrctl	status,r2
  
  return context;
  8170fc:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  817100:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
  817104:	08154340 	call	815434 <alt_tick>
  817108:	e0bffc17 	ldw	r2,-16(fp)
  81710c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  817110:	e0bffe17 	ldw	r2,-8(fp)
  817114:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  817118:	0001883a 	nop
  81711c:	e037883a 	mov	sp,fp
  817120:	dfc00117 	ldw	ra,4(sp)
  817124:	df000017 	ldw	fp,0(sp)
  817128:	dec00204 	addi	sp,sp,8
  81712c:	f800283a 	ret

00817130 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  817130:	defff804 	addi	sp,sp,-32
  817134:	dfc00715 	stw	ra,28(sp)
  817138:	df000615 	stw	fp,24(sp)
  81713c:	df000604 	addi	fp,sp,24
  817140:	e13ffc15 	stw	r4,-16(fp)
  817144:	e17ffd15 	stw	r5,-12(fp)
  817148:	e1bffe15 	stw	r6,-8(fp)
  81714c:	e1ffff15 	stw	r7,-4(fp)
  817150:	e0bfff17 	ldw	r2,-4(fp)
  817154:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  817158:	d0a75f17 	ldw	r2,-25220(gp)
  81715c:	1000021e 	bne	r2,zero,817168 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
  817160:	e0bffb17 	ldw	r2,-20(fp)
  817164:	d0a75f15 	stw	r2,-25220(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  817168:	e0bffc17 	ldw	r2,-16(fp)
  81716c:	10800104 	addi	r2,r2,4
  817170:	00c001c4 	movi	r3,7
  817174:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  817178:	d8000015 	stw	zero,0(sp)
  81717c:	e1fffc17 	ldw	r7,-16(fp)
  817180:	01802074 	movhi	r6,129
  817184:	319c2e04 	addi	r6,r6,28856
  817188:	e17ffe17 	ldw	r5,-8(fp)
  81718c:	e13ffd17 	ldw	r4,-12(fp)
  817190:	0814b0c0 	call	814b0c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  817194:	0001883a 	nop
  817198:	e037883a 	mov	sp,fp
  81719c:	dfc00117 	ldw	ra,4(sp)
  8171a0:	df000017 	ldw	fp,0(sp)
  8171a4:	dec00204 	addi	sp,sp,8
  8171a8:	f800283a 	ret

008171ac <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  8171ac:	defffa04 	addi	sp,sp,-24
  8171b0:	dfc00515 	stw	ra,20(sp)
  8171b4:	df000415 	stw	fp,16(sp)
  8171b8:	df000404 	addi	fp,sp,16
  8171bc:	e13ffd15 	stw	r4,-12(fp)
  8171c0:	e17ffe15 	stw	r5,-8(fp)
  8171c4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  8171c8:	e0bffd17 	ldw	r2,-12(fp)
  8171cc:	10800017 	ldw	r2,0(r2)
  8171d0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  8171d4:	e0bffc17 	ldw	r2,-16(fp)
  8171d8:	10c00a04 	addi	r3,r2,40
  8171dc:	e0bffd17 	ldw	r2,-12(fp)
  8171e0:	10800217 	ldw	r2,8(r2)
  8171e4:	100f883a 	mov	r7,r2
  8171e8:	e1bfff17 	ldw	r6,-4(fp)
  8171ec:	e17ffe17 	ldw	r5,-8(fp)
  8171f0:	1809883a 	mov	r4,r3
  8171f4:	08176c00 	call	8176c0 <altera_avalon_uart_read>
      fd->fd_flags);
}
  8171f8:	e037883a 	mov	sp,fp
  8171fc:	dfc00117 	ldw	ra,4(sp)
  817200:	df000017 	ldw	fp,0(sp)
  817204:	dec00204 	addi	sp,sp,8
  817208:	f800283a 	ret

0081720c <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  81720c:	defffa04 	addi	sp,sp,-24
  817210:	dfc00515 	stw	ra,20(sp)
  817214:	df000415 	stw	fp,16(sp)
  817218:	df000404 	addi	fp,sp,16
  81721c:	e13ffd15 	stw	r4,-12(fp)
  817220:	e17ffe15 	stw	r5,-8(fp)
  817224:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  817228:	e0bffd17 	ldw	r2,-12(fp)
  81722c:	10800017 	ldw	r2,0(r2)
  817230:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  817234:	e0bffc17 	ldw	r2,-16(fp)
  817238:	10c00a04 	addi	r3,r2,40
  81723c:	e0bffd17 	ldw	r2,-12(fp)
  817240:	10800217 	ldw	r2,8(r2)
  817244:	100f883a 	mov	r7,r2
  817248:	e1bfff17 	ldw	r6,-4(fp)
  81724c:	e17ffe17 	ldw	r5,-8(fp)
  817250:	1809883a 	mov	r4,r3
  817254:	08178d80 	call	8178d8 <altera_avalon_uart_write>
      fd->fd_flags);
}
  817258:	e037883a 	mov	sp,fp
  81725c:	dfc00117 	ldw	ra,4(sp)
  817260:	df000017 	ldw	fp,0(sp)
  817264:	dec00204 	addi	sp,sp,8
  817268:	f800283a 	ret

0081726c <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  81726c:	defffc04 	addi	sp,sp,-16
  817270:	dfc00315 	stw	ra,12(sp)
  817274:	df000215 	stw	fp,8(sp)
  817278:	df000204 	addi	fp,sp,8
  81727c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  817280:	e0bfff17 	ldw	r2,-4(fp)
  817284:	10800017 	ldw	r2,0(r2)
  817288:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  81728c:	e0bffe17 	ldw	r2,-8(fp)
  817290:	10c00a04 	addi	r3,r2,40
  817294:	e0bfff17 	ldw	r2,-4(fp)
  817298:	10800217 	ldw	r2,8(r2)
  81729c:	100b883a 	mov	r5,r2
  8172a0:	1809883a 	mov	r4,r3
  8172a4:	08176300 	call	817630 <altera_avalon_uart_close>
}
  8172a8:	e037883a 	mov	sp,fp
  8172ac:	dfc00117 	ldw	ra,4(sp)
  8172b0:	df000017 	ldw	fp,0(sp)
  8172b4:	dec00204 	addi	sp,sp,8
  8172b8:	f800283a 	ret

008172bc <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  8172bc:	defff804 	addi	sp,sp,-32
  8172c0:	dfc00715 	stw	ra,28(sp)
  8172c4:	df000615 	stw	fp,24(sp)
  8172c8:	df000604 	addi	fp,sp,24
  8172cc:	e13ffd15 	stw	r4,-12(fp)
  8172d0:	e17ffe15 	stw	r5,-8(fp)
  8172d4:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
  8172d8:	e0bffd17 	ldw	r2,-12(fp)
  8172dc:	10800017 	ldw	r2,0(r2)
  8172e0:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  8172e4:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  8172e8:	1000041e 	bne	r2,zero,8172fc <altera_avalon_uart_init+0x40>
  8172ec:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  8172f0:	1000021e 	bne	r2,zero,8172fc <altera_avalon_uart_init+0x40>
  8172f4:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  8172f8:	10000226 	beq	r2,zero,817304 <altera_avalon_uart_init+0x48>
  8172fc:	00800044 	movi	r2,1
  817300:	00000106 	br	817308 <altera_avalon_uart_init+0x4c>
  817304:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  817308:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  81730c:	e0bffc17 	ldw	r2,-16(fp)
  817310:	10000f1e 	bne	r2,zero,817350 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  817314:	e0bffd17 	ldw	r2,-12(fp)
  817318:	00c32004 	movi	r3,3200
  81731c:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  817320:	e0bffb17 	ldw	r2,-20(fp)
  817324:	10800304 	addi	r2,r2,12
  817328:	e0fffd17 	ldw	r3,-12(fp)
  81732c:	18c00117 	ldw	r3,4(r3)
  817330:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
  817334:	d8000015 	stw	zero,0(sp)
  817338:	e1fffd17 	ldw	r7,-12(fp)
  81733c:	01802074 	movhi	r6,129
  817340:	319cda04 	addi	r6,r6,29544
  817344:	e17fff17 	ldw	r5,-4(fp)
  817348:	e13ffe17 	ldw	r4,-8(fp)
  81734c:	0814b0c0 	call	814b0c <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
  817350:	0001883a 	nop
  817354:	e037883a 	mov	sp,fp
  817358:	dfc00117 	ldw	ra,4(sp)
  81735c:	df000017 	ldw	fp,0(sp)
  817360:	dec00204 	addi	sp,sp,8
  817364:	f800283a 	ret

00817368 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  817368:	defffa04 	addi	sp,sp,-24
  81736c:	dfc00515 	stw	ra,20(sp)
  817370:	df000415 	stw	fp,16(sp)
  817374:	df000404 	addi	fp,sp,16
  817378:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  81737c:	e0bfff17 	ldw	r2,-4(fp)
  817380:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
  817384:	e0bffc17 	ldw	r2,-16(fp)
  817388:	10800017 	ldw	r2,0(r2)
  81738c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  817390:	e0bffd17 	ldw	r2,-12(fp)
  817394:	10800204 	addi	r2,r2,8
  817398:	10800037 	ldwio	r2,0(r2)
  81739c:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  8173a0:	e0bffd17 	ldw	r2,-12(fp)
  8173a4:	10800204 	addi	r2,r2,8
  8173a8:	0007883a 	mov	r3,zero
  8173ac:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  8173b0:	e0bffd17 	ldw	r2,-12(fp)
  8173b4:	10800204 	addi	r2,r2,8
  8173b8:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  8173bc:	e0bffe17 	ldw	r2,-8(fp)
  8173c0:	1080200c 	andi	r2,r2,128
  8173c4:	10000326 	beq	r2,zero,8173d4 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
  8173c8:	e17ffe17 	ldw	r5,-8(fp)
  8173cc:	e13ffc17 	ldw	r4,-16(fp)
  8173d0:	08174040 	call	817404 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  8173d4:	e0bffe17 	ldw	r2,-8(fp)
  8173d8:	1081100c 	andi	r2,r2,1088
  8173dc:	10000326 	beq	r2,zero,8173ec <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  8173e0:	e17ffe17 	ldw	r5,-8(fp)
  8173e4:	e13ffc17 	ldw	r4,-16(fp)
  8173e8:	08174e80 	call	8174e8 <altera_avalon_uart_txirq>
  }
  

}
  8173ec:	0001883a 	nop
  8173f0:	e037883a 	mov	sp,fp
  8173f4:	dfc00117 	ldw	ra,4(sp)
  8173f8:	df000017 	ldw	fp,0(sp)
  8173fc:	dec00204 	addi	sp,sp,8
  817400:	f800283a 	ret

00817404 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  817404:	defffc04 	addi	sp,sp,-16
  817408:	df000315 	stw	fp,12(sp)
  81740c:	df000304 	addi	fp,sp,12
  817410:	e13ffe15 	stw	r4,-8(fp)
  817414:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  817418:	e0bfff17 	ldw	r2,-4(fp)
  81741c:	108000cc 	andi	r2,r2,3
  817420:	10002c1e 	bne	r2,zero,8174d4 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  817424:	e0bffe17 	ldw	r2,-8(fp)
  817428:	10800317 	ldw	r2,12(r2)
  81742c:	e0bffe17 	ldw	r2,-8(fp)
  817430:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  817434:	e0bffe17 	ldw	r2,-8(fp)
  817438:	10800317 	ldw	r2,12(r2)
  81743c:	10800044 	addi	r2,r2,1
  817440:	10800fcc 	andi	r2,r2,63
  817444:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  817448:	e0bffe17 	ldw	r2,-8(fp)
  81744c:	10800317 	ldw	r2,12(r2)
  817450:	e0fffe17 	ldw	r3,-8(fp)
  817454:	18c00017 	ldw	r3,0(r3)
  817458:	18c00037 	ldwio	r3,0(r3)
  81745c:	1809883a 	mov	r4,r3
  817460:	e0fffe17 	ldw	r3,-8(fp)
  817464:	1885883a 	add	r2,r3,r2
  817468:	10800704 	addi	r2,r2,28
  81746c:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
  817470:	e0bffe17 	ldw	r2,-8(fp)
  817474:	e0fffd17 	ldw	r3,-12(fp)
  817478:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  81747c:	e0bffe17 	ldw	r2,-8(fp)
  817480:	10800317 	ldw	r2,12(r2)
  817484:	10800044 	addi	r2,r2,1
  817488:	10800fcc 	andi	r2,r2,63
  81748c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  817490:	e0bffe17 	ldw	r2,-8(fp)
  817494:	10c00217 	ldw	r3,8(r2)
  817498:	e0bffd17 	ldw	r2,-12(fp)
  81749c:	18800e1e 	bne	r3,r2,8174d8 <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  8174a0:	e0bffe17 	ldw	r2,-8(fp)
  8174a4:	10c00117 	ldw	r3,4(r2)
  8174a8:	00bfdfc4 	movi	r2,-129
  8174ac:	1886703a 	and	r3,r3,r2
  8174b0:	e0bffe17 	ldw	r2,-8(fp)
  8174b4:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  8174b8:	e0bffe17 	ldw	r2,-8(fp)
  8174bc:	10800017 	ldw	r2,0(r2)
  8174c0:	10800304 	addi	r2,r2,12
  8174c4:	e0fffe17 	ldw	r3,-8(fp)
  8174c8:	18c00117 	ldw	r3,4(r3)
  8174cc:	10c00035 	stwio	r3,0(r2)
  8174d0:	00000106 	br	8174d8 <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
  8174d4:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
  8174d8:	e037883a 	mov	sp,fp
  8174dc:	df000017 	ldw	fp,0(sp)
  8174e0:	dec00104 	addi	sp,sp,4
  8174e4:	f800283a 	ret

008174e8 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  8174e8:	defffb04 	addi	sp,sp,-20
  8174ec:	df000415 	stw	fp,16(sp)
  8174f0:	df000404 	addi	fp,sp,16
  8174f4:	e13ffc15 	stw	r4,-16(fp)
  8174f8:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  8174fc:	e0bffc17 	ldw	r2,-16(fp)
  817500:	10c00417 	ldw	r3,16(r2)
  817504:	e0bffc17 	ldw	r2,-16(fp)
  817508:	10800517 	ldw	r2,20(r2)
  81750c:	18803226 	beq	r3,r2,8175d8 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  817510:	e0bffc17 	ldw	r2,-16(fp)
  817514:	10800617 	ldw	r2,24(r2)
  817518:	1080008c 	andi	r2,r2,2
  81751c:	10000326 	beq	r2,zero,81752c <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  817520:	e0bffd17 	ldw	r2,-12(fp)
  817524:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  817528:	10001d26 	beq	r2,zero,8175a0 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  81752c:	e0bffc17 	ldw	r2,-16(fp)
  817530:	10800417 	ldw	r2,16(r2)
  817534:	e0bffc17 	ldw	r2,-16(fp)
  817538:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  81753c:	e0bffc17 	ldw	r2,-16(fp)
  817540:	10800017 	ldw	r2,0(r2)
  817544:	10800104 	addi	r2,r2,4
  817548:	e0fffc17 	ldw	r3,-16(fp)
  81754c:	18c00417 	ldw	r3,16(r3)
  817550:	e13ffc17 	ldw	r4,-16(fp)
  817554:	20c7883a 	add	r3,r4,r3
  817558:	18c01704 	addi	r3,r3,92
  81755c:	18c00003 	ldbu	r3,0(r3)
  817560:	18c03fcc 	andi	r3,r3,255
  817564:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  817568:	e0bffc17 	ldw	r2,-16(fp)
  81756c:	10800417 	ldw	r2,16(r2)
  817570:	10800044 	addi	r2,r2,1
  817574:	e0fffc17 	ldw	r3,-16(fp)
  817578:	18800415 	stw	r2,16(r3)
  81757c:	10c00fcc 	andi	r3,r2,63
  817580:	e0bffc17 	ldw	r2,-16(fp)
  817584:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  817588:	e0bffc17 	ldw	r2,-16(fp)
  81758c:	10800117 	ldw	r2,4(r2)
  817590:	10c01014 	ori	r3,r2,64
  817594:	e0bffc17 	ldw	r2,-16(fp)
  817598:	10c00115 	stw	r3,4(r2)
  81759c:	00000e06 	br	8175d8 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  8175a0:	e0bffc17 	ldw	r2,-16(fp)
  8175a4:	10800017 	ldw	r2,0(r2)
  8175a8:	10800204 	addi	r2,r2,8
  8175ac:	10800037 	ldwio	r2,0(r2)
  8175b0:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  8175b4:	e0bffd17 	ldw	r2,-12(fp)
  8175b8:	1082000c 	andi	r2,r2,2048
  8175bc:	1000061e 	bne	r2,zero,8175d8 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  8175c0:	e0bffc17 	ldw	r2,-16(fp)
  8175c4:	10c00117 	ldw	r3,4(r2)
  8175c8:	00bfefc4 	movi	r2,-65
  8175cc:	1886703a 	and	r3,r3,r2
  8175d0:	e0bffc17 	ldw	r2,-16(fp)
  8175d4:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  8175d8:	e0bffc17 	ldw	r2,-16(fp)
  8175dc:	10c00417 	ldw	r3,16(r2)
  8175e0:	e0bffc17 	ldw	r2,-16(fp)
  8175e4:	10800517 	ldw	r2,20(r2)
  8175e8:	1880061e 	bne	r3,r2,817604 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  8175ec:	e0bffc17 	ldw	r2,-16(fp)
  8175f0:	10c00117 	ldw	r3,4(r2)
  8175f4:	00beefc4 	movi	r2,-1089
  8175f8:	1886703a 	and	r3,r3,r2
  8175fc:	e0bffc17 	ldw	r2,-16(fp)
  817600:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  817604:	e0bffc17 	ldw	r2,-16(fp)
  817608:	10800017 	ldw	r2,0(r2)
  81760c:	10800304 	addi	r2,r2,12
  817610:	e0fffc17 	ldw	r3,-16(fp)
  817614:	18c00117 	ldw	r3,4(r3)
  817618:	10c00035 	stwio	r3,0(r2)
}
  81761c:	0001883a 	nop
  817620:	e037883a 	mov	sp,fp
  817624:	df000017 	ldw	fp,0(sp)
  817628:	dec00104 	addi	sp,sp,4
  81762c:	f800283a 	ret

00817630 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  817630:	defffd04 	addi	sp,sp,-12
  817634:	df000215 	stw	fp,8(sp)
  817638:	df000204 	addi	fp,sp,8
  81763c:	e13ffe15 	stw	r4,-8(fp)
  817640:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  817644:	00000506 	br	81765c <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  817648:	e0bfff17 	ldw	r2,-4(fp)
  81764c:	1090000c 	andi	r2,r2,16384
  817650:	10000226 	beq	r2,zero,81765c <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
  817654:	00bffd44 	movi	r2,-11
  817658:	00000606 	br	817674 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  81765c:	e0bffe17 	ldw	r2,-8(fp)
  817660:	10c00417 	ldw	r3,16(r2)
  817664:	e0bffe17 	ldw	r2,-8(fp)
  817668:	10800517 	ldw	r2,20(r2)
  81766c:	18bff61e 	bne	r3,r2,817648 <__alt_mem_onchip_mem+0xff80f648>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  817670:	0005883a 	mov	r2,zero
}
  817674:	e037883a 	mov	sp,fp
  817678:	df000017 	ldw	fp,0(sp)
  81767c:	dec00104 	addi	sp,sp,4
  817680:	f800283a 	ret

00817684 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  817684:	defffe04 	addi	sp,sp,-8
  817688:	dfc00115 	stw	ra,4(sp)
  81768c:	df000015 	stw	fp,0(sp)
  817690:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  817694:	d0a00b17 	ldw	r2,-32724(gp)
  817698:	10000326 	beq	r2,zero,8176a8 <alt_get_errno+0x24>
  81769c:	d0a00b17 	ldw	r2,-32724(gp)
  8176a0:	103ee83a 	callr	r2
  8176a4:	00000106 	br	8176ac <alt_get_errno+0x28>
  8176a8:	d0a75a04 	addi	r2,gp,-25240
}
  8176ac:	e037883a 	mov	sp,fp
  8176b0:	dfc00117 	ldw	ra,4(sp)
  8176b4:	df000017 	ldw	fp,0(sp)
  8176b8:	dec00204 	addi	sp,sp,8
  8176bc:	f800283a 	ret

008176c0 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  8176c0:	defff204 	addi	sp,sp,-56
  8176c4:	dfc00d15 	stw	ra,52(sp)
  8176c8:	df000c15 	stw	fp,48(sp)
  8176cc:	df000c04 	addi	fp,sp,48
  8176d0:	e13ffc15 	stw	r4,-16(fp)
  8176d4:	e17ffd15 	stw	r5,-12(fp)
  8176d8:	e1bffe15 	stw	r6,-8(fp)
  8176dc:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
  8176e0:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
  8176e4:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  8176e8:	e0bfff17 	ldw	r2,-4(fp)
  8176ec:	1090000c 	andi	r2,r2,16384
  8176f0:	1005003a 	cmpeq	r2,r2,zero
  8176f4:	10803fcc 	andi	r2,r2,255
  8176f8:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  8176fc:	00001306 	br	81774c <altera_avalon_uart_read+0x8c>
    {
      count++;
  817700:	e0bff517 	ldw	r2,-44(fp)
  817704:	10800044 	addi	r2,r2,1
  817708:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  81770c:	e0bffd17 	ldw	r2,-12(fp)
  817710:	10c00044 	addi	r3,r2,1
  817714:	e0fffd15 	stw	r3,-12(fp)
  817718:	e0fffc17 	ldw	r3,-16(fp)
  81771c:	18c00217 	ldw	r3,8(r3)
  817720:	e13ffc17 	ldw	r4,-16(fp)
  817724:	20c7883a 	add	r3,r4,r3
  817728:	18c00704 	addi	r3,r3,28
  81772c:	18c00003 	ldbu	r3,0(r3)
  817730:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
  817734:	e0bffc17 	ldw	r2,-16(fp)
  817738:	10800217 	ldw	r2,8(r2)
  81773c:	10800044 	addi	r2,r2,1
  817740:	10c00fcc 	andi	r3,r2,63
  817744:	e0bffc17 	ldw	r2,-16(fp)
  817748:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  81774c:	e0fff517 	ldw	r3,-44(fp)
  817750:	e0bffe17 	ldw	r2,-8(fp)
  817754:	1880050e 	bge	r3,r2,81776c <altera_avalon_uart_read+0xac>
  817758:	e0bffc17 	ldw	r2,-16(fp)
  81775c:	10c00217 	ldw	r3,8(r2)
  817760:	e0bffc17 	ldw	r2,-16(fp)
  817764:	10800317 	ldw	r2,12(r2)
  817768:	18bfe51e 	bne	r3,r2,817700 <__alt_mem_onchip_mem+0xff80f700>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  81776c:	e0bff517 	ldw	r2,-44(fp)
  817770:	1000251e 	bne	r2,zero,817808 <altera_avalon_uart_read+0x148>
  817774:	e0bffc17 	ldw	r2,-16(fp)
  817778:	10c00217 	ldw	r3,8(r2)
  81777c:	e0bffc17 	ldw	r2,-16(fp)
  817780:	10800317 	ldw	r2,12(r2)
  817784:	1880201e 	bne	r3,r2,817808 <altera_avalon_uart_read+0x148>
    {
      if (!block)
  817788:	e0bff617 	ldw	r2,-40(fp)
  81778c:	1000071e 	bne	r2,zero,8177ac <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  817790:	08176840 	call	817684 <alt_get_errno>
  817794:	1007883a 	mov	r3,r2
  817798:	008002c4 	movi	r2,11
  81779c:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
  8177a0:	00800044 	movi	r2,1
  8177a4:	e0bff405 	stb	r2,-48(fp)
        break;
  8177a8:	00001b06 	br	817818 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8177ac:	0005303a 	rdctl	r2,status
  8177b0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8177b4:	e0fff917 	ldw	r3,-28(fp)
  8177b8:	00bfff84 	movi	r2,-2
  8177bc:	1884703a 	and	r2,r3,r2
  8177c0:	1001703a 	wrctl	status,r2
  
  return context;
  8177c4:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  8177c8:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  8177cc:	e0bffc17 	ldw	r2,-16(fp)
  8177d0:	10800117 	ldw	r2,4(r2)
  8177d4:	10c02014 	ori	r3,r2,128
  8177d8:	e0bffc17 	ldw	r2,-16(fp)
  8177dc:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  8177e0:	e0bffc17 	ldw	r2,-16(fp)
  8177e4:	10800017 	ldw	r2,0(r2)
  8177e8:	10800304 	addi	r2,r2,12
  8177ec:	e0fffc17 	ldw	r3,-16(fp)
  8177f0:	18c00117 	ldw	r3,4(r3)
  8177f4:	10c00035 	stwio	r3,0(r2)
  8177f8:	e0bff817 	ldw	r2,-32(fp)
  8177fc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  817800:	e0bffa17 	ldw	r2,-24(fp)
  817804:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  817808:	e0bff517 	ldw	r2,-44(fp)
  81780c:	1000021e 	bne	r2,zero,817818 <altera_avalon_uart_read+0x158>
  817810:	e0bffe17 	ldw	r2,-8(fp)
  817814:	103fcd1e 	bne	r2,zero,81774c <__alt_mem_onchip_mem+0xff80f74c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  817818:	0005303a 	rdctl	r2,status
  81781c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  817820:	e0fffb17 	ldw	r3,-20(fp)
  817824:	00bfff84 	movi	r2,-2
  817828:	1884703a 	and	r2,r3,r2
  81782c:	1001703a 	wrctl	status,r2
  
  return context;
  817830:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  817834:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  817838:	e0bffc17 	ldw	r2,-16(fp)
  81783c:	10800117 	ldw	r2,4(r2)
  817840:	10c02014 	ori	r3,r2,128
  817844:	e0bffc17 	ldw	r2,-16(fp)
  817848:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  81784c:	e0bffc17 	ldw	r2,-16(fp)
  817850:	10800017 	ldw	r2,0(r2)
  817854:	10800304 	addi	r2,r2,12
  817858:	e0fffc17 	ldw	r3,-16(fp)
  81785c:	18c00117 	ldw	r3,4(r3)
  817860:	10c00035 	stwio	r3,0(r2)
  817864:	e0bff817 	ldw	r2,-32(fp)
  817868:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81786c:	e0bff717 	ldw	r2,-36(fp)
  817870:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  817874:	e0bff403 	ldbu	r2,-48(fp)
  817878:	10000226 	beq	r2,zero,817884 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
  81787c:	00bffd44 	movi	r2,-11
  817880:	00000106 	br	817888 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
  817884:	e0bff517 	ldw	r2,-44(fp)
  }
}
  817888:	e037883a 	mov	sp,fp
  81788c:	dfc00117 	ldw	ra,4(sp)
  817890:	df000017 	ldw	fp,0(sp)
  817894:	dec00204 	addi	sp,sp,8
  817898:	f800283a 	ret

0081789c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81789c:	defffe04 	addi	sp,sp,-8
  8178a0:	dfc00115 	stw	ra,4(sp)
  8178a4:	df000015 	stw	fp,0(sp)
  8178a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8178ac:	d0a00b17 	ldw	r2,-32724(gp)
  8178b0:	10000326 	beq	r2,zero,8178c0 <alt_get_errno+0x24>
  8178b4:	d0a00b17 	ldw	r2,-32724(gp)
  8178b8:	103ee83a 	callr	r2
  8178bc:	00000106 	br	8178c4 <alt_get_errno+0x28>
  8178c0:	d0a75a04 	addi	r2,gp,-25240
}
  8178c4:	e037883a 	mov	sp,fp
  8178c8:	dfc00117 	ldw	ra,4(sp)
  8178cc:	df000017 	ldw	fp,0(sp)
  8178d0:	dec00204 	addi	sp,sp,8
  8178d4:	f800283a 	ret

008178d8 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  8178d8:	defff204 	addi	sp,sp,-56
  8178dc:	dfc00d15 	stw	ra,52(sp)
  8178e0:	df000c15 	stw	fp,48(sp)
  8178e4:	df000c04 	addi	fp,sp,48
  8178e8:	e13ffc15 	stw	r4,-16(fp)
  8178ec:	e17ffd15 	stw	r5,-12(fp)
  8178f0:	e1bffe15 	stw	r6,-8(fp)
  8178f4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  8178f8:	e0bffe17 	ldw	r2,-8(fp)
  8178fc:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  817900:	e0bfff17 	ldw	r2,-4(fp)
  817904:	1090000c 	andi	r2,r2,16384
  817908:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  81790c:	00003c06 	br	817a00 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  817910:	e0bffc17 	ldw	r2,-16(fp)
  817914:	10800517 	ldw	r2,20(r2)
  817918:	10800044 	addi	r2,r2,1
  81791c:	10800fcc 	andi	r2,r2,63
  817920:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  817924:	e0bffc17 	ldw	r2,-16(fp)
  817928:	10c00417 	ldw	r3,16(r2)
  81792c:	e0bff717 	ldw	r2,-36(fp)
  817930:	1880221e 	bne	r3,r2,8179bc <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
  817934:	e0bff517 	ldw	r2,-44(fp)
  817938:	10000526 	beq	r2,zero,817950 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  81793c:	081789c0 	call	81789c <alt_get_errno>
  817940:	1007883a 	mov	r3,r2
  817944:	008002c4 	movi	r2,11
  817948:	18800015 	stw	r2,0(r3)
        break;
  81794c:	00002e06 	br	817a08 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  817950:	0005303a 	rdctl	r2,status
  817954:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  817958:	e0fff917 	ldw	r3,-28(fp)
  81795c:	00bfff84 	movi	r2,-2
  817960:	1884703a 	and	r2,r3,r2
  817964:	1001703a 	wrctl	status,r2
  
  return context;
  817968:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  81796c:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  817970:	e0bffc17 	ldw	r2,-16(fp)
  817974:	10800117 	ldw	r2,4(r2)
  817978:	10c11014 	ori	r3,r2,1088
  81797c:	e0bffc17 	ldw	r2,-16(fp)
  817980:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  817984:	e0bffc17 	ldw	r2,-16(fp)
  817988:	10800017 	ldw	r2,0(r2)
  81798c:	10800304 	addi	r2,r2,12
  817990:	e0fffc17 	ldw	r3,-16(fp)
  817994:	18c00117 	ldw	r3,4(r3)
  817998:	10c00035 	stwio	r3,0(r2)
  81799c:	e0bff817 	ldw	r2,-32(fp)
  8179a0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8179a4:	e0bff617 	ldw	r2,-40(fp)
  8179a8:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  8179ac:	e0bffc17 	ldw	r2,-16(fp)
  8179b0:	10c00417 	ldw	r3,16(r2)
  8179b4:	e0bff717 	ldw	r2,-36(fp)
  8179b8:	18bffc26 	beq	r3,r2,8179ac <__alt_mem_onchip_mem+0xff80f9ac>
      }
    }

    count--;
  8179bc:	e0bff417 	ldw	r2,-48(fp)
  8179c0:	10bfffc4 	addi	r2,r2,-1
  8179c4:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  8179c8:	e0bffc17 	ldw	r2,-16(fp)
  8179cc:	10c00517 	ldw	r3,20(r2)
  8179d0:	e0bffd17 	ldw	r2,-12(fp)
  8179d4:	11000044 	addi	r4,r2,1
  8179d8:	e13ffd15 	stw	r4,-12(fp)
  8179dc:	10800003 	ldbu	r2,0(r2)
  8179e0:	1009883a 	mov	r4,r2
  8179e4:	e0bffc17 	ldw	r2,-16(fp)
  8179e8:	10c5883a 	add	r2,r2,r3
  8179ec:	10801704 	addi	r2,r2,92
  8179f0:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
  8179f4:	e0bffc17 	ldw	r2,-16(fp)
  8179f8:	e0fff717 	ldw	r3,-36(fp)
  8179fc:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  817a00:	e0bff417 	ldw	r2,-48(fp)
  817a04:	103fc21e 	bne	r2,zero,817910 <__alt_mem_onchip_mem+0xff80f910>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  817a08:	0005303a 	rdctl	r2,status
  817a0c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  817a10:	e0fffb17 	ldw	r3,-20(fp)
  817a14:	00bfff84 	movi	r2,-2
  817a18:	1884703a 	and	r2,r3,r2
  817a1c:	1001703a 	wrctl	status,r2
  
  return context;
  817a20:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  817a24:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  817a28:	e0bffc17 	ldw	r2,-16(fp)
  817a2c:	10800117 	ldw	r2,4(r2)
  817a30:	10c11014 	ori	r3,r2,1088
  817a34:	e0bffc17 	ldw	r2,-16(fp)
  817a38:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  817a3c:	e0bffc17 	ldw	r2,-16(fp)
  817a40:	10800017 	ldw	r2,0(r2)
  817a44:	10800304 	addi	r2,r2,12
  817a48:	e0fffc17 	ldw	r3,-16(fp)
  817a4c:	18c00117 	ldw	r3,4(r3)
  817a50:	10c00035 	stwio	r3,0(r2)
  817a54:	e0bff817 	ldw	r2,-32(fp)
  817a58:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  817a5c:	e0bffa17 	ldw	r2,-24(fp)
  817a60:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  817a64:	e0fffe17 	ldw	r3,-8(fp)
  817a68:	e0bff417 	ldw	r2,-48(fp)
  817a6c:	1885c83a 	sub	r2,r3,r2
}
  817a70:	e037883a 	mov	sp,fp
  817a74:	dfc00117 	ldw	ra,4(sp)
  817a78:	df000017 	ldw	fp,0(sp)
  817a7c:	dec00204 	addi	sp,sp,8
  817a80:	f800283a 	ret

00817a84 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  817a84:	defffe04 	addi	sp,sp,-8
  817a88:	df000115 	stw	fp,4(sp)
  817a8c:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  817a90:	e03fff15 	stw	zero,-4(fp)
  817a94:	00000506 	br	817aac <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  817a98:	e0bfff17 	ldw	r2,-4(fp)
  817a9c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  817aa0:	e0bfff17 	ldw	r2,-4(fp)
  817aa4:	10800804 	addi	r2,r2,32
  817aa8:	e0bfff15 	stw	r2,-4(fp)
  817aac:	e0bfff17 	ldw	r2,-4(fp)
  817ab0:	10820030 	cmpltui	r2,r2,2048
  817ab4:	103ff81e 	bne	r2,zero,817a98 <__alt_mem_onchip_mem+0xff80fa98>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  817ab8:	0001883a 	nop
  817abc:	e037883a 	mov	sp,fp
  817ac0:	df000017 	ldw	fp,0(sp)
  817ac4:	dec00104 	addi	sp,sp,4
  817ac8:	f800283a 	ret

00817acc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  817acc:	defffe04 	addi	sp,sp,-8
  817ad0:	dfc00115 	stw	ra,4(sp)
  817ad4:	df000015 	stw	fp,0(sp)
  817ad8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  817adc:	d0a00b17 	ldw	r2,-32724(gp)
  817ae0:	10000326 	beq	r2,zero,817af0 <alt_get_errno+0x24>
  817ae4:	d0a00b17 	ldw	r2,-32724(gp)
  817ae8:	103ee83a 	callr	r2
  817aec:	00000106 	br	817af4 <alt_get_errno+0x28>
  817af0:	d0a75a04 	addi	r2,gp,-25240
}
  817af4:	e037883a 	mov	sp,fp
  817af8:	dfc00117 	ldw	ra,4(sp)
  817afc:	df000017 	ldw	fp,0(sp)
  817b00:	dec00204 	addi	sp,sp,8
  817b04:	f800283a 	ret

00817b08 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  817b08:	defffa04 	addi	sp,sp,-24
  817b0c:	dfc00515 	stw	ra,20(sp)
  817b10:	df000415 	stw	fp,16(sp)
  817b14:	df000404 	addi	fp,sp,16
  817b18:	e13ffe15 	stw	r4,-8(fp)
  817b1c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  817b20:	e0bffe17 	ldw	r2,-8(fp)
  817b24:	10000326 	beq	r2,zero,817b34 <alt_dev_llist_insert+0x2c>
  817b28:	e0bffe17 	ldw	r2,-8(fp)
  817b2c:	10800217 	ldw	r2,8(r2)
  817b30:	1000061e 	bne	r2,zero,817b4c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  817b34:	0817acc0 	call	817acc <alt_get_errno>
  817b38:	1007883a 	mov	r3,r2
  817b3c:	00800584 	movi	r2,22
  817b40:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  817b44:	00bffa84 	movi	r2,-22
  817b48:	00001306 	br	817b98 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  817b4c:	e0bffe17 	ldw	r2,-8(fp)
  817b50:	e0ffff17 	ldw	r3,-4(fp)
  817b54:	e0fffc15 	stw	r3,-16(fp)
  817b58:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  817b5c:	e0bffd17 	ldw	r2,-12(fp)
  817b60:	e0fffc17 	ldw	r3,-16(fp)
  817b64:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  817b68:	e0bffc17 	ldw	r2,-16(fp)
  817b6c:	10c00017 	ldw	r3,0(r2)
  817b70:	e0bffd17 	ldw	r2,-12(fp)
  817b74:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  817b78:	e0bffc17 	ldw	r2,-16(fp)
  817b7c:	10800017 	ldw	r2,0(r2)
  817b80:	e0fffd17 	ldw	r3,-12(fp)
  817b84:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  817b88:	e0bffc17 	ldw	r2,-16(fp)
  817b8c:	e0fffd17 	ldw	r3,-12(fp)
  817b90:	10c00015 	stw	r3,0(r2)

  return 0;  
  817b94:	0005883a 	mov	r2,zero
}
  817b98:	e037883a 	mov	sp,fp
  817b9c:	dfc00117 	ldw	ra,4(sp)
  817ba0:	df000017 	ldw	fp,0(sp)
  817ba4:	dec00204 	addi	sp,sp,8
  817ba8:	f800283a 	ret

00817bac <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  817bac:	defffd04 	addi	sp,sp,-12
  817bb0:	dfc00215 	stw	ra,8(sp)
  817bb4:	df000115 	stw	fp,4(sp)
  817bb8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  817bbc:	008020b4 	movhi	r2,130
  817bc0:	10a23604 	addi	r2,r2,-30504
  817bc4:	e0bfff15 	stw	r2,-4(fp)
  817bc8:	00000606 	br	817be4 <_do_ctors+0x38>
        (*ctor) (); 
  817bcc:	e0bfff17 	ldw	r2,-4(fp)
  817bd0:	10800017 	ldw	r2,0(r2)
  817bd4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  817bd8:	e0bfff17 	ldw	r2,-4(fp)
  817bdc:	10bfff04 	addi	r2,r2,-4
  817be0:	e0bfff15 	stw	r2,-4(fp)
  817be4:	e0ffff17 	ldw	r3,-4(fp)
  817be8:	008020b4 	movhi	r2,130
  817bec:	10a23704 	addi	r2,r2,-30500
  817bf0:	18bff62e 	bgeu	r3,r2,817bcc <__alt_mem_onchip_mem+0xff80fbcc>
        (*ctor) (); 
}
  817bf4:	0001883a 	nop
  817bf8:	e037883a 	mov	sp,fp
  817bfc:	dfc00117 	ldw	ra,4(sp)
  817c00:	df000017 	ldw	fp,0(sp)
  817c04:	dec00204 	addi	sp,sp,8
  817c08:	f800283a 	ret

00817c0c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  817c0c:	defffd04 	addi	sp,sp,-12
  817c10:	dfc00215 	stw	ra,8(sp)
  817c14:	df000115 	stw	fp,4(sp)
  817c18:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  817c1c:	008020b4 	movhi	r2,130
  817c20:	10a23604 	addi	r2,r2,-30504
  817c24:	e0bfff15 	stw	r2,-4(fp)
  817c28:	00000606 	br	817c44 <_do_dtors+0x38>
        (*dtor) (); 
  817c2c:	e0bfff17 	ldw	r2,-4(fp)
  817c30:	10800017 	ldw	r2,0(r2)
  817c34:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  817c38:	e0bfff17 	ldw	r2,-4(fp)
  817c3c:	10bfff04 	addi	r2,r2,-4
  817c40:	e0bfff15 	stw	r2,-4(fp)
  817c44:	e0ffff17 	ldw	r3,-4(fp)
  817c48:	008020b4 	movhi	r2,130
  817c4c:	10a23704 	addi	r2,r2,-30500
  817c50:	18bff62e 	bgeu	r3,r2,817c2c <__alt_mem_onchip_mem+0xff80fc2c>
        (*dtor) (); 
}
  817c54:	0001883a 	nop
  817c58:	e037883a 	mov	sp,fp
  817c5c:	dfc00117 	ldw	ra,4(sp)
  817c60:	df000017 	ldw	fp,0(sp)
  817c64:	dec00204 	addi	sp,sp,8
  817c68:	f800283a 	ret

00817c6c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  817c6c:	defffe04 	addi	sp,sp,-8
  817c70:	dfc00115 	stw	ra,4(sp)
  817c74:	df000015 	stw	fp,0(sp)
  817c78:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  817c7c:	01440004 	movi	r5,4096
  817c80:	0009883a 	mov	r4,zero
  817c84:	08184b80 	call	8184b8 <alt_icache_flush>
#endif
}
  817c88:	0001883a 	nop
  817c8c:	e037883a 	mov	sp,fp
  817c90:	dfc00117 	ldw	ra,4(sp)
  817c94:	df000017 	ldw	fp,0(sp)
  817c98:	dec00204 	addi	sp,sp,8
  817c9c:	f800283a 	ret

00817ca0 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  817ca0:	defffe04 	addi	sp,sp,-8
  817ca4:	df000115 	stw	fp,4(sp)
  817ca8:	df000104 	addi	fp,sp,4
  817cac:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
  817cb0:	e0bfff17 	ldw	r2,-4(fp)
  817cb4:	10bffe84 	addi	r2,r2,-6
  817cb8:	10c00428 	cmpgeui	r3,r2,16
  817cbc:	18001a1e 	bne	r3,zero,817d28 <alt_exception_cause_generated_bad_addr+0x88>
  817cc0:	100690ba 	slli	r3,r2,2
  817cc4:	00802074 	movhi	r2,129
  817cc8:	109f3604 	addi	r2,r2,31960
  817ccc:	1885883a 	add	r2,r3,r2
  817cd0:	10800017 	ldw	r2,0(r2)
  817cd4:	1000683a 	jmp	r2
  817cd8:	00817d18 	cmpnei	r2,zero,1524
  817cdc:	00817d18 	cmpnei	r2,zero,1524
  817ce0:	00817d28 	cmpgeui	r2,zero,1524
  817ce4:	00817d28 	cmpgeui	r2,zero,1524
  817ce8:	00817d28 	cmpgeui	r2,zero,1524
  817cec:	00817d18 	cmpnei	r2,zero,1524
  817cf0:	00817d20 	cmpeqi	r2,zero,1524
  817cf4:	00817d28 	cmpgeui	r2,zero,1524
  817cf8:	00817d18 	cmpnei	r2,zero,1524
  817cfc:	00817d18 	cmpnei	r2,zero,1524
  817d00:	00817d28 	cmpgeui	r2,zero,1524
  817d04:	00817d18 	cmpnei	r2,zero,1524
  817d08:	00817d20 	cmpeqi	r2,zero,1524
  817d0c:	00817d28 	cmpgeui	r2,zero,1524
  817d10:	00817d28 	cmpgeui	r2,zero,1524
  817d14:	00817d18 	cmpnei	r2,zero,1524
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  817d18:	00800044 	movi	r2,1
  817d1c:	00000306 	br	817d2c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  817d20:	0005883a 	mov	r2,zero
  817d24:	00000106 	br	817d2c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
  817d28:	0005883a 	mov	r2,zero
  }
}
  817d2c:	e037883a 	mov	sp,fp
  817d30:	df000017 	ldw	fp,0(sp)
  817d34:	dec00104 	addi	sp,sp,4
  817d38:	f800283a 	ret

00817d3c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  817d3c:	defff904 	addi	sp,sp,-28
  817d40:	dfc00615 	stw	ra,24(sp)
  817d44:	df000515 	stw	fp,20(sp)
  817d48:	df000504 	addi	fp,sp,20
  817d4c:	e13ffc15 	stw	r4,-16(fp)
  817d50:	e17ffd15 	stw	r5,-12(fp)
  817d54:	e1bffe15 	stw	r6,-8(fp)
  817d58:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  817d5c:	e1bfff17 	ldw	r6,-4(fp)
  817d60:	e17ffe17 	ldw	r5,-8(fp)
  817d64:	e13ffd17 	ldw	r4,-12(fp)
  817d68:	0817f7c0 	call	817f7c <open>
  817d6c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  817d70:	e0bffb17 	ldw	r2,-20(fp)
  817d74:	10001c16 	blt	r2,zero,817de8 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
  817d78:	008020b4 	movhi	r2,130
  817d7c:	10a5e104 	addi	r2,r2,-26748
  817d80:	e0fffb17 	ldw	r3,-20(fp)
  817d84:	18c00324 	muli	r3,r3,12
  817d88:	10c5883a 	add	r2,r2,r3
  817d8c:	10c00017 	ldw	r3,0(r2)
  817d90:	e0bffc17 	ldw	r2,-16(fp)
  817d94:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  817d98:	008020b4 	movhi	r2,130
  817d9c:	10a5e104 	addi	r2,r2,-26748
  817da0:	e0fffb17 	ldw	r3,-20(fp)
  817da4:	18c00324 	muli	r3,r3,12
  817da8:	10c5883a 	add	r2,r2,r3
  817dac:	10800104 	addi	r2,r2,4
  817db0:	10c00017 	ldw	r3,0(r2)
  817db4:	e0bffc17 	ldw	r2,-16(fp)
  817db8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  817dbc:	008020b4 	movhi	r2,130
  817dc0:	10a5e104 	addi	r2,r2,-26748
  817dc4:	e0fffb17 	ldw	r3,-20(fp)
  817dc8:	18c00324 	muli	r3,r3,12
  817dcc:	10c5883a 	add	r2,r2,r3
  817dd0:	10800204 	addi	r2,r2,8
  817dd4:	10c00017 	ldw	r3,0(r2)
  817dd8:	e0bffc17 	ldw	r2,-16(fp)
  817ddc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  817de0:	e13ffb17 	ldw	r4,-20(fp)
  817de4:	08152840 	call	815284 <alt_release_fd>
  }
} 
  817de8:	0001883a 	nop
  817dec:	e037883a 	mov	sp,fp
  817df0:	dfc00117 	ldw	ra,4(sp)
  817df4:	df000017 	ldw	fp,0(sp)
  817df8:	dec00204 	addi	sp,sp,8
  817dfc:	f800283a 	ret

00817e00 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  817e00:	defffb04 	addi	sp,sp,-20
  817e04:	dfc00415 	stw	ra,16(sp)
  817e08:	df000315 	stw	fp,12(sp)
  817e0c:	df000304 	addi	fp,sp,12
  817e10:	e13ffd15 	stw	r4,-12(fp)
  817e14:	e17ffe15 	stw	r5,-8(fp)
  817e18:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  817e1c:	01c07fc4 	movi	r7,511
  817e20:	01800044 	movi	r6,1
  817e24:	e17ffd17 	ldw	r5,-12(fp)
  817e28:	010020b4 	movhi	r4,130
  817e2c:	2125e404 	addi	r4,r4,-26736
  817e30:	0817d3c0 	call	817d3c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  817e34:	01c07fc4 	movi	r7,511
  817e38:	000d883a 	mov	r6,zero
  817e3c:	e17ffe17 	ldw	r5,-8(fp)
  817e40:	010020b4 	movhi	r4,130
  817e44:	2125e104 	addi	r4,r4,-26748
  817e48:	0817d3c0 	call	817d3c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  817e4c:	01c07fc4 	movi	r7,511
  817e50:	01800044 	movi	r6,1
  817e54:	e17fff17 	ldw	r5,-4(fp)
  817e58:	010020b4 	movhi	r4,130
  817e5c:	2125e704 	addi	r4,r4,-26724
  817e60:	0817d3c0 	call	817d3c <alt_open_fd>
}  
  817e64:	0001883a 	nop
  817e68:	e037883a 	mov	sp,fp
  817e6c:	dfc00117 	ldw	ra,4(sp)
  817e70:	df000017 	ldw	fp,0(sp)
  817e74:	dec00204 	addi	sp,sp,8
  817e78:	f800283a 	ret

00817e7c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  817e7c:	defffe04 	addi	sp,sp,-8
  817e80:	dfc00115 	stw	ra,4(sp)
  817e84:	df000015 	stw	fp,0(sp)
  817e88:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  817e8c:	d0a00b17 	ldw	r2,-32724(gp)
  817e90:	10000326 	beq	r2,zero,817ea0 <alt_get_errno+0x24>
  817e94:	d0a00b17 	ldw	r2,-32724(gp)
  817e98:	103ee83a 	callr	r2
  817e9c:	00000106 	br	817ea4 <alt_get_errno+0x28>
  817ea0:	d0a75a04 	addi	r2,gp,-25240
}
  817ea4:	e037883a 	mov	sp,fp
  817ea8:	dfc00117 	ldw	ra,4(sp)
  817eac:	df000017 	ldw	fp,0(sp)
  817eb0:	dec00204 	addi	sp,sp,8
  817eb4:	f800283a 	ret

00817eb8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  817eb8:	defffd04 	addi	sp,sp,-12
  817ebc:	df000215 	stw	fp,8(sp)
  817ec0:	df000204 	addi	fp,sp,8
  817ec4:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  817ec8:	e0bfff17 	ldw	r2,-4(fp)
  817ecc:	10800217 	ldw	r2,8(r2)
  817ed0:	10d00034 	orhi	r3,r2,16384
  817ed4:	e0bfff17 	ldw	r2,-4(fp)
  817ed8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  817edc:	e03ffe15 	stw	zero,-8(fp)
  817ee0:	00001d06 	br	817f58 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  817ee4:	008020b4 	movhi	r2,130
  817ee8:	10a5e104 	addi	r2,r2,-26748
  817eec:	e0fffe17 	ldw	r3,-8(fp)
  817ef0:	18c00324 	muli	r3,r3,12
  817ef4:	10c5883a 	add	r2,r2,r3
  817ef8:	10c00017 	ldw	r3,0(r2)
  817efc:	e0bfff17 	ldw	r2,-4(fp)
  817f00:	10800017 	ldw	r2,0(r2)
  817f04:	1880111e 	bne	r3,r2,817f4c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  817f08:	008020b4 	movhi	r2,130
  817f0c:	10a5e104 	addi	r2,r2,-26748
  817f10:	e0fffe17 	ldw	r3,-8(fp)
  817f14:	18c00324 	muli	r3,r3,12
  817f18:	10c5883a 	add	r2,r2,r3
  817f1c:	10800204 	addi	r2,r2,8
  817f20:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  817f24:	1000090e 	bge	r2,zero,817f4c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  817f28:	e0bffe17 	ldw	r2,-8(fp)
  817f2c:	10c00324 	muli	r3,r2,12
  817f30:	008020b4 	movhi	r2,130
  817f34:	10a5e104 	addi	r2,r2,-26748
  817f38:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  817f3c:	e0bfff17 	ldw	r2,-4(fp)
  817f40:	18800226 	beq	r3,r2,817f4c <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  817f44:	00bffcc4 	movi	r2,-13
  817f48:	00000806 	br	817f6c <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  817f4c:	e0bffe17 	ldw	r2,-8(fp)
  817f50:	10800044 	addi	r2,r2,1
  817f54:	e0bffe15 	stw	r2,-8(fp)
  817f58:	d0a00a17 	ldw	r2,-32728(gp)
  817f5c:	1007883a 	mov	r3,r2
  817f60:	e0bffe17 	ldw	r2,-8(fp)
  817f64:	18bfdf2e 	bgeu	r3,r2,817ee4 <__alt_mem_onchip_mem+0xff80fee4>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  817f68:	0005883a 	mov	r2,zero
}
  817f6c:	e037883a 	mov	sp,fp
  817f70:	df000017 	ldw	fp,0(sp)
  817f74:	dec00104 	addi	sp,sp,4
  817f78:	f800283a 	ret

00817f7c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  817f7c:	defff604 	addi	sp,sp,-40
  817f80:	dfc00915 	stw	ra,36(sp)
  817f84:	df000815 	stw	fp,32(sp)
  817f88:	df000804 	addi	fp,sp,32
  817f8c:	e13ffd15 	stw	r4,-12(fp)
  817f90:	e17ffe15 	stw	r5,-8(fp)
  817f94:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  817f98:	00bfffc4 	movi	r2,-1
  817f9c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  817fa0:	00bffb44 	movi	r2,-19
  817fa4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  817fa8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  817fac:	d1600804 	addi	r5,gp,-32736
  817fb0:	e13ffd17 	ldw	r4,-12(fp)
  817fb4:	081827c0 	call	81827c <alt_find_dev>
  817fb8:	e0bff815 	stw	r2,-32(fp)
  817fbc:	e0bff817 	ldw	r2,-32(fp)
  817fc0:	1000051e 	bne	r2,zero,817fd8 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  817fc4:	e13ffd17 	ldw	r4,-12(fp)
  817fc8:	081830c0 	call	81830c <alt_find_file>
  817fcc:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  817fd0:	00800044 	movi	r2,1
  817fd4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  817fd8:	e0bff817 	ldw	r2,-32(fp)
  817fdc:	10002926 	beq	r2,zero,818084 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
  817fe0:	e13ff817 	ldw	r4,-32(fp)
  817fe4:	08184140 	call	818414 <alt_get_fd>
  817fe8:	e0bff915 	stw	r2,-28(fp)
  817fec:	e0bff917 	ldw	r2,-28(fp)
  817ff0:	1000030e 	bge	r2,zero,818000 <open+0x84>
    {
      status = index;
  817ff4:	e0bff917 	ldw	r2,-28(fp)
  817ff8:	e0bffa15 	stw	r2,-24(fp)
  817ffc:	00002306 	br	81808c <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
  818000:	e0bff917 	ldw	r2,-28(fp)
  818004:	10c00324 	muli	r3,r2,12
  818008:	008020b4 	movhi	r2,130
  81800c:	10a5e104 	addi	r2,r2,-26748
  818010:	1885883a 	add	r2,r3,r2
  818014:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  818018:	e0fffe17 	ldw	r3,-8(fp)
  81801c:	00900034 	movhi	r2,16384
  818020:	10bfffc4 	addi	r2,r2,-1
  818024:	1886703a 	and	r3,r3,r2
  818028:	e0bffc17 	ldw	r2,-16(fp)
  81802c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  818030:	e0bffb17 	ldw	r2,-20(fp)
  818034:	1000051e 	bne	r2,zero,81804c <open+0xd0>
  818038:	e13ffc17 	ldw	r4,-16(fp)
  81803c:	0817eb80 	call	817eb8 <alt_file_locked>
  818040:	e0bffa15 	stw	r2,-24(fp)
  818044:	e0bffa17 	ldw	r2,-24(fp)
  818048:	10001016 	blt	r2,zero,81808c <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  81804c:	e0bff817 	ldw	r2,-32(fp)
  818050:	10800317 	ldw	r2,12(r2)
  818054:	10000826 	beq	r2,zero,818078 <open+0xfc>
  818058:	e0bff817 	ldw	r2,-32(fp)
  81805c:	10800317 	ldw	r2,12(r2)
  818060:	e1ffff17 	ldw	r7,-4(fp)
  818064:	e1bffe17 	ldw	r6,-8(fp)
  818068:	e17ffd17 	ldw	r5,-12(fp)
  81806c:	e13ffc17 	ldw	r4,-16(fp)
  818070:	103ee83a 	callr	r2
  818074:	00000106 	br	81807c <open+0x100>
  818078:	0005883a 	mov	r2,zero
  81807c:	e0bffa15 	stw	r2,-24(fp)
  818080:	00000206 	br	81808c <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
  818084:	00bffb44 	movi	r2,-19
  818088:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  81808c:	e0bffa17 	ldw	r2,-24(fp)
  818090:	1000090e 	bge	r2,zero,8180b8 <open+0x13c>
  {
    alt_release_fd (index);  
  818094:	e13ff917 	ldw	r4,-28(fp)
  818098:	08152840 	call	815284 <alt_release_fd>
    ALT_ERRNO = -status;
  81809c:	0817e7c0 	call	817e7c <alt_get_errno>
  8180a0:	1007883a 	mov	r3,r2
  8180a4:	e0bffa17 	ldw	r2,-24(fp)
  8180a8:	0085c83a 	sub	r2,zero,r2
  8180ac:	18800015 	stw	r2,0(r3)
    return -1;
  8180b0:	00bfffc4 	movi	r2,-1
  8180b4:	00000106 	br	8180bc <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
  8180b8:	e0bff917 	ldw	r2,-28(fp)
}
  8180bc:	e037883a 	mov	sp,fp
  8180c0:	dfc00117 	ldw	ra,4(sp)
  8180c4:	df000017 	ldw	fp,0(sp)
  8180c8:	dec00204 	addi	sp,sp,8
  8180cc:	f800283a 	ret

008180d0 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  8180d0:	defffd04 	addi	sp,sp,-12
  8180d4:	dfc00215 	stw	ra,8(sp)
  8180d8:	df000115 	stw	fp,4(sp)
  8180dc:	df000104 	addi	fp,sp,4
  8180e0:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  8180e4:	e13fff17 	ldw	r4,-4(fp)
  8180e8:	08181240 	call	818124 <alt_busy_sleep>
}
  8180ec:	e037883a 	mov	sp,fp
  8180f0:	dfc00117 	ldw	ra,4(sp)
  8180f4:	df000017 	ldw	fp,0(sp)
  8180f8:	dec00204 	addi	sp,sp,8
  8180fc:	f800283a 	ret

00818100 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  818100:	deffff04 	addi	sp,sp,-4
  818104:	df000015 	stw	fp,0(sp)
  818108:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  81810c:	000170fa 	wrctl	ienable,zero
}
  818110:	0001883a 	nop
  818114:	e037883a 	mov	sp,fp
  818118:	df000017 	ldw	fp,0(sp)
  81811c:	dec00104 	addi	sp,sp,4
  818120:	f800283a 	ret

00818124 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  818124:	defffa04 	addi	sp,sp,-24
  818128:	dfc00515 	stw	ra,20(sp)
  81812c:	df000415 	stw	fp,16(sp)
  818130:	df000404 	addi	fp,sp,16
  818134:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  818138:	008000c4 	movi	r2,3
  81813c:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
  818140:	e0fffd17 	ldw	r3,-12(fp)
  818144:	008003f4 	movhi	r2,15
  818148:	10909004 	addi	r2,r2,16960
  81814c:	1885383a 	mul	r2,r3,r2
  818150:	100b883a 	mov	r5,r2
  818154:	0100bef4 	movhi	r4,763
  818158:	213c2004 	addi	r4,r4,-3968
  81815c:	0813d100 	call	813d10 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  818160:	100b883a 	mov	r5,r2
  818164:	01200034 	movhi	r4,32768
  818168:	213fffc4 	addi	r4,r4,-1
  81816c:	0813d100 	call	813d10 <__udivsi3>
  818170:	100b883a 	mov	r5,r2
  818174:	e13fff17 	ldw	r4,-4(fp)
  818178:	0813d100 	call	813d10 <__udivsi3>
  81817c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  818180:	e0bffe17 	ldw	r2,-8(fp)
  818184:	10002a26 	beq	r2,zero,818230 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
  818188:	e03ffc15 	stw	zero,-16(fp)
  81818c:	00001706 	br	8181ec <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  818190:	00a00034 	movhi	r2,32768
  818194:	10bfffc4 	addi	r2,r2,-1
  818198:	10bfffc4 	addi	r2,r2,-1
  81819c:	103ffe1e 	bne	r2,zero,818198 <__alt_mem_onchip_mem+0xff810198>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
  8181a0:	e0fffd17 	ldw	r3,-12(fp)
  8181a4:	008003f4 	movhi	r2,15
  8181a8:	10909004 	addi	r2,r2,16960
  8181ac:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  8181b0:	100b883a 	mov	r5,r2
  8181b4:	0100bef4 	movhi	r4,763
  8181b8:	213c2004 	addi	r4,r4,-3968
  8181bc:	0813d100 	call	813d10 <__udivsi3>
  8181c0:	100b883a 	mov	r5,r2
  8181c4:	01200034 	movhi	r4,32768
  8181c8:	213fffc4 	addi	r4,r4,-1
  8181cc:	0813d100 	call	813d10 <__udivsi3>
  8181d0:	1007883a 	mov	r3,r2
  8181d4:	e0bfff17 	ldw	r2,-4(fp)
  8181d8:	10c5c83a 	sub	r2,r2,r3
  8181dc:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  8181e0:	e0bffc17 	ldw	r2,-16(fp)
  8181e4:	10800044 	addi	r2,r2,1
  8181e8:	e0bffc15 	stw	r2,-16(fp)
  8181ec:	e0fffc17 	ldw	r3,-16(fp)
  8181f0:	e0bffe17 	ldw	r2,-8(fp)
  8181f4:	18bfe616 	blt	r3,r2,818190 <__alt_mem_onchip_mem+0xff810190>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  8181f8:	e0fffd17 	ldw	r3,-12(fp)
  8181fc:	008003f4 	movhi	r2,15
  818200:	10909004 	addi	r2,r2,16960
  818204:	1885383a 	mul	r2,r3,r2
  818208:	100b883a 	mov	r5,r2
  81820c:	0100bef4 	movhi	r4,763
  818210:	213c2004 	addi	r4,r4,-3968
  818214:	0813d100 	call	813d10 <__udivsi3>
  818218:	1007883a 	mov	r3,r2
  81821c:	e0bfff17 	ldw	r2,-4(fp)
  818220:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  818224:	10bfffc4 	addi	r2,r2,-1
  818228:	103ffe1e 	bne	r2,zero,818224 <__alt_mem_onchip_mem+0xff810224>
  81822c:	00000d06 	br	818264 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  818230:	e0fffd17 	ldw	r3,-12(fp)
  818234:	008003f4 	movhi	r2,15
  818238:	10909004 	addi	r2,r2,16960
  81823c:	1885383a 	mul	r2,r3,r2
  818240:	100b883a 	mov	r5,r2
  818244:	0100bef4 	movhi	r4,763
  818248:	213c2004 	addi	r4,r4,-3968
  81824c:	0813d100 	call	813d10 <__udivsi3>
  818250:	1007883a 	mov	r3,r2
  818254:	e0bfff17 	ldw	r2,-4(fp)
  818258:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  81825c:	10bfffc4 	addi	r2,r2,-1
  818260:	00bffe16 	blt	zero,r2,81825c <__alt_mem_onchip_mem+0xff81025c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  818264:	0005883a 	mov	r2,zero
}
  818268:	e037883a 	mov	sp,fp
  81826c:	dfc00117 	ldw	ra,4(sp)
  818270:	df000017 	ldw	fp,0(sp)
  818274:	dec00204 	addi	sp,sp,8
  818278:	f800283a 	ret

0081827c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  81827c:	defffa04 	addi	sp,sp,-24
  818280:	dfc00515 	stw	ra,20(sp)
  818284:	df000415 	stw	fp,16(sp)
  818288:	df000404 	addi	fp,sp,16
  81828c:	e13ffe15 	stw	r4,-8(fp)
  818290:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  818294:	e0bfff17 	ldw	r2,-4(fp)
  818298:	10800017 	ldw	r2,0(r2)
  81829c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  8182a0:	e13ffe17 	ldw	r4,-8(fp)
  8182a4:	08105d80 	call	8105d8 <strlen>
  8182a8:	10800044 	addi	r2,r2,1
  8182ac:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  8182b0:	00000d06 	br	8182e8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  8182b4:	e0bffc17 	ldw	r2,-16(fp)
  8182b8:	10800217 	ldw	r2,8(r2)
  8182bc:	e0fffd17 	ldw	r3,-12(fp)
  8182c0:	180d883a 	mov	r6,r3
  8182c4:	e17ffe17 	ldw	r5,-8(fp)
  8182c8:	1009883a 	mov	r4,r2
  8182cc:	08185940 	call	818594 <memcmp>
  8182d0:	1000021e 	bne	r2,zero,8182dc <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  8182d4:	e0bffc17 	ldw	r2,-16(fp)
  8182d8:	00000706 	br	8182f8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  8182dc:	e0bffc17 	ldw	r2,-16(fp)
  8182e0:	10800017 	ldw	r2,0(r2)
  8182e4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  8182e8:	e0fffc17 	ldw	r3,-16(fp)
  8182ec:	e0bfff17 	ldw	r2,-4(fp)
  8182f0:	18bff01e 	bne	r3,r2,8182b4 <__alt_mem_onchip_mem+0xff8102b4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  8182f4:	0005883a 	mov	r2,zero
}
  8182f8:	e037883a 	mov	sp,fp
  8182fc:	dfc00117 	ldw	ra,4(sp)
  818300:	df000017 	ldw	fp,0(sp)
  818304:	dec00204 	addi	sp,sp,8
  818308:	f800283a 	ret

0081830c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  81830c:	defffb04 	addi	sp,sp,-20
  818310:	dfc00415 	stw	ra,16(sp)
  818314:	df000315 	stw	fp,12(sp)
  818318:	df000304 	addi	fp,sp,12
  81831c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  818320:	d0a00617 	ldw	r2,-32744(gp)
  818324:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  818328:	00003106 	br	8183f0 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
  81832c:	e0bffd17 	ldw	r2,-12(fp)
  818330:	10800217 	ldw	r2,8(r2)
  818334:	1009883a 	mov	r4,r2
  818338:	08105d80 	call	8105d8 <strlen>
  81833c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  818340:	e0bffd17 	ldw	r2,-12(fp)
  818344:	10c00217 	ldw	r3,8(r2)
  818348:	e0bffe17 	ldw	r2,-8(fp)
  81834c:	10bfffc4 	addi	r2,r2,-1
  818350:	1885883a 	add	r2,r3,r2
  818354:	10800003 	ldbu	r2,0(r2)
  818358:	10803fcc 	andi	r2,r2,255
  81835c:	1080201c 	xori	r2,r2,128
  818360:	10bfe004 	addi	r2,r2,-128
  818364:	10800bd8 	cmpnei	r2,r2,47
  818368:	1000031e 	bne	r2,zero,818378 <alt_find_file+0x6c>
    {
      len -= 1;
  81836c:	e0bffe17 	ldw	r2,-8(fp)
  818370:	10bfffc4 	addi	r2,r2,-1
  818374:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  818378:	e0bffe17 	ldw	r2,-8(fp)
  81837c:	e0ffff17 	ldw	r3,-4(fp)
  818380:	1885883a 	add	r2,r3,r2
  818384:	10800003 	ldbu	r2,0(r2)
  818388:	10803fcc 	andi	r2,r2,255
  81838c:	1080201c 	xori	r2,r2,128
  818390:	10bfe004 	addi	r2,r2,-128
  818394:	10800be0 	cmpeqi	r2,r2,47
  818398:	1000081e 	bne	r2,zero,8183bc <alt_find_file+0xb0>
  81839c:	e0bffe17 	ldw	r2,-8(fp)
  8183a0:	e0ffff17 	ldw	r3,-4(fp)
  8183a4:	1885883a 	add	r2,r3,r2
  8183a8:	10800003 	ldbu	r2,0(r2)
  8183ac:	10803fcc 	andi	r2,r2,255
  8183b0:	1080201c 	xori	r2,r2,128
  8183b4:	10bfe004 	addi	r2,r2,-128
  8183b8:	10000a1e 	bne	r2,zero,8183e4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
  8183bc:	e0bffd17 	ldw	r2,-12(fp)
  8183c0:	10800217 	ldw	r2,8(r2)
  8183c4:	e0fffe17 	ldw	r3,-8(fp)
  8183c8:	180d883a 	mov	r6,r3
  8183cc:	e17fff17 	ldw	r5,-4(fp)
  8183d0:	1009883a 	mov	r4,r2
  8183d4:	08185940 	call	818594 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  8183d8:	1000021e 	bne	r2,zero,8183e4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  8183dc:	e0bffd17 	ldw	r2,-12(fp)
  8183e0:	00000706 	br	818400 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
  8183e4:	e0bffd17 	ldw	r2,-12(fp)
  8183e8:	10800017 	ldw	r2,0(r2)
  8183ec:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  8183f0:	e0fffd17 	ldw	r3,-12(fp)
  8183f4:	d0a00604 	addi	r2,gp,-32744
  8183f8:	18bfcc1e 	bne	r3,r2,81832c <__alt_mem_onchip_mem+0xff81032c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  8183fc:	0005883a 	mov	r2,zero
}
  818400:	e037883a 	mov	sp,fp
  818404:	dfc00117 	ldw	ra,4(sp)
  818408:	df000017 	ldw	fp,0(sp)
  81840c:	dec00204 	addi	sp,sp,8
  818410:	f800283a 	ret

00818414 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  818414:	defffc04 	addi	sp,sp,-16
  818418:	df000315 	stw	fp,12(sp)
  81841c:	df000304 	addi	fp,sp,12
  818420:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  818424:	00bffa04 	movi	r2,-24
  818428:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  81842c:	e03ffd15 	stw	zero,-12(fp)
  818430:	00001906 	br	818498 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
  818434:	008020b4 	movhi	r2,130
  818438:	10a5e104 	addi	r2,r2,-26748
  81843c:	e0fffd17 	ldw	r3,-12(fp)
  818440:	18c00324 	muli	r3,r3,12
  818444:	10c5883a 	add	r2,r2,r3
  818448:	10800017 	ldw	r2,0(r2)
  81844c:	10000f1e 	bne	r2,zero,81848c <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
  818450:	008020b4 	movhi	r2,130
  818454:	10a5e104 	addi	r2,r2,-26748
  818458:	e0fffd17 	ldw	r3,-12(fp)
  81845c:	18c00324 	muli	r3,r3,12
  818460:	10c5883a 	add	r2,r2,r3
  818464:	e0ffff17 	ldw	r3,-4(fp)
  818468:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  81846c:	d0e00a17 	ldw	r3,-32728(gp)
  818470:	e0bffd17 	ldw	r2,-12(fp)
  818474:	1880020e 	bge	r3,r2,818480 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
  818478:	e0bffd17 	ldw	r2,-12(fp)
  81847c:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
  818480:	e0bffd17 	ldw	r2,-12(fp)
  818484:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
  818488:	00000606 	br	8184a4 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  81848c:	e0bffd17 	ldw	r2,-12(fp)
  818490:	10800044 	addi	r2,r2,1
  818494:	e0bffd15 	stw	r2,-12(fp)
  818498:	e0bffd17 	ldw	r2,-12(fp)
  81849c:	10800810 	cmplti	r2,r2,32
  8184a0:	103fe41e 	bne	r2,zero,818434 <__alt_mem_onchip_mem+0xff810434>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  8184a4:	e0bffe17 	ldw	r2,-8(fp)
}
  8184a8:	e037883a 	mov	sp,fp
  8184ac:	df000017 	ldw	fp,0(sp)
  8184b0:	dec00104 	addi	sp,sp,4
  8184b4:	f800283a 	ret

008184b8 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  8184b8:	defffb04 	addi	sp,sp,-20
  8184bc:	df000415 	stw	fp,16(sp)
  8184c0:	df000404 	addi	fp,sp,16
  8184c4:	e13ffe15 	stw	r4,-8(fp)
  8184c8:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  8184cc:	e0bfff17 	ldw	r2,-4(fp)
  8184d0:	10840070 	cmpltui	r2,r2,4097
  8184d4:	1000021e 	bne	r2,zero,8184e0 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  8184d8:	00840004 	movi	r2,4096
  8184dc:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  8184e0:	e0fffe17 	ldw	r3,-8(fp)
  8184e4:	e0bfff17 	ldw	r2,-4(fp)
  8184e8:	1885883a 	add	r2,r3,r2
  8184ec:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  8184f0:	e0bffe17 	ldw	r2,-8(fp)
  8184f4:	e0bffc15 	stw	r2,-16(fp)
  8184f8:	00000506 	br	818510 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  8184fc:	e0bffc17 	ldw	r2,-16(fp)
  818500:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  818504:	e0bffc17 	ldw	r2,-16(fp)
  818508:	10800804 	addi	r2,r2,32
  81850c:	e0bffc15 	stw	r2,-16(fp)
  818510:	e0fffc17 	ldw	r3,-16(fp)
  818514:	e0bffd17 	ldw	r2,-12(fp)
  818518:	18bff836 	bltu	r3,r2,8184fc <__alt_mem_onchip_mem+0xff8104fc>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  81851c:	e0bffe17 	ldw	r2,-8(fp)
  818520:	108007cc 	andi	r2,r2,31
  818524:	10000226 	beq	r2,zero,818530 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  818528:	e0bffc17 	ldw	r2,-16(fp)
  81852c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  818530:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  818534:	0001883a 	nop
  818538:	e037883a 	mov	sp,fp
  81853c:	df000017 	ldw	fp,0(sp)
  818540:	dec00104 	addi	sp,sp,4
  818544:	f800283a 	ret

00818548 <atexit>:
  818548:	200b883a 	mov	r5,r4
  81854c:	000f883a 	mov	r7,zero
  818550:	000d883a 	mov	r6,zero
  818554:	0009883a 	mov	r4,zero
  818558:	08186101 	jmpi	818610 <__register_exitproc>

0081855c <exit>:
  81855c:	defffe04 	addi	sp,sp,-8
  818560:	000b883a 	mov	r5,zero
  818564:	dc000015 	stw	r16,0(sp)
  818568:	dfc00115 	stw	ra,4(sp)
  81856c:	2021883a 	mov	r16,r4
  818570:	08187280 	call	818728 <__call_exitprocs>
  818574:	008020b4 	movhi	r2,130
  818578:	10aad204 	addi	r2,r2,-21688
  81857c:	11000017 	ldw	r4,0(r2)
  818580:	20800f17 	ldw	r2,60(r4)
  818584:	10000126 	beq	r2,zero,81858c <exit+0x30>
  818588:	103ee83a 	callr	r2
  81858c:	8009883a 	mov	r4,r16
  818590:	08188a80 	call	8188a8 <_exit>

00818594 <memcmp>:
  818594:	01c000c4 	movi	r7,3
  818598:	3980192e 	bgeu	r7,r6,818600 <memcmp+0x6c>
  81859c:	2144b03a 	or	r2,r4,r5
  8185a0:	11c4703a 	and	r2,r2,r7
  8185a4:	10000f26 	beq	r2,zero,8185e4 <memcmp+0x50>
  8185a8:	20800003 	ldbu	r2,0(r4)
  8185ac:	28c00003 	ldbu	r3,0(r5)
  8185b0:	10c0151e 	bne	r2,r3,818608 <memcmp+0x74>
  8185b4:	31bfff84 	addi	r6,r6,-2
  8185b8:	01ffffc4 	movi	r7,-1
  8185bc:	00000406 	br	8185d0 <memcmp+0x3c>
  8185c0:	20800003 	ldbu	r2,0(r4)
  8185c4:	28c00003 	ldbu	r3,0(r5)
  8185c8:	31bfffc4 	addi	r6,r6,-1
  8185cc:	10c00e1e 	bne	r2,r3,818608 <memcmp+0x74>
  8185d0:	21000044 	addi	r4,r4,1
  8185d4:	29400044 	addi	r5,r5,1
  8185d8:	31fff91e 	bne	r6,r7,8185c0 <__alt_mem_onchip_mem+0xff8105c0>
  8185dc:	0005883a 	mov	r2,zero
  8185e0:	f800283a 	ret
  8185e4:	20c00017 	ldw	r3,0(r4)
  8185e8:	28800017 	ldw	r2,0(r5)
  8185ec:	18bfee1e 	bne	r3,r2,8185a8 <__alt_mem_onchip_mem+0xff8105a8>
  8185f0:	31bfff04 	addi	r6,r6,-4
  8185f4:	21000104 	addi	r4,r4,4
  8185f8:	29400104 	addi	r5,r5,4
  8185fc:	39bff936 	bltu	r7,r6,8185e4 <__alt_mem_onchip_mem+0xff8105e4>
  818600:	303fe91e 	bne	r6,zero,8185a8 <__alt_mem_onchip_mem+0xff8105a8>
  818604:	003ff506 	br	8185dc <__alt_mem_onchip_mem+0xff8105dc>
  818608:	10c5c83a 	sub	r2,r2,r3
  81860c:	f800283a 	ret

00818610 <__register_exitproc>:
  818610:	defffa04 	addi	sp,sp,-24
  818614:	dc000315 	stw	r16,12(sp)
  818618:	040020b4 	movhi	r16,130
  81861c:	842ad204 	addi	r16,r16,-21688
  818620:	80c00017 	ldw	r3,0(r16)
  818624:	dc400415 	stw	r17,16(sp)
  818628:	dfc00515 	stw	ra,20(sp)
  81862c:	18805217 	ldw	r2,328(r3)
  818630:	2023883a 	mov	r17,r4
  818634:	10003726 	beq	r2,zero,818714 <__register_exitproc+0x104>
  818638:	10c00117 	ldw	r3,4(r2)
  81863c:	010007c4 	movi	r4,31
  818640:	20c00e16 	blt	r4,r3,81867c <__register_exitproc+0x6c>
  818644:	1a000044 	addi	r8,r3,1
  818648:	8800221e 	bne	r17,zero,8186d4 <__register_exitproc+0xc4>
  81864c:	18c00084 	addi	r3,r3,2
  818650:	18c7883a 	add	r3,r3,r3
  818654:	18c7883a 	add	r3,r3,r3
  818658:	12000115 	stw	r8,4(r2)
  81865c:	10c7883a 	add	r3,r2,r3
  818660:	19400015 	stw	r5,0(r3)
  818664:	0005883a 	mov	r2,zero
  818668:	dfc00517 	ldw	ra,20(sp)
  81866c:	dc400417 	ldw	r17,16(sp)
  818670:	dc000317 	ldw	r16,12(sp)
  818674:	dec00604 	addi	sp,sp,24
  818678:	f800283a 	ret
  81867c:	00800034 	movhi	r2,0
  818680:	10800004 	addi	r2,r2,0
  818684:	10002626 	beq	r2,zero,818720 <__register_exitproc+0x110>
  818688:	01006404 	movi	r4,400
  81868c:	d9400015 	stw	r5,0(sp)
  818690:	d9800115 	stw	r6,4(sp)
  818694:	d9c00215 	stw	r7,8(sp)
  818698:	00000000 	call	0 <__alt_mem_sdram-0x800000>
  81869c:	d9400017 	ldw	r5,0(sp)
  8186a0:	d9800117 	ldw	r6,4(sp)
  8186a4:	d9c00217 	ldw	r7,8(sp)
  8186a8:	10001d26 	beq	r2,zero,818720 <__register_exitproc+0x110>
  8186ac:	81000017 	ldw	r4,0(r16)
  8186b0:	10000115 	stw	zero,4(r2)
  8186b4:	02000044 	movi	r8,1
  8186b8:	22405217 	ldw	r9,328(r4)
  8186bc:	0007883a 	mov	r3,zero
  8186c0:	12400015 	stw	r9,0(r2)
  8186c4:	20805215 	stw	r2,328(r4)
  8186c8:	10006215 	stw	zero,392(r2)
  8186cc:	10006315 	stw	zero,396(r2)
  8186d0:	883fde26 	beq	r17,zero,81864c <__alt_mem_onchip_mem+0xff81064c>
  8186d4:	18c9883a 	add	r4,r3,r3
  8186d8:	2109883a 	add	r4,r4,r4
  8186dc:	1109883a 	add	r4,r2,r4
  8186e0:	21802215 	stw	r6,136(r4)
  8186e4:	01800044 	movi	r6,1
  8186e8:	12406217 	ldw	r9,392(r2)
  8186ec:	30cc983a 	sll	r6,r6,r3
  8186f0:	4992b03a 	or	r9,r9,r6
  8186f4:	12406215 	stw	r9,392(r2)
  8186f8:	21c04215 	stw	r7,264(r4)
  8186fc:	01000084 	movi	r4,2
  818700:	893fd21e 	bne	r17,r4,81864c <__alt_mem_onchip_mem+0xff81064c>
  818704:	11006317 	ldw	r4,396(r2)
  818708:	218cb03a 	or	r6,r4,r6
  81870c:	11806315 	stw	r6,396(r2)
  818710:	003fce06 	br	81864c <__alt_mem_onchip_mem+0xff81064c>
  818714:	18805304 	addi	r2,r3,332
  818718:	18805215 	stw	r2,328(r3)
  81871c:	003fc606 	br	818638 <__alt_mem_onchip_mem+0xff810638>
  818720:	00bfffc4 	movi	r2,-1
  818724:	003fd006 	br	818668 <__alt_mem_onchip_mem+0xff810668>

00818728 <__call_exitprocs>:
  818728:	defff504 	addi	sp,sp,-44
  81872c:	df000915 	stw	fp,36(sp)
  818730:	dd400615 	stw	r21,24(sp)
  818734:	dc800315 	stw	r18,12(sp)
  818738:	dfc00a15 	stw	ra,40(sp)
  81873c:	ddc00815 	stw	r23,32(sp)
  818740:	dd800715 	stw	r22,28(sp)
  818744:	dd000515 	stw	r20,20(sp)
  818748:	dcc00415 	stw	r19,16(sp)
  81874c:	dc400215 	stw	r17,8(sp)
  818750:	dc000115 	stw	r16,4(sp)
  818754:	d9000015 	stw	r4,0(sp)
  818758:	2839883a 	mov	fp,r5
  81875c:	04800044 	movi	r18,1
  818760:	057fffc4 	movi	r21,-1
  818764:	008020b4 	movhi	r2,130
  818768:	10aad204 	addi	r2,r2,-21688
  81876c:	12000017 	ldw	r8,0(r2)
  818770:	45005217 	ldw	r20,328(r8)
  818774:	44c05204 	addi	r19,r8,328
  818778:	a0001c26 	beq	r20,zero,8187ec <__call_exitprocs+0xc4>
  81877c:	a0800117 	ldw	r2,4(r20)
  818780:	15ffffc4 	addi	r23,r2,-1
  818784:	b8000d16 	blt	r23,zero,8187bc <__call_exitprocs+0x94>
  818788:	14000044 	addi	r16,r2,1
  81878c:	8421883a 	add	r16,r16,r16
  818790:	8421883a 	add	r16,r16,r16
  818794:	84402004 	addi	r17,r16,128
  818798:	a463883a 	add	r17,r20,r17
  81879c:	a421883a 	add	r16,r20,r16
  8187a0:	e0001e26 	beq	fp,zero,81881c <__call_exitprocs+0xf4>
  8187a4:	80804017 	ldw	r2,256(r16)
  8187a8:	e0801c26 	beq	fp,r2,81881c <__call_exitprocs+0xf4>
  8187ac:	bdffffc4 	addi	r23,r23,-1
  8187b0:	843fff04 	addi	r16,r16,-4
  8187b4:	8c7fff04 	addi	r17,r17,-4
  8187b8:	bd7ff91e 	bne	r23,r21,8187a0 <__alt_mem_onchip_mem+0xff8107a0>
  8187bc:	00800034 	movhi	r2,0
  8187c0:	10800004 	addi	r2,r2,0
  8187c4:	10000926 	beq	r2,zero,8187ec <__call_exitprocs+0xc4>
  8187c8:	a0800117 	ldw	r2,4(r20)
  8187cc:	1000301e 	bne	r2,zero,818890 <__call_exitprocs+0x168>
  8187d0:	a0800017 	ldw	r2,0(r20)
  8187d4:	10003226 	beq	r2,zero,8188a0 <__call_exitprocs+0x178>
  8187d8:	a009883a 	mov	r4,r20
  8187dc:	98800015 	stw	r2,0(r19)
  8187e0:	00000000 	call	0 <__alt_mem_sdram-0x800000>
  8187e4:	9d000017 	ldw	r20,0(r19)
  8187e8:	a03fe41e 	bne	r20,zero,81877c <__alt_mem_onchip_mem+0xff81077c>
  8187ec:	dfc00a17 	ldw	ra,40(sp)
  8187f0:	df000917 	ldw	fp,36(sp)
  8187f4:	ddc00817 	ldw	r23,32(sp)
  8187f8:	dd800717 	ldw	r22,28(sp)
  8187fc:	dd400617 	ldw	r21,24(sp)
  818800:	dd000517 	ldw	r20,20(sp)
  818804:	dcc00417 	ldw	r19,16(sp)
  818808:	dc800317 	ldw	r18,12(sp)
  81880c:	dc400217 	ldw	r17,8(sp)
  818810:	dc000117 	ldw	r16,4(sp)
  818814:	dec00b04 	addi	sp,sp,44
  818818:	f800283a 	ret
  81881c:	a0800117 	ldw	r2,4(r20)
  818820:	80c00017 	ldw	r3,0(r16)
  818824:	10bfffc4 	addi	r2,r2,-1
  818828:	15c01426 	beq	r2,r23,81887c <__call_exitprocs+0x154>
  81882c:	80000015 	stw	zero,0(r16)
  818830:	183fde26 	beq	r3,zero,8187ac <__alt_mem_onchip_mem+0xff8107ac>
  818834:	95c8983a 	sll	r4,r18,r23
  818838:	a0806217 	ldw	r2,392(r20)
  81883c:	a5800117 	ldw	r22,4(r20)
  818840:	2084703a 	and	r2,r4,r2
  818844:	10000b26 	beq	r2,zero,818874 <__call_exitprocs+0x14c>
  818848:	a0806317 	ldw	r2,396(r20)
  81884c:	2088703a 	and	r4,r4,r2
  818850:	20000c1e 	bne	r4,zero,818884 <__call_exitprocs+0x15c>
  818854:	89400017 	ldw	r5,0(r17)
  818858:	d9000017 	ldw	r4,0(sp)
  81885c:	183ee83a 	callr	r3
  818860:	a0800117 	ldw	r2,4(r20)
  818864:	15bfbf1e 	bne	r2,r22,818764 <__alt_mem_onchip_mem+0xff810764>
  818868:	98800017 	ldw	r2,0(r19)
  81886c:	153fcf26 	beq	r2,r20,8187ac <__alt_mem_onchip_mem+0xff8107ac>
  818870:	003fbc06 	br	818764 <__alt_mem_onchip_mem+0xff810764>
  818874:	183ee83a 	callr	r3
  818878:	003ff906 	br	818860 <__alt_mem_onchip_mem+0xff810860>
  81887c:	a5c00115 	stw	r23,4(r20)
  818880:	003feb06 	br	818830 <__alt_mem_onchip_mem+0xff810830>
  818884:	89000017 	ldw	r4,0(r17)
  818888:	183ee83a 	callr	r3
  81888c:	003ff406 	br	818860 <__alt_mem_onchip_mem+0xff810860>
  818890:	a0800017 	ldw	r2,0(r20)
  818894:	a027883a 	mov	r19,r20
  818898:	1029883a 	mov	r20,r2
  81889c:	003fb606 	br	818778 <__alt_mem_onchip_mem+0xff810778>
  8188a0:	0005883a 	mov	r2,zero
  8188a4:	003ffb06 	br	818894 <__alt_mem_onchip_mem+0xff810894>

008188a8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  8188a8:	defffd04 	addi	sp,sp,-12
  8188ac:	df000215 	stw	fp,8(sp)
  8188b0:	df000204 	addi	fp,sp,8
  8188b4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  8188b8:	0001883a 	nop
  8188bc:	e0bfff17 	ldw	r2,-4(fp)
  8188c0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  8188c4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  8188c8:	10000226 	beq	r2,zero,8188d4 <_exit+0x2c>
    ALT_SIM_FAIL();
  8188cc:	002af070 	cmpltui	zero,zero,43969
  8188d0:	00000106 	br	8188d8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  8188d4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  8188d8:	003fff06 	br	8188d8 <__alt_mem_onchip_mem+0xff8108d8>
